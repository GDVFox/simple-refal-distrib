// Automatically generated file. Don't edit!
#include "refalrts.h"


// identifier #TAlt
template <typename SREFAL_PARAM_INT>
struct ident_TAlt {
  static const char *name() {
    return "TAlt";
  }
};

// identifier #TAny
template <typename SREFAL_PARAM_INT>
struct ident_TAny {
  static const char *name() {
    return "TAny";
  }
};

// identifier #TArrow
template <typename SREFAL_PARAM_INT>
struct ident_TArrow {
  static const char *name() {
    return "TArrow";
  }
};

// identifier #TBegin
template <typename SREFAL_PARAM_INT>
struct ident_TBegin {
  static const char *name() {
    return "TBegin";
  }
};

// identifier #TChar
template <typename SREFAL_PARAM_INT>
struct ident_TChar {
  static const char *name() {
    return "TChar";
  }
};

// identifier #TCloseBracket
template <typename SREFAL_PARAM_INT>
struct ident_TCloseBracket {
  static const char *name() {
    return "TCloseBracket";
  }
};

// identifier #TComma
template <typename SREFAL_PARAM_INT>
struct ident_TComma {
  static const char *name() {
    return "TComma";
  }
};

// identifier #TEOF
template <typename SREFAL_PARAM_INT>
struct ident_TEOF {
  static const char *name() {
    return "TEOF";
  }
};

// identifier #TEnd
template <typename SREFAL_PARAM_INT>
struct ident_TEnd {
  static const char *name() {
    return "TEnd";
  }
};

// identifier #TEndGroup
template <typename SREFAL_PARAM_INT>
struct ident_TEndGroup {
  static const char *name() {
    return "TEndGroup";
  }
};

// identifier #TEndRegexp
template <typename SREFAL_PARAM_INT>
struct ident_TEndRegexp {
  static const char *name() {
    return "TEndRegexp";
  }
};

// identifier #TEquals
template <typename SREFAL_PARAM_INT>
struct ident_TEquals {
  static const char *name() {
    return "TEquals";
  }
};

// identifier #TError
template <typename SREFAL_PARAM_INT>
struct ident_TError {
  static const char *name() {
    return "TError";
  }
};

// identifier #TErrorMessage
template <typename SREFAL_PARAM_INT>
struct ident_TErrorMessage {
  static const char *name() {
    return "TErrorMessage";
  }
};

// identifier #TGenericEscChar
template <typename SREFAL_PARAM_INT>
struct ident_TGenericEscChar {
  static const char *name() {
    return "TGenericEscChar";
  }
};

// identifier #TGroupRange
template <typename SREFAL_PARAM_INT>
struct ident_TGroupRange {
  static const char *name() {
    return "TGroupRange";
  }
};

// identifier #TInclude
template <typename SREFAL_PARAM_INT>
struct ident_TInclude {
  static const char *name() {
    return "TInclude";
  }
};

// identifier #TInvertGroup
template <typename SREFAL_PARAM_INT>
struct ident_TInvertGroup {
  static const char *name() {
    return "TInvertGroup";
  }
};

// identifier #TName
template <typename SREFAL_PARAM_INT>
struct ident_TName {
  static const char *name() {
    return "TName";
  }
};

// identifier #TNewLine
template <typename SREFAL_PARAM_INT>
struct ident_TNewLine {
  static const char *name() {
    return "TNewLine";
  }
};

// identifier #TOneMany
template <typename SREFAL_PARAM_INT>
struct ident_TOneMany {
  static const char *name() {
    return "TOneMany";
  }
};

// identifier #TOpenBracket
template <typename SREFAL_PARAM_INT>
struct ident_TOpenBracket {
  static const char *name() {
    return "TOpenBracket";
  }
};

// identifier #TOptional
template <typename SREFAL_PARAM_INT>
struct ident_TOptional {
  static const char *name() {
    return "TOptional";
  }
};

// identifier #TQuantifier
template <typename SREFAL_PARAM_INT>
struct ident_TQuantifier {
  static const char *name() {
    return "TQuantifier";
  }
};

// identifier #TSkip
template <typename SREFAL_PARAM_INT>
struct ident_TSkip {
  static const char *name() {
    return "TSkip";
  }
};

// identifier #TSpecChar
template <typename SREFAL_PARAM_INT>
struct ident_TSpecChar {
  static const char *name() {
    return "TSpecChar";
  }
};

// identifier #TStartGroup
template <typename SREFAL_PARAM_INT>
struct ident_TStartGroup {
  static const char *name() {
    return "TStartGroup";
  }
};

// identifier #TStartRegexp
template <typename SREFAL_PARAM_INT>
struct ident_TStartRegexp {
  static const char *name() {
    return "TStartRegexp";
  }
};

// identifier #TStateEnd
template <typename SREFAL_PARAM_INT>
struct ident_TStateEnd {
  static const char *name() {
    return "TStateEnd";
  }
};

// identifier #TStateStart
template <typename SREFAL_PARAM_INT>
struct ident_TStateStart {
  static const char *name() {
    return "TStateStart";
  }
};

// identifier #TUnexpecteChar
template <typename SREFAL_PARAM_INT>
struct ident_TUnexpecteChar {
  static const char *name() {
    return "TUnexpecteChar";
  }
};

// identifier #TZeroMany
template <typename SREFAL_PARAM_INT>
struct ident_TZeroMany {
  static const char *name() {
    return "TZeroMany";
  }
};

// identifier #TkHexNumber
template <typename SREFAL_PARAM_INT>
struct ident_TkHexNumber {
  static const char *name() {
    return "TkHexNumber";
  }
};

// identifier #TkNumber
template <typename SREFAL_PARAM_INT>
struct ident_TkNumber {
  static const char *name() {
    return "TkNumber";
  }
};

// identifier #TkOctNumber
template <typename SREFAL_PARAM_INT>
struct ident_TkOctNumber {
  static const char *name() {
    return "TkOctNumber";
  }
};

// identifier #TokenError
template <typename SREFAL_PARAM_INT>
struct ident_TokenError {
  static const char *name() {
    return "TokenError";
  }
};

extern refalrts::RefalFunction& Fetch;
extern refalrts::RefalFunction& Seq;
extern refalrts::RefalFunction& Reduce;
extern refalrts::RefalFunction& Map;
extern refalrts::RefalFunction& MapReduce;
extern refalrts::RefalFunction& Inc;
extern refalrts::RefalFunction& EscapeString;
extern refalrts::RefalFunction& Chr;
extern refalrts::RefalFunction& StrFromInt;
extern refalrts::RefalFunction& Mul;
extern refalrts::RefalFunction& Add;
extern refalrts::RefalFunction& Flex_TextFromToken;
namespace /* unnamed */ {
extern refalrts::RefalFunction& gen_Flex_Tokens_L1;
} // unnamed namespace

namespace /* unnamed */ {
extern refalrts::RefalFunction& gen_Flex_Tokens_L2;
} // unnamed namespace

namespace /* unnamed */ {
extern refalrts::RefalFunction& gen_Flex_Tokens_L3;
} // unnamed namespace

namespace /* unnamed */ {
extern refalrts::RefalFunction& gen_Flex_Tokens_L4;
} // unnamed namespace

extern refalrts::RefalFunction& Flex_Tokens;
namespace /* unnamed */ {
extern refalrts::RefalFunction& LowLevelTokens;
} // unnamed namespace

namespace /* unnamed */ {
extern refalrts::RefalFunction& SecondPass;
} // unnamed namespace

namespace /* unnamed */ {
extern refalrts::RefalFunction& gen_CharFromNum_L1;
} // unnamed namespace

namespace /* unnamed */ {
extern refalrts::RefalFunction& CharFromNum;
} // unnamed namespace

namespace /* unnamed */ {
extern refalrts::RefalFunction& gen_DigitFromChar_L1;
} // unnamed namespace

namespace /* unnamed */ {
extern refalrts::RefalFunction& DigitFromChar;
} // unnamed namespace

namespace /* unnamed */ {
extern refalrts::RefalFunction& Root;
} // unnamed namespace

namespace /* unnamed */ {
extern refalrts::RefalFunction& ReadRegexp;
} // unnamed namespace

namespace /* unnamed */ {
extern refalrts::RefalFunction& ReadArrow;
} // unnamed namespace

namespace /* unnamed */ {
extern refalrts::RefalFunction& Number;
} // unnamed namespace

namespace /* unnamed */ {
extern refalrts::RefalFunction& Name;
} // unnamed namespace

namespace /* unnamed */ {
extern refalrts::RefalFunction& ErrorMessage;
} // unnamed namespace

namespace /* unnamed */ {
extern refalrts::RefalFunction& EscRegexp;
} // unnamed namespace

namespace /* unnamed */ {
extern refalrts::RefalFunction& StartGroup;
} // unnamed namespace

namespace /* unnamed */ {
extern refalrts::RefalFunction& ReadInclude;
} // unnamed namespace

namespace /* unnamed */ {
extern refalrts::RefalFunction& EscRegexp_XCode;
} // unnamed namespace

namespace /* unnamed */ {
extern refalrts::RefalFunction& EscRegexp_OCode;
} // unnamed namespace

namespace /* unnamed */ {
extern refalrts::RefalFunction& ReadGroup;
} // unnamed namespace

namespace /* unnamed */ {
extern refalrts::RefalFunction& ReadBody;
} // unnamed namespace

namespace /* unnamed */ {
extern refalrts::RefalFunction& EscRegexp_OCode_C1;
} // unnamed namespace

namespace /* unnamed */ {
extern refalrts::RefalFunction& EscGroup;
} // unnamed namespace

namespace /* unnamed */ {
extern refalrts::RefalFunction& EscGroup_XCode;
} // unnamed namespace

namespace /* unnamed */ {
extern refalrts::RefalFunction& EscGroup_OCode;
} // unnamed namespace

namespace /* unnamed */ {
extern refalrts::RefalFunction& EscGroup_OCode_C1;
} // unnamed namespace


#ifdef INTERPRET
namespace /* unnamed */ {
  namespace scope_Flex_TextFromToken {
    static const char *filename = "Flex-Lexer.cpp";
    static refalrts::RefalFunction *functions[] = {
      & EscapeString
    };
    static const refalrts::RefalIdentifier idents[] = {
      & ident_TEOF<int>::name,
      & ident_TStateEnd<int>::name,
      & ident_TComma<int>::name,
      & ident_TStateStart<int>::name,
      & ident_TError<int>::name,
      & ident_TGroupRange<int>::name,
      & ident_TInvertGroup<int>::name,
      & ident_TOneMany<int>::name,
      & ident_TZeroMany<int>::name,
      & ident_TOptional<int>::name,
      & ident_TEnd<int>::name,
      & ident_TBegin<int>::name,
      & ident_TAlt<int>::name,
      & ident_TCloseBracket<int>::name,
      & ident_TOpenBracket<int>::name,
      & ident_TAny<int>::name,
      & ident_TInclude<int>::name,
      & ident_TEndGroup<int>::name,
      & ident_TStartGroup<int>::name,
      & ident_TEndRegexp<int>::name,
      & ident_TStartRegexp<int>::name,
      & ident_TChar<int>::name,
      & ident_TErrorMessage<int>::name,
      & ident_TSkip<int>::name,
      & ident_TArrow<int>::name,
      & ident_TEquals<int>::name,
      & ident_TName<int>::name
    };
    using refalrts::numbers;
    static const refalrts::StringItem strings[] = {
      {"ror ", 4},
      {"n ", 2},
      {"(en", 3},
      {"(star", 5},
      {" error messa", 12},
      {"Use", 3}
    };
    static const refalrts::RASLCommand raa[] = {
      {refalrts::icThisIsGeneratedFunction, 0, 0, 0},
      {refalrts::icLoadConstants, 0, 0, 0},
      {refalrts::icReserveBacktrackStack, 26, 0, 0},
      {refalrts::icIssueMemory, 18, 0, 0},
      //FAST GEN: ( e.$ )
      //GLOBAL GEN: ( s.$ e.$ )
      // </0 & Flex-TextFromToken/4 (/7 s.idxB#0/9 e.idxBV#0/5 )/8 >/1
      {refalrts::icInitB0_Lite, 0, 0, 0},
      {refalrts::icCallSaveLeft, 0, 2, 0},
      {refalrts::icBracketLeftSave, 0, 5, 2},
      {refalrts::icEmpty, 0, 0, 2},
      {refalrts::icsVarLeft, 0, 9, 5},
      // closed e.idxBV#0 as range 5
      {refalrts::icOnFailGoTo, +14, 0, 0},
      // ( # TName t.idx e.idx )
      // </0 & Flex-TextFromToken/4 (/7 # TName/9 t.Pos#1/10 e.Name#1/5 )/8 >/1
      {refalrts::icIdentTerm, 0, 26, 9},
      {refalrts::icSave, 0, 16, 5},
      {refalrts::ictVarLeftSave, 0, 10, 16},
      // closed e.Name#1 as range 16(5)
      //DEBUG: t.Pos#1: 10
      //DEBUG: e.Name#1: 5
      {refalrts::icEmptyResult, 0, 0, 0},
      //TRASH: {REMOVED TILE} t.Pos#1/10 {REMOVED TILE} )/8 {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ HalfReuse: 'n'/0 HalfReuse: 'a'/4 HalfReuse: 'm'/7 HalfReuse: 'e'/9 } Tile{ HalfReuse: ' '/1 } Tile{ AsIs: e.Name#1/16(5) } Tile{ ]] }
      {refalrts::icReinitChar, 0, 'n', 0},
      {refalrts::icReinitChar, 0, 'a', 4},
      {refalrts::icReinitChar, 0, 'm', 7},
      {refalrts::icReinitChar, 0, 'e', 9},
      {refalrts::icReinitChar, 0, ' ', 1},
      {refalrts::icSetResRightEdge, 0, 0, 0},
      {refalrts::icSpliceEVar, 0, 0, 16},
      {refalrts::icSpliceTile, 1, 1, 0},
      {refalrts::icTrash, 0, 0, 9},
      {refalrts::icNextStep, 0, 0, 0},
      {refalrts::icProfilerStopSentence, 0, 0, 0},
      {refalrts::icOnFailGoTo, +11, 0, 0},
      // ( # TEquals t.idx )
      // </0 & Flex-TextFromToken/4 (/7 # TEquals/9 t.Pos#1/10 )/8 >/1
      {refalrts::icIdentTerm, 0, 25, 9},
      {refalrts::icSave, 0, 16, 5},
      {refalrts::ictVarLeftSave, 0, 10, 16},
      {refalrts::icEmpty, 0, 0, 16},
      //DEBUG: t.Pos#1: 10
      {refalrts::icEmptyResult, 0, 0, 0},
      //TRASH: {REMOVED TILE} # TEquals/9 t.Pos#1/10 )/8 >/1 {REMOVED TILE}
      //RESULT: Tile{ [[ HalfReuse: '\"'/0 HalfReuse: '='/4 HalfReuse: '\"'/7 } Tile{ ]] }
      {refalrts::icReinitChar, 0, '\"', 0},
      {refalrts::icReinitChar, 0, '=', 4},
      {refalrts::icReinitChar, 0, '\"', 7},
      {refalrts::icSetResRightEdge, 0, 0, 0},
      {refalrts::icTrash, 0, 0, 7},
      {refalrts::icNextStep, 0, 0, 0},
      {refalrts::icProfilerStopSentence, 0, 0, 0},
      {refalrts::icOnFailGoTo, +12, 0, 0},
      // ( # TArrow t.idx )
      // </0 & Flex-TextFromToken/4 (/7 # TArrow/9 t.Pos#1/10 )/8 >/1
      {refalrts::icIdentTerm, 0, 24, 9},
      {refalrts::icSave, 0, 16, 5},
      {refalrts::ictVarLeftSave, 0, 10, 16},
      {refalrts::icEmpty, 0, 0, 16},
      //DEBUG: t.Pos#1: 10
      {refalrts::icEmptyResult, 0, 0, 0},
      //TRASH: {REMOVED TILE} t.Pos#1/10 )/8 >/1 {REMOVED TILE}
      //RESULT: Tile{ [[ HalfReuse: '\"'/0 HalfReuse: '-'/4 HalfReuse: '>'/7 HalfReuse: '\"'/9 } Tile{ ]] }
      {refalrts::icReinitChar, 0, '\"', 0},
      {refalrts::icReinitChar, 0, '-', 4},
      {refalrts::icReinitChar, 0, '>', 7},
      {refalrts::icReinitChar, 0, '\"', 9},
      {refalrts::icSetResRightEdge, 0, 0, 0},
      {refalrts::icTrash, 0, 0, 9},
      {refalrts::icNextStep, 0, 0, 0},
      {refalrts::icProfilerStopSentence, 0, 0, 0},
      {refalrts::icOnFailGoTo, +9, 0, 0},
      // ( # TSkip t.idx )
      // </0 & Flex-TextFromToken/4 (/7 # TSkip/9 t.Pos#1/10 )/8 >/1
      {refalrts::icIdentTerm, 0, 23, 9},
      {refalrts::icSave, 0, 16, 5},
      {refalrts::ictVarLeftSave, 0, 10, 16},
      {refalrts::icEmpty, 0, 0, 16},
      //DEBUG: t.Pos#1: 10
      {refalrts::icEmptyResult, 0, 0, 0},
      //TRASH: {REMOVED TILE} </0 & Flex-TextFromToken/4 (/7 # TSkip/9 t.Pos#1/10 )/8 {REMOVED TILE}
      //RESULT: Tile{ [[ } Tile{ HalfReuse: '-'/1 ]] }
      {refalrts::icReinitChar, 0, '-', 1},
      {refalrts::icSetRes, 0, 0, 1},
      {refalrts::icTrashLeftEdge, 0, 0, 0},
      {refalrts::icNextStep, 0, 0, 0},
      {refalrts::icProfilerStopSentence, 0, 0, 0},
      {refalrts::icOnFailGoTo, +16, 0, 0},
      // ( # TErrorMessage e.idx )
      // </0 & Flex-TextFromToken/4 (/7 # TErrorMessage/9 e.Message#1/5 )/8 >/1
      {refalrts::icIdentTerm, 0, 22, 9},
      // closed e.Message#1 as range 5
      //DEBUG: e.Message#1: 5
      {refalrts::icEmptyResult, 0, 0, 0},
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ }"Use"/10 Tile{ HalfReuse: 'r'/1 }" error messa"/12 Tile{ HalfReuse: 'g'/0 HalfReuse: 'e'/4 HalfReuse: ' '/7 HalfReuse: '\"'/9 AsIs: e.Message#1/5 HalfReuse: '\"'/8 } Tile{ ]] }
      {refalrts::icAllocString, 0, 5, 10},
      {refalrts::icAllocString, 0, 4, 12},
      {refalrts::icReinitChar, 0, 'r', 1},
      {refalrts::icReinitChar, 0, 'g', 0},
      {refalrts::icReinitChar, 0, 'e', 4},
      {refalrts::icReinitChar, 0, ' ', 7},
      {refalrts::icReinitChar, 0, '\"', 9},
      {refalrts::icReinitChar, 0, '\"', 8},
      {refalrts::icSetResRightEdge, 0, 0, 0},
      {refalrts::icSpliceTile, 0, 8, 0},
      {refalrts::icSpliceTile, 12, 13, 0},
      {refalrts::icSpliceTile, 1, 1, 0},
      {refalrts::icSpliceTile, 10, 11, 0},
      {refalrts::icNextStep, 0, 0, 0},
      {refalrts::icProfilerStopSentence, 0, 0, 0},
      {refalrts::icOnFailGoTo, +16, 0, 0},
      // ( # TChar t.idx s.idx )
      // </0 & Flex-TextFromToken/4 (/7 # TChar/9 t.Pos#1/10 s.Char#1/12 )/8 >/1
      {refalrts::icIdentTerm, 0, 21, 9},
      {refalrts::icSave, 0, 16, 5},
      {refalrts::ictVarLeftSave, 0, 10, 16},
      {refalrts::icsVarLeft, 0, 12, 16},
      {refalrts::icEmpty, 0, 0, 16},
      //DEBUG: t.Pos#1: 10
      //DEBUG: s.Char#1: 12
      {refalrts::icEmptyResult, 0, 0, 0},
      //TRASH: {REMOVED TILE} # TChar/9 t.Pos#1/10 {REMOVED TILE}
      //RESULT: Tile{ [[ HalfReuse: '\''/0 HalfReuse: </4 HalfReuse: & EscapeString/7 } Tile{ AsIs: s.Char#1/12 HalfReuse: >/8 HalfReuse: '\''/1 ]] }
      {refalrts::icReinitChar, 0, '\'', 0},
      {refalrts::icReinitBracket, 0, refalrts::ibOpenCall, 4},
      {refalrts::icReinitFunc, 0, 0, 7},
      {refalrts::icReinitBracket, 0, refalrts::ibCloseCall, 8},
      {refalrts::icReinitChar, 0, '\'', 1},
      {refalrts::icPushStack, 0, 0, 8},
      {refalrts::icPushStack, 0, 0, 4},
      {refalrts::icSetRes, 0, 0, 12},
      {refalrts::icTrash, 0, 0, 7},
      {refalrts::icNextStep, 0, 0, 0},
      {refalrts::icProfilerStopSentence, 0, 0, 0},
      {refalrts::icOnFailGoTo, +16, 0, 0},
      // ( # TStartRegexp t.idx )
      // </0 & Flex-TextFromToken/4 (/7 # TStartRegexp/9 t.Pos#1/10 )/8 >/1
      {refalrts::icIdentTerm, 0, 20, 9},
      {refalrts::icSave, 0, 16, 5},
      {refalrts::ictVarLeftSave, 0, 10, 16},
      {refalrts::icEmpty, 0, 0, 16},
      //DEBUG: t.Pos#1: 10
      {refalrts::icEmptyResult, 0, 0, 0},
      //TRASH: {REMOVED TILE} t.Pos#1/10 {REMOVED TILE}
      //RESULT: Tile{ [[ HalfReuse: '\"'/0 HalfReuse: '/'/4 HalfReuse: '\"'/7 HalfReuse: ' '/9 }"(star"/12 Tile{ HalfReuse: 't'/8 HalfReuse: ')'/1 ]] }
      {refalrts::icAllocString, 0, 3, 12},
      {refalrts::icReinitChar, 0, '\"', 0},
      {refalrts::icReinitChar, 0, '/', 4},
      {refalrts::icReinitChar, 0, '\"', 7},
      {refalrts::icReinitChar, 0, ' ', 9},
      {refalrts::icReinitChar, 0, 't', 8},
      {refalrts::icReinitChar, 0, ')', 1},
      {refalrts::icSetRes, 0, 0, 8},
      {refalrts::icSpliceTile, 12, 13, 0},
      {refalrts::icTrash, 0, 0, 9},
      {refalrts::icNextStep, 0, 0, 0},
      {refalrts::icProfilerStopSentence, 0, 0, 0},
      {refalrts::icOnFailGoTo, +16, 0, 0},
      // ( # TEndRegexp t.idx )
      // </0 & Flex-TextFromToken/4 (/7 # TEndRegexp/9 t.Pos#1/10 )/8 >/1
      {refalrts::icIdentTerm, 0, 19, 9},
      {refalrts::icSave, 0, 16, 5},
      {refalrts::ictVarLeftSave, 0, 10, 16},
      {refalrts::icEmpty, 0, 0, 16},
      //DEBUG: t.Pos#1: 10
      {refalrts::icEmptyResult, 0, 0, 0},
      //TRASH: {REMOVED TILE} t.Pos#1/10 {REMOVED TILE}
      //RESULT: Tile{ [[ HalfReuse: '\"'/0 HalfReuse: '/'/4 HalfReuse: '\"'/7 HalfReuse: ' '/9 }"(en"/12 Tile{ HalfReuse: 'd'/8 HalfReuse: ')'/1 ]] }
      {refalrts::icAllocString, 0, 2, 12},
      {refalrts::icReinitChar, 0, '\"', 0},
      {refalrts::icReinitChar, 0, '/', 4},
      {refalrts::icReinitChar, 0, '\"', 7},
      {refalrts::icReinitChar, 0, ' ', 9},
      {refalrts::icReinitChar, 0, 'd', 8},
      {refalrts::icReinitChar, 0, ')', 1},
      {refalrts::icSetRes, 0, 0, 8},
      {refalrts::icSpliceTile, 12, 13, 0},
      {refalrts::icTrash, 0, 0, 9},
      {refalrts::icNextStep, 0, 0, 0},
      {refalrts::icProfilerStopSentence, 0, 0, 0},
      {refalrts::icOnFailGoTo, +11, 0, 0},
      // ( # TStartGroup t.idx )
      // </0 & Flex-TextFromToken/4 (/7 # TStartGroup/9 t.Pos#1/10 )/8 >/1
      {refalrts::icIdentTerm, 0, 18, 9},
      {refalrts::icSave, 0, 16, 5},
      {refalrts::ictVarLeftSave, 0, 10, 16},
      {refalrts::icEmpty, 0, 0, 16},
      //DEBUG: t.Pos#1: 10
      {refalrts::icEmptyResult, 0, 0, 0},
      //TRASH: {REMOVED TILE} # TStartGroup/9 t.Pos#1/10 )/8 >/1 {REMOVED TILE}
      //RESULT: Tile{ [[ HalfReuse: '\"'/0 HalfReuse: '['/4 HalfReuse: '\"'/7 } Tile{ ]] }
      {refalrts::icReinitChar, 0, '\"', 0},
      {refalrts::icReinitChar, 0, '[', 4},
      {refalrts::icReinitChar, 0, '\"', 7},
      {refalrts::icSetResRightEdge, 0, 0, 0},
      {refalrts::icTrash, 0, 0, 7},
      {refalrts::icNextStep, 0, 0, 0},
      {refalrts::icProfilerStopSentence, 0, 0, 0},
      {refalrts::icOnFailGoTo, +11, 0, 0},
      // ( # TEndGroup t.idx )
      // </0 & Flex-TextFromToken/4 (/7 # TEndGroup/9 t.Pos#1/10 )/8 >/1
      {refalrts::icIdentTerm, 0, 17, 9},
      {refalrts::icSave, 0, 16, 5},
      {refalrts::ictVarLeftSave, 0, 10, 16},
      {refalrts::icEmpty, 0, 0, 16},
      //DEBUG: t.Pos#1: 10
      {refalrts::icEmptyResult, 0, 0, 0},
      //TRASH: {REMOVED TILE} # TEndGroup/9 t.Pos#1/10 )/8 >/1 {REMOVED TILE}
      //RESULT: Tile{ [[ HalfReuse: '\"'/0 HalfReuse: ']'/4 HalfReuse: '\"'/7 } Tile{ ]] }
      {refalrts::icReinitChar, 0, '\"', 0},
      {refalrts::icReinitChar, 0, ']', 4},
      {refalrts::icReinitChar, 0, '\"', 7},
      {refalrts::icSetResRightEdge, 0, 0, 0},
      {refalrts::icTrash, 0, 0, 7},
      {refalrts::icNextStep, 0, 0, 0},
      {refalrts::icProfilerStopSentence, 0, 0, 0},
      {refalrts::icOnFailGoTo, +10, 0, 0},
      // ( # TInclude t.idx e.idx )
      // </0 & Flex-TextFromToken/4 (/7 # TInclude/9 t.Pos#1/10 e.Name#1/5 )/8 >/1
      {refalrts::icIdentTerm, 0, 16, 9},
      {refalrts::icSave, 0, 16, 5},
      {refalrts::ictVarLeftSave, 0, 10, 16},
      // closed e.Name#1 as range 16(5)
      //DEBUG: t.Pos#1: 10
      //DEBUG: e.Name#1: 5
      {refalrts::icEmptyResult, 0, 0, 0},
      //TRASH: {REMOVED TILE} & Flex-TextFromToken/4 (/7 # TInclude/9 t.Pos#1/10 {REMOVED TILE} )/8 {REMOVED TILE}
      //RESULT: Tile{ [[ HalfReuse: '{'/0 } Tile{ AsIs: e.Name#1/16(5) } Tile{ HalfReuse: '}'/1 ]] }
      {refalrts::icReinitChar, 0, '{', 0},
      {refalrts::icReinitChar, 0, '}', 1},
      {refalrts::icSetRes, 0, 0, 1},
      {refalrts::icSpliceEVar, 0, 0, 16},
      {refalrts::icTrash, 0, 0, 0},
      {refalrts::icNextStep, 0, 0, 0},
      {refalrts::icProfilerStopSentence, 0, 0, 0},
      {refalrts::icOnFailGoTo, +11, 0, 0},
      // ( # TAny t.idx )
      // </0 & Flex-TextFromToken/4 (/7 # TAny/9 t.Pos#1/10 )/8 >/1
      {refalrts::icIdentTerm, 0, 15, 9},
      {refalrts::icSave, 0, 16, 5},
      {refalrts::ictVarLeftSave, 0, 10, 16},
      {refalrts::icEmpty, 0, 0, 16},
      //DEBUG: t.Pos#1: 10
      {refalrts::icEmptyResult, 0, 0, 0},
      //TRASH: {REMOVED TILE} # TAny/9 t.Pos#1/10 )/8 >/1 {REMOVED TILE}
      //RESULT: Tile{ [[ HalfReuse: '\"'/0 HalfReuse: '.'/4 HalfReuse: '\"'/7 } Tile{ ]] }
      {refalrts::icReinitChar, 0, '\"', 0},
      {refalrts::icReinitChar, 0, '.', 4},
      {refalrts::icReinitChar, 0, '\"', 7},
      {refalrts::icSetResRightEdge, 0, 0, 0},
      {refalrts::icTrash, 0, 0, 7},
      {refalrts::icNextStep, 0, 0, 0},
      {refalrts::icProfilerStopSentence, 0, 0, 0},
      {refalrts::icOnFailGoTo, +11, 0, 0},
      // ( # TOpenBracket t.idx )
      // </0 & Flex-TextFromToken/4 (/7 # TOpenBracket/9 t.Pos#1/10 )/8 >/1
      {refalrts::icIdentTerm, 0, 14, 9},
      {refalrts::icSave, 0, 16, 5},
      {refalrts::ictVarLeftSave, 0, 10, 16},
      {refalrts::icEmpty, 0, 0, 16},
      //DEBUG: t.Pos#1: 10
      {refalrts::icEmptyResult, 0, 0, 0},
      //TRASH: {REMOVED TILE} # TOpenBracket/9 t.Pos#1/10 )/8 >/1 {REMOVED TILE}
      //RESULT: Tile{ [[ HalfReuse: '\"'/0 HalfReuse: '('/4 HalfReuse: '\"'/7 } Tile{ ]] }
      {refalrts::icReinitChar, 0, '\"', 0},
      {refalrts::icReinitChar, 0, '(', 4},
      {refalrts::icReinitChar, 0, '\"', 7},
      {refalrts::icSetResRightEdge, 0, 0, 0},
      {refalrts::icTrash, 0, 0, 7},
      {refalrts::icNextStep, 0, 0, 0},
      {refalrts::icProfilerStopSentence, 0, 0, 0},
      {refalrts::icOnFailGoTo, +11, 0, 0},
      // ( # TCloseBracket t.idx )
      // </0 & Flex-TextFromToken/4 (/7 # TCloseBracket/9 t.Pos#1/10 )/8 >/1
      {refalrts::icIdentTerm, 0, 13, 9},
      {refalrts::icSave, 0, 16, 5},
      {refalrts::ictVarLeftSave, 0, 10, 16},
      {refalrts::icEmpty, 0, 0, 16},
      //DEBUG: t.Pos#1: 10
      {refalrts::icEmptyResult, 0, 0, 0},
      //TRASH: {REMOVED TILE} # TCloseBracket/9 t.Pos#1/10 )/8 >/1 {REMOVED TILE}
      //RESULT: Tile{ [[ HalfReuse: '\"'/0 HalfReuse: ')'/4 HalfReuse: '\"'/7 } Tile{ ]] }
      {refalrts::icReinitChar, 0, '\"', 0},
      {refalrts::icReinitChar, 0, ')', 4},
      {refalrts::icReinitChar, 0, '\"', 7},
      {refalrts::icSetResRightEdge, 0, 0, 0},
      {refalrts::icTrash, 0, 0, 7},
      {refalrts::icNextStep, 0, 0, 0},
      {refalrts::icProfilerStopSentence, 0, 0, 0},
      {refalrts::icOnFailGoTo, +11, 0, 0},
      // ( # TAlt t.idx )
      // </0 & Flex-TextFromToken/4 (/7 # TAlt/9 t.Pos#1/10 )/8 >/1
      {refalrts::icIdentTerm, 0, 12, 9},
      {refalrts::icSave, 0, 16, 5},
      {refalrts::ictVarLeftSave, 0, 10, 16},
      {refalrts::icEmpty, 0, 0, 16},
      //DEBUG: t.Pos#1: 10
      {refalrts::icEmptyResult, 0, 0, 0},
      //TRASH: {REMOVED TILE} # TAlt/9 t.Pos#1/10 )/8 >/1 {REMOVED TILE}
      //RESULT: Tile{ [[ HalfReuse: '\"'/0 HalfReuse: '|'/4 HalfReuse: '\"'/7 } Tile{ ]] }
      {refalrts::icReinitChar, 0, '\"', 0},
      {refalrts::icReinitChar, 0, '|', 4},
      {refalrts::icReinitChar, 0, '\"', 7},
      {refalrts::icSetResRightEdge, 0, 0, 0},
      {refalrts::icTrash, 0, 0, 7},
      {refalrts::icNextStep, 0, 0, 0},
      {refalrts::icProfilerStopSentence, 0, 0, 0},
      {refalrts::icOnFailGoTo, +11, 0, 0},
      // ( # TBegin t.idx )
      // </0 & Flex-TextFromToken/4 (/7 # TBegin/9 t.Pos#1/10 )/8 >/1
      {refalrts::icIdentTerm, 0, 11, 9},
      {refalrts::icSave, 0, 16, 5},
      {refalrts::ictVarLeftSave, 0, 10, 16},
      {refalrts::icEmpty, 0, 0, 16},
      //DEBUG: t.Pos#1: 10
      {refalrts::icEmptyResult, 0, 0, 0},
      //TRASH: {REMOVED TILE} # TBegin/9 t.Pos#1/10 )/8 >/1 {REMOVED TILE}
      //RESULT: Tile{ [[ HalfReuse: '\"'/0 HalfReuse: '^'/4 HalfReuse: '\"'/7 } Tile{ ]] }
      {refalrts::icReinitChar, 0, '\"', 0},
      {refalrts::icReinitChar, 0, '^', 4},
      {refalrts::icReinitChar, 0, '\"', 7},
      {refalrts::icSetResRightEdge, 0, 0, 0},
      {refalrts::icTrash, 0, 0, 7},
      {refalrts::icNextStep, 0, 0, 0},
      {refalrts::icProfilerStopSentence, 0, 0, 0},
      {refalrts::icOnFailGoTo, +11, 0, 0},
      // ( # TEnd t.idx )
      // </0 & Flex-TextFromToken/4 (/7 # TEnd/9 t.Pos#1/10 )/8 >/1
      {refalrts::icIdentTerm, 0, 10, 9},
      {refalrts::icSave, 0, 16, 5},
      {refalrts::ictVarLeftSave, 0, 10, 16},
      {refalrts::icEmpty, 0, 0, 16},
      //DEBUG: t.Pos#1: 10
      {refalrts::icEmptyResult, 0, 0, 0},
      //TRASH: {REMOVED TILE} # TEnd/9 t.Pos#1/10 )/8 >/1 {REMOVED TILE}
      //RESULT: Tile{ [[ HalfReuse: '\"'/0 HalfReuse: '$'/4 HalfReuse: '\"'/7 } Tile{ ]] }
      {refalrts::icReinitChar, 0, '\"', 0},
      {refalrts::icReinitChar, 0, '$', 4},
      {refalrts::icReinitChar, 0, '\"', 7},
      {refalrts::icSetResRightEdge, 0, 0, 0},
      {refalrts::icTrash, 0, 0, 7},
      {refalrts::icNextStep, 0, 0, 0},
      {refalrts::icProfilerStopSentence, 0, 0, 0},
      {refalrts::icOnFailGoTo, +11, 0, 0},
      // ( # TOptional t.idx )
      // </0 & Flex-TextFromToken/4 (/7 # TOptional/9 t.Pos#1/10 )/8 >/1
      {refalrts::icIdentTerm, 0, 9, 9},
      {refalrts::icSave, 0, 16, 5},
      {refalrts::ictVarLeftSave, 0, 10, 16},
      {refalrts::icEmpty, 0, 0, 16},
      //DEBUG: t.Pos#1: 10
      {refalrts::icEmptyResult, 0, 0, 0},
      //TRASH: {REMOVED TILE} # TOptional/9 t.Pos#1/10 )/8 >/1 {REMOVED TILE}
      //RESULT: Tile{ [[ HalfReuse: '\"'/0 HalfReuse: '?'/4 HalfReuse: '\"'/7 } Tile{ ]] }
      {refalrts::icReinitChar, 0, '\"', 0},
      {refalrts::icReinitChar, 0, '?', 4},
      {refalrts::icReinitChar, 0, '\"', 7},
      {refalrts::icSetResRightEdge, 0, 0, 0},
      {refalrts::icTrash, 0, 0, 7},
      {refalrts::icNextStep, 0, 0, 0},
      {refalrts::icProfilerStopSentence, 0, 0, 0},
      {refalrts::icOnFailGoTo, +11, 0, 0},
      // ( # TZeroMany t.idx )
      // </0 & Flex-TextFromToken/4 (/7 # TZeroMany/9 t.Pos#1/10 )/8 >/1
      {refalrts::icIdentTerm, 0, 8, 9},
      {refalrts::icSave, 0, 16, 5},
      {refalrts::ictVarLeftSave, 0, 10, 16},
      {refalrts::icEmpty, 0, 0, 16},
      //DEBUG: t.Pos#1: 10
      {refalrts::icEmptyResult, 0, 0, 0},
      //TRASH: {REMOVED TILE} # TZeroMany/9 t.Pos#1/10 )/8 >/1 {REMOVED TILE}
      //RESULT: Tile{ [[ HalfReuse: '\"'/0 HalfReuse: '*'/4 HalfReuse: '\"'/7 } Tile{ ]] }
      {refalrts::icReinitChar, 0, '\"', 0},
      {refalrts::icReinitChar, 0, '*', 4},
      {refalrts::icReinitChar, 0, '\"', 7},
      {refalrts::icSetResRightEdge, 0, 0, 0},
      {refalrts::icTrash, 0, 0, 7},
      {refalrts::icNextStep, 0, 0, 0},
      {refalrts::icProfilerStopSentence, 0, 0, 0},
      {refalrts::icOnFailGoTo, +11, 0, 0},
      // ( # TOneMany t.idx )
      // </0 & Flex-TextFromToken/4 (/7 # TOneMany/9 t.Pos#1/10 )/8 >/1
      {refalrts::icIdentTerm, 0, 7, 9},
      {refalrts::icSave, 0, 16, 5},
      {refalrts::ictVarLeftSave, 0, 10, 16},
      {refalrts::icEmpty, 0, 0, 16},
      //DEBUG: t.Pos#1: 10
      {refalrts::icEmptyResult, 0, 0, 0},
      //TRASH: {REMOVED TILE} # TOneMany/9 t.Pos#1/10 )/8 >/1 {REMOVED TILE}
      //RESULT: Tile{ [[ HalfReuse: '\"'/0 HalfReuse: '+'/4 HalfReuse: '\"'/7 } Tile{ ]] }
      {refalrts::icReinitChar, 0, '\"', 0},
      {refalrts::icReinitChar, 0, '+', 4},
      {refalrts::icReinitChar, 0, '\"', 7},
      {refalrts::icSetResRightEdge, 0, 0, 0},
      {refalrts::icTrash, 0, 0, 7},
      {refalrts::icNextStep, 0, 0, 0},
      {refalrts::icProfilerStopSentence, 0, 0, 0},
      {refalrts::icOnFailGoTo, +11, 0, 0},
      // ( # TInvertGroup t.idx )
      // </0 & Flex-TextFromToken/4 (/7 # TInvertGroup/9 t.Pos#1/10 )/8 >/1
      {refalrts::icIdentTerm, 0, 6, 9},
      {refalrts::icSave, 0, 16, 5},
      {refalrts::ictVarLeftSave, 0, 10, 16},
      {refalrts::icEmpty, 0, 0, 16},
      //DEBUG: t.Pos#1: 10
      {refalrts::icEmptyResult, 0, 0, 0},
      //TRASH: {REMOVED TILE} # TInvertGroup/9 t.Pos#1/10 )/8 >/1 {REMOVED TILE}
      //RESULT: Tile{ [[ HalfReuse: '\"'/0 HalfReuse: '^'/4 HalfReuse: '\"'/7 } Tile{ ]] }
      {refalrts::icReinitChar, 0, '\"', 0},
      {refalrts::icReinitChar, 0, '^', 4},
      {refalrts::icReinitChar, 0, '\"', 7},
      {refalrts::icSetResRightEdge, 0, 0, 0},
      {refalrts::icTrash, 0, 0, 7},
      {refalrts::icNextStep, 0, 0, 0},
      {refalrts::icProfilerStopSentence, 0, 0, 0},
      {refalrts::icOnFailGoTo, +11, 0, 0},
      // ( # TGroupRange t.idx )
      // </0 & Flex-TextFromToken/4 (/7 # TGroupRange/9 t.Pos#1/10 )/8 >/1
      {refalrts::icIdentTerm, 0, 5, 9},
      {refalrts::icSave, 0, 16, 5},
      {refalrts::ictVarLeftSave, 0, 10, 16},
      {refalrts::icEmpty, 0, 0, 16},
      //DEBUG: t.Pos#1: 10
      {refalrts::icEmptyResult, 0, 0, 0},
      //TRASH: {REMOVED TILE} # TGroupRange/9 t.Pos#1/10 )/8 >/1 {REMOVED TILE}
      //RESULT: Tile{ [[ HalfReuse: '\"'/0 HalfReuse: '-'/4 HalfReuse: '\"'/7 } Tile{ ]] }
      {refalrts::icReinitChar, 0, '\"', 0},
      {refalrts::icReinitChar, 0, '-', 4},
      {refalrts::icReinitChar, 0, '\"', 7},
      {refalrts::icSetResRightEdge, 0, 0, 0},
      {refalrts::icTrash, 0, 0, 7},
      {refalrts::icNextStep, 0, 0, 0},
      {refalrts::icProfilerStopSentence, 0, 0, 0},
      {refalrts::icOnFailGoTo, +19, 0, 0},
      // ( # TError t.idx e.idx )
      // </0 & Flex-TextFromToken/4 (/7 # TError/9 t.Pos#1/10 e.Message#1/5 )/8 >/1
      {refalrts::icIdentTerm, 0, 4, 9},
      {refalrts::icSave, 0, 16, 5},
      {refalrts::ictVarLeftSave, 0, 10, 16},
      // closed e.Message#1 as range 16(5)
      //DEBUG: t.Pos#1: 10
      //DEBUG: e.Message#1: 5
      {refalrts::icEmptyResult, 0, 0, 0},
      //TRASH: {REMOVED TILE} t.Pos#1/10 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ HalfReuse: 't'/0 HalfReuse: 'o'/4 HalfReuse: 'k'/7 HalfReuse: 'e'/9 }"n "/12 Tile{ HalfReuse: 'e'/8 HalfReuse: 'r'/1 }"ror "/14 Tile{ AsIs: e.Message#1/16(5) } Tile{ ]] }
      {refalrts::icAllocString, 0, 1, 12},
      {refalrts::icAllocString, 0, 0, 14},
      {refalrts::icReinitChar, 0, 't', 0},
      {refalrts::icReinitChar, 0, 'o', 4},
      {refalrts::icReinitChar, 0, 'k', 7},
      {refalrts::icReinitChar, 0, 'e', 9},
      {refalrts::icReinitChar, 0, 'e', 8},
      {refalrts::icReinitChar, 0, 'r', 1},
      {refalrts::icSetResRightEdge, 0, 0, 0},
      {refalrts::icSpliceEVar, 0, 0, 16},
      {refalrts::icSpliceTile, 14, 15, 0},
      {refalrts::icSpliceTile, 8, 1, 0},
      {refalrts::icSpliceTile, 12, 13, 0},
      {refalrts::icTrash, 0, 0, 9},
      {refalrts::icNextStep, 0, 0, 0},
      {refalrts::icProfilerStopSentence, 0, 0, 0},
      {refalrts::icOnFailGoTo, +11, 0, 0},
      // ( # TStateStart t.idx )
      // </0 & Flex-TextFromToken/4 (/7 # TStateStart/9 t.Pos#1/10 )/8 >/1
      {refalrts::icIdentTerm, 0, 3, 9},
      {refalrts::icSave, 0, 16, 5},
      {refalrts::ictVarLeftSave, 0, 10, 16},
      {refalrts::icEmpty, 0, 0, 16},
      //DEBUG: t.Pos#1: 10
      {refalrts::icEmptyResult, 0, 0, 0},
      //TRASH: {REMOVED TILE} # TStateStart/9 t.Pos#1/10 )/8 >/1 {REMOVED TILE}
      //RESULT: Tile{ [[ HalfReuse: '\"'/0 HalfReuse: '<'/4 HalfReuse: '\"'/7 } Tile{ ]] }
      {refalrts::icReinitChar, 0, '\"', 0},
      {refalrts::icReinitChar, 0, '<', 4},
      {refalrts::icReinitChar, 0, '\"', 7},
      {refalrts::icSetResRightEdge, 0, 0, 0},
      {refalrts::icTrash, 0, 0, 7},
      {refalrts::icNextStep, 0, 0, 0},
      {refalrts::icProfilerStopSentence, 0, 0, 0},
      {refalrts::icOnFailGoTo, +11, 0, 0},
      // ( # TComma t.idx )
      // </0 & Flex-TextFromToken/4 (/7 # TComma/9 t.Pos#1/10 )/8 >/1
      {refalrts::icIdentTerm, 0, 2, 9},
      {refalrts::icSave, 0, 16, 5},
      {refalrts::ictVarLeftSave, 0, 10, 16},
      {refalrts::icEmpty, 0, 0, 16},
      //DEBUG: t.Pos#1: 10
      {refalrts::icEmptyResult, 0, 0, 0},
      //TRASH: {REMOVED TILE} # TComma/9 t.Pos#1/10 )/8 >/1 {REMOVED TILE}
      //RESULT: Tile{ [[ HalfReuse: '\"'/0 HalfReuse: ','/4 HalfReuse: '\"'/7 } Tile{ ]] }
      {refalrts::icReinitChar, 0, '\"', 0},
      {refalrts::icReinitChar, 0, ',', 4},
      {refalrts::icReinitChar, 0, '\"', 7},
      {refalrts::icSetResRightEdge, 0, 0, 0},
      {refalrts::icTrash, 0, 0, 7},
      {refalrts::icNextStep, 0, 0, 0},
      {refalrts::icProfilerStopSentence, 0, 0, 0},
      {refalrts::icOnFailGoTo, +11, 0, 0},
      // ( # TStateEnd t.idx )
      // </0 & Flex-TextFromToken/4 (/7 # TStateEnd/9 t.Pos#1/10 )/8 >/1
      {refalrts::icIdentTerm, 0, 1, 9},
      {refalrts::icSave, 0, 16, 5},
      {refalrts::ictVarLeftSave, 0, 10, 16},
      {refalrts::icEmpty, 0, 0, 16},
      //DEBUG: t.Pos#1: 10
      {refalrts::icEmptyResult, 0, 0, 0},
      //TRASH: {REMOVED TILE} # TStateEnd/9 t.Pos#1/10 )/8 >/1 {REMOVED TILE}
      //RESULT: Tile{ [[ HalfReuse: '\"'/0 HalfReuse: '>'/4 HalfReuse: '\"'/7 } Tile{ ]] }
      {refalrts::icReinitChar, 0, '\"', 0},
      {refalrts::icReinitChar, 0, '>', 4},
      {refalrts::icReinitChar, 0, '\"', 7},
      {refalrts::icSetResRightEdge, 0, 0, 0},
      {refalrts::icTrash, 0, 0, 7},
      {refalrts::icNextStep, 0, 0, 0},
      {refalrts::icProfilerStopSentence, 0, 0, 0},
      // ( # TEOF t.idx )
      // </0 & Flex-TextFromToken/4 (/7 # TEOF/9 t.Pos#1/10 )/8 >/1
      {refalrts::icIdentTerm, 0, 0, 9},
      {refalrts::ictVarLeftSave, 0, 10, 5},
      {refalrts::icEmpty, 0, 0, 5},
      //DEBUG: t.Pos#1: 10
      {refalrts::icEmptyResult, 0, 0, 0},
      //TRASH: {REMOVED TILE} # TEOF/9 t.Pos#1/10 )/8 >/1 {REMOVED TILE}
      //RESULT: Tile{ [[ HalfReuse: 'E'/0 HalfReuse: 'O'/4 HalfReuse: 'F'/7 } Tile{ ]] }
      {refalrts::icReinitChar, 0, 'E', 0},
      {refalrts::icReinitChar, 0, 'O', 4},
      {refalrts::icReinitChar, 0, 'F', 7},
      {refalrts::icSetResRightEdge, 0, 0, 0},
      {refalrts::icTrash, 0, 0, 7},
      {refalrts::icNextStep, 0, 0, 0},
      {refalrts::icEnd, 0, 0, 0}
    };
  } // namespace scope_Flex_TextFromToken

} // unnamed namespace

refalrts::RASLFunction descr_Flex_TextFromToken(
  "Flex-TextFromToken",
  scope_Flex_TextFromToken::raa,
  scope_Flex_TextFromToken::functions,
  scope_Flex_TextFromToken::idents,
  scope_Flex_TextFromToken::numbers,
  scope_Flex_TextFromToken::strings,
  scope_Flex_TextFromToken::filename
);
refalrts::RefalFunction& Flex_TextFromToken = descr_Flex_TextFromToken;

#else
static refalrts::FnResult func_Flex_TextFromToken(refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  refalrts::this_is_generated_function();
  // issue here memory for vars with 18 elems
  refalrts::Iter context[18];
  refalrts::zeros( context, 18 );
  //FAST GEN: ( e.$ )
  //GLOBAL GEN: ( s.$ e.$ )
  // </0 & Flex-TextFromToken/4 (/7 s.idxB#0/9 e.idxBV#0/5 )/8 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  context[5] = 0;
  context[6] = 0;
  context[7] = refalrts::brackets_left( context[5], context[6], context[2], context[3] );
  if( ! context[7] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[7], context[8]);
  if( ! refalrts::empty_seq( context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  if( ! refalrts::svar_left( context[9], context[5], context[6] ) )
    return refalrts::cRecognitionImpossible;
  // closed e.idxBV#0 as range 5
  do {
    // ( # TName t.idx e.idx )
    // </0 & Flex-TextFromToken/4 (/7 # TName/9 t.Pos#1/10 e.Name#1/5 )/8 >/1
    if( ! refalrts::ident_term(  & ident_TName<int>::name, context[9] ) )
      continue;
    context[16] = context[5];
    context[17] = context[6];
    context[11] = refalrts::tvar_left( context[10], context[16], context[17] );
    if( ! context[11] )
      continue;
    // closed e.Name#1 as range 16(5)
    //DEBUG: t.Pos#1: 10
    //DEBUG: e.Name#1: 5

    refalrts::reset_allocator();
    //TRASH: {REMOVED TILE} t.Pos#1/10 {REMOVED TILE} )/8 {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ HalfReuse: 'n'/0 HalfReuse: 'a'/4 HalfReuse: 'm'/7 HalfReuse: 'e'/9 } Tile{ HalfReuse: ' '/1 } Tile{ AsIs: e.Name#1/16(5) } Tile{ ]] }
    refalrts::reinit_char( context[0], 'n' );
    refalrts::reinit_char( context[4], 'a' );
    refalrts::reinit_char( context[7], 'm' );
    refalrts::reinit_char( context[9], 'e' );
    refalrts::reinit_char( context[1], ' ' );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = arg_end->next;
    res = refalrts::splice_evar( res, context[16], context[17] );
    res = refalrts::splice_evar( res, context[1], context[1] );
    refalrts::use( res );
    refalrts::splice_to_freelist_open( context[9], res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence();

  do {
    // ( # TEquals t.idx )
    // </0 & Flex-TextFromToken/4 (/7 # TEquals/9 t.Pos#1/10 )/8 >/1
    if( ! refalrts::ident_term(  & ident_TEquals<int>::name, context[9] ) )
      continue;
    context[16] = context[5];
    context[17] = context[6];
    context[11] = refalrts::tvar_left( context[10], context[16], context[17] );
    if( ! context[11] )
      continue;
    if( ! refalrts::empty_seq( context[16], context[17] ) )
      continue;
    //DEBUG: t.Pos#1: 10

    refalrts::reset_allocator();
    //TRASH: {REMOVED TILE} # TEquals/9 t.Pos#1/10 )/8 >/1 {REMOVED TILE}
    //RESULT: Tile{ [[ HalfReuse: '\"'/0 HalfReuse: '='/4 HalfReuse: '\"'/7 } Tile{ ]] }
    refalrts::reinit_char( context[0], '\"' );
    refalrts::reinit_char( context[4], '=' );
    refalrts::reinit_char( context[7], '\"' );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = arg_end->next;
    refalrts::use( res );
    refalrts::splice_to_freelist_open( context[7], res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence();

  do {
    // ( # TArrow t.idx )
    // </0 & Flex-TextFromToken/4 (/7 # TArrow/9 t.Pos#1/10 )/8 >/1
    if( ! refalrts::ident_term(  & ident_TArrow<int>::name, context[9] ) )
      continue;
    context[16] = context[5];
    context[17] = context[6];
    context[11] = refalrts::tvar_left( context[10], context[16], context[17] );
    if( ! context[11] )
      continue;
    if( ! refalrts::empty_seq( context[16], context[17] ) )
      continue;
    //DEBUG: t.Pos#1: 10

    refalrts::reset_allocator();
    //TRASH: {REMOVED TILE} t.Pos#1/10 )/8 >/1 {REMOVED TILE}
    //RESULT: Tile{ [[ HalfReuse: '\"'/0 HalfReuse: '-'/4 HalfReuse: '>'/7 HalfReuse: '\"'/9 } Tile{ ]] }
    refalrts::reinit_char( context[0], '\"' );
    refalrts::reinit_char( context[4], '-' );
    refalrts::reinit_char( context[7], '>' );
    refalrts::reinit_char( context[9], '\"' );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = arg_end->next;
    refalrts::use( res );
    refalrts::splice_to_freelist_open( context[9], res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence();

  do {
    // ( # TSkip t.idx )
    // </0 & Flex-TextFromToken/4 (/7 # TSkip/9 t.Pos#1/10 )/8 >/1
    if( ! refalrts::ident_term(  & ident_TSkip<int>::name, context[9] ) )
      continue;
    context[16] = context[5];
    context[17] = context[6];
    context[11] = refalrts::tvar_left( context[10], context[16], context[17] );
    if( ! context[11] )
      continue;
    if( ! refalrts::empty_seq( context[16], context[17] ) )
      continue;
    //DEBUG: t.Pos#1: 10

    refalrts::reset_allocator();
    //TRASH: {REMOVED TILE} </0 & Flex-TextFromToken/4 (/7 # TSkip/9 t.Pos#1/10 )/8 {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ HalfReuse: '-'/1 ]] }
    refalrts::reinit_char( context[1], '-' );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    refalrts::use( res );
    refalrts::splice_to_freelist_open( trash_prev, res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence();

  do {
    // ( # TErrorMessage e.idx )
    // </0 & Flex-TextFromToken/4 (/7 # TErrorMessage/9 e.Message#1/5 )/8 >/1
    if( ! refalrts::ident_term(  & ident_TErrorMessage<int>::name, context[9] ) )
      continue;
    // closed e.Message#1 as range 5
    //DEBUG: e.Message#1: 5

    refalrts::reset_allocator();
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ }"Use"/10 Tile{ HalfReuse: 'r'/1 }" error messa"/12 Tile{ HalfReuse: 'g'/0 HalfReuse: 'e'/4 HalfReuse: ' '/7 HalfReuse: '\"'/9 AsIs: e.Message#1/5 HalfReuse: '\"'/8 } Tile{ ]] }
    if( ! refalrts::alloc_chars( context[10], context[11], "Use", 3 ) )
      return refalrts::cNoMemory;
    if( ! refalrts::alloc_chars( context[12], context[13], " error messa", 12 ) )
      return refalrts::cNoMemory;
    refalrts::reinit_char( context[1], 'r' );
    refalrts::reinit_char( context[0], 'g' );
    refalrts::reinit_char( context[4], 'e' );
    refalrts::reinit_char( context[7], ' ' );
    refalrts::reinit_char( context[9], '\"' );
    refalrts::reinit_char( context[8], '\"' );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = arg_end->next;
    res = refalrts::splice_evar( res, context[0], context[8] );
    res = refalrts::splice_evar( res, context[12], context[13] );
    res = refalrts::splice_evar( res, context[1], context[1] );
    res = refalrts::splice_evar( res, context[10], context[11] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence();

  do {
    // ( # TChar t.idx s.idx )
    // </0 & Flex-TextFromToken/4 (/7 # TChar/9 t.Pos#1/10 s.Char#1/12 )/8 >/1
    if( ! refalrts::ident_term(  & ident_TChar<int>::name, context[9] ) )
      continue;
    context[16] = context[5];
    context[17] = context[6];
    context[11] = refalrts::tvar_left( context[10], context[16], context[17] );
    if( ! context[11] )
      continue;
    if( ! refalrts::svar_left( context[12], context[16], context[17] ) )
      continue;
    if( ! refalrts::empty_seq( context[16], context[17] ) )
      continue;
    //DEBUG: t.Pos#1: 10
    //DEBUG: s.Char#1: 12

    refalrts::reset_allocator();
    //TRASH: {REMOVED TILE} # TChar/9 t.Pos#1/10 {REMOVED TILE}
    //RESULT: Tile{ [[ HalfReuse: '\''/0 HalfReuse: </4 HalfReuse: & EscapeString/7 } Tile{ AsIs: s.Char#1/12 HalfReuse: >/8 HalfReuse: '\''/1 ]] }
    refalrts::reinit_char( context[0], '\'' );
    refalrts::reinit_open_call( context[4] );
    refalrts::reinit_name( context[7], & EscapeString );
    refalrts::reinit_close_call( context[8] );
    refalrts::reinit_char( context[1], '\'' );
    refalrts::push_stack( context[8] );
    refalrts::push_stack( context[4] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[12];
    refalrts::use( res );
    refalrts::splice_to_freelist_open( context[7], res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence();

  do {
    // ( # TStartRegexp t.idx )
    // </0 & Flex-TextFromToken/4 (/7 # TStartRegexp/9 t.Pos#1/10 )/8 >/1
    if( ! refalrts::ident_term(  & ident_TStartRegexp<int>::name, context[9] ) )
      continue;
    context[16] = context[5];
    context[17] = context[6];
    context[11] = refalrts::tvar_left( context[10], context[16], context[17] );
    if( ! context[11] )
      continue;
    if( ! refalrts::empty_seq( context[16], context[17] ) )
      continue;
    //DEBUG: t.Pos#1: 10

    refalrts::reset_allocator();
    //TRASH: {REMOVED TILE} t.Pos#1/10 {REMOVED TILE}
    //RESULT: Tile{ [[ HalfReuse: '\"'/0 HalfReuse: '/'/4 HalfReuse: '\"'/7 HalfReuse: ' '/9 }"(star"/12 Tile{ HalfReuse: 't'/8 HalfReuse: ')'/1 ]] }
    if( ! refalrts::alloc_chars( context[12], context[13], "(star", 5 ) )
      return refalrts::cNoMemory;
    refalrts::reinit_char( context[0], '\"' );
    refalrts::reinit_char( context[4], '/' );
    refalrts::reinit_char( context[7], '\"' );
    refalrts::reinit_char( context[9], ' ' );
    refalrts::reinit_char( context[8], 't' );
    refalrts::reinit_char( context[1], ')' );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[8];
    res = refalrts::splice_evar( res, context[12], context[13] );
    refalrts::use( res );
    refalrts::splice_to_freelist_open( context[9], res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence();

  do {
    // ( # TEndRegexp t.idx )
    // </0 & Flex-TextFromToken/4 (/7 # TEndRegexp/9 t.Pos#1/10 )/8 >/1
    if( ! refalrts::ident_term(  & ident_TEndRegexp<int>::name, context[9] ) )
      continue;
    context[16] = context[5];
    context[17] = context[6];
    context[11] = refalrts::tvar_left( context[10], context[16], context[17] );
    if( ! context[11] )
      continue;
    if( ! refalrts::empty_seq( context[16], context[17] ) )
      continue;
    //DEBUG: t.Pos#1: 10

    refalrts::reset_allocator();
    //TRASH: {REMOVED TILE} t.Pos#1/10 {REMOVED TILE}
    //RESULT: Tile{ [[ HalfReuse: '\"'/0 HalfReuse: '/'/4 HalfReuse: '\"'/7 HalfReuse: ' '/9 }"(en"/12 Tile{ HalfReuse: 'd'/8 HalfReuse: ')'/1 ]] }
    if( ! refalrts::alloc_chars( context[12], context[13], "(en", 3 ) )
      return refalrts::cNoMemory;
    refalrts::reinit_char( context[0], '\"' );
    refalrts::reinit_char( context[4], '/' );
    refalrts::reinit_char( context[7], '\"' );
    refalrts::reinit_char( context[9], ' ' );
    refalrts::reinit_char( context[8], 'd' );
    refalrts::reinit_char( context[1], ')' );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[8];
    res = refalrts::splice_evar( res, context[12], context[13] );
    refalrts::use( res );
    refalrts::splice_to_freelist_open( context[9], res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence();

  do {
    // ( # TStartGroup t.idx )
    // </0 & Flex-TextFromToken/4 (/7 # TStartGroup/9 t.Pos#1/10 )/8 >/1
    if( ! refalrts::ident_term(  & ident_TStartGroup<int>::name, context[9] ) )
      continue;
    context[16] = context[5];
    context[17] = context[6];
    context[11] = refalrts::tvar_left( context[10], context[16], context[17] );
    if( ! context[11] )
      continue;
    if( ! refalrts::empty_seq( context[16], context[17] ) )
      continue;
    //DEBUG: t.Pos#1: 10

    refalrts::reset_allocator();
    //TRASH: {REMOVED TILE} # TStartGroup/9 t.Pos#1/10 )/8 >/1 {REMOVED TILE}
    //RESULT: Tile{ [[ HalfReuse: '\"'/0 HalfReuse: '['/4 HalfReuse: '\"'/7 } Tile{ ]] }
    refalrts::reinit_char( context[0], '\"' );
    refalrts::reinit_char( context[4], '[' );
    refalrts::reinit_char( context[7], '\"' );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = arg_end->next;
    refalrts::use( res );
    refalrts::splice_to_freelist_open( context[7], res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence();

  do {
    // ( # TEndGroup t.idx )
    // </0 & Flex-TextFromToken/4 (/7 # TEndGroup/9 t.Pos#1/10 )/8 >/1
    if( ! refalrts::ident_term(  & ident_TEndGroup<int>::name, context[9] ) )
      continue;
    context[16] = context[5];
    context[17] = context[6];
    context[11] = refalrts::tvar_left( context[10], context[16], context[17] );
    if( ! context[11] )
      continue;
    if( ! refalrts::empty_seq( context[16], context[17] ) )
      continue;
    //DEBUG: t.Pos#1: 10

    refalrts::reset_allocator();
    //TRASH: {REMOVED TILE} # TEndGroup/9 t.Pos#1/10 )/8 >/1 {REMOVED TILE}
    //RESULT: Tile{ [[ HalfReuse: '\"'/0 HalfReuse: ']'/4 HalfReuse: '\"'/7 } Tile{ ]] }
    refalrts::reinit_char( context[0], '\"' );
    refalrts::reinit_char( context[4], ']' );
    refalrts::reinit_char( context[7], '\"' );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = arg_end->next;
    refalrts::use( res );
    refalrts::splice_to_freelist_open( context[7], res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence();

  do {
    // ( # TInclude t.idx e.idx )
    // </0 & Flex-TextFromToken/4 (/7 # TInclude/9 t.Pos#1/10 e.Name#1/5 )/8 >/1
    if( ! refalrts::ident_term(  & ident_TInclude<int>::name, context[9] ) )
      continue;
    context[16] = context[5];
    context[17] = context[6];
    context[11] = refalrts::tvar_left( context[10], context[16], context[17] );
    if( ! context[11] )
      continue;
    // closed e.Name#1 as range 16(5)
    //DEBUG: t.Pos#1: 10
    //DEBUG: e.Name#1: 5

    refalrts::reset_allocator();
    //TRASH: {REMOVED TILE} & Flex-TextFromToken/4 (/7 # TInclude/9 t.Pos#1/10 {REMOVED TILE} )/8 {REMOVED TILE}
    //RESULT: Tile{ [[ HalfReuse: '{'/0 } Tile{ AsIs: e.Name#1/16(5) } Tile{ HalfReuse: '}'/1 ]] }
    refalrts::reinit_char( context[0], '{' );
    refalrts::reinit_char( context[1], '}' );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    res = refalrts::splice_evar( res, context[16], context[17] );
    refalrts::use( res );
    refalrts::splice_to_freelist_open( context[0], res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence();

  do {
    // ( # TAny t.idx )
    // </0 & Flex-TextFromToken/4 (/7 # TAny/9 t.Pos#1/10 )/8 >/1
    if( ! refalrts::ident_term(  & ident_TAny<int>::name, context[9] ) )
      continue;
    context[16] = context[5];
    context[17] = context[6];
    context[11] = refalrts::tvar_left( context[10], context[16], context[17] );
    if( ! context[11] )
      continue;
    if( ! refalrts::empty_seq( context[16], context[17] ) )
      continue;
    //DEBUG: t.Pos#1: 10

    refalrts::reset_allocator();
    //TRASH: {REMOVED TILE} # TAny/9 t.Pos#1/10 )/8 >/1 {REMOVED TILE}
    //RESULT: Tile{ [[ HalfReuse: '\"'/0 HalfReuse: '.'/4 HalfReuse: '\"'/7 } Tile{ ]] }
    refalrts::reinit_char( context[0], '\"' );
    refalrts::reinit_char( context[4], '.' );
    refalrts::reinit_char( context[7], '\"' );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = arg_end->next;
    refalrts::use( res );
    refalrts::splice_to_freelist_open( context[7], res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence();

  do {
    // ( # TOpenBracket t.idx )
    // </0 & Flex-TextFromToken/4 (/7 # TOpenBracket/9 t.Pos#1/10 )/8 >/1
    if( ! refalrts::ident_term(  & ident_TOpenBracket<int>::name, context[9] ) )
      continue;
    context[16] = context[5];
    context[17] = context[6];
    context[11] = refalrts::tvar_left( context[10], context[16], context[17] );
    if( ! context[11] )
      continue;
    if( ! refalrts::empty_seq( context[16], context[17] ) )
      continue;
    //DEBUG: t.Pos#1: 10

    refalrts::reset_allocator();
    //TRASH: {REMOVED TILE} # TOpenBracket/9 t.Pos#1/10 )/8 >/1 {REMOVED TILE}
    //RESULT: Tile{ [[ HalfReuse: '\"'/0 HalfReuse: '('/4 HalfReuse: '\"'/7 } Tile{ ]] }
    refalrts::reinit_char( context[0], '\"' );
    refalrts::reinit_char( context[4], '(' );
    refalrts::reinit_char( context[7], '\"' );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = arg_end->next;
    refalrts::use( res );
    refalrts::splice_to_freelist_open( context[7], res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence();

  do {
    // ( # TCloseBracket t.idx )
    // </0 & Flex-TextFromToken/4 (/7 # TCloseBracket/9 t.Pos#1/10 )/8 >/1
    if( ! refalrts::ident_term(  & ident_TCloseBracket<int>::name, context[9] ) )
      continue;
    context[16] = context[5];
    context[17] = context[6];
    context[11] = refalrts::tvar_left( context[10], context[16], context[17] );
    if( ! context[11] )
      continue;
    if( ! refalrts::empty_seq( context[16], context[17] ) )
      continue;
    //DEBUG: t.Pos#1: 10

    refalrts::reset_allocator();
    //TRASH: {REMOVED TILE} # TCloseBracket/9 t.Pos#1/10 )/8 >/1 {REMOVED TILE}
    //RESULT: Tile{ [[ HalfReuse: '\"'/0 HalfReuse: ')'/4 HalfReuse: '\"'/7 } Tile{ ]] }
    refalrts::reinit_char( context[0], '\"' );
    refalrts::reinit_char( context[4], ')' );
    refalrts::reinit_char( context[7], '\"' );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = arg_end->next;
    refalrts::use( res );
    refalrts::splice_to_freelist_open( context[7], res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence();

  do {
    // ( # TAlt t.idx )
    // </0 & Flex-TextFromToken/4 (/7 # TAlt/9 t.Pos#1/10 )/8 >/1
    if( ! refalrts::ident_term(  & ident_TAlt<int>::name, context[9] ) )
      continue;
    context[16] = context[5];
    context[17] = context[6];
    context[11] = refalrts::tvar_left( context[10], context[16], context[17] );
    if( ! context[11] )
      continue;
    if( ! refalrts::empty_seq( context[16], context[17] ) )
      continue;
    //DEBUG: t.Pos#1: 10

    refalrts::reset_allocator();
    //TRASH: {REMOVED TILE} # TAlt/9 t.Pos#1/10 )/8 >/1 {REMOVED TILE}
    //RESULT: Tile{ [[ HalfReuse: '\"'/0 HalfReuse: '|'/4 HalfReuse: '\"'/7 } Tile{ ]] }
    refalrts::reinit_char( context[0], '\"' );
    refalrts::reinit_char( context[4], '|' );
    refalrts::reinit_char( context[7], '\"' );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = arg_end->next;
    refalrts::use( res );
    refalrts::splice_to_freelist_open( context[7], res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence();

  do {
    // ( # TBegin t.idx )
    // </0 & Flex-TextFromToken/4 (/7 # TBegin/9 t.Pos#1/10 )/8 >/1
    if( ! refalrts::ident_term(  & ident_TBegin<int>::name, context[9] ) )
      continue;
    context[16] = context[5];
    context[17] = context[6];
    context[11] = refalrts::tvar_left( context[10], context[16], context[17] );
    if( ! context[11] )
      continue;
    if( ! refalrts::empty_seq( context[16], context[17] ) )
      continue;
    //DEBUG: t.Pos#1: 10

    refalrts::reset_allocator();
    //TRASH: {REMOVED TILE} # TBegin/9 t.Pos#1/10 )/8 >/1 {REMOVED TILE}
    //RESULT: Tile{ [[ HalfReuse: '\"'/0 HalfReuse: '^'/4 HalfReuse: '\"'/7 } Tile{ ]] }
    refalrts::reinit_char( context[0], '\"' );
    refalrts::reinit_char( context[4], '^' );
    refalrts::reinit_char( context[7], '\"' );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = arg_end->next;
    refalrts::use( res );
    refalrts::splice_to_freelist_open( context[7], res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence();

  do {
    // ( # TEnd t.idx )
    // </0 & Flex-TextFromToken/4 (/7 # TEnd/9 t.Pos#1/10 )/8 >/1
    if( ! refalrts::ident_term(  & ident_TEnd<int>::name, context[9] ) )
      continue;
    context[16] = context[5];
    context[17] = context[6];
    context[11] = refalrts::tvar_left( context[10], context[16], context[17] );
    if( ! context[11] )
      continue;
    if( ! refalrts::empty_seq( context[16], context[17] ) )
      continue;
    //DEBUG: t.Pos#1: 10

    refalrts::reset_allocator();
    //TRASH: {REMOVED TILE} # TEnd/9 t.Pos#1/10 )/8 >/1 {REMOVED TILE}
    //RESULT: Tile{ [[ HalfReuse: '\"'/0 HalfReuse: '$'/4 HalfReuse: '\"'/7 } Tile{ ]] }
    refalrts::reinit_char( context[0], '\"' );
    refalrts::reinit_char( context[4], '$' );
    refalrts::reinit_char( context[7], '\"' );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = arg_end->next;
    refalrts::use( res );
    refalrts::splice_to_freelist_open( context[7], res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence();

  do {
    // ( # TOptional t.idx )
    // </0 & Flex-TextFromToken/4 (/7 # TOptional/9 t.Pos#1/10 )/8 >/1
    if( ! refalrts::ident_term(  & ident_TOptional<int>::name, context[9] ) )
      continue;
    context[16] = context[5];
    context[17] = context[6];
    context[11] = refalrts::tvar_left( context[10], context[16], context[17] );
    if( ! context[11] )
      continue;
    if( ! refalrts::empty_seq( context[16], context[17] ) )
      continue;
    //DEBUG: t.Pos#1: 10

    refalrts::reset_allocator();
    //TRASH: {REMOVED TILE} # TOptional/9 t.Pos#1/10 )/8 >/1 {REMOVED TILE}
    //RESULT: Tile{ [[ HalfReuse: '\"'/0 HalfReuse: '?'/4 HalfReuse: '\"'/7 } Tile{ ]] }
    refalrts::reinit_char( context[0], '\"' );
    refalrts::reinit_char( context[4], '?' );
    refalrts::reinit_char( context[7], '\"' );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = arg_end->next;
    refalrts::use( res );
    refalrts::splice_to_freelist_open( context[7], res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence();

  do {
    // ( # TZeroMany t.idx )
    // </0 & Flex-TextFromToken/4 (/7 # TZeroMany/9 t.Pos#1/10 )/8 >/1
    if( ! refalrts::ident_term(  & ident_TZeroMany<int>::name, context[9] ) )
      continue;
    context[16] = context[5];
    context[17] = context[6];
    context[11] = refalrts::tvar_left( context[10], context[16], context[17] );
    if( ! context[11] )
      continue;
    if( ! refalrts::empty_seq( context[16], context[17] ) )
      continue;
    //DEBUG: t.Pos#1: 10

    refalrts::reset_allocator();
    //TRASH: {REMOVED TILE} # TZeroMany/9 t.Pos#1/10 )/8 >/1 {REMOVED TILE}
    //RESULT: Tile{ [[ HalfReuse: '\"'/0 HalfReuse: '*'/4 HalfReuse: '\"'/7 } Tile{ ]] }
    refalrts::reinit_char( context[0], '\"' );
    refalrts::reinit_char( context[4], '*' );
    refalrts::reinit_char( context[7], '\"' );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = arg_end->next;
    refalrts::use( res );
    refalrts::splice_to_freelist_open( context[7], res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence();

  do {
    // ( # TOneMany t.idx )
    // </0 & Flex-TextFromToken/4 (/7 # TOneMany/9 t.Pos#1/10 )/8 >/1
    if( ! refalrts::ident_term(  & ident_TOneMany<int>::name, context[9] ) )
      continue;
    context[16] = context[5];
    context[17] = context[6];
    context[11] = refalrts::tvar_left( context[10], context[16], context[17] );
    if( ! context[11] )
      continue;
    if( ! refalrts::empty_seq( context[16], context[17] ) )
      continue;
    //DEBUG: t.Pos#1: 10

    refalrts::reset_allocator();
    //TRASH: {REMOVED TILE} # TOneMany/9 t.Pos#1/10 )/8 >/1 {REMOVED TILE}
    //RESULT: Tile{ [[ HalfReuse: '\"'/0 HalfReuse: '+'/4 HalfReuse: '\"'/7 } Tile{ ]] }
    refalrts::reinit_char( context[0], '\"' );
    refalrts::reinit_char( context[4], '+' );
    refalrts::reinit_char( context[7], '\"' );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = arg_end->next;
    refalrts::use( res );
    refalrts::splice_to_freelist_open( context[7], res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence();

  do {
    // ( # TInvertGroup t.idx )
    // </0 & Flex-TextFromToken/4 (/7 # TInvertGroup/9 t.Pos#1/10 )/8 >/1
    if( ! refalrts::ident_term(  & ident_TInvertGroup<int>::name, context[9] ) )
      continue;
    context[16] = context[5];
    context[17] = context[6];
    context[11] = refalrts::tvar_left( context[10], context[16], context[17] );
    if( ! context[11] )
      continue;
    if( ! refalrts::empty_seq( context[16], context[17] ) )
      continue;
    //DEBUG: t.Pos#1: 10

    refalrts::reset_allocator();
    //TRASH: {REMOVED TILE} # TInvertGroup/9 t.Pos#1/10 )/8 >/1 {REMOVED TILE}
    //RESULT: Tile{ [[ HalfReuse: '\"'/0 HalfReuse: '^'/4 HalfReuse: '\"'/7 } Tile{ ]] }
    refalrts::reinit_char( context[0], '\"' );
    refalrts::reinit_char( context[4], '^' );
    refalrts::reinit_char( context[7], '\"' );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = arg_end->next;
    refalrts::use( res );
    refalrts::splice_to_freelist_open( context[7], res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence();

  do {
    // ( # TGroupRange t.idx )
    // </0 & Flex-TextFromToken/4 (/7 # TGroupRange/9 t.Pos#1/10 )/8 >/1
    if( ! refalrts::ident_term(  & ident_TGroupRange<int>::name, context[9] ) )
      continue;
    context[16] = context[5];
    context[17] = context[6];
    context[11] = refalrts::tvar_left( context[10], context[16], context[17] );
    if( ! context[11] )
      continue;
    if( ! refalrts::empty_seq( context[16], context[17] ) )
      continue;
    //DEBUG: t.Pos#1: 10

    refalrts::reset_allocator();
    //TRASH: {REMOVED TILE} # TGroupRange/9 t.Pos#1/10 )/8 >/1 {REMOVED TILE}
    //RESULT: Tile{ [[ HalfReuse: '\"'/0 HalfReuse: '-'/4 HalfReuse: '\"'/7 } Tile{ ]] }
    refalrts::reinit_char( context[0], '\"' );
    refalrts::reinit_char( context[4], '-' );
    refalrts::reinit_char( context[7], '\"' );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = arg_end->next;
    refalrts::use( res );
    refalrts::splice_to_freelist_open( context[7], res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence();

  do {
    // ( # TError t.idx e.idx )
    // </0 & Flex-TextFromToken/4 (/7 # TError/9 t.Pos#1/10 e.Message#1/5 )/8 >/1
    if( ! refalrts::ident_term(  & ident_TError<int>::name, context[9] ) )
      continue;
    context[16] = context[5];
    context[17] = context[6];
    context[11] = refalrts::tvar_left( context[10], context[16], context[17] );
    if( ! context[11] )
      continue;
    // closed e.Message#1 as range 16(5)
    //DEBUG: t.Pos#1: 10
    //DEBUG: e.Message#1: 5

    refalrts::reset_allocator();
    //TRASH: {REMOVED TILE} t.Pos#1/10 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ HalfReuse: 't'/0 HalfReuse: 'o'/4 HalfReuse: 'k'/7 HalfReuse: 'e'/9 }"n "/12 Tile{ HalfReuse: 'e'/8 HalfReuse: 'r'/1 }"ror "/14 Tile{ AsIs: e.Message#1/16(5) } Tile{ ]] }
    if( ! refalrts::alloc_chars( context[12], context[13], "n ", 2 ) )
      return refalrts::cNoMemory;
    if( ! refalrts::alloc_chars( context[14], context[15], "ror ", 4 ) )
      return refalrts::cNoMemory;
    refalrts::reinit_char( context[0], 't' );
    refalrts::reinit_char( context[4], 'o' );
    refalrts::reinit_char( context[7], 'k' );
    refalrts::reinit_char( context[9], 'e' );
    refalrts::reinit_char( context[8], 'e' );
    refalrts::reinit_char( context[1], 'r' );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = arg_end->next;
    res = refalrts::splice_evar( res, context[16], context[17] );
    res = refalrts::splice_evar( res, context[14], context[15] );
    res = refalrts::splice_evar( res, context[8], context[1] );
    res = refalrts::splice_evar( res, context[12], context[13] );
    refalrts::use( res );
    refalrts::splice_to_freelist_open( context[9], res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence();

  do {
    // ( # TStateStart t.idx )
    // </0 & Flex-TextFromToken/4 (/7 # TStateStart/9 t.Pos#1/10 )/8 >/1
    if( ! refalrts::ident_term(  & ident_TStateStart<int>::name, context[9] ) )
      continue;
    context[16] = context[5];
    context[17] = context[6];
    context[11] = refalrts::tvar_left( context[10], context[16], context[17] );
    if( ! context[11] )
      continue;
    if( ! refalrts::empty_seq( context[16], context[17] ) )
      continue;
    //DEBUG: t.Pos#1: 10

    refalrts::reset_allocator();
    //TRASH: {REMOVED TILE} # TStateStart/9 t.Pos#1/10 )/8 >/1 {REMOVED TILE}
    //RESULT: Tile{ [[ HalfReuse: '\"'/0 HalfReuse: '<'/4 HalfReuse: '\"'/7 } Tile{ ]] }
    refalrts::reinit_char( context[0], '\"' );
    refalrts::reinit_char( context[4], '<' );
    refalrts::reinit_char( context[7], '\"' );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = arg_end->next;
    refalrts::use( res );
    refalrts::splice_to_freelist_open( context[7], res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence();

  do {
    // ( # TComma t.idx )
    // </0 & Flex-TextFromToken/4 (/7 # TComma/9 t.Pos#1/10 )/8 >/1
    if( ! refalrts::ident_term(  & ident_TComma<int>::name, context[9] ) )
      continue;
    context[16] = context[5];
    context[17] = context[6];
    context[11] = refalrts::tvar_left( context[10], context[16], context[17] );
    if( ! context[11] )
      continue;
    if( ! refalrts::empty_seq( context[16], context[17] ) )
      continue;
    //DEBUG: t.Pos#1: 10

    refalrts::reset_allocator();
    //TRASH: {REMOVED TILE} # TComma/9 t.Pos#1/10 )/8 >/1 {REMOVED TILE}
    //RESULT: Tile{ [[ HalfReuse: '\"'/0 HalfReuse: ','/4 HalfReuse: '\"'/7 } Tile{ ]] }
    refalrts::reinit_char( context[0], '\"' );
    refalrts::reinit_char( context[4], ',' );
    refalrts::reinit_char( context[7], '\"' );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = arg_end->next;
    refalrts::use( res );
    refalrts::splice_to_freelist_open( context[7], res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence();

  do {
    // ( # TStateEnd t.idx )
    // </0 & Flex-TextFromToken/4 (/7 # TStateEnd/9 t.Pos#1/10 )/8 >/1
    if( ! refalrts::ident_term(  & ident_TStateEnd<int>::name, context[9] ) )
      continue;
    context[16] = context[5];
    context[17] = context[6];
    context[11] = refalrts::tvar_left( context[10], context[16], context[17] );
    if( ! context[11] )
      continue;
    if( ! refalrts::empty_seq( context[16], context[17] ) )
      continue;
    //DEBUG: t.Pos#1: 10

    refalrts::reset_allocator();
    //TRASH: {REMOVED TILE} # TStateEnd/9 t.Pos#1/10 )/8 >/1 {REMOVED TILE}
    //RESULT: Tile{ [[ HalfReuse: '\"'/0 HalfReuse: '>'/4 HalfReuse: '\"'/7 } Tile{ ]] }
    refalrts::reinit_char( context[0], '\"' );
    refalrts::reinit_char( context[4], '>' );
    refalrts::reinit_char( context[7], '\"' );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = arg_end->next;
    refalrts::use( res );
    refalrts::splice_to_freelist_open( context[7], res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence();

  // ( # TEOF t.idx )
  // </0 & Flex-TextFromToken/4 (/7 # TEOF/9 t.Pos#1/10 )/8 >/1
  if( ! refalrts::ident_term(  & ident_TEOF<int>::name, context[9] ) )
    return refalrts::cRecognitionImpossible;
  context[11] = refalrts::tvar_left( context[10], context[5], context[6] );
  if( ! context[11] )
    return refalrts::cRecognitionImpossible;
  if( ! refalrts::empty_seq( context[5], context[6] ) )
    return refalrts::cRecognitionImpossible;
  //DEBUG: t.Pos#1: 10

  refalrts::reset_allocator();
  //TRASH: {REMOVED TILE} # TEOF/9 t.Pos#1/10 )/8 >/1 {REMOVED TILE}
  //RESULT: Tile{ [[ HalfReuse: 'E'/0 HalfReuse: 'O'/4 HalfReuse: 'F'/7 } Tile{ ]] }
  refalrts::reinit_char( context[0], 'E' );
  refalrts::reinit_char( context[4], 'O' );
  refalrts::reinit_char( context[7], 'F' );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = arg_end->next;
  refalrts::use( res );
  refalrts::splice_to_freelist_open( context[7], res );
  return refalrts::cSuccess;
}

refalrts::RefalNativeFunction descr_Flex_TextFromToken(func_Flex_TextFromToken, "Flex-TextFromToken");
refalrts::RefalFunction& Flex_TextFromToken = descr_Flex_TextFromToken;

#endif
#ifdef INTERPRET
namespace /* unnamed */ {
  namespace scope_gen_Flex_Tokens_L1 {
    static const char *filename = "Flex-Lexer.cpp";
    using refalrts::functions;
    using refalrts::idents;
    using refalrts::numbers;
    using refalrts::strings;
    static const refalrts::RASLCommand raa[] = {
      {refalrts::icThisIsGeneratedFunction, 0, 0, 0},
      {refalrts::icLoadConstants, 0, 0, 0},
      {refalrts::icIssueMemory, 9, 0, 0},
      // </0 & Flex-Tokens\1/4 (/7 e.Line#2/5 )/8 >/1
      {refalrts::icInitB0_Lite, 0, 0, 0},
      {refalrts::icCallSaveLeft, 0, 2, 0},
      {refalrts::icBracketLeftSave, 0, 5, 2},
      {refalrts::icEmpty, 0, 0, 2},
      // closed e.Line#2 as range 5
      //DEBUG: e.Line#2: 5
      {refalrts::icEmptyResult, 0, 0, 0},
      //TRASH: {REMOVED TILE} </0 & Flex-Tokens\1/4 (/7 {REMOVED TILE} )/8 {REMOVED TILE}
      //RESULT: Tile{ [[ } Tile{ AsIs: e.Line#2/5 } Tile{ HalfReuse: '\n'/1 ]] }
      {refalrts::icReinitChar, 0, '\n', 1},
      {refalrts::icSetRes, 0, 0, 1},
      {refalrts::icSpliceEVar, 0, 0, 5},
      {refalrts::icTrashLeftEdge, 0, 0, 0},
      {refalrts::icNextStep, 0, 0, 0},
      {refalrts::icEnd, 0, 0, 0}
    };
  } // namespace scope_gen_Flex_Tokens_L1

} // unnamed namespace

namespace /* unnamed */ {
refalrts::RASLFunction descr_gen_Flex_Tokens_L1(
  "Flex-Tokens\\1",
  scope_gen_Flex_Tokens_L1::raa,
  scope_gen_Flex_Tokens_L1::functions,
  scope_gen_Flex_Tokens_L1::idents,
  scope_gen_Flex_Tokens_L1::numbers,
  scope_gen_Flex_Tokens_L1::strings,
  scope_gen_Flex_Tokens_L1::filename
);
refalrts::RefalFunction& gen_Flex_Tokens_L1 = descr_gen_Flex_Tokens_L1;

} // unnamed namespace

#else
static refalrts::FnResult func_gen_Flex_Tokens_L1(refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  refalrts::this_is_generated_function();
  // issue here memory for vars with 9 elems
  refalrts::Iter context[9];
  refalrts::zeros( context, 9 );
  // </0 & Flex-Tokens\1/4 (/7 e.Line#2/5 )/8 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  context[5] = 0;
  context[6] = 0;
  context[7] = refalrts::brackets_left( context[5], context[6], context[2], context[3] );
  if( ! context[7] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[7], context[8]);
  if( ! refalrts::empty_seq( context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  // closed e.Line#2 as range 5
  //DEBUG: e.Line#2: 5

  refalrts::reset_allocator();
  //TRASH: {REMOVED TILE} </0 & Flex-Tokens\1/4 (/7 {REMOVED TILE} )/8 {REMOVED TILE}
  //RESULT: Tile{ [[ } Tile{ AsIs: e.Line#2/5 } Tile{ HalfReuse: '\n'/1 ]] }
  refalrts::reinit_char( context[1], '\n' );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[1];
  res = refalrts::splice_evar( res, context[5], context[6] );
  refalrts::use( res );
  refalrts::splice_to_freelist_open( trash_prev, res );
  return refalrts::cSuccess;
}

namespace /* unnamed */ {
refalrts::RefalNativeFunction descr_gen_Flex_Tokens_L1(func_gen_Flex_Tokens_L1, "Flex-Tokens\\1");
refalrts::RefalFunction& gen_Flex_Tokens_L1 = descr_gen_Flex_Tokens_L1;

} // unnamed namespace

#endif
#ifdef INTERPRET
namespace /* unnamed */ {
  namespace scope_gen_Flex_Tokens_L2 {
    static const char *filename = "Flex-Lexer.cpp";
    using refalrts::functions;
    static const refalrts::RefalIdentifier idents[] = {
      & ident_TEOF<int>::name
    };
    using refalrts::numbers;
    using refalrts::strings;
    static const refalrts::RASLCommand raa[] = {
      {refalrts::icThisIsGeneratedFunction, 0, 0, 0},
      {refalrts::icLoadConstants, 0, 0, 0},
      {refalrts::icReserveBacktrackStack, 1, 0, 0},
      {refalrts::icIssueMemory, 12, 0, 0},
      //FAST GEN: e.$
      //GLOBAL GEN: e.$
      // </0 & Flex-Tokens\2/4 e.idx#0/2 >/1
      {refalrts::icInitB0_Lite, 0, 0, 0},
      {refalrts::icCallSaveLeft, 0, 2, 0},
      // closed e.idx#0 as range 2
      {refalrts::icOnFailGoTo, +11, 0, 0},
      // e.idx ( # TEOF )
      // </0 & Flex-Tokens\2/4 e.Tokens#2/2 (/7 # TEOF/9 )/8 >/1
      {refalrts::icSave, 0, 10, 2},
      {refalrts::icBracketRightSave, 0, 5, 10},
      {refalrts::icIdentLeftSave, 9, 0, 5},
      {refalrts::icEmpty, 0, 0, 5},
      // closed e.Tokens#2 as range 10(2)
      //DEBUG: e.Tokens#2: 2
      {refalrts::icEmptyResult, 0, 0, 0},
      //TRASH: {REMOVED TILE} </0 & Flex-Tokens\2/4 {REMOVED TILE} {REMOVED TILE} >/1 {REMOVED TILE}
      //RESULT: Tile{ [[ } Tile{ AsIs: e.Tokens#2/10(2) } Tile{ AsIs: (/7 AsIs: # TEOF/9 AsIs: )/8 } Tile{ ]] }
      {refalrts::icLinkBrackets, 7, 8, 0},
      {refalrts::icSetResRightEdge, 0, 0, 0},
      {refalrts::icSpliceTile, 7, 8, 0},
      {refalrts::icSpliceEVar, 0, 0, 10},
      {refalrts::icTrashLeftEdge, 0, 0, 0},
      {refalrts::icNextStep, 0, 0, 0},
      {refalrts::icProfilerStopSentence, 0, 0, 0},
      // e.idx
      // </0 & Flex-Tokens\2/4 e.Tokens#2/2 >/1
      // closed e.Tokens#2 as range 2
      //DEBUG: e.Tokens#2: 2
      {refalrts::icEmptyResult, 0, 0, 0},
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ } Tile{ AsIs: e.Tokens#2/2 } Tile{ HalfReuse: (/0 HalfReuse: # TEOF/4 } Tile{ HalfReuse: )/1 ]] }
      {refalrts::icReinitBracket, 0, refalrts::ibOpenBracket, 0},
      {refalrts::icReinitIdent, 0, 0, 4},
      {refalrts::icReinitBracket, 0, refalrts::ibCloseBracket, 1},
      {refalrts::icLinkBrackets, 0, 1, 0},
      {refalrts::icSetRes, 0, 0, 1},
      {refalrts::icSpliceTile, 0, 4, 0},
      {refalrts::icSpliceEVar, 0, 0, 2},
      {refalrts::icNextStep, 0, 0, 0},
      {refalrts::icEnd, 0, 0, 0}
    };
  } // namespace scope_gen_Flex_Tokens_L2

} // unnamed namespace

namespace /* unnamed */ {
refalrts::RASLFunction descr_gen_Flex_Tokens_L2(
  "Flex-Tokens\\2",
  scope_gen_Flex_Tokens_L2::raa,
  scope_gen_Flex_Tokens_L2::functions,
  scope_gen_Flex_Tokens_L2::idents,
  scope_gen_Flex_Tokens_L2::numbers,
  scope_gen_Flex_Tokens_L2::strings,
  scope_gen_Flex_Tokens_L2::filename
);
refalrts::RefalFunction& gen_Flex_Tokens_L2 = descr_gen_Flex_Tokens_L2;

} // unnamed namespace

#else
static refalrts::FnResult func_gen_Flex_Tokens_L2(refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  refalrts::this_is_generated_function();
  // issue here memory for vars with 12 elems
  refalrts::Iter context[12];
  refalrts::zeros( context, 12 );
  //FAST GEN: e.$
  //GLOBAL GEN: e.$
  // </0 & Flex-Tokens\2/4 e.idx#0/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.idx#0 as range 2
  do {
    // e.idx ( # TEOF )
    // </0 & Flex-Tokens\2/4 e.Tokens#2/2 (/7 # TEOF/9 )/8 >/1
    context[10] = context[2];
    context[11] = context[3];
    context[5] = 0;
    context[6] = 0;
    context[7] = refalrts::brackets_right( context[5], context[6], context[10], context[11] );
    if( ! context[7] )
      continue;
    refalrts::bracket_pointers(context[7], context[8]);
    context[9] = refalrts::ident_left(  & ident_TEOF<int>::name, context[5], context[6] );
    if( ! context[9] )
      continue;
    if( ! refalrts::empty_seq( context[5], context[6] ) )
      continue;
    // closed e.Tokens#2 as range 10(2)
    //DEBUG: e.Tokens#2: 2

    refalrts::reset_allocator();
    //TRASH: {REMOVED TILE} </0 & Flex-Tokens\2/4 {REMOVED TILE} {REMOVED TILE} >/1 {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ AsIs: e.Tokens#2/10(2) } Tile{ AsIs: (/7 AsIs: # TEOF/9 AsIs: )/8 } Tile{ ]] }
    refalrts::link_brackets( context[7], context[8] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = arg_end->next;
    res = refalrts::splice_evar( res, context[7], context[8] );
    res = refalrts::splice_evar( res, context[10], context[11] );
    refalrts::use( res );
    refalrts::splice_to_freelist_open( trash_prev, res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence();

  // e.idx
  // </0 & Flex-Tokens\2/4 e.Tokens#2/2 >/1
  // closed e.Tokens#2 as range 2
  //DEBUG: e.Tokens#2: 2

  refalrts::reset_allocator();
  //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ } Tile{ AsIs: e.Tokens#2/2 } Tile{ HalfReuse: (/0 HalfReuse: # TEOF/4 } Tile{ HalfReuse: )/1 ]] }
  refalrts::reinit_open_bracket( context[0] );
  refalrts::reinit_ident( context[4], & ident_TEOF<int>::name );
  refalrts::reinit_close_bracket( context[1] );
  refalrts::link_brackets( context[0], context[1] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[1];
  res = refalrts::splice_evar( res, context[0], context[4] );
  res = refalrts::splice_evar( res, context[2], context[3] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

namespace /* unnamed */ {
refalrts::RefalNativeFunction descr_gen_Flex_Tokens_L2(func_gen_Flex_Tokens_L2, "Flex-Tokens\\2");
refalrts::RefalFunction& gen_Flex_Tokens_L2 = descr_gen_Flex_Tokens_L2;

} // unnamed namespace

#endif
#ifdef INTERPRET
namespace /* unnamed */ {
  namespace scope_gen_Flex_Tokens_L3 {
    static const char *filename = "Flex-Lexer.cpp";
    static refalrts::RefalFunction *functions[] = {
      & Inc
    };
    static const refalrts::RefalIdentifier idents[] = {
      & ident_TNewLine<int>::name
    };
    using refalrts::numbers;
    using refalrts::strings;
    static const refalrts::RASLCommand raa[] = {
      {refalrts::icThisIsGeneratedFunction, 0, 0, 0},
      {refalrts::icLoadConstants, 0, 0, 0},
      {refalrts::icReserveBacktrackStack, 1, 0, 0},
      {refalrts::icIssueMemory, 14, 0, 0},
      //FAST GEN: s.$ ( s.$ e.$ )
      //GLOBAL GEN: s.$ ( s.$ e.$ )
      // </0 & Flex-Tokens\3/4 s.idx#0/9 (/7 s.idxVB#0/10 e.idxVBV#0/5 )/8 >/1
      {refalrts::icInitB0_Lite, 0, 0, 0},
      {refalrts::icCallSaveLeft, 0, 2, 0},
      {refalrts::icBracketRightSave, 0, 5, 2},
      {refalrts::icsVarLeft, 0, 9, 2},
      {refalrts::icEmpty, 0, 0, 2},
      {refalrts::icsVarLeft, 0, 10, 5},
      // closed e.idxVBV#0 as range 5
      {refalrts::icOnFailGoTo, +12, 0, 0},
      // s.idx ( # TNewLine '\n' )
      // </0 & Flex-Tokens\3/4 s.LineNumber#2/9 (/7 # TNewLine/10 '\n'/11 )/8 >/1
      {refalrts::icIdentTerm, 0, 0, 10},
      {refalrts::icSave, 0, 12, 5},
      {refalrts::icCharLeftSave, 11, static_cast<unsigned char>('\n'), 12},
      {refalrts::icEmpty, 0, 0, 12},
      //DEBUG: s.LineNumber#2: 9
      {refalrts::icEmptyResult, 0, 0, 0},
      //TRASH: {REMOVED TILE} # TNewLine/10 '\n'/11 )/8 >/1 {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 Reuse: & Inc/4 AsIs: s.LineNumber#2/9 HalfReuse: >/7 } Tile{ ]] }
      {refalrts::icUpdateFunc, 0, 0, 4},
      {refalrts::icReinitBracket, 0, refalrts::ibCloseCall, 7},
      {refalrts::icPushStack, 0, 0, 7},
      {refalrts::icPushStack, 0, 0, 0},
      {refalrts::icSetResRightEdge, 0, 0, 0},
      {refalrts::icTrash, 0, 0, 7},
      {refalrts::icNextStep, 0, 0, 0},
      {refalrts::icProfilerStopSentence, 0, 0, 0},
      // s.idx ( s.idx e.idx )
      // </0 & Flex-Tokens\3/4 s.LineNumber#2/9 (/7 s.Type#2/10 e.Info#2/5 )/8 >/1
      // closed e.Info#2 as range 5
      //DEBUG: s.LineNumber#2: 9
      //DEBUG: s.Type#2: 10
      //DEBUG: e.Info#2: 5
      {refalrts::icEmptyResult, 0, 0, 0},
      //TRASH: {REMOVED TILE} </0 & Flex-Tokens\3/4 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ } Tile{ AsIs: s.LineNumber#2/9 AsIs: (/7 AsIs: s.Type#2/10 } Tile{ HalfReuse: s.LineNumber2 #9/8 } Tile{ AsIs: e.Info#2/5 } Tile{ HalfReuse: )/1 ]] }
      {refalrts::icReinitSVar, 0, 9, 8},
      {refalrts::icReinitBracket, 0, refalrts::ibCloseBracket, 1},
      {refalrts::icLinkBrackets, 7, 1, 0},
      {refalrts::icSetRes, 0, 0, 1},
      {refalrts::icSpliceEVar, 0, 0, 5},
      {refalrts::icSpliceTile, 8, 8, 0},
      {refalrts::icSpliceTile, 9, 10, 0},
      {refalrts::icTrashLeftEdge, 0, 0, 0},
      {refalrts::icNextStep, 0, 0, 0},
      {refalrts::icEnd, 0, 0, 0}
    };
  } // namespace scope_gen_Flex_Tokens_L3

} // unnamed namespace

namespace /* unnamed */ {
refalrts::RASLFunction descr_gen_Flex_Tokens_L3(
  "Flex-Tokens\\3",
  scope_gen_Flex_Tokens_L3::raa,
  scope_gen_Flex_Tokens_L3::functions,
  scope_gen_Flex_Tokens_L3::idents,
  scope_gen_Flex_Tokens_L3::numbers,
  scope_gen_Flex_Tokens_L3::strings,
  scope_gen_Flex_Tokens_L3::filename
);
refalrts::RefalFunction& gen_Flex_Tokens_L3 = descr_gen_Flex_Tokens_L3;

} // unnamed namespace

#else
static refalrts::FnResult func_gen_Flex_Tokens_L3(refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  refalrts::this_is_generated_function();
  // issue here memory for vars with 14 elems
  refalrts::Iter context[14];
  refalrts::zeros( context, 14 );
  //FAST GEN: s.$ ( s.$ e.$ )
  //GLOBAL GEN: s.$ ( s.$ e.$ )
  // </0 & Flex-Tokens\3/4 s.idx#0/9 (/7 s.idxVB#0/10 e.idxVBV#0/5 )/8 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  context[5] = 0;
  context[6] = 0;
  context[7] = refalrts::brackets_right( context[5], context[6], context[2], context[3] );
  if( ! context[7] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[7], context[8]);
  if( ! refalrts::svar_left( context[9], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  if( ! refalrts::empty_seq( context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  if( ! refalrts::svar_left( context[10], context[5], context[6] ) )
    return refalrts::cRecognitionImpossible;
  // closed e.idxVBV#0 as range 5
  do {
    // s.idx ( # TNewLine '\n' )
    // </0 & Flex-Tokens\3/4 s.LineNumber#2/9 (/7 # TNewLine/10 '\n'/11 )/8 >/1
    if( ! refalrts::ident_term(  & ident_TNewLine<int>::name, context[10] ) )
      continue;
    context[12] = context[5];
    context[13] = context[6];
    context[11] = refalrts::char_left( '\n', context[12], context[13] );
    if( ! context[11] )
      continue;
    if( ! refalrts::empty_seq( context[12], context[13] ) )
      continue;
    //DEBUG: s.LineNumber#2: 9

    refalrts::reset_allocator();
    //TRASH: {REMOVED TILE} # TNewLine/10 '\n'/11 )/8 >/1 {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 Reuse: & Inc/4 AsIs: s.LineNumber#2/9 HalfReuse: >/7 } Tile{ ]] }
    refalrts::update_name( context[4], & Inc );
    refalrts::reinit_close_call( context[7] );
    refalrts::push_stack( context[7] );
    refalrts::push_stack( context[0] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = arg_end->next;
    refalrts::use( res );
    refalrts::splice_to_freelist_open( context[7], res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence();

  // s.idx ( s.idx e.idx )
  // </0 & Flex-Tokens\3/4 s.LineNumber#2/9 (/7 s.Type#2/10 e.Info#2/5 )/8 >/1
  // closed e.Info#2 as range 5
  //DEBUG: s.LineNumber#2: 9
  //DEBUG: s.Type#2: 10
  //DEBUG: e.Info#2: 5

  refalrts::reset_allocator();
  //TRASH: {REMOVED TILE} </0 & Flex-Tokens\3/4 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ } Tile{ AsIs: s.LineNumber#2/9 AsIs: (/7 AsIs: s.Type#2/10 } Tile{ HalfReuse: s.LineNumber2 #9/8 } Tile{ AsIs: e.Info#2/5 } Tile{ HalfReuse: )/1 ]] }
  refalrts::reinit_svar( context[8], context[9] );
  refalrts::reinit_close_bracket( context[1] );
  refalrts::link_brackets( context[7], context[1] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[1];
  res = refalrts::splice_evar( res, context[5], context[6] );
  res = refalrts::splice_evar( res, context[8], context[8] );
  res = refalrts::splice_evar( res, context[9], context[10] );
  refalrts::use( res );
  refalrts::splice_to_freelist_open( trash_prev, res );
  return refalrts::cSuccess;
}

namespace /* unnamed */ {
refalrts::RefalNativeFunction descr_gen_Flex_Tokens_L3(func_gen_Flex_Tokens_L3, "Flex-Tokens\\3");
refalrts::RefalFunction& gen_Flex_Tokens_L3 = descr_gen_Flex_Tokens_L3;

} // unnamed namespace

#endif
#ifdef INTERPRET
namespace /* unnamed */ {
  namespace scope_gen_Flex_Tokens_L4 {
    static const char *filename = "Flex-Lexer.cpp";
    using refalrts::functions;
    using refalrts::idents;
    using refalrts::numbers;
    using refalrts::strings;
    static const refalrts::RASLCommand raa[] = {
      {refalrts::icThisIsGeneratedFunction, 0, 0, 0},
      {refalrts::icLoadConstants, 0, 0, 0},
      {refalrts::icIssueMemory, 6, 0, 0},
      // </0 & Flex-Tokens\4/4 s.LineNumber#2/5 e.Tokens#2/2 >/1
      {refalrts::icInitB0_Lite, 0, 0, 0},
      {refalrts::icCallSaveLeft, 0, 2, 0},
      {refalrts::icsVarLeft, 0, 5, 2},
      // closed e.Tokens#2 as range 2
      //DEBUG: s.LineNumber#2: 5
      //DEBUG: e.Tokens#2: 2
      {refalrts::icEmptyResult, 0, 0, 0},
      //TRASH: {REMOVED TILE} </0 & Flex-Tokens\4/4 s.LineNumber#2/5 {REMOVED TILE} >/1 {REMOVED TILE}
      //RESULT: Tile{ [[ } Tile{ AsIs: e.Tokens#2/2 } Tile{ ]] }
      {refalrts::icSetResRightEdge, 0, 0, 0},
      {refalrts::icSpliceEVar, 0, 0, 2},
      {refalrts::icTrashLeftEdge, 0, 0, 0},
      {refalrts::icNextStep, 0, 0, 0},
      {refalrts::icEnd, 0, 0, 0}
    };
  } // namespace scope_gen_Flex_Tokens_L4

} // unnamed namespace

namespace /* unnamed */ {
refalrts::RASLFunction descr_gen_Flex_Tokens_L4(
  "Flex-Tokens\\4",
  scope_gen_Flex_Tokens_L4::raa,
  scope_gen_Flex_Tokens_L4::functions,
  scope_gen_Flex_Tokens_L4::idents,
  scope_gen_Flex_Tokens_L4::numbers,
  scope_gen_Flex_Tokens_L4::strings,
  scope_gen_Flex_Tokens_L4::filename
);
refalrts::RefalFunction& gen_Flex_Tokens_L4 = descr_gen_Flex_Tokens_L4;

} // unnamed namespace

#else
static refalrts::FnResult func_gen_Flex_Tokens_L4(refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  refalrts::this_is_generated_function();
  // issue here memory for vars with 6 elems
  refalrts::Iter context[6];
  refalrts::zeros( context, 6 );
  // </0 & Flex-Tokens\4/4 s.LineNumber#2/5 e.Tokens#2/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  if( ! refalrts::svar_left( context[5], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  // closed e.Tokens#2 as range 2
  //DEBUG: s.LineNumber#2: 5
  //DEBUG: e.Tokens#2: 2

  refalrts::reset_allocator();
  //TRASH: {REMOVED TILE} </0 & Flex-Tokens\4/4 s.LineNumber#2/5 {REMOVED TILE} >/1 {REMOVED TILE}
  //RESULT: Tile{ [[ } Tile{ AsIs: e.Tokens#2/2 } Tile{ ]] }
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = arg_end->next;
  res = refalrts::splice_evar( res, context[2], context[3] );
  refalrts::use( res );
  refalrts::splice_to_freelist_open( trash_prev, res );
  return refalrts::cSuccess;
}

namespace /* unnamed */ {
refalrts::RefalNativeFunction descr_gen_Flex_Tokens_L4(func_gen_Flex_Tokens_L4, "Flex-Tokens\\4");
refalrts::RefalFunction& gen_Flex_Tokens_L4 = descr_gen_Flex_Tokens_L4;

} // unnamed namespace

#endif
#ifdef INTERPRET
namespace /* unnamed */ {
  namespace scope_Flex_Tokens {
    static const char *filename = "Flex-Lexer.cpp";
    static refalrts::RefalFunction *functions[] = {
      & Fetch,
      & gen_Flex_Tokens_L4,
      & Inc,
      & gen_Flex_Tokens_L3,
      & MapReduce,
      & gen_Flex_Tokens_L2,
      & SecondPass,
      & Map,
      & LowLevelTokens,
      & gen_Flex_Tokens_L1,
      & Seq
    };
    using refalrts::idents;
    using refalrts::numbers;
    using refalrts::strings;
    static const refalrts::RASLCommand raa[] = {
      {refalrts::icThisIsGeneratedFunction, 0, 0, 0},
      {refalrts::icLoadConstants, 0, 0, 0},
      {refalrts::icIssueMemory, 27, 0, 0},
      // </0 & Flex-Tokens/4 s.FirstLineNumber#1/5 e.DescriptionLines#1/2 >/1
      {refalrts::icInitB0_Lite, 0, 0, 0},
      {refalrts::icCallSaveLeft, 0, 2, 0},
      {refalrts::icsVarLeft, 0, 5, 2},
      // closed e.DescriptionLines#1 as range 2
      //DEBUG: s.FirstLineNumber#1: 5
      //DEBUG: e.DescriptionLines#1: 2
      {refalrts::icEmptyResult, 0, 0, 0},
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 Reuse: & Fetch/4 } Tile{ AsIs: e.DescriptionLines#1/2 } </6 & Seq/7 (/8 & Map/9 & Flex-Tokens\1/10 )/11 & LowLevelTokens/12 (/13 & Map/14 & SecondPass/15 )/16 & Flex-Tokens\2/17 (/18 & MapReduce/19 & Flex-Tokens\3/20 </21 & Inc/22 Tile{ AsIs: s.FirstLineNumber#1/5 } >/23 )/24 & Flex-Tokens\4/25 >/26 Tile{ AsIs: >/1 ]] }
      {refalrts::icAllocBracket, 0, refalrts::ibOpenCall, 6},
      {refalrts::icAllocFunc, 0, 10, 7},
      {refalrts::icAllocBracket, 0, refalrts::ibOpenBracket, 8},
      {refalrts::icAllocFunc, 0, 7, 9},
      {refalrts::icAllocFunc, 0, 9, 10},
      {refalrts::icAllocBracket, 0, refalrts::ibCloseBracket, 11},
      {refalrts::icAllocFunc, 0, 8, 12},
      {refalrts::icAllocBracket, 0, refalrts::ibOpenBracket, 13},
      {refalrts::icAllocFunc, 0, 7, 14},
      {refalrts::icAllocFunc, 0, 6, 15},
      {refalrts::icAllocBracket, 0, refalrts::ibCloseBracket, 16},
      {refalrts::icAllocFunc, 0, 5, 17},
      {refalrts::icAllocBracket, 0, refalrts::ibOpenBracket, 18},
      {refalrts::icAllocFunc, 0, 4, 19},
      {refalrts::icAllocFunc, 0, 3, 20},
      {refalrts::icAllocBracket, 0, refalrts::ibOpenCall, 21},
      {refalrts::icAllocFunc, 0, 2, 22},
      {refalrts::icAllocBracket, 0, refalrts::ibCloseCall, 23},
      {refalrts::icAllocBracket, 0, refalrts::ibCloseBracket, 24},
      {refalrts::icAllocFunc, 0, 1, 25},
      {refalrts::icAllocBracket, 0, refalrts::ibCloseCall, 26},
      {refalrts::icUpdateFunc, 0, 0, 4},
      {refalrts::icPushStack, 0, 0, 1},
      {refalrts::icPushStack, 0, 0, 0},
      {refalrts::icPushStack, 0, 0, 26},
      {refalrts::icPushStack, 0, 0, 6},
      {refalrts::icLinkBrackets, 18, 24, 0},
      {refalrts::icPushStack, 0, 0, 23},
      {refalrts::icPushStack, 0, 0, 21},
      {refalrts::icLinkBrackets, 13, 16, 0},
      {refalrts::icLinkBrackets, 8, 11, 0},
      {refalrts::icSetRes, 0, 0, 1},
      {refalrts::icSpliceTile, 23, 26, 0},
      {refalrts::icSpliceTile, 5, 5, 0},
      {refalrts::icSpliceTile, 6, 22, 0},
      {refalrts::icSpliceEVar, 0, 0, 2},
      {refalrts::icNextStep, 0, 0, 0},
      {refalrts::icEnd, 0, 0, 0}
    };
  } // namespace scope_Flex_Tokens

} // unnamed namespace

refalrts::RASLFunction descr_Flex_Tokens(
  "Flex-Tokens",
  scope_Flex_Tokens::raa,
  scope_Flex_Tokens::functions,
  scope_Flex_Tokens::idents,
  scope_Flex_Tokens::numbers,
  scope_Flex_Tokens::strings,
  scope_Flex_Tokens::filename
);
refalrts::RefalFunction& Flex_Tokens = descr_Flex_Tokens;

#else
static refalrts::FnResult func_Flex_Tokens(refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  refalrts::this_is_generated_function();
  // issue here memory for vars with 27 elems
  refalrts::Iter context[27];
  refalrts::zeros( context, 27 );
  // </0 & Flex-Tokens/4 s.FirstLineNumber#1/5 e.DescriptionLines#1/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  if( ! refalrts::svar_left( context[5], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  // closed e.DescriptionLines#1 as range 2
  //DEBUG: s.FirstLineNumber#1: 5
  //DEBUG: e.DescriptionLines#1: 2

  refalrts::reset_allocator();
  //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ AsIs: </0 Reuse: & Fetch/4 } Tile{ AsIs: e.DescriptionLines#1/2 } </6 & Seq/7 (/8 & Map/9 & Flex-Tokens\1/10 )/11 & LowLevelTokens/12 (/13 & Map/14 & SecondPass/15 )/16 & Flex-Tokens\2/17 (/18 & MapReduce/19 & Flex-Tokens\3/20 </21 & Inc/22 Tile{ AsIs: s.FirstLineNumber#1/5 } >/23 )/24 & Flex-Tokens\4/25 >/26 Tile{ AsIs: >/1 ]] }
  if( ! refalrts::alloc_open_call( context[6] ) )
    return refalrts::cNoMemory;
  if( ! refalrts::alloc_name( context[7], & Seq ) )
    return refalrts::cNoMemory;
  if( ! refalrts::alloc_open_bracket( context[8] ) )
    return refalrts::cNoMemory;
  if( ! refalrts::alloc_name( context[9], & Map ) )
    return refalrts::cNoMemory;
  if( ! refalrts::alloc_name( context[10], & gen_Flex_Tokens_L1 ) )
    return refalrts::cNoMemory;
  if( ! refalrts::alloc_close_bracket( context[11] ) )
    return refalrts::cNoMemory;
  if( ! refalrts::alloc_name( context[12], & LowLevelTokens ) )
    return refalrts::cNoMemory;
  if( ! refalrts::alloc_open_bracket( context[13] ) )
    return refalrts::cNoMemory;
  if( ! refalrts::alloc_name( context[14], & Map ) )
    return refalrts::cNoMemory;
  if( ! refalrts::alloc_name( context[15], & SecondPass ) )
    return refalrts::cNoMemory;
  if( ! refalrts::alloc_close_bracket( context[16] ) )
    return refalrts::cNoMemory;
  if( ! refalrts::alloc_name( context[17], & gen_Flex_Tokens_L2 ) )
    return refalrts::cNoMemory;
  if( ! refalrts::alloc_open_bracket( context[18] ) )
    return refalrts::cNoMemory;
  if( ! refalrts::alloc_name( context[19], & MapReduce ) )
    return refalrts::cNoMemory;
  if( ! refalrts::alloc_name( context[20], & gen_Flex_Tokens_L3 ) )
    return refalrts::cNoMemory;
  if( ! refalrts::alloc_open_call( context[21] ) )
    return refalrts::cNoMemory;
  if( ! refalrts::alloc_name( context[22], & Inc ) )
    return refalrts::cNoMemory;
  if( ! refalrts::alloc_close_call( context[23] ) )
    return refalrts::cNoMemory;
  if( ! refalrts::alloc_close_bracket( context[24] ) )
    return refalrts::cNoMemory;
  if( ! refalrts::alloc_name( context[25], & gen_Flex_Tokens_L4 ) )
    return refalrts::cNoMemory;
  if( ! refalrts::alloc_close_call( context[26] ) )
    return refalrts::cNoMemory;
  refalrts::update_name( context[4], & Fetch );
  refalrts::push_stack( context[1] );
  refalrts::push_stack( context[0] );
  refalrts::push_stack( context[26] );
  refalrts::push_stack( context[6] );
  refalrts::link_brackets( context[18], context[24] );
  refalrts::push_stack( context[23] );
  refalrts::push_stack( context[21] );
  refalrts::link_brackets( context[13], context[16] );
  refalrts::link_brackets( context[8], context[11] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[1];
  res = refalrts::splice_evar( res, context[23], context[26] );
  res = refalrts::splice_evar( res, context[5], context[5] );
  res = refalrts::splice_evar( res, context[6], context[22] );
  res = refalrts::splice_evar( res, context[2], context[3] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

refalrts::RefalNativeFunction descr_Flex_Tokens(func_Flex_Tokens, "Flex-Tokens");
refalrts::RefalFunction& Flex_Tokens = descr_Flex_Tokens;

#endif
#ifdef INTERPRET
namespace /* unnamed */ {
  namespace scope_LowLevelTokens {
    static const char *filename = "Flex-Lexer.cpp";
    static refalrts::RefalFunction *functions[] = {
      & Root
    };
    using refalrts::idents;
    using refalrts::numbers;
    using refalrts::strings;
    static const refalrts::RASLCommand raa[] = {
      {refalrts::icThisIsGeneratedFunction, 0, 0, 0},
      {refalrts::icLoadConstants, 0, 0, 0},
      {refalrts::icIssueMemory, 7, 0, 0},
      // </0 & LowLevelTokens/4 e.Text#1/2 >/1
      {refalrts::icInitB0_Lite, 0, 0, 0},
      {refalrts::icCallSaveLeft, 0, 2, 0},
      // closed e.Text#1 as range 2
      //DEBUG: e.Text#1: 2
      {refalrts::icEmptyResult, 0, 0, 0},
      //TRASH: {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ } </5 & Root/6 Tile{ HalfReuse: (/0 HalfReuse: )/4 AsIs: e.Text#1/2 AsIs: >/1 ]] }
      {refalrts::icAllocBracket, 0, refalrts::ibOpenCall, 5},
      {refalrts::icAllocFunc, 0, 0, 6},
      {refalrts::icReinitBracket, 0, refalrts::ibOpenBracket, 0},
      {refalrts::icReinitBracket, 0, refalrts::ibCloseBracket, 4},
      {refalrts::icPushStack, 0, 0, 1},
      {refalrts::icPushStack, 0, 0, 5},
      {refalrts::icLinkBrackets, 0, 4, 0},
      {refalrts::icSetRes, 0, 0, 0},
      {refalrts::icSpliceTile, 5, 6, 0},
      {refalrts::icNextStep, 0, 0, 0},
      {refalrts::icEnd, 0, 0, 0}
    };
  } // namespace scope_LowLevelTokens

} // unnamed namespace

namespace /* unnamed */ {
refalrts::RASLFunction descr_LowLevelTokens(
  "LowLevelTokens",
  scope_LowLevelTokens::raa,
  scope_LowLevelTokens::functions,
  scope_LowLevelTokens::idents,
  scope_LowLevelTokens::numbers,
  scope_LowLevelTokens::strings,
  scope_LowLevelTokens::filename
);
refalrts::RefalFunction& LowLevelTokens = descr_LowLevelTokens;

} // unnamed namespace

#else
static refalrts::FnResult func_LowLevelTokens(refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  refalrts::this_is_generated_function();
  // issue here memory for vars with 7 elems
  refalrts::Iter context[7];
  refalrts::zeros( context, 7 );
  // </0 & LowLevelTokens/4 e.Text#1/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.Text#1 as range 2
  //DEBUG: e.Text#1: 2

  refalrts::reset_allocator();
  //TRASH: {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ } </5 & Root/6 Tile{ HalfReuse: (/0 HalfReuse: )/4 AsIs: e.Text#1/2 AsIs: >/1 ]] }
  if( ! refalrts::alloc_open_call( context[5] ) )
    return refalrts::cNoMemory;
  if( ! refalrts::alloc_name( context[6], & Root ) )
    return refalrts::cNoMemory;
  refalrts::reinit_open_bracket( context[0] );
  refalrts::reinit_close_bracket( context[4] );
  refalrts::push_stack( context[1] );
  refalrts::push_stack( context[5] );
  refalrts::link_brackets( context[0], context[4] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[0];
  res = refalrts::splice_evar( res, context[5], context[6] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

namespace /* unnamed */ {
refalrts::RefalNativeFunction descr_LowLevelTokens(func_LowLevelTokens, "LowLevelTokens");
refalrts::RefalFunction& LowLevelTokens = descr_LowLevelTokens;

} // unnamed namespace

#endif
#ifdef INTERPRET
namespace /* unnamed */ {
  namespace scope_SecondPass {
    static const char *filename = "Flex-Lexer.cpp";
    static refalrts::RefalFunction *functions[] = {
      & CharFromNum,
      & EscapeString
    };
    static const refalrts::RefalIdentifier idents[] = {
      & ident_TEOF<int>::name,
      & ident_TErrorMessage<int>::name,
      & ident_TSkip<int>::name,
      & ident_TChar<int>::name,
      & ident_TkOctNumber<int>::name,
      & ident_TkHexNumber<int>::name,
      & ident_TStateEnd<int>::name,
      & ident_TComma<int>::name,
      & ident_TStateStart<int>::name,
      & ident_TError<int>::name,
      & ident_TokenError<int>::name,
      & ident_TUnexpecteChar<int>::name,
      & ident_TGroupRange<int>::name,
      & ident_TInvertGroup<int>::name,
      & ident_TOneMany<int>::name,
      & ident_TQuantifier<int>::name,
      & ident_TZeroMany<int>::name,
      & ident_TOptional<int>::name,
      & ident_TEnd<int>::name,
      & ident_TSpecChar<int>::name,
      & ident_TBegin<int>::name,
      & ident_TAlt<int>::name,
      & ident_TCloseBracket<int>::name,
      & ident_TOpenBracket<int>::name,
      & ident_TAny<int>::name,
      & ident_TInclude<int>::name,
      & ident_TEndGroup<int>::name,
      & ident_TStartGroup<int>::name,
      & ident_TEndRegexp<int>::name,
      & ident_TStartRegexp<int>::name,
      & ident_TGenericEscChar<int>::name,
      & ident_TArrow<int>::name,
      & ident_TEquals<int>::name,
      & ident_TName<int>::name,
      & ident_TNewLine<int>::name
    };
    using refalrts::numbers;
    static const refalrts::StringItem strings[] = {
      {"Unexpected char", 15}
    };
    static const refalrts::RASLCommand raa[] = {
      {refalrts::icThisIsGeneratedFunction, 0, 0, 0},
      {refalrts::icLoadConstants, 0, 0, 0},
      {refalrts::icReserveBacktrackStack, 34, 0, 0},
      {refalrts::icIssueMemory, 18, 0, 0},
      //FAST GEN: ( e.$ )
      //GLOBAL GEN: ( s.$ e.$ )
      // </0 & SecondPass/4 (/7 s.idxB#0/9 e.idxBV#0/5 )/8 >/1
      {refalrts::icInitB0_Lite, 0, 0, 0},
      {refalrts::icCallSaveLeft, 0, 2, 0},
      {refalrts::icBracketLeftSave, 0, 5, 2},
      {refalrts::icEmpty, 0, 0, 2},
      {refalrts::icsVarLeft, 0, 9, 5},
      // closed e.idxBV#0 as range 5
      {refalrts::icOnFailGoTo, +10, 0, 0},
      // ( # TNewLine '\n' )
      // </0 & SecondPass/4 (/7 # TNewLine/9 '\n'/10 )/8 >/1
      {refalrts::icIdentTerm, 0, 34, 9},
      {refalrts::icSave, 0, 16, 5},
      {refalrts::icCharLeftSave, 10, static_cast<unsigned char>('\n'), 16},
      {refalrts::icEmpty, 0, 0, 16},
      {refalrts::icEmptyResult, 0, 0, 0},
      //TRASH: {REMOVED TILE} </0 & SecondPass/4 {REMOVED TILE} >/1 {REMOVED TILE}
      //RESULT: Tile{ [[ } Tile{ AsIs: (/7 AsIs: # TNewLine/9 AsIs: '\n'/10 AsIs: )/8 } Tile{ ]] }
      {refalrts::icLinkBrackets, 7, 8, 0},
      {refalrts::icSetResRightEdge, 0, 0, 0},
      {refalrts::icSpliceTile, 7, 8, 0},
      {refalrts::icTrashLeftEdge, 0, 0, 0},
      {refalrts::icNextStep, 0, 0, 0},
      {refalrts::icProfilerStopSentence, 0, 0, 0},
      {refalrts::icOnFailGoTo, +7, 0, 0},
      // ( # TName e.idx )
      // </0 & SecondPass/4 (/7 # TName/9 e.Name#1/5 )/8 >/1
      {refalrts::icIdentTerm, 0, 33, 9},
      // closed e.Name#1 as range 5
      //DEBUG: e.Name#1: 5
      {refalrts::icEmptyResult, 0, 0, 0},
      //TRASH: {REMOVED TILE} </0 & SecondPass/4 {REMOVED TILE} >/1 {REMOVED TILE}
      //RESULT: Tile{ [[ } Tile{ AsIs: (/7 AsIs: # TName/9 AsIs: e.Name#1/5 AsIs: )/8 } Tile{ ]] }
      {refalrts::icLinkBrackets, 7, 8, 0},
      {refalrts::icSetResRightEdge, 0, 0, 0},
      {refalrts::icSpliceTile, 7, 8, 0},
      {refalrts::icTrashLeftEdge, 0, 0, 0},
      {refalrts::icNextStep, 0, 0, 0},
      {refalrts::icProfilerStopSentence, 0, 0, 0},
      {refalrts::icOnFailGoTo, +11, 0, 0},
      // ( # TEquals '=' )
      // </0 & SecondPass/4 (/7 # TEquals/9 '='/10 )/8 >/1
      {refalrts::icIdentTerm, 0, 32, 9},
      {refalrts::icSave, 0, 16, 5},
      {refalrts::icCharLeftSave, 10, static_cast<unsigned char>('='), 16},
      {refalrts::icEmpty, 0, 0, 16},
      {refalrts::icEmptyResult, 0, 0, 0},
      //TRASH: {REMOVED TILE} </0 & SecondPass/4 {REMOVED TILE} )/8 >/1 {REMOVED TILE}
      //RESULT: Tile{ [[ } Tile{ AsIs: (/7 AsIs: # TEquals/9 HalfReuse: )/10 } Tile{ ]] }
      {refalrts::icReinitBracket, 0, refalrts::ibCloseBracket, 10},
      {refalrts::icLinkBrackets, 7, 10, 0},
      {refalrts::icSetResRightEdge, 0, 0, 0},
      {refalrts::icSpliceTile, 7, 10, 0},
      {refalrts::icTrashLeftEdge, 0, 0, 0},
      {refalrts::icNextStep, 0, 0, 0},
      {refalrts::icProfilerStopSentence, 0, 0, 0},
      {refalrts::icOnFailGoTo, +11, 0, 0},
      // ( # TArrow '>' )
      // </0 & SecondPass/4 (/7 # TArrow/9 '>'/10 )/8 >/1
      {refalrts::icIdentTerm, 0, 31, 9},
      {refalrts::icSave, 0, 16, 5},
      {refalrts::icCharLeftSave, 10, static_cast<unsigned char>('>'), 16},
      {refalrts::icEmpty, 0, 0, 16},
      {refalrts::icEmptyResult, 0, 0, 0},
      //TRASH: {REMOVED TILE} </0 & SecondPass/4 {REMOVED TILE} )/8 >/1 {REMOVED TILE}
      //RESULT: Tile{ [[ } Tile{ AsIs: (/7 AsIs: # TArrow/9 HalfReuse: )/10 } Tile{ ]] }
      {refalrts::icReinitBracket, 0, refalrts::ibCloseBracket, 10},
      {refalrts::icLinkBrackets, 7, 10, 0},
      {refalrts::icSetResRightEdge, 0, 0, 0},
      {refalrts::icSpliceTile, 7, 10, 0},
      {refalrts::icTrashLeftEdge, 0, 0, 0},
      {refalrts::icNextStep, 0, 0, 0},
      {refalrts::icProfilerStopSentence, 0, 0, 0},
      {refalrts::icOnFailGoTo, +12, 0, 0},
      // ( # TGenericEscChar 'n' )
      // </0 & SecondPass/4 (/7 # TGenericEscChar/9 'n'/10 )/8 >/1
      {refalrts::icIdentTerm, 0, 30, 9},
      {refalrts::icSave, 0, 16, 5},
      {refalrts::icCharLeftSave, 10, static_cast<unsigned char>('n'), 16},
      {refalrts::icEmpty, 0, 0, 16},
      {refalrts::icEmptyResult, 0, 0, 0},
      //TRASH: {REMOVED TILE} </0 & SecondPass/4 {REMOVED TILE} >/1 {REMOVED TILE}
      //RESULT: Tile{ [[ } Tile{ AsIs: (/7 Reuse: # TChar/9 Reuse: '\n'/10 AsIs: )/8 } Tile{ ]] }
      {refalrts::icUpdateIdent, 0, 3, 9},
      {refalrts::icUpdateChar, 0, '\n', 10},
      {refalrts::icLinkBrackets, 7, 8, 0},
      {refalrts::icSetResRightEdge, 0, 0, 0},
      {refalrts::icSpliceTile, 7, 8, 0},
      {refalrts::icTrashLeftEdge, 0, 0, 0},
      {refalrts::icNextStep, 0, 0, 0},
      {refalrts::icProfilerStopSentence, 0, 0, 0},
      {refalrts::icOnFailGoTo, +12, 0, 0},
      // ( # TGenericEscChar 't' )
      // </0 & SecondPass/4 (/7 # TGenericEscChar/9 't'/10 )/8 >/1
      {refalrts::icIdentTerm, 0, 30, 9},
      {refalrts::icSave, 0, 16, 5},
      {refalrts::icCharLeftSave, 10, static_cast<unsigned char>('t'), 16},
      {refalrts::icEmpty, 0, 0, 16},
      {refalrts::icEmptyResult, 0, 0, 0},
      //TRASH: {REMOVED TILE} </0 & SecondPass/4 {REMOVED TILE} >/1 {REMOVED TILE}
      //RESULT: Tile{ [[ } Tile{ AsIs: (/7 Reuse: # TChar/9 Reuse: '\t'/10 AsIs: )/8 } Tile{ ]] }
      {refalrts::icUpdateIdent, 0, 3, 9},
      {refalrts::icUpdateChar, 0, '\t', 10},
      {refalrts::icLinkBrackets, 7, 8, 0},
      {refalrts::icSetResRightEdge, 0, 0, 0},
      {refalrts::icSpliceTile, 7, 8, 0},
      {refalrts::icTrashLeftEdge, 0, 0, 0},
      {refalrts::icNextStep, 0, 0, 0},
      {refalrts::icProfilerStopSentence, 0, 0, 0},
      {refalrts::icOnFailGoTo, +12, 0, 0},
      // ( # TGenericEscChar 'r' )
      // </0 & SecondPass/4 (/7 # TGenericEscChar/9 'r'/10 )/8 >/1
      {refalrts::icIdentTerm, 0, 30, 9},
      {refalrts::icSave, 0, 16, 5},
      {refalrts::icCharLeftSave, 10, static_cast<unsigned char>('r'), 16},
      {refalrts::icEmpty, 0, 0, 16},
      {refalrts::icEmptyResult, 0, 0, 0},
      //TRASH: {REMOVED TILE} </0 & SecondPass/4 {REMOVED TILE} >/1 {REMOVED TILE}
      //RESULT: Tile{ [[ } Tile{ AsIs: (/7 Reuse: # TChar/9 Reuse: '\r'/10 AsIs: )/8 } Tile{ ]] }
      {refalrts::icUpdateIdent, 0, 3, 9},
      {refalrts::icUpdateChar, 0, '\r', 10},
      {refalrts::icLinkBrackets, 7, 8, 0},
      {refalrts::icSetResRightEdge, 0, 0, 0},
      {refalrts::icSpliceTile, 7, 8, 0},
      {refalrts::icTrashLeftEdge, 0, 0, 0},
      {refalrts::icNextStep, 0, 0, 0},
      {refalrts::icProfilerStopSentence, 0, 0, 0},
      {refalrts::icOnFailGoTo, +11, 0, 0},
      // ( # TGenericEscChar '\\' )
      // </0 & SecondPass/4 (/7 # TGenericEscChar/9 '\\'/10 )/8 >/1
      {refalrts::icIdentTerm, 0, 30, 9},
      {refalrts::icSave, 0, 16, 5},
      {refalrts::icCharLeftSave, 10, static_cast<unsigned char>('\\'), 16},
      {refalrts::icEmpty, 0, 0, 16},
      {refalrts::icEmptyResult, 0, 0, 0},
      //TRASH: {REMOVED TILE} </0 & SecondPass/4 {REMOVED TILE} >/1 {REMOVED TILE}
      //RESULT: Tile{ [[ } Tile{ AsIs: (/7 Reuse: # TChar/9 AsIs: '\\'/10 AsIs: )/8 } Tile{ ]] }
      {refalrts::icUpdateIdent, 0, 3, 9},
      {refalrts::icLinkBrackets, 7, 8, 0},
      {refalrts::icSetResRightEdge, 0, 0, 0},
      {refalrts::icSpliceTile, 7, 8, 0},
      {refalrts::icTrashLeftEdge, 0, 0, 0},
      {refalrts::icNextStep, 0, 0, 0},
      {refalrts::icProfilerStopSentence, 0, 0, 0},
      {refalrts::icOnFailGoTo, +10, 0, 0},
      // ( # TChar s.idx )
      // </0 & SecondPass/4 (/7 # TChar/9 s.Char#1/10 )/8 >/1
      {refalrts::icIdentTerm, 0, 3, 9},
      {refalrts::icSave, 0, 16, 5},
      {refalrts::icsVarLeft, 0, 10, 16},
      {refalrts::icEmpty, 0, 0, 16},
      //DEBUG: s.Char#1: 10
      {refalrts::icEmptyResult, 0, 0, 0},
      //TRASH: {REMOVED TILE} </0 & SecondPass/4 {REMOVED TILE} >/1 {REMOVED TILE}
      //RESULT: Tile{ [[ } Tile{ AsIs: (/7 AsIs: # TChar/9 AsIs: s.Char#1/10 AsIs: )/8 } Tile{ ]] }
      {refalrts::icLinkBrackets, 7, 8, 0},
      {refalrts::icSetResRightEdge, 0, 0, 0},
      {refalrts::icSpliceTile, 7, 8, 0},
      {refalrts::icTrashLeftEdge, 0, 0, 0},
      {refalrts::icNextStep, 0, 0, 0},
      {refalrts::icProfilerStopSentence, 0, 0, 0},
      {refalrts::icOnFailGoTo, +11, 0, 0},
      // ( # TStartRegexp '/' )
      // </0 & SecondPass/4 (/7 # TStartRegexp/9 '/'/10 )/8 >/1
      {refalrts::icIdentTerm, 0, 29, 9},
      {refalrts::icSave, 0, 16, 5},
      {refalrts::icCharLeftSave, 10, static_cast<unsigned char>('/'), 16},
      {refalrts::icEmpty, 0, 0, 16},
      {refalrts::icEmptyResult, 0, 0, 0},
      //TRASH: {REMOVED TILE} </0 & SecondPass/4 {REMOVED TILE} )/8 >/1 {REMOVED TILE}
      //RESULT: Tile{ [[ } Tile{ AsIs: (/7 AsIs: # TStartRegexp/9 HalfReuse: )/10 } Tile{ ]] }
      {refalrts::icReinitBracket, 0, refalrts::ibCloseBracket, 10},
      {refalrts::icLinkBrackets, 7, 10, 0},
      {refalrts::icSetResRightEdge, 0, 0, 0},
      {refalrts::icSpliceTile, 7, 10, 0},
      {refalrts::icTrashLeftEdge, 0, 0, 0},
      {refalrts::icNextStep, 0, 0, 0},
      {refalrts::icProfilerStopSentence, 0, 0, 0},
      {refalrts::icOnFailGoTo, +11, 0, 0},
      // ( # TEndRegexp '/' )
      // </0 & SecondPass/4 (/7 # TEndRegexp/9 '/'/10 )/8 >/1
      {refalrts::icIdentTerm, 0, 28, 9},
      {refalrts::icSave, 0, 16, 5},
      {refalrts::icCharLeftSave, 10, static_cast<unsigned char>('/'), 16},
      {refalrts::icEmpty, 0, 0, 16},
      {refalrts::icEmptyResult, 0, 0, 0},
      //TRASH: {REMOVED TILE} </0 & SecondPass/4 {REMOVED TILE} )/8 >/1 {REMOVED TILE}
      //RESULT: Tile{ [[ } Tile{ AsIs: (/7 AsIs: # TEndRegexp/9 HalfReuse: )/10 } Tile{ ]] }
      {refalrts::icReinitBracket, 0, refalrts::ibCloseBracket, 10},
      {refalrts::icLinkBrackets, 7, 10, 0},
      {refalrts::icSetResRightEdge, 0, 0, 0},
      {refalrts::icSpliceTile, 7, 10, 0},
      {refalrts::icTrashLeftEdge, 0, 0, 0},
      {refalrts::icNextStep, 0, 0, 0},
      {refalrts::icProfilerStopSentence, 0, 0, 0},
      {refalrts::icOnFailGoTo, +11, 0, 0},
      // ( # TStartGroup '[' )
      // </0 & SecondPass/4 (/7 # TStartGroup/9 '['/10 )/8 >/1
      {refalrts::icIdentTerm, 0, 27, 9},
      {refalrts::icSave, 0, 16, 5},
      {refalrts::icCharLeftSave, 10, static_cast<unsigned char>('['), 16},
      {refalrts::icEmpty, 0, 0, 16},
      {refalrts::icEmptyResult, 0, 0, 0},
      //TRASH: {REMOVED TILE} </0 & SecondPass/4 {REMOVED TILE} )/8 >/1 {REMOVED TILE}
      //RESULT: Tile{ [[ } Tile{ AsIs: (/7 AsIs: # TStartGroup/9 HalfReuse: )/10 } Tile{ ]] }
      {refalrts::icReinitBracket, 0, refalrts::ibCloseBracket, 10},
      {refalrts::icLinkBrackets, 7, 10, 0},
      {refalrts::icSetResRightEdge, 0, 0, 0},
      {refalrts::icSpliceTile, 7, 10, 0},
      {refalrts::icTrashLeftEdge, 0, 0, 0},
      {refalrts::icNextStep, 0, 0, 0},
      {refalrts::icProfilerStopSentence, 0, 0, 0},
      {refalrts::icOnFailGoTo, +11, 0, 0},
      // ( # TEndGroup ']' )
      // </0 & SecondPass/4 (/7 # TEndGroup/9 ']'/10 )/8 >/1
      {refalrts::icIdentTerm, 0, 26, 9},
      {refalrts::icSave, 0, 16, 5},
      {refalrts::icCharLeftSave, 10, static_cast<unsigned char>(']'), 16},
      {refalrts::icEmpty, 0, 0, 16},
      {refalrts::icEmptyResult, 0, 0, 0},
      //TRASH: {REMOVED TILE} </0 & SecondPass/4 {REMOVED TILE} )/8 >/1 {REMOVED TILE}
      //RESULT: Tile{ [[ } Tile{ AsIs: (/7 AsIs: # TEndGroup/9 HalfReuse: )/10 } Tile{ ]] }
      {refalrts::icReinitBracket, 0, refalrts::ibCloseBracket, 10},
      {refalrts::icLinkBrackets, 7, 10, 0},
      {refalrts::icSetResRightEdge, 0, 0, 0},
      {refalrts::icSpliceTile, 7, 10, 0},
      {refalrts::icTrashLeftEdge, 0, 0, 0},
      {refalrts::icNextStep, 0, 0, 0},
      {refalrts::icProfilerStopSentence, 0, 0, 0},
      {refalrts::icOnFailGoTo, +10, 0, 0},
      // ( # TInclude e.idx '}' )
      // </0 & SecondPass/4 (/7 # TInclude/9 e.Name#1/5 '}'/10 )/8 >/1
      {refalrts::icIdentTerm, 0, 25, 9},
      {refalrts::icSave, 0, 16, 5},
      {refalrts::icCharRightSave, 10, static_cast<unsigned char>('}'), 16},
      // closed e.Name#1 as range 16(5)
      //DEBUG: e.Name#1: 5
      {refalrts::icEmptyResult, 0, 0, 0},
      //TRASH: {REMOVED TILE} </0 & SecondPass/4 {REMOVED TILE} )/8 >/1 {REMOVED TILE}
      //RESULT: Tile{ [[ } Tile{ AsIs: (/7 AsIs: # TInclude/9 AsIs: e.Name#1/16(5) HalfReuse: )/10 } Tile{ ]] }
      {refalrts::icReinitBracket, 0, refalrts::ibCloseBracket, 10},
      {refalrts::icLinkBrackets, 7, 10, 0},
      {refalrts::icSetResRightEdge, 0, 0, 0},
      {refalrts::icSpliceTile, 7, 10, 0},
      {refalrts::icTrashLeftEdge, 0, 0, 0},
      {refalrts::icNextStep, 0, 0, 0},
      {refalrts::icProfilerStopSentence, 0, 0, 0},
      {refalrts::icOnFailGoTo, +12, 0, 0},
      // ( # TSpecChar '.' )
      // </0 & SecondPass/4 (/7 # TSpecChar/9 '.'/10 )/8 >/1
      {refalrts::icIdentTerm, 0, 19, 9},
      {refalrts::icSave, 0, 16, 5},
      {refalrts::icCharLeftSave, 10, static_cast<unsigned char>('.'), 16},
      {refalrts::icEmpty, 0, 0, 16},
      {refalrts::icEmptyResult, 0, 0, 0},
      //TRASH: {REMOVED TILE} </0 & SecondPass/4 (/7 # TSpecChar/9 {REMOVED TILE}
      //RESULT: Tile{ [[ } Tile{ HalfReuse: (/10 HalfReuse: # TAny/8 HalfReuse: )/1 ]] }
      {refalrts::icReinitBracket, 0, refalrts::ibOpenBracket, 10},
      {refalrts::icReinitIdent, 0, 24, 8},
      {refalrts::icReinitBracket, 0, refalrts::ibCloseBracket, 1},
      {refalrts::icLinkBrackets, 10, 1, 0},
      {refalrts::icSetRes, 0, 0, 10},
      {refalrts::icTrashLeftEdge, 0, 0, 0},
      {refalrts::icNextStep, 0, 0, 0},
      {refalrts::icProfilerStopSentence, 0, 0, 0},
      {refalrts::icOnFailGoTo, +12, 0, 0},
      // ( # TSpecChar '(' )
      // </0 & SecondPass/4 (/7 # TSpecChar/9 '('/10 )/8 >/1
      {refalrts::icIdentTerm, 0, 19, 9},
      {refalrts::icSave, 0, 16, 5},
      {refalrts::icCharLeftSave, 10, static_cast<unsigned char>('('), 16},
      {refalrts::icEmpty, 0, 0, 16},
      {refalrts::icEmptyResult, 0, 0, 0},
      //TRASH: {REMOVED TILE} </0 & SecondPass/4 (/7 # TSpecChar/9 {REMOVED TILE}
      //RESULT: Tile{ [[ } Tile{ HalfReuse: (/10 HalfReuse: # TOpenBracket/8 HalfReuse: )/1 ]] }
      {refalrts::icReinitBracket, 0, refalrts::ibOpenBracket, 10},
      {refalrts::icReinitIdent, 0, 23, 8},
      {refalrts::icReinitBracket, 0, refalrts::ibCloseBracket, 1},
      {refalrts::icLinkBrackets, 10, 1, 0},
      {refalrts::icSetRes, 0, 0, 10},
      {refalrts::icTrashLeftEdge, 0, 0, 0},
      {refalrts::icNextStep, 0, 0, 0},
      {refalrts::icProfilerStopSentence, 0, 0, 0},
      {refalrts::icOnFailGoTo, +12, 0, 0},
      // ( # TSpecChar ')' )
      // </0 & SecondPass/4 (/7 # TSpecChar/9 ')'/10 )/8 >/1
      {refalrts::icIdentTerm, 0, 19, 9},
      {refalrts::icSave, 0, 16, 5},
      {refalrts::icCharLeftSave, 10, static_cast<unsigned char>(')'), 16},
      {refalrts::icEmpty, 0, 0, 16},
      {refalrts::icEmptyResult, 0, 0, 0},
      //TRASH: {REMOVED TILE} </0 & SecondPass/4 (/7 # TSpecChar/9 {REMOVED TILE}
      //RESULT: Tile{ [[ } Tile{ HalfReuse: (/10 HalfReuse: # TCloseBracket/8 HalfReuse: )/1 ]] }
      {refalrts::icReinitBracket, 0, refalrts::ibOpenBracket, 10},
      {refalrts::icReinitIdent, 0, 22, 8},
      {refalrts::icReinitBracket, 0, refalrts::ibCloseBracket, 1},
      {refalrts::icLinkBrackets, 10, 1, 0},
      {refalrts::icSetRes, 0, 0, 10},
      {refalrts::icTrashLeftEdge, 0, 0, 0},
      {refalrts::icNextStep, 0, 0, 0},
      {refalrts::icProfilerStopSentence, 0, 0, 0},
      {refalrts::icOnFailGoTo, +12, 0, 0},
      // ( # TSpecChar '|' )
      // </0 & SecondPass/4 (/7 # TSpecChar/9 '|'/10 )/8 >/1
      {refalrts::icIdentTerm, 0, 19, 9},
      {refalrts::icSave, 0, 16, 5},
      {refalrts::icCharLeftSave, 10, static_cast<unsigned char>('|'), 16},
      {refalrts::icEmpty, 0, 0, 16},
      {refalrts::icEmptyResult, 0, 0, 0},
      //TRASH: {REMOVED TILE} </0 & SecondPass/4 (/7 # TSpecChar/9 {REMOVED TILE}
      //RESULT: Tile{ [[ } Tile{ HalfReuse: (/10 HalfReuse: # TAlt/8 HalfReuse: )/1 ]] }
      {refalrts::icReinitBracket, 0, refalrts::ibOpenBracket, 10},
      {refalrts::icReinitIdent, 0, 21, 8},
      {refalrts::icReinitBracket, 0, refalrts::ibCloseBracket, 1},
      {refalrts::icLinkBrackets, 10, 1, 0},
      {refalrts::icSetRes, 0, 0, 10},
      {refalrts::icTrashLeftEdge, 0, 0, 0},
      {refalrts::icNextStep, 0, 0, 0},
      {refalrts::icProfilerStopSentence, 0, 0, 0},
      {refalrts::icOnFailGoTo, +12, 0, 0},
      // ( # TSpecChar '^' )
      // </0 & SecondPass/4 (/7 # TSpecChar/9 '^'/10 )/8 >/1
      {refalrts::icIdentTerm, 0, 19, 9},
      {refalrts::icSave, 0, 16, 5},
      {refalrts::icCharLeftSave, 10, static_cast<unsigned char>('^'), 16},
      {refalrts::icEmpty, 0, 0, 16},
      {refalrts::icEmptyResult, 0, 0, 0},
      //TRASH: {REMOVED TILE} </0 & SecondPass/4 (/7 # TSpecChar/9 {REMOVED TILE}
      //RESULT: Tile{ [[ } Tile{ HalfReuse: (/10 HalfReuse: # TBegin/8 HalfReuse: )/1 ]] }
      {refalrts::icReinitBracket, 0, refalrts::ibOpenBracket, 10},
      {refalrts::icReinitIdent, 0, 20, 8},
      {refalrts::icReinitBracket, 0, refalrts::ibCloseBracket, 1},
      {refalrts::icLinkBrackets, 10, 1, 0},
      {refalrts::icSetRes, 0, 0, 10},
      {refalrts::icTrashLeftEdge, 0, 0, 0},
      {refalrts::icNextStep, 0, 0, 0},
      {refalrts::icProfilerStopSentence, 0, 0, 0},
      {refalrts::icOnFailGoTo, +12, 0, 0},
      // ( # TSpecChar '$' )
      // </0 & SecondPass/4 (/7 # TSpecChar/9 '$'/10 )/8 >/1
      {refalrts::icIdentTerm, 0, 19, 9},
      {refalrts::icSave, 0, 16, 5},
      {refalrts::icCharLeftSave, 10, static_cast<unsigned char>('$'), 16},
      {refalrts::icEmpty, 0, 0, 16},
      {refalrts::icEmptyResult, 0, 0, 0},
      //TRASH: {REMOVED TILE} </0 & SecondPass/4 (/7 # TSpecChar/9 {REMOVED TILE}
      //RESULT: Tile{ [[ } Tile{ HalfReuse: (/10 HalfReuse: # TEnd/8 HalfReuse: )/1 ]] }
      {refalrts::icReinitBracket, 0, refalrts::ibOpenBracket, 10},
      {refalrts::icReinitIdent, 0, 18, 8},
      {refalrts::icReinitBracket, 0, refalrts::ibCloseBracket, 1},
      {refalrts::icLinkBrackets, 10, 1, 0},
      {refalrts::icSetRes, 0, 0, 10},
      {refalrts::icTrashLeftEdge, 0, 0, 0},
      {refalrts::icNextStep, 0, 0, 0},
      {refalrts::icProfilerStopSentence, 0, 0, 0},
      {refalrts::icOnFailGoTo, +12, 0, 0},
      // ( # TQuantifier '?' )
      // </0 & SecondPass/4 (/7 # TQuantifier/9 '?'/10 )/8 >/1
      {refalrts::icIdentTerm, 0, 15, 9},
      {refalrts::icSave, 0, 16, 5},
      {refalrts::icCharLeftSave, 10, static_cast<unsigned char>('?'), 16},
      {refalrts::icEmpty, 0, 0, 16},
      {refalrts::icEmptyResult, 0, 0, 0},
      //TRASH: {REMOVED TILE} </0 & SecondPass/4 (/7 # TQuantifier/9 {REMOVED TILE}
      //RESULT: Tile{ [[ } Tile{ HalfReuse: (/10 HalfReuse: # TOptional/8 HalfReuse: )/1 ]] }
      {refalrts::icReinitBracket, 0, refalrts::ibOpenBracket, 10},
      {refalrts::icReinitIdent, 0, 17, 8},
      {refalrts::icReinitBracket, 0, refalrts::ibCloseBracket, 1},
      {refalrts::icLinkBrackets, 10, 1, 0},
      {refalrts::icSetRes, 0, 0, 10},
      {refalrts::icTrashLeftEdge, 0, 0, 0},
      {refalrts::icNextStep, 0, 0, 0},
      {refalrts::icProfilerStopSentence, 0, 0, 0},
      {refalrts::icOnFailGoTo, +12, 0, 0},
      // ( # TQuantifier '*' )
      // </0 & SecondPass/4 (/7 # TQuantifier/9 '*'/10 )/8 >/1
      {refalrts::icIdentTerm, 0, 15, 9},
      {refalrts::icSave, 0, 16, 5},
      {refalrts::icCharLeftSave, 10, static_cast<unsigned char>('*'), 16},
      {refalrts::icEmpty, 0, 0, 16},
      {refalrts::icEmptyResult, 0, 0, 0},
      //TRASH: {REMOVED TILE} </0 & SecondPass/4 (/7 # TQuantifier/9 {REMOVED TILE}
      //RESULT: Tile{ [[ } Tile{ HalfReuse: (/10 HalfReuse: # TZeroMany/8 HalfReuse: )/1 ]] }
      {refalrts::icReinitBracket, 0, refalrts::ibOpenBracket, 10},
      {refalrts::icReinitIdent, 0, 16, 8},
      {refalrts::icReinitBracket, 0, refalrts::ibCloseBracket, 1},
      {refalrts::icLinkBrackets, 10, 1, 0},
      {refalrts::icSetRes, 0, 0, 10},
      {refalrts::icTrashLeftEdge, 0, 0, 0},
      {refalrts::icNextStep, 0, 0, 0},
      {refalrts::icProfilerStopSentence, 0, 0, 0},
      {refalrts::icOnFailGoTo, +12, 0, 0},
      // ( # TQuantifier '+' )
      // </0 & SecondPass/4 (/7 # TQuantifier/9 '+'/10 )/8 >/1
      {refalrts::icIdentTerm, 0, 15, 9},
      {refalrts::icSave, 0, 16, 5},
      {refalrts::icCharLeftSave, 10, static_cast<unsigned char>('+'), 16},
      {refalrts::icEmpty, 0, 0, 16},
      {refalrts::icEmptyResult, 0, 0, 0},
      //TRASH: {REMOVED TILE} </0 & SecondPass/4 (/7 # TQuantifier/9 {REMOVED TILE}
      //RESULT: Tile{ [[ } Tile{ HalfReuse: (/10 HalfReuse: # TOneMany/8 HalfReuse: )/1 ]] }
      {refalrts::icReinitBracket, 0, refalrts::ibOpenBracket, 10},
      {refalrts::icReinitIdent, 0, 14, 8},
      {refalrts::icReinitBracket, 0, refalrts::ibCloseBracket, 1},
      {refalrts::icLinkBrackets, 10, 1, 0},
      {refalrts::icSetRes, 0, 0, 10},
      {refalrts::icTrashLeftEdge, 0, 0, 0},
      {refalrts::icNextStep, 0, 0, 0},
      {refalrts::icProfilerStopSentence, 0, 0, 0},
      {refalrts::icOnFailGoTo, +11, 0, 0},
      // ( # TInvertGroup '^' )
      // </0 & SecondPass/4 (/7 # TInvertGroup/9 '^'/10 )/8 >/1
      {refalrts::icIdentTerm, 0, 13, 9},
      {refalrts::icSave, 0, 16, 5},
      {refalrts::icCharLeftSave, 10, static_cast<unsigned char>('^'), 16},
      {refalrts::icEmpty, 0, 0, 16},
      {refalrts::icEmptyResult, 0, 0, 0},
      //TRASH: {REMOVED TILE} </0 & SecondPass/4 {REMOVED TILE} )/8 >/1 {REMOVED TILE}
      //RESULT: Tile{ [[ } Tile{ AsIs: (/7 AsIs: # TInvertGroup/9 HalfReuse: )/10 } Tile{ ]] }
      {refalrts::icReinitBracket, 0, refalrts::ibCloseBracket, 10},
      {refalrts::icLinkBrackets, 7, 10, 0},
      {refalrts::icSetResRightEdge, 0, 0, 0},
      {refalrts::icSpliceTile, 7, 10, 0},
      {refalrts::icTrashLeftEdge, 0, 0, 0},
      {refalrts::icNextStep, 0, 0, 0},
      {refalrts::icProfilerStopSentence, 0, 0, 0},
      {refalrts::icOnFailGoTo, +11, 0, 0},
      // ( # TGroupRange '-' )
      // </0 & SecondPass/4 (/7 # TGroupRange/9 '-'/10 )/8 >/1
      {refalrts::icIdentTerm, 0, 12, 9},
      {refalrts::icSave, 0, 16, 5},
      {refalrts::icCharLeftSave, 10, static_cast<unsigned char>('-'), 16},
      {refalrts::icEmpty, 0, 0, 16},
      {refalrts::icEmptyResult, 0, 0, 0},
      //TRASH: {REMOVED TILE} </0 & SecondPass/4 {REMOVED TILE} )/8 >/1 {REMOVED TILE}
      //RESULT: Tile{ [[ } Tile{ AsIs: (/7 AsIs: # TGroupRange/9 HalfReuse: )/10 } Tile{ ]] }
      {refalrts::icReinitBracket, 0, refalrts::ibCloseBracket, 10},
      {refalrts::icLinkBrackets, 7, 10, 0},
      {refalrts::icSetResRightEdge, 0, 0, 0},
      {refalrts::icSpliceTile, 7, 10, 0},
      {refalrts::icTrashLeftEdge, 0, 0, 0},
      {refalrts::icNextStep, 0, 0, 0},
      {refalrts::icProfilerStopSentence, 0, 0, 0},
      {refalrts::icOnFailGoTo, +23, 0, 0},
      // ( # TUnexpecteChar s.idx )
      // </0 & SecondPass/4 (/7 # TUnexpecteChar/9 s.Char#1/10 )/8 >/1
      {refalrts::icIdentTerm, 0, 11, 9},
      {refalrts::icSave, 0, 16, 5},
      {refalrts::icsVarLeft, 0, 10, 16},
      {refalrts::icEmpty, 0, 0, 16},
      //DEBUG: s.Char#1: 10
      {refalrts::icEmptyResult, 0, 0, 0},
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ } (/11 # TError/12"Unexpected char"/13 Tile{ HalfReuse: ' '/0 HalfReuse: '\''/4 HalfReuse: </7 HalfReuse: & EscapeString/9 AsIs: s.Char#1/10 HalfReuse: >/8 HalfReuse: '\''/1 } )/15 Tile{ ]] }
      {refalrts::icAllocBracket, 0, refalrts::ibOpenBracket, 11},
      {refalrts::icAllocIdent, 0, 9, 12},
      {refalrts::icAllocString, 0, 0, 13},
      {refalrts::icAllocBracket, 0, refalrts::ibCloseBracket, 15},
      {refalrts::icReinitChar, 0, ' ', 0},
      {refalrts::icReinitChar, 0, '\'', 4},
      {refalrts::icReinitBracket, 0, refalrts::ibOpenCall, 7},
      {refalrts::icReinitFunc, 0, 1, 9},
      {refalrts::icReinitBracket, 0, refalrts::ibCloseCall, 8},
      {refalrts::icReinitChar, 0, '\'', 1},
      {refalrts::icLinkBrackets, 11, 15, 0},
      {refalrts::icPushStack, 0, 0, 8},
      {refalrts::icPushStack, 0, 0, 7},
      {refalrts::icSetResRightEdge, 0, 0, 0},
      {refalrts::icSpliceTile, 15, 15, 0},
      {refalrts::icSpliceTile, 0, 1, 0},
      {refalrts::icSpliceTile, 11, 14, 0},
      {refalrts::icNextStep, 0, 0, 0},
      {refalrts::icProfilerStopSentence, 0, 0, 0},
      {refalrts::icOnFailGoTo, +8, 0, 0},
      // ( # TokenError e.idx )
      // </0 & SecondPass/4 (/7 # TokenError/9 e.Message#1/5 )/8 >/1
      {refalrts::icIdentTerm, 0, 10, 9},
      // closed e.Message#1 as range 5
      //DEBUG: e.Message#1: 5
      {refalrts::icEmptyResult, 0, 0, 0},
      //TRASH: {REMOVED TILE} </0 & SecondPass/4 {REMOVED TILE} >/1 {REMOVED TILE}
      //RESULT: Tile{ [[ } Tile{ AsIs: (/7 Reuse: # TError/9 AsIs: e.Message#1/5 AsIs: )/8 } Tile{ ]] }
      {refalrts::icUpdateIdent, 0, 9, 9},
      {refalrts::icLinkBrackets, 7, 8, 0},
      {refalrts::icSetResRightEdge, 0, 0, 0},
      {refalrts::icSpliceTile, 7, 8, 0},
      {refalrts::icTrashLeftEdge, 0, 0, 0},
      {refalrts::icNextStep, 0, 0, 0},
      {refalrts::icProfilerStopSentence, 0, 0, 0},
      {refalrts::icOnFailGoTo, +11, 0, 0},
      // ( # TStateStart '<' )
      // </0 & SecondPass/4 (/7 # TStateStart/9 '<'/10 )/8 >/1
      {refalrts::icIdentTerm, 0, 8, 9},
      {refalrts::icSave, 0, 16, 5},
      {refalrts::icCharLeftSave, 10, static_cast<unsigned char>('<'), 16},
      {refalrts::icEmpty, 0, 0, 16},
      {refalrts::icEmptyResult, 0, 0, 0},
      //TRASH: {REMOVED TILE} </0 & SecondPass/4 {REMOVED TILE} )/8 >/1 {REMOVED TILE}
      //RESULT: Tile{ [[ } Tile{ AsIs: (/7 AsIs: # TStateStart/9 HalfReuse: )/10 } Tile{ ]] }
      {refalrts::icReinitBracket, 0, refalrts::ibCloseBracket, 10},
      {refalrts::icLinkBrackets, 7, 10, 0},
      {refalrts::icSetResRightEdge, 0, 0, 0},
      {refalrts::icSpliceTile, 7, 10, 0},
      {refalrts::icTrashLeftEdge, 0, 0, 0},
      {refalrts::icNextStep, 0, 0, 0},
      {refalrts::icProfilerStopSentence, 0, 0, 0},
      {refalrts::icOnFailGoTo, +11, 0, 0},
      // ( # TComma ',' )
      // </0 & SecondPass/4 (/7 # TComma/9 ','/10 )/8 >/1
      {refalrts::icIdentTerm, 0, 7, 9},
      {refalrts::icSave, 0, 16, 5},
      {refalrts::icCharLeftSave, 10, static_cast<unsigned char>(','), 16},
      {refalrts::icEmpty, 0, 0, 16},
      {refalrts::icEmptyResult, 0, 0, 0},
      //TRASH: {REMOVED TILE} </0 & SecondPass/4 {REMOVED TILE} )/8 >/1 {REMOVED TILE}
      //RESULT: Tile{ [[ } Tile{ AsIs: (/7 AsIs: # TComma/9 HalfReuse: )/10 } Tile{ ]] }
      {refalrts::icReinitBracket, 0, refalrts::ibCloseBracket, 10},
      {refalrts::icLinkBrackets, 7, 10, 0},
      {refalrts::icSetResRightEdge, 0, 0, 0},
      {refalrts::icSpliceTile, 7, 10, 0},
      {refalrts::icTrashLeftEdge, 0, 0, 0},
      {refalrts::icNextStep, 0, 0, 0},
      {refalrts::icProfilerStopSentence, 0, 0, 0},
      {refalrts::icOnFailGoTo, +11, 0, 0},
      // ( # TStateEnd '>' )
      // </0 & SecondPass/4 (/7 # TStateEnd/9 '>'/10 )/8 >/1
      {refalrts::icIdentTerm, 0, 6, 9},
      {refalrts::icSave, 0, 16, 5},
      {refalrts::icCharLeftSave, 10, static_cast<unsigned char>('>'), 16},
      {refalrts::icEmpty, 0, 0, 16},
      {refalrts::icEmptyResult, 0, 0, 0},
      //TRASH: {REMOVED TILE} </0 & SecondPass/4 {REMOVED TILE} )/8 >/1 {REMOVED TILE}
      //RESULT: Tile{ [[ } Tile{ AsIs: (/7 AsIs: # TStateEnd/9 HalfReuse: )/10 } Tile{ ]] }
      {refalrts::icReinitBracket, 0, refalrts::ibCloseBracket, 10},
      {refalrts::icLinkBrackets, 7, 10, 0},
      {refalrts::icSetResRightEdge, 0, 0, 0},
      {refalrts::icSpliceTile, 7, 10, 0},
      {refalrts::icTrashLeftEdge, 0, 0, 0},
      {refalrts::icNextStep, 0, 0, 0},
      {refalrts::icProfilerStopSentence, 0, 0, 0},
      {refalrts::icOnFailGoTo, +15, 0, 0},
      // ( # TkHexNumber e.idx )
      // </0 & SecondPass/4 (/7 # TkHexNumber/9 e.HexCode#1/5 )/8 >/1
      {refalrts::icIdentTerm, 0, 5, 9},
      // closed e.HexCode#1 as range 5
      //DEBUG: e.HexCode#1: 5
      {refalrts::icEmptyResult, 0, 0, 0},
      //TRASH: {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ } (/10 Tile{ HalfReuse: # TChar/0 HalfReuse: </4 HalfReuse: & CharFromNum/7 HalfReuse: 16/9 AsIs: e.HexCode#1/5 HalfReuse: >/8 HalfReuse: )/1 ]] }
      {refalrts::icAllocBracket, 0, refalrts::ibOpenBracket, 10},
      {refalrts::icReinitIdent, 0, 3, 0},
      {refalrts::icReinitBracket, 0, refalrts::ibOpenCall, 4},
      {refalrts::icReinitFunc, 0, 0, 7},
      {refalrts::icReinitInt, 0, 16, 9},
      {refalrts::icReinitBracket, 0, refalrts::ibCloseCall, 8},
      {refalrts::icReinitBracket, 0, refalrts::ibCloseBracket, 1},
      {refalrts::icLinkBrackets, 10, 1, 0},
      {refalrts::icPushStack, 0, 0, 8},
      {refalrts::icPushStack, 0, 0, 4},
      {refalrts::icSetRes, 0, 0, 0},
      {refalrts::icSpliceTile, 10, 10, 0},
      {refalrts::icNextStep, 0, 0, 0},
      {refalrts::icProfilerStopSentence, 0, 0, 0},
      {refalrts::icOnFailGoTo, +15, 0, 0},
      // ( # TkOctNumber e.idx )
      // </0 & SecondPass/4 (/7 # TkOctNumber/9 e.OctCode#1/5 )/8 >/1
      {refalrts::icIdentTerm, 0, 4, 9},
      // closed e.OctCode#1 as range 5
      //DEBUG: e.OctCode#1: 5
      {refalrts::icEmptyResult, 0, 0, 0},
      //TRASH: {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ } (/10 Tile{ HalfReuse: # TChar/0 HalfReuse: </4 HalfReuse: & CharFromNum/7 HalfReuse: 8/9 AsIs: e.OctCode#1/5 HalfReuse: >/8 HalfReuse: )/1 ]] }
      {refalrts::icAllocBracket, 0, refalrts::ibOpenBracket, 10},
      {refalrts::icReinitIdent, 0, 3, 0},
      {refalrts::icReinitBracket, 0, refalrts::ibOpenCall, 4},
      {refalrts::icReinitFunc, 0, 0, 7},
      {refalrts::icReinitInt, 0, 8, 9},
      {refalrts::icReinitBracket, 0, refalrts::ibCloseCall, 8},
      {refalrts::icReinitBracket, 0, refalrts::ibCloseBracket, 1},
      {refalrts::icLinkBrackets, 10, 1, 0},
      {refalrts::icPushStack, 0, 0, 8},
      {refalrts::icPushStack, 0, 0, 4},
      {refalrts::icSetRes, 0, 0, 0},
      {refalrts::icSpliceTile, 10, 10, 0},
      {refalrts::icNextStep, 0, 0, 0},
      {refalrts::icProfilerStopSentence, 0, 0, 0},
      {refalrts::icOnFailGoTo, +9, 0, 0},
      // ( # TSkip )
      // </0 & SecondPass/4 (/7 # TSkip/9 )/8 >/1
      {refalrts::icIdentTerm, 0, 2, 9},
      {refalrts::icSave, 0, 16, 5},
      {refalrts::icEmpty, 0, 0, 16},
      {refalrts::icEmptyResult, 0, 0, 0},
      //TRASH: {REMOVED TILE} </0 & SecondPass/4 {REMOVED TILE} >/1 {REMOVED TILE}
      //RESULT: Tile{ [[ } Tile{ AsIs: (/7 AsIs: # TSkip/9 AsIs: )/8 } Tile{ ]] }
      {refalrts::icLinkBrackets, 7, 8, 0},
      {refalrts::icSetResRightEdge, 0, 0, 0},
      {refalrts::icSpliceTile, 7, 8, 0},
      {refalrts::icTrashLeftEdge, 0, 0, 0},
      {refalrts::icNextStep, 0, 0, 0},
      {refalrts::icProfilerStopSentence, 0, 0, 0},
      {refalrts::icOnFailGoTo, +10, 0, 0},
      // ( # TErrorMessage e.idx '\"' )
      // </0 & SecondPass/4 (/7 # TErrorMessage/9 e.Message#1/5 '\"'/10 )/8 >/1
      {refalrts::icIdentTerm, 0, 1, 9},
      {refalrts::icSave, 0, 16, 5},
      {refalrts::icCharRightSave, 10, static_cast<unsigned char>('\"'), 16},
      // closed e.Message#1 as range 16(5)
      //DEBUG: e.Message#1: 5
      {refalrts::icEmptyResult, 0, 0, 0},
      //TRASH: {REMOVED TILE} </0 & SecondPass/4 {REMOVED TILE} )/8 >/1 {REMOVED TILE}
      //RESULT: Tile{ [[ } Tile{ AsIs: (/7 AsIs: # TErrorMessage/9 AsIs: e.Message#1/16(5) HalfReuse: )/10 } Tile{ ]] }
      {refalrts::icReinitBracket, 0, refalrts::ibCloseBracket, 10},
      {refalrts::icLinkBrackets, 7, 10, 0},
      {refalrts::icSetResRightEdge, 0, 0, 0},
      {refalrts::icSpliceTile, 7, 10, 0},
      {refalrts::icTrashLeftEdge, 0, 0, 0},
      {refalrts::icNextStep, 0, 0, 0},
      {refalrts::icProfilerStopSentence, 0, 0, 0},
      // ( # TEOF )
      // </0 & SecondPass/4 (/7 # TEOF/9 )/8 >/1
      {refalrts::icIdentTerm, 0, 0, 9},
      {refalrts::icEmpty, 0, 0, 5},
      {refalrts::icEmptyResult, 0, 0, 0},
      //TRASH: {REMOVED TILE} </0 & SecondPass/4 {REMOVED TILE} >/1 {REMOVED TILE}
      //RESULT: Tile{ [[ } Tile{ AsIs: (/7 AsIs: # TEOF/9 AsIs: )/8 } Tile{ ]] }
      {refalrts::icLinkBrackets, 7, 8, 0},
      {refalrts::icSetResRightEdge, 0, 0, 0},
      {refalrts::icSpliceTile, 7, 8, 0},
      {refalrts::icTrashLeftEdge, 0, 0, 0},
      {refalrts::icNextStep, 0, 0, 0},
      {refalrts::icEnd, 0, 0, 0}
    };
  } // namespace scope_SecondPass

} // unnamed namespace

namespace /* unnamed */ {
refalrts::RASLFunction descr_SecondPass(
  "SecondPass",
  scope_SecondPass::raa,
  scope_SecondPass::functions,
  scope_SecondPass::idents,
  scope_SecondPass::numbers,
  scope_SecondPass::strings,
  scope_SecondPass::filename
);
refalrts::RefalFunction& SecondPass = descr_SecondPass;

} // unnamed namespace

#else
static refalrts::FnResult func_SecondPass(refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  refalrts::this_is_generated_function();
  // issue here memory for vars with 18 elems
  refalrts::Iter context[18];
  refalrts::zeros( context, 18 );
  //FAST GEN: ( e.$ )
  //GLOBAL GEN: ( s.$ e.$ )
  // </0 & SecondPass/4 (/7 s.idxB#0/9 e.idxBV#0/5 )/8 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  context[5] = 0;
  context[6] = 0;
  context[7] = refalrts::brackets_left( context[5], context[6], context[2], context[3] );
  if( ! context[7] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[7], context[8]);
  if( ! refalrts::empty_seq( context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  if( ! refalrts::svar_left( context[9], context[5], context[6] ) )
    return refalrts::cRecognitionImpossible;
  // closed e.idxBV#0 as range 5
  do {
    // ( # TNewLine '\n' )
    // </0 & SecondPass/4 (/7 # TNewLine/9 '\n'/10 )/8 >/1
    if( ! refalrts::ident_term(  & ident_TNewLine<int>::name, context[9] ) )
      continue;
    context[16] = context[5];
    context[17] = context[6];
    context[10] = refalrts::char_left( '\n', context[16], context[17] );
    if( ! context[10] )
      continue;
    if( ! refalrts::empty_seq( context[16], context[17] ) )
      continue;

    refalrts::reset_allocator();
    //TRASH: {REMOVED TILE} </0 & SecondPass/4 {REMOVED TILE} >/1 {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ AsIs: (/7 AsIs: # TNewLine/9 AsIs: '\n'/10 AsIs: )/8 } Tile{ ]] }
    refalrts::link_brackets( context[7], context[8] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = arg_end->next;
    res = refalrts::splice_evar( res, context[7], context[8] );
    refalrts::use( res );
    refalrts::splice_to_freelist_open( trash_prev, res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence();

  do {
    // ( # TName e.idx )
    // </0 & SecondPass/4 (/7 # TName/9 e.Name#1/5 )/8 >/1
    if( ! refalrts::ident_term(  & ident_TName<int>::name, context[9] ) )
      continue;
    // closed e.Name#1 as range 5
    //DEBUG: e.Name#1: 5

    refalrts::reset_allocator();
    //TRASH: {REMOVED TILE} </0 & SecondPass/4 {REMOVED TILE} >/1 {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ AsIs: (/7 AsIs: # TName/9 AsIs: e.Name#1/5 AsIs: )/8 } Tile{ ]] }
    refalrts::link_brackets( context[7], context[8] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = arg_end->next;
    res = refalrts::splice_evar( res, context[7], context[8] );
    refalrts::use( res );
    refalrts::splice_to_freelist_open( trash_prev, res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence();

  do {
    // ( # TEquals '=' )
    // </0 & SecondPass/4 (/7 # TEquals/9 '='/10 )/8 >/1
    if( ! refalrts::ident_term(  & ident_TEquals<int>::name, context[9] ) )
      continue;
    context[16] = context[5];
    context[17] = context[6];
    context[10] = refalrts::char_left( '=', context[16], context[17] );
    if( ! context[10] )
      continue;
    if( ! refalrts::empty_seq( context[16], context[17] ) )
      continue;

    refalrts::reset_allocator();
    //TRASH: {REMOVED TILE} </0 & SecondPass/4 {REMOVED TILE} )/8 >/1 {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ AsIs: (/7 AsIs: # TEquals/9 HalfReuse: )/10 } Tile{ ]] }
    refalrts::reinit_close_bracket( context[10] );
    refalrts::link_brackets( context[7], context[10] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = arg_end->next;
    res = refalrts::splice_evar( res, context[7], context[10] );
    refalrts::use( res );
    refalrts::splice_to_freelist_open( trash_prev, res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence();

  do {
    // ( # TArrow '>' )
    // </0 & SecondPass/4 (/7 # TArrow/9 '>'/10 )/8 >/1
    if( ! refalrts::ident_term(  & ident_TArrow<int>::name, context[9] ) )
      continue;
    context[16] = context[5];
    context[17] = context[6];
    context[10] = refalrts::char_left( '>', context[16], context[17] );
    if( ! context[10] )
      continue;
    if( ! refalrts::empty_seq( context[16], context[17] ) )
      continue;

    refalrts::reset_allocator();
    //TRASH: {REMOVED TILE} </0 & SecondPass/4 {REMOVED TILE} )/8 >/1 {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ AsIs: (/7 AsIs: # TArrow/9 HalfReuse: )/10 } Tile{ ]] }
    refalrts::reinit_close_bracket( context[10] );
    refalrts::link_brackets( context[7], context[10] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = arg_end->next;
    res = refalrts::splice_evar( res, context[7], context[10] );
    refalrts::use( res );
    refalrts::splice_to_freelist_open( trash_prev, res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence();

  do {
    // ( # TGenericEscChar 'n' )
    // </0 & SecondPass/4 (/7 # TGenericEscChar/9 'n'/10 )/8 >/1
    if( ! refalrts::ident_term(  & ident_TGenericEscChar<int>::name, context[9] ) )
      continue;
    context[16] = context[5];
    context[17] = context[6];
    context[10] = refalrts::char_left( 'n', context[16], context[17] );
    if( ! context[10] )
      continue;
    if( ! refalrts::empty_seq( context[16], context[17] ) )
      continue;

    refalrts::reset_allocator();
    //TRASH: {REMOVED TILE} </0 & SecondPass/4 {REMOVED TILE} >/1 {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ AsIs: (/7 Reuse: # TChar/9 Reuse: '\n'/10 AsIs: )/8 } Tile{ ]] }
    refalrts::update_ident( context[9], & ident_TChar<int>::name );
    refalrts::update_char( context[10], '\n' );
    refalrts::link_brackets( context[7], context[8] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = arg_end->next;
    res = refalrts::splice_evar( res, context[7], context[8] );
    refalrts::use( res );
    refalrts::splice_to_freelist_open( trash_prev, res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence();

  do {
    // ( # TGenericEscChar 't' )
    // </0 & SecondPass/4 (/7 # TGenericEscChar/9 't'/10 )/8 >/1
    if( ! refalrts::ident_term(  & ident_TGenericEscChar<int>::name, context[9] ) )
      continue;
    context[16] = context[5];
    context[17] = context[6];
    context[10] = refalrts::char_left( 't', context[16], context[17] );
    if( ! context[10] )
      continue;
    if( ! refalrts::empty_seq( context[16], context[17] ) )
      continue;

    refalrts::reset_allocator();
    //TRASH: {REMOVED TILE} </0 & SecondPass/4 {REMOVED TILE} >/1 {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ AsIs: (/7 Reuse: # TChar/9 Reuse: '\t'/10 AsIs: )/8 } Tile{ ]] }
    refalrts::update_ident( context[9], & ident_TChar<int>::name );
    refalrts::update_char( context[10], '\t' );
    refalrts::link_brackets( context[7], context[8] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = arg_end->next;
    res = refalrts::splice_evar( res, context[7], context[8] );
    refalrts::use( res );
    refalrts::splice_to_freelist_open( trash_prev, res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence();

  do {
    // ( # TGenericEscChar 'r' )
    // </0 & SecondPass/4 (/7 # TGenericEscChar/9 'r'/10 )/8 >/1
    if( ! refalrts::ident_term(  & ident_TGenericEscChar<int>::name, context[9] ) )
      continue;
    context[16] = context[5];
    context[17] = context[6];
    context[10] = refalrts::char_left( 'r', context[16], context[17] );
    if( ! context[10] )
      continue;
    if( ! refalrts::empty_seq( context[16], context[17] ) )
      continue;

    refalrts::reset_allocator();
    //TRASH: {REMOVED TILE} </0 & SecondPass/4 {REMOVED TILE} >/1 {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ AsIs: (/7 Reuse: # TChar/9 Reuse: '\r'/10 AsIs: )/8 } Tile{ ]] }
    refalrts::update_ident( context[9], & ident_TChar<int>::name );
    refalrts::update_char( context[10], '\r' );
    refalrts::link_brackets( context[7], context[8] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = arg_end->next;
    res = refalrts::splice_evar( res, context[7], context[8] );
    refalrts::use( res );
    refalrts::splice_to_freelist_open( trash_prev, res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence();

  do {
    // ( # TGenericEscChar '\\' )
    // </0 & SecondPass/4 (/7 # TGenericEscChar/9 '\\'/10 )/8 >/1
    if( ! refalrts::ident_term(  & ident_TGenericEscChar<int>::name, context[9] ) )
      continue;
    context[16] = context[5];
    context[17] = context[6];
    context[10] = refalrts::char_left( '\\', context[16], context[17] );
    if( ! context[10] )
      continue;
    if( ! refalrts::empty_seq( context[16], context[17] ) )
      continue;

    refalrts::reset_allocator();
    //TRASH: {REMOVED TILE} </0 & SecondPass/4 {REMOVED TILE} >/1 {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ AsIs: (/7 Reuse: # TChar/9 AsIs: '\\'/10 AsIs: )/8 } Tile{ ]] }
    refalrts::update_ident( context[9], & ident_TChar<int>::name );
    refalrts::link_brackets( context[7], context[8] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = arg_end->next;
    res = refalrts::splice_evar( res, context[7], context[8] );
    refalrts::use( res );
    refalrts::splice_to_freelist_open( trash_prev, res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence();

  do {
    // ( # TChar s.idx )
    // </0 & SecondPass/4 (/7 # TChar/9 s.Char#1/10 )/8 >/1
    if( ! refalrts::ident_term(  & ident_TChar<int>::name, context[9] ) )
      continue;
    context[16] = context[5];
    context[17] = context[6];
    if( ! refalrts::svar_left( context[10], context[16], context[17] ) )
      continue;
    if( ! refalrts::empty_seq( context[16], context[17] ) )
      continue;
    //DEBUG: s.Char#1: 10

    refalrts::reset_allocator();
    //TRASH: {REMOVED TILE} </0 & SecondPass/4 {REMOVED TILE} >/1 {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ AsIs: (/7 AsIs: # TChar/9 AsIs: s.Char#1/10 AsIs: )/8 } Tile{ ]] }
    refalrts::link_brackets( context[7], context[8] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = arg_end->next;
    res = refalrts::splice_evar( res, context[7], context[8] );
    refalrts::use( res );
    refalrts::splice_to_freelist_open( trash_prev, res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence();

  do {
    // ( # TStartRegexp '/' )
    // </0 & SecondPass/4 (/7 # TStartRegexp/9 '/'/10 )/8 >/1
    if( ! refalrts::ident_term(  & ident_TStartRegexp<int>::name, context[9] ) )
      continue;
    context[16] = context[5];
    context[17] = context[6];
    context[10] = refalrts::char_left( '/', context[16], context[17] );
    if( ! context[10] )
      continue;
    if( ! refalrts::empty_seq( context[16], context[17] ) )
      continue;

    refalrts::reset_allocator();
    //TRASH: {REMOVED TILE} </0 & SecondPass/4 {REMOVED TILE} )/8 >/1 {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ AsIs: (/7 AsIs: # TStartRegexp/9 HalfReuse: )/10 } Tile{ ]] }
    refalrts::reinit_close_bracket( context[10] );
    refalrts::link_brackets( context[7], context[10] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = arg_end->next;
    res = refalrts::splice_evar( res, context[7], context[10] );
    refalrts::use( res );
    refalrts::splice_to_freelist_open( trash_prev, res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence();

  do {
    // ( # TEndRegexp '/' )
    // </0 & SecondPass/4 (/7 # TEndRegexp/9 '/'/10 )/8 >/1
    if( ! refalrts::ident_term(  & ident_TEndRegexp<int>::name, context[9] ) )
      continue;
    context[16] = context[5];
    context[17] = context[6];
    context[10] = refalrts::char_left( '/', context[16], context[17] );
    if( ! context[10] )
      continue;
    if( ! refalrts::empty_seq( context[16], context[17] ) )
      continue;

    refalrts::reset_allocator();
    //TRASH: {REMOVED TILE} </0 & SecondPass/4 {REMOVED TILE} )/8 >/1 {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ AsIs: (/7 AsIs: # TEndRegexp/9 HalfReuse: )/10 } Tile{ ]] }
    refalrts::reinit_close_bracket( context[10] );
    refalrts::link_brackets( context[7], context[10] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = arg_end->next;
    res = refalrts::splice_evar( res, context[7], context[10] );
    refalrts::use( res );
    refalrts::splice_to_freelist_open( trash_prev, res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence();

  do {
    // ( # TStartGroup '[' )
    // </0 & SecondPass/4 (/7 # TStartGroup/9 '['/10 )/8 >/1
    if( ! refalrts::ident_term(  & ident_TStartGroup<int>::name, context[9] ) )
      continue;
    context[16] = context[5];
    context[17] = context[6];
    context[10] = refalrts::char_left( '[', context[16], context[17] );
    if( ! context[10] )
      continue;
    if( ! refalrts::empty_seq( context[16], context[17] ) )
      continue;

    refalrts::reset_allocator();
    //TRASH: {REMOVED TILE} </0 & SecondPass/4 {REMOVED TILE} )/8 >/1 {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ AsIs: (/7 AsIs: # TStartGroup/9 HalfReuse: )/10 } Tile{ ]] }
    refalrts::reinit_close_bracket( context[10] );
    refalrts::link_brackets( context[7], context[10] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = arg_end->next;
    res = refalrts::splice_evar( res, context[7], context[10] );
    refalrts::use( res );
    refalrts::splice_to_freelist_open( trash_prev, res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence();

  do {
    // ( # TEndGroup ']' )
    // </0 & SecondPass/4 (/7 # TEndGroup/9 ']'/10 )/8 >/1
    if( ! refalrts::ident_term(  & ident_TEndGroup<int>::name, context[9] ) )
      continue;
    context[16] = context[5];
    context[17] = context[6];
    context[10] = refalrts::char_left( ']', context[16], context[17] );
    if( ! context[10] )
      continue;
    if( ! refalrts::empty_seq( context[16], context[17] ) )
      continue;

    refalrts::reset_allocator();
    //TRASH: {REMOVED TILE} </0 & SecondPass/4 {REMOVED TILE} )/8 >/1 {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ AsIs: (/7 AsIs: # TEndGroup/9 HalfReuse: )/10 } Tile{ ]] }
    refalrts::reinit_close_bracket( context[10] );
    refalrts::link_brackets( context[7], context[10] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = arg_end->next;
    res = refalrts::splice_evar( res, context[7], context[10] );
    refalrts::use( res );
    refalrts::splice_to_freelist_open( trash_prev, res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence();

  do {
    // ( # TInclude e.idx '}' )
    // </0 & SecondPass/4 (/7 # TInclude/9 e.Name#1/5 '}'/10 )/8 >/1
    if( ! refalrts::ident_term(  & ident_TInclude<int>::name, context[9] ) )
      continue;
    context[16] = context[5];
    context[17] = context[6];
    context[10] = refalrts::char_right( '}', context[16], context[17] );
    if( ! context[10] )
      continue;
    // closed e.Name#1 as range 16(5)
    //DEBUG: e.Name#1: 5

    refalrts::reset_allocator();
    //TRASH: {REMOVED TILE} </0 & SecondPass/4 {REMOVED TILE} )/8 >/1 {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ AsIs: (/7 AsIs: # TInclude/9 AsIs: e.Name#1/16(5) HalfReuse: )/10 } Tile{ ]] }
    refalrts::reinit_close_bracket( context[10] );
    refalrts::link_brackets( context[7], context[10] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = arg_end->next;
    res = refalrts::splice_evar( res, context[7], context[10] );
    refalrts::use( res );
    refalrts::splice_to_freelist_open( trash_prev, res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence();

  do {
    // ( # TSpecChar '.' )
    // </0 & SecondPass/4 (/7 # TSpecChar/9 '.'/10 )/8 >/1
    if( ! refalrts::ident_term(  & ident_TSpecChar<int>::name, context[9] ) )
      continue;
    context[16] = context[5];
    context[17] = context[6];
    context[10] = refalrts::char_left( '.', context[16], context[17] );
    if( ! context[10] )
      continue;
    if( ! refalrts::empty_seq( context[16], context[17] ) )
      continue;

    refalrts::reset_allocator();
    //TRASH: {REMOVED TILE} </0 & SecondPass/4 (/7 # TSpecChar/9 {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ HalfReuse: (/10 HalfReuse: # TAny/8 HalfReuse: )/1 ]] }
    refalrts::reinit_open_bracket( context[10] );
    refalrts::reinit_ident( context[8], & ident_TAny<int>::name );
    refalrts::reinit_close_bracket( context[1] );
    refalrts::link_brackets( context[10], context[1] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[10];
    refalrts::use( res );
    refalrts::splice_to_freelist_open( trash_prev, res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence();

  do {
    // ( # TSpecChar '(' )
    // </0 & SecondPass/4 (/7 # TSpecChar/9 '('/10 )/8 >/1
    if( ! refalrts::ident_term(  & ident_TSpecChar<int>::name, context[9] ) )
      continue;
    context[16] = context[5];
    context[17] = context[6];
    context[10] = refalrts::char_left( '(', context[16], context[17] );
    if( ! context[10] )
      continue;
    if( ! refalrts::empty_seq( context[16], context[17] ) )
      continue;

    refalrts::reset_allocator();
    //TRASH: {REMOVED TILE} </0 & SecondPass/4 (/7 # TSpecChar/9 {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ HalfReuse: (/10 HalfReuse: # TOpenBracket/8 HalfReuse: )/1 ]] }
    refalrts::reinit_open_bracket( context[10] );
    refalrts::reinit_ident( context[8], & ident_TOpenBracket<int>::name );
    refalrts::reinit_close_bracket( context[1] );
    refalrts::link_brackets( context[10], context[1] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[10];
    refalrts::use( res );
    refalrts::splice_to_freelist_open( trash_prev, res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence();

  do {
    // ( # TSpecChar ')' )
    // </0 & SecondPass/4 (/7 # TSpecChar/9 ')'/10 )/8 >/1
    if( ! refalrts::ident_term(  & ident_TSpecChar<int>::name, context[9] ) )
      continue;
    context[16] = context[5];
    context[17] = context[6];
    context[10] = refalrts::char_left( ')', context[16], context[17] );
    if( ! context[10] )
      continue;
    if( ! refalrts::empty_seq( context[16], context[17] ) )
      continue;

    refalrts::reset_allocator();
    //TRASH: {REMOVED TILE} </0 & SecondPass/4 (/7 # TSpecChar/9 {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ HalfReuse: (/10 HalfReuse: # TCloseBracket/8 HalfReuse: )/1 ]] }
    refalrts::reinit_open_bracket( context[10] );
    refalrts::reinit_ident( context[8], & ident_TCloseBracket<int>::name );
    refalrts::reinit_close_bracket( context[1] );
    refalrts::link_brackets( context[10], context[1] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[10];
    refalrts::use( res );
    refalrts::splice_to_freelist_open( trash_prev, res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence();

  do {
    // ( # TSpecChar '|' )
    // </0 & SecondPass/4 (/7 # TSpecChar/9 '|'/10 )/8 >/1
    if( ! refalrts::ident_term(  & ident_TSpecChar<int>::name, context[9] ) )
      continue;
    context[16] = context[5];
    context[17] = context[6];
    context[10] = refalrts::char_left( '|', context[16], context[17] );
    if( ! context[10] )
      continue;
    if( ! refalrts::empty_seq( context[16], context[17] ) )
      continue;

    refalrts::reset_allocator();
    //TRASH: {REMOVED TILE} </0 & SecondPass/4 (/7 # TSpecChar/9 {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ HalfReuse: (/10 HalfReuse: # TAlt/8 HalfReuse: )/1 ]] }
    refalrts::reinit_open_bracket( context[10] );
    refalrts::reinit_ident( context[8], & ident_TAlt<int>::name );
    refalrts::reinit_close_bracket( context[1] );
    refalrts::link_brackets( context[10], context[1] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[10];
    refalrts::use( res );
    refalrts::splice_to_freelist_open( trash_prev, res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence();

  do {
    // ( # TSpecChar '^' )
    // </0 & SecondPass/4 (/7 # TSpecChar/9 '^'/10 )/8 >/1
    if( ! refalrts::ident_term(  & ident_TSpecChar<int>::name, context[9] ) )
      continue;
    context[16] = context[5];
    context[17] = context[6];
    context[10] = refalrts::char_left( '^', context[16], context[17] );
    if( ! context[10] )
      continue;
    if( ! refalrts::empty_seq( context[16], context[17] ) )
      continue;

    refalrts::reset_allocator();
    //TRASH: {REMOVED TILE} </0 & SecondPass/4 (/7 # TSpecChar/9 {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ HalfReuse: (/10 HalfReuse: # TBegin/8 HalfReuse: )/1 ]] }
    refalrts::reinit_open_bracket( context[10] );
    refalrts::reinit_ident( context[8], & ident_TBegin<int>::name );
    refalrts::reinit_close_bracket( context[1] );
    refalrts::link_brackets( context[10], context[1] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[10];
    refalrts::use( res );
    refalrts::splice_to_freelist_open( trash_prev, res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence();

  do {
    // ( # TSpecChar '$' )
    // </0 & SecondPass/4 (/7 # TSpecChar/9 '$'/10 )/8 >/1
    if( ! refalrts::ident_term(  & ident_TSpecChar<int>::name, context[9] ) )
      continue;
    context[16] = context[5];
    context[17] = context[6];
    context[10] = refalrts::char_left( '$', context[16], context[17] );
    if( ! context[10] )
      continue;
    if( ! refalrts::empty_seq( context[16], context[17] ) )
      continue;

    refalrts::reset_allocator();
    //TRASH: {REMOVED TILE} </0 & SecondPass/4 (/7 # TSpecChar/9 {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ HalfReuse: (/10 HalfReuse: # TEnd/8 HalfReuse: )/1 ]] }
    refalrts::reinit_open_bracket( context[10] );
    refalrts::reinit_ident( context[8], & ident_TEnd<int>::name );
    refalrts::reinit_close_bracket( context[1] );
    refalrts::link_brackets( context[10], context[1] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[10];
    refalrts::use( res );
    refalrts::splice_to_freelist_open( trash_prev, res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence();

  do {
    // ( # TQuantifier '?' )
    // </0 & SecondPass/4 (/7 # TQuantifier/9 '?'/10 )/8 >/1
    if( ! refalrts::ident_term(  & ident_TQuantifier<int>::name, context[9] ) )
      continue;
    context[16] = context[5];
    context[17] = context[6];
    context[10] = refalrts::char_left( '?', context[16], context[17] );
    if( ! context[10] )
      continue;
    if( ! refalrts::empty_seq( context[16], context[17] ) )
      continue;

    refalrts::reset_allocator();
    //TRASH: {REMOVED TILE} </0 & SecondPass/4 (/7 # TQuantifier/9 {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ HalfReuse: (/10 HalfReuse: # TOptional/8 HalfReuse: )/1 ]] }
    refalrts::reinit_open_bracket( context[10] );
    refalrts::reinit_ident( context[8], & ident_TOptional<int>::name );
    refalrts::reinit_close_bracket( context[1] );
    refalrts::link_brackets( context[10], context[1] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[10];
    refalrts::use( res );
    refalrts::splice_to_freelist_open( trash_prev, res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence();

  do {
    // ( # TQuantifier '*' )
    // </0 & SecondPass/4 (/7 # TQuantifier/9 '*'/10 )/8 >/1
    if( ! refalrts::ident_term(  & ident_TQuantifier<int>::name, context[9] ) )
      continue;
    context[16] = context[5];
    context[17] = context[6];
    context[10] = refalrts::char_left( '*', context[16], context[17] );
    if( ! context[10] )
      continue;
    if( ! refalrts::empty_seq( context[16], context[17] ) )
      continue;

    refalrts::reset_allocator();
    //TRASH: {REMOVED TILE} </0 & SecondPass/4 (/7 # TQuantifier/9 {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ HalfReuse: (/10 HalfReuse: # TZeroMany/8 HalfReuse: )/1 ]] }
    refalrts::reinit_open_bracket( context[10] );
    refalrts::reinit_ident( context[8], & ident_TZeroMany<int>::name );
    refalrts::reinit_close_bracket( context[1] );
    refalrts::link_brackets( context[10], context[1] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[10];
    refalrts::use( res );
    refalrts::splice_to_freelist_open( trash_prev, res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence();

  do {
    // ( # TQuantifier '+' )
    // </0 & SecondPass/4 (/7 # TQuantifier/9 '+'/10 )/8 >/1
    if( ! refalrts::ident_term(  & ident_TQuantifier<int>::name, context[9] ) )
      continue;
    context[16] = context[5];
    context[17] = context[6];
    context[10] = refalrts::char_left( '+', context[16], context[17] );
    if( ! context[10] )
      continue;
    if( ! refalrts::empty_seq( context[16], context[17] ) )
      continue;

    refalrts::reset_allocator();
    //TRASH: {REMOVED TILE} </0 & SecondPass/4 (/7 # TQuantifier/9 {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ HalfReuse: (/10 HalfReuse: # TOneMany/8 HalfReuse: )/1 ]] }
    refalrts::reinit_open_bracket( context[10] );
    refalrts::reinit_ident( context[8], & ident_TOneMany<int>::name );
    refalrts::reinit_close_bracket( context[1] );
    refalrts::link_brackets( context[10], context[1] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[10];
    refalrts::use( res );
    refalrts::splice_to_freelist_open( trash_prev, res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence();

  do {
    // ( # TInvertGroup '^' )
    // </0 & SecondPass/4 (/7 # TInvertGroup/9 '^'/10 )/8 >/1
    if( ! refalrts::ident_term(  & ident_TInvertGroup<int>::name, context[9] ) )
      continue;
    context[16] = context[5];
    context[17] = context[6];
    context[10] = refalrts::char_left( '^', context[16], context[17] );
    if( ! context[10] )
      continue;
    if( ! refalrts::empty_seq( context[16], context[17] ) )
      continue;

    refalrts::reset_allocator();
    //TRASH: {REMOVED TILE} </0 & SecondPass/4 {REMOVED TILE} )/8 >/1 {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ AsIs: (/7 AsIs: # TInvertGroup/9 HalfReuse: )/10 } Tile{ ]] }
    refalrts::reinit_close_bracket( context[10] );
    refalrts::link_brackets( context[7], context[10] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = arg_end->next;
    res = refalrts::splice_evar( res, context[7], context[10] );
    refalrts::use( res );
    refalrts::splice_to_freelist_open( trash_prev, res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence();

  do {
    // ( # TGroupRange '-' )
    // </0 & SecondPass/4 (/7 # TGroupRange/9 '-'/10 )/8 >/1
    if( ! refalrts::ident_term(  & ident_TGroupRange<int>::name, context[9] ) )
      continue;
    context[16] = context[5];
    context[17] = context[6];
    context[10] = refalrts::char_left( '-', context[16], context[17] );
    if( ! context[10] )
      continue;
    if( ! refalrts::empty_seq( context[16], context[17] ) )
      continue;

    refalrts::reset_allocator();
    //TRASH: {REMOVED TILE} </0 & SecondPass/4 {REMOVED TILE} )/8 >/1 {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ AsIs: (/7 AsIs: # TGroupRange/9 HalfReuse: )/10 } Tile{ ]] }
    refalrts::reinit_close_bracket( context[10] );
    refalrts::link_brackets( context[7], context[10] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = arg_end->next;
    res = refalrts::splice_evar( res, context[7], context[10] );
    refalrts::use( res );
    refalrts::splice_to_freelist_open( trash_prev, res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence();

  do {
    // ( # TUnexpecteChar s.idx )
    // </0 & SecondPass/4 (/7 # TUnexpecteChar/9 s.Char#1/10 )/8 >/1
    if( ! refalrts::ident_term(  & ident_TUnexpecteChar<int>::name, context[9] ) )
      continue;
    context[16] = context[5];
    context[17] = context[6];
    if( ! refalrts::svar_left( context[10], context[16], context[17] ) )
      continue;
    if( ! refalrts::empty_seq( context[16], context[17] ) )
      continue;
    //DEBUG: s.Char#1: 10

    refalrts::reset_allocator();
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ } (/11 # TError/12"Unexpected char"/13 Tile{ HalfReuse: ' '/0 HalfReuse: '\''/4 HalfReuse: </7 HalfReuse: & EscapeString/9 AsIs: s.Char#1/10 HalfReuse: >/8 HalfReuse: '\''/1 } )/15 Tile{ ]] }
    if( ! refalrts::alloc_open_bracket( context[11] ) )
      return refalrts::cNoMemory;
    if( ! refalrts::alloc_ident( context[12], & ident_TError<int>::name ) )
      return refalrts::cNoMemory;
    if( ! refalrts::alloc_chars( context[13], context[14], "Unexpected char", 15 ) )
      return refalrts::cNoMemory;
    if( ! refalrts::alloc_close_bracket( context[15] ) )
      return refalrts::cNoMemory;
    refalrts::reinit_char( context[0], ' ' );
    refalrts::reinit_char( context[4], '\'' );
    refalrts::reinit_open_call( context[7] );
    refalrts::reinit_name( context[9], & EscapeString );
    refalrts::reinit_close_call( context[8] );
    refalrts::reinit_char( context[1], '\'' );
    refalrts::link_brackets( context[11], context[15] );
    refalrts::push_stack( context[8] );
    refalrts::push_stack( context[7] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = arg_end->next;
    res = refalrts::splice_evar( res, context[15], context[15] );
    res = refalrts::splice_evar( res, context[0], context[1] );
    res = refalrts::splice_evar( res, context[11], context[14] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence();

  do {
    // ( # TokenError e.idx )
    // </0 & SecondPass/4 (/7 # TokenError/9 e.Message#1/5 )/8 >/1
    if( ! refalrts::ident_term(  & ident_TokenError<int>::name, context[9] ) )
      continue;
    // closed e.Message#1 as range 5
    //DEBUG: e.Message#1: 5

    refalrts::reset_allocator();
    //TRASH: {REMOVED TILE} </0 & SecondPass/4 {REMOVED TILE} >/1 {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ AsIs: (/7 Reuse: # TError/9 AsIs: e.Message#1/5 AsIs: )/8 } Tile{ ]] }
    refalrts::update_ident( context[9], & ident_TError<int>::name );
    refalrts::link_brackets( context[7], context[8] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = arg_end->next;
    res = refalrts::splice_evar( res, context[7], context[8] );
    refalrts::use( res );
    refalrts::splice_to_freelist_open( trash_prev, res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence();

  do {
    // ( # TStateStart '<' )
    // </0 & SecondPass/4 (/7 # TStateStart/9 '<'/10 )/8 >/1
    if( ! refalrts::ident_term(  & ident_TStateStart<int>::name, context[9] ) )
      continue;
    context[16] = context[5];
    context[17] = context[6];
    context[10] = refalrts::char_left( '<', context[16], context[17] );
    if( ! context[10] )
      continue;
    if( ! refalrts::empty_seq( context[16], context[17] ) )
      continue;

    refalrts::reset_allocator();
    //TRASH: {REMOVED TILE} </0 & SecondPass/4 {REMOVED TILE} )/8 >/1 {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ AsIs: (/7 AsIs: # TStateStart/9 HalfReuse: )/10 } Tile{ ]] }
    refalrts::reinit_close_bracket( context[10] );
    refalrts::link_brackets( context[7], context[10] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = arg_end->next;
    res = refalrts::splice_evar( res, context[7], context[10] );
    refalrts::use( res );
    refalrts::splice_to_freelist_open( trash_prev, res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence();

  do {
    // ( # TComma ',' )
    // </0 & SecondPass/4 (/7 # TComma/9 ','/10 )/8 >/1
    if( ! refalrts::ident_term(  & ident_TComma<int>::name, context[9] ) )
      continue;
    context[16] = context[5];
    context[17] = context[6];
    context[10] = refalrts::char_left( ',', context[16], context[17] );
    if( ! context[10] )
      continue;
    if( ! refalrts::empty_seq( context[16], context[17] ) )
      continue;

    refalrts::reset_allocator();
    //TRASH: {REMOVED TILE} </0 & SecondPass/4 {REMOVED TILE} )/8 >/1 {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ AsIs: (/7 AsIs: # TComma/9 HalfReuse: )/10 } Tile{ ]] }
    refalrts::reinit_close_bracket( context[10] );
    refalrts::link_brackets( context[7], context[10] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = arg_end->next;
    res = refalrts::splice_evar( res, context[7], context[10] );
    refalrts::use( res );
    refalrts::splice_to_freelist_open( trash_prev, res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence();

  do {
    // ( # TStateEnd '>' )
    // </0 & SecondPass/4 (/7 # TStateEnd/9 '>'/10 )/8 >/1
    if( ! refalrts::ident_term(  & ident_TStateEnd<int>::name, context[9] ) )
      continue;
    context[16] = context[5];
    context[17] = context[6];
    context[10] = refalrts::char_left( '>', context[16], context[17] );
    if( ! context[10] )
      continue;
    if( ! refalrts::empty_seq( context[16], context[17] ) )
      continue;

    refalrts::reset_allocator();
    //TRASH: {REMOVED TILE} </0 & SecondPass/4 {REMOVED TILE} )/8 >/1 {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ AsIs: (/7 AsIs: # TStateEnd/9 HalfReuse: )/10 } Tile{ ]] }
    refalrts::reinit_close_bracket( context[10] );
    refalrts::link_brackets( context[7], context[10] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = arg_end->next;
    res = refalrts::splice_evar( res, context[7], context[10] );
    refalrts::use( res );
    refalrts::splice_to_freelist_open( trash_prev, res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence();

  do {
    // ( # TkHexNumber e.idx )
    // </0 & SecondPass/4 (/7 # TkHexNumber/9 e.HexCode#1/5 )/8 >/1
    if( ! refalrts::ident_term(  & ident_TkHexNumber<int>::name, context[9] ) )
      continue;
    // closed e.HexCode#1 as range 5
    //DEBUG: e.HexCode#1: 5

    refalrts::reset_allocator();
    //TRASH: {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ } (/10 Tile{ HalfReuse: # TChar/0 HalfReuse: </4 HalfReuse: & CharFromNum/7 HalfReuse: 16/9 AsIs: e.HexCode#1/5 HalfReuse: >/8 HalfReuse: )/1 ]] }
    if( ! refalrts::alloc_open_bracket( context[10] ) )
      return refalrts::cNoMemory;
    refalrts::reinit_ident( context[0], & ident_TChar<int>::name );
    refalrts::reinit_open_call( context[4] );
    refalrts::reinit_name( context[7], & CharFromNum );
    refalrts::reinit_number( context[9], 16UL );
    refalrts::reinit_close_call( context[8] );
    refalrts::reinit_close_bracket( context[1] );
    refalrts::link_brackets( context[10], context[1] );
    refalrts::push_stack( context[8] );
    refalrts::push_stack( context[4] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[0];
    res = refalrts::splice_evar( res, context[10], context[10] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence();

  do {
    // ( # TkOctNumber e.idx )
    // </0 & SecondPass/4 (/7 # TkOctNumber/9 e.OctCode#1/5 )/8 >/1
    if( ! refalrts::ident_term(  & ident_TkOctNumber<int>::name, context[9] ) )
      continue;
    // closed e.OctCode#1 as range 5
    //DEBUG: e.OctCode#1: 5

    refalrts::reset_allocator();
    //TRASH: {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ } (/10 Tile{ HalfReuse: # TChar/0 HalfReuse: </4 HalfReuse: & CharFromNum/7 HalfReuse: 8/9 AsIs: e.OctCode#1/5 HalfReuse: >/8 HalfReuse: )/1 ]] }
    if( ! refalrts::alloc_open_bracket( context[10] ) )
      return refalrts::cNoMemory;
    refalrts::reinit_ident( context[0], & ident_TChar<int>::name );
    refalrts::reinit_open_call( context[4] );
    refalrts::reinit_name( context[7], & CharFromNum );
    refalrts::reinit_number( context[9], 8UL );
    refalrts::reinit_close_call( context[8] );
    refalrts::reinit_close_bracket( context[1] );
    refalrts::link_brackets( context[10], context[1] );
    refalrts::push_stack( context[8] );
    refalrts::push_stack( context[4] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[0];
    res = refalrts::splice_evar( res, context[10], context[10] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence();

  do {
    // ( # TSkip )
    // </0 & SecondPass/4 (/7 # TSkip/9 )/8 >/1
    if( ! refalrts::ident_term(  & ident_TSkip<int>::name, context[9] ) )
      continue;
    context[16] = context[5];
    context[17] = context[6];
    if( ! refalrts::empty_seq( context[16], context[17] ) )
      continue;

    refalrts::reset_allocator();
    //TRASH: {REMOVED TILE} </0 & SecondPass/4 {REMOVED TILE} >/1 {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ AsIs: (/7 AsIs: # TSkip/9 AsIs: )/8 } Tile{ ]] }
    refalrts::link_brackets( context[7], context[8] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = arg_end->next;
    res = refalrts::splice_evar( res, context[7], context[8] );
    refalrts::use( res );
    refalrts::splice_to_freelist_open( trash_prev, res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence();

  do {
    // ( # TErrorMessage e.idx '\"' )
    // </0 & SecondPass/4 (/7 # TErrorMessage/9 e.Message#1/5 '\"'/10 )/8 >/1
    if( ! refalrts::ident_term(  & ident_TErrorMessage<int>::name, context[9] ) )
      continue;
    context[16] = context[5];
    context[17] = context[6];
    context[10] = refalrts::char_right( '\"', context[16], context[17] );
    if( ! context[10] )
      continue;
    // closed e.Message#1 as range 16(5)
    //DEBUG: e.Message#1: 5

    refalrts::reset_allocator();
    //TRASH: {REMOVED TILE} </0 & SecondPass/4 {REMOVED TILE} )/8 >/1 {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ AsIs: (/7 AsIs: # TErrorMessage/9 AsIs: e.Message#1/16(5) HalfReuse: )/10 } Tile{ ]] }
    refalrts::reinit_close_bracket( context[10] );
    refalrts::link_brackets( context[7], context[10] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = arg_end->next;
    res = refalrts::splice_evar( res, context[7], context[10] );
    refalrts::use( res );
    refalrts::splice_to_freelist_open( trash_prev, res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence();

  // ( # TEOF )
  // </0 & SecondPass/4 (/7 # TEOF/9 )/8 >/1
  if( ! refalrts::ident_term(  & ident_TEOF<int>::name, context[9] ) )
    return refalrts::cRecognitionImpossible;
  if( ! refalrts::empty_seq( context[5], context[6] ) )
    return refalrts::cRecognitionImpossible;

  refalrts::reset_allocator();
  //TRASH: {REMOVED TILE} </0 & SecondPass/4 {REMOVED TILE} >/1 {REMOVED TILE}
  //RESULT: Tile{ [[ } Tile{ AsIs: (/7 AsIs: # TEOF/9 AsIs: )/8 } Tile{ ]] }
  refalrts::link_brackets( context[7], context[8] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = arg_end->next;
  res = refalrts::splice_evar( res, context[7], context[8] );
  refalrts::use( res );
  refalrts::splice_to_freelist_open( trash_prev, res );
  return refalrts::cSuccess;
}

namespace /* unnamed */ {
refalrts::RefalNativeFunction descr_SecondPass(func_SecondPass, "SecondPass");
refalrts::RefalFunction& SecondPass = descr_SecondPass;

} // unnamed namespace

#endif
#ifdef INTERPRET
namespace /* unnamed */ {
  namespace scope_gen_CharFromNum_L1 {
    static const char *filename = "Flex-Lexer.cpp";
    static refalrts::RefalFunction *functions[] = {
      & Add,
      & Mul
    };
    using refalrts::idents;
    using refalrts::numbers;
    using refalrts::strings;
    static const refalrts::RASLCommand raa[] = {
      {refalrts::icThisIsGeneratedFunction, 0, 0, 0},
      {refalrts::icLoadConstants, 0, 0, 0},
      {refalrts::icIssueMemory, 11, 0, 0},
      // </0 & CharFromNum\1/4 s.Base#1/5 s.Accum#2/6 s.Next#2/7 >/1
      {refalrts::icInitB0_Lite, 0, 0, 0},
      {refalrts::icCallSaveLeft, 0, 2, 0},
      {refalrts::icsVarLeft, 0, 5, 2},
      {refalrts::icsVarLeft, 0, 6, 2},
      {refalrts::icsVarLeft, 0, 7, 2},
      {refalrts::icEmpty, 0, 0, 2},
      //DEBUG: s.Base#1: 5
      //DEBUG: s.Accum#2: 6
      //DEBUG: s.Next#2: 7
      {refalrts::icEmptyResult, 0, 0, 0},
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 Reuse: & Add/4 } </8 & Mul/9 Tile{ AsIs: s.Accum#2/6 } Tile{ AsIs: s.Base#1/5 } >/10 Tile{ AsIs: s.Next#2/7 AsIs: >/1 ]] }
      {refalrts::icAllocBracket, 0, refalrts::ibOpenCall, 8},
      {refalrts::icAllocFunc, 0, 1, 9},
      {refalrts::icAllocBracket, 0, refalrts::ibCloseCall, 10},
      {refalrts::icUpdateFunc, 0, 0, 4},
      {refalrts::icPushStack, 0, 0, 1},
      {refalrts::icPushStack, 0, 0, 0},
      {refalrts::icPushStack, 0, 0, 10},
      {refalrts::icPushStack, 0, 0, 8},
      {refalrts::icSetRes, 0, 0, 7},
      {refalrts::icSpliceTile, 10, 10, 0},
      {refalrts::icSpliceTile, 5, 5, 0},
      {refalrts::icSpliceTile, 6, 6, 0},
      {refalrts::icSpliceTile, 8, 9, 0},
      {refalrts::icNextStep, 0, 0, 0},
      {refalrts::icEnd, 0, 0, 0}
    };
  } // namespace scope_gen_CharFromNum_L1

} // unnamed namespace

namespace /* unnamed */ {
refalrts::RASLFunction descr_gen_CharFromNum_L1(
  "CharFromNum\\1",
  scope_gen_CharFromNum_L1::raa,
  scope_gen_CharFromNum_L1::functions,
  scope_gen_CharFromNum_L1::idents,
  scope_gen_CharFromNum_L1::numbers,
  scope_gen_CharFromNum_L1::strings,
  scope_gen_CharFromNum_L1::filename
);
refalrts::RefalFunction& gen_CharFromNum_L1 = descr_gen_CharFromNum_L1;

} // unnamed namespace

#else
static refalrts::FnResult func_gen_CharFromNum_L1(refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  refalrts::this_is_generated_function();
  // issue here memory for vars with 11 elems
  refalrts::Iter context[11];
  refalrts::zeros( context, 11 );
  // </0 & CharFromNum\1/4 s.Base#1/5 s.Accum#2/6 s.Next#2/7 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  if( ! refalrts::svar_left( context[5], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  if( ! refalrts::svar_left( context[6], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  if( ! refalrts::svar_left( context[7], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  if( ! refalrts::empty_seq( context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  //DEBUG: s.Base#1: 5
  //DEBUG: s.Accum#2: 6
  //DEBUG: s.Next#2: 7

  refalrts::reset_allocator();
  //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ AsIs: </0 Reuse: & Add/4 } </8 & Mul/9 Tile{ AsIs: s.Accum#2/6 } Tile{ AsIs: s.Base#1/5 } >/10 Tile{ AsIs: s.Next#2/7 AsIs: >/1 ]] }
  if( ! refalrts::alloc_open_call( context[8] ) )
    return refalrts::cNoMemory;
  if( ! refalrts::alloc_name( context[9], & Mul ) )
    return refalrts::cNoMemory;
  if( ! refalrts::alloc_close_call( context[10] ) )
    return refalrts::cNoMemory;
  refalrts::update_name( context[4], & Add );
  refalrts::push_stack( context[1] );
  refalrts::push_stack( context[0] );
  refalrts::push_stack( context[10] );
  refalrts::push_stack( context[8] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[7];
  res = refalrts::splice_evar( res, context[10], context[10] );
  res = refalrts::splice_evar( res, context[5], context[5] );
  res = refalrts::splice_evar( res, context[6], context[6] );
  res = refalrts::splice_evar( res, context[8], context[9] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

namespace /* unnamed */ {
refalrts::RefalNativeFunction descr_gen_CharFromNum_L1(func_gen_CharFromNum_L1, "CharFromNum\\1");
refalrts::RefalFunction& gen_CharFromNum_L1 = descr_gen_CharFromNum_L1;

} // unnamed namespace

#endif
#ifdef INTERPRET
namespace /* unnamed */ {
  namespace scope_CharFromNum {
    static const char *filename = "Flex-Lexer.cpp";
    static refalrts::RefalFunction *functions[] = {
      & Chr,
      & DigitFromChar,
      & Map,
      & gen_CharFromNum_L1,
      & refalrts::create_closure,
      & Reduce
    };
    using refalrts::idents;
    using refalrts::numbers;
    using refalrts::strings;
    static const refalrts::RASLCommand raa[] = {
      {refalrts::icThisIsGeneratedFunction, 0, 0, 0},
      {refalrts::icLoadConstants, 0, 0, 0},
      {refalrts::icIssueMemory, 18, 0, 0},
      // </0 & CharFromNum/4 s.Base#1/5 e.Chars#1/2 >/1
      {refalrts::icInitB0_Lite, 0, 0, 0},
      {refalrts::icCallSaveLeft, 0, 2, 0},
      {refalrts::icsVarLeft, 0, 5, 2},
      // closed e.Chars#1 as range 2
      //DEBUG: s.Base#1: 5
      //DEBUG: e.Chars#1: 2
      {refalrts::icEmptyResult, 0, 0, 0},
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 Reuse: & Chr/4 } </6 & Reduce/7 </8 & @create_closure@/9 & CharFromNum\1/10 Tile{ AsIs: s.Base#1/5 } >/11 0/12 </13 & Map/14 & DigitFromChar/15 Tile{ AsIs: e.Chars#1/2 } >/16 >/17 Tile{ AsIs: >/1 ]] }
      {refalrts::icAllocBracket, 0, refalrts::ibOpenCall, 6},
      {refalrts::icAllocFunc, 0, 5, 7},
      {refalrts::icAllocBracket, 0, refalrts::ibOpenCall, 8},
      {refalrts::icAllocFunc, 0, 4, 9},
      {refalrts::icAllocFunc, 0, 3, 10},
      {refalrts::icAllocBracket, 0, refalrts::ibCloseCall, 11},
      {refalrts::icAllocInt, 0, 0, 12},
      {refalrts::icAllocBracket, 0, refalrts::ibOpenCall, 13},
      {refalrts::icAllocFunc, 0, 2, 14},
      {refalrts::icAllocFunc, 0, 1, 15},
      {refalrts::icAllocBracket, 0, refalrts::ibCloseCall, 16},
      {refalrts::icAllocBracket, 0, refalrts::ibCloseCall, 17},
      {refalrts::icUpdateFunc, 0, 0, 4},
      {refalrts::icPushStack, 0, 0, 1},
      {refalrts::icPushStack, 0, 0, 0},
      {refalrts::icPushStack, 0, 0, 17},
      {refalrts::icPushStack, 0, 0, 6},
      {refalrts::icPushStack, 0, 0, 16},
      {refalrts::icPushStack, 0, 0, 13},
      {refalrts::icPushStack, 0, 0, 11},
      {refalrts::icPushStack, 0, 0, 8},
      {refalrts::icSetRes, 0, 0, 1},
      {refalrts::icSpliceTile, 16, 17, 0},
      {refalrts::icSpliceEVar, 0, 0, 2},
      {refalrts::icSpliceTile, 11, 15, 0},
      {refalrts::icSpliceTile, 5, 5, 0},
      {refalrts::icSpliceTile, 6, 10, 0},
      {refalrts::icNextStep, 0, 0, 0},
      {refalrts::icEnd, 0, 0, 0}
    };
  } // namespace scope_CharFromNum

} // unnamed namespace

namespace /* unnamed */ {
refalrts::RASLFunction descr_CharFromNum(
  "CharFromNum",
  scope_CharFromNum::raa,
  scope_CharFromNum::functions,
  scope_CharFromNum::idents,
  scope_CharFromNum::numbers,
  scope_CharFromNum::strings,
  scope_CharFromNum::filename
);
refalrts::RefalFunction& CharFromNum = descr_CharFromNum;

} // unnamed namespace

#else
static refalrts::FnResult func_CharFromNum(refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  refalrts::this_is_generated_function();
  // issue here memory for vars with 18 elems
  refalrts::Iter context[18];
  refalrts::zeros( context, 18 );
  // </0 & CharFromNum/4 s.Base#1/5 e.Chars#1/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  if( ! refalrts::svar_left( context[5], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  // closed e.Chars#1 as range 2
  //DEBUG: s.Base#1: 5
  //DEBUG: e.Chars#1: 2

  refalrts::reset_allocator();
  //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ AsIs: </0 Reuse: & Chr/4 } </6 & Reduce/7 </8 & @create_closure@/9 & CharFromNum\1/10 Tile{ AsIs: s.Base#1/5 } >/11 0/12 </13 & Map/14 & DigitFromChar/15 Tile{ AsIs: e.Chars#1/2 } >/16 >/17 Tile{ AsIs: >/1 ]] }
  if( ! refalrts::alloc_open_call( context[6] ) )
    return refalrts::cNoMemory;
  if( ! refalrts::alloc_name( context[7], & Reduce ) )
    return refalrts::cNoMemory;
  if( ! refalrts::alloc_open_call( context[8] ) )
    return refalrts::cNoMemory;
  if( ! refalrts::alloc_name( context[9], & refalrts::create_closure ) )
    return refalrts::cNoMemory;
  if( ! refalrts::alloc_name( context[10], & gen_CharFromNum_L1 ) )
    return refalrts::cNoMemory;
  if( ! refalrts::alloc_close_call( context[11] ) )
    return refalrts::cNoMemory;
  if( ! refalrts::alloc_number( context[12], 0UL ) )
    return refalrts::cNoMemory;
  if( ! refalrts::alloc_open_call( context[13] ) )
    return refalrts::cNoMemory;
  if( ! refalrts::alloc_name( context[14], & Map ) )
    return refalrts::cNoMemory;
  if( ! refalrts::alloc_name( context[15], & DigitFromChar ) )
    return refalrts::cNoMemory;
  if( ! refalrts::alloc_close_call( context[16] ) )
    return refalrts::cNoMemory;
  if( ! refalrts::alloc_close_call( context[17] ) )
    return refalrts::cNoMemory;
  refalrts::update_name( context[4], & Chr );
  refalrts::push_stack( context[1] );
  refalrts::push_stack( context[0] );
  refalrts::push_stack( context[17] );
  refalrts::push_stack( context[6] );
  refalrts::push_stack( context[16] );
  refalrts::push_stack( context[13] );
  refalrts::push_stack( context[11] );
  refalrts::push_stack( context[8] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[1];
  res = refalrts::splice_evar( res, context[16], context[17] );
  res = refalrts::splice_evar( res, context[2], context[3] );
  res = refalrts::splice_evar( res, context[11], context[15] );
  res = refalrts::splice_evar( res, context[5], context[5] );
  res = refalrts::splice_evar( res, context[6], context[10] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

namespace /* unnamed */ {
refalrts::RefalNativeFunction descr_CharFromNum(func_CharFromNum, "CharFromNum");
refalrts::RefalFunction& CharFromNum = descr_CharFromNum;

} // unnamed namespace

#endif
#ifdef INTERPRET
namespace /* unnamed */ {
  namespace scope_gen_DigitFromChar_L1 {
    static const char *filename = "Flex-Lexer.cpp";
    using refalrts::functions;
    using refalrts::idents;
    using refalrts::numbers;
    using refalrts::strings;
    static const refalrts::RASLCommand raa[] = {
      {refalrts::icThisIsGeneratedFunction, 0, 0, 0},
      {refalrts::icLoadConstants, 0, 0, 0},
      {refalrts::icReserveBacktrackStack, 2, 0, 0},
      {refalrts::icIssueMemory, 20, 0, 0},
      // </0 & DigitFromChar\1/4 s.Char#1/5 e.Assoc-B#2/6 (/10 s.Digit#2/12 e.Vars-B#2/13 s.Char#1/15 e.Vars-E#2/8 )/11 e.Assoc-E#2/2 >/1
      {refalrts::icInitB0_Lite, 0, 0, 0},
      {refalrts::icCallSaveLeft, 0, 2, 0},
      {refalrts::icsVarLeft, 0, 5, 2},
      {refalrts::icEPrepare, 0, 6, 2},
      {refalrts::icEStart, 0, 6, 2},
      {refalrts::icSave, 0, 16, 2},
      {refalrts::icBracketLeftSave, 0, 8, 16},
      // closed e.Assoc-E#2 as range 16(2)
      {refalrts::icsVarLeft, 0, 12, 8},
      {refalrts::icEPrepare, 0, 13, 8},
      {refalrts::icEStart, 0, 13, 8},
      {refalrts::icSave, 0, 18, 8},
      {refalrts::icsRepeatLeft, 15, 5, 18},
      // closed e.Vars-E#2 as range 18(8)
      //DEBUG: s.Char#1: 5
      //DEBUG: e.Assoc-B#2: 6
      //DEBUG: e.Assoc-E#2: 2
      //DEBUG: s.Digit#2: 12
      //DEBUG: e.Vars-B#2: 13
      //DEBUG: e.Vars-E#2: 8
      {refalrts::icEmptyResult, 0, 0, 0},
      //TRASH: {REMOVED TILE} </0 & DigitFromChar\1/4 s.Char#1/5 e.Assoc-B#2/6 (/10 s.Digit#2/12 e.Vars-B#2/13 s.Char#1/15 e.Vars-E#2/18(8) )/11 e.Assoc-E#2/16(2) {REMOVED TILE}
      //RESULT: Tile{ [[ } Tile{ HalfReuse: s.Digit2 #12/1 ]] }
      {refalrts::icReinitSVar, 0, 12, 1},
      {refalrts::icSetRes, 0, 0, 1},
      {refalrts::icTrashLeftEdge, 0, 0, 0},
      {refalrts::icNextStep, 0, 0, 0},
      {refalrts::icFail, 0, 0, 0},
      {refalrts::icEnd, 0, 0, 0}
    };
  } // namespace scope_gen_DigitFromChar_L1

} // unnamed namespace

namespace /* unnamed */ {
refalrts::RASLFunction descr_gen_DigitFromChar_L1(
  "DigitFromChar\\1",
  scope_gen_DigitFromChar_L1::raa,
  scope_gen_DigitFromChar_L1::functions,
  scope_gen_DigitFromChar_L1::idents,
  scope_gen_DigitFromChar_L1::numbers,
  scope_gen_DigitFromChar_L1::strings,
  scope_gen_DigitFromChar_L1::filename
);
refalrts::RefalFunction& gen_DigitFromChar_L1 = descr_gen_DigitFromChar_L1;

} // unnamed namespace

#else
static refalrts::FnResult func_gen_DigitFromChar_L1(refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  refalrts::this_is_generated_function();
  // issue here memory for vars with 20 elems
  refalrts::Iter context[20];
  refalrts::zeros( context, 20 );
  // </0 & DigitFromChar\1/4 s.Char#1/5 e.Assoc-B#2/6 (/10 s.Digit#2/12 e.Vars-B#2/13 s.Char#1/15 e.Vars-E#2/8 )/11 e.Assoc-E#2/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  if( ! refalrts::svar_left( context[5], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  context[6] = 0;
  context[7] = 0;
  refalrts::start_e_loop();
  do {
    context[16] = context[2];
    context[17] = context[3];
    context[8] = 0;
    context[9] = 0;
    context[10] = refalrts::brackets_left( context[8], context[9], context[16], context[17] );
    if( ! context[10] )
      continue;
    refalrts::bracket_pointers(context[10], context[11]);
    // closed e.Assoc-E#2 as range 16(2)
    if( ! refalrts::svar_left( context[12], context[8], context[9] ) )
      continue;
    context[13] = 0;
    context[14] = 0;
    refalrts::start_e_loop();
    do {
      context[18] = context[8];
      context[19] = context[9];
      if( ! refalrts::repeated_stvar_left( context[15], context[5], context[18], context[19] ) )
        continue;
      // closed e.Vars-E#2 as range 18(8)
      //DEBUG: s.Char#1: 5
      //DEBUG: e.Assoc-B#2: 6
      //DEBUG: e.Assoc-E#2: 2
      //DEBUG: s.Digit#2: 12
      //DEBUG: e.Vars-B#2: 13
      //DEBUG: e.Vars-E#2: 8

      refalrts::reset_allocator();
      //TRASH: {REMOVED TILE} </0 & DigitFromChar\1/4 s.Char#1/5 e.Assoc-B#2/6 (/10 s.Digit#2/12 e.Vars-B#2/13 s.Char#1/15 e.Vars-E#2/18(8) )/11 e.Assoc-E#2/16(2) {REMOVED TILE}
      //RESULT: Tile{ [[ } Tile{ HalfReuse: s.Digit2 #12/1 ]] }
      refalrts::reinit_svar( context[1], context[12] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[1];
      refalrts::use( res );
      refalrts::splice_to_freelist_open( trash_prev, res );
      return refalrts::cSuccess;
    } while ( refalrts::open_evar_advance( context[13], context[14], context[8], context[9] ) );
  } while ( refalrts::open_evar_advance( context[6], context[7], context[2], context[3] ) );
  return refalrts::cRecognitionImpossible;
}

namespace /* unnamed */ {
refalrts::RefalNativeFunction descr_gen_DigitFromChar_L1(func_gen_DigitFromChar_L1, "DigitFromChar\\1");
refalrts::RefalFunction& gen_DigitFromChar_L1 = descr_gen_DigitFromChar_L1;

} // unnamed namespace

#endif
#ifdef INTERPRET
namespace /* unnamed */ {
  namespace scope_DigitFromChar {
    static const char *filename = "Flex-Lexer.cpp";
    static refalrts::RefalFunction *functions[] = {
      & gen_DigitFromChar_L1,
      & refalrts::create_closure,
      & Fetch
    };
    using refalrts::idents;
    using refalrts::numbers;
    static const refalrts::StringItem strings[] = {
      {"Ff", 2},
      {"Ee", 2},
      {"Dd", 2},
      {"Cc", 2},
      {"Bb", 2},
      {"Aa", 2}
    };
    static const refalrts::RASLCommand raa[] = {
      {refalrts::icThisIsGeneratedFunction, 0, 0, 0},
      {refalrts::icLoadConstants, 0, 0, 0},
      {refalrts::icIssueMemory, 80, 0, 0},
      // </0 & DigitFromChar/4 s.Char#1/5 >/1
      {refalrts::icInitB0_Lite, 0, 0, 0},
      {refalrts::icCallSaveLeft, 0, 2, 0},
      {refalrts::icsVarLeft, 0, 5, 2},
      {refalrts::icEmpty, 0, 0, 2},
      //DEBUG: s.Char#1: 5
      {refalrts::icEmptyResult, 0, 0, 0},
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ } </6 & Fetch/7 (/8 0/9 '0'/10 )/11 (/12 1/13 '1'/14 )/15 (/16 2/17 '2'/18 )/19 (/20 3/21 '3'/22 )/23 (/24 4/25 '4'/26 )/27 (/28 5/29 '5'/30 )/31 (/32 6/33 '6'/34 )/35 (/36 7/37 '7'/38 )/39 (/40 8/41 '8'/42 )/43 (/44 9/45 '9'/46 )/47 (/48 10/49"Aa"/50 )/52 (/53 11/54"Bb"/55 )/57 (/58 12/59"Cc"/60 )/62 (/63 13/64"Dd"/65 )/67 (/68 14/69"Ee"/70 )/72 (/73 15/74"Ff"/75 )/77 </78 Tile{ HalfReuse: & @create_closure@/0 Reuse: & DigitFromChar\1/4 AsIs: s.Char#1/5 AsIs: >/1 } >/79 Tile{ ]] }
      {refalrts::icAllocBracket, 0, refalrts::ibOpenCall, 6},
      {refalrts::icAllocFunc, 0, 2, 7},
      {refalrts::icAllocBracket, 0, refalrts::ibOpenBracket, 8},
      {refalrts::icAllocInt, 0, 0, 9},
      {refalrts::icAllocChar, 0, '0', 10},
      {refalrts::icAllocBracket, 0, refalrts::ibCloseBracket, 11},
      {refalrts::icAllocBracket, 0, refalrts::ibOpenBracket, 12},
      {refalrts::icAllocInt, 0, 1, 13},
      {refalrts::icAllocChar, 0, '1', 14},
      {refalrts::icAllocBracket, 0, refalrts::ibCloseBracket, 15},
      {refalrts::icAllocBracket, 0, refalrts::ibOpenBracket, 16},
      {refalrts::icAllocInt, 0, 2, 17},
      {refalrts::icAllocChar, 0, '2', 18},
      {refalrts::icAllocBracket, 0, refalrts::ibCloseBracket, 19},
      {refalrts::icAllocBracket, 0, refalrts::ibOpenBracket, 20},
      {refalrts::icAllocInt, 0, 3, 21},
      {refalrts::icAllocChar, 0, '3', 22},
      {refalrts::icAllocBracket, 0, refalrts::ibCloseBracket, 23},
      {refalrts::icAllocBracket, 0, refalrts::ibOpenBracket, 24},
      {refalrts::icAllocInt, 0, 4, 25},
      {refalrts::icAllocChar, 0, '4', 26},
      {refalrts::icAllocBracket, 0, refalrts::ibCloseBracket, 27},
      {refalrts::icAllocBracket, 0, refalrts::ibOpenBracket, 28},
      {refalrts::icAllocInt, 0, 5, 29},
      {refalrts::icAllocChar, 0, '5', 30},
      {refalrts::icAllocBracket, 0, refalrts::ibCloseBracket, 31},
      {refalrts::icAllocBracket, 0, refalrts::ibOpenBracket, 32},
      {refalrts::icAllocInt, 0, 6, 33},
      {refalrts::icAllocChar, 0, '6', 34},
      {refalrts::icAllocBracket, 0, refalrts::ibCloseBracket, 35},
      {refalrts::icAllocBracket, 0, refalrts::ibOpenBracket, 36},
      {refalrts::icAllocInt, 0, 7, 37},
      {refalrts::icAllocChar, 0, '7', 38},
      {refalrts::icAllocBracket, 0, refalrts::ibCloseBracket, 39},
      {refalrts::icAllocBracket, 0, refalrts::ibOpenBracket, 40},
      {refalrts::icAllocInt, 0, 8, 41},
      {refalrts::icAllocChar, 0, '8', 42},
      {refalrts::icAllocBracket, 0, refalrts::ibCloseBracket, 43},
      {refalrts::icAllocBracket, 0, refalrts::ibOpenBracket, 44},
      {refalrts::icAllocInt, 0, 9, 45},
      {refalrts::icAllocChar, 0, '9', 46},
      {refalrts::icAllocBracket, 0, refalrts::ibCloseBracket, 47},
      {refalrts::icAllocBracket, 0, refalrts::ibOpenBracket, 48},
      {refalrts::icAllocInt, 0, 10, 49},
      {refalrts::icAllocString, 0, 5, 50},
      {refalrts::icAllocBracket, 0, refalrts::ibCloseBracket, 52},
      {refalrts::icAllocBracket, 0, refalrts::ibOpenBracket, 53},
      {refalrts::icAllocInt, 0, 11, 54},
      {refalrts::icAllocString, 0, 4, 55},
      {refalrts::icAllocBracket, 0, refalrts::ibCloseBracket, 57},
      {refalrts::icAllocBracket, 0, refalrts::ibOpenBracket, 58},
      {refalrts::icAllocInt, 0, 12, 59},
      {refalrts::icAllocString, 0, 3, 60},
      {refalrts::icAllocBracket, 0, refalrts::ibCloseBracket, 62},
      {refalrts::icAllocBracket, 0, refalrts::ibOpenBracket, 63},
      {refalrts::icAllocInt, 0, 13, 64},
      {refalrts::icAllocString, 0, 2, 65},
      {refalrts::icAllocBracket, 0, refalrts::ibCloseBracket, 67},
      {refalrts::icAllocBracket, 0, refalrts::ibOpenBracket, 68},
      {refalrts::icAllocInt, 0, 14, 69},
      {refalrts::icAllocString, 0, 1, 70},
      {refalrts::icAllocBracket, 0, refalrts::ibCloseBracket, 72},
      {refalrts::icAllocBracket, 0, refalrts::ibOpenBracket, 73},
      {refalrts::icAllocInt, 0, 15, 74},
      {refalrts::icAllocString, 0, 0, 75},
      {refalrts::icAllocBracket, 0, refalrts::ibCloseBracket, 77},
      {refalrts::icAllocBracket, 0, refalrts::ibOpenCall, 78},
      {refalrts::icAllocBracket, 0, refalrts::ibCloseCall, 79},
      {refalrts::icReinitFunc, 0, 1, 0},
      {refalrts::icUpdateFunc, 0, 0, 4},
      {refalrts::icPushStack, 0, 0, 79},
      {refalrts::icPushStack, 0, 0, 6},
      {refalrts::icPushStack, 0, 0, 1},
      {refalrts::icPushStack, 0, 0, 78},
      {refalrts::icLinkBrackets, 73, 77, 0},
      {refalrts::icLinkBrackets, 68, 72, 0},
      {refalrts::icLinkBrackets, 63, 67, 0},
      {refalrts::icLinkBrackets, 58, 62, 0},
      {refalrts::icLinkBrackets, 53, 57, 0},
      {refalrts::icLinkBrackets, 48, 52, 0},
      {refalrts::icLinkBrackets, 44, 47, 0},
      {refalrts::icLinkBrackets, 40, 43, 0},
      {refalrts::icLinkBrackets, 36, 39, 0},
      {refalrts::icLinkBrackets, 32, 35, 0},
      {refalrts::icLinkBrackets, 28, 31, 0},
      {refalrts::icLinkBrackets, 24, 27, 0},
      {refalrts::icLinkBrackets, 20, 23, 0},
      {refalrts::icLinkBrackets, 16, 19, 0},
      {refalrts::icLinkBrackets, 12, 15, 0},
      {refalrts::icLinkBrackets, 8, 11, 0},
      {refalrts::icSetResRightEdge, 0, 0, 0},
      {refalrts::icSpliceTile, 79, 79, 0},
      {refalrts::icSpliceTile, 0, 1, 0},
      {refalrts::icSpliceTile, 6, 78, 0},
      {refalrts::icNextStep, 0, 0, 0},
      {refalrts::icEnd, 0, 0, 0}
    };
  } // namespace scope_DigitFromChar

} // unnamed namespace

namespace /* unnamed */ {
refalrts::RASLFunction descr_DigitFromChar(
  "DigitFromChar",
  scope_DigitFromChar::raa,
  scope_DigitFromChar::functions,
  scope_DigitFromChar::idents,
  scope_DigitFromChar::numbers,
  scope_DigitFromChar::strings,
  scope_DigitFromChar::filename
);
refalrts::RefalFunction& DigitFromChar = descr_DigitFromChar;

} // unnamed namespace

#else
static refalrts::FnResult func_DigitFromChar(refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  refalrts::this_is_generated_function();
  // issue here memory for vars with 80 elems
  refalrts::Iter context[80];
  refalrts::zeros( context, 80 );
  // </0 & DigitFromChar/4 s.Char#1/5 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  if( ! refalrts::svar_left( context[5], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  if( ! refalrts::empty_seq( context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  //DEBUG: s.Char#1: 5

  refalrts::reset_allocator();
  //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ } </6 & Fetch/7 (/8 0/9 '0'/10 )/11 (/12 1/13 '1'/14 )/15 (/16 2/17 '2'/18 )/19 (/20 3/21 '3'/22 )/23 (/24 4/25 '4'/26 )/27 (/28 5/29 '5'/30 )/31 (/32 6/33 '6'/34 )/35 (/36 7/37 '7'/38 )/39 (/40 8/41 '8'/42 )/43 (/44 9/45 '9'/46 )/47 (/48 10/49"Aa"/50 )/52 (/53 11/54"Bb"/55 )/57 (/58 12/59"Cc"/60 )/62 (/63 13/64"Dd"/65 )/67 (/68 14/69"Ee"/70 )/72 (/73 15/74"Ff"/75 )/77 </78 Tile{ HalfReuse: & @create_closure@/0 Reuse: & DigitFromChar\1/4 AsIs: s.Char#1/5 AsIs: >/1 } >/79 Tile{ ]] }
  if( ! refalrts::alloc_open_call( context[6] ) )
    return refalrts::cNoMemory;
  if( ! refalrts::alloc_name( context[7], & Fetch ) )
    return refalrts::cNoMemory;
  if( ! refalrts::alloc_open_bracket( context[8] ) )
    return refalrts::cNoMemory;
  if( ! refalrts::alloc_number( context[9], 0UL ) )
    return refalrts::cNoMemory;
  if( ! refalrts::alloc_char( context[10], '0' ) )
    return refalrts::cNoMemory;
  if( ! refalrts::alloc_close_bracket( context[11] ) )
    return refalrts::cNoMemory;
  if( ! refalrts::alloc_open_bracket( context[12] ) )
    return refalrts::cNoMemory;
  if( ! refalrts::alloc_number( context[13], 1UL ) )
    return refalrts::cNoMemory;
  if( ! refalrts::alloc_char( context[14], '1' ) )
    return refalrts::cNoMemory;
  if( ! refalrts::alloc_close_bracket( context[15] ) )
    return refalrts::cNoMemory;
  if( ! refalrts::alloc_open_bracket( context[16] ) )
    return refalrts::cNoMemory;
  if( ! refalrts::alloc_number( context[17], 2UL ) )
    return refalrts::cNoMemory;
  if( ! refalrts::alloc_char( context[18], '2' ) )
    return refalrts::cNoMemory;
  if( ! refalrts::alloc_close_bracket( context[19] ) )
    return refalrts::cNoMemory;
  if( ! refalrts::alloc_open_bracket( context[20] ) )
    return refalrts::cNoMemory;
  if( ! refalrts::alloc_number( context[21], 3UL ) )
    return refalrts::cNoMemory;
  if( ! refalrts::alloc_char( context[22], '3' ) )
    return refalrts::cNoMemory;
  if( ! refalrts::alloc_close_bracket( context[23] ) )
    return refalrts::cNoMemory;
  if( ! refalrts::alloc_open_bracket( context[24] ) )
    return refalrts::cNoMemory;
  if( ! refalrts::alloc_number( context[25], 4UL ) )
    return refalrts::cNoMemory;
  if( ! refalrts::alloc_char( context[26], '4' ) )
    return refalrts::cNoMemory;
  if( ! refalrts::alloc_close_bracket( context[27] ) )
    return refalrts::cNoMemory;
  if( ! refalrts::alloc_open_bracket( context[28] ) )
    return refalrts::cNoMemory;
  if( ! refalrts::alloc_number( context[29], 5UL ) )
    return refalrts::cNoMemory;
  if( ! refalrts::alloc_char( context[30], '5' ) )
    return refalrts::cNoMemory;
  if( ! refalrts::alloc_close_bracket( context[31] ) )
    return refalrts::cNoMemory;
  if( ! refalrts::alloc_open_bracket( context[32] ) )
    return refalrts::cNoMemory;
  if( ! refalrts::alloc_number( context[33], 6UL ) )
    return refalrts::cNoMemory;
  if( ! refalrts::alloc_char( context[34], '6' ) )
    return refalrts::cNoMemory;
  if( ! refalrts::alloc_close_bracket( context[35] ) )
    return refalrts::cNoMemory;
  if( ! refalrts::alloc_open_bracket( context[36] ) )
    return refalrts::cNoMemory;
  if( ! refalrts::alloc_number( context[37], 7UL ) )
    return refalrts::cNoMemory;
  if( ! refalrts::alloc_char( context[38], '7' ) )
    return refalrts::cNoMemory;
  if( ! refalrts::alloc_close_bracket( context[39] ) )
    return refalrts::cNoMemory;
  if( ! refalrts::alloc_open_bracket( context[40] ) )
    return refalrts::cNoMemory;
  if( ! refalrts::alloc_number( context[41], 8UL ) )
    return refalrts::cNoMemory;
  if( ! refalrts::alloc_char( context[42], '8' ) )
    return refalrts::cNoMemory;
  if( ! refalrts::alloc_close_bracket( context[43] ) )
    return refalrts::cNoMemory;
  if( ! refalrts::alloc_open_bracket( context[44] ) )
    return refalrts::cNoMemory;
  if( ! refalrts::alloc_number( context[45], 9UL ) )
    return refalrts::cNoMemory;
  if( ! refalrts::alloc_char( context[46], '9' ) )
    return refalrts::cNoMemory;
  if( ! refalrts::alloc_close_bracket( context[47] ) )
    return refalrts::cNoMemory;
  if( ! refalrts::alloc_open_bracket( context[48] ) )
    return refalrts::cNoMemory;
  if( ! refalrts::alloc_number( context[49], 10UL ) )
    return refalrts::cNoMemory;
  if( ! refalrts::alloc_chars( context[50], context[51], "Aa", 2 ) )
    return refalrts::cNoMemory;
  if( ! refalrts::alloc_close_bracket( context[52] ) )
    return refalrts::cNoMemory;
  if( ! refalrts::alloc_open_bracket( context[53] ) )
    return refalrts::cNoMemory;
  if( ! refalrts::alloc_number( context[54], 11UL ) )
    return refalrts::cNoMemory;
  if( ! refalrts::alloc_chars( context[55], context[56], "Bb", 2 ) )
    return refalrts::cNoMemory;
  if( ! refalrts::alloc_close_bracket( context[57] ) )
    return refalrts::cNoMemory;
  if( ! refalrts::alloc_open_bracket( context[58] ) )
    return refalrts::cNoMemory;
  if( ! refalrts::alloc_number( context[59], 12UL ) )
    return refalrts::cNoMemory;
  if( ! refalrts::alloc_chars( context[60], context[61], "Cc", 2 ) )
    return refalrts::cNoMemory;
  if( ! refalrts::alloc_close_bracket( context[62] ) )
    return refalrts::cNoMemory;
  if( ! refalrts::alloc_open_bracket( context[63] ) )
    return refalrts::cNoMemory;
  if( ! refalrts::alloc_number( context[64], 13UL ) )
    return refalrts::cNoMemory;
  if( ! refalrts::alloc_chars( context[65], context[66], "Dd", 2 ) )
    return refalrts::cNoMemory;
  if( ! refalrts::alloc_close_bracket( context[67] ) )
    return refalrts::cNoMemory;
  if( ! refalrts::alloc_open_bracket( context[68] ) )
    return refalrts::cNoMemory;
  if( ! refalrts::alloc_number( context[69], 14UL ) )
    return refalrts::cNoMemory;
  if( ! refalrts::alloc_chars( context[70], context[71], "Ee", 2 ) )
    return refalrts::cNoMemory;
  if( ! refalrts::alloc_close_bracket( context[72] ) )
    return refalrts::cNoMemory;
  if( ! refalrts::alloc_open_bracket( context[73] ) )
    return refalrts::cNoMemory;
  if( ! refalrts::alloc_number( context[74], 15UL ) )
    return refalrts::cNoMemory;
  if( ! refalrts::alloc_chars( context[75], context[76], "Ff", 2 ) )
    return refalrts::cNoMemory;
  if( ! refalrts::alloc_close_bracket( context[77] ) )
    return refalrts::cNoMemory;
  if( ! refalrts::alloc_open_call( context[78] ) )
    return refalrts::cNoMemory;
  if( ! refalrts::alloc_close_call( context[79] ) )
    return refalrts::cNoMemory;
  refalrts::reinit_name( context[0], & refalrts::create_closure );
  refalrts::update_name( context[4], & gen_DigitFromChar_L1 );
  refalrts::push_stack( context[79] );
  refalrts::push_stack( context[6] );
  refalrts::push_stack( context[1] );
  refalrts::push_stack( context[78] );
  refalrts::link_brackets( context[73], context[77] );
  refalrts::link_brackets( context[68], context[72] );
  refalrts::link_brackets( context[63], context[67] );
  refalrts::link_brackets( context[58], context[62] );
  refalrts::link_brackets( context[53], context[57] );
  refalrts::link_brackets( context[48], context[52] );
  refalrts::link_brackets( context[44], context[47] );
  refalrts::link_brackets( context[40], context[43] );
  refalrts::link_brackets( context[36], context[39] );
  refalrts::link_brackets( context[32], context[35] );
  refalrts::link_brackets( context[28], context[31] );
  refalrts::link_brackets( context[24], context[27] );
  refalrts::link_brackets( context[20], context[23] );
  refalrts::link_brackets( context[16], context[19] );
  refalrts::link_brackets( context[12], context[15] );
  refalrts::link_brackets( context[8], context[11] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = arg_end->next;
  res = refalrts::splice_evar( res, context[79], context[79] );
  res = refalrts::splice_evar( res, context[0], context[1] );
  res = refalrts::splice_evar( res, context[6], context[78] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

namespace /* unnamed */ {
refalrts::RefalNativeFunction descr_DigitFromChar(func_DigitFromChar, "DigitFromChar");
refalrts::RefalFunction& DigitFromChar = descr_DigitFromChar;

} // unnamed namespace

#endif
#ifdef INTERPRET
namespace /* unnamed */ {
  namespace scope_Root {
    static const char *filename = "Flex-Lexer.cpp";
    static refalrts::RefalFunction *functions[] = {
      & ErrorMessage,
      & Name,
      & Number,
      & ReadArrow,
      & ReadRegexp
    };
    static const refalrts::RefalIdentifier idents[] = {
      & ident_TEOF<int>::name,
      & ident_TUnexpecteChar<int>::name,
      & ident_TStateEnd<int>::name,
      & ident_TComma<int>::name,
      & ident_TStateStart<int>::name,
      & ident_TEquals<int>::name,
      & ident_TStartRegexp<int>::name,
      & ident_TNewLine<int>::name
    };
    using refalrts::numbers;
    using refalrts::strings;
    static const refalrts::RASLCommand raa[] = {
      {refalrts::icThisIsGeneratedFunction, 0, 0, 0},
      {refalrts::icLoadConstants, 0, 0, 0},
      {refalrts::icReserveBacktrackStack, 48, 0, 0},
      {refalrts::icIssueMemory, 15, 0, 0},
      //FAST GEN: e.$
      //GLOBAL GEN: ( e.$ ) e.$
      // </0 & Root/4 (/7 e.idxB#0/5 )/8 e.idxT#0/2 >/1
      {refalrts::icInitB0_Lite, 0, 0, 0},
      {refalrts::icCallSaveLeft, 0, 2, 0},
      {refalrts::icBracketLeftSave, 0, 5, 2},
      // closed e.idxB#0 as range 5
      // closed e.idxT#0 as range 2
      {refalrts::icOnFailGoTo, +10, 0, 0},
      // ( e.idx ) ' ' e.idx
      // </0 & Root/4 (/7 e.Accum#1/5 )/8 ' '/9 e.Text#1/2 >/1
      {refalrts::icSave, 0, 13, 2},
      {refalrts::icCharLeftSave, 9, static_cast<unsigned char>(' '), 13},
      // closed e.Accum#1 as range 5
      // closed e.Text#1 as range 13(2)
      //DEBUG: e.Accum#1: 5
      //DEBUG: e.Text#1: 2
      {refalrts::icEmptyResult, 0, 0, 0},
      //TRASH: {REMOVED TILE} e.Accum#1/5 )/8 {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 AsIs: & Root/4 AsIs: (/7 } Tile{ HalfReuse: )/9 AsIs: e.Text#1/13(2) AsIs: >/1 ]] }
      {refalrts::icReinitBracket, 0, refalrts::ibCloseBracket, 9},
      {refalrts::icPushStack, 0, 0, 1},
      {refalrts::icPushStack, 0, 0, 0},
      {refalrts::icLinkBrackets, 7, 9, 0},
      {refalrts::icSetRes, 0, 0, 9},
      {refalrts::icTrash, 0, 0, 7},
      {refalrts::icNextStep, 0, 0, 0},
      {refalrts::icProfilerStopSentence, 0, 0, 0},
      {refalrts::icOnFailGoTo, +10, 0, 0},
      // ( e.idx ) '\t' e.idx
      // </0 & Root/4 (/7 e.Accum#1/5 )/8 '\t'/9 e.Text#1/2 >/1
      {refalrts::icSave, 0, 13, 2},
      {refalrts::icCharLeftSave, 9, static_cast<unsigned char>('\t'), 13},
      // closed e.Accum#1 as range 5
      // closed e.Text#1 as range 13(2)
      //DEBUG: e.Accum#1: 5
      //DEBUG: e.Text#1: 2
      {refalrts::icEmptyResult, 0, 0, 0},
      //TRASH: {REMOVED TILE} e.Accum#1/5 )/8 {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 AsIs: & Root/4 AsIs: (/7 } Tile{ HalfReuse: )/9 AsIs: e.Text#1/13(2) AsIs: >/1 ]] }
      {refalrts::icReinitBracket, 0, refalrts::ibCloseBracket, 9},
      {refalrts::icPushStack, 0, 0, 1},
      {refalrts::icPushStack, 0, 0, 0},
      {refalrts::icLinkBrackets, 7, 9, 0},
      {refalrts::icSetRes, 0, 0, 9},
      {refalrts::icTrash, 0, 0, 7},
      {refalrts::icNextStep, 0, 0, 0},
      {refalrts::icProfilerStopSentence, 0, 0, 0},
      {refalrts::icOnFailGoTo, +10, 0, 0},
      // ( e.idx ) '\r' e.idx
      // </0 & Root/4 (/7 e.Accum#1/5 )/8 '\r'/9 e.Text#1/2 >/1
      {refalrts::icSave, 0, 13, 2},
      {refalrts::icCharLeftSave, 9, static_cast<unsigned char>('\r'), 13},
      // closed e.Accum#1 as range 5
      // closed e.Text#1 as range 13(2)
      //DEBUG: e.Accum#1: 5
      //DEBUG: e.Text#1: 2
      {refalrts::icEmptyResult, 0, 0, 0},
      //TRASH: {REMOVED TILE} e.Accum#1/5 )/8 {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 AsIs: & Root/4 AsIs: (/7 } Tile{ HalfReuse: )/9 AsIs: e.Text#1/13(2) AsIs: >/1 ]] }
      {refalrts::icReinitBracket, 0, refalrts::ibCloseBracket, 9},
      {refalrts::icPushStack, 0, 0, 1},
      {refalrts::icPushStack, 0, 0, 0},
      {refalrts::icLinkBrackets, 7, 9, 0},
      {refalrts::icSetRes, 0, 0, 9},
      {refalrts::icTrash, 0, 0, 7},
      {refalrts::icNextStep, 0, 0, 0},
      {refalrts::icProfilerStopSentence, 0, 0, 0},
      {refalrts::icOnFailGoTo, +19, 0, 0},
      // ( e.idx ) '\n' e.idx
      // </0 & Root/4 (/7 e.Accum#1/5 )/8 '\n'/9 e.Text#1/2 >/1
      {refalrts::icSave, 0, 13, 2},
      {refalrts::icCharLeftSave, 9, static_cast<unsigned char>('\n'), 13},
      // closed e.Accum#1 as range 5
      // closed e.Text#1 as range 13(2)
      //DEBUG: e.Accum#1: 5
      //DEBUG: e.Text#1: 2
      {refalrts::icEmptyResult, 0, 0, 0},
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ } Tile{ AsIs: (/7 } # TNewLine/10 Tile{ AsIs: e.Accum#1/5 } '\n'/11 )/12 Tile{ AsIs: </0 AsIs: & Root/4 } Tile{ HalfReuse: (/8 HalfReuse: )/9 AsIs: e.Text#1/13(2) AsIs: >/1 ]] }
      {refalrts::icAllocIdent, 0, 7, 10},
      {refalrts::icAllocChar, 0, '\n', 11},
      {refalrts::icAllocBracket, 0, refalrts::ibCloseBracket, 12},
      {refalrts::icReinitBracket, 0, refalrts::ibOpenBracket, 8},
      {refalrts::icReinitBracket, 0, refalrts::ibCloseBracket, 9},
      {refalrts::icPushStack, 0, 0, 1},
      {refalrts::icPushStack, 0, 0, 0},
      {refalrts::icLinkBrackets, 8, 9, 0},
      {refalrts::icLinkBrackets, 7, 12, 0},
      {refalrts::icSetRes, 0, 0, 8},
      {refalrts::icSpliceTile, 0, 4, 0},
      {refalrts::icSpliceTile, 11, 12, 0},
      {refalrts::icSpliceEVar, 0, 0, 5},
      {refalrts::icSpliceTile, 10, 10, 0},
      {refalrts::icSpliceTile, 7, 7, 0},
      {refalrts::icNextStep, 0, 0, 0},
      {refalrts::icProfilerStopSentence, 0, 0, 0},
      {refalrts::icOnFailGoTo, +21, 0, 0},
      // ( e.idx ) '/' e.idx
      // </0 & Root/4 (/7 e.Accum#1/5 )/8 '/'/9 e.Text#1/2 >/1
      {refalrts::icSave, 0, 13, 2},
      {refalrts::icCharLeftSave, 9, static_cast<unsigned char>('/'), 13},
      // closed e.Accum#1 as range 5
      // closed e.Text#1 as range 13(2)
      //DEBUG: e.Accum#1: 5
      //DEBUG: e.Text#1: 2
      {refalrts::icEmptyResult, 0, 0, 0},
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ HalfReuse: (/0 HalfReuse: # TStartRegexp/4 } Tile{ AsIs: e.Accum#1/5 } '/'/10 Tile{ HalfReuse: )/7 } </11 & ReadRegexp/12 Tile{ HalfReuse: (/8 HalfReuse: )/9 AsIs: e.Text#1/13(2) AsIs: >/1 ]] }
      {refalrts::icAllocChar, 0, '/', 10},
      {refalrts::icAllocBracket, 0, refalrts::ibOpenCall, 11},
      {refalrts::icAllocFunc, 0, 4, 12},
      {refalrts::icReinitBracket, 0, refalrts::ibOpenBracket, 0},
      {refalrts::icReinitIdent, 0, 6, 4},
      {refalrts::icReinitBracket, 0, refalrts::ibCloseBracket, 7},
      {refalrts::icReinitBracket, 0, refalrts::ibOpenBracket, 8},
      {refalrts::icReinitBracket, 0, refalrts::ibCloseBracket, 9},
      {refalrts::icPushStack, 0, 0, 1},
      {refalrts::icPushStack, 0, 0, 11},
      {refalrts::icLinkBrackets, 8, 9, 0},
      {refalrts::icLinkBrackets, 0, 7, 0},
      {refalrts::icSetRes, 0, 0, 8},
      {refalrts::icSpliceTile, 11, 12, 0},
      {refalrts::icSpliceTile, 7, 7, 0},
      {refalrts::icSpliceTile, 10, 10, 0},
      {refalrts::icSpliceEVar, 0, 0, 5},
      {refalrts::icNextStep, 0, 0, 0},
      {refalrts::icProfilerStopSentence, 0, 0, 0},
      {refalrts::icOnFailGoTo, +12, 0, 0},
      // ( e.idx ) '-' e.idx
      // </0 & Root/4 (/7 e.Accum#1/5 )/8 '-'/9 e.Text#1/2 >/1
      {refalrts::icSave, 0, 13, 2},
      {refalrts::icCharLeftSave, 9, static_cast<unsigned char>('-'), 13},
      // closed e.Accum#1 as range 5
      // closed e.Text#1 as range 13(2)
      //DEBUG: e.Accum#1: 5
      //DEBUG: e.Text#1: 2
      {refalrts::icEmptyResult, 0, 0, 0},
      //TRASH: {REMOVED TILE} (/7 e.Accum#1/5 {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 Reuse: & ReadArrow/4 } Tile{ HalfReuse: (/8 HalfReuse: )/9 AsIs: e.Text#1/13(2) AsIs: >/1 ]] }
      {refalrts::icUpdateFunc, 0, 3, 4},
      {refalrts::icReinitBracket, 0, refalrts::ibOpenBracket, 8},
      {refalrts::icReinitBracket, 0, refalrts::ibCloseBracket, 9},
      {refalrts::icPushStack, 0, 0, 1},
      {refalrts::icPushStack, 0, 0, 0},
      {refalrts::icLinkBrackets, 8, 9, 0},
      {refalrts::icSetRes, 0, 0, 8},
      {refalrts::icTrash, 0, 0, 4},
      {refalrts::icNextStep, 0, 0, 0},
      {refalrts::icProfilerStopSentence, 0, 0, 0},
      {refalrts::icOnFailGoTo, +19, 0, 0},
      // ( e.idx ) '=' e.idx
      // </0 & Root/4 (/7 e.Accum#1/5 )/8 '='/9 e.Text#1/2 >/1
      {refalrts::icSave, 0, 13, 2},
      {refalrts::icCharLeftSave, 9, static_cast<unsigned char>('='), 13},
      // closed e.Accum#1 as range 5
      // closed e.Text#1 as range 13(2)
      //DEBUG: e.Accum#1: 5
      //DEBUG: e.Text#1: 2
      {refalrts::icEmptyResult, 0, 0, 0},
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ } Tile{ AsIs: (/7 } # TEquals/10 Tile{ AsIs: e.Accum#1/5 } '='/11 )/12 Tile{ AsIs: </0 AsIs: & Root/4 } Tile{ HalfReuse: (/8 HalfReuse: )/9 AsIs: e.Text#1/13(2) AsIs: >/1 ]] }
      {refalrts::icAllocIdent, 0, 5, 10},
      {refalrts::icAllocChar, 0, '=', 11},
      {refalrts::icAllocBracket, 0, refalrts::ibCloseBracket, 12},
      {refalrts::icReinitBracket, 0, refalrts::ibOpenBracket, 8},
      {refalrts::icReinitBracket, 0, refalrts::ibCloseBracket, 9},
      {refalrts::icPushStack, 0, 0, 1},
      {refalrts::icPushStack, 0, 0, 0},
      {refalrts::icLinkBrackets, 8, 9, 0},
      {refalrts::icLinkBrackets, 7, 12, 0},
      {refalrts::icSetRes, 0, 0, 8},
      {refalrts::icSpliceTile, 0, 4, 0},
      {refalrts::icSpliceTile, 11, 12, 0},
      {refalrts::icSpliceEVar, 0, 0, 5},
      {refalrts::icSpliceTile, 10, 10, 0},
      {refalrts::icSpliceTile, 7, 7, 0},
      {refalrts::icNextStep, 0, 0, 0},
      {refalrts::icProfilerStopSentence, 0, 0, 0},
      {refalrts::icOnFailGoTo, +10, 0, 0},
      // ( e.idx ) '0' e.idx
      // </0 & Root/4 (/7 e.Accum#1/5 )/8 '0'/9 e.Text#1/2 >/1
      {refalrts::icSave, 0, 13, 2},
      {refalrts::icCharLeftSave, 9, static_cast<unsigned char>('0'), 13},
      // closed e.Accum#1 as range 5
      // closed e.Text#1 as range 13(2)
      //DEBUG: e.Accum#1: 5
      //DEBUG: e.Text#1: 2
      {refalrts::icEmptyResult, 0, 0, 0},
      //TRASH: {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 Reuse: & Number/4 AsIs: (/7 AsIs: e.Accum#1/5 HalfReuse: '0'/8 HalfReuse: )/9 AsIs: e.Text#1/13(2) AsIs: >/1 ]] }
      {refalrts::icUpdateFunc, 0, 2, 4},
      {refalrts::icReinitChar, 0, '0', 8},
      {refalrts::icReinitBracket, 0, refalrts::ibCloseBracket, 9},
      {refalrts::icPushStack, 0, 0, 1},
      {refalrts::icPushStack, 0, 0, 0},
      {refalrts::icLinkBrackets, 7, 9, 0},
      {refalrts::icNextStep, 0, 0, 0},
      {refalrts::icProfilerStopSentence, 0, 0, 0},
      {refalrts::icOnFailGoTo, +10, 0, 0},
      // ( e.idx ) '1' e.idx
      // </0 & Root/4 (/7 e.Accum#1/5 )/8 '1'/9 e.Text#1/2 >/1
      {refalrts::icSave, 0, 13, 2},
      {refalrts::icCharLeftSave, 9, static_cast<unsigned char>('1'), 13},
      // closed e.Accum#1 as range 5
      // closed e.Text#1 as range 13(2)
      //DEBUG: e.Accum#1: 5
      //DEBUG: e.Text#1: 2
      {refalrts::icEmptyResult, 0, 0, 0},
      //TRASH: {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 Reuse: & Number/4 AsIs: (/7 AsIs: e.Accum#1/5 HalfReuse: '1'/8 HalfReuse: )/9 AsIs: e.Text#1/13(2) AsIs: >/1 ]] }
      {refalrts::icUpdateFunc, 0, 2, 4},
      {refalrts::icReinitChar, 0, '1', 8},
      {refalrts::icReinitBracket, 0, refalrts::ibCloseBracket, 9},
      {refalrts::icPushStack, 0, 0, 1},
      {refalrts::icPushStack, 0, 0, 0},
      {refalrts::icLinkBrackets, 7, 9, 0},
      {refalrts::icNextStep, 0, 0, 0},
      {refalrts::icProfilerStopSentence, 0, 0, 0},
      {refalrts::icOnFailGoTo, +10, 0, 0},
      // ( e.idx ) '2' e.idx
      // </0 & Root/4 (/7 e.Accum#1/5 )/8 '2'/9 e.Text#1/2 >/1
      {refalrts::icSave, 0, 13, 2},
      {refalrts::icCharLeftSave, 9, static_cast<unsigned char>('2'), 13},
      // closed e.Accum#1 as range 5
      // closed e.Text#1 as range 13(2)
      //DEBUG: e.Accum#1: 5
      //DEBUG: e.Text#1: 2
      {refalrts::icEmptyResult, 0, 0, 0},
      //TRASH: {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 Reuse: & Number/4 AsIs: (/7 AsIs: e.Accum#1/5 HalfReuse: '2'/8 HalfReuse: )/9 AsIs: e.Text#1/13(2) AsIs: >/1 ]] }
      {refalrts::icUpdateFunc, 0, 2, 4},
      {refalrts::icReinitChar, 0, '2', 8},
      {refalrts::icReinitBracket, 0, refalrts::ibCloseBracket, 9},
      {refalrts::icPushStack, 0, 0, 1},
      {refalrts::icPushStack, 0, 0, 0},
      {refalrts::icLinkBrackets, 7, 9, 0},
      {refalrts::icNextStep, 0, 0, 0},
      {refalrts::icProfilerStopSentence, 0, 0, 0},
      {refalrts::icOnFailGoTo, +10, 0, 0},
      // ( e.idx ) '3' e.idx
      // </0 & Root/4 (/7 e.Accum#1/5 )/8 '3'/9 e.Text#1/2 >/1
      {refalrts::icSave, 0, 13, 2},
      {refalrts::icCharLeftSave, 9, static_cast<unsigned char>('3'), 13},
      // closed e.Accum#1 as range 5
      // closed e.Text#1 as range 13(2)
      //DEBUG: e.Accum#1: 5
      //DEBUG: e.Text#1: 2
      {refalrts::icEmptyResult, 0, 0, 0},
      //TRASH: {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 Reuse: & Number/4 AsIs: (/7 AsIs: e.Accum#1/5 HalfReuse: '3'/8 HalfReuse: )/9 AsIs: e.Text#1/13(2) AsIs: >/1 ]] }
      {refalrts::icUpdateFunc, 0, 2, 4},
      {refalrts::icReinitChar, 0, '3', 8},
      {refalrts::icReinitBracket, 0, refalrts::ibCloseBracket, 9},
      {refalrts::icPushStack, 0, 0, 1},
      {refalrts::icPushStack, 0, 0, 0},
      {refalrts::icLinkBrackets, 7, 9, 0},
      {refalrts::icNextStep, 0, 0, 0},
      {refalrts::icProfilerStopSentence, 0, 0, 0},
      {refalrts::icOnFailGoTo, +10, 0, 0},
      // ( e.idx ) '4' e.idx
      // </0 & Root/4 (/7 e.Accum#1/5 )/8 '4'/9 e.Text#1/2 >/1
      {refalrts::icSave, 0, 13, 2},
      {refalrts::icCharLeftSave, 9, static_cast<unsigned char>('4'), 13},
      // closed e.Accum#1 as range 5
      // closed e.Text#1 as range 13(2)
      //DEBUG: e.Accum#1: 5
      //DEBUG: e.Text#1: 2
      {refalrts::icEmptyResult, 0, 0, 0},
      //TRASH: {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 Reuse: & Number/4 AsIs: (/7 AsIs: e.Accum#1/5 HalfReuse: '4'/8 HalfReuse: )/9 AsIs: e.Text#1/13(2) AsIs: >/1 ]] }
      {refalrts::icUpdateFunc, 0, 2, 4},
      {refalrts::icReinitChar, 0, '4', 8},
      {refalrts::icReinitBracket, 0, refalrts::ibCloseBracket, 9},
      {refalrts::icPushStack, 0, 0, 1},
      {refalrts::icPushStack, 0, 0, 0},
      {refalrts::icLinkBrackets, 7, 9, 0},
      {refalrts::icNextStep, 0, 0, 0},
      {refalrts::icProfilerStopSentence, 0, 0, 0},
      {refalrts::icOnFailGoTo, +10, 0, 0},
      // ( e.idx ) '5' e.idx
      // </0 & Root/4 (/7 e.Accum#1/5 )/8 '5'/9 e.Text#1/2 >/1
      {refalrts::icSave, 0, 13, 2},
      {refalrts::icCharLeftSave, 9, static_cast<unsigned char>('5'), 13},
      // closed e.Accum#1 as range 5
      // closed e.Text#1 as range 13(2)
      //DEBUG: e.Accum#1: 5
      //DEBUG: e.Text#1: 2
      {refalrts::icEmptyResult, 0, 0, 0},
      //TRASH: {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 Reuse: & Number/4 AsIs: (/7 AsIs: e.Accum#1/5 HalfReuse: '5'/8 HalfReuse: )/9 AsIs: e.Text#1/13(2) AsIs: >/1 ]] }
      {refalrts::icUpdateFunc, 0, 2, 4},
      {refalrts::icReinitChar, 0, '5', 8},
      {refalrts::icReinitBracket, 0, refalrts::ibCloseBracket, 9},
      {refalrts::icPushStack, 0, 0, 1},
      {refalrts::icPushStack, 0, 0, 0},
      {refalrts::icLinkBrackets, 7, 9, 0},
      {refalrts::icNextStep, 0, 0, 0},
      {refalrts::icProfilerStopSentence, 0, 0, 0},
      {refalrts::icOnFailGoTo, +10, 0, 0},
      // ( e.idx ) '6' e.idx
      // </0 & Root/4 (/7 e.Accum#1/5 )/8 '6'/9 e.Text#1/2 >/1
      {refalrts::icSave, 0, 13, 2},
      {refalrts::icCharLeftSave, 9, static_cast<unsigned char>('6'), 13},
      // closed e.Accum#1 as range 5
      // closed e.Text#1 as range 13(2)
      //DEBUG: e.Accum#1: 5
      //DEBUG: e.Text#1: 2
      {refalrts::icEmptyResult, 0, 0, 0},
      //TRASH: {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 Reuse: & Number/4 AsIs: (/7 AsIs: e.Accum#1/5 HalfReuse: '6'/8 HalfReuse: )/9 AsIs: e.Text#1/13(2) AsIs: >/1 ]] }
      {refalrts::icUpdateFunc, 0, 2, 4},
      {refalrts::icReinitChar, 0, '6', 8},
      {refalrts::icReinitBracket, 0, refalrts::ibCloseBracket, 9},
      {refalrts::icPushStack, 0, 0, 1},
      {refalrts::icPushStack, 0, 0, 0},
      {refalrts::icLinkBrackets, 7, 9, 0},
      {refalrts::icNextStep, 0, 0, 0},
      {refalrts::icProfilerStopSentence, 0, 0, 0},
      {refalrts::icOnFailGoTo, +10, 0, 0},
      // ( e.idx ) '7' e.idx
      // </0 & Root/4 (/7 e.Accum#1/5 )/8 '7'/9 e.Text#1/2 >/1
      {refalrts::icSave, 0, 13, 2},
      {refalrts::icCharLeftSave, 9, static_cast<unsigned char>('7'), 13},
      // closed e.Accum#1 as range 5
      // closed e.Text#1 as range 13(2)
      //DEBUG: e.Accum#1: 5
      //DEBUG: e.Text#1: 2
      {refalrts::icEmptyResult, 0, 0, 0},
      //TRASH: {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 Reuse: & Number/4 AsIs: (/7 AsIs: e.Accum#1/5 HalfReuse: '7'/8 HalfReuse: )/9 AsIs: e.Text#1/13(2) AsIs: >/1 ]] }
      {refalrts::icUpdateFunc, 0, 2, 4},
      {refalrts::icReinitChar, 0, '7', 8},
      {refalrts::icReinitBracket, 0, refalrts::ibCloseBracket, 9},
      {refalrts::icPushStack, 0, 0, 1},
      {refalrts::icPushStack, 0, 0, 0},
      {refalrts::icLinkBrackets, 7, 9, 0},
      {refalrts::icNextStep, 0, 0, 0},
      {refalrts::icProfilerStopSentence, 0, 0, 0},
      {refalrts::icOnFailGoTo, +10, 0, 0},
      // ( e.idx ) '8' e.idx
      // </0 & Root/4 (/7 e.Accum#1/5 )/8 '8'/9 e.Text#1/2 >/1
      {refalrts::icSave, 0, 13, 2},
      {refalrts::icCharLeftSave, 9, static_cast<unsigned char>('8'), 13},
      // closed e.Accum#1 as range 5
      // closed e.Text#1 as range 13(2)
      //DEBUG: e.Accum#1: 5
      //DEBUG: e.Text#1: 2
      {refalrts::icEmptyResult, 0, 0, 0},
      //TRASH: {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 Reuse: & Number/4 AsIs: (/7 AsIs: e.Accum#1/5 HalfReuse: '8'/8 HalfReuse: )/9 AsIs: e.Text#1/13(2) AsIs: >/1 ]] }
      {refalrts::icUpdateFunc, 0, 2, 4},
      {refalrts::icReinitChar, 0, '8', 8},
      {refalrts::icReinitBracket, 0, refalrts::ibCloseBracket, 9},
      {refalrts::icPushStack, 0, 0, 1},
      {refalrts::icPushStack, 0, 0, 0},
      {refalrts::icLinkBrackets, 7, 9, 0},
      {refalrts::icNextStep, 0, 0, 0},
      {refalrts::icProfilerStopSentence, 0, 0, 0},
      {refalrts::icOnFailGoTo, +10, 0, 0},
      // ( e.idx ) '9' e.idx
      // </0 & Root/4 (/7 e.Accum#1/5 )/8 '9'/9 e.Text#1/2 >/1
      {refalrts::icSave, 0, 13, 2},
      {refalrts::icCharLeftSave, 9, static_cast<unsigned char>('9'), 13},
      // closed e.Accum#1 as range 5
      // closed e.Text#1 as range 13(2)
      //DEBUG: e.Accum#1: 5
      //DEBUG: e.Text#1: 2
      {refalrts::icEmptyResult, 0, 0, 0},
      //TRASH: {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 Reuse: & Number/4 AsIs: (/7 AsIs: e.Accum#1/5 HalfReuse: '9'/8 HalfReuse: )/9 AsIs: e.Text#1/13(2) AsIs: >/1 ]] }
      {refalrts::icUpdateFunc, 0, 2, 4},
      {refalrts::icReinitChar, 0, '9', 8},
      {refalrts::icReinitBracket, 0, refalrts::ibCloseBracket, 9},
      {refalrts::icPushStack, 0, 0, 1},
      {refalrts::icPushStack, 0, 0, 0},
      {refalrts::icLinkBrackets, 7, 9, 0},
      {refalrts::icNextStep, 0, 0, 0},
      {refalrts::icProfilerStopSentence, 0, 0, 0},
      {refalrts::icOnFailGoTo, +10, 0, 0},
      // ( e.idx ) 'A' e.idx
      // </0 & Root/4 (/7 e.Accum#1/5 )/8 'A'/9 e.Text#1/2 >/1
      {refalrts::icSave, 0, 13, 2},
      {refalrts::icCharLeftSave, 9, static_cast<unsigned char>('A'), 13},
      // closed e.Accum#1 as range 5
      // closed e.Text#1 as range 13(2)
      //DEBUG: e.Accum#1: 5
      //DEBUG: e.Text#1: 2
      {refalrts::icEmptyResult, 0, 0, 0},
      //TRASH: {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 Reuse: & Name/4 AsIs: (/7 AsIs: e.Accum#1/5 HalfReuse: 'A'/8 HalfReuse: )/9 AsIs: e.Text#1/13(2) AsIs: >/1 ]] }
      {refalrts::icUpdateFunc, 0, 1, 4},
      {refalrts::icReinitChar, 0, 'A', 8},
      {refalrts::icReinitBracket, 0, refalrts::ibCloseBracket, 9},
      {refalrts::icPushStack, 0, 0, 1},
      {refalrts::icPushStack, 0, 0, 0},
      {refalrts::icLinkBrackets, 7, 9, 0},
      {refalrts::icNextStep, 0, 0, 0},
      {refalrts::icProfilerStopSentence, 0, 0, 0},
      {refalrts::icOnFailGoTo, +10, 0, 0},
      // ( e.idx ) 'B' e.idx
      // </0 & Root/4 (/7 e.Accum#1/5 )/8 'B'/9 e.Text#1/2 >/1
      {refalrts::icSave, 0, 13, 2},
      {refalrts::icCharLeftSave, 9, static_cast<unsigned char>('B'), 13},
      // closed e.Accum#1 as range 5
      // closed e.Text#1 as range 13(2)
      //DEBUG: e.Accum#1: 5
      //DEBUG: e.Text#1: 2
      {refalrts::icEmptyResult, 0, 0, 0},
      //TRASH: {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 Reuse: & Name/4 AsIs: (/7 AsIs: e.Accum#1/5 HalfReuse: 'B'/8 HalfReuse: )/9 AsIs: e.Text#1/13(2) AsIs: >/1 ]] }
      {refalrts::icUpdateFunc, 0, 1, 4},
      {refalrts::icReinitChar, 0, 'B', 8},
      {refalrts::icReinitBracket, 0, refalrts::ibCloseBracket, 9},
      {refalrts::icPushStack, 0, 0, 1},
      {refalrts::icPushStack, 0, 0, 0},
      {refalrts::icLinkBrackets, 7, 9, 0},
      {refalrts::icNextStep, 0, 0, 0},
      {refalrts::icProfilerStopSentence, 0, 0, 0},
      {refalrts::icOnFailGoTo, +10, 0, 0},
      // ( e.idx ) 'C' e.idx
      // </0 & Root/4 (/7 e.Accum#1/5 )/8 'C'/9 e.Text#1/2 >/1
      {refalrts::icSave, 0, 13, 2},
      {refalrts::icCharLeftSave, 9, static_cast<unsigned char>('C'), 13},
      // closed e.Accum#1 as range 5
      // closed e.Text#1 as range 13(2)
      //DEBUG: e.Accum#1: 5
      //DEBUG: e.Text#1: 2
      {refalrts::icEmptyResult, 0, 0, 0},
      //TRASH: {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 Reuse: & Name/4 AsIs: (/7 AsIs: e.Accum#1/5 HalfReuse: 'C'/8 HalfReuse: )/9 AsIs: e.Text#1/13(2) AsIs: >/1 ]] }
      {refalrts::icUpdateFunc, 0, 1, 4},
      {refalrts::icReinitChar, 0, 'C', 8},
      {refalrts::icReinitBracket, 0, refalrts::ibCloseBracket, 9},
      {refalrts::icPushStack, 0, 0, 1},
      {refalrts::icPushStack, 0, 0, 0},
      {refalrts::icLinkBrackets, 7, 9, 0},
      {refalrts::icNextStep, 0, 0, 0},
      {refalrts::icProfilerStopSentence, 0, 0, 0},
      {refalrts::icOnFailGoTo, +10, 0, 0},
      // ( e.idx ) 'D' e.idx
      // </0 & Root/4 (/7 e.Accum#1/5 )/8 'D'/9 e.Text#1/2 >/1
      {refalrts::icSave, 0, 13, 2},
      {refalrts::icCharLeftSave, 9, static_cast<unsigned char>('D'), 13},
      // closed e.Accum#1 as range 5
      // closed e.Text#1 as range 13(2)
      //DEBUG: e.Accum#1: 5
      //DEBUG: e.Text#1: 2
      {refalrts::icEmptyResult, 0, 0, 0},
      //TRASH: {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 Reuse: & Name/4 AsIs: (/7 AsIs: e.Accum#1/5 HalfReuse: 'D'/8 HalfReuse: )/9 AsIs: e.Text#1/13(2) AsIs: >/1 ]] }
      {refalrts::icUpdateFunc, 0, 1, 4},
      {refalrts::icReinitChar, 0, 'D', 8},
      {refalrts::icReinitBracket, 0, refalrts::ibCloseBracket, 9},
      {refalrts::icPushStack, 0, 0, 1},
      {refalrts::icPushStack, 0, 0, 0},
      {refalrts::icLinkBrackets, 7, 9, 0},
      {refalrts::icNextStep, 0, 0, 0},
      {refalrts::icProfilerStopSentence, 0, 0, 0},
      {refalrts::icOnFailGoTo, +10, 0, 0},
      // ( e.idx ) 'E' e.idx
      // </0 & Root/4 (/7 e.Accum#1/5 )/8 'E'/9 e.Text#1/2 >/1
      {refalrts::icSave, 0, 13, 2},
      {refalrts::icCharLeftSave, 9, static_cast<unsigned char>('E'), 13},
      // closed e.Accum#1 as range 5
      // closed e.Text#1 as range 13(2)
      //DEBUG: e.Accum#1: 5
      //DEBUG: e.Text#1: 2
      {refalrts::icEmptyResult, 0, 0, 0},
      //TRASH: {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 Reuse: & Name/4 AsIs: (/7 AsIs: e.Accum#1/5 HalfReuse: 'E'/8 HalfReuse: )/9 AsIs: e.Text#1/13(2) AsIs: >/1 ]] }
      {refalrts::icUpdateFunc, 0, 1, 4},
      {refalrts::icReinitChar, 0, 'E', 8},
      {refalrts::icReinitBracket, 0, refalrts::ibCloseBracket, 9},
      {refalrts::icPushStack, 0, 0, 1},
      {refalrts::icPushStack, 0, 0, 0},
      {refalrts::icLinkBrackets, 7, 9, 0},
      {refalrts::icNextStep, 0, 0, 0},
      {refalrts::icProfilerStopSentence, 0, 0, 0},
      {refalrts::icOnFailGoTo, +10, 0, 0},
      // ( e.idx ) 'F' e.idx
      // </0 & Root/4 (/7 e.Accum#1/5 )/8 'F'/9 e.Text#1/2 >/1
      {refalrts::icSave, 0, 13, 2},
      {refalrts::icCharLeftSave, 9, static_cast<unsigned char>('F'), 13},
      // closed e.Accum#1 as range 5
      // closed e.Text#1 as range 13(2)
      //DEBUG: e.Accum#1: 5
      //DEBUG: e.Text#1: 2
      {refalrts::icEmptyResult, 0, 0, 0},
      //TRASH: {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 Reuse: & Name/4 AsIs: (/7 AsIs: e.Accum#1/5 HalfReuse: 'F'/8 HalfReuse: )/9 AsIs: e.Text#1/13(2) AsIs: >/1 ]] }
      {refalrts::icUpdateFunc, 0, 1, 4},
      {refalrts::icReinitChar, 0, 'F', 8},
      {refalrts::icReinitBracket, 0, refalrts::ibCloseBracket, 9},
      {refalrts::icPushStack, 0, 0, 1},
      {refalrts::icPushStack, 0, 0, 0},
      {refalrts::icLinkBrackets, 7, 9, 0},
      {refalrts::icNextStep, 0, 0, 0},
      {refalrts::icProfilerStopSentence, 0, 0, 0},
      {refalrts::icOnFailGoTo, +10, 0, 0},
      // ( e.idx ) 'G' e.idx
      // </0 & Root/4 (/7 e.Accum#1/5 )/8 'G'/9 e.Text#1/2 >/1
      {refalrts::icSave, 0, 13, 2},
      {refalrts::icCharLeftSave, 9, static_cast<unsigned char>('G'), 13},
      // closed e.Accum#1 as range 5
      // closed e.Text#1 as range 13(2)
      //DEBUG: e.Accum#1: 5
      //DEBUG: e.Text#1: 2
      {refalrts::icEmptyResult, 0, 0, 0},
      //TRASH: {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 Reuse: & Name/4 AsIs: (/7 AsIs: e.Accum#1/5 HalfReuse: 'G'/8 HalfReuse: )/9 AsIs: e.Text#1/13(2) AsIs: >/1 ]] }
      {refalrts::icUpdateFunc, 0, 1, 4},
      {refalrts::icReinitChar, 0, 'G', 8},
      {refalrts::icReinitBracket, 0, refalrts::ibCloseBracket, 9},
      {refalrts::icPushStack, 0, 0, 1},
      {refalrts::icPushStack, 0, 0, 0},
      {refalrts::icLinkBrackets, 7, 9, 0},
      {refalrts::icNextStep, 0, 0, 0},
      {refalrts::icProfilerStopSentence, 0, 0, 0},
      {refalrts::icOnFailGoTo, +10, 0, 0},
      // ( e.idx ) 'H' e.idx
      // </0 & Root/4 (/7 e.Accum#1/5 )/8 'H'/9 e.Text#1/2 >/1
      {refalrts::icSave, 0, 13, 2},
      {refalrts::icCharLeftSave, 9, static_cast<unsigned char>('H'), 13},
      // closed e.Accum#1 as range 5
      // closed e.Text#1 as range 13(2)
      //DEBUG: e.Accum#1: 5
      //DEBUG: e.Text#1: 2
      {refalrts::icEmptyResult, 0, 0, 0},
      //TRASH: {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 Reuse: & Name/4 AsIs: (/7 AsIs: e.Accum#1/5 HalfReuse: 'H'/8 HalfReuse: )/9 AsIs: e.Text#1/13(2) AsIs: >/1 ]] }
      {refalrts::icUpdateFunc, 0, 1, 4},
      {refalrts::icReinitChar, 0, 'H', 8},
      {refalrts::icReinitBracket, 0, refalrts::ibCloseBracket, 9},
      {refalrts::icPushStack, 0, 0, 1},
      {refalrts::icPushStack, 0, 0, 0},
      {refalrts::icLinkBrackets, 7, 9, 0},
      {refalrts::icNextStep, 0, 0, 0},
      {refalrts::icProfilerStopSentence, 0, 0, 0},
      {refalrts::icOnFailGoTo, +10, 0, 0},
      // ( e.idx ) 'I' e.idx
      // </0 & Root/4 (/7 e.Accum#1/5 )/8 'I'/9 e.Text#1/2 >/1
      {refalrts::icSave, 0, 13, 2},
      {refalrts::icCharLeftSave, 9, static_cast<unsigned char>('I'), 13},
      // closed e.Accum#1 as range 5
      // closed e.Text#1 as range 13(2)
      //DEBUG: e.Accum#1: 5
      //DEBUG: e.Text#1: 2
      {refalrts::icEmptyResult, 0, 0, 0},
      //TRASH: {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 Reuse: & Name/4 AsIs: (/7 AsIs: e.Accum#1/5 HalfReuse: 'I'/8 HalfReuse: )/9 AsIs: e.Text#1/13(2) AsIs: >/1 ]] }
      {refalrts::icUpdateFunc, 0, 1, 4},
      {refalrts::icReinitChar, 0, 'I', 8},
      {refalrts::icReinitBracket, 0, refalrts::ibCloseBracket, 9},
      {refalrts::icPushStack, 0, 0, 1},
      {refalrts::icPushStack, 0, 0, 0},
      {refalrts::icLinkBrackets, 7, 9, 0},
      {refalrts::icNextStep, 0, 0, 0},
      {refalrts::icProfilerStopSentence, 0, 0, 0},
      {refalrts::icOnFailGoTo, +10, 0, 0},
      // ( e.idx ) 'J' e.idx
      // </0 & Root/4 (/7 e.Accum#1/5 )/8 'J'/9 e.Text#1/2 >/1
      {refalrts::icSave, 0, 13, 2},
      {refalrts::icCharLeftSave, 9, static_cast<unsigned char>('J'), 13},
      // closed e.Accum#1 as range 5
      // closed e.Text#1 as range 13(2)
      //DEBUG: e.Accum#1: 5
      //DEBUG: e.Text#1: 2
      {refalrts::icEmptyResult, 0, 0, 0},
      //TRASH: {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 Reuse: & Name/4 AsIs: (/7 AsIs: e.Accum#1/5 HalfReuse: 'J'/8 HalfReuse: )/9 AsIs: e.Text#1/13(2) AsIs: >/1 ]] }
      {refalrts::icUpdateFunc, 0, 1, 4},
      {refalrts::icReinitChar, 0, 'J', 8},
      {refalrts::icReinitBracket, 0, refalrts::ibCloseBracket, 9},
      {refalrts::icPushStack, 0, 0, 1},
      {refalrts::icPushStack, 0, 0, 0},
      {refalrts::icLinkBrackets, 7, 9, 0},
      {refalrts::icNextStep, 0, 0, 0},
      {refalrts::icProfilerStopSentence, 0, 0, 0},
      {refalrts::icOnFailGoTo, +10, 0, 0},
      // ( e.idx ) 'K' e.idx
      // </0 & Root/4 (/7 e.Accum#1/5 )/8 'K'/9 e.Text#1/2 >/1
      {refalrts::icSave, 0, 13, 2},
      {refalrts::icCharLeftSave, 9, static_cast<unsigned char>('K'), 13},
      // closed e.Accum#1 as range 5
      // closed e.Text#1 as range 13(2)
      //DEBUG: e.Accum#1: 5
      //DEBUG: e.Text#1: 2
      {refalrts::icEmptyResult, 0, 0, 0},
      //TRASH: {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 Reuse: & Name/4 AsIs: (/7 AsIs: e.Accum#1/5 HalfReuse: 'K'/8 HalfReuse: )/9 AsIs: e.Text#1/13(2) AsIs: >/1 ]] }
      {refalrts::icUpdateFunc, 0, 1, 4},
      {refalrts::icReinitChar, 0, 'K', 8},
      {refalrts::icReinitBracket, 0, refalrts::ibCloseBracket, 9},
      {refalrts::icPushStack, 0, 0, 1},
      {refalrts::icPushStack, 0, 0, 0},
      {refalrts::icLinkBrackets, 7, 9, 0},
      {refalrts::icNextStep, 0, 0, 0},
      {refalrts::icProfilerStopSentence, 0, 0, 0},
      {refalrts::icOnFailGoTo, +10, 0, 0},
      // ( e.idx ) 'L' e.idx
      // </0 & Root/4 (/7 e.Accum#1/5 )/8 'L'/9 e.Text#1/2 >/1
      {refalrts::icSave, 0, 13, 2},
      {refalrts::icCharLeftSave, 9, static_cast<unsigned char>('L'), 13},
      // closed e.Accum#1 as range 5
      // closed e.Text#1 as range 13(2)
      //DEBUG: e.Accum#1: 5
      //DEBUG: e.Text#1: 2
      {refalrts::icEmptyResult, 0, 0, 0},
      //TRASH: {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 Reuse: & Name/4 AsIs: (/7 AsIs: e.Accum#1/5 HalfReuse: 'L'/8 HalfReuse: )/9 AsIs: e.Text#1/13(2) AsIs: >/1 ]] }
      {refalrts::icUpdateFunc, 0, 1, 4},
      {refalrts::icReinitChar, 0, 'L', 8},
      {refalrts::icReinitBracket, 0, refalrts::ibCloseBracket, 9},
      {refalrts::icPushStack, 0, 0, 1},
      {refalrts::icPushStack, 0, 0, 0},
      {refalrts::icLinkBrackets, 7, 9, 0},
      {refalrts::icNextStep, 0, 0, 0},
      {refalrts::icProfilerStopSentence, 0, 0, 0},
      {refalrts::icOnFailGoTo, +10, 0, 0},
      // ( e.idx ) 'M' e.idx
      // </0 & Root/4 (/7 e.Accum#1/5 )/8 'M'/9 e.Text#1/2 >/1
      {refalrts::icSave, 0, 13, 2},
      {refalrts::icCharLeftSave, 9, static_cast<unsigned char>('M'), 13},
      // closed e.Accum#1 as range 5
      // closed e.Text#1 as range 13(2)
      //DEBUG: e.Accum#1: 5
      //DEBUG: e.Text#1: 2
      {refalrts::icEmptyResult, 0, 0, 0},
      //TRASH: {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 Reuse: & Name/4 AsIs: (/7 AsIs: e.Accum#1/5 HalfReuse: 'M'/8 HalfReuse: )/9 AsIs: e.Text#1/13(2) AsIs: >/1 ]] }
      {refalrts::icUpdateFunc, 0, 1, 4},
      {refalrts::icReinitChar, 0, 'M', 8},
      {refalrts::icReinitBracket, 0, refalrts::ibCloseBracket, 9},
      {refalrts::icPushStack, 0, 0, 1},
      {refalrts::icPushStack, 0, 0, 0},
      {refalrts::icLinkBrackets, 7, 9, 0},
      {refalrts::icNextStep, 0, 0, 0},
      {refalrts::icProfilerStopSentence, 0, 0, 0},
      {refalrts::icOnFailGoTo, +10, 0, 0},
      // ( e.idx ) 'N' e.idx
      // </0 & Root/4 (/7 e.Accum#1/5 )/8 'N'/9 e.Text#1/2 >/1
      {refalrts::icSave, 0, 13, 2},
      {refalrts::icCharLeftSave, 9, static_cast<unsigned char>('N'), 13},
      // closed e.Accum#1 as range 5
      // closed e.Text#1 as range 13(2)
      //DEBUG: e.Accum#1: 5
      //DEBUG: e.Text#1: 2
      {refalrts::icEmptyResult, 0, 0, 0},
      //TRASH: {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 Reuse: & Name/4 AsIs: (/7 AsIs: e.Accum#1/5 HalfReuse: 'N'/8 HalfReuse: )/9 AsIs: e.Text#1/13(2) AsIs: >/1 ]] }
      {refalrts::icUpdateFunc, 0, 1, 4},
      {refalrts::icReinitChar, 0, 'N', 8},
      {refalrts::icReinitBracket, 0, refalrts::ibCloseBracket, 9},
      {refalrts::icPushStack, 0, 0, 1},
      {refalrts::icPushStack, 0, 0, 0},
      {refalrts::icLinkBrackets, 7, 9, 0},
      {refalrts::icNextStep, 0, 0, 0},
      {refalrts::icProfilerStopSentence, 0, 0, 0},
      {refalrts::icOnFailGoTo, +10, 0, 0},
      // ( e.idx ) 'O' e.idx
      // </0 & Root/4 (/7 e.Accum#1/5 )/8 'O'/9 e.Text#1/2 >/1
      {refalrts::icSave, 0, 13, 2},
      {refalrts::icCharLeftSave, 9, static_cast<unsigned char>('O'), 13},
      // closed e.Accum#1 as range 5
      // closed e.Text#1 as range 13(2)
      //DEBUG: e.Accum#1: 5
      //DEBUG: e.Text#1: 2
      {refalrts::icEmptyResult, 0, 0, 0},
      //TRASH: {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 Reuse: & Name/4 AsIs: (/7 AsIs: e.Accum#1/5 HalfReuse: 'O'/8 HalfReuse: )/9 AsIs: e.Text#1/13(2) AsIs: >/1 ]] }
      {refalrts::icUpdateFunc, 0, 1, 4},
      {refalrts::icReinitChar, 0, 'O', 8},
      {refalrts::icReinitBracket, 0, refalrts::ibCloseBracket, 9},
      {refalrts::icPushStack, 0, 0, 1},
      {refalrts::icPushStack, 0, 0, 0},
      {refalrts::icLinkBrackets, 7, 9, 0},
      {refalrts::icNextStep, 0, 0, 0},
      {refalrts::icProfilerStopSentence, 0, 0, 0},
      {refalrts::icOnFailGoTo, +10, 0, 0},
      // ( e.idx ) 'P' e.idx
      // </0 & Root/4 (/7 e.Accum#1/5 )/8 'P'/9 e.Text#1/2 >/1
      {refalrts::icSave, 0, 13, 2},
      {refalrts::icCharLeftSave, 9, static_cast<unsigned char>('P'), 13},
      // closed e.Accum#1 as range 5
      // closed e.Text#1 as range 13(2)
      //DEBUG: e.Accum#1: 5
      //DEBUG: e.Text#1: 2
      {refalrts::icEmptyResult, 0, 0, 0},
      //TRASH: {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 Reuse: & Name/4 AsIs: (/7 AsIs: e.Accum#1/5 HalfReuse: 'P'/8 HalfReuse: )/9 AsIs: e.Text#1/13(2) AsIs: >/1 ]] }
      {refalrts::icUpdateFunc, 0, 1, 4},
      {refalrts::icReinitChar, 0, 'P', 8},
      {refalrts::icReinitBracket, 0, refalrts::ibCloseBracket, 9},
      {refalrts::icPushStack, 0, 0, 1},
      {refalrts::icPushStack, 0, 0, 0},
      {refalrts::icLinkBrackets, 7, 9, 0},
      {refalrts::icNextStep, 0, 0, 0},
      {refalrts::icProfilerStopSentence, 0, 0, 0},
      {refalrts::icOnFailGoTo, +10, 0, 0},
      // ( e.idx ) 'Q' e.idx
      // </0 & Root/4 (/7 e.Accum#1/5 )/8 'Q'/9 e.Text#1/2 >/1
      {refalrts::icSave, 0, 13, 2},
      {refalrts::icCharLeftSave, 9, static_cast<unsigned char>('Q'), 13},
      // closed e.Accum#1 as range 5
      // closed e.Text#1 as range 13(2)
      //DEBUG: e.Accum#1: 5
      //DEBUG: e.Text#1: 2
      {refalrts::icEmptyResult, 0, 0, 0},
      //TRASH: {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 Reuse: & Name/4 AsIs: (/7 AsIs: e.Accum#1/5 HalfReuse: 'Q'/8 HalfReuse: )/9 AsIs: e.Text#1/13(2) AsIs: >/1 ]] }
      {refalrts::icUpdateFunc, 0, 1, 4},
      {refalrts::icReinitChar, 0, 'Q', 8},
      {refalrts::icReinitBracket, 0, refalrts::ibCloseBracket, 9},
      {refalrts::icPushStack, 0, 0, 1},
      {refalrts::icPushStack, 0, 0, 0},
      {refalrts::icLinkBrackets, 7, 9, 0},
      {refalrts::icNextStep, 0, 0, 0},
      {refalrts::icProfilerStopSentence, 0, 0, 0},
      {refalrts::icOnFailGoTo, +10, 0, 0},
      // ( e.idx ) 'R' e.idx
      // </0 & Root/4 (/7 e.Accum#1/5 )/8 'R'/9 e.Text#1/2 >/1
      {refalrts::icSave, 0, 13, 2},
      {refalrts::icCharLeftSave, 9, static_cast<unsigned char>('R'), 13},
      // closed e.Accum#1 as range 5
      // closed e.Text#1 as range 13(2)
      //DEBUG: e.Accum#1: 5
      //DEBUG: e.Text#1: 2
      {refalrts::icEmptyResult, 0, 0, 0},
      //TRASH: {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 Reuse: & Name/4 AsIs: (/7 AsIs: e.Accum#1/5 HalfReuse: 'R'/8 HalfReuse: )/9 AsIs: e.Text#1/13(2) AsIs: >/1 ]] }
      {refalrts::icUpdateFunc, 0, 1, 4},
      {refalrts::icReinitChar, 0, 'R', 8},
      {refalrts::icReinitBracket, 0, refalrts::ibCloseBracket, 9},
      {refalrts::icPushStack, 0, 0, 1},
      {refalrts::icPushStack, 0, 0, 0},
      {refalrts::icLinkBrackets, 7, 9, 0},
      {refalrts::icNextStep, 0, 0, 0},
      {refalrts::icProfilerStopSentence, 0, 0, 0},
      {refalrts::icOnFailGoTo, +10, 0, 0},
      // ( e.idx ) 'S' e.idx
      // </0 & Root/4 (/7 e.Accum#1/5 )/8 'S'/9 e.Text#1/2 >/1
      {refalrts::icSave, 0, 13, 2},
      {refalrts::icCharLeftSave, 9, static_cast<unsigned char>('S'), 13},
      // closed e.Accum#1 as range 5
      // closed e.Text#1 as range 13(2)
      //DEBUG: e.Accum#1: 5
      //DEBUG: e.Text#1: 2
      {refalrts::icEmptyResult, 0, 0, 0},
      //TRASH: {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 Reuse: & Name/4 AsIs: (/7 AsIs: e.Accum#1/5 HalfReuse: 'S'/8 HalfReuse: )/9 AsIs: e.Text#1/13(2) AsIs: >/1 ]] }
      {refalrts::icUpdateFunc, 0, 1, 4},
      {refalrts::icReinitChar, 0, 'S', 8},
      {refalrts::icReinitBracket, 0, refalrts::ibCloseBracket, 9},
      {refalrts::icPushStack, 0, 0, 1},
      {refalrts::icPushStack, 0, 0, 0},
      {refalrts::icLinkBrackets, 7, 9, 0},
      {refalrts::icNextStep, 0, 0, 0},
      {refalrts::icProfilerStopSentence, 0, 0, 0},
      {refalrts::icOnFailGoTo, +10, 0, 0},
      // ( e.idx ) 'T' e.idx
      // </0 & Root/4 (/7 e.Accum#1/5 )/8 'T'/9 e.Text#1/2 >/1
      {refalrts::icSave, 0, 13, 2},
      {refalrts::icCharLeftSave, 9, static_cast<unsigned char>('T'), 13},
      // closed e.Accum#1 as range 5
      // closed e.Text#1 as range 13(2)
      //DEBUG: e.Accum#1: 5
      //DEBUG: e.Text#1: 2
      {refalrts::icEmptyResult, 0, 0, 0},
      //TRASH: {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 Reuse: & Name/4 AsIs: (/7 AsIs: e.Accum#1/5 HalfReuse: 'T'/8 HalfReuse: )/9 AsIs: e.Text#1/13(2) AsIs: >/1 ]] }
      {refalrts::icUpdateFunc, 0, 1, 4},
      {refalrts::icReinitChar, 0, 'T', 8},
      {refalrts::icReinitBracket, 0, refalrts::ibCloseBracket, 9},
      {refalrts::icPushStack, 0, 0, 1},
      {refalrts::icPushStack, 0, 0, 0},
      {refalrts::icLinkBrackets, 7, 9, 0},
      {refalrts::icNextStep, 0, 0, 0},
      {refalrts::icProfilerStopSentence, 0, 0, 0},
      {refalrts::icOnFailGoTo, +10, 0, 0},
      // ( e.idx ) 'U' e.idx
      // </0 & Root/4 (/7 e.Accum#1/5 )/8 'U'/9 e.Text#1/2 >/1
      {refalrts::icSave, 0, 13, 2},
      {refalrts::icCharLeftSave, 9, static_cast<unsigned char>('U'), 13},
      // closed e.Accum#1 as range 5
      // closed e.Text#1 as range 13(2)
      //DEBUG: e.Accum#1: 5
      //DEBUG: e.Text#1: 2
      {refalrts::icEmptyResult, 0, 0, 0},
      //TRASH: {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 Reuse: & Name/4 AsIs: (/7 AsIs: e.Accum#1/5 HalfReuse: 'U'/8 HalfReuse: )/9 AsIs: e.Text#1/13(2) AsIs: >/1 ]] }
      {refalrts::icUpdateFunc, 0, 1, 4},
      {refalrts::icReinitChar, 0, 'U', 8},
      {refalrts::icReinitBracket, 0, refalrts::ibCloseBracket, 9},
      {refalrts::icPushStack, 0, 0, 1},
      {refalrts::icPushStack, 0, 0, 0},
      {refalrts::icLinkBrackets, 7, 9, 0},
      {refalrts::icNextStep, 0, 0, 0},
      {refalrts::icProfilerStopSentence, 0, 0, 0},
      {refalrts::icOnFailGoTo, +10, 0, 0},
      // ( e.idx ) 'V' e.idx
      // </0 & Root/4 (/7 e.Accum#1/5 )/8 'V'/9 e.Text#1/2 >/1
      {refalrts::icSave, 0, 13, 2},
      {refalrts::icCharLeftSave, 9, static_cast<unsigned char>('V'), 13},
      // closed e.Accum#1 as range 5
      // closed e.Text#1 as range 13(2)
      //DEBUG: e.Accum#1: 5
      //DEBUG: e.Text#1: 2
      {refalrts::icEmptyResult, 0, 0, 0},
      //TRASH: {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 Reuse: & Name/4 AsIs: (/7 AsIs: e.Accum#1/5 HalfReuse: 'V'/8 HalfReuse: )/9 AsIs: e.Text#1/13(2) AsIs: >/1 ]] }
      {refalrts::icUpdateFunc, 0, 1, 4},
      {refalrts::icReinitChar, 0, 'V', 8},
      {refalrts::icReinitBracket, 0, refalrts::ibCloseBracket, 9},
      {refalrts::icPushStack, 0, 0, 1},
      {refalrts::icPushStack, 0, 0, 0},
      {refalrts::icLinkBrackets, 7, 9, 0},
      {refalrts::icNextStep, 0, 0, 0},
      {refalrts::icProfilerStopSentence, 0, 0, 0},
      {refalrts::icOnFailGoTo, +10, 0, 0},
      // ( e.idx ) 'W' e.idx
      // </0 & Root/4 (/7 e.Accum#1/5 )/8 'W'/9 e.Text#1/2 >/1
      {refalrts::icSave, 0, 13, 2},
      {refalrts::icCharLeftSave, 9, static_cast<unsigned char>('W'), 13},
      // closed e.Accum#1 as range 5
      // closed e.Text#1 as range 13(2)
      //DEBUG: e.Accum#1: 5
      //DEBUG: e.Text#1: 2
      {refalrts::icEmptyResult, 0, 0, 0},
      //TRASH: {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 Reuse: & Name/4 AsIs: (/7 AsIs: e.Accum#1/5 HalfReuse: 'W'/8 HalfReuse: )/9 AsIs: e.Text#1/13(2) AsIs: >/1 ]] }
      {refalrts::icUpdateFunc, 0, 1, 4},
      {refalrts::icReinitChar, 0, 'W', 8},
      {refalrts::icReinitBracket, 0, refalrts::ibCloseBracket, 9},
      {refalrts::icPushStack, 0, 0, 1},
      {refalrts::icPushStack, 0, 0, 0},
      {refalrts::icLinkBrackets, 7, 9, 0},
      {refalrts::icNextStep, 0, 0, 0},
      {refalrts::icProfilerStopSentence, 0, 0, 0},
      {refalrts::icOnFailGoTo, +10, 0, 0},
      // ( e.idx ) 'X' e.idx
      // </0 & Root/4 (/7 e.Accum#1/5 )/8 'X'/9 e.Text#1/2 >/1
      {refalrts::icSave, 0, 13, 2},
      {refalrts::icCharLeftSave, 9, static_cast<unsigned char>('X'), 13},
      // closed e.Accum#1 as range 5
      // closed e.Text#1 as range 13(2)
      //DEBUG: e.Accum#1: 5
      //DEBUG: e.Text#1: 2
      {refalrts::icEmptyResult, 0, 0, 0},
      //TRASH: {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 Reuse: & Name/4 AsIs: (/7 AsIs: e.Accum#1/5 HalfReuse: 'X'/8 HalfReuse: )/9 AsIs: e.Text#1/13(2) AsIs: >/1 ]] }
      {refalrts::icUpdateFunc, 0, 1, 4},
      {refalrts::icReinitChar, 0, 'X', 8},
      {refalrts::icReinitBracket, 0, refalrts::ibCloseBracket, 9},
      {refalrts::icPushStack, 0, 0, 1},
      {refalrts::icPushStack, 0, 0, 0},
      {refalrts::icLinkBrackets, 7, 9, 0},
      {refalrts::icNextStep, 0, 0, 0},
      {refalrts::icProfilerStopSentence, 0, 0, 0},
      {refalrts::icOnFailGoTo, +10, 0, 0},
      // ( e.idx ) 'Y' e.idx
      // </0 & Root/4 (/7 e.Accum#1/5 )/8 'Y'/9 e.Text#1/2 >/1
      {refalrts::icSave, 0, 13, 2},
      {refalrts::icCharLeftSave, 9, static_cast<unsigned char>('Y'), 13},
      // closed e.Accum#1 as range 5
      // closed e.Text#1 as range 13(2)
      //DEBUG: e.Accum#1: 5
      //DEBUG: e.Text#1: 2
      {refalrts::icEmptyResult, 0, 0, 0},
      //TRASH: {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 Reuse: & Name/4 AsIs: (/7 AsIs: e.Accum#1/5 HalfReuse: 'Y'/8 HalfReuse: )/9 AsIs: e.Text#1/13(2) AsIs: >/1 ]] }
      {refalrts::icUpdateFunc, 0, 1, 4},
      {refalrts::icReinitChar, 0, 'Y', 8},
      {refalrts::icReinitBracket, 0, refalrts::ibCloseBracket, 9},
      {refalrts::icPushStack, 0, 0, 1},
      {refalrts::icPushStack, 0, 0, 0},
      {refalrts::icLinkBrackets, 7, 9, 0},
      {refalrts::icNextStep, 0, 0, 0},
      {refalrts::icProfilerStopSentence, 0, 0, 0},
      {refalrts::icOnFailGoTo, +10, 0, 0},
      // ( e.idx ) 'Z' e.idx
      // </0 & Root/4 (/7 e.Accum#1/5 )/8 'Z'/9 e.Text#1/2 >/1
      {refalrts::icSave, 0, 13, 2},
      {refalrts::icCharLeftSave, 9, static_cast<unsigned char>('Z'), 13},
      // closed e.Accum#1 as range 5
      // closed e.Text#1 as range 13(2)
      //DEBUG: e.Accum#1: 5
      //DEBUG: e.Text#1: 2
      {refalrts::icEmptyResult, 0, 0, 0},
      //TRASH: {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 Reuse: & Name/4 AsIs: (/7 AsIs: e.Accum#1/5 HalfReuse: 'Z'/8 HalfReuse: )/9 AsIs: e.Text#1/13(2) AsIs: >/1 ]] }
      {refalrts::icUpdateFunc, 0, 1, 4},
      {refalrts::icReinitChar, 0, 'Z', 8},
      {refalrts::icReinitBracket, 0, refalrts::ibCloseBracket, 9},
      {refalrts::icPushStack, 0, 0, 1},
      {refalrts::icPushStack, 0, 0, 0},
      {refalrts::icLinkBrackets, 7, 9, 0},
      {refalrts::icNextStep, 0, 0, 0},
      {refalrts::icProfilerStopSentence, 0, 0, 0},
      {refalrts::icOnFailGoTo, +19, 0, 0},
      // ( e.idx ) '<' e.idx
      // </0 & Root/4 (/7 e.Accum#1/5 )/8 '<'/9 e.Text#1/2 >/1
      {refalrts::icSave, 0, 13, 2},
      {refalrts::icCharLeftSave, 9, static_cast<unsigned char>('<'), 13},
      // closed e.Accum#1 as range 5
      // closed e.Text#1 as range 13(2)
      //DEBUG: e.Accum#1: 5
      //DEBUG: e.Text#1: 2
      {refalrts::icEmptyResult, 0, 0, 0},
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ } Tile{ AsIs: (/7 } # TStateStart/10 Tile{ AsIs: e.Accum#1/5 } '<'/11 )/12 Tile{ AsIs: </0 AsIs: & Root/4 } Tile{ HalfReuse: (/8 HalfReuse: )/9 AsIs: e.Text#1/13(2) AsIs: >/1 ]] }
      {refalrts::icAllocIdent, 0, 4, 10},
      {refalrts::icAllocChar, 0, '<', 11},
      {refalrts::icAllocBracket, 0, refalrts::ibCloseBracket, 12},
      {refalrts::icReinitBracket, 0, refalrts::ibOpenBracket, 8},
      {refalrts::icReinitBracket, 0, refalrts::ibCloseBracket, 9},
      {refalrts::icPushStack, 0, 0, 1},
      {refalrts::icPushStack, 0, 0, 0},
      {refalrts::icLinkBrackets, 8, 9, 0},
      {refalrts::icLinkBrackets, 7, 12, 0},
      {refalrts::icSetRes, 0, 0, 8},
      {refalrts::icSpliceTile, 0, 4, 0},
      {refalrts::icSpliceTile, 11, 12, 0},
      {refalrts::icSpliceEVar, 0, 0, 5},
      {refalrts::icSpliceTile, 10, 10, 0},
      {refalrts::icSpliceTile, 7, 7, 0},
      {refalrts::icNextStep, 0, 0, 0},
      {refalrts::icProfilerStopSentence, 0, 0, 0},
      {refalrts::icOnFailGoTo, +19, 0, 0},
      // ( e.idx ) ',' e.idx
      // </0 & Root/4 (/7 e.Accum#1/5 )/8 ','/9 e.Text#1/2 >/1
      {refalrts::icSave, 0, 13, 2},
      {refalrts::icCharLeftSave, 9, static_cast<unsigned char>(','), 13},
      // closed e.Accum#1 as range 5
      // closed e.Text#1 as range 13(2)
      //DEBUG: e.Accum#1: 5
      //DEBUG: e.Text#1: 2
      {refalrts::icEmptyResult, 0, 0, 0},
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ } Tile{ AsIs: (/7 } # TComma/10 Tile{ AsIs: e.Accum#1/5 } ','/11 )/12 Tile{ AsIs: </0 AsIs: & Root/4 } Tile{ HalfReuse: (/8 HalfReuse: )/9 AsIs: e.Text#1/13(2) AsIs: >/1 ]] }
      {refalrts::icAllocIdent, 0, 3, 10},
      {refalrts::icAllocChar, 0, ',', 11},
      {refalrts::icAllocBracket, 0, refalrts::ibCloseBracket, 12},
      {refalrts::icReinitBracket, 0, refalrts::ibOpenBracket, 8},
      {refalrts::icReinitBracket, 0, refalrts::ibCloseBracket, 9},
      {refalrts::icPushStack, 0, 0, 1},
      {refalrts::icPushStack, 0, 0, 0},
      {refalrts::icLinkBrackets, 8, 9, 0},
      {refalrts::icLinkBrackets, 7, 12, 0},
      {refalrts::icSetRes, 0, 0, 8},
      {refalrts::icSpliceTile, 0, 4, 0},
      {refalrts::icSpliceTile, 11, 12, 0},
      {refalrts::icSpliceEVar, 0, 0, 5},
      {refalrts::icSpliceTile, 10, 10, 0},
      {refalrts::icSpliceTile, 7, 7, 0},
      {refalrts::icNextStep, 0, 0, 0},
      {refalrts::icProfilerStopSentence, 0, 0, 0},
      {refalrts::icOnFailGoTo, +19, 0, 0},
      // ( e.idx ) '>' e.idx
      // </0 & Root/4 (/7 e.Accum#1/5 )/8 '>'/9 e.Text#1/2 >/1
      {refalrts::icSave, 0, 13, 2},
      {refalrts::icCharLeftSave, 9, static_cast<unsigned char>('>'), 13},
      // closed e.Accum#1 as range 5
      // closed e.Text#1 as range 13(2)
      //DEBUG: e.Accum#1: 5
      //DEBUG: e.Text#1: 2
      {refalrts::icEmptyResult, 0, 0, 0},
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ } Tile{ AsIs: (/7 } # TStateEnd/10 Tile{ AsIs: e.Accum#1/5 } '>'/11 )/12 Tile{ AsIs: </0 AsIs: & Root/4 } Tile{ HalfReuse: (/8 HalfReuse: )/9 AsIs: e.Text#1/13(2) AsIs: >/1 ]] }
      {refalrts::icAllocIdent, 0, 2, 10},
      {refalrts::icAllocChar, 0, '>', 11},
      {refalrts::icAllocBracket, 0, refalrts::ibCloseBracket, 12},
      {refalrts::icReinitBracket, 0, refalrts::ibOpenBracket, 8},
      {refalrts::icReinitBracket, 0, refalrts::ibCloseBracket, 9},
      {refalrts::icPushStack, 0, 0, 1},
      {refalrts::icPushStack, 0, 0, 0},
      {refalrts::icLinkBrackets, 8, 9, 0},
      {refalrts::icLinkBrackets, 7, 12, 0},
      {refalrts::icSetRes, 0, 0, 8},
      {refalrts::icSpliceTile, 0, 4, 0},
      {refalrts::icSpliceTile, 11, 12, 0},
      {refalrts::icSpliceEVar, 0, 0, 5},
      {refalrts::icSpliceTile, 10, 10, 0},
      {refalrts::icSpliceTile, 7, 7, 0},
      {refalrts::icNextStep, 0, 0, 0},
      {refalrts::icProfilerStopSentence, 0, 0, 0},
      {refalrts::icOnFailGoTo, +12, 0, 0},
      // ( e.idx ) '\"' e.idx
      // </0 & Root/4 (/7 e.Accum#1/5 )/8 '\"'/9 e.Text#1/2 >/1
      {refalrts::icSave, 0, 13, 2},
      {refalrts::icCharLeftSave, 9, static_cast<unsigned char>('\"'), 13},
      // closed e.Accum#1 as range 5
      // closed e.Text#1 as range 13(2)
      //DEBUG: e.Accum#1: 5
      //DEBUG: e.Text#1: 2
      {refalrts::icEmptyResult, 0, 0, 0},
      //TRASH: {REMOVED TILE} (/7 e.Accum#1/5 {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 Reuse: & ErrorMessage/4 } Tile{ HalfReuse: (/8 HalfReuse: )/9 AsIs: e.Text#1/13(2) AsIs: >/1 ]] }
      {refalrts::icUpdateFunc, 0, 0, 4},
      {refalrts::icReinitBracket, 0, refalrts::ibOpenBracket, 8},
      {refalrts::icReinitBracket, 0, refalrts::ibCloseBracket, 9},
      {refalrts::icPushStack, 0, 0, 1},
      {refalrts::icPushStack, 0, 0, 0},
      {refalrts::icLinkBrackets, 8, 9, 0},
      {refalrts::icSetRes, 0, 0, 8},
      {refalrts::icTrash, 0, 0, 4},
      {refalrts::icNextStep, 0, 0, 0},
      {refalrts::icProfilerStopSentence, 0, 0, 0},
      {refalrts::icOnFailGoTo, +19, 0, 0},
      // ( e.idx ) s.idx e.idx
      // </0 & Root/4 (/7 e.Accum#1/5 )/8 s.Any#1/9 e.Text#1/2 >/1
      // closed e.Accum#1 as range 5
      {refalrts::icSave, 0, 13, 2},
      {refalrts::icsVarLeft, 0, 9, 13},
      // closed e.Text#1 as range 13(2)
      //DEBUG: e.Accum#1: 5
      //DEBUG: s.Any#1: 9
      //DEBUG: e.Text#1: 2
      {refalrts::icEmptyResult, 0, 0, 0},
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ } (/10 # TUnexpecteChar/11 Tile{ AsIs: e.Accum#1/5 } Tile{ AsIs: s.Any#1/9 } Tile{ AsIs: )/8 } Tile{ AsIs: </0 AsIs: & Root/4 AsIs: (/7 } )/12 Tile{ AsIs: e.Text#1/13(2) } Tile{ AsIs: >/1 ]] }
      {refalrts::icAllocBracket, 0, refalrts::ibOpenBracket, 10},
      {refalrts::icAllocIdent, 0, 1, 11},
      {refalrts::icAllocBracket, 0, refalrts::ibCloseBracket, 12},
      {refalrts::icPushStack, 0, 0, 1},
      {refalrts::icPushStack, 0, 0, 0},
      {refalrts::icLinkBrackets, 7, 12, 0},
      {refalrts::icLinkBrackets, 10, 8, 0},
      {refalrts::icSetRes, 0, 0, 1},
      {refalrts::icSpliceEVar, 0, 0, 13},
      {refalrts::icSpliceTile, 12, 12, 0},
      {refalrts::icSpliceTile, 0, 7, 0},
      {refalrts::icSpliceTile, 8, 8, 0},
      {refalrts::icSpliceTile, 9, 9, 0},
      {refalrts::icSpliceEVar, 0, 0, 5},
      {refalrts::icSpliceTile, 10, 11, 0},
      {refalrts::icNextStep, 0, 0, 0},
      {refalrts::icProfilerStopSentence, 0, 0, 0},
      // ( e.idx )
      // </0 & Root/4 (/7 e.Accum#1/5 )/8 >/1
      {refalrts::icEmpty, 0, 0, 2},
      // closed e.Accum#1 as range 5
      //DEBUG: e.Accum#1: 5
      {refalrts::icEmptyResult, 0, 0, 0},
      //TRASH: {REMOVED TILE} </0 {REMOVED TILE} >/1 {REMOVED TILE}
      //RESULT: Tile{ [[ } Tile{ HalfReuse: (/4 HalfReuse: # TEOF/7 AsIs: e.Accum#1/5 AsIs: )/8 } Tile{ ]] }
      {refalrts::icReinitBracket, 0, refalrts::ibOpenBracket, 4},
      {refalrts::icReinitIdent, 0, 0, 7},
      {refalrts::icLinkBrackets, 4, 8, 0},
      {refalrts::icSetResRightEdge, 0, 0, 0},
      {refalrts::icSpliceTile, 4, 8, 0},
      {refalrts::icTrashLeftEdge, 0, 0, 0},
      {refalrts::icNextStep, 0, 0, 0},
      {refalrts::icEnd, 0, 0, 0}
    };
  } // namespace scope_Root

} // unnamed namespace

namespace /* unnamed */ {
refalrts::RASLFunction descr_Root(
  "Root",
  scope_Root::raa,
  scope_Root::functions,
  scope_Root::idents,
  scope_Root::numbers,
  scope_Root::strings,
  scope_Root::filename
);
refalrts::RefalFunction& Root = descr_Root;

} // unnamed namespace

#else
static refalrts::FnResult func_Root(refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  refalrts::this_is_generated_function();
  // issue here memory for vars with 15 elems
  refalrts::Iter context[15];
  refalrts::zeros( context, 15 );
  //FAST GEN: e.$
  //GLOBAL GEN: ( e.$ ) e.$
  // </0 & Root/4 (/7 e.idxB#0/5 )/8 e.idxT#0/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  context[5] = 0;
  context[6] = 0;
  context[7] = refalrts::brackets_left( context[5], context[6], context[2], context[3] );
  if( ! context[7] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[7], context[8]);
  // closed e.idxB#0 as range 5
  // closed e.idxT#0 as range 2
  do {
    // ( e.idx ) ' ' e.idx
    // </0 & Root/4 (/7 e.Accum#1/5 )/8 ' '/9 e.Text#1/2 >/1
    context[13] = context[2];
    context[14] = context[3];
    context[9] = refalrts::char_left( ' ', context[13], context[14] );
    if( ! context[9] )
      continue;
    // closed e.Accum#1 as range 5
    // closed e.Text#1 as range 13(2)
    //DEBUG: e.Accum#1: 5
    //DEBUG: e.Text#1: 2

    refalrts::reset_allocator();
    //TRASH: {REMOVED TILE} e.Accum#1/5 )/8 {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 AsIs: & Root/4 AsIs: (/7 } Tile{ HalfReuse: )/9 AsIs: e.Text#1/13(2) AsIs: >/1 ]] }
    refalrts::reinit_close_bracket( context[9] );
    refalrts::push_stack( context[1] );
    refalrts::push_stack( context[0] );
    refalrts::link_brackets( context[7], context[9] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[9];
    refalrts::use( res );
    refalrts::splice_to_freelist_open( context[7], res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence();

  do {
    // ( e.idx ) '\t' e.idx
    // </0 & Root/4 (/7 e.Accum#1/5 )/8 '\t'/9 e.Text#1/2 >/1
    context[13] = context[2];
    context[14] = context[3];
    context[9] = refalrts::char_left( '\t', context[13], context[14] );
    if( ! context[9] )
      continue;
    // closed e.Accum#1 as range 5
    // closed e.Text#1 as range 13(2)
    //DEBUG: e.Accum#1: 5
    //DEBUG: e.Text#1: 2

    refalrts::reset_allocator();
    //TRASH: {REMOVED TILE} e.Accum#1/5 )/8 {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 AsIs: & Root/4 AsIs: (/7 } Tile{ HalfReuse: )/9 AsIs: e.Text#1/13(2) AsIs: >/1 ]] }
    refalrts::reinit_close_bracket( context[9] );
    refalrts::push_stack( context[1] );
    refalrts::push_stack( context[0] );
    refalrts::link_brackets( context[7], context[9] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[9];
    refalrts::use( res );
    refalrts::splice_to_freelist_open( context[7], res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence();

  do {
    // ( e.idx ) '\r' e.idx
    // </0 & Root/4 (/7 e.Accum#1/5 )/8 '\r'/9 e.Text#1/2 >/1
    context[13] = context[2];
    context[14] = context[3];
    context[9] = refalrts::char_left( '\r', context[13], context[14] );
    if( ! context[9] )
      continue;
    // closed e.Accum#1 as range 5
    // closed e.Text#1 as range 13(2)
    //DEBUG: e.Accum#1: 5
    //DEBUG: e.Text#1: 2

    refalrts::reset_allocator();
    //TRASH: {REMOVED TILE} e.Accum#1/5 )/8 {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 AsIs: & Root/4 AsIs: (/7 } Tile{ HalfReuse: )/9 AsIs: e.Text#1/13(2) AsIs: >/1 ]] }
    refalrts::reinit_close_bracket( context[9] );
    refalrts::push_stack( context[1] );
    refalrts::push_stack( context[0] );
    refalrts::link_brackets( context[7], context[9] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[9];
    refalrts::use( res );
    refalrts::splice_to_freelist_open( context[7], res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence();

  do {
    // ( e.idx ) '\n' e.idx
    // </0 & Root/4 (/7 e.Accum#1/5 )/8 '\n'/9 e.Text#1/2 >/1
    context[13] = context[2];
    context[14] = context[3];
    context[9] = refalrts::char_left( '\n', context[13], context[14] );
    if( ! context[9] )
      continue;
    // closed e.Accum#1 as range 5
    // closed e.Text#1 as range 13(2)
    //DEBUG: e.Accum#1: 5
    //DEBUG: e.Text#1: 2

    refalrts::reset_allocator();
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ AsIs: (/7 } # TNewLine/10 Tile{ AsIs: e.Accum#1/5 } '\n'/11 )/12 Tile{ AsIs: </0 AsIs: & Root/4 } Tile{ HalfReuse: (/8 HalfReuse: )/9 AsIs: e.Text#1/13(2) AsIs: >/1 ]] }
    if( ! refalrts::alloc_ident( context[10], & ident_TNewLine<int>::name ) )
      return refalrts::cNoMemory;
    if( ! refalrts::alloc_char( context[11], '\n' ) )
      return refalrts::cNoMemory;
    if( ! refalrts::alloc_close_bracket( context[12] ) )
      return refalrts::cNoMemory;
    refalrts::reinit_open_bracket( context[8] );
    refalrts::reinit_close_bracket( context[9] );
    refalrts::push_stack( context[1] );
    refalrts::push_stack( context[0] );
    refalrts::link_brackets( context[8], context[9] );
    refalrts::link_brackets( context[7], context[12] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[8];
    res = refalrts::splice_evar( res, context[0], context[4] );
    res = refalrts::splice_evar( res, context[11], context[12] );
    res = refalrts::splice_evar( res, context[5], context[6] );
    res = refalrts::splice_evar( res, context[10], context[10] );
    res = refalrts::splice_evar( res, context[7], context[7] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence();

  do {
    // ( e.idx ) '/' e.idx
    // </0 & Root/4 (/7 e.Accum#1/5 )/8 '/'/9 e.Text#1/2 >/1
    context[13] = context[2];
    context[14] = context[3];
    context[9] = refalrts::char_left( '/', context[13], context[14] );
    if( ! context[9] )
      continue;
    // closed e.Accum#1 as range 5
    // closed e.Text#1 as range 13(2)
    //DEBUG: e.Accum#1: 5
    //DEBUG: e.Text#1: 2

    refalrts::reset_allocator();
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ HalfReuse: (/0 HalfReuse: # TStartRegexp/4 } Tile{ AsIs: e.Accum#1/5 } '/'/10 Tile{ HalfReuse: )/7 } </11 & ReadRegexp/12 Tile{ HalfReuse: (/8 HalfReuse: )/9 AsIs: e.Text#1/13(2) AsIs: >/1 ]] }
    if( ! refalrts::alloc_char( context[10], '/' ) )
      return refalrts::cNoMemory;
    if( ! refalrts::alloc_open_call( context[11] ) )
      return refalrts::cNoMemory;
    if( ! refalrts::alloc_name( context[12], & ReadRegexp ) )
      return refalrts::cNoMemory;
    refalrts::reinit_open_bracket( context[0] );
    refalrts::reinit_ident( context[4], & ident_TStartRegexp<int>::name );
    refalrts::reinit_close_bracket( context[7] );
    refalrts::reinit_open_bracket( context[8] );
    refalrts::reinit_close_bracket( context[9] );
    refalrts::push_stack( context[1] );
    refalrts::push_stack( context[11] );
    refalrts::link_brackets( context[8], context[9] );
    refalrts::link_brackets( context[0], context[7] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[8];
    res = refalrts::splice_evar( res, context[11], context[12] );
    res = refalrts::splice_evar( res, context[7], context[7] );
    res = refalrts::splice_evar( res, context[10], context[10] );
    res = refalrts::splice_evar( res, context[5], context[6] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence();

  do {
    // ( e.idx ) '-' e.idx
    // </0 & Root/4 (/7 e.Accum#1/5 )/8 '-'/9 e.Text#1/2 >/1
    context[13] = context[2];
    context[14] = context[3];
    context[9] = refalrts::char_left( '-', context[13], context[14] );
    if( ! context[9] )
      continue;
    // closed e.Accum#1 as range 5
    // closed e.Text#1 as range 13(2)
    //DEBUG: e.Accum#1: 5
    //DEBUG: e.Text#1: 2

    refalrts::reset_allocator();
    //TRASH: {REMOVED TILE} (/7 e.Accum#1/5 {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 Reuse: & ReadArrow/4 } Tile{ HalfReuse: (/8 HalfReuse: )/9 AsIs: e.Text#1/13(2) AsIs: >/1 ]] }
    refalrts::update_name( context[4], & ReadArrow );
    refalrts::reinit_open_bracket( context[8] );
    refalrts::reinit_close_bracket( context[9] );
    refalrts::push_stack( context[1] );
    refalrts::push_stack( context[0] );
    refalrts::link_brackets( context[8], context[9] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[8];
    refalrts::use( res );
    refalrts::splice_to_freelist_open( context[4], res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence();

  do {
    // ( e.idx ) '=' e.idx
    // </0 & Root/4 (/7 e.Accum#1/5 )/8 '='/9 e.Text#1/2 >/1
    context[13] = context[2];
    context[14] = context[3];
    context[9] = refalrts::char_left( '=', context[13], context[14] );
    if( ! context[9] )
      continue;
    // closed e.Accum#1 as range 5
    // closed e.Text#1 as range 13(2)
    //DEBUG: e.Accum#1: 5
    //DEBUG: e.Text#1: 2

    refalrts::reset_allocator();
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ AsIs: (/7 } # TEquals/10 Tile{ AsIs: e.Accum#1/5 } '='/11 )/12 Tile{ AsIs: </0 AsIs: & Root/4 } Tile{ HalfReuse: (/8 HalfReuse: )/9 AsIs: e.Text#1/13(2) AsIs: >/1 ]] }
    if( ! refalrts::alloc_ident( context[10], & ident_TEquals<int>::name ) )
      return refalrts::cNoMemory;
    if( ! refalrts::alloc_char( context[11], '=' ) )
      return refalrts::cNoMemory;
    if( ! refalrts::alloc_close_bracket( context[12] ) )
      return refalrts::cNoMemory;
    refalrts::reinit_open_bracket( context[8] );
    refalrts::reinit_close_bracket( context[9] );
    refalrts::push_stack( context[1] );
    refalrts::push_stack( context[0] );
    refalrts::link_brackets( context[8], context[9] );
    refalrts::link_brackets( context[7], context[12] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[8];
    res = refalrts::splice_evar( res, context[0], context[4] );
    res = refalrts::splice_evar( res, context[11], context[12] );
    res = refalrts::splice_evar( res, context[5], context[6] );
    res = refalrts::splice_evar( res, context[10], context[10] );
    res = refalrts::splice_evar( res, context[7], context[7] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence();

  do {
    // ( e.idx ) '0' e.idx
    // </0 & Root/4 (/7 e.Accum#1/5 )/8 '0'/9 e.Text#1/2 >/1
    context[13] = context[2];
    context[14] = context[3];
    context[9] = refalrts::char_left( '0', context[13], context[14] );
    if( ! context[9] )
      continue;
    // closed e.Accum#1 as range 5
    // closed e.Text#1 as range 13(2)
    //DEBUG: e.Accum#1: 5
    //DEBUG: e.Text#1: 2

    refalrts::reset_allocator();
    //TRASH: {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 Reuse: & Number/4 AsIs: (/7 AsIs: e.Accum#1/5 HalfReuse: '0'/8 HalfReuse: )/9 AsIs: e.Text#1/13(2) AsIs: >/1 ]] }
    refalrts::update_name( context[4], & Number );
    refalrts::reinit_char( context[8], '0' );
    refalrts::reinit_close_bracket( context[9] );
    refalrts::push_stack( context[1] );
    refalrts::push_stack( context[0] );
    refalrts::link_brackets( context[7], context[9] );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence();

  do {
    // ( e.idx ) '1' e.idx
    // </0 & Root/4 (/7 e.Accum#1/5 )/8 '1'/9 e.Text#1/2 >/1
    context[13] = context[2];
    context[14] = context[3];
    context[9] = refalrts::char_left( '1', context[13], context[14] );
    if( ! context[9] )
      continue;
    // closed e.Accum#1 as range 5
    // closed e.Text#1 as range 13(2)
    //DEBUG: e.Accum#1: 5
    //DEBUG: e.Text#1: 2

    refalrts::reset_allocator();
    //TRASH: {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 Reuse: & Number/4 AsIs: (/7 AsIs: e.Accum#1/5 HalfReuse: '1'/8 HalfReuse: )/9 AsIs: e.Text#1/13(2) AsIs: >/1 ]] }
    refalrts::update_name( context[4], & Number );
    refalrts::reinit_char( context[8], '1' );
    refalrts::reinit_close_bracket( context[9] );
    refalrts::push_stack( context[1] );
    refalrts::push_stack( context[0] );
    refalrts::link_brackets( context[7], context[9] );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence();

  do {
    // ( e.idx ) '2' e.idx
    // </0 & Root/4 (/7 e.Accum#1/5 )/8 '2'/9 e.Text#1/2 >/1
    context[13] = context[2];
    context[14] = context[3];
    context[9] = refalrts::char_left( '2', context[13], context[14] );
    if( ! context[9] )
      continue;
    // closed e.Accum#1 as range 5
    // closed e.Text#1 as range 13(2)
    //DEBUG: e.Accum#1: 5
    //DEBUG: e.Text#1: 2

    refalrts::reset_allocator();
    //TRASH: {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 Reuse: & Number/4 AsIs: (/7 AsIs: e.Accum#1/5 HalfReuse: '2'/8 HalfReuse: )/9 AsIs: e.Text#1/13(2) AsIs: >/1 ]] }
    refalrts::update_name( context[4], & Number );
    refalrts::reinit_char( context[8], '2' );
    refalrts::reinit_close_bracket( context[9] );
    refalrts::push_stack( context[1] );
    refalrts::push_stack( context[0] );
    refalrts::link_brackets( context[7], context[9] );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence();

  do {
    // ( e.idx ) '3' e.idx
    // </0 & Root/4 (/7 e.Accum#1/5 )/8 '3'/9 e.Text#1/2 >/1
    context[13] = context[2];
    context[14] = context[3];
    context[9] = refalrts::char_left( '3', context[13], context[14] );
    if( ! context[9] )
      continue;
    // closed e.Accum#1 as range 5
    // closed e.Text#1 as range 13(2)
    //DEBUG: e.Accum#1: 5
    //DEBUG: e.Text#1: 2

    refalrts::reset_allocator();
    //TRASH: {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 Reuse: & Number/4 AsIs: (/7 AsIs: e.Accum#1/5 HalfReuse: '3'/8 HalfReuse: )/9 AsIs: e.Text#1/13(2) AsIs: >/1 ]] }
    refalrts::update_name( context[4], & Number );
    refalrts::reinit_char( context[8], '3' );
    refalrts::reinit_close_bracket( context[9] );
    refalrts::push_stack( context[1] );
    refalrts::push_stack( context[0] );
    refalrts::link_brackets( context[7], context[9] );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence();

  do {
    // ( e.idx ) '4' e.idx
    // </0 & Root/4 (/7 e.Accum#1/5 )/8 '4'/9 e.Text#1/2 >/1
    context[13] = context[2];
    context[14] = context[3];
    context[9] = refalrts::char_left( '4', context[13], context[14] );
    if( ! context[9] )
      continue;
    // closed e.Accum#1 as range 5
    // closed e.Text#1 as range 13(2)
    //DEBUG: e.Accum#1: 5
    //DEBUG: e.Text#1: 2

    refalrts::reset_allocator();
    //TRASH: {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 Reuse: & Number/4 AsIs: (/7 AsIs: e.Accum#1/5 HalfReuse: '4'/8 HalfReuse: )/9 AsIs: e.Text#1/13(2) AsIs: >/1 ]] }
    refalrts::update_name( context[4], & Number );
    refalrts::reinit_char( context[8], '4' );
    refalrts::reinit_close_bracket( context[9] );
    refalrts::push_stack( context[1] );
    refalrts::push_stack( context[0] );
    refalrts::link_brackets( context[7], context[9] );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence();

  do {
    // ( e.idx ) '5' e.idx
    // </0 & Root/4 (/7 e.Accum#1/5 )/8 '5'/9 e.Text#1/2 >/1
    context[13] = context[2];
    context[14] = context[3];
    context[9] = refalrts::char_left( '5', context[13], context[14] );
    if( ! context[9] )
      continue;
    // closed e.Accum#1 as range 5
    // closed e.Text#1 as range 13(2)
    //DEBUG: e.Accum#1: 5
    //DEBUG: e.Text#1: 2

    refalrts::reset_allocator();
    //TRASH: {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 Reuse: & Number/4 AsIs: (/7 AsIs: e.Accum#1/5 HalfReuse: '5'/8 HalfReuse: )/9 AsIs: e.Text#1/13(2) AsIs: >/1 ]] }
    refalrts::update_name( context[4], & Number );
    refalrts::reinit_char( context[8], '5' );
    refalrts::reinit_close_bracket( context[9] );
    refalrts::push_stack( context[1] );
    refalrts::push_stack( context[0] );
    refalrts::link_brackets( context[7], context[9] );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence();

  do {
    // ( e.idx ) '6' e.idx
    // </0 & Root/4 (/7 e.Accum#1/5 )/8 '6'/9 e.Text#1/2 >/1
    context[13] = context[2];
    context[14] = context[3];
    context[9] = refalrts::char_left( '6', context[13], context[14] );
    if( ! context[9] )
      continue;
    // closed e.Accum#1 as range 5
    // closed e.Text#1 as range 13(2)
    //DEBUG: e.Accum#1: 5
    //DEBUG: e.Text#1: 2

    refalrts::reset_allocator();
    //TRASH: {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 Reuse: & Number/4 AsIs: (/7 AsIs: e.Accum#1/5 HalfReuse: '6'/8 HalfReuse: )/9 AsIs: e.Text#1/13(2) AsIs: >/1 ]] }
    refalrts::update_name( context[4], & Number );
    refalrts::reinit_char( context[8], '6' );
    refalrts::reinit_close_bracket( context[9] );
    refalrts::push_stack( context[1] );
    refalrts::push_stack( context[0] );
    refalrts::link_brackets( context[7], context[9] );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence();

  do {
    // ( e.idx ) '7' e.idx
    // </0 & Root/4 (/7 e.Accum#1/5 )/8 '7'/9 e.Text#1/2 >/1
    context[13] = context[2];
    context[14] = context[3];
    context[9] = refalrts::char_left( '7', context[13], context[14] );
    if( ! context[9] )
      continue;
    // closed e.Accum#1 as range 5
    // closed e.Text#1 as range 13(2)
    //DEBUG: e.Accum#1: 5
    //DEBUG: e.Text#1: 2

    refalrts::reset_allocator();
    //TRASH: {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 Reuse: & Number/4 AsIs: (/7 AsIs: e.Accum#1/5 HalfReuse: '7'/8 HalfReuse: )/9 AsIs: e.Text#1/13(2) AsIs: >/1 ]] }
    refalrts::update_name( context[4], & Number );
    refalrts::reinit_char( context[8], '7' );
    refalrts::reinit_close_bracket( context[9] );
    refalrts::push_stack( context[1] );
    refalrts::push_stack( context[0] );
    refalrts::link_brackets( context[7], context[9] );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence();

  do {
    // ( e.idx ) '8' e.idx
    // </0 & Root/4 (/7 e.Accum#1/5 )/8 '8'/9 e.Text#1/2 >/1
    context[13] = context[2];
    context[14] = context[3];
    context[9] = refalrts::char_left( '8', context[13], context[14] );
    if( ! context[9] )
      continue;
    // closed e.Accum#1 as range 5
    // closed e.Text#1 as range 13(2)
    //DEBUG: e.Accum#1: 5
    //DEBUG: e.Text#1: 2

    refalrts::reset_allocator();
    //TRASH: {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 Reuse: & Number/4 AsIs: (/7 AsIs: e.Accum#1/5 HalfReuse: '8'/8 HalfReuse: )/9 AsIs: e.Text#1/13(2) AsIs: >/1 ]] }
    refalrts::update_name( context[4], & Number );
    refalrts::reinit_char( context[8], '8' );
    refalrts::reinit_close_bracket( context[9] );
    refalrts::push_stack( context[1] );
    refalrts::push_stack( context[0] );
    refalrts::link_brackets( context[7], context[9] );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence();

  do {
    // ( e.idx ) '9' e.idx
    // </0 & Root/4 (/7 e.Accum#1/5 )/8 '9'/9 e.Text#1/2 >/1
    context[13] = context[2];
    context[14] = context[3];
    context[9] = refalrts::char_left( '9', context[13], context[14] );
    if( ! context[9] )
      continue;
    // closed e.Accum#1 as range 5
    // closed e.Text#1 as range 13(2)
    //DEBUG: e.Accum#1: 5
    //DEBUG: e.Text#1: 2

    refalrts::reset_allocator();
    //TRASH: {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 Reuse: & Number/4 AsIs: (/7 AsIs: e.Accum#1/5 HalfReuse: '9'/8 HalfReuse: )/9 AsIs: e.Text#1/13(2) AsIs: >/1 ]] }
    refalrts::update_name( context[4], & Number );
    refalrts::reinit_char( context[8], '9' );
    refalrts::reinit_close_bracket( context[9] );
    refalrts::push_stack( context[1] );
    refalrts::push_stack( context[0] );
    refalrts::link_brackets( context[7], context[9] );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence();

  do {
    // ( e.idx ) 'A' e.idx
    // </0 & Root/4 (/7 e.Accum#1/5 )/8 'A'/9 e.Text#1/2 >/1
    context[13] = context[2];
    context[14] = context[3];
    context[9] = refalrts::char_left( 'A', context[13], context[14] );
    if( ! context[9] )
      continue;
    // closed e.Accum#1 as range 5
    // closed e.Text#1 as range 13(2)
    //DEBUG: e.Accum#1: 5
    //DEBUG: e.Text#1: 2

    refalrts::reset_allocator();
    //TRASH: {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 Reuse: & Name/4 AsIs: (/7 AsIs: e.Accum#1/5 HalfReuse: 'A'/8 HalfReuse: )/9 AsIs: e.Text#1/13(2) AsIs: >/1 ]] }
    refalrts::update_name( context[4], & Name );
    refalrts::reinit_char( context[8], 'A' );
    refalrts::reinit_close_bracket( context[9] );
    refalrts::push_stack( context[1] );
    refalrts::push_stack( context[0] );
    refalrts::link_brackets( context[7], context[9] );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence();

  do {
    // ( e.idx ) 'B' e.idx
    // </0 & Root/4 (/7 e.Accum#1/5 )/8 'B'/9 e.Text#1/2 >/1
    context[13] = context[2];
    context[14] = context[3];
    context[9] = refalrts::char_left( 'B', context[13], context[14] );
    if( ! context[9] )
      continue;
    // closed e.Accum#1 as range 5
    // closed e.Text#1 as range 13(2)
    //DEBUG: e.Accum#1: 5
    //DEBUG: e.Text#1: 2

    refalrts::reset_allocator();
    //TRASH: {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 Reuse: & Name/4 AsIs: (/7 AsIs: e.Accum#1/5 HalfReuse: 'B'/8 HalfReuse: )/9 AsIs: e.Text#1/13(2) AsIs: >/1 ]] }
    refalrts::update_name( context[4], & Name );
    refalrts::reinit_char( context[8], 'B' );
    refalrts::reinit_close_bracket( context[9] );
    refalrts::push_stack( context[1] );
    refalrts::push_stack( context[0] );
    refalrts::link_brackets( context[7], context[9] );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence();

  do {
    // ( e.idx ) 'C' e.idx
    // </0 & Root/4 (/7 e.Accum#1/5 )/8 'C'/9 e.Text#1/2 >/1
    context[13] = context[2];
    context[14] = context[3];
    context[9] = refalrts::char_left( 'C', context[13], context[14] );
    if( ! context[9] )
      continue;
    // closed e.Accum#1 as range 5
    // closed e.Text#1 as range 13(2)
    //DEBUG: e.Accum#1: 5
    //DEBUG: e.Text#1: 2

    refalrts::reset_allocator();
    //TRASH: {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 Reuse: & Name/4 AsIs: (/7 AsIs: e.Accum#1/5 HalfReuse: 'C'/8 HalfReuse: )/9 AsIs: e.Text#1/13(2) AsIs: >/1 ]] }
    refalrts::update_name( context[4], & Name );
    refalrts::reinit_char( context[8], 'C' );
    refalrts::reinit_close_bracket( context[9] );
    refalrts::push_stack( context[1] );
    refalrts::push_stack( context[0] );
    refalrts::link_brackets( context[7], context[9] );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence();

  do {
    // ( e.idx ) 'D' e.idx
    // </0 & Root/4 (/7 e.Accum#1/5 )/8 'D'/9 e.Text#1/2 >/1
    context[13] = context[2];
    context[14] = context[3];
    context[9] = refalrts::char_left( 'D', context[13], context[14] );
    if( ! context[9] )
      continue;
    // closed e.Accum#1 as range 5
    // closed e.Text#1 as range 13(2)
    //DEBUG: e.Accum#1: 5
    //DEBUG: e.Text#1: 2

    refalrts::reset_allocator();
    //TRASH: {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 Reuse: & Name/4 AsIs: (/7 AsIs: e.Accum#1/5 HalfReuse: 'D'/8 HalfReuse: )/9 AsIs: e.Text#1/13(2) AsIs: >/1 ]] }
    refalrts::update_name( context[4], & Name );
    refalrts::reinit_char( context[8], 'D' );
    refalrts::reinit_close_bracket( context[9] );
    refalrts::push_stack( context[1] );
    refalrts::push_stack( context[0] );
    refalrts::link_brackets( context[7], context[9] );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence();

  do {
    // ( e.idx ) 'E' e.idx
    // </0 & Root/4 (/7 e.Accum#1/5 )/8 'E'/9 e.Text#1/2 >/1
    context[13] = context[2];
    context[14] = context[3];
    context[9] = refalrts::char_left( 'E', context[13], context[14] );
    if( ! context[9] )
      continue;
    // closed e.Accum#1 as range 5
    // closed e.Text#1 as range 13(2)
    //DEBUG: e.Accum#1: 5
    //DEBUG: e.Text#1: 2

    refalrts::reset_allocator();
    //TRASH: {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 Reuse: & Name/4 AsIs: (/7 AsIs: e.Accum#1/5 HalfReuse: 'E'/8 HalfReuse: )/9 AsIs: e.Text#1/13(2) AsIs: >/1 ]] }
    refalrts::update_name( context[4], & Name );
    refalrts::reinit_char( context[8], 'E' );
    refalrts::reinit_close_bracket( context[9] );
    refalrts::push_stack( context[1] );
    refalrts::push_stack( context[0] );
    refalrts::link_brackets( context[7], context[9] );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence();

  do {
    // ( e.idx ) 'F' e.idx
    // </0 & Root/4 (/7 e.Accum#1/5 )/8 'F'/9 e.Text#1/2 >/1
    context[13] = context[2];
    context[14] = context[3];
    context[9] = refalrts::char_left( 'F', context[13], context[14] );
    if( ! context[9] )
      continue;
    // closed e.Accum#1 as range 5
    // closed e.Text#1 as range 13(2)
    //DEBUG: e.Accum#1: 5
    //DEBUG: e.Text#1: 2

    refalrts::reset_allocator();
    //TRASH: {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 Reuse: & Name/4 AsIs: (/7 AsIs: e.Accum#1/5 HalfReuse: 'F'/8 HalfReuse: )/9 AsIs: e.Text#1/13(2) AsIs: >/1 ]] }
    refalrts::update_name( context[4], & Name );
    refalrts::reinit_char( context[8], 'F' );
    refalrts::reinit_close_bracket( context[9] );
    refalrts::push_stack( context[1] );
    refalrts::push_stack( context[0] );
    refalrts::link_brackets( context[7], context[9] );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence();

  do {
    // ( e.idx ) 'G' e.idx
    // </0 & Root/4 (/7 e.Accum#1/5 )/8 'G'/9 e.Text#1/2 >/1
    context[13] = context[2];
    context[14] = context[3];
    context[9] = refalrts::char_left( 'G', context[13], context[14] );
    if( ! context[9] )
      continue;
    // closed e.Accum#1 as range 5
    // closed e.Text#1 as range 13(2)
    //DEBUG: e.Accum#1: 5
    //DEBUG: e.Text#1: 2

    refalrts::reset_allocator();
    //TRASH: {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 Reuse: & Name/4 AsIs: (/7 AsIs: e.Accum#1/5 HalfReuse: 'G'/8 HalfReuse: )/9 AsIs: e.Text#1/13(2) AsIs: >/1 ]] }
    refalrts::update_name( context[4], & Name );
    refalrts::reinit_char( context[8], 'G' );
    refalrts::reinit_close_bracket( context[9] );
    refalrts::push_stack( context[1] );
    refalrts::push_stack( context[0] );
    refalrts::link_brackets( context[7], context[9] );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence();

  do {
    // ( e.idx ) 'H' e.idx
    // </0 & Root/4 (/7 e.Accum#1/5 )/8 'H'/9 e.Text#1/2 >/1
    context[13] = context[2];
    context[14] = context[3];
    context[9] = refalrts::char_left( 'H', context[13], context[14] );
    if( ! context[9] )
      continue;
    // closed e.Accum#1 as range 5
    // closed e.Text#1 as range 13(2)
    //DEBUG: e.Accum#1: 5
    //DEBUG: e.Text#1: 2

    refalrts::reset_allocator();
    //TRASH: {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 Reuse: & Name/4 AsIs: (/7 AsIs: e.Accum#1/5 HalfReuse: 'H'/8 HalfReuse: )/9 AsIs: e.Text#1/13(2) AsIs: >/1 ]] }
    refalrts::update_name( context[4], & Name );
    refalrts::reinit_char( context[8], 'H' );
    refalrts::reinit_close_bracket( context[9] );
    refalrts::push_stack( context[1] );
    refalrts::push_stack( context[0] );
    refalrts::link_brackets( context[7], context[9] );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence();

  do {
    // ( e.idx ) 'I' e.idx
    // </0 & Root/4 (/7 e.Accum#1/5 )/8 'I'/9 e.Text#1/2 >/1
    context[13] = context[2];
    context[14] = context[3];
    context[9] = refalrts::char_left( 'I', context[13], context[14] );
    if( ! context[9] )
      continue;
    // closed e.Accum#1 as range 5
    // closed e.Text#1 as range 13(2)
    //DEBUG: e.Accum#1: 5
    //DEBUG: e.Text#1: 2

    refalrts::reset_allocator();
    //TRASH: {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 Reuse: & Name/4 AsIs: (/7 AsIs: e.Accum#1/5 HalfReuse: 'I'/8 HalfReuse: )/9 AsIs: e.Text#1/13(2) AsIs: >/1 ]] }
    refalrts::update_name( context[4], & Name );
    refalrts::reinit_char( context[8], 'I' );
    refalrts::reinit_close_bracket( context[9] );
    refalrts::push_stack( context[1] );
    refalrts::push_stack( context[0] );
    refalrts::link_brackets( context[7], context[9] );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence();

  do {
    // ( e.idx ) 'J' e.idx
    // </0 & Root/4 (/7 e.Accum#1/5 )/8 'J'/9 e.Text#1/2 >/1
    context[13] = context[2];
    context[14] = context[3];
    context[9] = refalrts::char_left( 'J', context[13], context[14] );
    if( ! context[9] )
      continue;
    // closed e.Accum#1 as range 5
    // closed e.Text#1 as range 13(2)
    //DEBUG: e.Accum#1: 5
    //DEBUG: e.Text#1: 2

    refalrts::reset_allocator();
    //TRASH: {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 Reuse: & Name/4 AsIs: (/7 AsIs: e.Accum#1/5 HalfReuse: 'J'/8 HalfReuse: )/9 AsIs: e.Text#1/13(2) AsIs: >/1 ]] }
    refalrts::update_name( context[4], & Name );
    refalrts::reinit_char( context[8], 'J' );
    refalrts::reinit_close_bracket( context[9] );
    refalrts::push_stack( context[1] );
    refalrts::push_stack( context[0] );
    refalrts::link_brackets( context[7], context[9] );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence();

  do {
    // ( e.idx ) 'K' e.idx
    // </0 & Root/4 (/7 e.Accum#1/5 )/8 'K'/9 e.Text#1/2 >/1
    context[13] = context[2];
    context[14] = context[3];
    context[9] = refalrts::char_left( 'K', context[13], context[14] );
    if( ! context[9] )
      continue;
    // closed e.Accum#1 as range 5
    // closed e.Text#1 as range 13(2)
    //DEBUG: e.Accum#1: 5
    //DEBUG: e.Text#1: 2

    refalrts::reset_allocator();
    //TRASH: {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 Reuse: & Name/4 AsIs: (/7 AsIs: e.Accum#1/5 HalfReuse: 'K'/8 HalfReuse: )/9 AsIs: e.Text#1/13(2) AsIs: >/1 ]] }
    refalrts::update_name( context[4], & Name );
    refalrts::reinit_char( context[8], 'K' );
    refalrts::reinit_close_bracket( context[9] );
    refalrts::push_stack( context[1] );
    refalrts::push_stack( context[0] );
    refalrts::link_brackets( context[7], context[9] );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence();

  do {
    // ( e.idx ) 'L' e.idx
    // </0 & Root/4 (/7 e.Accum#1/5 )/8 'L'/9 e.Text#1/2 >/1
    context[13] = context[2];
    context[14] = context[3];
    context[9] = refalrts::char_left( 'L', context[13], context[14] );
    if( ! context[9] )
      continue;
    // closed e.Accum#1 as range 5
    // closed e.Text#1 as range 13(2)
    //DEBUG: e.Accum#1: 5
    //DEBUG: e.Text#1: 2

    refalrts::reset_allocator();
    //TRASH: {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 Reuse: & Name/4 AsIs: (/7 AsIs: e.Accum#1/5 HalfReuse: 'L'/8 HalfReuse: )/9 AsIs: e.Text#1/13(2) AsIs: >/1 ]] }
    refalrts::update_name( context[4], & Name );
    refalrts::reinit_char( context[8], 'L' );
    refalrts::reinit_close_bracket( context[9] );
    refalrts::push_stack( context[1] );
    refalrts::push_stack( context[0] );
    refalrts::link_brackets( context[7], context[9] );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence();

  do {
    // ( e.idx ) 'M' e.idx
    // </0 & Root/4 (/7 e.Accum#1/5 )/8 'M'/9 e.Text#1/2 >/1
    context[13] = context[2];
    context[14] = context[3];
    context[9] = refalrts::char_left( 'M', context[13], context[14] );
    if( ! context[9] )
      continue;
    // closed e.Accum#1 as range 5
    // closed e.Text#1 as range 13(2)
    //DEBUG: e.Accum#1: 5
    //DEBUG: e.Text#1: 2

    refalrts::reset_allocator();
    //TRASH: {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 Reuse: & Name/4 AsIs: (/7 AsIs: e.Accum#1/5 HalfReuse: 'M'/8 HalfReuse: )/9 AsIs: e.Text#1/13(2) AsIs: >/1 ]] }
    refalrts::update_name( context[4], & Name );
    refalrts::reinit_char( context[8], 'M' );
    refalrts::reinit_close_bracket( context[9] );
    refalrts::push_stack( context[1] );
    refalrts::push_stack( context[0] );
    refalrts::link_brackets( context[7], context[9] );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence();

  do {
    // ( e.idx ) 'N' e.idx
    // </0 & Root/4 (/7 e.Accum#1/5 )/8 'N'/9 e.Text#1/2 >/1
    context[13] = context[2];
    context[14] = context[3];
    context[9] = refalrts::char_left( 'N', context[13], context[14] );
    if( ! context[9] )
      continue;
    // closed e.Accum#1 as range 5
    // closed e.Text#1 as range 13(2)
    //DEBUG: e.Accum#1: 5
    //DEBUG: e.Text#1: 2

    refalrts::reset_allocator();
    //TRASH: {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 Reuse: & Name/4 AsIs: (/7 AsIs: e.Accum#1/5 HalfReuse: 'N'/8 HalfReuse: )/9 AsIs: e.Text#1/13(2) AsIs: >/1 ]] }
    refalrts::update_name( context[4], & Name );
    refalrts::reinit_char( context[8], 'N' );
    refalrts::reinit_close_bracket( context[9] );
    refalrts::push_stack( context[1] );
    refalrts::push_stack( context[0] );
    refalrts::link_brackets( context[7], context[9] );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence();

  do {
    // ( e.idx ) 'O' e.idx
    // </0 & Root/4 (/7 e.Accum#1/5 )/8 'O'/9 e.Text#1/2 >/1
    context[13] = context[2];
    context[14] = context[3];
    context[9] = refalrts::char_left( 'O', context[13], context[14] );
    if( ! context[9] )
      continue;
    // closed e.Accum#1 as range 5
    // closed e.Text#1 as range 13(2)
    //DEBUG: e.Accum#1: 5
    //DEBUG: e.Text#1: 2

    refalrts::reset_allocator();
    //TRASH: {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 Reuse: & Name/4 AsIs: (/7 AsIs: e.Accum#1/5 HalfReuse: 'O'/8 HalfReuse: )/9 AsIs: e.Text#1/13(2) AsIs: >/1 ]] }
    refalrts::update_name( context[4], & Name );
    refalrts::reinit_char( context[8], 'O' );
    refalrts::reinit_close_bracket( context[9] );
    refalrts::push_stack( context[1] );
    refalrts::push_stack( context[0] );
    refalrts::link_brackets( context[7], context[9] );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence();

  do {
    // ( e.idx ) 'P' e.idx
    // </0 & Root/4 (/7 e.Accum#1/5 )/8 'P'/9 e.Text#1/2 >/1
    context[13] = context[2];
    context[14] = context[3];
    context[9] = refalrts::char_left( 'P', context[13], context[14] );
    if( ! context[9] )
      continue;
    // closed e.Accum#1 as range 5
    // closed e.Text#1 as range 13(2)
    //DEBUG: e.Accum#1: 5
    //DEBUG: e.Text#1: 2

    refalrts::reset_allocator();
    //TRASH: {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 Reuse: & Name/4 AsIs: (/7 AsIs: e.Accum#1/5 HalfReuse: 'P'/8 HalfReuse: )/9 AsIs: e.Text#1/13(2) AsIs: >/1 ]] }
    refalrts::update_name( context[4], & Name );
    refalrts::reinit_char( context[8], 'P' );
    refalrts::reinit_close_bracket( context[9] );
    refalrts::push_stack( context[1] );
    refalrts::push_stack( context[0] );
    refalrts::link_brackets( context[7], context[9] );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence();

  do {
    // ( e.idx ) 'Q' e.idx
    // </0 & Root/4 (/7 e.Accum#1/5 )/8 'Q'/9 e.Text#1/2 >/1
    context[13] = context[2];
    context[14] = context[3];
    context[9] = refalrts::char_left( 'Q', context[13], context[14] );
    if( ! context[9] )
      continue;
    // closed e.Accum#1 as range 5
    // closed e.Text#1 as range 13(2)
    //DEBUG: e.Accum#1: 5
    //DEBUG: e.Text#1: 2

    refalrts::reset_allocator();
    //TRASH: {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 Reuse: & Name/4 AsIs: (/7 AsIs: e.Accum#1/5 HalfReuse: 'Q'/8 HalfReuse: )/9 AsIs: e.Text#1/13(2) AsIs: >/1 ]] }
    refalrts::update_name( context[4], & Name );
    refalrts::reinit_char( context[8], 'Q' );
    refalrts::reinit_close_bracket( context[9] );
    refalrts::push_stack( context[1] );
    refalrts::push_stack( context[0] );
    refalrts::link_brackets( context[7], context[9] );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence();

  do {
    // ( e.idx ) 'R' e.idx
    // </0 & Root/4 (/7 e.Accum#1/5 )/8 'R'/9 e.Text#1/2 >/1
    context[13] = context[2];
    context[14] = context[3];
    context[9] = refalrts::char_left( 'R', context[13], context[14] );
    if( ! context[9] )
      continue;
    // closed e.Accum#1 as range 5
    // closed e.Text#1 as range 13(2)
    //DEBUG: e.Accum#1: 5
    //DEBUG: e.Text#1: 2

    refalrts::reset_allocator();
    //TRASH: {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 Reuse: & Name/4 AsIs: (/7 AsIs: e.Accum#1/5 HalfReuse: 'R'/8 HalfReuse: )/9 AsIs: e.Text#1/13(2) AsIs: >/1 ]] }
    refalrts::update_name( context[4], & Name );
    refalrts::reinit_char( context[8], 'R' );
    refalrts::reinit_close_bracket( context[9] );
    refalrts::push_stack( context[1] );
    refalrts::push_stack( context[0] );
    refalrts::link_brackets( context[7], context[9] );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence();

  do {
    // ( e.idx ) 'S' e.idx
    // </0 & Root/4 (/7 e.Accum#1/5 )/8 'S'/9 e.Text#1/2 >/1
    context[13] = context[2];
    context[14] = context[3];
    context[9] = refalrts::char_left( 'S', context[13], context[14] );
    if( ! context[9] )
      continue;
    // closed e.Accum#1 as range 5
    // closed e.Text#1 as range 13(2)
    //DEBUG: e.Accum#1: 5
    //DEBUG: e.Text#1: 2

    refalrts::reset_allocator();
    //TRASH: {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 Reuse: & Name/4 AsIs: (/7 AsIs: e.Accum#1/5 HalfReuse: 'S'/8 HalfReuse: )/9 AsIs: e.Text#1/13(2) AsIs: >/1 ]] }
    refalrts::update_name( context[4], & Name );
    refalrts::reinit_char( context[8], 'S' );
    refalrts::reinit_close_bracket( context[9] );
    refalrts::push_stack( context[1] );
    refalrts::push_stack( context[0] );
    refalrts::link_brackets( context[7], context[9] );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence();

  do {
    // ( e.idx ) 'T' e.idx
    // </0 & Root/4 (/7 e.Accum#1/5 )/8 'T'/9 e.Text#1/2 >/1
    context[13] = context[2];
    context[14] = context[3];
    context[9] = refalrts::char_left( 'T', context[13], context[14] );
    if( ! context[9] )
      continue;
    // closed e.Accum#1 as range 5
    // closed e.Text#1 as range 13(2)
    //DEBUG: e.Accum#1: 5
    //DEBUG: e.Text#1: 2

    refalrts::reset_allocator();
    //TRASH: {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 Reuse: & Name/4 AsIs: (/7 AsIs: e.Accum#1/5 HalfReuse: 'T'/8 HalfReuse: )/9 AsIs: e.Text#1/13(2) AsIs: >/1 ]] }
    refalrts::update_name( context[4], & Name );
    refalrts::reinit_char( context[8], 'T' );
    refalrts::reinit_close_bracket( context[9] );
    refalrts::push_stack( context[1] );
    refalrts::push_stack( context[0] );
    refalrts::link_brackets( context[7], context[9] );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence();

  do {
    // ( e.idx ) 'U' e.idx
    // </0 & Root/4 (/7 e.Accum#1/5 )/8 'U'/9 e.Text#1/2 >/1
    context[13] = context[2];
    context[14] = context[3];
    context[9] = refalrts::char_left( 'U', context[13], context[14] );
    if( ! context[9] )
      continue;
    // closed e.Accum#1 as range 5
    // closed e.Text#1 as range 13(2)
    //DEBUG: e.Accum#1: 5
    //DEBUG: e.Text#1: 2

    refalrts::reset_allocator();
    //TRASH: {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 Reuse: & Name/4 AsIs: (/7 AsIs: e.Accum#1/5 HalfReuse: 'U'/8 HalfReuse: )/9 AsIs: e.Text#1/13(2) AsIs: >/1 ]] }
    refalrts::update_name( context[4], & Name );
    refalrts::reinit_char( context[8], 'U' );
    refalrts::reinit_close_bracket( context[9] );
    refalrts::push_stack( context[1] );
    refalrts::push_stack( context[0] );
    refalrts::link_brackets( context[7], context[9] );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence();

  do {
    // ( e.idx ) 'V' e.idx
    // </0 & Root/4 (/7 e.Accum#1/5 )/8 'V'/9 e.Text#1/2 >/1
    context[13] = context[2];
    context[14] = context[3];
    context[9] = refalrts::char_left( 'V', context[13], context[14] );
    if( ! context[9] )
      continue;
    // closed e.Accum#1 as range 5
    // closed e.Text#1 as range 13(2)
    //DEBUG: e.Accum#1: 5
    //DEBUG: e.Text#1: 2

    refalrts::reset_allocator();
    //TRASH: {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 Reuse: & Name/4 AsIs: (/7 AsIs: e.Accum#1/5 HalfReuse: 'V'/8 HalfReuse: )/9 AsIs: e.Text#1/13(2) AsIs: >/1 ]] }
    refalrts::update_name( context[4], & Name );
    refalrts::reinit_char( context[8], 'V' );
    refalrts::reinit_close_bracket( context[9] );
    refalrts::push_stack( context[1] );
    refalrts::push_stack( context[0] );
    refalrts::link_brackets( context[7], context[9] );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence();

  do {
    // ( e.idx ) 'W' e.idx
    // </0 & Root/4 (/7 e.Accum#1/5 )/8 'W'/9 e.Text#1/2 >/1
    context[13] = context[2];
    context[14] = context[3];
    context[9] = refalrts::char_left( 'W', context[13], context[14] );
    if( ! context[9] )
      continue;
    // closed e.Accum#1 as range 5
    // closed e.Text#1 as range 13(2)
    //DEBUG: e.Accum#1: 5
    //DEBUG: e.Text#1: 2

    refalrts::reset_allocator();
    //TRASH: {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 Reuse: & Name/4 AsIs: (/7 AsIs: e.Accum#1/5 HalfReuse: 'W'/8 HalfReuse: )/9 AsIs: e.Text#1/13(2) AsIs: >/1 ]] }
    refalrts::update_name( context[4], & Name );
    refalrts::reinit_char( context[8], 'W' );
    refalrts::reinit_close_bracket( context[9] );
    refalrts::push_stack( context[1] );
    refalrts::push_stack( context[0] );
    refalrts::link_brackets( context[7], context[9] );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence();

  do {
    // ( e.idx ) 'X' e.idx
    // </0 & Root/4 (/7 e.Accum#1/5 )/8 'X'/9 e.Text#1/2 >/1
    context[13] = context[2];
    context[14] = context[3];
    context[9] = refalrts::char_left( 'X', context[13], context[14] );
    if( ! context[9] )
      continue;
    // closed e.Accum#1 as range 5
    // closed e.Text#1 as range 13(2)
    //DEBUG: e.Accum#1: 5
    //DEBUG: e.Text#1: 2

    refalrts::reset_allocator();
    //TRASH: {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 Reuse: & Name/4 AsIs: (/7 AsIs: e.Accum#1/5 HalfReuse: 'X'/8 HalfReuse: )/9 AsIs: e.Text#1/13(2) AsIs: >/1 ]] }
    refalrts::update_name( context[4], & Name );
    refalrts::reinit_char( context[8], 'X' );
    refalrts::reinit_close_bracket( context[9] );
    refalrts::push_stack( context[1] );
    refalrts::push_stack( context[0] );
    refalrts::link_brackets( context[7], context[9] );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence();

  do {
    // ( e.idx ) 'Y' e.idx
    // </0 & Root/4 (/7 e.Accum#1/5 )/8 'Y'/9 e.Text#1/2 >/1
    context[13] = context[2];
    context[14] = context[3];
    context[9] = refalrts::char_left( 'Y', context[13], context[14] );
    if( ! context[9] )
      continue;
    // closed e.Accum#1 as range 5
    // closed e.Text#1 as range 13(2)
    //DEBUG: e.Accum#1: 5
    //DEBUG: e.Text#1: 2

    refalrts::reset_allocator();
    //TRASH: {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 Reuse: & Name/4 AsIs: (/7 AsIs: e.Accum#1/5 HalfReuse: 'Y'/8 HalfReuse: )/9 AsIs: e.Text#1/13(2) AsIs: >/1 ]] }
    refalrts::update_name( context[4], & Name );
    refalrts::reinit_char( context[8], 'Y' );
    refalrts::reinit_close_bracket( context[9] );
    refalrts::push_stack( context[1] );
    refalrts::push_stack( context[0] );
    refalrts::link_brackets( context[7], context[9] );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence();

  do {
    // ( e.idx ) 'Z' e.idx
    // </0 & Root/4 (/7 e.Accum#1/5 )/8 'Z'/9 e.Text#1/2 >/1
    context[13] = context[2];
    context[14] = context[3];
    context[9] = refalrts::char_left( 'Z', context[13], context[14] );
    if( ! context[9] )
      continue;
    // closed e.Accum#1 as range 5
    // closed e.Text#1 as range 13(2)
    //DEBUG: e.Accum#1: 5
    //DEBUG: e.Text#1: 2

    refalrts::reset_allocator();
    //TRASH: {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 Reuse: & Name/4 AsIs: (/7 AsIs: e.Accum#1/5 HalfReuse: 'Z'/8 HalfReuse: )/9 AsIs: e.Text#1/13(2) AsIs: >/1 ]] }
    refalrts::update_name( context[4], & Name );
    refalrts::reinit_char( context[8], 'Z' );
    refalrts::reinit_close_bracket( context[9] );
    refalrts::push_stack( context[1] );
    refalrts::push_stack( context[0] );
    refalrts::link_brackets( context[7], context[9] );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence();

  do {
    // ( e.idx ) '<' e.idx
    // </0 & Root/4 (/7 e.Accum#1/5 )/8 '<'/9 e.Text#1/2 >/1
    context[13] = context[2];
    context[14] = context[3];
    context[9] = refalrts::char_left( '<', context[13], context[14] );
    if( ! context[9] )
      continue;
    // closed e.Accum#1 as range 5
    // closed e.Text#1 as range 13(2)
    //DEBUG: e.Accum#1: 5
    //DEBUG: e.Text#1: 2

    refalrts::reset_allocator();
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ AsIs: (/7 } # TStateStart/10 Tile{ AsIs: e.Accum#1/5 } '<'/11 )/12 Tile{ AsIs: </0 AsIs: & Root/4 } Tile{ HalfReuse: (/8 HalfReuse: )/9 AsIs: e.Text#1/13(2) AsIs: >/1 ]] }
    if( ! refalrts::alloc_ident( context[10], & ident_TStateStart<int>::name ) )
      return refalrts::cNoMemory;
    if( ! refalrts::alloc_char( context[11], '<' ) )
      return refalrts::cNoMemory;
    if( ! refalrts::alloc_close_bracket( context[12] ) )
      return refalrts::cNoMemory;
    refalrts::reinit_open_bracket( context[8] );
    refalrts::reinit_close_bracket( context[9] );
    refalrts::push_stack( context[1] );
    refalrts::push_stack( context[0] );
    refalrts::link_brackets( context[8], context[9] );
    refalrts::link_brackets( context[7], context[12] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[8];
    res = refalrts::splice_evar( res, context[0], context[4] );
    res = refalrts::splice_evar( res, context[11], context[12] );
    res = refalrts::splice_evar( res, context[5], context[6] );
    res = refalrts::splice_evar( res, context[10], context[10] );
    res = refalrts::splice_evar( res, context[7], context[7] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence();

  do {
    // ( e.idx ) ',' e.idx
    // </0 & Root/4 (/7 e.Accum#1/5 )/8 ','/9 e.Text#1/2 >/1
    context[13] = context[2];
    context[14] = context[3];
    context[9] = refalrts::char_left( ',', context[13], context[14] );
    if( ! context[9] )
      continue;
    // closed e.Accum#1 as range 5
    // closed e.Text#1 as range 13(2)
    //DEBUG: e.Accum#1: 5
    //DEBUG: e.Text#1: 2

    refalrts::reset_allocator();
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ AsIs: (/7 } # TComma/10 Tile{ AsIs: e.Accum#1/5 } ','/11 )/12 Tile{ AsIs: </0 AsIs: & Root/4 } Tile{ HalfReuse: (/8 HalfReuse: )/9 AsIs: e.Text#1/13(2) AsIs: >/1 ]] }
    if( ! refalrts::alloc_ident( context[10], & ident_TComma<int>::name ) )
      return refalrts::cNoMemory;
    if( ! refalrts::alloc_char( context[11], ',' ) )
      return refalrts::cNoMemory;
    if( ! refalrts::alloc_close_bracket( context[12] ) )
      return refalrts::cNoMemory;
    refalrts::reinit_open_bracket( context[8] );
    refalrts::reinit_close_bracket( context[9] );
    refalrts::push_stack( context[1] );
    refalrts::push_stack( context[0] );
    refalrts::link_brackets( context[8], context[9] );
    refalrts::link_brackets( context[7], context[12] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[8];
    res = refalrts::splice_evar( res, context[0], context[4] );
    res = refalrts::splice_evar( res, context[11], context[12] );
    res = refalrts::splice_evar( res, context[5], context[6] );
    res = refalrts::splice_evar( res, context[10], context[10] );
    res = refalrts::splice_evar( res, context[7], context[7] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence();

  do {
    // ( e.idx ) '>' e.idx
    // </0 & Root/4 (/7 e.Accum#1/5 )/8 '>'/9 e.Text#1/2 >/1
    context[13] = context[2];
    context[14] = context[3];
    context[9] = refalrts::char_left( '>', context[13], context[14] );
    if( ! context[9] )
      continue;
    // closed e.Accum#1 as range 5
    // closed e.Text#1 as range 13(2)
    //DEBUG: e.Accum#1: 5
    //DEBUG: e.Text#1: 2

    refalrts::reset_allocator();
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ AsIs: (/7 } # TStateEnd/10 Tile{ AsIs: e.Accum#1/5 } '>'/11 )/12 Tile{ AsIs: </0 AsIs: & Root/4 } Tile{ HalfReuse: (/8 HalfReuse: )/9 AsIs: e.Text#1/13(2) AsIs: >/1 ]] }
    if( ! refalrts::alloc_ident( context[10], & ident_TStateEnd<int>::name ) )
      return refalrts::cNoMemory;
    if( ! refalrts::alloc_char( context[11], '>' ) )
      return refalrts::cNoMemory;
    if( ! refalrts::alloc_close_bracket( context[12] ) )
      return refalrts::cNoMemory;
    refalrts::reinit_open_bracket( context[8] );
    refalrts::reinit_close_bracket( context[9] );
    refalrts::push_stack( context[1] );
    refalrts::push_stack( context[0] );
    refalrts::link_brackets( context[8], context[9] );
    refalrts::link_brackets( context[7], context[12] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[8];
    res = refalrts::splice_evar( res, context[0], context[4] );
    res = refalrts::splice_evar( res, context[11], context[12] );
    res = refalrts::splice_evar( res, context[5], context[6] );
    res = refalrts::splice_evar( res, context[10], context[10] );
    res = refalrts::splice_evar( res, context[7], context[7] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence();

  do {
    // ( e.idx ) '\"' e.idx
    // </0 & Root/4 (/7 e.Accum#1/5 )/8 '\"'/9 e.Text#1/2 >/1
    context[13] = context[2];
    context[14] = context[3];
    context[9] = refalrts::char_left( '\"', context[13], context[14] );
    if( ! context[9] )
      continue;
    // closed e.Accum#1 as range 5
    // closed e.Text#1 as range 13(2)
    //DEBUG: e.Accum#1: 5
    //DEBUG: e.Text#1: 2

    refalrts::reset_allocator();
    //TRASH: {REMOVED TILE} (/7 e.Accum#1/5 {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 Reuse: & ErrorMessage/4 } Tile{ HalfReuse: (/8 HalfReuse: )/9 AsIs: e.Text#1/13(2) AsIs: >/1 ]] }
    refalrts::update_name( context[4], & ErrorMessage );
    refalrts::reinit_open_bracket( context[8] );
    refalrts::reinit_close_bracket( context[9] );
    refalrts::push_stack( context[1] );
    refalrts::push_stack( context[0] );
    refalrts::link_brackets( context[8], context[9] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[8];
    refalrts::use( res );
    refalrts::splice_to_freelist_open( context[4], res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence();

  do {
    // ( e.idx ) s.idx e.idx
    // </0 & Root/4 (/7 e.Accum#1/5 )/8 s.Any#1/9 e.Text#1/2 >/1
    // closed e.Accum#1 as range 5
    context[13] = context[2];
    context[14] = context[3];
    if( ! refalrts::svar_left( context[9], context[13], context[14] ) )
      continue;
    // closed e.Text#1 as range 13(2)
    //DEBUG: e.Accum#1: 5
    //DEBUG: s.Any#1: 9
    //DEBUG: e.Text#1: 2

    refalrts::reset_allocator();
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ } (/10 # TUnexpecteChar/11 Tile{ AsIs: e.Accum#1/5 } Tile{ AsIs: s.Any#1/9 } Tile{ AsIs: )/8 } Tile{ AsIs: </0 AsIs: & Root/4 AsIs: (/7 } )/12 Tile{ AsIs: e.Text#1/13(2) } Tile{ AsIs: >/1 ]] }
    if( ! refalrts::alloc_open_bracket( context[10] ) )
      return refalrts::cNoMemory;
    if( ! refalrts::alloc_ident( context[11], & ident_TUnexpecteChar<int>::name ) )
      return refalrts::cNoMemory;
    if( ! refalrts::alloc_close_bracket( context[12] ) )
      return refalrts::cNoMemory;
    refalrts::push_stack( context[1] );
    refalrts::push_stack( context[0] );
    refalrts::link_brackets( context[7], context[12] );
    refalrts::link_brackets( context[10], context[8] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    res = refalrts::splice_evar( res, context[13], context[14] );
    res = refalrts::splice_evar( res, context[12], context[12] );
    res = refalrts::splice_evar( res, context[0], context[7] );
    res = refalrts::splice_evar( res, context[8], context[8] );
    res = refalrts::splice_evar( res, context[9], context[9] );
    res = refalrts::splice_evar( res, context[5], context[6] );
    res = refalrts::splice_evar( res, context[10], context[11] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence();

  // ( e.idx )
  // </0 & Root/4 (/7 e.Accum#1/5 )/8 >/1
  if( ! refalrts::empty_seq( context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  // closed e.Accum#1 as range 5
  //DEBUG: e.Accum#1: 5

  refalrts::reset_allocator();
  //TRASH: {REMOVED TILE} </0 {REMOVED TILE} >/1 {REMOVED TILE}
  //RESULT: Tile{ [[ } Tile{ HalfReuse: (/4 HalfReuse: # TEOF/7 AsIs: e.Accum#1/5 AsIs: )/8 } Tile{ ]] }
  refalrts::reinit_open_bracket( context[4] );
  refalrts::reinit_ident( context[7], & ident_TEOF<int>::name );
  refalrts::link_brackets( context[4], context[8] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = arg_end->next;
  res = refalrts::splice_evar( res, context[4], context[8] );
  refalrts::use( res );
  refalrts::splice_to_freelist_open( trash_prev, res );
  return refalrts::cSuccess;
}

namespace /* unnamed */ {
refalrts::RefalNativeFunction descr_Root(func_Root, "Root");
refalrts::RefalFunction& Root = descr_Root;

} // unnamed namespace

#endif
#ifdef INTERPRET
namespace /* unnamed */ {
  namespace scope_ReadRegexp {
    static const char *filename = "Flex-Lexer.cpp";
    static refalrts::RefalFunction *functions[] = {
      & ReadInclude,
      & StartGroup,
      & EscRegexp,
      & Root
    };
    static const refalrts::RefalIdentifier idents[] = {
      & ident_TokenError<int>::name,
      & ident_TChar<int>::name,
      & ident_TSpecChar<int>::name,
      & ident_TQuantifier<int>::name,
      & ident_TStartGroup<int>::name,
      & ident_TNewLine<int>::name,
      & ident_TEndRegexp<int>::name
    };
    using refalrts::numbers;
    static const refalrts::StringItem strings[] = {
      {"nexpected EOF in Regex", 22}
    };
    static const refalrts::RASLCommand raa[] = {
      {refalrts::icThisIsGeneratedFunction, 0, 0, 0},
      {refalrts::icLoadConstants, 0, 0, 0},
      {refalrts::icReserveBacktrackStack, 15, 0, 0},
      {refalrts::icIssueMemory, 15, 0, 0},
      //FAST GEN: e.$
      //GLOBAL GEN: ( e.$ ) e.$
      // </0 & ReadRegexp/4 (/7 e.idxB#0/5 )/8 e.idxT#0/2 >/1
      {refalrts::icInitB0_Lite, 0, 0, 0},
      {refalrts::icCallSaveLeft, 0, 2, 0},
      {refalrts::icBracketLeftSave, 0, 5, 2},
      // closed e.idxB#0 as range 5
      // closed e.idxT#0 as range 2
      {refalrts::icOnFailGoTo, +21, 0, 0},
      // ( e.idx ) '/' e.idx
      // </0 & ReadRegexp/4 (/7 e.Accum#1/5 )/8 '/'/9 e.Text#1/2 >/1
      {refalrts::icSave, 0, 13, 2},
      {refalrts::icCharLeftSave, 9, static_cast<unsigned char>('/'), 13},
      // closed e.Accum#1 as range 5
      // closed e.Text#1 as range 13(2)
      //DEBUG: e.Accum#1: 5
      //DEBUG: e.Text#1: 2
      {refalrts::icEmptyResult, 0, 0, 0},
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ HalfReuse: (/0 HalfReuse: # TEndRegexp/4 } Tile{ AsIs: e.Accum#1/5 } '/'/10 Tile{ HalfReuse: )/7 } </11 & Root/12 Tile{ HalfReuse: (/8 HalfReuse: )/9 AsIs: e.Text#1/13(2) AsIs: >/1 ]] }
      {refalrts::icAllocChar, 0, '/', 10},
      {refalrts::icAllocBracket, 0, refalrts::ibOpenCall, 11},
      {refalrts::icAllocFunc, 0, 3, 12},
      {refalrts::icReinitBracket, 0, refalrts::ibOpenBracket, 0},
      {refalrts::icReinitIdent, 0, 6, 4},
      {refalrts::icReinitBracket, 0, refalrts::ibCloseBracket, 7},
      {refalrts::icReinitBracket, 0, refalrts::ibOpenBracket, 8},
      {refalrts::icReinitBracket, 0, refalrts::ibCloseBracket, 9},
      {refalrts::icPushStack, 0, 0, 1},
      {refalrts::icPushStack, 0, 0, 11},
      {refalrts::icLinkBrackets, 8, 9, 0},
      {refalrts::icLinkBrackets, 0, 7, 0},
      {refalrts::icSetRes, 0, 0, 8},
      {refalrts::icSpliceTile, 11, 12, 0},
      {refalrts::icSpliceTile, 7, 7, 0},
      {refalrts::icSpliceTile, 10, 10, 0},
      {refalrts::icSpliceEVar, 0, 0, 5},
      {refalrts::icNextStep, 0, 0, 0},
      {refalrts::icProfilerStopSentence, 0, 0, 0},
      {refalrts::icOnFailGoTo, +21, 0, 0},
      // ( e.idx ) '\n' e.idx
      // </0 & ReadRegexp/4 (/7 e.Accum#1/5 )/8 '\n'/9 e.Text#1/2 >/1
      {refalrts::icSave, 0, 13, 2},
      {refalrts::icCharLeftSave, 9, static_cast<unsigned char>('\n'), 13},
      // closed e.Accum#1 as range 5
      // closed e.Text#1 as range 13(2)
      //DEBUG: e.Accum#1: 5
      //DEBUG: e.Text#1: 2
      {refalrts::icEmptyResult, 0, 0, 0},
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ HalfReuse: (/0 HalfReuse: # TNewLine/4 } Tile{ AsIs: e.Accum#1/5 } '\n'/10 Tile{ HalfReuse: )/7 } </11 & Root/12 Tile{ HalfReuse: (/8 HalfReuse: )/9 AsIs: e.Text#1/13(2) AsIs: >/1 ]] }
      {refalrts::icAllocChar, 0, '\n', 10},
      {refalrts::icAllocBracket, 0, refalrts::ibOpenCall, 11},
      {refalrts::icAllocFunc, 0, 3, 12},
      {refalrts::icReinitBracket, 0, refalrts::ibOpenBracket, 0},
      {refalrts::icReinitIdent, 0, 5, 4},
      {refalrts::icReinitBracket, 0, refalrts::ibCloseBracket, 7},
      {refalrts::icReinitBracket, 0, refalrts::ibOpenBracket, 8},
      {refalrts::icReinitBracket, 0, refalrts::ibCloseBracket, 9},
      {refalrts::icPushStack, 0, 0, 1},
      {refalrts::icPushStack, 0, 0, 11},
      {refalrts::icLinkBrackets, 8, 9, 0},
      {refalrts::icLinkBrackets, 0, 7, 0},
      {refalrts::icSetRes, 0, 0, 8},
      {refalrts::icSpliceTile, 11, 12, 0},
      {refalrts::icSpliceTile, 7, 7, 0},
      {refalrts::icSpliceTile, 10, 10, 0},
      {refalrts::icSpliceEVar, 0, 0, 5},
      {refalrts::icNextStep, 0, 0, 0},
      {refalrts::icProfilerStopSentence, 0, 0, 0},
      {refalrts::icOnFailGoTo, +12, 0, 0},
      // ( e.idx ) '\\' e.idx
      // </0 & ReadRegexp/4 (/7 e.Accum#1/5 )/8 '\\'/9 e.Text#1/2 >/1
      {refalrts::icSave, 0, 13, 2},
      {refalrts::icCharLeftSave, 9, static_cast<unsigned char>('\\'), 13},
      // closed e.Accum#1 as range 5
      // closed e.Text#1 as range 13(2)
      //DEBUG: e.Accum#1: 5
      //DEBUG: e.Text#1: 2
      {refalrts::icEmptyResult, 0, 0, 0},
      //TRASH: {REMOVED TILE} (/7 e.Accum#1/5 {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 Reuse: & EscRegexp/4 } Tile{ HalfReuse: (/8 HalfReuse: )/9 AsIs: e.Text#1/13(2) AsIs: >/1 ]] }
      {refalrts::icUpdateFunc, 0, 2, 4},
      {refalrts::icReinitBracket, 0, refalrts::ibOpenBracket, 8},
      {refalrts::icReinitBracket, 0, refalrts::ibCloseBracket, 9},
      {refalrts::icPushStack, 0, 0, 1},
      {refalrts::icPushStack, 0, 0, 0},
      {refalrts::icLinkBrackets, 8, 9, 0},
      {refalrts::icSetRes, 0, 0, 8},
      {refalrts::icTrash, 0, 0, 4},
      {refalrts::icNextStep, 0, 0, 0},
      {refalrts::icProfilerStopSentence, 0, 0, 0},
      {refalrts::icOnFailGoTo, +21, 0, 0},
      // ( e.idx ) '[' e.idx
      // </0 & ReadRegexp/4 (/7 e.Accum#1/5 )/8 '['/9 e.Text#1/2 >/1
      {refalrts::icSave, 0, 13, 2},
      {refalrts::icCharLeftSave, 9, static_cast<unsigned char>('['), 13},
      // closed e.Accum#1 as range 5
      // closed e.Text#1 as range 13(2)
      //DEBUG: e.Accum#1: 5
      //DEBUG: e.Text#1: 2
      {refalrts::icEmptyResult, 0, 0, 0},
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ HalfReuse: (/0 HalfReuse: # TStartGroup/4 } Tile{ AsIs: e.Accum#1/5 } '['/10 Tile{ HalfReuse: )/7 } </11 & StartGroup/12 Tile{ HalfReuse: (/8 HalfReuse: )/9 AsIs: e.Text#1/13(2) AsIs: >/1 ]] }
      {refalrts::icAllocChar, 0, '[', 10},
      {refalrts::icAllocBracket, 0, refalrts::ibOpenCall, 11},
      {refalrts::icAllocFunc, 0, 1, 12},
      {refalrts::icReinitBracket, 0, refalrts::ibOpenBracket, 0},
      {refalrts::icReinitIdent, 0, 4, 4},
      {refalrts::icReinitBracket, 0, refalrts::ibCloseBracket, 7},
      {refalrts::icReinitBracket, 0, refalrts::ibOpenBracket, 8},
      {refalrts::icReinitBracket, 0, refalrts::ibCloseBracket, 9},
      {refalrts::icPushStack, 0, 0, 1},
      {refalrts::icPushStack, 0, 0, 11},
      {refalrts::icLinkBrackets, 8, 9, 0},
      {refalrts::icLinkBrackets, 0, 7, 0},
      {refalrts::icSetRes, 0, 0, 8},
      {refalrts::icSpliceTile, 11, 12, 0},
      {refalrts::icSpliceTile, 7, 7, 0},
      {refalrts::icSpliceTile, 10, 10, 0},
      {refalrts::icSpliceEVar, 0, 0, 5},
      {refalrts::icNextStep, 0, 0, 0},
      {refalrts::icProfilerStopSentence, 0, 0, 0},
      {refalrts::icOnFailGoTo, +19, 0, 0},
      // ( e.idx ) '?' e.idx
      // </0 & ReadRegexp/4 (/7 e.Accum#1/5 )/8 '?'/9 e.Text#1/2 >/1
      {refalrts::icSave, 0, 13, 2},
      {refalrts::icCharLeftSave, 9, static_cast<unsigned char>('?'), 13},
      // closed e.Accum#1 as range 5
      // closed e.Text#1 as range 13(2)
      //DEBUG: e.Accum#1: 5
      //DEBUG: e.Text#1: 2
      {refalrts::icEmptyResult, 0, 0, 0},
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ } Tile{ AsIs: (/7 } # TQuantifier/10 Tile{ AsIs: e.Accum#1/5 } '?'/11 )/12 Tile{ AsIs: </0 AsIs: & ReadRegexp/4 } Tile{ HalfReuse: (/8 HalfReuse: )/9 AsIs: e.Text#1/13(2) AsIs: >/1 ]] }
      {refalrts::icAllocIdent, 0, 3, 10},
      {refalrts::icAllocChar, 0, '?', 11},
      {refalrts::icAllocBracket, 0, refalrts::ibCloseBracket, 12},
      {refalrts::icReinitBracket, 0, refalrts::ibOpenBracket, 8},
      {refalrts::icReinitBracket, 0, refalrts::ibCloseBracket, 9},
      {refalrts::icPushStack, 0, 0, 1},
      {refalrts::icPushStack, 0, 0, 0},
      {refalrts::icLinkBrackets, 8, 9, 0},
      {refalrts::icLinkBrackets, 7, 12, 0},
      {refalrts::icSetRes, 0, 0, 8},
      {refalrts::icSpliceTile, 0, 4, 0},
      {refalrts::icSpliceTile, 11, 12, 0},
      {refalrts::icSpliceEVar, 0, 0, 5},
      {refalrts::icSpliceTile, 10, 10, 0},
      {refalrts::icSpliceTile, 7, 7, 0},
      {refalrts::icNextStep, 0, 0, 0},
      {refalrts::icProfilerStopSentence, 0, 0, 0},
      {refalrts::icOnFailGoTo, +19, 0, 0},
      // ( e.idx ) '*' e.idx
      // </0 & ReadRegexp/4 (/7 e.Accum#1/5 )/8 '*'/9 e.Text#1/2 >/1
      {refalrts::icSave, 0, 13, 2},
      {refalrts::icCharLeftSave, 9, static_cast<unsigned char>('*'), 13},
      // closed e.Accum#1 as range 5
      // closed e.Text#1 as range 13(2)
      //DEBUG: e.Accum#1: 5
      //DEBUG: e.Text#1: 2
      {refalrts::icEmptyResult, 0, 0, 0},
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ } Tile{ AsIs: (/7 } # TQuantifier/10 Tile{ AsIs: e.Accum#1/5 } '*'/11 )/12 Tile{ AsIs: </0 AsIs: & ReadRegexp/4 } Tile{ HalfReuse: (/8 HalfReuse: )/9 AsIs: e.Text#1/13(2) AsIs: >/1 ]] }
      {refalrts::icAllocIdent, 0, 3, 10},
      {refalrts::icAllocChar, 0, '*', 11},
      {refalrts::icAllocBracket, 0, refalrts::ibCloseBracket, 12},
      {refalrts::icReinitBracket, 0, refalrts::ibOpenBracket, 8},
      {refalrts::icReinitBracket, 0, refalrts::ibCloseBracket, 9},
      {refalrts::icPushStack, 0, 0, 1},
      {refalrts::icPushStack, 0, 0, 0},
      {refalrts::icLinkBrackets, 8, 9, 0},
      {refalrts::icLinkBrackets, 7, 12, 0},
      {refalrts::icSetRes, 0, 0, 8},
      {refalrts::icSpliceTile, 0, 4, 0},
      {refalrts::icSpliceTile, 11, 12, 0},
      {refalrts::icSpliceEVar, 0, 0, 5},
      {refalrts::icSpliceTile, 10, 10, 0},
      {refalrts::icSpliceTile, 7, 7, 0},
      {refalrts::icNextStep, 0, 0, 0},
      {refalrts::icProfilerStopSentence, 0, 0, 0},
      {refalrts::icOnFailGoTo, +19, 0, 0},
      // ( e.idx ) '+' e.idx
      // </0 & ReadRegexp/4 (/7 e.Accum#1/5 )/8 '+'/9 e.Text#1/2 >/1
      {refalrts::icSave, 0, 13, 2},
      {refalrts::icCharLeftSave, 9, static_cast<unsigned char>('+'), 13},
      // closed e.Accum#1 as range 5
      // closed e.Text#1 as range 13(2)
      //DEBUG: e.Accum#1: 5
      //DEBUG: e.Text#1: 2
      {refalrts::icEmptyResult, 0, 0, 0},
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ } Tile{ AsIs: (/7 } # TQuantifier/10 Tile{ AsIs: e.Accum#1/5 } '+'/11 )/12 Tile{ AsIs: </0 AsIs: & ReadRegexp/4 } Tile{ HalfReuse: (/8 HalfReuse: )/9 AsIs: e.Text#1/13(2) AsIs: >/1 ]] }
      {refalrts::icAllocIdent, 0, 3, 10},
      {refalrts::icAllocChar, 0, '+', 11},
      {refalrts::icAllocBracket, 0, refalrts::ibCloseBracket, 12},
      {refalrts::icReinitBracket, 0, refalrts::ibOpenBracket, 8},
      {refalrts::icReinitBracket, 0, refalrts::ibCloseBracket, 9},
      {refalrts::icPushStack, 0, 0, 1},
      {refalrts::icPushStack, 0, 0, 0},
      {refalrts::icLinkBrackets, 8, 9, 0},
      {refalrts::icLinkBrackets, 7, 12, 0},
      {refalrts::icSetRes, 0, 0, 8},
      {refalrts::icSpliceTile, 0, 4, 0},
      {refalrts::icSpliceTile, 11, 12, 0},
      {refalrts::icSpliceEVar, 0, 0, 5},
      {refalrts::icSpliceTile, 10, 10, 0},
      {refalrts::icSpliceTile, 7, 7, 0},
      {refalrts::icNextStep, 0, 0, 0},
      {refalrts::icProfilerStopSentence, 0, 0, 0},
      {refalrts::icOnFailGoTo, +19, 0, 0},
      // ( e.idx ) '.' e.idx
      // </0 & ReadRegexp/4 (/7 e.Accum#1/5 )/8 '.'/9 e.Text#1/2 >/1
      {refalrts::icSave, 0, 13, 2},
      {refalrts::icCharLeftSave, 9, static_cast<unsigned char>('.'), 13},
      // closed e.Accum#1 as range 5
      // closed e.Text#1 as range 13(2)
      //DEBUG: e.Accum#1: 5
      //DEBUG: e.Text#1: 2
      {refalrts::icEmptyResult, 0, 0, 0},
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ } Tile{ AsIs: (/7 } # TSpecChar/10 Tile{ AsIs: e.Accum#1/5 } '.'/11 )/12 Tile{ AsIs: </0 AsIs: & ReadRegexp/4 } Tile{ HalfReuse: (/8 HalfReuse: )/9 AsIs: e.Text#1/13(2) AsIs: >/1 ]] }
      {refalrts::icAllocIdent, 0, 2, 10},
      {refalrts::icAllocChar, 0, '.', 11},
      {refalrts::icAllocBracket, 0, refalrts::ibCloseBracket, 12},
      {refalrts::icReinitBracket, 0, refalrts::ibOpenBracket, 8},
      {refalrts::icReinitBracket, 0, refalrts::ibCloseBracket, 9},
      {refalrts::icPushStack, 0, 0, 1},
      {refalrts::icPushStack, 0, 0, 0},
      {refalrts::icLinkBrackets, 8, 9, 0},
      {refalrts::icLinkBrackets, 7, 12, 0},
      {refalrts::icSetRes, 0, 0, 8},
      {refalrts::icSpliceTile, 0, 4, 0},
      {refalrts::icSpliceTile, 11, 12, 0},
      {refalrts::icSpliceEVar, 0, 0, 5},
      {refalrts::icSpliceTile, 10, 10, 0},
      {refalrts::icSpliceTile, 7, 7, 0},
      {refalrts::icNextStep, 0, 0, 0},
      {refalrts::icProfilerStopSentence, 0, 0, 0},
      {refalrts::icOnFailGoTo, +19, 0, 0},
      // ( e.idx ) '(' e.idx
      // </0 & ReadRegexp/4 (/7 e.Accum#1/5 )/8 '('/9 e.Text#1/2 >/1
      {refalrts::icSave, 0, 13, 2},
      {refalrts::icCharLeftSave, 9, static_cast<unsigned char>('('), 13},
      // closed e.Accum#1 as range 5
      // closed e.Text#1 as range 13(2)
      //DEBUG: e.Accum#1: 5
      //DEBUG: e.Text#1: 2
      {refalrts::icEmptyResult, 0, 0, 0},
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ } Tile{ AsIs: (/7 } # TSpecChar/10 Tile{ AsIs: e.Accum#1/5 } '('/11 )/12 Tile{ AsIs: </0 AsIs: & ReadRegexp/4 } Tile{ HalfReuse: (/8 HalfReuse: )/9 AsIs: e.Text#1/13(2) AsIs: >/1 ]] }
      {refalrts::icAllocIdent, 0, 2, 10},
      {refalrts::icAllocChar, 0, '(', 11},
      {refalrts::icAllocBracket, 0, refalrts::ibCloseBracket, 12},
      {refalrts::icReinitBracket, 0, refalrts::ibOpenBracket, 8},
      {refalrts::icReinitBracket, 0, refalrts::ibCloseBracket, 9},
      {refalrts::icPushStack, 0, 0, 1},
      {refalrts::icPushStack, 0, 0, 0},
      {refalrts::icLinkBrackets, 8, 9, 0},
      {refalrts::icLinkBrackets, 7, 12, 0},
      {refalrts::icSetRes, 0, 0, 8},
      {refalrts::icSpliceTile, 0, 4, 0},
      {refalrts::icSpliceTile, 11, 12, 0},
      {refalrts::icSpliceEVar, 0, 0, 5},
      {refalrts::icSpliceTile, 10, 10, 0},
      {refalrts::icSpliceTile, 7, 7, 0},
      {refalrts::icNextStep, 0, 0, 0},
      {refalrts::icProfilerStopSentence, 0, 0, 0},
      {refalrts::icOnFailGoTo, +19, 0, 0},
      // ( e.idx ) ')' e.idx
      // </0 & ReadRegexp/4 (/7 e.Accum#1/5 )/8 ')'/9 e.Text#1/2 >/1
      {refalrts::icSave, 0, 13, 2},
      {refalrts::icCharLeftSave, 9, static_cast<unsigned char>(')'), 13},
      // closed e.Accum#1 as range 5
      // closed e.Text#1 as range 13(2)
      //DEBUG: e.Accum#1: 5
      //DEBUG: e.Text#1: 2
      {refalrts::icEmptyResult, 0, 0, 0},
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ } Tile{ AsIs: (/7 } # TSpecChar/10 Tile{ AsIs: e.Accum#1/5 } ')'/11 )/12 Tile{ AsIs: </0 AsIs: & ReadRegexp/4 } Tile{ HalfReuse: (/8 HalfReuse: )/9 AsIs: e.Text#1/13(2) AsIs: >/1 ]] }
      {refalrts::icAllocIdent, 0, 2, 10},
      {refalrts::icAllocChar, 0, ')', 11},
      {refalrts::icAllocBracket, 0, refalrts::ibCloseBracket, 12},
      {refalrts::icReinitBracket, 0, refalrts::ibOpenBracket, 8},
      {refalrts::icReinitBracket, 0, refalrts::ibCloseBracket, 9},
      {refalrts::icPushStack, 0, 0, 1},
      {refalrts::icPushStack, 0, 0, 0},
      {refalrts::icLinkBrackets, 8, 9, 0},
      {refalrts::icLinkBrackets, 7, 12, 0},
      {refalrts::icSetRes, 0, 0, 8},
      {refalrts::icSpliceTile, 0, 4, 0},
      {refalrts::icSpliceTile, 11, 12, 0},
      {refalrts::icSpliceEVar, 0, 0, 5},
      {refalrts::icSpliceTile, 10, 10, 0},
      {refalrts::icSpliceTile, 7, 7, 0},
      {refalrts::icNextStep, 0, 0, 0},
      {refalrts::icProfilerStopSentence, 0, 0, 0},
      {refalrts::icOnFailGoTo, +19, 0, 0},
      // ( e.idx ) '|' e.idx
      // </0 & ReadRegexp/4 (/7 e.Accum#1/5 )/8 '|'/9 e.Text#1/2 >/1
      {refalrts::icSave, 0, 13, 2},
      {refalrts::icCharLeftSave, 9, static_cast<unsigned char>('|'), 13},
      // closed e.Accum#1 as range 5
      // closed e.Text#1 as range 13(2)
      //DEBUG: e.Accum#1: 5
      //DEBUG: e.Text#1: 2
      {refalrts::icEmptyResult, 0, 0, 0},
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ } Tile{ AsIs: (/7 } # TSpecChar/10 Tile{ AsIs: e.Accum#1/5 } '|'/11 )/12 Tile{ AsIs: </0 AsIs: & ReadRegexp/4 } Tile{ HalfReuse: (/8 HalfReuse: )/9 AsIs: e.Text#1/13(2) AsIs: >/1 ]] }
      {refalrts::icAllocIdent, 0, 2, 10},
      {refalrts::icAllocChar, 0, '|', 11},
      {refalrts::icAllocBracket, 0, refalrts::ibCloseBracket, 12},
      {refalrts::icReinitBracket, 0, refalrts::ibOpenBracket, 8},
      {refalrts::icReinitBracket, 0, refalrts::ibCloseBracket, 9},
      {refalrts::icPushStack, 0, 0, 1},
      {refalrts::icPushStack, 0, 0, 0},
      {refalrts::icLinkBrackets, 8, 9, 0},
      {refalrts::icLinkBrackets, 7, 12, 0},
      {refalrts::icSetRes, 0, 0, 8},
      {refalrts::icSpliceTile, 0, 4, 0},
      {refalrts::icSpliceTile, 11, 12, 0},
      {refalrts::icSpliceEVar, 0, 0, 5},
      {refalrts::icSpliceTile, 10, 10, 0},
      {refalrts::icSpliceTile, 7, 7, 0},
      {refalrts::icNextStep, 0, 0, 0},
      {refalrts::icProfilerStopSentence, 0, 0, 0},
      {refalrts::icOnFailGoTo, +19, 0, 0},
      // ( e.idx ) '^' e.idx
      // </0 & ReadRegexp/4 (/7 e.Accum#1/5 )/8 '^'/9 e.Text#1/2 >/1
      {refalrts::icSave, 0, 13, 2},
      {refalrts::icCharLeftSave, 9, static_cast<unsigned char>('^'), 13},
      // closed e.Accum#1 as range 5
      // closed e.Text#1 as range 13(2)
      //DEBUG: e.Accum#1: 5
      //DEBUG: e.Text#1: 2
      {refalrts::icEmptyResult, 0, 0, 0},
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ } Tile{ AsIs: (/7 } # TSpecChar/10 Tile{ AsIs: e.Accum#1/5 } '^'/11 )/12 Tile{ AsIs: </0 AsIs: & ReadRegexp/4 } Tile{ HalfReuse: (/8 HalfReuse: )/9 AsIs: e.Text#1/13(2) AsIs: >/1 ]] }
      {refalrts::icAllocIdent, 0, 2, 10},
      {refalrts::icAllocChar, 0, '^', 11},
      {refalrts::icAllocBracket, 0, refalrts::ibCloseBracket, 12},
      {refalrts::icReinitBracket, 0, refalrts::ibOpenBracket, 8},
      {refalrts::icReinitBracket, 0, refalrts::ibCloseBracket, 9},
      {refalrts::icPushStack, 0, 0, 1},
      {refalrts::icPushStack, 0, 0, 0},
      {refalrts::icLinkBrackets, 8, 9, 0},
      {refalrts::icLinkBrackets, 7, 12, 0},
      {refalrts::icSetRes, 0, 0, 8},
      {refalrts::icSpliceTile, 0, 4, 0},
      {refalrts::icSpliceTile, 11, 12, 0},
      {refalrts::icSpliceEVar, 0, 0, 5},
      {refalrts::icSpliceTile, 10, 10, 0},
      {refalrts::icSpliceTile, 7, 7, 0},
      {refalrts::icNextStep, 0, 0, 0},
      {refalrts::icProfilerStopSentence, 0, 0, 0},
      {refalrts::icOnFailGoTo, +19, 0, 0},
      // ( e.idx ) '$' e.idx
      // </0 & ReadRegexp/4 (/7 e.Accum#1/5 )/8 '$'/9 e.Text#1/2 >/1
      {refalrts::icSave, 0, 13, 2},
      {refalrts::icCharLeftSave, 9, static_cast<unsigned char>('$'), 13},
      // closed e.Accum#1 as range 5
      // closed e.Text#1 as range 13(2)
      //DEBUG: e.Accum#1: 5
      //DEBUG: e.Text#1: 2
      {refalrts::icEmptyResult, 0, 0, 0},
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ } Tile{ AsIs: (/7 } # TSpecChar/10 Tile{ AsIs: e.Accum#1/5 } '$'/11 )/12 Tile{ AsIs: </0 AsIs: & ReadRegexp/4 } Tile{ HalfReuse: (/8 HalfReuse: )/9 AsIs: e.Text#1/13(2) AsIs: >/1 ]] }
      {refalrts::icAllocIdent, 0, 2, 10},
      {refalrts::icAllocChar, 0, '$', 11},
      {refalrts::icAllocBracket, 0, refalrts::ibCloseBracket, 12},
      {refalrts::icReinitBracket, 0, refalrts::ibOpenBracket, 8},
      {refalrts::icReinitBracket, 0, refalrts::ibCloseBracket, 9},
      {refalrts::icPushStack, 0, 0, 1},
      {refalrts::icPushStack, 0, 0, 0},
      {refalrts::icLinkBrackets, 8, 9, 0},
      {refalrts::icLinkBrackets, 7, 12, 0},
      {refalrts::icSetRes, 0, 0, 8},
      {refalrts::icSpliceTile, 0, 4, 0},
      {refalrts::icSpliceTile, 11, 12, 0},
      {refalrts::icSpliceEVar, 0, 0, 5},
      {refalrts::icSpliceTile, 10, 10, 0},
      {refalrts::icSpliceTile, 7, 7, 0},
      {refalrts::icNextStep, 0, 0, 0},
      {refalrts::icProfilerStopSentence, 0, 0, 0},
      {refalrts::icOnFailGoTo, +12, 0, 0},
      // ( e.idx ) '{' e.idx
      // </0 & ReadRegexp/4 (/7 e.Accum#1/5 )/8 '{'/9 e.Text#1/2 >/1
      {refalrts::icSave, 0, 13, 2},
      {refalrts::icCharLeftSave, 9, static_cast<unsigned char>('{'), 13},
      // closed e.Accum#1 as range 5
      // closed e.Text#1 as range 13(2)
      //DEBUG: e.Accum#1: 5
      //DEBUG: e.Text#1: 2
      {refalrts::icEmptyResult, 0, 0, 0},
      //TRASH: {REMOVED TILE} (/7 e.Accum#1/5 {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 Reuse: & ReadInclude/4 } Tile{ HalfReuse: (/8 HalfReuse: )/9 AsIs: e.Text#1/13(2) AsIs: >/1 ]] }
      {refalrts::icUpdateFunc, 0, 0, 4},
      {refalrts::icReinitBracket, 0, refalrts::ibOpenBracket, 8},
      {refalrts::icReinitBracket, 0, refalrts::ibCloseBracket, 9},
      {refalrts::icPushStack, 0, 0, 1},
      {refalrts::icPushStack, 0, 0, 0},
      {refalrts::icLinkBrackets, 8, 9, 0},
      {refalrts::icSetRes, 0, 0, 8},
      {refalrts::icTrash, 0, 0, 4},
      {refalrts::icNextStep, 0, 0, 0},
      {refalrts::icProfilerStopSentence, 0, 0, 0},
      {refalrts::icOnFailGoTo, +19, 0, 0},
      // ( e.idx ) s.idx e.idx
      // </0 & ReadRegexp/4 (/7 e.Accum#1/5 )/8 s.Any#1/9 e.Text#1/2 >/1
      // closed e.Accum#1 as range 5
      {refalrts::icSave, 0, 13, 2},
      {refalrts::icsVarLeft, 0, 9, 13},
      // closed e.Text#1 as range 13(2)
      //DEBUG: e.Accum#1: 5
      //DEBUG: s.Any#1: 9
      //DEBUG: e.Text#1: 2
      {refalrts::icEmptyResult, 0, 0, 0},
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ } (/10 # TChar/11 Tile{ AsIs: e.Accum#1/5 } Tile{ AsIs: s.Any#1/9 } Tile{ AsIs: )/8 } Tile{ AsIs: </0 AsIs: & ReadRegexp/4 AsIs: (/7 } )/12 Tile{ AsIs: e.Text#1/13(2) } Tile{ AsIs: >/1 ]] }
      {refalrts::icAllocBracket, 0, refalrts::ibOpenBracket, 10},
      {refalrts::icAllocIdent, 0, 1, 11},
      {refalrts::icAllocBracket, 0, refalrts::ibCloseBracket, 12},
      {refalrts::icPushStack, 0, 0, 1},
      {refalrts::icPushStack, 0, 0, 0},
      {refalrts::icLinkBrackets, 7, 12, 0},
      {refalrts::icLinkBrackets, 10, 8, 0},
      {refalrts::icSetRes, 0, 0, 1},
      {refalrts::icSpliceEVar, 0, 0, 13},
      {refalrts::icSpliceTile, 12, 12, 0},
      {refalrts::icSpliceTile, 0, 7, 0},
      {refalrts::icSpliceTile, 8, 8, 0},
      {refalrts::icSpliceTile, 9, 9, 0},
      {refalrts::icSpliceEVar, 0, 0, 5},
      {refalrts::icSpliceTile, 10, 11, 0},
      {refalrts::icNextStep, 0, 0, 0},
      {refalrts::icProfilerStopSentence, 0, 0, 0},
      // ( e.idx )
      // </0 & ReadRegexp/4 (/7 e.Accum#1/5 )/8 >/1
      {refalrts::icEmpty, 0, 0, 2},
      // closed e.Accum#1 as range 5
      //DEBUG: e.Accum#1: 5
      {refalrts::icEmptyResult, 0, 0, 0},
      //TRASH: {REMOVED TILE} e.Accum#1/5 {REMOVED TILE}
      //RESULT: Tile{ [[ HalfReuse: (/0 HalfReuse: # TokenError/4 HalfReuse: 'U'/7 }"nexpected EOF in Regex"/9 Tile{ HalfReuse: 'p'/8 HalfReuse: )/1 ]] }
      {refalrts::icAllocString, 0, 0, 9},
      {refalrts::icReinitBracket, 0, refalrts::ibOpenBracket, 0},
      {refalrts::icReinitIdent, 0, 0, 4},
      {refalrts::icReinitChar, 0, 'U', 7},
      {refalrts::icReinitChar, 0, 'p', 8},
      {refalrts::icReinitBracket, 0, refalrts::ibCloseBracket, 1},
      {refalrts::icLinkBrackets, 0, 1, 0},
      {refalrts::icSetRes, 0, 0, 8},
      {refalrts::icSpliceTile, 9, 10, 0},
      {refalrts::icTrash, 0, 0, 7},
      {refalrts::icNextStep, 0, 0, 0},
      {refalrts::icEnd, 0, 0, 0}
    };
  } // namespace scope_ReadRegexp

} // unnamed namespace

namespace /* unnamed */ {
refalrts::RASLFunction descr_ReadRegexp(
  "ReadRegexp",
  scope_ReadRegexp::raa,
  scope_ReadRegexp::functions,
  scope_ReadRegexp::idents,
  scope_ReadRegexp::numbers,
  scope_ReadRegexp::strings,
  scope_ReadRegexp::filename
);
refalrts::RefalFunction& ReadRegexp = descr_ReadRegexp;

} // unnamed namespace

#else
static refalrts::FnResult func_ReadRegexp(refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  refalrts::this_is_generated_function();
  // issue here memory for vars with 15 elems
  refalrts::Iter context[15];
  refalrts::zeros( context, 15 );
  //FAST GEN: e.$
  //GLOBAL GEN: ( e.$ ) e.$
  // </0 & ReadRegexp/4 (/7 e.idxB#0/5 )/8 e.idxT#0/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  context[5] = 0;
  context[6] = 0;
  context[7] = refalrts::brackets_left( context[5], context[6], context[2], context[3] );
  if( ! context[7] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[7], context[8]);
  // closed e.idxB#0 as range 5
  // closed e.idxT#0 as range 2
  do {
    // ( e.idx ) '/' e.idx
    // </0 & ReadRegexp/4 (/7 e.Accum#1/5 )/8 '/'/9 e.Text#1/2 >/1
    context[13] = context[2];
    context[14] = context[3];
    context[9] = refalrts::char_left( '/', context[13], context[14] );
    if( ! context[9] )
      continue;
    // closed e.Accum#1 as range 5
    // closed e.Text#1 as range 13(2)
    //DEBUG: e.Accum#1: 5
    //DEBUG: e.Text#1: 2

    refalrts::reset_allocator();
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ HalfReuse: (/0 HalfReuse: # TEndRegexp/4 } Tile{ AsIs: e.Accum#1/5 } '/'/10 Tile{ HalfReuse: )/7 } </11 & Root/12 Tile{ HalfReuse: (/8 HalfReuse: )/9 AsIs: e.Text#1/13(2) AsIs: >/1 ]] }
    if( ! refalrts::alloc_char( context[10], '/' ) )
      return refalrts::cNoMemory;
    if( ! refalrts::alloc_open_call( context[11] ) )
      return refalrts::cNoMemory;
    if( ! refalrts::alloc_name( context[12], & Root ) )
      return refalrts::cNoMemory;
    refalrts::reinit_open_bracket( context[0] );
    refalrts::reinit_ident( context[4], & ident_TEndRegexp<int>::name );
    refalrts::reinit_close_bracket( context[7] );
    refalrts::reinit_open_bracket( context[8] );
    refalrts::reinit_close_bracket( context[9] );
    refalrts::push_stack( context[1] );
    refalrts::push_stack( context[11] );
    refalrts::link_brackets( context[8], context[9] );
    refalrts::link_brackets( context[0], context[7] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[8];
    res = refalrts::splice_evar( res, context[11], context[12] );
    res = refalrts::splice_evar( res, context[7], context[7] );
    res = refalrts::splice_evar( res, context[10], context[10] );
    res = refalrts::splice_evar( res, context[5], context[6] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence();

  do {
    // ( e.idx ) '\n' e.idx
    // </0 & ReadRegexp/4 (/7 e.Accum#1/5 )/8 '\n'/9 e.Text#1/2 >/1
    context[13] = context[2];
    context[14] = context[3];
    context[9] = refalrts::char_left( '\n', context[13], context[14] );
    if( ! context[9] )
      continue;
    // closed e.Accum#1 as range 5
    // closed e.Text#1 as range 13(2)
    //DEBUG: e.Accum#1: 5
    //DEBUG: e.Text#1: 2

    refalrts::reset_allocator();
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ HalfReuse: (/0 HalfReuse: # TNewLine/4 } Tile{ AsIs: e.Accum#1/5 } '\n'/10 Tile{ HalfReuse: )/7 } </11 & Root/12 Tile{ HalfReuse: (/8 HalfReuse: )/9 AsIs: e.Text#1/13(2) AsIs: >/1 ]] }
    if( ! refalrts::alloc_char( context[10], '\n' ) )
      return refalrts::cNoMemory;
    if( ! refalrts::alloc_open_call( context[11] ) )
      return refalrts::cNoMemory;
    if( ! refalrts::alloc_name( context[12], & Root ) )
      return refalrts::cNoMemory;
    refalrts::reinit_open_bracket( context[0] );
    refalrts::reinit_ident( context[4], & ident_TNewLine<int>::name );
    refalrts::reinit_close_bracket( context[7] );
    refalrts::reinit_open_bracket( context[8] );
    refalrts::reinit_close_bracket( context[9] );
    refalrts::push_stack( context[1] );
    refalrts::push_stack( context[11] );
    refalrts::link_brackets( context[8], context[9] );
    refalrts::link_brackets( context[0], context[7] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[8];
    res = refalrts::splice_evar( res, context[11], context[12] );
    res = refalrts::splice_evar( res, context[7], context[7] );
    res = refalrts::splice_evar( res, context[10], context[10] );
    res = refalrts::splice_evar( res, context[5], context[6] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence();

  do {
    // ( e.idx ) '\\' e.idx
    // </0 & ReadRegexp/4 (/7 e.Accum#1/5 )/8 '\\'/9 e.Text#1/2 >/1
    context[13] = context[2];
    context[14] = context[3];
    context[9] = refalrts::char_left( '\\', context[13], context[14] );
    if( ! context[9] )
      continue;
    // closed e.Accum#1 as range 5
    // closed e.Text#1 as range 13(2)
    //DEBUG: e.Accum#1: 5
    //DEBUG: e.Text#1: 2

    refalrts::reset_allocator();
    //TRASH: {REMOVED TILE} (/7 e.Accum#1/5 {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 Reuse: & EscRegexp/4 } Tile{ HalfReuse: (/8 HalfReuse: )/9 AsIs: e.Text#1/13(2) AsIs: >/1 ]] }
    refalrts::update_name( context[4], & EscRegexp );
    refalrts::reinit_open_bracket( context[8] );
    refalrts::reinit_close_bracket( context[9] );
    refalrts::push_stack( context[1] );
    refalrts::push_stack( context[0] );
    refalrts::link_brackets( context[8], context[9] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[8];
    refalrts::use( res );
    refalrts::splice_to_freelist_open( context[4], res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence();

  do {
    // ( e.idx ) '[' e.idx
    // </0 & ReadRegexp/4 (/7 e.Accum#1/5 )/8 '['/9 e.Text#1/2 >/1
    context[13] = context[2];
    context[14] = context[3];
    context[9] = refalrts::char_left( '[', context[13], context[14] );
    if( ! context[9] )
      continue;
    // closed e.Accum#1 as range 5
    // closed e.Text#1 as range 13(2)
    //DEBUG: e.Accum#1: 5
    //DEBUG: e.Text#1: 2

    refalrts::reset_allocator();
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ HalfReuse: (/0 HalfReuse: # TStartGroup/4 } Tile{ AsIs: e.Accum#1/5 } '['/10 Tile{ HalfReuse: )/7 } </11 & StartGroup/12 Tile{ HalfReuse: (/8 HalfReuse: )/9 AsIs: e.Text#1/13(2) AsIs: >/1 ]] }
    if( ! refalrts::alloc_char( context[10], '[' ) )
      return refalrts::cNoMemory;
    if( ! refalrts::alloc_open_call( context[11] ) )
      return refalrts::cNoMemory;
    if( ! refalrts::alloc_name( context[12], & StartGroup ) )
      return refalrts::cNoMemory;
    refalrts::reinit_open_bracket( context[0] );
    refalrts::reinit_ident( context[4], & ident_TStartGroup<int>::name );
    refalrts::reinit_close_bracket( context[7] );
    refalrts::reinit_open_bracket( context[8] );
    refalrts::reinit_close_bracket( context[9] );
    refalrts::push_stack( context[1] );
    refalrts::push_stack( context[11] );
    refalrts::link_brackets( context[8], context[9] );
    refalrts::link_brackets( context[0], context[7] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[8];
    res = refalrts::splice_evar( res, context[11], context[12] );
    res = refalrts::splice_evar( res, context[7], context[7] );
    res = refalrts::splice_evar( res, context[10], context[10] );
    res = refalrts::splice_evar( res, context[5], context[6] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence();

  do {
    // ( e.idx ) '?' e.idx
    // </0 & ReadRegexp/4 (/7 e.Accum#1/5 )/8 '?'/9 e.Text#1/2 >/1
    context[13] = context[2];
    context[14] = context[3];
    context[9] = refalrts::char_left( '?', context[13], context[14] );
    if( ! context[9] )
      continue;
    // closed e.Accum#1 as range 5
    // closed e.Text#1 as range 13(2)
    //DEBUG: e.Accum#1: 5
    //DEBUG: e.Text#1: 2

    refalrts::reset_allocator();
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ AsIs: (/7 } # TQuantifier/10 Tile{ AsIs: e.Accum#1/5 } '?'/11 )/12 Tile{ AsIs: </0 AsIs: & ReadRegexp/4 } Tile{ HalfReuse: (/8 HalfReuse: )/9 AsIs: e.Text#1/13(2) AsIs: >/1 ]] }
    if( ! refalrts::alloc_ident( context[10], & ident_TQuantifier<int>::name ) )
      return refalrts::cNoMemory;
    if( ! refalrts::alloc_char( context[11], '?' ) )
      return refalrts::cNoMemory;
    if( ! refalrts::alloc_close_bracket( context[12] ) )
      return refalrts::cNoMemory;
    refalrts::reinit_open_bracket( context[8] );
    refalrts::reinit_close_bracket( context[9] );
    refalrts::push_stack( context[1] );
    refalrts::push_stack( context[0] );
    refalrts::link_brackets( context[8], context[9] );
    refalrts::link_brackets( context[7], context[12] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[8];
    res = refalrts::splice_evar( res, context[0], context[4] );
    res = refalrts::splice_evar( res, context[11], context[12] );
    res = refalrts::splice_evar( res, context[5], context[6] );
    res = refalrts::splice_evar( res, context[10], context[10] );
    res = refalrts::splice_evar( res, context[7], context[7] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence();

  do {
    // ( e.idx ) '*' e.idx
    // </0 & ReadRegexp/4 (/7 e.Accum#1/5 )/8 '*'/9 e.Text#1/2 >/1
    context[13] = context[2];
    context[14] = context[3];
    context[9] = refalrts::char_left( '*', context[13], context[14] );
    if( ! context[9] )
      continue;
    // closed e.Accum#1 as range 5
    // closed e.Text#1 as range 13(2)
    //DEBUG: e.Accum#1: 5
    //DEBUG: e.Text#1: 2

    refalrts::reset_allocator();
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ AsIs: (/7 } # TQuantifier/10 Tile{ AsIs: e.Accum#1/5 } '*'/11 )/12 Tile{ AsIs: </0 AsIs: & ReadRegexp/4 } Tile{ HalfReuse: (/8 HalfReuse: )/9 AsIs: e.Text#1/13(2) AsIs: >/1 ]] }
    if( ! refalrts::alloc_ident( context[10], & ident_TQuantifier<int>::name ) )
      return refalrts::cNoMemory;
    if( ! refalrts::alloc_char( context[11], '*' ) )
      return refalrts::cNoMemory;
    if( ! refalrts::alloc_close_bracket( context[12] ) )
      return refalrts::cNoMemory;
    refalrts::reinit_open_bracket( context[8] );
    refalrts::reinit_close_bracket( context[9] );
    refalrts::push_stack( context[1] );
    refalrts::push_stack( context[0] );
    refalrts::link_brackets( context[8], context[9] );
    refalrts::link_brackets( context[7], context[12] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[8];
    res = refalrts::splice_evar( res, context[0], context[4] );
    res = refalrts::splice_evar( res, context[11], context[12] );
    res = refalrts::splice_evar( res, context[5], context[6] );
    res = refalrts::splice_evar( res, context[10], context[10] );
    res = refalrts::splice_evar( res, context[7], context[7] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence();

  do {
    // ( e.idx ) '+' e.idx
    // </0 & ReadRegexp/4 (/7 e.Accum#1/5 )/8 '+'/9 e.Text#1/2 >/1
    context[13] = context[2];
    context[14] = context[3];
    context[9] = refalrts::char_left( '+', context[13], context[14] );
    if( ! context[9] )
      continue;
    // closed e.Accum#1 as range 5
    // closed e.Text#1 as range 13(2)
    //DEBUG: e.Accum#1: 5
    //DEBUG: e.Text#1: 2

    refalrts::reset_allocator();
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ AsIs: (/7 } # TQuantifier/10 Tile{ AsIs: e.Accum#1/5 } '+'/11 )/12 Tile{ AsIs: </0 AsIs: & ReadRegexp/4 } Tile{ HalfReuse: (/8 HalfReuse: )/9 AsIs: e.Text#1/13(2) AsIs: >/1 ]] }
    if( ! refalrts::alloc_ident( context[10], & ident_TQuantifier<int>::name ) )
      return refalrts::cNoMemory;
    if( ! refalrts::alloc_char( context[11], '+' ) )
      return refalrts::cNoMemory;
    if( ! refalrts::alloc_close_bracket( context[12] ) )
      return refalrts::cNoMemory;
    refalrts::reinit_open_bracket( context[8] );
    refalrts::reinit_close_bracket( context[9] );
    refalrts::push_stack( context[1] );
    refalrts::push_stack( context[0] );
    refalrts::link_brackets( context[8], context[9] );
    refalrts::link_brackets( context[7], context[12] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[8];
    res = refalrts::splice_evar( res, context[0], context[4] );
    res = refalrts::splice_evar( res, context[11], context[12] );
    res = refalrts::splice_evar( res, context[5], context[6] );
    res = refalrts::splice_evar( res, context[10], context[10] );
    res = refalrts::splice_evar( res, context[7], context[7] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence();

  do {
    // ( e.idx ) '.' e.idx
    // </0 & ReadRegexp/4 (/7 e.Accum#1/5 )/8 '.'/9 e.Text#1/2 >/1
    context[13] = context[2];
    context[14] = context[3];
    context[9] = refalrts::char_left( '.', context[13], context[14] );
    if( ! context[9] )
      continue;
    // closed e.Accum#1 as range 5
    // closed e.Text#1 as range 13(2)
    //DEBUG: e.Accum#1: 5
    //DEBUG: e.Text#1: 2

    refalrts::reset_allocator();
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ AsIs: (/7 } # TSpecChar/10 Tile{ AsIs: e.Accum#1/5 } '.'/11 )/12 Tile{ AsIs: </0 AsIs: & ReadRegexp/4 } Tile{ HalfReuse: (/8 HalfReuse: )/9 AsIs: e.Text#1/13(2) AsIs: >/1 ]] }
    if( ! refalrts::alloc_ident( context[10], & ident_TSpecChar<int>::name ) )
      return refalrts::cNoMemory;
    if( ! refalrts::alloc_char( context[11], '.' ) )
      return refalrts::cNoMemory;
    if( ! refalrts::alloc_close_bracket( context[12] ) )
      return refalrts::cNoMemory;
    refalrts::reinit_open_bracket( context[8] );
    refalrts::reinit_close_bracket( context[9] );
    refalrts::push_stack( context[1] );
    refalrts::push_stack( context[0] );
    refalrts::link_brackets( context[8], context[9] );
    refalrts::link_brackets( context[7], context[12] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[8];
    res = refalrts::splice_evar( res, context[0], context[4] );
    res = refalrts::splice_evar( res, context[11], context[12] );
    res = refalrts::splice_evar( res, context[5], context[6] );
    res = refalrts::splice_evar( res, context[10], context[10] );
    res = refalrts::splice_evar( res, context[7], context[7] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence();

  do {
    // ( e.idx ) '(' e.idx
    // </0 & ReadRegexp/4 (/7 e.Accum#1/5 )/8 '('/9 e.Text#1/2 >/1
    context[13] = context[2];
    context[14] = context[3];
    context[9] = refalrts::char_left( '(', context[13], context[14] );
    if( ! context[9] )
      continue;
    // closed e.Accum#1 as range 5
    // closed e.Text#1 as range 13(2)
    //DEBUG: e.Accum#1: 5
    //DEBUG: e.Text#1: 2

    refalrts::reset_allocator();
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ AsIs: (/7 } # TSpecChar/10 Tile{ AsIs: e.Accum#1/5 } '('/11 )/12 Tile{ AsIs: </0 AsIs: & ReadRegexp/4 } Tile{ HalfReuse: (/8 HalfReuse: )/9 AsIs: e.Text#1/13(2) AsIs: >/1 ]] }
    if( ! refalrts::alloc_ident( context[10], & ident_TSpecChar<int>::name ) )
      return refalrts::cNoMemory;
    if( ! refalrts::alloc_char( context[11], '(' ) )
      return refalrts::cNoMemory;
    if( ! refalrts::alloc_close_bracket( context[12] ) )
      return refalrts::cNoMemory;
    refalrts::reinit_open_bracket( context[8] );
    refalrts::reinit_close_bracket( context[9] );
    refalrts::push_stack( context[1] );
    refalrts::push_stack( context[0] );
    refalrts::link_brackets( context[8], context[9] );
    refalrts::link_brackets( context[7], context[12] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[8];
    res = refalrts::splice_evar( res, context[0], context[4] );
    res = refalrts::splice_evar( res, context[11], context[12] );
    res = refalrts::splice_evar( res, context[5], context[6] );
    res = refalrts::splice_evar( res, context[10], context[10] );
    res = refalrts::splice_evar( res, context[7], context[7] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence();

  do {
    // ( e.idx ) ')' e.idx
    // </0 & ReadRegexp/4 (/7 e.Accum#1/5 )/8 ')'/9 e.Text#1/2 >/1
    context[13] = context[2];
    context[14] = context[3];
    context[9] = refalrts::char_left( ')', context[13], context[14] );
    if( ! context[9] )
      continue;
    // closed e.Accum#1 as range 5
    // closed e.Text#1 as range 13(2)
    //DEBUG: e.Accum#1: 5
    //DEBUG: e.Text#1: 2

    refalrts::reset_allocator();
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ AsIs: (/7 } # TSpecChar/10 Tile{ AsIs: e.Accum#1/5 } ')'/11 )/12 Tile{ AsIs: </0 AsIs: & ReadRegexp/4 } Tile{ HalfReuse: (/8 HalfReuse: )/9 AsIs: e.Text#1/13(2) AsIs: >/1 ]] }
    if( ! refalrts::alloc_ident( context[10], & ident_TSpecChar<int>::name ) )
      return refalrts::cNoMemory;
    if( ! refalrts::alloc_char( context[11], ')' ) )
      return refalrts::cNoMemory;
    if( ! refalrts::alloc_close_bracket( context[12] ) )
      return refalrts::cNoMemory;
    refalrts::reinit_open_bracket( context[8] );
    refalrts::reinit_close_bracket( context[9] );
    refalrts::push_stack( context[1] );
    refalrts::push_stack( context[0] );
    refalrts::link_brackets( context[8], context[9] );
    refalrts::link_brackets( context[7], context[12] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[8];
    res = refalrts::splice_evar( res, context[0], context[4] );
    res = refalrts::splice_evar( res, context[11], context[12] );
    res = refalrts::splice_evar( res, context[5], context[6] );
    res = refalrts::splice_evar( res, context[10], context[10] );
    res = refalrts::splice_evar( res, context[7], context[7] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence();

  do {
    // ( e.idx ) '|' e.idx
    // </0 & ReadRegexp/4 (/7 e.Accum#1/5 )/8 '|'/9 e.Text#1/2 >/1
    context[13] = context[2];
    context[14] = context[3];
    context[9] = refalrts::char_left( '|', context[13], context[14] );
    if( ! context[9] )
      continue;
    // closed e.Accum#1 as range 5
    // closed e.Text#1 as range 13(2)
    //DEBUG: e.Accum#1: 5
    //DEBUG: e.Text#1: 2

    refalrts::reset_allocator();
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ AsIs: (/7 } # TSpecChar/10 Tile{ AsIs: e.Accum#1/5 } '|'/11 )/12 Tile{ AsIs: </0 AsIs: & ReadRegexp/4 } Tile{ HalfReuse: (/8 HalfReuse: )/9 AsIs: e.Text#1/13(2) AsIs: >/1 ]] }
    if( ! refalrts::alloc_ident( context[10], & ident_TSpecChar<int>::name ) )
      return refalrts::cNoMemory;
    if( ! refalrts::alloc_char( context[11], '|' ) )
      return refalrts::cNoMemory;
    if( ! refalrts::alloc_close_bracket( context[12] ) )
      return refalrts::cNoMemory;
    refalrts::reinit_open_bracket( context[8] );
    refalrts::reinit_close_bracket( context[9] );
    refalrts::push_stack( context[1] );
    refalrts::push_stack( context[0] );
    refalrts::link_brackets( context[8], context[9] );
    refalrts::link_brackets( context[7], context[12] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[8];
    res = refalrts::splice_evar( res, context[0], context[4] );
    res = refalrts::splice_evar( res, context[11], context[12] );
    res = refalrts::splice_evar( res, context[5], context[6] );
    res = refalrts::splice_evar( res, context[10], context[10] );
    res = refalrts::splice_evar( res, context[7], context[7] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence();

  do {
    // ( e.idx ) '^' e.idx
    // </0 & ReadRegexp/4 (/7 e.Accum#1/5 )/8 '^'/9 e.Text#1/2 >/1
    context[13] = context[2];
    context[14] = context[3];
    context[9] = refalrts::char_left( '^', context[13], context[14] );
    if( ! context[9] )
      continue;
    // closed e.Accum#1 as range 5
    // closed e.Text#1 as range 13(2)
    //DEBUG: e.Accum#1: 5
    //DEBUG: e.Text#1: 2

    refalrts::reset_allocator();
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ AsIs: (/7 } # TSpecChar/10 Tile{ AsIs: e.Accum#1/5 } '^'/11 )/12 Tile{ AsIs: </0 AsIs: & ReadRegexp/4 } Tile{ HalfReuse: (/8 HalfReuse: )/9 AsIs: e.Text#1/13(2) AsIs: >/1 ]] }
    if( ! refalrts::alloc_ident( context[10], & ident_TSpecChar<int>::name ) )
      return refalrts::cNoMemory;
    if( ! refalrts::alloc_char( context[11], '^' ) )
      return refalrts::cNoMemory;
    if( ! refalrts::alloc_close_bracket( context[12] ) )
      return refalrts::cNoMemory;
    refalrts::reinit_open_bracket( context[8] );
    refalrts::reinit_close_bracket( context[9] );
    refalrts::push_stack( context[1] );
    refalrts::push_stack( context[0] );
    refalrts::link_brackets( context[8], context[9] );
    refalrts::link_brackets( context[7], context[12] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[8];
    res = refalrts::splice_evar( res, context[0], context[4] );
    res = refalrts::splice_evar( res, context[11], context[12] );
    res = refalrts::splice_evar( res, context[5], context[6] );
    res = refalrts::splice_evar( res, context[10], context[10] );
    res = refalrts::splice_evar( res, context[7], context[7] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence();

  do {
    // ( e.idx ) '$' e.idx
    // </0 & ReadRegexp/4 (/7 e.Accum#1/5 )/8 '$'/9 e.Text#1/2 >/1
    context[13] = context[2];
    context[14] = context[3];
    context[9] = refalrts::char_left( '$', context[13], context[14] );
    if( ! context[9] )
      continue;
    // closed e.Accum#1 as range 5
    // closed e.Text#1 as range 13(2)
    //DEBUG: e.Accum#1: 5
    //DEBUG: e.Text#1: 2

    refalrts::reset_allocator();
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ AsIs: (/7 } # TSpecChar/10 Tile{ AsIs: e.Accum#1/5 } '$'/11 )/12 Tile{ AsIs: </0 AsIs: & ReadRegexp/4 } Tile{ HalfReuse: (/8 HalfReuse: )/9 AsIs: e.Text#1/13(2) AsIs: >/1 ]] }
    if( ! refalrts::alloc_ident( context[10], & ident_TSpecChar<int>::name ) )
      return refalrts::cNoMemory;
    if( ! refalrts::alloc_char( context[11], '$' ) )
      return refalrts::cNoMemory;
    if( ! refalrts::alloc_close_bracket( context[12] ) )
      return refalrts::cNoMemory;
    refalrts::reinit_open_bracket( context[8] );
    refalrts::reinit_close_bracket( context[9] );
    refalrts::push_stack( context[1] );
    refalrts::push_stack( context[0] );
    refalrts::link_brackets( context[8], context[9] );
    refalrts::link_brackets( context[7], context[12] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[8];
    res = refalrts::splice_evar( res, context[0], context[4] );
    res = refalrts::splice_evar( res, context[11], context[12] );
    res = refalrts::splice_evar( res, context[5], context[6] );
    res = refalrts::splice_evar( res, context[10], context[10] );
    res = refalrts::splice_evar( res, context[7], context[7] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence();

  do {
    // ( e.idx ) '{' e.idx
    // </0 & ReadRegexp/4 (/7 e.Accum#1/5 )/8 '{'/9 e.Text#1/2 >/1
    context[13] = context[2];
    context[14] = context[3];
    context[9] = refalrts::char_left( '{', context[13], context[14] );
    if( ! context[9] )
      continue;
    // closed e.Accum#1 as range 5
    // closed e.Text#1 as range 13(2)
    //DEBUG: e.Accum#1: 5
    //DEBUG: e.Text#1: 2

    refalrts::reset_allocator();
    //TRASH: {REMOVED TILE} (/7 e.Accum#1/5 {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 Reuse: & ReadInclude/4 } Tile{ HalfReuse: (/8 HalfReuse: )/9 AsIs: e.Text#1/13(2) AsIs: >/1 ]] }
    refalrts::update_name( context[4], & ReadInclude );
    refalrts::reinit_open_bracket( context[8] );
    refalrts::reinit_close_bracket( context[9] );
    refalrts::push_stack( context[1] );
    refalrts::push_stack( context[0] );
    refalrts::link_brackets( context[8], context[9] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[8];
    refalrts::use( res );
    refalrts::splice_to_freelist_open( context[4], res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence();

  do {
    // ( e.idx ) s.idx e.idx
    // </0 & ReadRegexp/4 (/7 e.Accum#1/5 )/8 s.Any#1/9 e.Text#1/2 >/1
    // closed e.Accum#1 as range 5
    context[13] = context[2];
    context[14] = context[3];
    if( ! refalrts::svar_left( context[9], context[13], context[14] ) )
      continue;
    // closed e.Text#1 as range 13(2)
    //DEBUG: e.Accum#1: 5
    //DEBUG: s.Any#1: 9
    //DEBUG: e.Text#1: 2

    refalrts::reset_allocator();
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ } (/10 # TChar/11 Tile{ AsIs: e.Accum#1/5 } Tile{ AsIs: s.Any#1/9 } Tile{ AsIs: )/8 } Tile{ AsIs: </0 AsIs: & ReadRegexp/4 AsIs: (/7 } )/12 Tile{ AsIs: e.Text#1/13(2) } Tile{ AsIs: >/1 ]] }
    if( ! refalrts::alloc_open_bracket( context[10] ) )
      return refalrts::cNoMemory;
    if( ! refalrts::alloc_ident( context[11], & ident_TChar<int>::name ) )
      return refalrts::cNoMemory;
    if( ! refalrts::alloc_close_bracket( context[12] ) )
      return refalrts::cNoMemory;
    refalrts::push_stack( context[1] );
    refalrts::push_stack( context[0] );
    refalrts::link_brackets( context[7], context[12] );
    refalrts::link_brackets( context[10], context[8] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    res = refalrts::splice_evar( res, context[13], context[14] );
    res = refalrts::splice_evar( res, context[12], context[12] );
    res = refalrts::splice_evar( res, context[0], context[7] );
    res = refalrts::splice_evar( res, context[8], context[8] );
    res = refalrts::splice_evar( res, context[9], context[9] );
    res = refalrts::splice_evar( res, context[5], context[6] );
    res = refalrts::splice_evar( res, context[10], context[11] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence();

  // ( e.idx )
  // </0 & ReadRegexp/4 (/7 e.Accum#1/5 )/8 >/1
  if( ! refalrts::empty_seq( context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  // closed e.Accum#1 as range 5
  //DEBUG: e.Accum#1: 5

  refalrts::reset_allocator();
  //TRASH: {REMOVED TILE} e.Accum#1/5 {REMOVED TILE}
  //RESULT: Tile{ [[ HalfReuse: (/0 HalfReuse: # TokenError/4 HalfReuse: 'U'/7 }"nexpected EOF in Regex"/9 Tile{ HalfReuse: 'p'/8 HalfReuse: )/1 ]] }
  if( ! refalrts::alloc_chars( context[9], context[10], "nexpected EOF in Regex", 22 ) )
    return refalrts::cNoMemory;
  refalrts::reinit_open_bracket( context[0] );
  refalrts::reinit_ident( context[4], & ident_TokenError<int>::name );
  refalrts::reinit_char( context[7], 'U' );
  refalrts::reinit_char( context[8], 'p' );
  refalrts::reinit_close_bracket( context[1] );
  refalrts::link_brackets( context[0], context[1] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[8];
  res = refalrts::splice_evar( res, context[9], context[10] );
  refalrts::use( res );
  refalrts::splice_to_freelist_open( context[7], res );
  return refalrts::cSuccess;
}

namespace /* unnamed */ {
refalrts::RefalNativeFunction descr_ReadRegexp(func_ReadRegexp, "ReadRegexp");
refalrts::RefalFunction& ReadRegexp = descr_ReadRegexp;

} // unnamed namespace

#endif
#ifdef INTERPRET
namespace /* unnamed */ {
  namespace scope_ReadArrow {
    static const char *filename = "Flex-Lexer.cpp";
    static refalrts::RefalFunction *functions[] = {
      & Root
    };
    static const refalrts::RefalIdentifier idents[] = {
      & ident_TSkip<int>::name,
      & ident_TArrow<int>::name
    };
    using refalrts::numbers;
    using refalrts::strings;
    static const refalrts::RASLCommand raa[] = {
      {refalrts::icThisIsGeneratedFunction, 0, 0, 0},
      {refalrts::icLoadConstants, 0, 0, 0},
      {refalrts::icReserveBacktrackStack, 1, 0, 0},
      {refalrts::icIssueMemory, 15, 0, 0},
      //FAST GEN: ( e.$ ) e.$
      //GLOBAL GEN: ( e.$ ) e.$
      // </0 & ReadArrow/4 (/7 e.idxB#0/5 )/8 e.idxT#0/2 >/1
      {refalrts::icInitB0_Lite, 0, 0, 0},
      {refalrts::icCallSaveLeft, 0, 2, 0},
      {refalrts::icBracketLeftSave, 0, 5, 2},
      // closed e.idxB#0 as range 5
      // closed e.idxT#0 as range 2
      {refalrts::icOnFailGoTo, +21, 0, 0},
      // ( e.idx ) '>' e.idx
      // </0 & ReadArrow/4 (/7 e.Accum#1/5 )/8 '>'/9 e.Text#1/2 >/1
      {refalrts::icSave, 0, 13, 2},
      {refalrts::icCharLeftSave, 9, static_cast<unsigned char>('>'), 13},
      // closed e.Accum#1 as range 5
      // closed e.Text#1 as range 13(2)
      //DEBUG: e.Accum#1: 5
      //DEBUG: e.Text#1: 2
      {refalrts::icEmptyResult, 0, 0, 0},
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ HalfReuse: (/0 HalfReuse: # TArrow/4 } Tile{ AsIs: e.Accum#1/5 } '>'/10 Tile{ HalfReuse: )/7 } </11 & Root/12 Tile{ HalfReuse: (/8 HalfReuse: )/9 AsIs: e.Text#1/13(2) AsIs: >/1 ]] }
      {refalrts::icAllocChar, 0, '>', 10},
      {refalrts::icAllocBracket, 0, refalrts::ibOpenCall, 11},
      {refalrts::icAllocFunc, 0, 0, 12},
      {refalrts::icReinitBracket, 0, refalrts::ibOpenBracket, 0},
      {refalrts::icReinitIdent, 0, 1, 4},
      {refalrts::icReinitBracket, 0, refalrts::ibCloseBracket, 7},
      {refalrts::icReinitBracket, 0, refalrts::ibOpenBracket, 8},
      {refalrts::icReinitBracket, 0, refalrts::ibCloseBracket, 9},
      {refalrts::icPushStack, 0, 0, 1},
      {refalrts::icPushStack, 0, 0, 11},
      {refalrts::icLinkBrackets, 8, 9, 0},
      {refalrts::icLinkBrackets, 0, 7, 0},
      {refalrts::icSetRes, 0, 0, 8},
      {refalrts::icSpliceTile, 11, 12, 0},
      {refalrts::icSpliceTile, 7, 7, 0},
      {refalrts::icSpliceTile, 10, 10, 0},
      {refalrts::icSpliceEVar, 0, 0, 5},
      {refalrts::icNextStep, 0, 0, 0},
      {refalrts::icProfilerStopSentence, 0, 0, 0},
      // ( e.idx ) e.idx
      // </0 & ReadArrow/4 (/7 e.Accum#1/5 )/8 e.Text#1/2 >/1
      // closed e.Accum#1 as range 5
      // closed e.Text#1 as range 2
      //DEBUG: e.Accum#1: 5
      //DEBUG: e.Text#1: 2
      {refalrts::icEmptyResult, 0, 0, 0},
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ } (/9 # TSkip/10 Tile{ AsIs: e.Accum#1/5 } )/11 Tile{ AsIs: </0 Reuse: & Root/4 AsIs: (/7 } Tile{ AsIs: )/8 AsIs: e.Text#1/2 AsIs: >/1 ]] }
      {refalrts::icAllocBracket, 0, refalrts::ibOpenBracket, 9},
      {refalrts::icAllocIdent, 0, 0, 10},
      {refalrts::icAllocBracket, 0, refalrts::ibCloseBracket, 11},
      {refalrts::icUpdateFunc, 0, 0, 4},
      {refalrts::icPushStack, 0, 0, 1},
      {refalrts::icPushStack, 0, 0, 0},
      {refalrts::icLinkBrackets, 7, 8, 0},
      {refalrts::icLinkBrackets, 9, 11, 0},
      {refalrts::icSetRes, 0, 0, 8},
      {refalrts::icSpliceTile, 0, 7, 0},
      {refalrts::icSpliceTile, 11, 11, 0},
      {refalrts::icSpliceEVar, 0, 0, 5},
      {refalrts::icSpliceTile, 9, 10, 0},
      {refalrts::icNextStep, 0, 0, 0},
      {refalrts::icEnd, 0, 0, 0}
    };
  } // namespace scope_ReadArrow

} // unnamed namespace

namespace /* unnamed */ {
refalrts::RASLFunction descr_ReadArrow(
  "ReadArrow",
  scope_ReadArrow::raa,
  scope_ReadArrow::functions,
  scope_ReadArrow::idents,
  scope_ReadArrow::numbers,
  scope_ReadArrow::strings,
  scope_ReadArrow::filename
);
refalrts::RefalFunction& ReadArrow = descr_ReadArrow;

} // unnamed namespace

#else
static refalrts::FnResult func_ReadArrow(refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  refalrts::this_is_generated_function();
  // issue here memory for vars with 15 elems
  refalrts::Iter context[15];
  refalrts::zeros( context, 15 );
  //FAST GEN: ( e.$ ) e.$
  //GLOBAL GEN: ( e.$ ) e.$
  // </0 & ReadArrow/4 (/7 e.idxB#0/5 )/8 e.idxT#0/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  context[5] = 0;
  context[6] = 0;
  context[7] = refalrts::brackets_left( context[5], context[6], context[2], context[3] );
  if( ! context[7] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[7], context[8]);
  // closed e.idxB#0 as range 5
  // closed e.idxT#0 as range 2
  do {
    // ( e.idx ) '>' e.idx
    // </0 & ReadArrow/4 (/7 e.Accum#1/5 )/8 '>'/9 e.Text#1/2 >/1
    context[13] = context[2];
    context[14] = context[3];
    context[9] = refalrts::char_left( '>', context[13], context[14] );
    if( ! context[9] )
      continue;
    // closed e.Accum#1 as range 5
    // closed e.Text#1 as range 13(2)
    //DEBUG: e.Accum#1: 5
    //DEBUG: e.Text#1: 2

    refalrts::reset_allocator();
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ HalfReuse: (/0 HalfReuse: # TArrow/4 } Tile{ AsIs: e.Accum#1/5 } '>'/10 Tile{ HalfReuse: )/7 } </11 & Root/12 Tile{ HalfReuse: (/8 HalfReuse: )/9 AsIs: e.Text#1/13(2) AsIs: >/1 ]] }
    if( ! refalrts::alloc_char( context[10], '>' ) )
      return refalrts::cNoMemory;
    if( ! refalrts::alloc_open_call( context[11] ) )
      return refalrts::cNoMemory;
    if( ! refalrts::alloc_name( context[12], & Root ) )
      return refalrts::cNoMemory;
    refalrts::reinit_open_bracket( context[0] );
    refalrts::reinit_ident( context[4], & ident_TArrow<int>::name );
    refalrts::reinit_close_bracket( context[7] );
    refalrts::reinit_open_bracket( context[8] );
    refalrts::reinit_close_bracket( context[9] );
    refalrts::push_stack( context[1] );
    refalrts::push_stack( context[11] );
    refalrts::link_brackets( context[8], context[9] );
    refalrts::link_brackets( context[0], context[7] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[8];
    res = refalrts::splice_evar( res, context[11], context[12] );
    res = refalrts::splice_evar( res, context[7], context[7] );
    res = refalrts::splice_evar( res, context[10], context[10] );
    res = refalrts::splice_evar( res, context[5], context[6] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence();

  // ( e.idx ) e.idx
  // </0 & ReadArrow/4 (/7 e.Accum#1/5 )/8 e.Text#1/2 >/1
  // closed e.Accum#1 as range 5
  // closed e.Text#1 as range 2
  //DEBUG: e.Accum#1: 5
  //DEBUG: e.Text#1: 2

  refalrts::reset_allocator();
  //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ } (/9 # TSkip/10 Tile{ AsIs: e.Accum#1/5 } )/11 Tile{ AsIs: </0 Reuse: & Root/4 AsIs: (/7 } Tile{ AsIs: )/8 AsIs: e.Text#1/2 AsIs: >/1 ]] }
  if( ! refalrts::alloc_open_bracket( context[9] ) )
    return refalrts::cNoMemory;
  if( ! refalrts::alloc_ident( context[10], & ident_TSkip<int>::name ) )
    return refalrts::cNoMemory;
  if( ! refalrts::alloc_close_bracket( context[11] ) )
    return refalrts::cNoMemory;
  refalrts::update_name( context[4], & Root );
  refalrts::push_stack( context[1] );
  refalrts::push_stack( context[0] );
  refalrts::link_brackets( context[7], context[8] );
  refalrts::link_brackets( context[9], context[11] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[8];
  res = refalrts::splice_evar( res, context[0], context[7] );
  res = refalrts::splice_evar( res, context[11], context[11] );
  res = refalrts::splice_evar( res, context[5], context[6] );
  res = refalrts::splice_evar( res, context[9], context[10] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

namespace /* unnamed */ {
refalrts::RefalNativeFunction descr_ReadArrow(func_ReadArrow, "ReadArrow");
refalrts::RefalFunction& ReadArrow = descr_ReadArrow;

} // unnamed namespace

#endif
#ifdef INTERPRET
namespace /* unnamed */ {
  namespace scope_Number {
    static const char *filename = "Flex-Lexer.cpp";
    static refalrts::RefalFunction *functions[] = {
      & Root
    };
    static const refalrts::RefalIdentifier idents[] = {
      & ident_TkNumber<int>::name
    };
    using refalrts::numbers;
    using refalrts::strings;
    static const refalrts::RASLCommand raa[] = {
      {refalrts::icThisIsGeneratedFunction, 0, 0, 0},
      {refalrts::icLoadConstants, 0, 0, 0},
      {refalrts::icReserveBacktrackStack, 10, 0, 0},
      {refalrts::icIssueMemory, 14, 0, 0},
      //FAST GEN: ( e.$ ) e.$
      //GLOBAL GEN: ( e.$ ) e.$
      // </0 & Number/4 (/7 e.idxB#0/5 )/8 e.idxT#0/2 >/1
      {refalrts::icInitB0_Lite, 0, 0, 0},
      {refalrts::icCallSaveLeft, 0, 2, 0},
      {refalrts::icBracketLeftSave, 0, 5, 2},
      // closed e.idxB#0 as range 5
      // closed e.idxT#0 as range 2
      {refalrts::icOnFailGoTo, +9, 0, 0},
      // ( e.idx ) '0' e.idx
      // </0 & Number/4 (/7 e.Accum#1/5 )/8 '0'/9 e.Text#1/2 >/1
      {refalrts::icSave, 0, 12, 2},
      {refalrts::icCharLeftSave, 9, static_cast<unsigned char>('0'), 12},
      // closed e.Accum#1 as range 5
      // closed e.Text#1 as range 12(2)
      //DEBUG: e.Accum#1: 5
      //DEBUG: e.Text#1: 2
      {refalrts::icEmptyResult, 0, 0, 0},
      //TRASH: {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 AsIs: & Number/4 AsIs: (/7 AsIs: e.Accum#1/5 HalfReuse: '0'/8 HalfReuse: )/9 AsIs: e.Text#1/12(2) AsIs: >/1 ]] }
      {refalrts::icReinitChar, 0, '0', 8},
      {refalrts::icReinitBracket, 0, refalrts::ibCloseBracket, 9},
      {refalrts::icPushStack, 0, 0, 1},
      {refalrts::icPushStack, 0, 0, 0},
      {refalrts::icLinkBrackets, 7, 9, 0},
      {refalrts::icNextStep, 0, 0, 0},
      {refalrts::icProfilerStopSentence, 0, 0, 0},
      {refalrts::icOnFailGoTo, +9, 0, 0},
      // ( e.idx ) '1' e.idx
      // </0 & Number/4 (/7 e.Accum#1/5 )/8 '1'/9 e.Text#1/2 >/1
      {refalrts::icSave, 0, 12, 2},
      {refalrts::icCharLeftSave, 9, static_cast<unsigned char>('1'), 12},
      // closed e.Accum#1 as range 5
      // closed e.Text#1 as range 12(2)
      //DEBUG: e.Accum#1: 5
      //DEBUG: e.Text#1: 2
      {refalrts::icEmptyResult, 0, 0, 0},
      //TRASH: {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 AsIs: & Number/4 AsIs: (/7 AsIs: e.Accum#1/5 HalfReuse: '1'/8 HalfReuse: )/9 AsIs: e.Text#1/12(2) AsIs: >/1 ]] }
      {refalrts::icReinitChar, 0, '1', 8},
      {refalrts::icReinitBracket, 0, refalrts::ibCloseBracket, 9},
      {refalrts::icPushStack, 0, 0, 1},
      {refalrts::icPushStack, 0, 0, 0},
      {refalrts::icLinkBrackets, 7, 9, 0},
      {refalrts::icNextStep, 0, 0, 0},
      {refalrts::icProfilerStopSentence, 0, 0, 0},
      {refalrts::icOnFailGoTo, +9, 0, 0},
      // ( e.idx ) '2' e.idx
      // </0 & Number/4 (/7 e.Accum#1/5 )/8 '2'/9 e.Text#1/2 >/1
      {refalrts::icSave, 0, 12, 2},
      {refalrts::icCharLeftSave, 9, static_cast<unsigned char>('2'), 12},
      // closed e.Accum#1 as range 5
      // closed e.Text#1 as range 12(2)
      //DEBUG: e.Accum#1: 5
      //DEBUG: e.Text#1: 2
      {refalrts::icEmptyResult, 0, 0, 0},
      //TRASH: {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 AsIs: & Number/4 AsIs: (/7 AsIs: e.Accum#1/5 HalfReuse: '2'/8 HalfReuse: )/9 AsIs: e.Text#1/12(2) AsIs: >/1 ]] }
      {refalrts::icReinitChar, 0, '2', 8},
      {refalrts::icReinitBracket, 0, refalrts::ibCloseBracket, 9},
      {refalrts::icPushStack, 0, 0, 1},
      {refalrts::icPushStack, 0, 0, 0},
      {refalrts::icLinkBrackets, 7, 9, 0},
      {refalrts::icNextStep, 0, 0, 0},
      {refalrts::icProfilerStopSentence, 0, 0, 0},
      {refalrts::icOnFailGoTo, +9, 0, 0},
      // ( e.idx ) '3' e.idx
      // </0 & Number/4 (/7 e.Accum#1/5 )/8 '3'/9 e.Text#1/2 >/1
      {refalrts::icSave, 0, 12, 2},
      {refalrts::icCharLeftSave, 9, static_cast<unsigned char>('3'), 12},
      // closed e.Accum#1 as range 5
      // closed e.Text#1 as range 12(2)
      //DEBUG: e.Accum#1: 5
      //DEBUG: e.Text#1: 2
      {refalrts::icEmptyResult, 0, 0, 0},
      //TRASH: {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 AsIs: & Number/4 AsIs: (/7 AsIs: e.Accum#1/5 HalfReuse: '3'/8 HalfReuse: )/9 AsIs: e.Text#1/12(2) AsIs: >/1 ]] }
      {refalrts::icReinitChar, 0, '3', 8},
      {refalrts::icReinitBracket, 0, refalrts::ibCloseBracket, 9},
      {refalrts::icPushStack, 0, 0, 1},
      {refalrts::icPushStack, 0, 0, 0},
      {refalrts::icLinkBrackets, 7, 9, 0},
      {refalrts::icNextStep, 0, 0, 0},
      {refalrts::icProfilerStopSentence, 0, 0, 0},
      {refalrts::icOnFailGoTo, +9, 0, 0},
      // ( e.idx ) '4' e.idx
      // </0 & Number/4 (/7 e.Accum#1/5 )/8 '4'/9 e.Text#1/2 >/1
      {refalrts::icSave, 0, 12, 2},
      {refalrts::icCharLeftSave, 9, static_cast<unsigned char>('4'), 12},
      // closed e.Accum#1 as range 5
      // closed e.Text#1 as range 12(2)
      //DEBUG: e.Accum#1: 5
      //DEBUG: e.Text#1: 2
      {refalrts::icEmptyResult, 0, 0, 0},
      //TRASH: {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 AsIs: & Number/4 AsIs: (/7 AsIs: e.Accum#1/5 HalfReuse: '4'/8 HalfReuse: )/9 AsIs: e.Text#1/12(2) AsIs: >/1 ]] }
      {refalrts::icReinitChar, 0, '4', 8},
      {refalrts::icReinitBracket, 0, refalrts::ibCloseBracket, 9},
      {refalrts::icPushStack, 0, 0, 1},
      {refalrts::icPushStack, 0, 0, 0},
      {refalrts::icLinkBrackets, 7, 9, 0},
      {refalrts::icNextStep, 0, 0, 0},
      {refalrts::icProfilerStopSentence, 0, 0, 0},
      {refalrts::icOnFailGoTo, +9, 0, 0},
      // ( e.idx ) '5' e.idx
      // </0 & Number/4 (/7 e.Accum#1/5 )/8 '5'/9 e.Text#1/2 >/1
      {refalrts::icSave, 0, 12, 2},
      {refalrts::icCharLeftSave, 9, static_cast<unsigned char>('5'), 12},
      // closed e.Accum#1 as range 5
      // closed e.Text#1 as range 12(2)
      //DEBUG: e.Accum#1: 5
      //DEBUG: e.Text#1: 2
      {refalrts::icEmptyResult, 0, 0, 0},
      //TRASH: {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 AsIs: & Number/4 AsIs: (/7 AsIs: e.Accum#1/5 HalfReuse: '5'/8 HalfReuse: )/9 AsIs: e.Text#1/12(2) AsIs: >/1 ]] }
      {refalrts::icReinitChar, 0, '5', 8},
      {refalrts::icReinitBracket, 0, refalrts::ibCloseBracket, 9},
      {refalrts::icPushStack, 0, 0, 1},
      {refalrts::icPushStack, 0, 0, 0},
      {refalrts::icLinkBrackets, 7, 9, 0},
      {refalrts::icNextStep, 0, 0, 0},
      {refalrts::icProfilerStopSentence, 0, 0, 0},
      {refalrts::icOnFailGoTo, +9, 0, 0},
      // ( e.idx ) '6' e.idx
      // </0 & Number/4 (/7 e.Accum#1/5 )/8 '6'/9 e.Text#1/2 >/1
      {refalrts::icSave, 0, 12, 2},
      {refalrts::icCharLeftSave, 9, static_cast<unsigned char>('6'), 12},
      // closed e.Accum#1 as range 5
      // closed e.Text#1 as range 12(2)
      //DEBUG: e.Accum#1: 5
      //DEBUG: e.Text#1: 2
      {refalrts::icEmptyResult, 0, 0, 0},
      //TRASH: {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 AsIs: & Number/4 AsIs: (/7 AsIs: e.Accum#1/5 HalfReuse: '6'/8 HalfReuse: )/9 AsIs: e.Text#1/12(2) AsIs: >/1 ]] }
      {refalrts::icReinitChar, 0, '6', 8},
      {refalrts::icReinitBracket, 0, refalrts::ibCloseBracket, 9},
      {refalrts::icPushStack, 0, 0, 1},
      {refalrts::icPushStack, 0, 0, 0},
      {refalrts::icLinkBrackets, 7, 9, 0},
      {refalrts::icNextStep, 0, 0, 0},
      {refalrts::icProfilerStopSentence, 0, 0, 0},
      {refalrts::icOnFailGoTo, +9, 0, 0},
      // ( e.idx ) '7' e.idx
      // </0 & Number/4 (/7 e.Accum#1/5 )/8 '7'/9 e.Text#1/2 >/1
      {refalrts::icSave, 0, 12, 2},
      {refalrts::icCharLeftSave, 9, static_cast<unsigned char>('7'), 12},
      // closed e.Accum#1 as range 5
      // closed e.Text#1 as range 12(2)
      //DEBUG: e.Accum#1: 5
      //DEBUG: e.Text#1: 2
      {refalrts::icEmptyResult, 0, 0, 0},
      //TRASH: {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 AsIs: & Number/4 AsIs: (/7 AsIs: e.Accum#1/5 HalfReuse: '7'/8 HalfReuse: )/9 AsIs: e.Text#1/12(2) AsIs: >/1 ]] }
      {refalrts::icReinitChar, 0, '7', 8},
      {refalrts::icReinitBracket, 0, refalrts::ibCloseBracket, 9},
      {refalrts::icPushStack, 0, 0, 1},
      {refalrts::icPushStack, 0, 0, 0},
      {refalrts::icLinkBrackets, 7, 9, 0},
      {refalrts::icNextStep, 0, 0, 0},
      {refalrts::icProfilerStopSentence, 0, 0, 0},
      {refalrts::icOnFailGoTo, +9, 0, 0},
      // ( e.idx ) '8' e.idx
      // </0 & Number/4 (/7 e.Accum#1/5 )/8 '8'/9 e.Text#1/2 >/1
      {refalrts::icSave, 0, 12, 2},
      {refalrts::icCharLeftSave, 9, static_cast<unsigned char>('8'), 12},
      // closed e.Accum#1 as range 5
      // closed e.Text#1 as range 12(2)
      //DEBUG: e.Accum#1: 5
      //DEBUG: e.Text#1: 2
      {refalrts::icEmptyResult, 0, 0, 0},
      //TRASH: {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 AsIs: & Number/4 AsIs: (/7 AsIs: e.Accum#1/5 HalfReuse: '8'/8 HalfReuse: )/9 AsIs: e.Text#1/12(2) AsIs: >/1 ]] }
      {refalrts::icReinitChar, 0, '8', 8},
      {refalrts::icReinitBracket, 0, refalrts::ibCloseBracket, 9},
      {refalrts::icPushStack, 0, 0, 1},
      {refalrts::icPushStack, 0, 0, 0},
      {refalrts::icLinkBrackets, 7, 9, 0},
      {refalrts::icNextStep, 0, 0, 0},
      {refalrts::icProfilerStopSentence, 0, 0, 0},
      {refalrts::icOnFailGoTo, +9, 0, 0},
      // ( e.idx ) '9' e.idx
      // </0 & Number/4 (/7 e.Accum#1/5 )/8 '9'/9 e.Text#1/2 >/1
      {refalrts::icSave, 0, 12, 2},
      {refalrts::icCharLeftSave, 9, static_cast<unsigned char>('9'), 12},
      // closed e.Accum#1 as range 5
      // closed e.Text#1 as range 12(2)
      //DEBUG: e.Accum#1: 5
      //DEBUG: e.Text#1: 2
      {refalrts::icEmptyResult, 0, 0, 0},
      //TRASH: {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 AsIs: & Number/4 AsIs: (/7 AsIs: e.Accum#1/5 HalfReuse: '9'/8 HalfReuse: )/9 AsIs: e.Text#1/12(2) AsIs: >/1 ]] }
      {refalrts::icReinitChar, 0, '9', 8},
      {refalrts::icReinitBracket, 0, refalrts::ibCloseBracket, 9},
      {refalrts::icPushStack, 0, 0, 1},
      {refalrts::icPushStack, 0, 0, 0},
      {refalrts::icLinkBrackets, 7, 9, 0},
      {refalrts::icNextStep, 0, 0, 0},
      {refalrts::icProfilerStopSentence, 0, 0, 0},
      // ( e.idx ) e.idx
      // </0 & Number/4 (/7 e.Accum#1/5 )/8 e.Text#1/2 >/1
      // closed e.Accum#1 as range 5
      // closed e.Text#1 as range 2
      //DEBUG: e.Accum#1: 5
      //DEBUG: e.Text#1: 2
      {refalrts::icEmptyResult, 0, 0, 0},
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ } (/9 # TkNumber/10 Tile{ AsIs: e.Accum#1/5 } )/11 Tile{ AsIs: </0 Reuse: & Root/4 AsIs: (/7 } Tile{ AsIs: )/8 AsIs: e.Text#1/2 AsIs: >/1 ]] }
      {refalrts::icAllocBracket, 0, refalrts::ibOpenBracket, 9},
      {refalrts::icAllocIdent, 0, 0, 10},
      {refalrts::icAllocBracket, 0, refalrts::ibCloseBracket, 11},
      {refalrts::icUpdateFunc, 0, 0, 4},
      {refalrts::icPushStack, 0, 0, 1},
      {refalrts::icPushStack, 0, 0, 0},
      {refalrts::icLinkBrackets, 7, 8, 0},
      {refalrts::icLinkBrackets, 9, 11, 0},
      {refalrts::icSetRes, 0, 0, 8},
      {refalrts::icSpliceTile, 0, 7, 0},
      {refalrts::icSpliceTile, 11, 11, 0},
      {refalrts::icSpliceEVar, 0, 0, 5},
      {refalrts::icSpliceTile, 9, 10, 0},
      {refalrts::icNextStep, 0, 0, 0},
      {refalrts::icEnd, 0, 0, 0}
    };
  } // namespace scope_Number

} // unnamed namespace

namespace /* unnamed */ {
refalrts::RASLFunction descr_Number(
  "Number",
  scope_Number::raa,
  scope_Number::functions,
  scope_Number::idents,
  scope_Number::numbers,
  scope_Number::strings,
  scope_Number::filename
);
refalrts::RefalFunction& Number = descr_Number;

} // unnamed namespace

#else
static refalrts::FnResult func_Number(refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  refalrts::this_is_generated_function();
  // issue here memory for vars with 14 elems
  refalrts::Iter context[14];
  refalrts::zeros( context, 14 );
  //FAST GEN: ( e.$ ) e.$
  //GLOBAL GEN: ( e.$ ) e.$
  // </0 & Number/4 (/7 e.idxB#0/5 )/8 e.idxT#0/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  context[5] = 0;
  context[6] = 0;
  context[7] = refalrts::brackets_left( context[5], context[6], context[2], context[3] );
  if( ! context[7] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[7], context[8]);
  // closed e.idxB#0 as range 5
  // closed e.idxT#0 as range 2
  do {
    // ( e.idx ) '0' e.idx
    // </0 & Number/4 (/7 e.Accum#1/5 )/8 '0'/9 e.Text#1/2 >/1
    context[12] = context[2];
    context[13] = context[3];
    context[9] = refalrts::char_left( '0', context[12], context[13] );
    if( ! context[9] )
      continue;
    // closed e.Accum#1 as range 5
    // closed e.Text#1 as range 12(2)
    //DEBUG: e.Accum#1: 5
    //DEBUG: e.Text#1: 2

    refalrts::reset_allocator();
    //TRASH: {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 AsIs: & Number/4 AsIs: (/7 AsIs: e.Accum#1/5 HalfReuse: '0'/8 HalfReuse: )/9 AsIs: e.Text#1/12(2) AsIs: >/1 ]] }
    refalrts::reinit_char( context[8], '0' );
    refalrts::reinit_close_bracket( context[9] );
    refalrts::push_stack( context[1] );
    refalrts::push_stack( context[0] );
    refalrts::link_brackets( context[7], context[9] );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence();

  do {
    // ( e.idx ) '1' e.idx
    // </0 & Number/4 (/7 e.Accum#1/5 )/8 '1'/9 e.Text#1/2 >/1
    context[12] = context[2];
    context[13] = context[3];
    context[9] = refalrts::char_left( '1', context[12], context[13] );
    if( ! context[9] )
      continue;
    // closed e.Accum#1 as range 5
    // closed e.Text#1 as range 12(2)
    //DEBUG: e.Accum#1: 5
    //DEBUG: e.Text#1: 2

    refalrts::reset_allocator();
    //TRASH: {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 AsIs: & Number/4 AsIs: (/7 AsIs: e.Accum#1/5 HalfReuse: '1'/8 HalfReuse: )/9 AsIs: e.Text#1/12(2) AsIs: >/1 ]] }
    refalrts::reinit_char( context[8], '1' );
    refalrts::reinit_close_bracket( context[9] );
    refalrts::push_stack( context[1] );
    refalrts::push_stack( context[0] );
    refalrts::link_brackets( context[7], context[9] );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence();

  do {
    // ( e.idx ) '2' e.idx
    // </0 & Number/4 (/7 e.Accum#1/5 )/8 '2'/9 e.Text#1/2 >/1
    context[12] = context[2];
    context[13] = context[3];
    context[9] = refalrts::char_left( '2', context[12], context[13] );
    if( ! context[9] )
      continue;
    // closed e.Accum#1 as range 5
    // closed e.Text#1 as range 12(2)
    //DEBUG: e.Accum#1: 5
    //DEBUG: e.Text#1: 2

    refalrts::reset_allocator();
    //TRASH: {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 AsIs: & Number/4 AsIs: (/7 AsIs: e.Accum#1/5 HalfReuse: '2'/8 HalfReuse: )/9 AsIs: e.Text#1/12(2) AsIs: >/1 ]] }
    refalrts::reinit_char( context[8], '2' );
    refalrts::reinit_close_bracket( context[9] );
    refalrts::push_stack( context[1] );
    refalrts::push_stack( context[0] );
    refalrts::link_brackets( context[7], context[9] );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence();

  do {
    // ( e.idx ) '3' e.idx
    // </0 & Number/4 (/7 e.Accum#1/5 )/8 '3'/9 e.Text#1/2 >/1
    context[12] = context[2];
    context[13] = context[3];
    context[9] = refalrts::char_left( '3', context[12], context[13] );
    if( ! context[9] )
      continue;
    // closed e.Accum#1 as range 5
    // closed e.Text#1 as range 12(2)
    //DEBUG: e.Accum#1: 5
    //DEBUG: e.Text#1: 2

    refalrts::reset_allocator();
    //TRASH: {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 AsIs: & Number/4 AsIs: (/7 AsIs: e.Accum#1/5 HalfReuse: '3'/8 HalfReuse: )/9 AsIs: e.Text#1/12(2) AsIs: >/1 ]] }
    refalrts::reinit_char( context[8], '3' );
    refalrts::reinit_close_bracket( context[9] );
    refalrts::push_stack( context[1] );
    refalrts::push_stack( context[0] );
    refalrts::link_brackets( context[7], context[9] );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence();

  do {
    // ( e.idx ) '4' e.idx
    // </0 & Number/4 (/7 e.Accum#1/5 )/8 '4'/9 e.Text#1/2 >/1
    context[12] = context[2];
    context[13] = context[3];
    context[9] = refalrts::char_left( '4', context[12], context[13] );
    if( ! context[9] )
      continue;
    // closed e.Accum#1 as range 5
    // closed e.Text#1 as range 12(2)
    //DEBUG: e.Accum#1: 5
    //DEBUG: e.Text#1: 2

    refalrts::reset_allocator();
    //TRASH: {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 AsIs: & Number/4 AsIs: (/7 AsIs: e.Accum#1/5 HalfReuse: '4'/8 HalfReuse: )/9 AsIs: e.Text#1/12(2) AsIs: >/1 ]] }
    refalrts::reinit_char( context[8], '4' );
    refalrts::reinit_close_bracket( context[9] );
    refalrts::push_stack( context[1] );
    refalrts::push_stack( context[0] );
    refalrts::link_brackets( context[7], context[9] );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence();

  do {
    // ( e.idx ) '5' e.idx
    // </0 & Number/4 (/7 e.Accum#1/5 )/8 '5'/9 e.Text#1/2 >/1
    context[12] = context[2];
    context[13] = context[3];
    context[9] = refalrts::char_left( '5', context[12], context[13] );
    if( ! context[9] )
      continue;
    // closed e.Accum#1 as range 5
    // closed e.Text#1 as range 12(2)
    //DEBUG: e.Accum#1: 5
    //DEBUG: e.Text#1: 2

    refalrts::reset_allocator();
    //TRASH: {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 AsIs: & Number/4 AsIs: (/7 AsIs: e.Accum#1/5 HalfReuse: '5'/8 HalfReuse: )/9 AsIs: e.Text#1/12(2) AsIs: >/1 ]] }
    refalrts::reinit_char( context[8], '5' );
    refalrts::reinit_close_bracket( context[9] );
    refalrts::push_stack( context[1] );
    refalrts::push_stack( context[0] );
    refalrts::link_brackets( context[7], context[9] );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence();

  do {
    // ( e.idx ) '6' e.idx
    // </0 & Number/4 (/7 e.Accum#1/5 )/8 '6'/9 e.Text#1/2 >/1
    context[12] = context[2];
    context[13] = context[3];
    context[9] = refalrts::char_left( '6', context[12], context[13] );
    if( ! context[9] )
      continue;
    // closed e.Accum#1 as range 5
    // closed e.Text#1 as range 12(2)
    //DEBUG: e.Accum#1: 5
    //DEBUG: e.Text#1: 2

    refalrts::reset_allocator();
    //TRASH: {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 AsIs: & Number/4 AsIs: (/7 AsIs: e.Accum#1/5 HalfReuse: '6'/8 HalfReuse: )/9 AsIs: e.Text#1/12(2) AsIs: >/1 ]] }
    refalrts::reinit_char( context[8], '6' );
    refalrts::reinit_close_bracket( context[9] );
    refalrts::push_stack( context[1] );
    refalrts::push_stack( context[0] );
    refalrts::link_brackets( context[7], context[9] );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence();

  do {
    // ( e.idx ) '7' e.idx
    // </0 & Number/4 (/7 e.Accum#1/5 )/8 '7'/9 e.Text#1/2 >/1
    context[12] = context[2];
    context[13] = context[3];
    context[9] = refalrts::char_left( '7', context[12], context[13] );
    if( ! context[9] )
      continue;
    // closed e.Accum#1 as range 5
    // closed e.Text#1 as range 12(2)
    //DEBUG: e.Accum#1: 5
    //DEBUG: e.Text#1: 2

    refalrts::reset_allocator();
    //TRASH: {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 AsIs: & Number/4 AsIs: (/7 AsIs: e.Accum#1/5 HalfReuse: '7'/8 HalfReuse: )/9 AsIs: e.Text#1/12(2) AsIs: >/1 ]] }
    refalrts::reinit_char( context[8], '7' );
    refalrts::reinit_close_bracket( context[9] );
    refalrts::push_stack( context[1] );
    refalrts::push_stack( context[0] );
    refalrts::link_brackets( context[7], context[9] );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence();

  do {
    // ( e.idx ) '8' e.idx
    // </0 & Number/4 (/7 e.Accum#1/5 )/8 '8'/9 e.Text#1/2 >/1
    context[12] = context[2];
    context[13] = context[3];
    context[9] = refalrts::char_left( '8', context[12], context[13] );
    if( ! context[9] )
      continue;
    // closed e.Accum#1 as range 5
    // closed e.Text#1 as range 12(2)
    //DEBUG: e.Accum#1: 5
    //DEBUG: e.Text#1: 2

    refalrts::reset_allocator();
    //TRASH: {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 AsIs: & Number/4 AsIs: (/7 AsIs: e.Accum#1/5 HalfReuse: '8'/8 HalfReuse: )/9 AsIs: e.Text#1/12(2) AsIs: >/1 ]] }
    refalrts::reinit_char( context[8], '8' );
    refalrts::reinit_close_bracket( context[9] );
    refalrts::push_stack( context[1] );
    refalrts::push_stack( context[0] );
    refalrts::link_brackets( context[7], context[9] );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence();

  do {
    // ( e.idx ) '9' e.idx
    // </0 & Number/4 (/7 e.Accum#1/5 )/8 '9'/9 e.Text#1/2 >/1
    context[12] = context[2];
    context[13] = context[3];
    context[9] = refalrts::char_left( '9', context[12], context[13] );
    if( ! context[9] )
      continue;
    // closed e.Accum#1 as range 5
    // closed e.Text#1 as range 12(2)
    //DEBUG: e.Accum#1: 5
    //DEBUG: e.Text#1: 2

    refalrts::reset_allocator();
    //TRASH: {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 AsIs: & Number/4 AsIs: (/7 AsIs: e.Accum#1/5 HalfReuse: '9'/8 HalfReuse: )/9 AsIs: e.Text#1/12(2) AsIs: >/1 ]] }
    refalrts::reinit_char( context[8], '9' );
    refalrts::reinit_close_bracket( context[9] );
    refalrts::push_stack( context[1] );
    refalrts::push_stack( context[0] );
    refalrts::link_brackets( context[7], context[9] );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence();

  // ( e.idx ) e.idx
  // </0 & Number/4 (/7 e.Accum#1/5 )/8 e.Text#1/2 >/1
  // closed e.Accum#1 as range 5
  // closed e.Text#1 as range 2
  //DEBUG: e.Accum#1: 5
  //DEBUG: e.Text#1: 2

  refalrts::reset_allocator();
  //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ } (/9 # TkNumber/10 Tile{ AsIs: e.Accum#1/5 } )/11 Tile{ AsIs: </0 Reuse: & Root/4 AsIs: (/7 } Tile{ AsIs: )/8 AsIs: e.Text#1/2 AsIs: >/1 ]] }
  if( ! refalrts::alloc_open_bracket( context[9] ) )
    return refalrts::cNoMemory;
  if( ! refalrts::alloc_ident( context[10], & ident_TkNumber<int>::name ) )
    return refalrts::cNoMemory;
  if( ! refalrts::alloc_close_bracket( context[11] ) )
    return refalrts::cNoMemory;
  refalrts::update_name( context[4], & Root );
  refalrts::push_stack( context[1] );
  refalrts::push_stack( context[0] );
  refalrts::link_brackets( context[7], context[8] );
  refalrts::link_brackets( context[9], context[11] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[8];
  res = refalrts::splice_evar( res, context[0], context[7] );
  res = refalrts::splice_evar( res, context[11], context[11] );
  res = refalrts::splice_evar( res, context[5], context[6] );
  res = refalrts::splice_evar( res, context[9], context[10] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

namespace /* unnamed */ {
refalrts::RefalNativeFunction descr_Number(func_Number, "Number");
refalrts::RefalFunction& Number = descr_Number;

} // unnamed namespace

#endif
#ifdef INTERPRET
namespace /* unnamed */ {
  namespace scope_Name {
    static const char *filename = "Flex-Lexer.cpp";
    static refalrts::RefalFunction *functions[] = {
      & Root
    };
    static const refalrts::RefalIdentifier idents[] = {
      & ident_TName<int>::name
    };
    using refalrts::numbers;
    using refalrts::strings;
    static const refalrts::RASLCommand raa[] = {
      {refalrts::icThisIsGeneratedFunction, 0, 0, 0},
      {refalrts::icLoadConstants, 0, 0, 0},
      {refalrts::icReserveBacktrackStack, 62, 0, 0},
      {refalrts::icIssueMemory, 14, 0, 0},
      //FAST GEN: ( e.$ ) e.$
      //GLOBAL GEN: ( e.$ ) e.$
      // </0 & Name/4 (/7 e.idxB#0/5 )/8 e.idxT#0/2 >/1
      {refalrts::icInitB0_Lite, 0, 0, 0},
      {refalrts::icCallSaveLeft, 0, 2, 0},
      {refalrts::icBracketLeftSave, 0, 5, 2},
      // closed e.idxB#0 as range 5
      // closed e.idxT#0 as range 2
      {refalrts::icOnFailGoTo, +9, 0, 0},
      // ( e.idx ) '0' e.idx
      // </0 & Name/4 (/7 e.Accum#1/5 )/8 '0'/9 e.Text#1/2 >/1
      {refalrts::icSave, 0, 12, 2},
      {refalrts::icCharLeftSave, 9, static_cast<unsigned char>('0'), 12},
      // closed e.Accum#1 as range 5
      // closed e.Text#1 as range 12(2)
      //DEBUG: e.Accum#1: 5
      //DEBUG: e.Text#1: 2
      {refalrts::icEmptyResult, 0, 0, 0},
      //TRASH: {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 AsIs: & Name/4 AsIs: (/7 AsIs: e.Accum#1/5 HalfReuse: '0'/8 HalfReuse: )/9 AsIs: e.Text#1/12(2) AsIs: >/1 ]] }
      {refalrts::icReinitChar, 0, '0', 8},
      {refalrts::icReinitBracket, 0, refalrts::ibCloseBracket, 9},
      {refalrts::icPushStack, 0, 0, 1},
      {refalrts::icPushStack, 0, 0, 0},
      {refalrts::icLinkBrackets, 7, 9, 0},
      {refalrts::icNextStep, 0, 0, 0},
      {refalrts::icProfilerStopSentence, 0, 0, 0},
      {refalrts::icOnFailGoTo, +9, 0, 0},
      // ( e.idx ) '1' e.idx
      // </0 & Name/4 (/7 e.Accum#1/5 )/8 '1'/9 e.Text#1/2 >/1
      {refalrts::icSave, 0, 12, 2},
      {refalrts::icCharLeftSave, 9, static_cast<unsigned char>('1'), 12},
      // closed e.Accum#1 as range 5
      // closed e.Text#1 as range 12(2)
      //DEBUG: e.Accum#1: 5
      //DEBUG: e.Text#1: 2
      {refalrts::icEmptyResult, 0, 0, 0},
      //TRASH: {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 AsIs: & Name/4 AsIs: (/7 AsIs: e.Accum#1/5 HalfReuse: '1'/8 HalfReuse: )/9 AsIs: e.Text#1/12(2) AsIs: >/1 ]] }
      {refalrts::icReinitChar, 0, '1', 8},
      {refalrts::icReinitBracket, 0, refalrts::ibCloseBracket, 9},
      {refalrts::icPushStack, 0, 0, 1},
      {refalrts::icPushStack, 0, 0, 0},
      {refalrts::icLinkBrackets, 7, 9, 0},
      {refalrts::icNextStep, 0, 0, 0},
      {refalrts::icProfilerStopSentence, 0, 0, 0},
      {refalrts::icOnFailGoTo, +9, 0, 0},
      // ( e.idx ) '2' e.idx
      // </0 & Name/4 (/7 e.Accum#1/5 )/8 '2'/9 e.Text#1/2 >/1
      {refalrts::icSave, 0, 12, 2},
      {refalrts::icCharLeftSave, 9, static_cast<unsigned char>('2'), 12},
      // closed e.Accum#1 as range 5
      // closed e.Text#1 as range 12(2)
      //DEBUG: e.Accum#1: 5
      //DEBUG: e.Text#1: 2
      {refalrts::icEmptyResult, 0, 0, 0},
      //TRASH: {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 AsIs: & Name/4 AsIs: (/7 AsIs: e.Accum#1/5 HalfReuse: '2'/8 HalfReuse: )/9 AsIs: e.Text#1/12(2) AsIs: >/1 ]] }
      {refalrts::icReinitChar, 0, '2', 8},
      {refalrts::icReinitBracket, 0, refalrts::ibCloseBracket, 9},
      {refalrts::icPushStack, 0, 0, 1},
      {refalrts::icPushStack, 0, 0, 0},
      {refalrts::icLinkBrackets, 7, 9, 0},
      {refalrts::icNextStep, 0, 0, 0},
      {refalrts::icProfilerStopSentence, 0, 0, 0},
      {refalrts::icOnFailGoTo, +9, 0, 0},
      // ( e.idx ) '3' e.idx
      // </0 & Name/4 (/7 e.Accum#1/5 )/8 '3'/9 e.Text#1/2 >/1
      {refalrts::icSave, 0, 12, 2},
      {refalrts::icCharLeftSave, 9, static_cast<unsigned char>('3'), 12},
      // closed e.Accum#1 as range 5
      // closed e.Text#1 as range 12(2)
      //DEBUG: e.Accum#1: 5
      //DEBUG: e.Text#1: 2
      {refalrts::icEmptyResult, 0, 0, 0},
      //TRASH: {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 AsIs: & Name/4 AsIs: (/7 AsIs: e.Accum#1/5 HalfReuse: '3'/8 HalfReuse: )/9 AsIs: e.Text#1/12(2) AsIs: >/1 ]] }
      {refalrts::icReinitChar, 0, '3', 8},
      {refalrts::icReinitBracket, 0, refalrts::ibCloseBracket, 9},
      {refalrts::icPushStack, 0, 0, 1},
      {refalrts::icPushStack, 0, 0, 0},
      {refalrts::icLinkBrackets, 7, 9, 0},
      {refalrts::icNextStep, 0, 0, 0},
      {refalrts::icProfilerStopSentence, 0, 0, 0},
      {refalrts::icOnFailGoTo, +9, 0, 0},
      // ( e.idx ) '4' e.idx
      // </0 & Name/4 (/7 e.Accum#1/5 )/8 '4'/9 e.Text#1/2 >/1
      {refalrts::icSave, 0, 12, 2},
      {refalrts::icCharLeftSave, 9, static_cast<unsigned char>('4'), 12},
      // closed e.Accum#1 as range 5
      // closed e.Text#1 as range 12(2)
      //DEBUG: e.Accum#1: 5
      //DEBUG: e.Text#1: 2
      {refalrts::icEmptyResult, 0, 0, 0},
      //TRASH: {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 AsIs: & Name/4 AsIs: (/7 AsIs: e.Accum#1/5 HalfReuse: '4'/8 HalfReuse: )/9 AsIs: e.Text#1/12(2) AsIs: >/1 ]] }
      {refalrts::icReinitChar, 0, '4', 8},
      {refalrts::icReinitBracket, 0, refalrts::ibCloseBracket, 9},
      {refalrts::icPushStack, 0, 0, 1},
      {refalrts::icPushStack, 0, 0, 0},
      {refalrts::icLinkBrackets, 7, 9, 0},
      {refalrts::icNextStep, 0, 0, 0},
      {refalrts::icProfilerStopSentence, 0, 0, 0},
      {refalrts::icOnFailGoTo, +9, 0, 0},
      // ( e.idx ) '5' e.idx
      // </0 & Name/4 (/7 e.Accum#1/5 )/8 '5'/9 e.Text#1/2 >/1
      {refalrts::icSave, 0, 12, 2},
      {refalrts::icCharLeftSave, 9, static_cast<unsigned char>('5'), 12},
      // closed e.Accum#1 as range 5
      // closed e.Text#1 as range 12(2)
      //DEBUG: e.Accum#1: 5
      //DEBUG: e.Text#1: 2
      {refalrts::icEmptyResult, 0, 0, 0},
      //TRASH: {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 AsIs: & Name/4 AsIs: (/7 AsIs: e.Accum#1/5 HalfReuse: '5'/8 HalfReuse: )/9 AsIs: e.Text#1/12(2) AsIs: >/1 ]] }
      {refalrts::icReinitChar, 0, '5', 8},
      {refalrts::icReinitBracket, 0, refalrts::ibCloseBracket, 9},
      {refalrts::icPushStack, 0, 0, 1},
      {refalrts::icPushStack, 0, 0, 0},
      {refalrts::icLinkBrackets, 7, 9, 0},
      {refalrts::icNextStep, 0, 0, 0},
      {refalrts::icProfilerStopSentence, 0, 0, 0},
      {refalrts::icOnFailGoTo, +9, 0, 0},
      // ( e.idx ) '6' e.idx
      // </0 & Name/4 (/7 e.Accum#1/5 )/8 '6'/9 e.Text#1/2 >/1
      {refalrts::icSave, 0, 12, 2},
      {refalrts::icCharLeftSave, 9, static_cast<unsigned char>('6'), 12},
      // closed e.Accum#1 as range 5
      // closed e.Text#1 as range 12(2)
      //DEBUG: e.Accum#1: 5
      //DEBUG: e.Text#1: 2
      {refalrts::icEmptyResult, 0, 0, 0},
      //TRASH: {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 AsIs: & Name/4 AsIs: (/7 AsIs: e.Accum#1/5 HalfReuse: '6'/8 HalfReuse: )/9 AsIs: e.Text#1/12(2) AsIs: >/1 ]] }
      {refalrts::icReinitChar, 0, '6', 8},
      {refalrts::icReinitBracket, 0, refalrts::ibCloseBracket, 9},
      {refalrts::icPushStack, 0, 0, 1},
      {refalrts::icPushStack, 0, 0, 0},
      {refalrts::icLinkBrackets, 7, 9, 0},
      {refalrts::icNextStep, 0, 0, 0},
      {refalrts::icProfilerStopSentence, 0, 0, 0},
      {refalrts::icOnFailGoTo, +9, 0, 0},
      // ( e.idx ) '7' e.idx
      // </0 & Name/4 (/7 e.Accum#1/5 )/8 '7'/9 e.Text#1/2 >/1
      {refalrts::icSave, 0, 12, 2},
      {refalrts::icCharLeftSave, 9, static_cast<unsigned char>('7'), 12},
      // closed e.Accum#1 as range 5
      // closed e.Text#1 as range 12(2)
      //DEBUG: e.Accum#1: 5
      //DEBUG: e.Text#1: 2
      {refalrts::icEmptyResult, 0, 0, 0},
      //TRASH: {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 AsIs: & Name/4 AsIs: (/7 AsIs: e.Accum#1/5 HalfReuse: '7'/8 HalfReuse: )/9 AsIs: e.Text#1/12(2) AsIs: >/1 ]] }
      {refalrts::icReinitChar, 0, '7', 8},
      {refalrts::icReinitBracket, 0, refalrts::ibCloseBracket, 9},
      {refalrts::icPushStack, 0, 0, 1},
      {refalrts::icPushStack, 0, 0, 0},
      {refalrts::icLinkBrackets, 7, 9, 0},
      {refalrts::icNextStep, 0, 0, 0},
      {refalrts::icProfilerStopSentence, 0, 0, 0},
      {refalrts::icOnFailGoTo, +9, 0, 0},
      // ( e.idx ) '8' e.idx
      // </0 & Name/4 (/7 e.Accum#1/5 )/8 '8'/9 e.Text#1/2 >/1
      {refalrts::icSave, 0, 12, 2},
      {refalrts::icCharLeftSave, 9, static_cast<unsigned char>('8'), 12},
      // closed e.Accum#1 as range 5
      // closed e.Text#1 as range 12(2)
      //DEBUG: e.Accum#1: 5
      //DEBUG: e.Text#1: 2
      {refalrts::icEmptyResult, 0, 0, 0},
      //TRASH: {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 AsIs: & Name/4 AsIs: (/7 AsIs: e.Accum#1/5 HalfReuse: '8'/8 HalfReuse: )/9 AsIs: e.Text#1/12(2) AsIs: >/1 ]] }
      {refalrts::icReinitChar, 0, '8', 8},
      {refalrts::icReinitBracket, 0, refalrts::ibCloseBracket, 9},
      {refalrts::icPushStack, 0, 0, 1},
      {refalrts::icPushStack, 0, 0, 0},
      {refalrts::icLinkBrackets, 7, 9, 0},
      {refalrts::icNextStep, 0, 0, 0},
      {refalrts::icProfilerStopSentence, 0, 0, 0},
      {refalrts::icOnFailGoTo, +9, 0, 0},
      // ( e.idx ) '9' e.idx
      // </0 & Name/4 (/7 e.Accum#1/5 )/8 '9'/9 e.Text#1/2 >/1
      {refalrts::icSave, 0, 12, 2},
      {refalrts::icCharLeftSave, 9, static_cast<unsigned char>('9'), 12},
      // closed e.Accum#1 as range 5
      // closed e.Text#1 as range 12(2)
      //DEBUG: e.Accum#1: 5
      //DEBUG: e.Text#1: 2
      {refalrts::icEmptyResult, 0, 0, 0},
      //TRASH: {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 AsIs: & Name/4 AsIs: (/7 AsIs: e.Accum#1/5 HalfReuse: '9'/8 HalfReuse: )/9 AsIs: e.Text#1/12(2) AsIs: >/1 ]] }
      {refalrts::icReinitChar, 0, '9', 8},
      {refalrts::icReinitBracket, 0, refalrts::ibCloseBracket, 9},
      {refalrts::icPushStack, 0, 0, 1},
      {refalrts::icPushStack, 0, 0, 0},
      {refalrts::icLinkBrackets, 7, 9, 0},
      {refalrts::icNextStep, 0, 0, 0},
      {refalrts::icProfilerStopSentence, 0, 0, 0},
      {refalrts::icOnFailGoTo, +9, 0, 0},
      // ( e.idx ) 'a' e.idx
      // </0 & Name/4 (/7 e.Accum#1/5 )/8 'a'/9 e.Text#1/2 >/1
      {refalrts::icSave, 0, 12, 2},
      {refalrts::icCharLeftSave, 9, static_cast<unsigned char>('a'), 12},
      // closed e.Accum#1 as range 5
      // closed e.Text#1 as range 12(2)
      //DEBUG: e.Accum#1: 5
      //DEBUG: e.Text#1: 2
      {refalrts::icEmptyResult, 0, 0, 0},
      //TRASH: {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 AsIs: & Name/4 AsIs: (/7 AsIs: e.Accum#1/5 HalfReuse: 'a'/8 HalfReuse: )/9 AsIs: e.Text#1/12(2) AsIs: >/1 ]] }
      {refalrts::icReinitChar, 0, 'a', 8},
      {refalrts::icReinitBracket, 0, refalrts::ibCloseBracket, 9},
      {refalrts::icPushStack, 0, 0, 1},
      {refalrts::icPushStack, 0, 0, 0},
      {refalrts::icLinkBrackets, 7, 9, 0},
      {refalrts::icNextStep, 0, 0, 0},
      {refalrts::icProfilerStopSentence, 0, 0, 0},
      {refalrts::icOnFailGoTo, +9, 0, 0},
      // ( e.idx ) 'b' e.idx
      // </0 & Name/4 (/7 e.Accum#1/5 )/8 'b'/9 e.Text#1/2 >/1
      {refalrts::icSave, 0, 12, 2},
      {refalrts::icCharLeftSave, 9, static_cast<unsigned char>('b'), 12},
      // closed e.Accum#1 as range 5
      // closed e.Text#1 as range 12(2)
      //DEBUG: e.Accum#1: 5
      //DEBUG: e.Text#1: 2
      {refalrts::icEmptyResult, 0, 0, 0},
      //TRASH: {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 AsIs: & Name/4 AsIs: (/7 AsIs: e.Accum#1/5 HalfReuse: 'b'/8 HalfReuse: )/9 AsIs: e.Text#1/12(2) AsIs: >/1 ]] }
      {refalrts::icReinitChar, 0, 'b', 8},
      {refalrts::icReinitBracket, 0, refalrts::ibCloseBracket, 9},
      {refalrts::icPushStack, 0, 0, 1},
      {refalrts::icPushStack, 0, 0, 0},
      {refalrts::icLinkBrackets, 7, 9, 0},
      {refalrts::icNextStep, 0, 0, 0},
      {refalrts::icProfilerStopSentence, 0, 0, 0},
      {refalrts::icOnFailGoTo, +9, 0, 0},
      // ( e.idx ) 'c' e.idx
      // </0 & Name/4 (/7 e.Accum#1/5 )/8 'c'/9 e.Text#1/2 >/1
      {refalrts::icSave, 0, 12, 2},
      {refalrts::icCharLeftSave, 9, static_cast<unsigned char>('c'), 12},
      // closed e.Accum#1 as range 5
      // closed e.Text#1 as range 12(2)
      //DEBUG: e.Accum#1: 5
      //DEBUG: e.Text#1: 2
      {refalrts::icEmptyResult, 0, 0, 0},
      //TRASH: {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 AsIs: & Name/4 AsIs: (/7 AsIs: e.Accum#1/5 HalfReuse: 'c'/8 HalfReuse: )/9 AsIs: e.Text#1/12(2) AsIs: >/1 ]] }
      {refalrts::icReinitChar, 0, 'c', 8},
      {refalrts::icReinitBracket, 0, refalrts::ibCloseBracket, 9},
      {refalrts::icPushStack, 0, 0, 1},
      {refalrts::icPushStack, 0, 0, 0},
      {refalrts::icLinkBrackets, 7, 9, 0},
      {refalrts::icNextStep, 0, 0, 0},
      {refalrts::icProfilerStopSentence, 0, 0, 0},
      {refalrts::icOnFailGoTo, +9, 0, 0},
      // ( e.idx ) 'd' e.idx
      // </0 & Name/4 (/7 e.Accum#1/5 )/8 'd'/9 e.Text#1/2 >/1
      {refalrts::icSave, 0, 12, 2},
      {refalrts::icCharLeftSave, 9, static_cast<unsigned char>('d'), 12},
      // closed e.Accum#1 as range 5
      // closed e.Text#1 as range 12(2)
      //DEBUG: e.Accum#1: 5
      //DEBUG: e.Text#1: 2
      {refalrts::icEmptyResult, 0, 0, 0},
      //TRASH: {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 AsIs: & Name/4 AsIs: (/7 AsIs: e.Accum#1/5 HalfReuse: 'd'/8 HalfReuse: )/9 AsIs: e.Text#1/12(2) AsIs: >/1 ]] }
      {refalrts::icReinitChar, 0, 'd', 8},
      {refalrts::icReinitBracket, 0, refalrts::ibCloseBracket, 9},
      {refalrts::icPushStack, 0, 0, 1},
      {refalrts::icPushStack, 0, 0, 0},
      {refalrts::icLinkBrackets, 7, 9, 0},
      {refalrts::icNextStep, 0, 0, 0},
      {refalrts::icProfilerStopSentence, 0, 0, 0},
      {refalrts::icOnFailGoTo, +9, 0, 0},
      // ( e.idx ) 'e' e.idx
      // </0 & Name/4 (/7 e.Accum#1/5 )/8 'e'/9 e.Text#1/2 >/1
      {refalrts::icSave, 0, 12, 2},
      {refalrts::icCharLeftSave, 9, static_cast<unsigned char>('e'), 12},
      // closed e.Accum#1 as range 5
      // closed e.Text#1 as range 12(2)
      //DEBUG: e.Accum#1: 5
      //DEBUG: e.Text#1: 2
      {refalrts::icEmptyResult, 0, 0, 0},
      //TRASH: {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 AsIs: & Name/4 AsIs: (/7 AsIs: e.Accum#1/5 HalfReuse: 'e'/8 HalfReuse: )/9 AsIs: e.Text#1/12(2) AsIs: >/1 ]] }
      {refalrts::icReinitChar, 0, 'e', 8},
      {refalrts::icReinitBracket, 0, refalrts::ibCloseBracket, 9},
      {refalrts::icPushStack, 0, 0, 1},
      {refalrts::icPushStack, 0, 0, 0},
      {refalrts::icLinkBrackets, 7, 9, 0},
      {refalrts::icNextStep, 0, 0, 0},
      {refalrts::icProfilerStopSentence, 0, 0, 0},
      {refalrts::icOnFailGoTo, +9, 0, 0},
      // ( e.idx ) 'f' e.idx
      // </0 & Name/4 (/7 e.Accum#1/5 )/8 'f'/9 e.Text#1/2 >/1
      {refalrts::icSave, 0, 12, 2},
      {refalrts::icCharLeftSave, 9, static_cast<unsigned char>('f'), 12},
      // closed e.Accum#1 as range 5
      // closed e.Text#1 as range 12(2)
      //DEBUG: e.Accum#1: 5
      //DEBUG: e.Text#1: 2
      {refalrts::icEmptyResult, 0, 0, 0},
      //TRASH: {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 AsIs: & Name/4 AsIs: (/7 AsIs: e.Accum#1/5 HalfReuse: 'f'/8 HalfReuse: )/9 AsIs: e.Text#1/12(2) AsIs: >/1 ]] }
      {refalrts::icReinitChar, 0, 'f', 8},
      {refalrts::icReinitBracket, 0, refalrts::ibCloseBracket, 9},
      {refalrts::icPushStack, 0, 0, 1},
      {refalrts::icPushStack, 0, 0, 0},
      {refalrts::icLinkBrackets, 7, 9, 0},
      {refalrts::icNextStep, 0, 0, 0},
      {refalrts::icProfilerStopSentence, 0, 0, 0},
      {refalrts::icOnFailGoTo, +9, 0, 0},
      // ( e.idx ) 'g' e.idx
      // </0 & Name/4 (/7 e.Accum#1/5 )/8 'g'/9 e.Text#1/2 >/1
      {refalrts::icSave, 0, 12, 2},
      {refalrts::icCharLeftSave, 9, static_cast<unsigned char>('g'), 12},
      // closed e.Accum#1 as range 5
      // closed e.Text#1 as range 12(2)
      //DEBUG: e.Accum#1: 5
      //DEBUG: e.Text#1: 2
      {refalrts::icEmptyResult, 0, 0, 0},
      //TRASH: {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 AsIs: & Name/4 AsIs: (/7 AsIs: e.Accum#1/5 HalfReuse: 'g'/8 HalfReuse: )/9 AsIs: e.Text#1/12(2) AsIs: >/1 ]] }
      {refalrts::icReinitChar, 0, 'g', 8},
      {refalrts::icReinitBracket, 0, refalrts::ibCloseBracket, 9},
      {refalrts::icPushStack, 0, 0, 1},
      {refalrts::icPushStack, 0, 0, 0},
      {refalrts::icLinkBrackets, 7, 9, 0},
      {refalrts::icNextStep, 0, 0, 0},
      {refalrts::icProfilerStopSentence, 0, 0, 0},
      {refalrts::icOnFailGoTo, +9, 0, 0},
      // ( e.idx ) 'h' e.idx
      // </0 & Name/4 (/7 e.Accum#1/5 )/8 'h'/9 e.Text#1/2 >/1
      {refalrts::icSave, 0, 12, 2},
      {refalrts::icCharLeftSave, 9, static_cast<unsigned char>('h'), 12},
      // closed e.Accum#1 as range 5
      // closed e.Text#1 as range 12(2)
      //DEBUG: e.Accum#1: 5
      //DEBUG: e.Text#1: 2
      {refalrts::icEmptyResult, 0, 0, 0},
      //TRASH: {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 AsIs: & Name/4 AsIs: (/7 AsIs: e.Accum#1/5 HalfReuse: 'h'/8 HalfReuse: )/9 AsIs: e.Text#1/12(2) AsIs: >/1 ]] }
      {refalrts::icReinitChar, 0, 'h', 8},
      {refalrts::icReinitBracket, 0, refalrts::ibCloseBracket, 9},
      {refalrts::icPushStack, 0, 0, 1},
      {refalrts::icPushStack, 0, 0, 0},
      {refalrts::icLinkBrackets, 7, 9, 0},
      {refalrts::icNextStep, 0, 0, 0},
      {refalrts::icProfilerStopSentence, 0, 0, 0},
      {refalrts::icOnFailGoTo, +9, 0, 0},
      // ( e.idx ) 'i' e.idx
      // </0 & Name/4 (/7 e.Accum#1/5 )/8 'i'/9 e.Text#1/2 >/1
      {refalrts::icSave, 0, 12, 2},
      {refalrts::icCharLeftSave, 9, static_cast<unsigned char>('i'), 12},
      // closed e.Accum#1 as range 5
      // closed e.Text#1 as range 12(2)
      //DEBUG: e.Accum#1: 5
      //DEBUG: e.Text#1: 2
      {refalrts::icEmptyResult, 0, 0, 0},
      //TRASH: {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 AsIs: & Name/4 AsIs: (/7 AsIs: e.Accum#1/5 HalfReuse: 'i'/8 HalfReuse: )/9 AsIs: e.Text#1/12(2) AsIs: >/1 ]] }
      {refalrts::icReinitChar, 0, 'i', 8},
      {refalrts::icReinitBracket, 0, refalrts::ibCloseBracket, 9},
      {refalrts::icPushStack, 0, 0, 1},
      {refalrts::icPushStack, 0, 0, 0},
      {refalrts::icLinkBrackets, 7, 9, 0},
      {refalrts::icNextStep, 0, 0, 0},
      {refalrts::icProfilerStopSentence, 0, 0, 0},
      {refalrts::icOnFailGoTo, +9, 0, 0},
      // ( e.idx ) 'j' e.idx
      // </0 & Name/4 (/7 e.Accum#1/5 )/8 'j'/9 e.Text#1/2 >/1
      {refalrts::icSave, 0, 12, 2},
      {refalrts::icCharLeftSave, 9, static_cast<unsigned char>('j'), 12},
      // closed e.Accum#1 as range 5
      // closed e.Text#1 as range 12(2)
      //DEBUG: e.Accum#1: 5
      //DEBUG: e.Text#1: 2
      {refalrts::icEmptyResult, 0, 0, 0},
      //TRASH: {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 AsIs: & Name/4 AsIs: (/7 AsIs: e.Accum#1/5 HalfReuse: 'j'/8 HalfReuse: )/9 AsIs: e.Text#1/12(2) AsIs: >/1 ]] }
      {refalrts::icReinitChar, 0, 'j', 8},
      {refalrts::icReinitBracket, 0, refalrts::ibCloseBracket, 9},
      {refalrts::icPushStack, 0, 0, 1},
      {refalrts::icPushStack, 0, 0, 0},
      {refalrts::icLinkBrackets, 7, 9, 0},
      {refalrts::icNextStep, 0, 0, 0},
      {refalrts::icProfilerStopSentence, 0, 0, 0},
      {refalrts::icOnFailGoTo, +9, 0, 0},
      // ( e.idx ) 'k' e.idx
      // </0 & Name/4 (/7 e.Accum#1/5 )/8 'k'/9 e.Text#1/2 >/1
      {refalrts::icSave, 0, 12, 2},
      {refalrts::icCharLeftSave, 9, static_cast<unsigned char>('k'), 12},
      // closed e.Accum#1 as range 5
      // closed e.Text#1 as range 12(2)
      //DEBUG: e.Accum#1: 5
      //DEBUG: e.Text#1: 2
      {refalrts::icEmptyResult, 0, 0, 0},
      //TRASH: {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 AsIs: & Name/4 AsIs: (/7 AsIs: e.Accum#1/5 HalfReuse: 'k'/8 HalfReuse: )/9 AsIs: e.Text#1/12(2) AsIs: >/1 ]] }
      {refalrts::icReinitChar, 0, 'k', 8},
      {refalrts::icReinitBracket, 0, refalrts::ibCloseBracket, 9},
      {refalrts::icPushStack, 0, 0, 1},
      {refalrts::icPushStack, 0, 0, 0},
      {refalrts::icLinkBrackets, 7, 9, 0},
      {refalrts::icNextStep, 0, 0, 0},
      {refalrts::icProfilerStopSentence, 0, 0, 0},
      {refalrts::icOnFailGoTo, +9, 0, 0},
      // ( e.idx ) 'l' e.idx
      // </0 & Name/4 (/7 e.Accum#1/5 )/8 'l'/9 e.Text#1/2 >/1
      {refalrts::icSave, 0, 12, 2},
      {refalrts::icCharLeftSave, 9, static_cast<unsigned char>('l'), 12},
      // closed e.Accum#1 as range 5
      // closed e.Text#1 as range 12(2)
      //DEBUG: e.Accum#1: 5
      //DEBUG: e.Text#1: 2
      {refalrts::icEmptyResult, 0, 0, 0},
      //TRASH: {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 AsIs: & Name/4 AsIs: (/7 AsIs: e.Accum#1/5 HalfReuse: 'l'/8 HalfReuse: )/9 AsIs: e.Text#1/12(2) AsIs: >/1 ]] }
      {refalrts::icReinitChar, 0, 'l', 8},
      {refalrts::icReinitBracket, 0, refalrts::ibCloseBracket, 9},
      {refalrts::icPushStack, 0, 0, 1},
      {refalrts::icPushStack, 0, 0, 0},
      {refalrts::icLinkBrackets, 7, 9, 0},
      {refalrts::icNextStep, 0, 0, 0},
      {refalrts::icProfilerStopSentence, 0, 0, 0},
      {refalrts::icOnFailGoTo, +9, 0, 0},
      // ( e.idx ) 'm' e.idx
      // </0 & Name/4 (/7 e.Accum#1/5 )/8 'm'/9 e.Text#1/2 >/1
      {refalrts::icSave, 0, 12, 2},
      {refalrts::icCharLeftSave, 9, static_cast<unsigned char>('m'), 12},
      // closed e.Accum#1 as range 5
      // closed e.Text#1 as range 12(2)
      //DEBUG: e.Accum#1: 5
      //DEBUG: e.Text#1: 2
      {refalrts::icEmptyResult, 0, 0, 0},
      //TRASH: {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 AsIs: & Name/4 AsIs: (/7 AsIs: e.Accum#1/5 HalfReuse: 'm'/8 HalfReuse: )/9 AsIs: e.Text#1/12(2) AsIs: >/1 ]] }
      {refalrts::icReinitChar, 0, 'm', 8},
      {refalrts::icReinitBracket, 0, refalrts::ibCloseBracket, 9},
      {refalrts::icPushStack, 0, 0, 1},
      {refalrts::icPushStack, 0, 0, 0},
      {refalrts::icLinkBrackets, 7, 9, 0},
      {refalrts::icNextStep, 0, 0, 0},
      {refalrts::icProfilerStopSentence, 0, 0, 0},
      {refalrts::icOnFailGoTo, +9, 0, 0},
      // ( e.idx ) 'n' e.idx
      // </0 & Name/4 (/7 e.Accum#1/5 )/8 'n'/9 e.Text#1/2 >/1
      {refalrts::icSave, 0, 12, 2},
      {refalrts::icCharLeftSave, 9, static_cast<unsigned char>('n'), 12},
      // closed e.Accum#1 as range 5
      // closed e.Text#1 as range 12(2)
      //DEBUG: e.Accum#1: 5
      //DEBUG: e.Text#1: 2
      {refalrts::icEmptyResult, 0, 0, 0},
      //TRASH: {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 AsIs: & Name/4 AsIs: (/7 AsIs: e.Accum#1/5 HalfReuse: 'n'/8 HalfReuse: )/9 AsIs: e.Text#1/12(2) AsIs: >/1 ]] }
      {refalrts::icReinitChar, 0, 'n', 8},
      {refalrts::icReinitBracket, 0, refalrts::ibCloseBracket, 9},
      {refalrts::icPushStack, 0, 0, 1},
      {refalrts::icPushStack, 0, 0, 0},
      {refalrts::icLinkBrackets, 7, 9, 0},
      {refalrts::icNextStep, 0, 0, 0},
      {refalrts::icProfilerStopSentence, 0, 0, 0},
      {refalrts::icOnFailGoTo, +9, 0, 0},
      // ( e.idx ) 'o' e.idx
      // </0 & Name/4 (/7 e.Accum#1/5 )/8 'o'/9 e.Text#1/2 >/1
      {refalrts::icSave, 0, 12, 2},
      {refalrts::icCharLeftSave, 9, static_cast<unsigned char>('o'), 12},
      // closed e.Accum#1 as range 5
      // closed e.Text#1 as range 12(2)
      //DEBUG: e.Accum#1: 5
      //DEBUG: e.Text#1: 2
      {refalrts::icEmptyResult, 0, 0, 0},
      //TRASH: {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 AsIs: & Name/4 AsIs: (/7 AsIs: e.Accum#1/5 HalfReuse: 'o'/8 HalfReuse: )/9 AsIs: e.Text#1/12(2) AsIs: >/1 ]] }
      {refalrts::icReinitChar, 0, 'o', 8},
      {refalrts::icReinitBracket, 0, refalrts::ibCloseBracket, 9},
      {refalrts::icPushStack, 0, 0, 1},
      {refalrts::icPushStack, 0, 0, 0},
      {refalrts::icLinkBrackets, 7, 9, 0},
      {refalrts::icNextStep, 0, 0, 0},
      {refalrts::icProfilerStopSentence, 0, 0, 0},
      {refalrts::icOnFailGoTo, +9, 0, 0},
      // ( e.idx ) 'p' e.idx
      // </0 & Name/4 (/7 e.Accum#1/5 )/8 'p'/9 e.Text#1/2 >/1
      {refalrts::icSave, 0, 12, 2},
      {refalrts::icCharLeftSave, 9, static_cast<unsigned char>('p'), 12},
      // closed e.Accum#1 as range 5
      // closed e.Text#1 as range 12(2)
      //DEBUG: e.Accum#1: 5
      //DEBUG: e.Text#1: 2
      {refalrts::icEmptyResult, 0, 0, 0},
      //TRASH: {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 AsIs: & Name/4 AsIs: (/7 AsIs: e.Accum#1/5 HalfReuse: 'p'/8 HalfReuse: )/9 AsIs: e.Text#1/12(2) AsIs: >/1 ]] }
      {refalrts::icReinitChar, 0, 'p', 8},
      {refalrts::icReinitBracket, 0, refalrts::ibCloseBracket, 9},
      {refalrts::icPushStack, 0, 0, 1},
      {refalrts::icPushStack, 0, 0, 0},
      {refalrts::icLinkBrackets, 7, 9, 0},
      {refalrts::icNextStep, 0, 0, 0},
      {refalrts::icProfilerStopSentence, 0, 0, 0},
      {refalrts::icOnFailGoTo, +9, 0, 0},
      // ( e.idx ) 'q' e.idx
      // </0 & Name/4 (/7 e.Accum#1/5 )/8 'q'/9 e.Text#1/2 >/1
      {refalrts::icSave, 0, 12, 2},
      {refalrts::icCharLeftSave, 9, static_cast<unsigned char>('q'), 12},
      // closed e.Accum#1 as range 5
      // closed e.Text#1 as range 12(2)
      //DEBUG: e.Accum#1: 5
      //DEBUG: e.Text#1: 2
      {refalrts::icEmptyResult, 0, 0, 0},
      //TRASH: {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 AsIs: & Name/4 AsIs: (/7 AsIs: e.Accum#1/5 HalfReuse: 'q'/8 HalfReuse: )/9 AsIs: e.Text#1/12(2) AsIs: >/1 ]] }
      {refalrts::icReinitChar, 0, 'q', 8},
      {refalrts::icReinitBracket, 0, refalrts::ibCloseBracket, 9},
      {refalrts::icPushStack, 0, 0, 1},
      {refalrts::icPushStack, 0, 0, 0},
      {refalrts::icLinkBrackets, 7, 9, 0},
      {refalrts::icNextStep, 0, 0, 0},
      {refalrts::icProfilerStopSentence, 0, 0, 0},
      {refalrts::icOnFailGoTo, +9, 0, 0},
      // ( e.idx ) 'r' e.idx
      // </0 & Name/4 (/7 e.Accum#1/5 )/8 'r'/9 e.Text#1/2 >/1
      {refalrts::icSave, 0, 12, 2},
      {refalrts::icCharLeftSave, 9, static_cast<unsigned char>('r'), 12},
      // closed e.Accum#1 as range 5
      // closed e.Text#1 as range 12(2)
      //DEBUG: e.Accum#1: 5
      //DEBUG: e.Text#1: 2
      {refalrts::icEmptyResult, 0, 0, 0},
      //TRASH: {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 AsIs: & Name/4 AsIs: (/7 AsIs: e.Accum#1/5 HalfReuse: 'r'/8 HalfReuse: )/9 AsIs: e.Text#1/12(2) AsIs: >/1 ]] }
      {refalrts::icReinitChar, 0, 'r', 8},
      {refalrts::icReinitBracket, 0, refalrts::ibCloseBracket, 9},
      {refalrts::icPushStack, 0, 0, 1},
      {refalrts::icPushStack, 0, 0, 0},
      {refalrts::icLinkBrackets, 7, 9, 0},
      {refalrts::icNextStep, 0, 0, 0},
      {refalrts::icProfilerStopSentence, 0, 0, 0},
      {refalrts::icOnFailGoTo, +9, 0, 0},
      // ( e.idx ) 's' e.idx
      // </0 & Name/4 (/7 e.Accum#1/5 )/8 's'/9 e.Text#1/2 >/1
      {refalrts::icSave, 0, 12, 2},
      {refalrts::icCharLeftSave, 9, static_cast<unsigned char>('s'), 12},
      // closed e.Accum#1 as range 5
      // closed e.Text#1 as range 12(2)
      //DEBUG: e.Accum#1: 5
      //DEBUG: e.Text#1: 2
      {refalrts::icEmptyResult, 0, 0, 0},
      //TRASH: {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 AsIs: & Name/4 AsIs: (/7 AsIs: e.Accum#1/5 HalfReuse: 's'/8 HalfReuse: )/9 AsIs: e.Text#1/12(2) AsIs: >/1 ]] }
      {refalrts::icReinitChar, 0, 's', 8},
      {refalrts::icReinitBracket, 0, refalrts::ibCloseBracket, 9},
      {refalrts::icPushStack, 0, 0, 1},
      {refalrts::icPushStack, 0, 0, 0},
      {refalrts::icLinkBrackets, 7, 9, 0},
      {refalrts::icNextStep, 0, 0, 0},
      {refalrts::icProfilerStopSentence, 0, 0, 0},
      {refalrts::icOnFailGoTo, +9, 0, 0},
      // ( e.idx ) 't' e.idx
      // </0 & Name/4 (/7 e.Accum#1/5 )/8 't'/9 e.Text#1/2 >/1
      {refalrts::icSave, 0, 12, 2},
      {refalrts::icCharLeftSave, 9, static_cast<unsigned char>('t'), 12},
      // closed e.Accum#1 as range 5
      // closed e.Text#1 as range 12(2)
      //DEBUG: e.Accum#1: 5
      //DEBUG: e.Text#1: 2
      {refalrts::icEmptyResult, 0, 0, 0},
      //TRASH: {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 AsIs: & Name/4 AsIs: (/7 AsIs: e.Accum#1/5 HalfReuse: 't'/8 HalfReuse: )/9 AsIs: e.Text#1/12(2) AsIs: >/1 ]] }
      {refalrts::icReinitChar, 0, 't', 8},
      {refalrts::icReinitBracket, 0, refalrts::ibCloseBracket, 9},
      {refalrts::icPushStack, 0, 0, 1},
      {refalrts::icPushStack, 0, 0, 0},
      {refalrts::icLinkBrackets, 7, 9, 0},
      {refalrts::icNextStep, 0, 0, 0},
      {refalrts::icProfilerStopSentence, 0, 0, 0},
      {refalrts::icOnFailGoTo, +9, 0, 0},
      // ( e.idx ) 'u' e.idx
      // </0 & Name/4 (/7 e.Accum#1/5 )/8 'u'/9 e.Text#1/2 >/1
      {refalrts::icSave, 0, 12, 2},
      {refalrts::icCharLeftSave, 9, static_cast<unsigned char>('u'), 12},
      // closed e.Accum#1 as range 5
      // closed e.Text#1 as range 12(2)
      //DEBUG: e.Accum#1: 5
      //DEBUG: e.Text#1: 2
      {refalrts::icEmptyResult, 0, 0, 0},
      //TRASH: {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 AsIs: & Name/4 AsIs: (/7 AsIs: e.Accum#1/5 HalfReuse: 'u'/8 HalfReuse: )/9 AsIs: e.Text#1/12(2) AsIs: >/1 ]] }
      {refalrts::icReinitChar, 0, 'u', 8},
      {refalrts::icReinitBracket, 0, refalrts::ibCloseBracket, 9},
      {refalrts::icPushStack, 0, 0, 1},
      {refalrts::icPushStack, 0, 0, 0},
      {refalrts::icLinkBrackets, 7, 9, 0},
      {refalrts::icNextStep, 0, 0, 0},
      {refalrts::icProfilerStopSentence, 0, 0, 0},
      {refalrts::icOnFailGoTo, +9, 0, 0},
      // ( e.idx ) 'v' e.idx
      // </0 & Name/4 (/7 e.Accum#1/5 )/8 'v'/9 e.Text#1/2 >/1
      {refalrts::icSave, 0, 12, 2},
      {refalrts::icCharLeftSave, 9, static_cast<unsigned char>('v'), 12},
      // closed e.Accum#1 as range 5
      // closed e.Text#1 as range 12(2)
      //DEBUG: e.Accum#1: 5
      //DEBUG: e.Text#1: 2
      {refalrts::icEmptyResult, 0, 0, 0},
      //TRASH: {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 AsIs: & Name/4 AsIs: (/7 AsIs: e.Accum#1/5 HalfReuse: 'v'/8 HalfReuse: )/9 AsIs: e.Text#1/12(2) AsIs: >/1 ]] }
      {refalrts::icReinitChar, 0, 'v', 8},
      {refalrts::icReinitBracket, 0, refalrts::ibCloseBracket, 9},
      {refalrts::icPushStack, 0, 0, 1},
      {refalrts::icPushStack, 0, 0, 0},
      {refalrts::icLinkBrackets, 7, 9, 0},
      {refalrts::icNextStep, 0, 0, 0},
      {refalrts::icProfilerStopSentence, 0, 0, 0},
      {refalrts::icOnFailGoTo, +9, 0, 0},
      // ( e.idx ) 'w' e.idx
      // </0 & Name/4 (/7 e.Accum#1/5 )/8 'w'/9 e.Text#1/2 >/1
      {refalrts::icSave, 0, 12, 2},
      {refalrts::icCharLeftSave, 9, static_cast<unsigned char>('w'), 12},
      // closed e.Accum#1 as range 5
      // closed e.Text#1 as range 12(2)
      //DEBUG: e.Accum#1: 5
      //DEBUG: e.Text#1: 2
      {refalrts::icEmptyResult, 0, 0, 0},
      //TRASH: {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 AsIs: & Name/4 AsIs: (/7 AsIs: e.Accum#1/5 HalfReuse: 'w'/8 HalfReuse: )/9 AsIs: e.Text#1/12(2) AsIs: >/1 ]] }
      {refalrts::icReinitChar, 0, 'w', 8},
      {refalrts::icReinitBracket, 0, refalrts::ibCloseBracket, 9},
      {refalrts::icPushStack, 0, 0, 1},
      {refalrts::icPushStack, 0, 0, 0},
      {refalrts::icLinkBrackets, 7, 9, 0},
      {refalrts::icNextStep, 0, 0, 0},
      {refalrts::icProfilerStopSentence, 0, 0, 0},
      {refalrts::icOnFailGoTo, +9, 0, 0},
      // ( e.idx ) 'x' e.idx
      // </0 & Name/4 (/7 e.Accum#1/5 )/8 'x'/9 e.Text#1/2 >/1
      {refalrts::icSave, 0, 12, 2},
      {refalrts::icCharLeftSave, 9, static_cast<unsigned char>('x'), 12},
      // closed e.Accum#1 as range 5
      // closed e.Text#1 as range 12(2)
      //DEBUG: e.Accum#1: 5
      //DEBUG: e.Text#1: 2
      {refalrts::icEmptyResult, 0, 0, 0},
      //TRASH: {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 AsIs: & Name/4 AsIs: (/7 AsIs: e.Accum#1/5 HalfReuse: 'x'/8 HalfReuse: )/9 AsIs: e.Text#1/12(2) AsIs: >/1 ]] }
      {refalrts::icReinitChar, 0, 'x', 8},
      {refalrts::icReinitBracket, 0, refalrts::ibCloseBracket, 9},
      {refalrts::icPushStack, 0, 0, 1},
      {refalrts::icPushStack, 0, 0, 0},
      {refalrts::icLinkBrackets, 7, 9, 0},
      {refalrts::icNextStep, 0, 0, 0},
      {refalrts::icProfilerStopSentence, 0, 0, 0},
      {refalrts::icOnFailGoTo, +9, 0, 0},
      // ( e.idx ) 'y' e.idx
      // </0 & Name/4 (/7 e.Accum#1/5 )/8 'y'/9 e.Text#1/2 >/1
      {refalrts::icSave, 0, 12, 2},
      {refalrts::icCharLeftSave, 9, static_cast<unsigned char>('y'), 12},
      // closed e.Accum#1 as range 5
      // closed e.Text#1 as range 12(2)
      //DEBUG: e.Accum#1: 5
      //DEBUG: e.Text#1: 2
      {refalrts::icEmptyResult, 0, 0, 0},
      //TRASH: {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 AsIs: & Name/4 AsIs: (/7 AsIs: e.Accum#1/5 HalfReuse: 'y'/8 HalfReuse: )/9 AsIs: e.Text#1/12(2) AsIs: >/1 ]] }
      {refalrts::icReinitChar, 0, 'y', 8},
      {refalrts::icReinitBracket, 0, refalrts::ibCloseBracket, 9},
      {refalrts::icPushStack, 0, 0, 1},
      {refalrts::icPushStack, 0, 0, 0},
      {refalrts::icLinkBrackets, 7, 9, 0},
      {refalrts::icNextStep, 0, 0, 0},
      {refalrts::icProfilerStopSentence, 0, 0, 0},
      {refalrts::icOnFailGoTo, +9, 0, 0},
      // ( e.idx ) 'z' e.idx
      // </0 & Name/4 (/7 e.Accum#1/5 )/8 'z'/9 e.Text#1/2 >/1
      {refalrts::icSave, 0, 12, 2},
      {refalrts::icCharLeftSave, 9, static_cast<unsigned char>('z'), 12},
      // closed e.Accum#1 as range 5
      // closed e.Text#1 as range 12(2)
      //DEBUG: e.Accum#1: 5
      //DEBUG: e.Text#1: 2
      {refalrts::icEmptyResult, 0, 0, 0},
      //TRASH: {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 AsIs: & Name/4 AsIs: (/7 AsIs: e.Accum#1/5 HalfReuse: 'z'/8 HalfReuse: )/9 AsIs: e.Text#1/12(2) AsIs: >/1 ]] }
      {refalrts::icReinitChar, 0, 'z', 8},
      {refalrts::icReinitBracket, 0, refalrts::ibCloseBracket, 9},
      {refalrts::icPushStack, 0, 0, 1},
      {refalrts::icPushStack, 0, 0, 0},
      {refalrts::icLinkBrackets, 7, 9, 0},
      {refalrts::icNextStep, 0, 0, 0},
      {refalrts::icProfilerStopSentence, 0, 0, 0},
      {refalrts::icOnFailGoTo, +9, 0, 0},
      // ( e.idx ) 'A' e.idx
      // </0 & Name/4 (/7 e.Accum#1/5 )/8 'A'/9 e.Text#1/2 >/1
      {refalrts::icSave, 0, 12, 2},
      {refalrts::icCharLeftSave, 9, static_cast<unsigned char>('A'), 12},
      // closed e.Accum#1 as range 5
      // closed e.Text#1 as range 12(2)
      //DEBUG: e.Accum#1: 5
      //DEBUG: e.Text#1: 2
      {refalrts::icEmptyResult, 0, 0, 0},
      //TRASH: {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 AsIs: & Name/4 AsIs: (/7 AsIs: e.Accum#1/5 HalfReuse: 'A'/8 HalfReuse: )/9 AsIs: e.Text#1/12(2) AsIs: >/1 ]] }
      {refalrts::icReinitChar, 0, 'A', 8},
      {refalrts::icReinitBracket, 0, refalrts::ibCloseBracket, 9},
      {refalrts::icPushStack, 0, 0, 1},
      {refalrts::icPushStack, 0, 0, 0},
      {refalrts::icLinkBrackets, 7, 9, 0},
      {refalrts::icNextStep, 0, 0, 0},
      {refalrts::icProfilerStopSentence, 0, 0, 0},
      {refalrts::icOnFailGoTo, +9, 0, 0},
      // ( e.idx ) 'B' e.idx
      // </0 & Name/4 (/7 e.Accum#1/5 )/8 'B'/9 e.Text#1/2 >/1
      {refalrts::icSave, 0, 12, 2},
      {refalrts::icCharLeftSave, 9, static_cast<unsigned char>('B'), 12},
      // closed e.Accum#1 as range 5
      // closed e.Text#1 as range 12(2)
      //DEBUG: e.Accum#1: 5
      //DEBUG: e.Text#1: 2
      {refalrts::icEmptyResult, 0, 0, 0},
      //TRASH: {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 AsIs: & Name/4 AsIs: (/7 AsIs: e.Accum#1/5 HalfReuse: 'B'/8 HalfReuse: )/9 AsIs: e.Text#1/12(2) AsIs: >/1 ]] }
      {refalrts::icReinitChar, 0, 'B', 8},
      {refalrts::icReinitBracket, 0, refalrts::ibCloseBracket, 9},
      {refalrts::icPushStack, 0, 0, 1},
      {refalrts::icPushStack, 0, 0, 0},
      {refalrts::icLinkBrackets, 7, 9, 0},
      {refalrts::icNextStep, 0, 0, 0},
      {refalrts::icProfilerStopSentence, 0, 0, 0},
      {refalrts::icOnFailGoTo, +9, 0, 0},
      // ( e.idx ) 'C' e.idx
      // </0 & Name/4 (/7 e.Accum#1/5 )/8 'C'/9 e.Text#1/2 >/1
      {refalrts::icSave, 0, 12, 2},
      {refalrts::icCharLeftSave, 9, static_cast<unsigned char>('C'), 12},
      // closed e.Accum#1 as range 5
      // closed e.Text#1 as range 12(2)
      //DEBUG: e.Accum#1: 5
      //DEBUG: e.Text#1: 2
      {refalrts::icEmptyResult, 0, 0, 0},
      //TRASH: {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 AsIs: & Name/4 AsIs: (/7 AsIs: e.Accum#1/5 HalfReuse: 'C'/8 HalfReuse: )/9 AsIs: e.Text#1/12(2) AsIs: >/1 ]] }
      {refalrts::icReinitChar, 0, 'C', 8},
      {refalrts::icReinitBracket, 0, refalrts::ibCloseBracket, 9},
      {refalrts::icPushStack, 0, 0, 1},
      {refalrts::icPushStack, 0, 0, 0},
      {refalrts::icLinkBrackets, 7, 9, 0},
      {refalrts::icNextStep, 0, 0, 0},
      {refalrts::icProfilerStopSentence, 0, 0, 0},
      {refalrts::icOnFailGoTo, +9, 0, 0},
      // ( e.idx ) 'D' e.idx
      // </0 & Name/4 (/7 e.Accum#1/5 )/8 'D'/9 e.Text#1/2 >/1
      {refalrts::icSave, 0, 12, 2},
      {refalrts::icCharLeftSave, 9, static_cast<unsigned char>('D'), 12},
      // closed e.Accum#1 as range 5
      // closed e.Text#1 as range 12(2)
      //DEBUG: e.Accum#1: 5
      //DEBUG: e.Text#1: 2
      {refalrts::icEmptyResult, 0, 0, 0},
      //TRASH: {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 AsIs: & Name/4 AsIs: (/7 AsIs: e.Accum#1/5 HalfReuse: 'D'/8 HalfReuse: )/9 AsIs: e.Text#1/12(2) AsIs: >/1 ]] }
      {refalrts::icReinitChar, 0, 'D', 8},
      {refalrts::icReinitBracket, 0, refalrts::ibCloseBracket, 9},
      {refalrts::icPushStack, 0, 0, 1},
      {refalrts::icPushStack, 0, 0, 0},
      {refalrts::icLinkBrackets, 7, 9, 0},
      {refalrts::icNextStep, 0, 0, 0},
      {refalrts::icProfilerStopSentence, 0, 0, 0},
      {refalrts::icOnFailGoTo, +9, 0, 0},
      // ( e.idx ) 'E' e.idx
      // </0 & Name/4 (/7 e.Accum#1/5 )/8 'E'/9 e.Text#1/2 >/1
      {refalrts::icSave, 0, 12, 2},
      {refalrts::icCharLeftSave, 9, static_cast<unsigned char>('E'), 12},
      // closed e.Accum#1 as range 5
      // closed e.Text#1 as range 12(2)
      //DEBUG: e.Accum#1: 5
      //DEBUG: e.Text#1: 2
      {refalrts::icEmptyResult, 0, 0, 0},
      //TRASH: {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 AsIs: & Name/4 AsIs: (/7 AsIs: e.Accum#1/5 HalfReuse: 'E'/8 HalfReuse: )/9 AsIs: e.Text#1/12(2) AsIs: >/1 ]] }
      {refalrts::icReinitChar, 0, 'E', 8},
      {refalrts::icReinitBracket, 0, refalrts::ibCloseBracket, 9},
      {refalrts::icPushStack, 0, 0, 1},
      {refalrts::icPushStack, 0, 0, 0},
      {refalrts::icLinkBrackets, 7, 9, 0},
      {refalrts::icNextStep, 0, 0, 0},
      {refalrts::icProfilerStopSentence, 0, 0, 0},
      {refalrts::icOnFailGoTo, +9, 0, 0},
      // ( e.idx ) 'F' e.idx
      // </0 & Name/4 (/7 e.Accum#1/5 )/8 'F'/9 e.Text#1/2 >/1
      {refalrts::icSave, 0, 12, 2},
      {refalrts::icCharLeftSave, 9, static_cast<unsigned char>('F'), 12},
      // closed e.Accum#1 as range 5
      // closed e.Text#1 as range 12(2)
      //DEBUG: e.Accum#1: 5
      //DEBUG: e.Text#1: 2
      {refalrts::icEmptyResult, 0, 0, 0},
      //TRASH: {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 AsIs: & Name/4 AsIs: (/7 AsIs: e.Accum#1/5 HalfReuse: 'F'/8 HalfReuse: )/9 AsIs: e.Text#1/12(2) AsIs: >/1 ]] }
      {refalrts::icReinitChar, 0, 'F', 8},
      {refalrts::icReinitBracket, 0, refalrts::ibCloseBracket, 9},
      {refalrts::icPushStack, 0, 0, 1},
      {refalrts::icPushStack, 0, 0, 0},
      {refalrts::icLinkBrackets, 7, 9, 0},
      {refalrts::icNextStep, 0, 0, 0},
      {refalrts::icProfilerStopSentence, 0, 0, 0},
      {refalrts::icOnFailGoTo, +9, 0, 0},
      // ( e.idx ) 'G' e.idx
      // </0 & Name/4 (/7 e.Accum#1/5 )/8 'G'/9 e.Text#1/2 >/1
      {refalrts::icSave, 0, 12, 2},
      {refalrts::icCharLeftSave, 9, static_cast<unsigned char>('G'), 12},
      // closed e.Accum#1 as range 5
      // closed e.Text#1 as range 12(2)
      //DEBUG: e.Accum#1: 5
      //DEBUG: e.Text#1: 2
      {refalrts::icEmptyResult, 0, 0, 0},
      //TRASH: {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 AsIs: & Name/4 AsIs: (/7 AsIs: e.Accum#1/5 HalfReuse: 'G'/8 HalfReuse: )/9 AsIs: e.Text#1/12(2) AsIs: >/1 ]] }
      {refalrts::icReinitChar, 0, 'G', 8},
      {refalrts::icReinitBracket, 0, refalrts::ibCloseBracket, 9},
      {refalrts::icPushStack, 0, 0, 1},
      {refalrts::icPushStack, 0, 0, 0},
      {refalrts::icLinkBrackets, 7, 9, 0},
      {refalrts::icNextStep, 0, 0, 0},
      {refalrts::icProfilerStopSentence, 0, 0, 0},
      {refalrts::icOnFailGoTo, +9, 0, 0},
      // ( e.idx ) 'H' e.idx
      // </0 & Name/4 (/7 e.Accum#1/5 )/8 'H'/9 e.Text#1/2 >/1
      {refalrts::icSave, 0, 12, 2},
      {refalrts::icCharLeftSave, 9, static_cast<unsigned char>('H'), 12},
      // closed e.Accum#1 as range 5
      // closed e.Text#1 as range 12(2)
      //DEBUG: e.Accum#1: 5
      //DEBUG: e.Text#1: 2
      {refalrts::icEmptyResult, 0, 0, 0},
      //TRASH: {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 AsIs: & Name/4 AsIs: (/7 AsIs: e.Accum#1/5 HalfReuse: 'H'/8 HalfReuse: )/9 AsIs: e.Text#1/12(2) AsIs: >/1 ]] }
      {refalrts::icReinitChar, 0, 'H', 8},
      {refalrts::icReinitBracket, 0, refalrts::ibCloseBracket, 9},
      {refalrts::icPushStack, 0, 0, 1},
      {refalrts::icPushStack, 0, 0, 0},
      {refalrts::icLinkBrackets, 7, 9, 0},
      {refalrts::icNextStep, 0, 0, 0},
      {refalrts::icProfilerStopSentence, 0, 0, 0},
      {refalrts::icOnFailGoTo, +9, 0, 0},
      // ( e.idx ) 'I' e.idx
      // </0 & Name/4 (/7 e.Accum#1/5 )/8 'I'/9 e.Text#1/2 >/1
      {refalrts::icSave, 0, 12, 2},
      {refalrts::icCharLeftSave, 9, static_cast<unsigned char>('I'), 12},
      // closed e.Accum#1 as range 5
      // closed e.Text#1 as range 12(2)
      //DEBUG: e.Accum#1: 5
      //DEBUG: e.Text#1: 2
      {refalrts::icEmptyResult, 0, 0, 0},
      //TRASH: {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 AsIs: & Name/4 AsIs: (/7 AsIs: e.Accum#1/5 HalfReuse: 'I'/8 HalfReuse: )/9 AsIs: e.Text#1/12(2) AsIs: >/1 ]] }
      {refalrts::icReinitChar, 0, 'I', 8},
      {refalrts::icReinitBracket, 0, refalrts::ibCloseBracket, 9},
      {refalrts::icPushStack, 0, 0, 1},
      {refalrts::icPushStack, 0, 0, 0},
      {refalrts::icLinkBrackets, 7, 9, 0},
      {refalrts::icNextStep, 0, 0, 0},
      {refalrts::icProfilerStopSentence, 0, 0, 0},
      {refalrts::icOnFailGoTo, +9, 0, 0},
      // ( e.idx ) 'J' e.idx
      // </0 & Name/4 (/7 e.Accum#1/5 )/8 'J'/9 e.Text#1/2 >/1
      {refalrts::icSave, 0, 12, 2},
      {refalrts::icCharLeftSave, 9, static_cast<unsigned char>('J'), 12},
      // closed e.Accum#1 as range 5
      // closed e.Text#1 as range 12(2)
      //DEBUG: e.Accum#1: 5
      //DEBUG: e.Text#1: 2
      {refalrts::icEmptyResult, 0, 0, 0},
      //TRASH: {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 AsIs: & Name/4 AsIs: (/7 AsIs: e.Accum#1/5 HalfReuse: 'J'/8 HalfReuse: )/9 AsIs: e.Text#1/12(2) AsIs: >/1 ]] }
      {refalrts::icReinitChar, 0, 'J', 8},
      {refalrts::icReinitBracket, 0, refalrts::ibCloseBracket, 9},
      {refalrts::icPushStack, 0, 0, 1},
      {refalrts::icPushStack, 0, 0, 0},
      {refalrts::icLinkBrackets, 7, 9, 0},
      {refalrts::icNextStep, 0, 0, 0},
      {refalrts::icProfilerStopSentence, 0, 0, 0},
      {refalrts::icOnFailGoTo, +9, 0, 0},
      // ( e.idx ) 'K' e.idx
      // </0 & Name/4 (/7 e.Accum#1/5 )/8 'K'/9 e.Text#1/2 >/1
      {refalrts::icSave, 0, 12, 2},
      {refalrts::icCharLeftSave, 9, static_cast<unsigned char>('K'), 12},
      // closed e.Accum#1 as range 5
      // closed e.Text#1 as range 12(2)
      //DEBUG: e.Accum#1: 5
      //DEBUG: e.Text#1: 2
      {refalrts::icEmptyResult, 0, 0, 0},
      //TRASH: {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 AsIs: & Name/4 AsIs: (/7 AsIs: e.Accum#1/5 HalfReuse: 'K'/8 HalfReuse: )/9 AsIs: e.Text#1/12(2) AsIs: >/1 ]] }
      {refalrts::icReinitChar, 0, 'K', 8},
      {refalrts::icReinitBracket, 0, refalrts::ibCloseBracket, 9},
      {refalrts::icPushStack, 0, 0, 1},
      {refalrts::icPushStack, 0, 0, 0},
      {refalrts::icLinkBrackets, 7, 9, 0},
      {refalrts::icNextStep, 0, 0, 0},
      {refalrts::icProfilerStopSentence, 0, 0, 0},
      {refalrts::icOnFailGoTo, +9, 0, 0},
      // ( e.idx ) 'L' e.idx
      // </0 & Name/4 (/7 e.Accum#1/5 )/8 'L'/9 e.Text#1/2 >/1
      {refalrts::icSave, 0, 12, 2},
      {refalrts::icCharLeftSave, 9, static_cast<unsigned char>('L'), 12},
      // closed e.Accum#1 as range 5
      // closed e.Text#1 as range 12(2)
      //DEBUG: e.Accum#1: 5
      //DEBUG: e.Text#1: 2
      {refalrts::icEmptyResult, 0, 0, 0},
      //TRASH: {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 AsIs: & Name/4 AsIs: (/7 AsIs: e.Accum#1/5 HalfReuse: 'L'/8 HalfReuse: )/9 AsIs: e.Text#1/12(2) AsIs: >/1 ]] }
      {refalrts::icReinitChar, 0, 'L', 8},
      {refalrts::icReinitBracket, 0, refalrts::ibCloseBracket, 9},
      {refalrts::icPushStack, 0, 0, 1},
      {refalrts::icPushStack, 0, 0, 0},
      {refalrts::icLinkBrackets, 7, 9, 0},
      {refalrts::icNextStep, 0, 0, 0},
      {refalrts::icProfilerStopSentence, 0, 0, 0},
      {refalrts::icOnFailGoTo, +9, 0, 0},
      // ( e.idx ) 'M' e.idx
      // </0 & Name/4 (/7 e.Accum#1/5 )/8 'M'/9 e.Text#1/2 >/1
      {refalrts::icSave, 0, 12, 2},
      {refalrts::icCharLeftSave, 9, static_cast<unsigned char>('M'), 12},
      // closed e.Accum#1 as range 5
      // closed e.Text#1 as range 12(2)
      //DEBUG: e.Accum#1: 5
      //DEBUG: e.Text#1: 2
      {refalrts::icEmptyResult, 0, 0, 0},
      //TRASH: {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 AsIs: & Name/4 AsIs: (/7 AsIs: e.Accum#1/5 HalfReuse: 'M'/8 HalfReuse: )/9 AsIs: e.Text#1/12(2) AsIs: >/1 ]] }
      {refalrts::icReinitChar, 0, 'M', 8},
      {refalrts::icReinitBracket, 0, refalrts::ibCloseBracket, 9},
      {refalrts::icPushStack, 0, 0, 1},
      {refalrts::icPushStack, 0, 0, 0},
      {refalrts::icLinkBrackets, 7, 9, 0},
      {refalrts::icNextStep, 0, 0, 0},
      {refalrts::icProfilerStopSentence, 0, 0, 0},
      {refalrts::icOnFailGoTo, +9, 0, 0},
      // ( e.idx ) 'N' e.idx
      // </0 & Name/4 (/7 e.Accum#1/5 )/8 'N'/9 e.Text#1/2 >/1
      {refalrts::icSave, 0, 12, 2},
      {refalrts::icCharLeftSave, 9, static_cast<unsigned char>('N'), 12},
      // closed e.Accum#1 as range 5
      // closed e.Text#1 as range 12(2)
      //DEBUG: e.Accum#1: 5
      //DEBUG: e.Text#1: 2
      {refalrts::icEmptyResult, 0, 0, 0},
      //TRASH: {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 AsIs: & Name/4 AsIs: (/7 AsIs: e.Accum#1/5 HalfReuse: 'N'/8 HalfReuse: )/9 AsIs: e.Text#1/12(2) AsIs: >/1 ]] }
      {refalrts::icReinitChar, 0, 'N', 8},
      {refalrts::icReinitBracket, 0, refalrts::ibCloseBracket, 9},
      {refalrts::icPushStack, 0, 0, 1},
      {refalrts::icPushStack, 0, 0, 0},
      {refalrts::icLinkBrackets, 7, 9, 0},
      {refalrts::icNextStep, 0, 0, 0},
      {refalrts::icProfilerStopSentence, 0, 0, 0},
      {refalrts::icOnFailGoTo, +9, 0, 0},
      // ( e.idx ) 'O' e.idx
      // </0 & Name/4 (/7 e.Accum#1/5 )/8 'O'/9 e.Text#1/2 >/1
      {refalrts::icSave, 0, 12, 2},
      {refalrts::icCharLeftSave, 9, static_cast<unsigned char>('O'), 12},
      // closed e.Accum#1 as range 5
      // closed e.Text#1 as range 12(2)
      //DEBUG: e.Accum#1: 5
      //DEBUG: e.Text#1: 2
      {refalrts::icEmptyResult, 0, 0, 0},
      //TRASH: {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 AsIs: & Name/4 AsIs: (/7 AsIs: e.Accum#1/5 HalfReuse: 'O'/8 HalfReuse: )/9 AsIs: e.Text#1/12(2) AsIs: >/1 ]] }
      {refalrts::icReinitChar, 0, 'O', 8},
      {refalrts::icReinitBracket, 0, refalrts::ibCloseBracket, 9},
      {refalrts::icPushStack, 0, 0, 1},
      {refalrts::icPushStack, 0, 0, 0},
      {refalrts::icLinkBrackets, 7, 9, 0},
      {refalrts::icNextStep, 0, 0, 0},
      {refalrts::icProfilerStopSentence, 0, 0, 0},
      {refalrts::icOnFailGoTo, +9, 0, 0},
      // ( e.idx ) 'P' e.idx
      // </0 & Name/4 (/7 e.Accum#1/5 )/8 'P'/9 e.Text#1/2 >/1
      {refalrts::icSave, 0, 12, 2},
      {refalrts::icCharLeftSave, 9, static_cast<unsigned char>('P'), 12},
      // closed e.Accum#1 as range 5
      // closed e.Text#1 as range 12(2)
      //DEBUG: e.Accum#1: 5
      //DEBUG: e.Text#1: 2
      {refalrts::icEmptyResult, 0, 0, 0},
      //TRASH: {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 AsIs: & Name/4 AsIs: (/7 AsIs: e.Accum#1/5 HalfReuse: 'P'/8 HalfReuse: )/9 AsIs: e.Text#1/12(2) AsIs: >/1 ]] }
      {refalrts::icReinitChar, 0, 'P', 8},
      {refalrts::icReinitBracket, 0, refalrts::ibCloseBracket, 9},
      {refalrts::icPushStack, 0, 0, 1},
      {refalrts::icPushStack, 0, 0, 0},
      {refalrts::icLinkBrackets, 7, 9, 0},
      {refalrts::icNextStep, 0, 0, 0},
      {refalrts::icProfilerStopSentence, 0, 0, 0},
      {refalrts::icOnFailGoTo, +9, 0, 0},
      // ( e.idx ) 'Q' e.idx
      // </0 & Name/4 (/7 e.Accum#1/5 )/8 'Q'/9 e.Text#1/2 >/1
      {refalrts::icSave, 0, 12, 2},
      {refalrts::icCharLeftSave, 9, static_cast<unsigned char>('Q'), 12},
      // closed e.Accum#1 as range 5
      // closed e.Text#1 as range 12(2)
      //DEBUG: e.Accum#1: 5
      //DEBUG: e.Text#1: 2
      {refalrts::icEmptyResult, 0, 0, 0},
      //TRASH: {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 AsIs: & Name/4 AsIs: (/7 AsIs: e.Accum#1/5 HalfReuse: 'Q'/8 HalfReuse: )/9 AsIs: e.Text#1/12(2) AsIs: >/1 ]] }
      {refalrts::icReinitChar, 0, 'Q', 8},
      {refalrts::icReinitBracket, 0, refalrts::ibCloseBracket, 9},
      {refalrts::icPushStack, 0, 0, 1},
      {refalrts::icPushStack, 0, 0, 0},
      {refalrts::icLinkBrackets, 7, 9, 0},
      {refalrts::icNextStep, 0, 0, 0},
      {refalrts::icProfilerStopSentence, 0, 0, 0},
      {refalrts::icOnFailGoTo, +9, 0, 0},
      // ( e.idx ) 'R' e.idx
      // </0 & Name/4 (/7 e.Accum#1/5 )/8 'R'/9 e.Text#1/2 >/1
      {refalrts::icSave, 0, 12, 2},
      {refalrts::icCharLeftSave, 9, static_cast<unsigned char>('R'), 12},
      // closed e.Accum#1 as range 5
      // closed e.Text#1 as range 12(2)
      //DEBUG: e.Accum#1: 5
      //DEBUG: e.Text#1: 2
      {refalrts::icEmptyResult, 0, 0, 0},
      //TRASH: {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 AsIs: & Name/4 AsIs: (/7 AsIs: e.Accum#1/5 HalfReuse: 'R'/8 HalfReuse: )/9 AsIs: e.Text#1/12(2) AsIs: >/1 ]] }
      {refalrts::icReinitChar, 0, 'R', 8},
      {refalrts::icReinitBracket, 0, refalrts::ibCloseBracket, 9},
      {refalrts::icPushStack, 0, 0, 1},
      {refalrts::icPushStack, 0, 0, 0},
      {refalrts::icLinkBrackets, 7, 9, 0},
      {refalrts::icNextStep, 0, 0, 0},
      {refalrts::icProfilerStopSentence, 0, 0, 0},
      {refalrts::icOnFailGoTo, +9, 0, 0},
      // ( e.idx ) 'S' e.idx
      // </0 & Name/4 (/7 e.Accum#1/5 )/8 'S'/9 e.Text#1/2 >/1
      {refalrts::icSave, 0, 12, 2},
      {refalrts::icCharLeftSave, 9, static_cast<unsigned char>('S'), 12},
      // closed e.Accum#1 as range 5
      // closed e.Text#1 as range 12(2)
      //DEBUG: e.Accum#1: 5
      //DEBUG: e.Text#1: 2
      {refalrts::icEmptyResult, 0, 0, 0},
      //TRASH: {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 AsIs: & Name/4 AsIs: (/7 AsIs: e.Accum#1/5 HalfReuse: 'S'/8 HalfReuse: )/9 AsIs: e.Text#1/12(2) AsIs: >/1 ]] }
      {refalrts::icReinitChar, 0, 'S', 8},
      {refalrts::icReinitBracket, 0, refalrts::ibCloseBracket, 9},
      {refalrts::icPushStack, 0, 0, 1},
      {refalrts::icPushStack, 0, 0, 0},
      {refalrts::icLinkBrackets, 7, 9, 0},
      {refalrts::icNextStep, 0, 0, 0},
      {refalrts::icProfilerStopSentence, 0, 0, 0},
      {refalrts::icOnFailGoTo, +9, 0, 0},
      // ( e.idx ) 'T' e.idx
      // </0 & Name/4 (/7 e.Accum#1/5 )/8 'T'/9 e.Text#1/2 >/1
      {refalrts::icSave, 0, 12, 2},
      {refalrts::icCharLeftSave, 9, static_cast<unsigned char>('T'), 12},
      // closed e.Accum#1 as range 5
      // closed e.Text#1 as range 12(2)
      //DEBUG: e.Accum#1: 5
      //DEBUG: e.Text#1: 2
      {refalrts::icEmptyResult, 0, 0, 0},
      //TRASH: {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 AsIs: & Name/4 AsIs: (/7 AsIs: e.Accum#1/5 HalfReuse: 'T'/8 HalfReuse: )/9 AsIs: e.Text#1/12(2) AsIs: >/1 ]] }
      {refalrts::icReinitChar, 0, 'T', 8},
      {refalrts::icReinitBracket, 0, refalrts::ibCloseBracket, 9},
      {refalrts::icPushStack, 0, 0, 1},
      {refalrts::icPushStack, 0, 0, 0},
      {refalrts::icLinkBrackets, 7, 9, 0},
      {refalrts::icNextStep, 0, 0, 0},
      {refalrts::icProfilerStopSentence, 0, 0, 0},
      {refalrts::icOnFailGoTo, +9, 0, 0},
      // ( e.idx ) 'U' e.idx
      // </0 & Name/4 (/7 e.Accum#1/5 )/8 'U'/9 e.Text#1/2 >/1
      {refalrts::icSave, 0, 12, 2},
      {refalrts::icCharLeftSave, 9, static_cast<unsigned char>('U'), 12},
      // closed e.Accum#1 as range 5
      // closed e.Text#1 as range 12(2)
      //DEBUG: e.Accum#1: 5
      //DEBUG: e.Text#1: 2
      {refalrts::icEmptyResult, 0, 0, 0},
      //TRASH: {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 AsIs: & Name/4 AsIs: (/7 AsIs: e.Accum#1/5 HalfReuse: 'U'/8 HalfReuse: )/9 AsIs: e.Text#1/12(2) AsIs: >/1 ]] }
      {refalrts::icReinitChar, 0, 'U', 8},
      {refalrts::icReinitBracket, 0, refalrts::ibCloseBracket, 9},
      {refalrts::icPushStack, 0, 0, 1},
      {refalrts::icPushStack, 0, 0, 0},
      {refalrts::icLinkBrackets, 7, 9, 0},
      {refalrts::icNextStep, 0, 0, 0},
      {refalrts::icProfilerStopSentence, 0, 0, 0},
      {refalrts::icOnFailGoTo, +9, 0, 0},
      // ( e.idx ) 'V' e.idx
      // </0 & Name/4 (/7 e.Accum#1/5 )/8 'V'/9 e.Text#1/2 >/1
      {refalrts::icSave, 0, 12, 2},
      {refalrts::icCharLeftSave, 9, static_cast<unsigned char>('V'), 12},
      // closed e.Accum#1 as range 5
      // closed e.Text#1 as range 12(2)
      //DEBUG: e.Accum#1: 5
      //DEBUG: e.Text#1: 2
      {refalrts::icEmptyResult, 0, 0, 0},
      //TRASH: {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 AsIs: & Name/4 AsIs: (/7 AsIs: e.Accum#1/5 HalfReuse: 'V'/8 HalfReuse: )/9 AsIs: e.Text#1/12(2) AsIs: >/1 ]] }
      {refalrts::icReinitChar, 0, 'V', 8},
      {refalrts::icReinitBracket, 0, refalrts::ibCloseBracket, 9},
      {refalrts::icPushStack, 0, 0, 1},
      {refalrts::icPushStack, 0, 0, 0},
      {refalrts::icLinkBrackets, 7, 9, 0},
      {refalrts::icNextStep, 0, 0, 0},
      {refalrts::icProfilerStopSentence, 0, 0, 0},
      {refalrts::icOnFailGoTo, +9, 0, 0},
      // ( e.idx ) 'W' e.idx
      // </0 & Name/4 (/7 e.Accum#1/5 )/8 'W'/9 e.Text#1/2 >/1
      {refalrts::icSave, 0, 12, 2},
      {refalrts::icCharLeftSave, 9, static_cast<unsigned char>('W'), 12},
      // closed e.Accum#1 as range 5
      // closed e.Text#1 as range 12(2)
      //DEBUG: e.Accum#1: 5
      //DEBUG: e.Text#1: 2
      {refalrts::icEmptyResult, 0, 0, 0},
      //TRASH: {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 AsIs: & Name/4 AsIs: (/7 AsIs: e.Accum#1/5 HalfReuse: 'W'/8 HalfReuse: )/9 AsIs: e.Text#1/12(2) AsIs: >/1 ]] }
      {refalrts::icReinitChar, 0, 'W', 8},
      {refalrts::icReinitBracket, 0, refalrts::ibCloseBracket, 9},
      {refalrts::icPushStack, 0, 0, 1},
      {refalrts::icPushStack, 0, 0, 0},
      {refalrts::icLinkBrackets, 7, 9, 0},
      {refalrts::icNextStep, 0, 0, 0},
      {refalrts::icProfilerStopSentence, 0, 0, 0},
      {refalrts::icOnFailGoTo, +9, 0, 0},
      // ( e.idx ) 'X' e.idx
      // </0 & Name/4 (/7 e.Accum#1/5 )/8 'X'/9 e.Text#1/2 >/1
      {refalrts::icSave, 0, 12, 2},
      {refalrts::icCharLeftSave, 9, static_cast<unsigned char>('X'), 12},
      // closed e.Accum#1 as range 5
      // closed e.Text#1 as range 12(2)
      //DEBUG: e.Accum#1: 5
      //DEBUG: e.Text#1: 2
      {refalrts::icEmptyResult, 0, 0, 0},
      //TRASH: {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 AsIs: & Name/4 AsIs: (/7 AsIs: e.Accum#1/5 HalfReuse: 'X'/8 HalfReuse: )/9 AsIs: e.Text#1/12(2) AsIs: >/1 ]] }
      {refalrts::icReinitChar, 0, 'X', 8},
      {refalrts::icReinitBracket, 0, refalrts::ibCloseBracket, 9},
      {refalrts::icPushStack, 0, 0, 1},
      {refalrts::icPushStack, 0, 0, 0},
      {refalrts::icLinkBrackets, 7, 9, 0},
      {refalrts::icNextStep, 0, 0, 0},
      {refalrts::icProfilerStopSentence, 0, 0, 0},
      {refalrts::icOnFailGoTo, +9, 0, 0},
      // ( e.idx ) 'Y' e.idx
      // </0 & Name/4 (/7 e.Accum#1/5 )/8 'Y'/9 e.Text#1/2 >/1
      {refalrts::icSave, 0, 12, 2},
      {refalrts::icCharLeftSave, 9, static_cast<unsigned char>('Y'), 12},
      // closed e.Accum#1 as range 5
      // closed e.Text#1 as range 12(2)
      //DEBUG: e.Accum#1: 5
      //DEBUG: e.Text#1: 2
      {refalrts::icEmptyResult, 0, 0, 0},
      //TRASH: {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 AsIs: & Name/4 AsIs: (/7 AsIs: e.Accum#1/5 HalfReuse: 'Y'/8 HalfReuse: )/9 AsIs: e.Text#1/12(2) AsIs: >/1 ]] }
      {refalrts::icReinitChar, 0, 'Y', 8},
      {refalrts::icReinitBracket, 0, refalrts::ibCloseBracket, 9},
      {refalrts::icPushStack, 0, 0, 1},
      {refalrts::icPushStack, 0, 0, 0},
      {refalrts::icLinkBrackets, 7, 9, 0},
      {refalrts::icNextStep, 0, 0, 0},
      {refalrts::icProfilerStopSentence, 0, 0, 0},
      {refalrts::icOnFailGoTo, +9, 0, 0},
      // ( e.idx ) 'Z' e.idx
      // </0 & Name/4 (/7 e.Accum#1/5 )/8 'Z'/9 e.Text#1/2 >/1
      {refalrts::icSave, 0, 12, 2},
      {refalrts::icCharLeftSave, 9, static_cast<unsigned char>('Z'), 12},
      // closed e.Accum#1 as range 5
      // closed e.Text#1 as range 12(2)
      //DEBUG: e.Accum#1: 5
      //DEBUG: e.Text#1: 2
      {refalrts::icEmptyResult, 0, 0, 0},
      //TRASH: {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 AsIs: & Name/4 AsIs: (/7 AsIs: e.Accum#1/5 HalfReuse: 'Z'/8 HalfReuse: )/9 AsIs: e.Text#1/12(2) AsIs: >/1 ]] }
      {refalrts::icReinitChar, 0, 'Z', 8},
      {refalrts::icReinitBracket, 0, refalrts::ibCloseBracket, 9},
      {refalrts::icPushStack, 0, 0, 1},
      {refalrts::icPushStack, 0, 0, 0},
      {refalrts::icLinkBrackets, 7, 9, 0},
      {refalrts::icNextStep, 0, 0, 0},
      {refalrts::icProfilerStopSentence, 0, 0, 0},
      // ( e.idx ) e.idx
      // </0 & Name/4 (/7 e.Accum#1/5 )/8 e.Text#1/2 >/1
      // closed e.Accum#1 as range 5
      // closed e.Text#1 as range 2
      //DEBUG: e.Accum#1: 5
      //DEBUG: e.Text#1: 2
      {refalrts::icEmptyResult, 0, 0, 0},
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ } (/9 # TName/10 Tile{ AsIs: e.Accum#1/5 } )/11 Tile{ AsIs: </0 Reuse: & Root/4 AsIs: (/7 } Tile{ AsIs: )/8 AsIs: e.Text#1/2 AsIs: >/1 ]] }
      {refalrts::icAllocBracket, 0, refalrts::ibOpenBracket, 9},
      {refalrts::icAllocIdent, 0, 0, 10},
      {refalrts::icAllocBracket, 0, refalrts::ibCloseBracket, 11},
      {refalrts::icUpdateFunc, 0, 0, 4},
      {refalrts::icPushStack, 0, 0, 1},
      {refalrts::icPushStack, 0, 0, 0},
      {refalrts::icLinkBrackets, 7, 8, 0},
      {refalrts::icLinkBrackets, 9, 11, 0},
      {refalrts::icSetRes, 0, 0, 8},
      {refalrts::icSpliceTile, 0, 7, 0},
      {refalrts::icSpliceTile, 11, 11, 0},
      {refalrts::icSpliceEVar, 0, 0, 5},
      {refalrts::icSpliceTile, 9, 10, 0},
      {refalrts::icNextStep, 0, 0, 0},
      {refalrts::icEnd, 0, 0, 0}
    };
  } // namespace scope_Name

} // unnamed namespace

namespace /* unnamed */ {
refalrts::RASLFunction descr_Name(
  "Name",
  scope_Name::raa,
  scope_Name::functions,
  scope_Name::idents,
  scope_Name::numbers,
  scope_Name::strings,
  scope_Name::filename
);
refalrts::RefalFunction& Name = descr_Name;

} // unnamed namespace

#else
static refalrts::FnResult func_Name(refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  refalrts::this_is_generated_function();
  // issue here memory for vars with 14 elems
  refalrts::Iter context[14];
  refalrts::zeros( context, 14 );
  //FAST GEN: ( e.$ ) e.$
  //GLOBAL GEN: ( e.$ ) e.$
  // </0 & Name/4 (/7 e.idxB#0/5 )/8 e.idxT#0/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  context[5] = 0;
  context[6] = 0;
  context[7] = refalrts::brackets_left( context[5], context[6], context[2], context[3] );
  if( ! context[7] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[7], context[8]);
  // closed e.idxB#0 as range 5
  // closed e.idxT#0 as range 2
  do {
    // ( e.idx ) '0' e.idx
    // </0 & Name/4 (/7 e.Accum#1/5 )/8 '0'/9 e.Text#1/2 >/1
    context[12] = context[2];
    context[13] = context[3];
    context[9] = refalrts::char_left( '0', context[12], context[13] );
    if( ! context[9] )
      continue;
    // closed e.Accum#1 as range 5
    // closed e.Text#1 as range 12(2)
    //DEBUG: e.Accum#1: 5
    //DEBUG: e.Text#1: 2

    refalrts::reset_allocator();
    //TRASH: {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 AsIs: & Name/4 AsIs: (/7 AsIs: e.Accum#1/5 HalfReuse: '0'/8 HalfReuse: )/9 AsIs: e.Text#1/12(2) AsIs: >/1 ]] }
    refalrts::reinit_char( context[8], '0' );
    refalrts::reinit_close_bracket( context[9] );
    refalrts::push_stack( context[1] );
    refalrts::push_stack( context[0] );
    refalrts::link_brackets( context[7], context[9] );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence();

  do {
    // ( e.idx ) '1' e.idx
    // </0 & Name/4 (/7 e.Accum#1/5 )/8 '1'/9 e.Text#1/2 >/1
    context[12] = context[2];
    context[13] = context[3];
    context[9] = refalrts::char_left( '1', context[12], context[13] );
    if( ! context[9] )
      continue;
    // closed e.Accum#1 as range 5
    // closed e.Text#1 as range 12(2)
    //DEBUG: e.Accum#1: 5
    //DEBUG: e.Text#1: 2

    refalrts::reset_allocator();
    //TRASH: {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 AsIs: & Name/4 AsIs: (/7 AsIs: e.Accum#1/5 HalfReuse: '1'/8 HalfReuse: )/9 AsIs: e.Text#1/12(2) AsIs: >/1 ]] }
    refalrts::reinit_char( context[8], '1' );
    refalrts::reinit_close_bracket( context[9] );
    refalrts::push_stack( context[1] );
    refalrts::push_stack( context[0] );
    refalrts::link_brackets( context[7], context[9] );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence();

  do {
    // ( e.idx ) '2' e.idx
    // </0 & Name/4 (/7 e.Accum#1/5 )/8 '2'/9 e.Text#1/2 >/1
    context[12] = context[2];
    context[13] = context[3];
    context[9] = refalrts::char_left( '2', context[12], context[13] );
    if( ! context[9] )
      continue;
    // closed e.Accum#1 as range 5
    // closed e.Text#1 as range 12(2)
    //DEBUG: e.Accum#1: 5
    //DEBUG: e.Text#1: 2

    refalrts::reset_allocator();
    //TRASH: {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 AsIs: & Name/4 AsIs: (/7 AsIs: e.Accum#1/5 HalfReuse: '2'/8 HalfReuse: )/9 AsIs: e.Text#1/12(2) AsIs: >/1 ]] }
    refalrts::reinit_char( context[8], '2' );
    refalrts::reinit_close_bracket( context[9] );
    refalrts::push_stack( context[1] );
    refalrts::push_stack( context[0] );
    refalrts::link_brackets( context[7], context[9] );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence();

  do {
    // ( e.idx ) '3' e.idx
    // </0 & Name/4 (/7 e.Accum#1/5 )/8 '3'/9 e.Text#1/2 >/1
    context[12] = context[2];
    context[13] = context[3];
    context[9] = refalrts::char_left( '3', context[12], context[13] );
    if( ! context[9] )
      continue;
    // closed e.Accum#1 as range 5
    // closed e.Text#1 as range 12(2)
    //DEBUG: e.Accum#1: 5
    //DEBUG: e.Text#1: 2

    refalrts::reset_allocator();
    //TRASH: {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 AsIs: & Name/4 AsIs: (/7 AsIs: e.Accum#1/5 HalfReuse: '3'/8 HalfReuse: )/9 AsIs: e.Text#1/12(2) AsIs: >/1 ]] }
    refalrts::reinit_char( context[8], '3' );
    refalrts::reinit_close_bracket( context[9] );
    refalrts::push_stack( context[1] );
    refalrts::push_stack( context[0] );
    refalrts::link_brackets( context[7], context[9] );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence();

  do {
    // ( e.idx ) '4' e.idx
    // </0 & Name/4 (/7 e.Accum#1/5 )/8 '4'/9 e.Text#1/2 >/1
    context[12] = context[2];
    context[13] = context[3];
    context[9] = refalrts::char_left( '4', context[12], context[13] );
    if( ! context[9] )
      continue;
    // closed e.Accum#1 as range 5
    // closed e.Text#1 as range 12(2)
    //DEBUG: e.Accum#1: 5
    //DEBUG: e.Text#1: 2

    refalrts::reset_allocator();
    //TRASH: {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 AsIs: & Name/4 AsIs: (/7 AsIs: e.Accum#1/5 HalfReuse: '4'/8 HalfReuse: )/9 AsIs: e.Text#1/12(2) AsIs: >/1 ]] }
    refalrts::reinit_char( context[8], '4' );
    refalrts::reinit_close_bracket( context[9] );
    refalrts::push_stack( context[1] );
    refalrts::push_stack( context[0] );
    refalrts::link_brackets( context[7], context[9] );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence();

  do {
    // ( e.idx ) '5' e.idx
    // </0 & Name/4 (/7 e.Accum#1/5 )/8 '5'/9 e.Text#1/2 >/1
    context[12] = context[2];
    context[13] = context[3];
    context[9] = refalrts::char_left( '5', context[12], context[13] );
    if( ! context[9] )
      continue;
    // closed e.Accum#1 as range 5
    // closed e.Text#1 as range 12(2)
    //DEBUG: e.Accum#1: 5
    //DEBUG: e.Text#1: 2

    refalrts::reset_allocator();
    //TRASH: {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 AsIs: & Name/4 AsIs: (/7 AsIs: e.Accum#1/5 HalfReuse: '5'/8 HalfReuse: )/9 AsIs: e.Text#1/12(2) AsIs: >/1 ]] }
    refalrts::reinit_char( context[8], '5' );
    refalrts::reinit_close_bracket( context[9] );
    refalrts::push_stack( context[1] );
    refalrts::push_stack( context[0] );
    refalrts::link_brackets( context[7], context[9] );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence();

  do {
    // ( e.idx ) '6' e.idx
    // </0 & Name/4 (/7 e.Accum#1/5 )/8 '6'/9 e.Text#1/2 >/1
    context[12] = context[2];
    context[13] = context[3];
    context[9] = refalrts::char_left( '6', context[12], context[13] );
    if( ! context[9] )
      continue;
    // closed e.Accum#1 as range 5
    // closed e.Text#1 as range 12(2)
    //DEBUG: e.Accum#1: 5
    //DEBUG: e.Text#1: 2

    refalrts::reset_allocator();
    //TRASH: {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 AsIs: & Name/4 AsIs: (/7 AsIs: e.Accum#1/5 HalfReuse: '6'/8 HalfReuse: )/9 AsIs: e.Text#1/12(2) AsIs: >/1 ]] }
    refalrts::reinit_char( context[8], '6' );
    refalrts::reinit_close_bracket( context[9] );
    refalrts::push_stack( context[1] );
    refalrts::push_stack( context[0] );
    refalrts::link_brackets( context[7], context[9] );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence();

  do {
    // ( e.idx ) '7' e.idx
    // </0 & Name/4 (/7 e.Accum#1/5 )/8 '7'/9 e.Text#1/2 >/1
    context[12] = context[2];
    context[13] = context[3];
    context[9] = refalrts::char_left( '7', context[12], context[13] );
    if( ! context[9] )
      continue;
    // closed e.Accum#1 as range 5
    // closed e.Text#1 as range 12(2)
    //DEBUG: e.Accum#1: 5
    //DEBUG: e.Text#1: 2

    refalrts::reset_allocator();
    //TRASH: {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 AsIs: & Name/4 AsIs: (/7 AsIs: e.Accum#1/5 HalfReuse: '7'/8 HalfReuse: )/9 AsIs: e.Text#1/12(2) AsIs: >/1 ]] }
    refalrts::reinit_char( context[8], '7' );
    refalrts::reinit_close_bracket( context[9] );
    refalrts::push_stack( context[1] );
    refalrts::push_stack( context[0] );
    refalrts::link_brackets( context[7], context[9] );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence();

  do {
    // ( e.idx ) '8' e.idx
    // </0 & Name/4 (/7 e.Accum#1/5 )/8 '8'/9 e.Text#1/2 >/1
    context[12] = context[2];
    context[13] = context[3];
    context[9] = refalrts::char_left( '8', context[12], context[13] );
    if( ! context[9] )
      continue;
    // closed e.Accum#1 as range 5
    // closed e.Text#1 as range 12(2)
    //DEBUG: e.Accum#1: 5
    //DEBUG: e.Text#1: 2

    refalrts::reset_allocator();
    //TRASH: {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 AsIs: & Name/4 AsIs: (/7 AsIs: e.Accum#1/5 HalfReuse: '8'/8 HalfReuse: )/9 AsIs: e.Text#1/12(2) AsIs: >/1 ]] }
    refalrts::reinit_char( context[8], '8' );
    refalrts::reinit_close_bracket( context[9] );
    refalrts::push_stack( context[1] );
    refalrts::push_stack( context[0] );
    refalrts::link_brackets( context[7], context[9] );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence();

  do {
    // ( e.idx ) '9' e.idx
    // </0 & Name/4 (/7 e.Accum#1/5 )/8 '9'/9 e.Text#1/2 >/1
    context[12] = context[2];
    context[13] = context[3];
    context[9] = refalrts::char_left( '9', context[12], context[13] );
    if( ! context[9] )
      continue;
    // closed e.Accum#1 as range 5
    // closed e.Text#1 as range 12(2)
    //DEBUG: e.Accum#1: 5
    //DEBUG: e.Text#1: 2

    refalrts::reset_allocator();
    //TRASH: {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 AsIs: & Name/4 AsIs: (/7 AsIs: e.Accum#1/5 HalfReuse: '9'/8 HalfReuse: )/9 AsIs: e.Text#1/12(2) AsIs: >/1 ]] }
    refalrts::reinit_char( context[8], '9' );
    refalrts::reinit_close_bracket( context[9] );
    refalrts::push_stack( context[1] );
    refalrts::push_stack( context[0] );
    refalrts::link_brackets( context[7], context[9] );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence();

  do {
    // ( e.idx ) 'a' e.idx
    // </0 & Name/4 (/7 e.Accum#1/5 )/8 'a'/9 e.Text#1/2 >/1
    context[12] = context[2];
    context[13] = context[3];
    context[9] = refalrts::char_left( 'a', context[12], context[13] );
    if( ! context[9] )
      continue;
    // closed e.Accum#1 as range 5
    // closed e.Text#1 as range 12(2)
    //DEBUG: e.Accum#1: 5
    //DEBUG: e.Text#1: 2

    refalrts::reset_allocator();
    //TRASH: {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 AsIs: & Name/4 AsIs: (/7 AsIs: e.Accum#1/5 HalfReuse: 'a'/8 HalfReuse: )/9 AsIs: e.Text#1/12(2) AsIs: >/1 ]] }
    refalrts::reinit_char( context[8], 'a' );
    refalrts::reinit_close_bracket( context[9] );
    refalrts::push_stack( context[1] );
    refalrts::push_stack( context[0] );
    refalrts::link_brackets( context[7], context[9] );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence();

  do {
    // ( e.idx ) 'b' e.idx
    // </0 & Name/4 (/7 e.Accum#1/5 )/8 'b'/9 e.Text#1/2 >/1
    context[12] = context[2];
    context[13] = context[3];
    context[9] = refalrts::char_left( 'b', context[12], context[13] );
    if( ! context[9] )
      continue;
    // closed e.Accum#1 as range 5
    // closed e.Text#1 as range 12(2)
    //DEBUG: e.Accum#1: 5
    //DEBUG: e.Text#1: 2

    refalrts::reset_allocator();
    //TRASH: {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 AsIs: & Name/4 AsIs: (/7 AsIs: e.Accum#1/5 HalfReuse: 'b'/8 HalfReuse: )/9 AsIs: e.Text#1/12(2) AsIs: >/1 ]] }
    refalrts::reinit_char( context[8], 'b' );
    refalrts::reinit_close_bracket( context[9] );
    refalrts::push_stack( context[1] );
    refalrts::push_stack( context[0] );
    refalrts::link_brackets( context[7], context[9] );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence();

  do {
    // ( e.idx ) 'c' e.idx
    // </0 & Name/4 (/7 e.Accum#1/5 )/8 'c'/9 e.Text#1/2 >/1
    context[12] = context[2];
    context[13] = context[3];
    context[9] = refalrts::char_left( 'c', context[12], context[13] );
    if( ! context[9] )
      continue;
    // closed e.Accum#1 as range 5
    // closed e.Text#1 as range 12(2)
    //DEBUG: e.Accum#1: 5
    //DEBUG: e.Text#1: 2

    refalrts::reset_allocator();
    //TRASH: {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 AsIs: & Name/4 AsIs: (/7 AsIs: e.Accum#1/5 HalfReuse: 'c'/8 HalfReuse: )/9 AsIs: e.Text#1/12(2) AsIs: >/1 ]] }
    refalrts::reinit_char( context[8], 'c' );
    refalrts::reinit_close_bracket( context[9] );
    refalrts::push_stack( context[1] );
    refalrts::push_stack( context[0] );
    refalrts::link_brackets( context[7], context[9] );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence();

  do {
    // ( e.idx ) 'd' e.idx
    // </0 & Name/4 (/7 e.Accum#1/5 )/8 'd'/9 e.Text#1/2 >/1
    context[12] = context[2];
    context[13] = context[3];
    context[9] = refalrts::char_left( 'd', context[12], context[13] );
    if( ! context[9] )
      continue;
    // closed e.Accum#1 as range 5
    // closed e.Text#1 as range 12(2)
    //DEBUG: e.Accum#1: 5
    //DEBUG: e.Text#1: 2

    refalrts::reset_allocator();
    //TRASH: {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 AsIs: & Name/4 AsIs: (/7 AsIs: e.Accum#1/5 HalfReuse: 'd'/8 HalfReuse: )/9 AsIs: e.Text#1/12(2) AsIs: >/1 ]] }
    refalrts::reinit_char( context[8], 'd' );
    refalrts::reinit_close_bracket( context[9] );
    refalrts::push_stack( context[1] );
    refalrts::push_stack( context[0] );
    refalrts::link_brackets( context[7], context[9] );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence();

  do {
    // ( e.idx ) 'e' e.idx
    // </0 & Name/4 (/7 e.Accum#1/5 )/8 'e'/9 e.Text#1/2 >/1
    context[12] = context[2];
    context[13] = context[3];
    context[9] = refalrts::char_left( 'e', context[12], context[13] );
    if( ! context[9] )
      continue;
    // closed e.Accum#1 as range 5
    // closed e.Text#1 as range 12(2)
    //DEBUG: e.Accum#1: 5
    //DEBUG: e.Text#1: 2

    refalrts::reset_allocator();
    //TRASH: {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 AsIs: & Name/4 AsIs: (/7 AsIs: e.Accum#1/5 HalfReuse: 'e'/8 HalfReuse: )/9 AsIs: e.Text#1/12(2) AsIs: >/1 ]] }
    refalrts::reinit_char( context[8], 'e' );
    refalrts::reinit_close_bracket( context[9] );
    refalrts::push_stack( context[1] );
    refalrts::push_stack( context[0] );
    refalrts::link_brackets( context[7], context[9] );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence();

  do {
    // ( e.idx ) 'f' e.idx
    // </0 & Name/4 (/7 e.Accum#1/5 )/8 'f'/9 e.Text#1/2 >/1
    context[12] = context[2];
    context[13] = context[3];
    context[9] = refalrts::char_left( 'f', context[12], context[13] );
    if( ! context[9] )
      continue;
    // closed e.Accum#1 as range 5
    // closed e.Text#1 as range 12(2)
    //DEBUG: e.Accum#1: 5
    //DEBUG: e.Text#1: 2

    refalrts::reset_allocator();
    //TRASH: {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 AsIs: & Name/4 AsIs: (/7 AsIs: e.Accum#1/5 HalfReuse: 'f'/8 HalfReuse: )/9 AsIs: e.Text#1/12(2) AsIs: >/1 ]] }
    refalrts::reinit_char( context[8], 'f' );
    refalrts::reinit_close_bracket( context[9] );
    refalrts::push_stack( context[1] );
    refalrts::push_stack( context[0] );
    refalrts::link_brackets( context[7], context[9] );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence();

  do {
    // ( e.idx ) 'g' e.idx
    // </0 & Name/4 (/7 e.Accum#1/5 )/8 'g'/9 e.Text#1/2 >/1
    context[12] = context[2];
    context[13] = context[3];
    context[9] = refalrts::char_left( 'g', context[12], context[13] );
    if( ! context[9] )
      continue;
    // closed e.Accum#1 as range 5
    // closed e.Text#1 as range 12(2)
    //DEBUG: e.Accum#1: 5
    //DEBUG: e.Text#1: 2

    refalrts::reset_allocator();
    //TRASH: {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 AsIs: & Name/4 AsIs: (/7 AsIs: e.Accum#1/5 HalfReuse: 'g'/8 HalfReuse: )/9 AsIs: e.Text#1/12(2) AsIs: >/1 ]] }
    refalrts::reinit_char( context[8], 'g' );
    refalrts::reinit_close_bracket( context[9] );
    refalrts::push_stack( context[1] );
    refalrts::push_stack( context[0] );
    refalrts::link_brackets( context[7], context[9] );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence();

  do {
    // ( e.idx ) 'h' e.idx
    // </0 & Name/4 (/7 e.Accum#1/5 )/8 'h'/9 e.Text#1/2 >/1
    context[12] = context[2];
    context[13] = context[3];
    context[9] = refalrts::char_left( 'h', context[12], context[13] );
    if( ! context[9] )
      continue;
    // closed e.Accum#1 as range 5
    // closed e.Text#1 as range 12(2)
    //DEBUG: e.Accum#1: 5
    //DEBUG: e.Text#1: 2

    refalrts::reset_allocator();
    //TRASH: {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 AsIs: & Name/4 AsIs: (/7 AsIs: e.Accum#1/5 HalfReuse: 'h'/8 HalfReuse: )/9 AsIs: e.Text#1/12(2) AsIs: >/1 ]] }
    refalrts::reinit_char( context[8], 'h' );
    refalrts::reinit_close_bracket( context[9] );
    refalrts::push_stack( context[1] );
    refalrts::push_stack( context[0] );
    refalrts::link_brackets( context[7], context[9] );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence();

  do {
    // ( e.idx ) 'i' e.idx
    // </0 & Name/4 (/7 e.Accum#1/5 )/8 'i'/9 e.Text#1/2 >/1
    context[12] = context[2];
    context[13] = context[3];
    context[9] = refalrts::char_left( 'i', context[12], context[13] );
    if( ! context[9] )
      continue;
    // closed e.Accum#1 as range 5
    // closed e.Text#1 as range 12(2)
    //DEBUG: e.Accum#1: 5
    //DEBUG: e.Text#1: 2

    refalrts::reset_allocator();
    //TRASH: {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 AsIs: & Name/4 AsIs: (/7 AsIs: e.Accum#1/5 HalfReuse: 'i'/8 HalfReuse: )/9 AsIs: e.Text#1/12(2) AsIs: >/1 ]] }
    refalrts::reinit_char( context[8], 'i' );
    refalrts::reinit_close_bracket( context[9] );
    refalrts::push_stack( context[1] );
    refalrts::push_stack( context[0] );
    refalrts::link_brackets( context[7], context[9] );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence();

  do {
    // ( e.idx ) 'j' e.idx
    // </0 & Name/4 (/7 e.Accum#1/5 )/8 'j'/9 e.Text#1/2 >/1
    context[12] = context[2];
    context[13] = context[3];
    context[9] = refalrts::char_left( 'j', context[12], context[13] );
    if( ! context[9] )
      continue;
    // closed e.Accum#1 as range 5
    // closed e.Text#1 as range 12(2)
    //DEBUG: e.Accum#1: 5
    //DEBUG: e.Text#1: 2

    refalrts::reset_allocator();
    //TRASH: {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 AsIs: & Name/4 AsIs: (/7 AsIs: e.Accum#1/5 HalfReuse: 'j'/8 HalfReuse: )/9 AsIs: e.Text#1/12(2) AsIs: >/1 ]] }
    refalrts::reinit_char( context[8], 'j' );
    refalrts::reinit_close_bracket( context[9] );
    refalrts::push_stack( context[1] );
    refalrts::push_stack( context[0] );
    refalrts::link_brackets( context[7], context[9] );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence();

  do {
    // ( e.idx ) 'k' e.idx
    // </0 & Name/4 (/7 e.Accum#1/5 )/8 'k'/9 e.Text#1/2 >/1
    context[12] = context[2];
    context[13] = context[3];
    context[9] = refalrts::char_left( 'k', context[12], context[13] );
    if( ! context[9] )
      continue;
    // closed e.Accum#1 as range 5
    // closed e.Text#1 as range 12(2)
    //DEBUG: e.Accum#1: 5
    //DEBUG: e.Text#1: 2

    refalrts::reset_allocator();
    //TRASH: {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 AsIs: & Name/4 AsIs: (/7 AsIs: e.Accum#1/5 HalfReuse: 'k'/8 HalfReuse: )/9 AsIs: e.Text#1/12(2) AsIs: >/1 ]] }
    refalrts::reinit_char( context[8], 'k' );
    refalrts::reinit_close_bracket( context[9] );
    refalrts::push_stack( context[1] );
    refalrts::push_stack( context[0] );
    refalrts::link_brackets( context[7], context[9] );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence();

  do {
    // ( e.idx ) 'l' e.idx
    // </0 & Name/4 (/7 e.Accum#1/5 )/8 'l'/9 e.Text#1/2 >/1
    context[12] = context[2];
    context[13] = context[3];
    context[9] = refalrts::char_left( 'l', context[12], context[13] );
    if( ! context[9] )
      continue;
    // closed e.Accum#1 as range 5
    // closed e.Text#1 as range 12(2)
    //DEBUG: e.Accum#1: 5
    //DEBUG: e.Text#1: 2

    refalrts::reset_allocator();
    //TRASH: {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 AsIs: & Name/4 AsIs: (/7 AsIs: e.Accum#1/5 HalfReuse: 'l'/8 HalfReuse: )/9 AsIs: e.Text#1/12(2) AsIs: >/1 ]] }
    refalrts::reinit_char( context[8], 'l' );
    refalrts::reinit_close_bracket( context[9] );
    refalrts::push_stack( context[1] );
    refalrts::push_stack( context[0] );
    refalrts::link_brackets( context[7], context[9] );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence();

  do {
    // ( e.idx ) 'm' e.idx
    // </0 & Name/4 (/7 e.Accum#1/5 )/8 'm'/9 e.Text#1/2 >/1
    context[12] = context[2];
    context[13] = context[3];
    context[9] = refalrts::char_left( 'm', context[12], context[13] );
    if( ! context[9] )
      continue;
    // closed e.Accum#1 as range 5
    // closed e.Text#1 as range 12(2)
    //DEBUG: e.Accum#1: 5
    //DEBUG: e.Text#1: 2

    refalrts::reset_allocator();
    //TRASH: {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 AsIs: & Name/4 AsIs: (/7 AsIs: e.Accum#1/5 HalfReuse: 'm'/8 HalfReuse: )/9 AsIs: e.Text#1/12(2) AsIs: >/1 ]] }
    refalrts::reinit_char( context[8], 'm' );
    refalrts::reinit_close_bracket( context[9] );
    refalrts::push_stack( context[1] );
    refalrts::push_stack( context[0] );
    refalrts::link_brackets( context[7], context[9] );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence();

  do {
    // ( e.idx ) 'n' e.idx
    // </0 & Name/4 (/7 e.Accum#1/5 )/8 'n'/9 e.Text#1/2 >/1
    context[12] = context[2];
    context[13] = context[3];
    context[9] = refalrts::char_left( 'n', context[12], context[13] );
    if( ! context[9] )
      continue;
    // closed e.Accum#1 as range 5
    // closed e.Text#1 as range 12(2)
    //DEBUG: e.Accum#1: 5
    //DEBUG: e.Text#1: 2

    refalrts::reset_allocator();
    //TRASH: {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 AsIs: & Name/4 AsIs: (/7 AsIs: e.Accum#1/5 HalfReuse: 'n'/8 HalfReuse: )/9 AsIs: e.Text#1/12(2) AsIs: >/1 ]] }
    refalrts::reinit_char( context[8], 'n' );
    refalrts::reinit_close_bracket( context[9] );
    refalrts::push_stack( context[1] );
    refalrts::push_stack( context[0] );
    refalrts::link_brackets( context[7], context[9] );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence();

  do {
    // ( e.idx ) 'o' e.idx
    // </0 & Name/4 (/7 e.Accum#1/5 )/8 'o'/9 e.Text#1/2 >/1
    context[12] = context[2];
    context[13] = context[3];
    context[9] = refalrts::char_left( 'o', context[12], context[13] );
    if( ! context[9] )
      continue;
    // closed e.Accum#1 as range 5
    // closed e.Text#1 as range 12(2)
    //DEBUG: e.Accum#1: 5
    //DEBUG: e.Text#1: 2

    refalrts::reset_allocator();
    //TRASH: {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 AsIs: & Name/4 AsIs: (/7 AsIs: e.Accum#1/5 HalfReuse: 'o'/8 HalfReuse: )/9 AsIs: e.Text#1/12(2) AsIs: >/1 ]] }
    refalrts::reinit_char( context[8], 'o' );
    refalrts::reinit_close_bracket( context[9] );
    refalrts::push_stack( context[1] );
    refalrts::push_stack( context[0] );
    refalrts::link_brackets( context[7], context[9] );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence();

  do {
    // ( e.idx ) 'p' e.idx
    // </0 & Name/4 (/7 e.Accum#1/5 )/8 'p'/9 e.Text#1/2 >/1
    context[12] = context[2];
    context[13] = context[3];
    context[9] = refalrts::char_left( 'p', context[12], context[13] );
    if( ! context[9] )
      continue;
    // closed e.Accum#1 as range 5
    // closed e.Text#1 as range 12(2)
    //DEBUG: e.Accum#1: 5
    //DEBUG: e.Text#1: 2

    refalrts::reset_allocator();
    //TRASH: {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 AsIs: & Name/4 AsIs: (/7 AsIs: e.Accum#1/5 HalfReuse: 'p'/8 HalfReuse: )/9 AsIs: e.Text#1/12(2) AsIs: >/1 ]] }
    refalrts::reinit_char( context[8], 'p' );
    refalrts::reinit_close_bracket( context[9] );
    refalrts::push_stack( context[1] );
    refalrts::push_stack( context[0] );
    refalrts::link_brackets( context[7], context[9] );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence();

  do {
    // ( e.idx ) 'q' e.idx
    // </0 & Name/4 (/7 e.Accum#1/5 )/8 'q'/9 e.Text#1/2 >/1
    context[12] = context[2];
    context[13] = context[3];
    context[9] = refalrts::char_left( 'q', context[12], context[13] );
    if( ! context[9] )
      continue;
    // closed e.Accum#1 as range 5
    // closed e.Text#1 as range 12(2)
    //DEBUG: e.Accum#1: 5
    //DEBUG: e.Text#1: 2

    refalrts::reset_allocator();
    //TRASH: {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 AsIs: & Name/4 AsIs: (/7 AsIs: e.Accum#1/5 HalfReuse: 'q'/8 HalfReuse: )/9 AsIs: e.Text#1/12(2) AsIs: >/1 ]] }
    refalrts::reinit_char( context[8], 'q' );
    refalrts::reinit_close_bracket( context[9] );
    refalrts::push_stack( context[1] );
    refalrts::push_stack( context[0] );
    refalrts::link_brackets( context[7], context[9] );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence();

  do {
    // ( e.idx ) 'r' e.idx
    // </0 & Name/4 (/7 e.Accum#1/5 )/8 'r'/9 e.Text#1/2 >/1
    context[12] = context[2];
    context[13] = context[3];
    context[9] = refalrts::char_left( 'r', context[12], context[13] );
    if( ! context[9] )
      continue;
    // closed e.Accum#1 as range 5
    // closed e.Text#1 as range 12(2)
    //DEBUG: e.Accum#1: 5
    //DEBUG: e.Text#1: 2

    refalrts::reset_allocator();
    //TRASH: {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 AsIs: & Name/4 AsIs: (/7 AsIs: e.Accum#1/5 HalfReuse: 'r'/8 HalfReuse: )/9 AsIs: e.Text#1/12(2) AsIs: >/1 ]] }
    refalrts::reinit_char( context[8], 'r' );
    refalrts::reinit_close_bracket( context[9] );
    refalrts::push_stack( context[1] );
    refalrts::push_stack( context[0] );
    refalrts::link_brackets( context[7], context[9] );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence();

  do {
    // ( e.idx ) 's' e.idx
    // </0 & Name/4 (/7 e.Accum#1/5 )/8 's'/9 e.Text#1/2 >/1
    context[12] = context[2];
    context[13] = context[3];
    context[9] = refalrts::char_left( 's', context[12], context[13] );
    if( ! context[9] )
      continue;
    // closed e.Accum#1 as range 5
    // closed e.Text#1 as range 12(2)
    //DEBUG: e.Accum#1: 5
    //DEBUG: e.Text#1: 2

    refalrts::reset_allocator();
    //TRASH: {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 AsIs: & Name/4 AsIs: (/7 AsIs: e.Accum#1/5 HalfReuse: 's'/8 HalfReuse: )/9 AsIs: e.Text#1/12(2) AsIs: >/1 ]] }
    refalrts::reinit_char( context[8], 's' );
    refalrts::reinit_close_bracket( context[9] );
    refalrts::push_stack( context[1] );
    refalrts::push_stack( context[0] );
    refalrts::link_brackets( context[7], context[9] );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence();

  do {
    // ( e.idx ) 't' e.idx
    // </0 & Name/4 (/7 e.Accum#1/5 )/8 't'/9 e.Text#1/2 >/1
    context[12] = context[2];
    context[13] = context[3];
    context[9] = refalrts::char_left( 't', context[12], context[13] );
    if( ! context[9] )
      continue;
    // closed e.Accum#1 as range 5
    // closed e.Text#1 as range 12(2)
    //DEBUG: e.Accum#1: 5
    //DEBUG: e.Text#1: 2

    refalrts::reset_allocator();
    //TRASH: {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 AsIs: & Name/4 AsIs: (/7 AsIs: e.Accum#1/5 HalfReuse: 't'/8 HalfReuse: )/9 AsIs: e.Text#1/12(2) AsIs: >/1 ]] }
    refalrts::reinit_char( context[8], 't' );
    refalrts::reinit_close_bracket( context[9] );
    refalrts::push_stack( context[1] );
    refalrts::push_stack( context[0] );
    refalrts::link_brackets( context[7], context[9] );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence();

  do {
    // ( e.idx ) 'u' e.idx
    // </0 & Name/4 (/7 e.Accum#1/5 )/8 'u'/9 e.Text#1/2 >/1
    context[12] = context[2];
    context[13] = context[3];
    context[9] = refalrts::char_left( 'u', context[12], context[13] );
    if( ! context[9] )
      continue;
    // closed e.Accum#1 as range 5
    // closed e.Text#1 as range 12(2)
    //DEBUG: e.Accum#1: 5
    //DEBUG: e.Text#1: 2

    refalrts::reset_allocator();
    //TRASH: {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 AsIs: & Name/4 AsIs: (/7 AsIs: e.Accum#1/5 HalfReuse: 'u'/8 HalfReuse: )/9 AsIs: e.Text#1/12(2) AsIs: >/1 ]] }
    refalrts::reinit_char( context[8], 'u' );
    refalrts::reinit_close_bracket( context[9] );
    refalrts::push_stack( context[1] );
    refalrts::push_stack( context[0] );
    refalrts::link_brackets( context[7], context[9] );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence();

  do {
    // ( e.idx ) 'v' e.idx
    // </0 & Name/4 (/7 e.Accum#1/5 )/8 'v'/9 e.Text#1/2 >/1
    context[12] = context[2];
    context[13] = context[3];
    context[9] = refalrts::char_left( 'v', context[12], context[13] );
    if( ! context[9] )
      continue;
    // closed e.Accum#1 as range 5
    // closed e.Text#1 as range 12(2)
    //DEBUG: e.Accum#1: 5
    //DEBUG: e.Text#1: 2

    refalrts::reset_allocator();
    //TRASH: {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 AsIs: & Name/4 AsIs: (/7 AsIs: e.Accum#1/5 HalfReuse: 'v'/8 HalfReuse: )/9 AsIs: e.Text#1/12(2) AsIs: >/1 ]] }
    refalrts::reinit_char( context[8], 'v' );
    refalrts::reinit_close_bracket( context[9] );
    refalrts::push_stack( context[1] );
    refalrts::push_stack( context[0] );
    refalrts::link_brackets( context[7], context[9] );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence();

  do {
    // ( e.idx ) 'w' e.idx
    // </0 & Name/4 (/7 e.Accum#1/5 )/8 'w'/9 e.Text#1/2 >/1
    context[12] = context[2];
    context[13] = context[3];
    context[9] = refalrts::char_left( 'w', context[12], context[13] );
    if( ! context[9] )
      continue;
    // closed e.Accum#1 as range 5
    // closed e.Text#1 as range 12(2)
    //DEBUG: e.Accum#1: 5
    //DEBUG: e.Text#1: 2

    refalrts::reset_allocator();
    //TRASH: {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 AsIs: & Name/4 AsIs: (/7 AsIs: e.Accum#1/5 HalfReuse: 'w'/8 HalfReuse: )/9 AsIs: e.Text#1/12(2) AsIs: >/1 ]] }
    refalrts::reinit_char( context[8], 'w' );
    refalrts::reinit_close_bracket( context[9] );
    refalrts::push_stack( context[1] );
    refalrts::push_stack( context[0] );
    refalrts::link_brackets( context[7], context[9] );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence();

  do {
    // ( e.idx ) 'x' e.idx
    // </0 & Name/4 (/7 e.Accum#1/5 )/8 'x'/9 e.Text#1/2 >/1
    context[12] = context[2];
    context[13] = context[3];
    context[9] = refalrts::char_left( 'x', context[12], context[13] );
    if( ! context[9] )
      continue;
    // closed e.Accum#1 as range 5
    // closed e.Text#1 as range 12(2)
    //DEBUG: e.Accum#1: 5
    //DEBUG: e.Text#1: 2

    refalrts::reset_allocator();
    //TRASH: {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 AsIs: & Name/4 AsIs: (/7 AsIs: e.Accum#1/5 HalfReuse: 'x'/8 HalfReuse: )/9 AsIs: e.Text#1/12(2) AsIs: >/1 ]] }
    refalrts::reinit_char( context[8], 'x' );
    refalrts::reinit_close_bracket( context[9] );
    refalrts::push_stack( context[1] );
    refalrts::push_stack( context[0] );
    refalrts::link_brackets( context[7], context[9] );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence();

  do {
    // ( e.idx ) 'y' e.idx
    // </0 & Name/4 (/7 e.Accum#1/5 )/8 'y'/9 e.Text#1/2 >/1
    context[12] = context[2];
    context[13] = context[3];
    context[9] = refalrts::char_left( 'y', context[12], context[13] );
    if( ! context[9] )
      continue;
    // closed e.Accum#1 as range 5
    // closed e.Text#1 as range 12(2)
    //DEBUG: e.Accum#1: 5
    //DEBUG: e.Text#1: 2

    refalrts::reset_allocator();
    //TRASH: {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 AsIs: & Name/4 AsIs: (/7 AsIs: e.Accum#1/5 HalfReuse: 'y'/8 HalfReuse: )/9 AsIs: e.Text#1/12(2) AsIs: >/1 ]] }
    refalrts::reinit_char( context[8], 'y' );
    refalrts::reinit_close_bracket( context[9] );
    refalrts::push_stack( context[1] );
    refalrts::push_stack( context[0] );
    refalrts::link_brackets( context[7], context[9] );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence();

  do {
    // ( e.idx ) 'z' e.idx
    // </0 & Name/4 (/7 e.Accum#1/5 )/8 'z'/9 e.Text#1/2 >/1
    context[12] = context[2];
    context[13] = context[3];
    context[9] = refalrts::char_left( 'z', context[12], context[13] );
    if( ! context[9] )
      continue;
    // closed e.Accum#1 as range 5
    // closed e.Text#1 as range 12(2)
    //DEBUG: e.Accum#1: 5
    //DEBUG: e.Text#1: 2

    refalrts::reset_allocator();
    //TRASH: {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 AsIs: & Name/4 AsIs: (/7 AsIs: e.Accum#1/5 HalfReuse: 'z'/8 HalfReuse: )/9 AsIs: e.Text#1/12(2) AsIs: >/1 ]] }
    refalrts::reinit_char( context[8], 'z' );
    refalrts::reinit_close_bracket( context[9] );
    refalrts::push_stack( context[1] );
    refalrts::push_stack( context[0] );
    refalrts::link_brackets( context[7], context[9] );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence();

  do {
    // ( e.idx ) 'A' e.idx
    // </0 & Name/4 (/7 e.Accum#1/5 )/8 'A'/9 e.Text#1/2 >/1
    context[12] = context[2];
    context[13] = context[3];
    context[9] = refalrts::char_left( 'A', context[12], context[13] );
    if( ! context[9] )
      continue;
    // closed e.Accum#1 as range 5
    // closed e.Text#1 as range 12(2)
    //DEBUG: e.Accum#1: 5
    //DEBUG: e.Text#1: 2

    refalrts::reset_allocator();
    //TRASH: {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 AsIs: & Name/4 AsIs: (/7 AsIs: e.Accum#1/5 HalfReuse: 'A'/8 HalfReuse: )/9 AsIs: e.Text#1/12(2) AsIs: >/1 ]] }
    refalrts::reinit_char( context[8], 'A' );
    refalrts::reinit_close_bracket( context[9] );
    refalrts::push_stack( context[1] );
    refalrts::push_stack( context[0] );
    refalrts::link_brackets( context[7], context[9] );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence();

  do {
    // ( e.idx ) 'B' e.idx
    // </0 & Name/4 (/7 e.Accum#1/5 )/8 'B'/9 e.Text#1/2 >/1
    context[12] = context[2];
    context[13] = context[3];
    context[9] = refalrts::char_left( 'B', context[12], context[13] );
    if( ! context[9] )
      continue;
    // closed e.Accum#1 as range 5
    // closed e.Text#1 as range 12(2)
    //DEBUG: e.Accum#1: 5
    //DEBUG: e.Text#1: 2

    refalrts::reset_allocator();
    //TRASH: {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 AsIs: & Name/4 AsIs: (/7 AsIs: e.Accum#1/5 HalfReuse: 'B'/8 HalfReuse: )/9 AsIs: e.Text#1/12(2) AsIs: >/1 ]] }
    refalrts::reinit_char( context[8], 'B' );
    refalrts::reinit_close_bracket( context[9] );
    refalrts::push_stack( context[1] );
    refalrts::push_stack( context[0] );
    refalrts::link_brackets( context[7], context[9] );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence();

  do {
    // ( e.idx ) 'C' e.idx
    // </0 & Name/4 (/7 e.Accum#1/5 )/8 'C'/9 e.Text#1/2 >/1
    context[12] = context[2];
    context[13] = context[3];
    context[9] = refalrts::char_left( 'C', context[12], context[13] );
    if( ! context[9] )
      continue;
    // closed e.Accum#1 as range 5
    // closed e.Text#1 as range 12(2)
    //DEBUG: e.Accum#1: 5
    //DEBUG: e.Text#1: 2

    refalrts::reset_allocator();
    //TRASH: {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 AsIs: & Name/4 AsIs: (/7 AsIs: e.Accum#1/5 HalfReuse: 'C'/8 HalfReuse: )/9 AsIs: e.Text#1/12(2) AsIs: >/1 ]] }
    refalrts::reinit_char( context[8], 'C' );
    refalrts::reinit_close_bracket( context[9] );
    refalrts::push_stack( context[1] );
    refalrts::push_stack( context[0] );
    refalrts::link_brackets( context[7], context[9] );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence();

  do {
    // ( e.idx ) 'D' e.idx
    // </0 & Name/4 (/7 e.Accum#1/5 )/8 'D'/9 e.Text#1/2 >/1
    context[12] = context[2];
    context[13] = context[3];
    context[9] = refalrts::char_left( 'D', context[12], context[13] );
    if( ! context[9] )
      continue;
    // closed e.Accum#1 as range 5
    // closed e.Text#1 as range 12(2)
    //DEBUG: e.Accum#1: 5
    //DEBUG: e.Text#1: 2

    refalrts::reset_allocator();
    //TRASH: {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 AsIs: & Name/4 AsIs: (/7 AsIs: e.Accum#1/5 HalfReuse: 'D'/8 HalfReuse: )/9 AsIs: e.Text#1/12(2) AsIs: >/1 ]] }
    refalrts::reinit_char( context[8], 'D' );
    refalrts::reinit_close_bracket( context[9] );
    refalrts::push_stack( context[1] );
    refalrts::push_stack( context[0] );
    refalrts::link_brackets( context[7], context[9] );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence();

  do {
    // ( e.idx ) 'E' e.idx
    // </0 & Name/4 (/7 e.Accum#1/5 )/8 'E'/9 e.Text#1/2 >/1
    context[12] = context[2];
    context[13] = context[3];
    context[9] = refalrts::char_left( 'E', context[12], context[13] );
    if( ! context[9] )
      continue;
    // closed e.Accum#1 as range 5
    // closed e.Text#1 as range 12(2)
    //DEBUG: e.Accum#1: 5
    //DEBUG: e.Text#1: 2

    refalrts::reset_allocator();
    //TRASH: {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 AsIs: & Name/4 AsIs: (/7 AsIs: e.Accum#1/5 HalfReuse: 'E'/8 HalfReuse: )/9 AsIs: e.Text#1/12(2) AsIs: >/1 ]] }
    refalrts::reinit_char( context[8], 'E' );
    refalrts::reinit_close_bracket( context[9] );
    refalrts::push_stack( context[1] );
    refalrts::push_stack( context[0] );
    refalrts::link_brackets( context[7], context[9] );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence();

  do {
    // ( e.idx ) 'F' e.idx
    // </0 & Name/4 (/7 e.Accum#1/5 )/8 'F'/9 e.Text#1/2 >/1
    context[12] = context[2];
    context[13] = context[3];
    context[9] = refalrts::char_left( 'F', context[12], context[13] );
    if( ! context[9] )
      continue;
    // closed e.Accum#1 as range 5
    // closed e.Text#1 as range 12(2)
    //DEBUG: e.Accum#1: 5
    //DEBUG: e.Text#1: 2

    refalrts::reset_allocator();
    //TRASH: {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 AsIs: & Name/4 AsIs: (/7 AsIs: e.Accum#1/5 HalfReuse: 'F'/8 HalfReuse: )/9 AsIs: e.Text#1/12(2) AsIs: >/1 ]] }
    refalrts::reinit_char( context[8], 'F' );
    refalrts::reinit_close_bracket( context[9] );
    refalrts::push_stack( context[1] );
    refalrts::push_stack( context[0] );
    refalrts::link_brackets( context[7], context[9] );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence();

  do {
    // ( e.idx ) 'G' e.idx
    // </0 & Name/4 (/7 e.Accum#1/5 )/8 'G'/9 e.Text#1/2 >/1
    context[12] = context[2];
    context[13] = context[3];
    context[9] = refalrts::char_left( 'G', context[12], context[13] );
    if( ! context[9] )
      continue;
    // closed e.Accum#1 as range 5
    // closed e.Text#1 as range 12(2)
    //DEBUG: e.Accum#1: 5
    //DEBUG: e.Text#1: 2

    refalrts::reset_allocator();
    //TRASH: {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 AsIs: & Name/4 AsIs: (/7 AsIs: e.Accum#1/5 HalfReuse: 'G'/8 HalfReuse: )/9 AsIs: e.Text#1/12(2) AsIs: >/1 ]] }
    refalrts::reinit_char( context[8], 'G' );
    refalrts::reinit_close_bracket( context[9] );
    refalrts::push_stack( context[1] );
    refalrts::push_stack( context[0] );
    refalrts::link_brackets( context[7], context[9] );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence();

  do {
    // ( e.idx ) 'H' e.idx
    // </0 & Name/4 (/7 e.Accum#1/5 )/8 'H'/9 e.Text#1/2 >/1
    context[12] = context[2];
    context[13] = context[3];
    context[9] = refalrts::char_left( 'H', context[12], context[13] );
    if( ! context[9] )
      continue;
    // closed e.Accum#1 as range 5
    // closed e.Text#1 as range 12(2)
    //DEBUG: e.Accum#1: 5
    //DEBUG: e.Text#1: 2

    refalrts::reset_allocator();
    //TRASH: {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 AsIs: & Name/4 AsIs: (/7 AsIs: e.Accum#1/5 HalfReuse: 'H'/8 HalfReuse: )/9 AsIs: e.Text#1/12(2) AsIs: >/1 ]] }
    refalrts::reinit_char( context[8], 'H' );
    refalrts::reinit_close_bracket( context[9] );
    refalrts::push_stack( context[1] );
    refalrts::push_stack( context[0] );
    refalrts::link_brackets( context[7], context[9] );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence();

  do {
    // ( e.idx ) 'I' e.idx
    // </0 & Name/4 (/7 e.Accum#1/5 )/8 'I'/9 e.Text#1/2 >/1
    context[12] = context[2];
    context[13] = context[3];
    context[9] = refalrts::char_left( 'I', context[12], context[13] );
    if( ! context[9] )
      continue;
    // closed e.Accum#1 as range 5
    // closed e.Text#1 as range 12(2)
    //DEBUG: e.Accum#1: 5
    //DEBUG: e.Text#1: 2

    refalrts::reset_allocator();
    //TRASH: {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 AsIs: & Name/4 AsIs: (/7 AsIs: e.Accum#1/5 HalfReuse: 'I'/8 HalfReuse: )/9 AsIs: e.Text#1/12(2) AsIs: >/1 ]] }
    refalrts::reinit_char( context[8], 'I' );
    refalrts::reinit_close_bracket( context[9] );
    refalrts::push_stack( context[1] );
    refalrts::push_stack( context[0] );
    refalrts::link_brackets( context[7], context[9] );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence();

  do {
    // ( e.idx ) 'J' e.idx
    // </0 & Name/4 (/7 e.Accum#1/5 )/8 'J'/9 e.Text#1/2 >/1
    context[12] = context[2];
    context[13] = context[3];
    context[9] = refalrts::char_left( 'J', context[12], context[13] );
    if( ! context[9] )
      continue;
    // closed e.Accum#1 as range 5
    // closed e.Text#1 as range 12(2)
    //DEBUG: e.Accum#1: 5
    //DEBUG: e.Text#1: 2

    refalrts::reset_allocator();
    //TRASH: {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 AsIs: & Name/4 AsIs: (/7 AsIs: e.Accum#1/5 HalfReuse: 'J'/8 HalfReuse: )/9 AsIs: e.Text#1/12(2) AsIs: >/1 ]] }
    refalrts::reinit_char( context[8], 'J' );
    refalrts::reinit_close_bracket( context[9] );
    refalrts::push_stack( context[1] );
    refalrts::push_stack( context[0] );
    refalrts::link_brackets( context[7], context[9] );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence();

  do {
    // ( e.idx ) 'K' e.idx
    // </0 & Name/4 (/7 e.Accum#1/5 )/8 'K'/9 e.Text#1/2 >/1
    context[12] = context[2];
    context[13] = context[3];
    context[9] = refalrts::char_left( 'K', context[12], context[13] );
    if( ! context[9] )
      continue;
    // closed e.Accum#1 as range 5
    // closed e.Text#1 as range 12(2)
    //DEBUG: e.Accum#1: 5
    //DEBUG: e.Text#1: 2

    refalrts::reset_allocator();
    //TRASH: {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 AsIs: & Name/4 AsIs: (/7 AsIs: e.Accum#1/5 HalfReuse: 'K'/8 HalfReuse: )/9 AsIs: e.Text#1/12(2) AsIs: >/1 ]] }
    refalrts::reinit_char( context[8], 'K' );
    refalrts::reinit_close_bracket( context[9] );
    refalrts::push_stack( context[1] );
    refalrts::push_stack( context[0] );
    refalrts::link_brackets( context[7], context[9] );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence();

  do {
    // ( e.idx ) 'L' e.idx
    // </0 & Name/4 (/7 e.Accum#1/5 )/8 'L'/9 e.Text#1/2 >/1
    context[12] = context[2];
    context[13] = context[3];
    context[9] = refalrts::char_left( 'L', context[12], context[13] );
    if( ! context[9] )
      continue;
    // closed e.Accum#1 as range 5
    // closed e.Text#1 as range 12(2)
    //DEBUG: e.Accum#1: 5
    //DEBUG: e.Text#1: 2

    refalrts::reset_allocator();
    //TRASH: {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 AsIs: & Name/4 AsIs: (/7 AsIs: e.Accum#1/5 HalfReuse: 'L'/8 HalfReuse: )/9 AsIs: e.Text#1/12(2) AsIs: >/1 ]] }
    refalrts::reinit_char( context[8], 'L' );
    refalrts::reinit_close_bracket( context[9] );
    refalrts::push_stack( context[1] );
    refalrts::push_stack( context[0] );
    refalrts::link_brackets( context[7], context[9] );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence();

  do {
    // ( e.idx ) 'M' e.idx
    // </0 & Name/4 (/7 e.Accum#1/5 )/8 'M'/9 e.Text#1/2 >/1
    context[12] = context[2];
    context[13] = context[3];
    context[9] = refalrts::char_left( 'M', context[12], context[13] );
    if( ! context[9] )
      continue;
    // closed e.Accum#1 as range 5
    // closed e.Text#1 as range 12(2)
    //DEBUG: e.Accum#1: 5
    //DEBUG: e.Text#1: 2

    refalrts::reset_allocator();
    //TRASH: {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 AsIs: & Name/4 AsIs: (/7 AsIs: e.Accum#1/5 HalfReuse: 'M'/8 HalfReuse: )/9 AsIs: e.Text#1/12(2) AsIs: >/1 ]] }
    refalrts::reinit_char( context[8], 'M' );
    refalrts::reinit_close_bracket( context[9] );
    refalrts::push_stack( context[1] );
    refalrts::push_stack( context[0] );
    refalrts::link_brackets( context[7], context[9] );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence();

  do {
    // ( e.idx ) 'N' e.idx
    // </0 & Name/4 (/7 e.Accum#1/5 )/8 'N'/9 e.Text#1/2 >/1
    context[12] = context[2];
    context[13] = context[3];
    context[9] = refalrts::char_left( 'N', context[12], context[13] );
    if( ! context[9] )
      continue;
    // closed e.Accum#1 as range 5
    // closed e.Text#1 as range 12(2)
    //DEBUG: e.Accum#1: 5
    //DEBUG: e.Text#1: 2

    refalrts::reset_allocator();
    //TRASH: {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 AsIs: & Name/4 AsIs: (/7 AsIs: e.Accum#1/5 HalfReuse: 'N'/8 HalfReuse: )/9 AsIs: e.Text#1/12(2) AsIs: >/1 ]] }
    refalrts::reinit_char( context[8], 'N' );
    refalrts::reinit_close_bracket( context[9] );
    refalrts::push_stack( context[1] );
    refalrts::push_stack( context[0] );
    refalrts::link_brackets( context[7], context[9] );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence();

  do {
    // ( e.idx ) 'O' e.idx
    // </0 & Name/4 (/7 e.Accum#1/5 )/8 'O'/9 e.Text#1/2 >/1
    context[12] = context[2];
    context[13] = context[3];
    context[9] = refalrts::char_left( 'O', context[12], context[13] );
    if( ! context[9] )
      continue;
    // closed e.Accum#1 as range 5
    // closed e.Text#1 as range 12(2)
    //DEBUG: e.Accum#1: 5
    //DEBUG: e.Text#1: 2

    refalrts::reset_allocator();
    //TRASH: {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 AsIs: & Name/4 AsIs: (/7 AsIs: e.Accum#1/5 HalfReuse: 'O'/8 HalfReuse: )/9 AsIs: e.Text#1/12(2) AsIs: >/1 ]] }
    refalrts::reinit_char( context[8], 'O' );
    refalrts::reinit_close_bracket( context[9] );
    refalrts::push_stack( context[1] );
    refalrts::push_stack( context[0] );
    refalrts::link_brackets( context[7], context[9] );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence();

  do {
    // ( e.idx ) 'P' e.idx
    // </0 & Name/4 (/7 e.Accum#1/5 )/8 'P'/9 e.Text#1/2 >/1
    context[12] = context[2];
    context[13] = context[3];
    context[9] = refalrts::char_left( 'P', context[12], context[13] );
    if( ! context[9] )
      continue;
    // closed e.Accum#1 as range 5
    // closed e.Text#1 as range 12(2)
    //DEBUG: e.Accum#1: 5
    //DEBUG: e.Text#1: 2

    refalrts::reset_allocator();
    //TRASH: {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 AsIs: & Name/4 AsIs: (/7 AsIs: e.Accum#1/5 HalfReuse: 'P'/8 HalfReuse: )/9 AsIs: e.Text#1/12(2) AsIs: >/1 ]] }
    refalrts::reinit_char( context[8], 'P' );
    refalrts::reinit_close_bracket( context[9] );
    refalrts::push_stack( context[1] );
    refalrts::push_stack( context[0] );
    refalrts::link_brackets( context[7], context[9] );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence();

  do {
    // ( e.idx ) 'Q' e.idx
    // </0 & Name/4 (/7 e.Accum#1/5 )/8 'Q'/9 e.Text#1/2 >/1
    context[12] = context[2];
    context[13] = context[3];
    context[9] = refalrts::char_left( 'Q', context[12], context[13] );
    if( ! context[9] )
      continue;
    // closed e.Accum#1 as range 5
    // closed e.Text#1 as range 12(2)
    //DEBUG: e.Accum#1: 5
    //DEBUG: e.Text#1: 2

    refalrts::reset_allocator();
    //TRASH: {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 AsIs: & Name/4 AsIs: (/7 AsIs: e.Accum#1/5 HalfReuse: 'Q'/8 HalfReuse: )/9 AsIs: e.Text#1/12(2) AsIs: >/1 ]] }
    refalrts::reinit_char( context[8], 'Q' );
    refalrts::reinit_close_bracket( context[9] );
    refalrts::push_stack( context[1] );
    refalrts::push_stack( context[0] );
    refalrts::link_brackets( context[7], context[9] );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence();

  do {
    // ( e.idx ) 'R' e.idx
    // </0 & Name/4 (/7 e.Accum#1/5 )/8 'R'/9 e.Text#1/2 >/1
    context[12] = context[2];
    context[13] = context[3];
    context[9] = refalrts::char_left( 'R', context[12], context[13] );
    if( ! context[9] )
      continue;
    // closed e.Accum#1 as range 5
    // closed e.Text#1 as range 12(2)
    //DEBUG: e.Accum#1: 5
    //DEBUG: e.Text#1: 2

    refalrts::reset_allocator();
    //TRASH: {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 AsIs: & Name/4 AsIs: (/7 AsIs: e.Accum#1/5 HalfReuse: 'R'/8 HalfReuse: )/9 AsIs: e.Text#1/12(2) AsIs: >/1 ]] }
    refalrts::reinit_char( context[8], 'R' );
    refalrts::reinit_close_bracket( context[9] );
    refalrts::push_stack( context[1] );
    refalrts::push_stack( context[0] );
    refalrts::link_brackets( context[7], context[9] );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence();

  do {
    // ( e.idx ) 'S' e.idx
    // </0 & Name/4 (/7 e.Accum#1/5 )/8 'S'/9 e.Text#1/2 >/1
    context[12] = context[2];
    context[13] = context[3];
    context[9] = refalrts::char_left( 'S', context[12], context[13] );
    if( ! context[9] )
      continue;
    // closed e.Accum#1 as range 5
    // closed e.Text#1 as range 12(2)
    //DEBUG: e.Accum#1: 5
    //DEBUG: e.Text#1: 2

    refalrts::reset_allocator();
    //TRASH: {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 AsIs: & Name/4 AsIs: (/7 AsIs: e.Accum#1/5 HalfReuse: 'S'/8 HalfReuse: )/9 AsIs: e.Text#1/12(2) AsIs: >/1 ]] }
    refalrts::reinit_char( context[8], 'S' );
    refalrts::reinit_close_bracket( context[9] );
    refalrts::push_stack( context[1] );
    refalrts::push_stack( context[0] );
    refalrts::link_brackets( context[7], context[9] );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence();

  do {
    // ( e.idx ) 'T' e.idx
    // </0 & Name/4 (/7 e.Accum#1/5 )/8 'T'/9 e.Text#1/2 >/1
    context[12] = context[2];
    context[13] = context[3];
    context[9] = refalrts::char_left( 'T', context[12], context[13] );
    if( ! context[9] )
      continue;
    // closed e.Accum#1 as range 5
    // closed e.Text#1 as range 12(2)
    //DEBUG: e.Accum#1: 5
    //DEBUG: e.Text#1: 2

    refalrts::reset_allocator();
    //TRASH: {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 AsIs: & Name/4 AsIs: (/7 AsIs: e.Accum#1/5 HalfReuse: 'T'/8 HalfReuse: )/9 AsIs: e.Text#1/12(2) AsIs: >/1 ]] }
    refalrts::reinit_char( context[8], 'T' );
    refalrts::reinit_close_bracket( context[9] );
    refalrts::push_stack( context[1] );
    refalrts::push_stack( context[0] );
    refalrts::link_brackets( context[7], context[9] );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence();

  do {
    // ( e.idx ) 'U' e.idx
    // </0 & Name/4 (/7 e.Accum#1/5 )/8 'U'/9 e.Text#1/2 >/1
    context[12] = context[2];
    context[13] = context[3];
    context[9] = refalrts::char_left( 'U', context[12], context[13] );
    if( ! context[9] )
      continue;
    // closed e.Accum#1 as range 5
    // closed e.Text#1 as range 12(2)
    //DEBUG: e.Accum#1: 5
    //DEBUG: e.Text#1: 2

    refalrts::reset_allocator();
    //TRASH: {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 AsIs: & Name/4 AsIs: (/7 AsIs: e.Accum#1/5 HalfReuse: 'U'/8 HalfReuse: )/9 AsIs: e.Text#1/12(2) AsIs: >/1 ]] }
    refalrts::reinit_char( context[8], 'U' );
    refalrts::reinit_close_bracket( context[9] );
    refalrts::push_stack( context[1] );
    refalrts::push_stack( context[0] );
    refalrts::link_brackets( context[7], context[9] );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence();

  do {
    // ( e.idx ) 'V' e.idx
    // </0 & Name/4 (/7 e.Accum#1/5 )/8 'V'/9 e.Text#1/2 >/1
    context[12] = context[2];
    context[13] = context[3];
    context[9] = refalrts::char_left( 'V', context[12], context[13] );
    if( ! context[9] )
      continue;
    // closed e.Accum#1 as range 5
    // closed e.Text#1 as range 12(2)
    //DEBUG: e.Accum#1: 5
    //DEBUG: e.Text#1: 2

    refalrts::reset_allocator();
    //TRASH: {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 AsIs: & Name/4 AsIs: (/7 AsIs: e.Accum#1/5 HalfReuse: 'V'/8 HalfReuse: )/9 AsIs: e.Text#1/12(2) AsIs: >/1 ]] }
    refalrts::reinit_char( context[8], 'V' );
    refalrts::reinit_close_bracket( context[9] );
    refalrts::push_stack( context[1] );
    refalrts::push_stack( context[0] );
    refalrts::link_brackets( context[7], context[9] );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence();

  do {
    // ( e.idx ) 'W' e.idx
    // </0 & Name/4 (/7 e.Accum#1/5 )/8 'W'/9 e.Text#1/2 >/1
    context[12] = context[2];
    context[13] = context[3];
    context[9] = refalrts::char_left( 'W', context[12], context[13] );
    if( ! context[9] )
      continue;
    // closed e.Accum#1 as range 5
    // closed e.Text#1 as range 12(2)
    //DEBUG: e.Accum#1: 5
    //DEBUG: e.Text#1: 2

    refalrts::reset_allocator();
    //TRASH: {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 AsIs: & Name/4 AsIs: (/7 AsIs: e.Accum#1/5 HalfReuse: 'W'/8 HalfReuse: )/9 AsIs: e.Text#1/12(2) AsIs: >/1 ]] }
    refalrts::reinit_char( context[8], 'W' );
    refalrts::reinit_close_bracket( context[9] );
    refalrts::push_stack( context[1] );
    refalrts::push_stack( context[0] );
    refalrts::link_brackets( context[7], context[9] );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence();

  do {
    // ( e.idx ) 'X' e.idx
    // </0 & Name/4 (/7 e.Accum#1/5 )/8 'X'/9 e.Text#1/2 >/1
    context[12] = context[2];
    context[13] = context[3];
    context[9] = refalrts::char_left( 'X', context[12], context[13] );
    if( ! context[9] )
      continue;
    // closed e.Accum#1 as range 5
    // closed e.Text#1 as range 12(2)
    //DEBUG: e.Accum#1: 5
    //DEBUG: e.Text#1: 2

    refalrts::reset_allocator();
    //TRASH: {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 AsIs: & Name/4 AsIs: (/7 AsIs: e.Accum#1/5 HalfReuse: 'X'/8 HalfReuse: )/9 AsIs: e.Text#1/12(2) AsIs: >/1 ]] }
    refalrts::reinit_char( context[8], 'X' );
    refalrts::reinit_close_bracket( context[9] );
    refalrts::push_stack( context[1] );
    refalrts::push_stack( context[0] );
    refalrts::link_brackets( context[7], context[9] );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence();

  do {
    // ( e.idx ) 'Y' e.idx
    // </0 & Name/4 (/7 e.Accum#1/5 )/8 'Y'/9 e.Text#1/2 >/1
    context[12] = context[2];
    context[13] = context[3];
    context[9] = refalrts::char_left( 'Y', context[12], context[13] );
    if( ! context[9] )
      continue;
    // closed e.Accum#1 as range 5
    // closed e.Text#1 as range 12(2)
    //DEBUG: e.Accum#1: 5
    //DEBUG: e.Text#1: 2

    refalrts::reset_allocator();
    //TRASH: {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 AsIs: & Name/4 AsIs: (/7 AsIs: e.Accum#1/5 HalfReuse: 'Y'/8 HalfReuse: )/9 AsIs: e.Text#1/12(2) AsIs: >/1 ]] }
    refalrts::reinit_char( context[8], 'Y' );
    refalrts::reinit_close_bracket( context[9] );
    refalrts::push_stack( context[1] );
    refalrts::push_stack( context[0] );
    refalrts::link_brackets( context[7], context[9] );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence();

  do {
    // ( e.idx ) 'Z' e.idx
    // </0 & Name/4 (/7 e.Accum#1/5 )/8 'Z'/9 e.Text#1/2 >/1
    context[12] = context[2];
    context[13] = context[3];
    context[9] = refalrts::char_left( 'Z', context[12], context[13] );
    if( ! context[9] )
      continue;
    // closed e.Accum#1 as range 5
    // closed e.Text#1 as range 12(2)
    //DEBUG: e.Accum#1: 5
    //DEBUG: e.Text#1: 2

    refalrts::reset_allocator();
    //TRASH: {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 AsIs: & Name/4 AsIs: (/7 AsIs: e.Accum#1/5 HalfReuse: 'Z'/8 HalfReuse: )/9 AsIs: e.Text#1/12(2) AsIs: >/1 ]] }
    refalrts::reinit_char( context[8], 'Z' );
    refalrts::reinit_close_bracket( context[9] );
    refalrts::push_stack( context[1] );
    refalrts::push_stack( context[0] );
    refalrts::link_brackets( context[7], context[9] );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence();

  // ( e.idx ) e.idx
  // </0 & Name/4 (/7 e.Accum#1/5 )/8 e.Text#1/2 >/1
  // closed e.Accum#1 as range 5
  // closed e.Text#1 as range 2
  //DEBUG: e.Accum#1: 5
  //DEBUG: e.Text#1: 2

  refalrts::reset_allocator();
  //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ } (/9 # TName/10 Tile{ AsIs: e.Accum#1/5 } )/11 Tile{ AsIs: </0 Reuse: & Root/4 AsIs: (/7 } Tile{ AsIs: )/8 AsIs: e.Text#1/2 AsIs: >/1 ]] }
  if( ! refalrts::alloc_open_bracket( context[9] ) )
    return refalrts::cNoMemory;
  if( ! refalrts::alloc_ident( context[10], & ident_TName<int>::name ) )
    return refalrts::cNoMemory;
  if( ! refalrts::alloc_close_bracket( context[11] ) )
    return refalrts::cNoMemory;
  refalrts::update_name( context[4], & Root );
  refalrts::push_stack( context[1] );
  refalrts::push_stack( context[0] );
  refalrts::link_brackets( context[7], context[8] );
  refalrts::link_brackets( context[9], context[11] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[8];
  res = refalrts::splice_evar( res, context[0], context[7] );
  res = refalrts::splice_evar( res, context[11], context[11] );
  res = refalrts::splice_evar( res, context[5], context[6] );
  res = refalrts::splice_evar( res, context[9], context[10] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

namespace /* unnamed */ {
refalrts::RefalNativeFunction descr_Name(func_Name, "Name");
refalrts::RefalFunction& Name = descr_Name;

} // unnamed namespace

#endif
#ifdef INTERPRET
namespace /* unnamed */ {
  namespace scope_ErrorMessage {
    static const char *filename = "Flex-Lexer.cpp";
    static refalrts::RefalFunction *functions[] = {
      & Root
    };
    static const refalrts::RefalIdentifier idents[] = {
      & ident_TokenError<int>::name,
      & ident_TErrorMessage<int>::name
    };
    using refalrts::numbers;
    static const refalrts::StringItem strings[] = {
      {"nclosed error messag", 20}
    };
    static const refalrts::RASLCommand raa[] = {
      {refalrts::icThisIsGeneratedFunction, 0, 0, 0},
      {refalrts::icLoadConstants, 0, 0, 0},
      {refalrts::icReserveBacktrackStack, 2, 0, 0},
      {refalrts::icIssueMemory, 15, 0, 0},
      //FAST GEN: e.$
      //GLOBAL GEN: ( e.$ ) e.$
      // </0 & ErrorMessage/4 (/7 e.idxB#0/5 )/8 e.idxT#0/2 >/1
      {refalrts::icInitB0_Lite, 0, 0, 0},
      {refalrts::icCallSaveLeft, 0, 2, 0},
      {refalrts::icBracketLeftSave, 0, 5, 2},
      // closed e.idxB#0 as range 5
      // closed e.idxT#0 as range 2
      {refalrts::icOnFailGoTo, +21, 0, 0},
      // ( e.idx ) '\"' e.idx
      // </0 & ErrorMessage/4 (/7 e.Accum#1/5 )/8 '\"'/9 e.Text#1/2 >/1
      {refalrts::icSave, 0, 13, 2},
      {refalrts::icCharLeftSave, 9, static_cast<unsigned char>('\"'), 13},
      // closed e.Accum#1 as range 5
      // closed e.Text#1 as range 13(2)
      //DEBUG: e.Accum#1: 5
      //DEBUG: e.Text#1: 2
      {refalrts::icEmptyResult, 0, 0, 0},
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ HalfReuse: (/0 HalfReuse: # TErrorMessage/4 } Tile{ AsIs: e.Accum#1/5 } '\"'/10 Tile{ HalfReuse: )/7 } </11 & Root/12 Tile{ HalfReuse: (/8 HalfReuse: )/9 AsIs: e.Text#1/13(2) AsIs: >/1 ]] }
      {refalrts::icAllocChar, 0, '\"', 10},
      {refalrts::icAllocBracket, 0, refalrts::ibOpenCall, 11},
      {refalrts::icAllocFunc, 0, 0, 12},
      {refalrts::icReinitBracket, 0, refalrts::ibOpenBracket, 0},
      {refalrts::icReinitIdent, 0, 1, 4},
      {refalrts::icReinitBracket, 0, refalrts::ibCloseBracket, 7},
      {refalrts::icReinitBracket, 0, refalrts::ibOpenBracket, 8},
      {refalrts::icReinitBracket, 0, refalrts::ibCloseBracket, 9},
      {refalrts::icPushStack, 0, 0, 1},
      {refalrts::icPushStack, 0, 0, 11},
      {refalrts::icLinkBrackets, 8, 9, 0},
      {refalrts::icLinkBrackets, 0, 7, 0},
      {refalrts::icSetRes, 0, 0, 8},
      {refalrts::icSpliceTile, 11, 12, 0},
      {refalrts::icSpliceTile, 7, 7, 0},
      {refalrts::icSpliceTile, 10, 10, 0},
      {refalrts::icSpliceEVar, 0, 0, 5},
      {refalrts::icNextStep, 0, 0, 0},
      {refalrts::icProfilerStopSentence, 0, 0, 0},
      {refalrts::icOnFailGoTo, +13, 0, 0},
      // ( e.idx ) s.idx e.idx
      // </0 & ErrorMessage/4 (/7 e.Accum#1/5 )/8 s.Any#1/9 e.Text#1/2 >/1
      // closed e.Accum#1 as range 5
      {refalrts::icSave, 0, 13, 2},
      {refalrts::icsVarLeft, 0, 9, 13},
      // closed e.Text#1 as range 13(2)
      //DEBUG: e.Accum#1: 5
      //DEBUG: s.Any#1: 9
      //DEBUG: e.Text#1: 2
      {refalrts::icEmptyResult, 0, 0, 0},
      //TRASH: {REMOVED TILE} s.Any#1/9 {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 AsIs: & ErrorMessage/4 AsIs: (/7 AsIs: e.Accum#1/5 HalfReuse: s.Any1 #9/8 } )/10 Tile{ AsIs: e.Text#1/13(2) } Tile{ AsIs: >/1 ]] }
      {refalrts::icAllocBracket, 0, refalrts::ibCloseBracket, 10},
      {refalrts::icReinitSVar, 0, 9, 8},
      {refalrts::icPushStack, 0, 0, 1},
      {refalrts::icPushStack, 0, 0, 0},
      {refalrts::icLinkBrackets, 7, 10, 0},
      {refalrts::icSetRes, 0, 0, 1},
      {refalrts::icSpliceEVar, 0, 0, 13},
      {refalrts::icSpliceTile, 10, 10, 0},
      {refalrts::icTrash, 0, 0, 8},
      {refalrts::icNextStep, 0, 0, 0},
      {refalrts::icProfilerStopSentence, 0, 0, 0},
      // ( e.idx )
      // </0 & ErrorMessage/4 (/7 e.Accum#1/5 )/8 >/1
      {refalrts::icEmpty, 0, 0, 2},
      // closed e.Accum#1 as range 5
      //DEBUG: e.Accum#1: 5
      {refalrts::icEmptyResult, 0, 0, 0},
      //TRASH: {REMOVED TILE} e.Accum#1/5 {REMOVED TILE}
      //RESULT: Tile{ [[ HalfReuse: (/0 HalfReuse: # TokenError/4 HalfReuse: 'U'/7 }"nclosed error messag"/9 Tile{ HalfReuse: 'e'/8 HalfReuse: )/1 ]] }
      {refalrts::icAllocString, 0, 0, 9},
      {refalrts::icReinitBracket, 0, refalrts::ibOpenBracket, 0},
      {refalrts::icReinitIdent, 0, 0, 4},
      {refalrts::icReinitChar, 0, 'U', 7},
      {refalrts::icReinitChar, 0, 'e', 8},
      {refalrts::icReinitBracket, 0, refalrts::ibCloseBracket, 1},
      {refalrts::icLinkBrackets, 0, 1, 0},
      {refalrts::icSetRes, 0, 0, 8},
      {refalrts::icSpliceTile, 9, 10, 0},
      {refalrts::icTrash, 0, 0, 7},
      {refalrts::icNextStep, 0, 0, 0},
      {refalrts::icEnd, 0, 0, 0}
    };
  } // namespace scope_ErrorMessage

} // unnamed namespace

namespace /* unnamed */ {
refalrts::RASLFunction descr_ErrorMessage(
  "ErrorMessage",
  scope_ErrorMessage::raa,
  scope_ErrorMessage::functions,
  scope_ErrorMessage::idents,
  scope_ErrorMessage::numbers,
  scope_ErrorMessage::strings,
  scope_ErrorMessage::filename
);
refalrts::RefalFunction& ErrorMessage = descr_ErrorMessage;

} // unnamed namespace

#else
static refalrts::FnResult func_ErrorMessage(refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  refalrts::this_is_generated_function();
  // issue here memory for vars with 15 elems
  refalrts::Iter context[15];
  refalrts::zeros( context, 15 );
  //FAST GEN: e.$
  //GLOBAL GEN: ( e.$ ) e.$
  // </0 & ErrorMessage/4 (/7 e.idxB#0/5 )/8 e.idxT#0/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  context[5] = 0;
  context[6] = 0;
  context[7] = refalrts::brackets_left( context[5], context[6], context[2], context[3] );
  if( ! context[7] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[7], context[8]);
  // closed e.idxB#0 as range 5
  // closed e.idxT#0 as range 2
  do {
    // ( e.idx ) '\"' e.idx
    // </0 & ErrorMessage/4 (/7 e.Accum#1/5 )/8 '\"'/9 e.Text#1/2 >/1
    context[13] = context[2];
    context[14] = context[3];
    context[9] = refalrts::char_left( '\"', context[13], context[14] );
    if( ! context[9] )
      continue;
    // closed e.Accum#1 as range 5
    // closed e.Text#1 as range 13(2)
    //DEBUG: e.Accum#1: 5
    //DEBUG: e.Text#1: 2

    refalrts::reset_allocator();
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ HalfReuse: (/0 HalfReuse: # TErrorMessage/4 } Tile{ AsIs: e.Accum#1/5 } '\"'/10 Tile{ HalfReuse: )/7 } </11 & Root/12 Tile{ HalfReuse: (/8 HalfReuse: )/9 AsIs: e.Text#1/13(2) AsIs: >/1 ]] }
    if( ! refalrts::alloc_char( context[10], '\"' ) )
      return refalrts::cNoMemory;
    if( ! refalrts::alloc_open_call( context[11] ) )
      return refalrts::cNoMemory;
    if( ! refalrts::alloc_name( context[12], & Root ) )
      return refalrts::cNoMemory;
    refalrts::reinit_open_bracket( context[0] );
    refalrts::reinit_ident( context[4], & ident_TErrorMessage<int>::name );
    refalrts::reinit_close_bracket( context[7] );
    refalrts::reinit_open_bracket( context[8] );
    refalrts::reinit_close_bracket( context[9] );
    refalrts::push_stack( context[1] );
    refalrts::push_stack( context[11] );
    refalrts::link_brackets( context[8], context[9] );
    refalrts::link_brackets( context[0], context[7] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[8];
    res = refalrts::splice_evar( res, context[11], context[12] );
    res = refalrts::splice_evar( res, context[7], context[7] );
    res = refalrts::splice_evar( res, context[10], context[10] );
    res = refalrts::splice_evar( res, context[5], context[6] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence();

  do {
    // ( e.idx ) s.idx e.idx
    // </0 & ErrorMessage/4 (/7 e.Accum#1/5 )/8 s.Any#1/9 e.Text#1/2 >/1
    // closed e.Accum#1 as range 5
    context[13] = context[2];
    context[14] = context[3];
    if( ! refalrts::svar_left( context[9], context[13], context[14] ) )
      continue;
    // closed e.Text#1 as range 13(2)
    //DEBUG: e.Accum#1: 5
    //DEBUG: s.Any#1: 9
    //DEBUG: e.Text#1: 2

    refalrts::reset_allocator();
    //TRASH: {REMOVED TILE} s.Any#1/9 {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 AsIs: & ErrorMessage/4 AsIs: (/7 AsIs: e.Accum#1/5 HalfReuse: s.Any1 #9/8 } )/10 Tile{ AsIs: e.Text#1/13(2) } Tile{ AsIs: >/1 ]] }
    if( ! refalrts::alloc_close_bracket( context[10] ) )
      return refalrts::cNoMemory;
    refalrts::reinit_svar( context[8], context[9] );
    refalrts::push_stack( context[1] );
    refalrts::push_stack( context[0] );
    refalrts::link_brackets( context[7], context[10] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    res = refalrts::splice_evar( res, context[13], context[14] );
    res = refalrts::splice_evar( res, context[10], context[10] );
    refalrts::use( res );
    refalrts::splice_to_freelist_open( context[8], res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence();

  // ( e.idx )
  // </0 & ErrorMessage/4 (/7 e.Accum#1/5 )/8 >/1
  if( ! refalrts::empty_seq( context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  // closed e.Accum#1 as range 5
  //DEBUG: e.Accum#1: 5

  refalrts::reset_allocator();
  //TRASH: {REMOVED TILE} e.Accum#1/5 {REMOVED TILE}
  //RESULT: Tile{ [[ HalfReuse: (/0 HalfReuse: # TokenError/4 HalfReuse: 'U'/7 }"nclosed error messag"/9 Tile{ HalfReuse: 'e'/8 HalfReuse: )/1 ]] }
  if( ! refalrts::alloc_chars( context[9], context[10], "nclosed error messag", 20 ) )
    return refalrts::cNoMemory;
  refalrts::reinit_open_bracket( context[0] );
  refalrts::reinit_ident( context[4], & ident_TokenError<int>::name );
  refalrts::reinit_char( context[7], 'U' );
  refalrts::reinit_char( context[8], 'e' );
  refalrts::reinit_close_bracket( context[1] );
  refalrts::link_brackets( context[0], context[1] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[8];
  res = refalrts::splice_evar( res, context[9], context[10] );
  refalrts::use( res );
  refalrts::splice_to_freelist_open( context[7], res );
  return refalrts::cSuccess;
}

namespace /* unnamed */ {
refalrts::RefalNativeFunction descr_ErrorMessage(func_ErrorMessage, "ErrorMessage");
refalrts::RefalFunction& ErrorMessage = descr_ErrorMessage;

} // unnamed namespace

#endif
#ifdef INTERPRET
namespace /* unnamed */ {
  namespace scope_EscRegexp {
    static const char *filename = "Flex-Lexer.cpp";
    static refalrts::RefalFunction *functions[] = {
      & ReadRegexp,
      & EscRegexp_OCode,
      & EscRegexp_XCode
    };
    static const refalrts::RefalIdentifier idents[] = {
      & ident_TokenError<int>::name,
      & ident_TChar<int>::name,
      & ident_TGenericEscChar<int>::name
    };
    using refalrts::numbers;
    static const refalrts::StringItem strings[] = {
      {"nexpected EOF in Regex", 22},
      {"Bad escaped symbol", 18}
    };
    static const refalrts::RASLCommand raa[] = {
      {refalrts::icThisIsGeneratedFunction, 0, 0, 0},
      {refalrts::icLoadConstants, 0, 0, 0},
      {refalrts::icReserveBacktrackStack, 22, 0, 0},
      {refalrts::icIssueMemory, 17, 0, 0},
      //FAST GEN: e.$
      //GLOBAL GEN: ( e.$ ) e.$
      // </0 & EscRegexp/4 (/7 e.idxB#0/5 )/8 e.idxT#0/2 >/1
      {refalrts::icInitB0_Lite, 0, 0, 0},
      {refalrts::icCallSaveLeft, 0, 2, 0},
      {refalrts::icBracketLeftSave, 0, 5, 2},
      // closed e.idxB#0 as range 5
      // closed e.idxT#0 as range 2
      {refalrts::icOnFailGoTo, +21, 0, 0},
      // ( e.idx ) '\\' e.idx
      // </0 & EscRegexp/4 (/7 e.Accum#1/5 )/8 '\\'/9 e.Text#1/2 >/1
      {refalrts::icSave, 0, 15, 2},
      {refalrts::icCharLeftSave, 9, static_cast<unsigned char>('\\'), 15},
      // closed e.Accum#1 as range 5
      // closed e.Text#1 as range 15(2)
      //DEBUG: e.Accum#1: 5
      //DEBUG: e.Text#1: 2
      {refalrts::icEmptyResult, 0, 0, 0},
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ HalfReuse: (/0 HalfReuse: # TGenericEscChar/4 } Tile{ AsIs: e.Accum#1/5 } '\\'/10 Tile{ HalfReuse: )/7 } </11 & ReadRegexp/12 Tile{ HalfReuse: (/8 HalfReuse: )/9 AsIs: e.Text#1/15(2) AsIs: >/1 ]] }
      {refalrts::icAllocChar, 0, '\\', 10},
      {refalrts::icAllocBracket, 0, refalrts::ibOpenCall, 11},
      {refalrts::icAllocFunc, 0, 0, 12},
      {refalrts::icReinitBracket, 0, refalrts::ibOpenBracket, 0},
      {refalrts::icReinitIdent, 0, 2, 4},
      {refalrts::icReinitBracket, 0, refalrts::ibCloseBracket, 7},
      {refalrts::icReinitBracket, 0, refalrts::ibOpenBracket, 8},
      {refalrts::icReinitBracket, 0, refalrts::ibCloseBracket, 9},
      {refalrts::icPushStack, 0, 0, 1},
      {refalrts::icPushStack, 0, 0, 11},
      {refalrts::icLinkBrackets, 8, 9, 0},
      {refalrts::icLinkBrackets, 0, 7, 0},
      {refalrts::icSetRes, 0, 0, 8},
      {refalrts::icSpliceTile, 11, 12, 0},
      {refalrts::icSpliceTile, 7, 7, 0},
      {refalrts::icSpliceTile, 10, 10, 0},
      {refalrts::icSpliceEVar, 0, 0, 5},
      {refalrts::icNextStep, 0, 0, 0},
      {refalrts::icProfilerStopSentence, 0, 0, 0},
      {refalrts::icOnFailGoTo, +21, 0, 0},
      // ( e.idx ) 'n' e.idx
      // </0 & EscRegexp/4 (/7 e.Accum#1/5 )/8 'n'/9 e.Text#1/2 >/1
      {refalrts::icSave, 0, 15, 2},
      {refalrts::icCharLeftSave, 9, static_cast<unsigned char>('n'), 15},
      // closed e.Accum#1 as range 5
      // closed e.Text#1 as range 15(2)
      //DEBUG: e.Accum#1: 5
      //DEBUG: e.Text#1: 2
      {refalrts::icEmptyResult, 0, 0, 0},
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ HalfReuse: (/0 HalfReuse: # TGenericEscChar/4 } Tile{ AsIs: e.Accum#1/5 } 'n'/10 Tile{ HalfReuse: )/7 } </11 & ReadRegexp/12 Tile{ HalfReuse: (/8 HalfReuse: )/9 AsIs: e.Text#1/15(2) AsIs: >/1 ]] }
      {refalrts::icAllocChar, 0, 'n', 10},
      {refalrts::icAllocBracket, 0, refalrts::ibOpenCall, 11},
      {refalrts::icAllocFunc, 0, 0, 12},
      {refalrts::icReinitBracket, 0, refalrts::ibOpenBracket, 0},
      {refalrts::icReinitIdent, 0, 2, 4},
      {refalrts::icReinitBracket, 0, refalrts::ibCloseBracket, 7},
      {refalrts::icReinitBracket, 0, refalrts::ibOpenBracket, 8},
      {refalrts::icReinitBracket, 0, refalrts::ibCloseBracket, 9},
      {refalrts::icPushStack, 0, 0, 1},
      {refalrts::icPushStack, 0, 0, 11},
      {refalrts::icLinkBrackets, 8, 9, 0},
      {refalrts::icLinkBrackets, 0, 7, 0},
      {refalrts::icSetRes, 0, 0, 8},
      {refalrts::icSpliceTile, 11, 12, 0},
      {refalrts::icSpliceTile, 7, 7, 0},
      {refalrts::icSpliceTile, 10, 10, 0},
      {refalrts::icSpliceEVar, 0, 0, 5},
      {refalrts::icNextStep, 0, 0, 0},
      {refalrts::icProfilerStopSentence, 0, 0, 0},
      {refalrts::icOnFailGoTo, +21, 0, 0},
      // ( e.idx ) 't' e.idx
      // </0 & EscRegexp/4 (/7 e.Accum#1/5 )/8 't'/9 e.Text#1/2 >/1
      {refalrts::icSave, 0, 15, 2},
      {refalrts::icCharLeftSave, 9, static_cast<unsigned char>('t'), 15},
      // closed e.Accum#1 as range 5
      // closed e.Text#1 as range 15(2)
      //DEBUG: e.Accum#1: 5
      //DEBUG: e.Text#1: 2
      {refalrts::icEmptyResult, 0, 0, 0},
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ HalfReuse: (/0 HalfReuse: # TGenericEscChar/4 } Tile{ AsIs: e.Accum#1/5 } 't'/10 Tile{ HalfReuse: )/7 } </11 & ReadRegexp/12 Tile{ HalfReuse: (/8 HalfReuse: )/9 AsIs: e.Text#1/15(2) AsIs: >/1 ]] }
      {refalrts::icAllocChar, 0, 't', 10},
      {refalrts::icAllocBracket, 0, refalrts::ibOpenCall, 11},
      {refalrts::icAllocFunc, 0, 0, 12},
      {refalrts::icReinitBracket, 0, refalrts::ibOpenBracket, 0},
      {refalrts::icReinitIdent, 0, 2, 4},
      {refalrts::icReinitBracket, 0, refalrts::ibCloseBracket, 7},
      {refalrts::icReinitBracket, 0, refalrts::ibOpenBracket, 8},
      {refalrts::icReinitBracket, 0, refalrts::ibCloseBracket, 9},
      {refalrts::icPushStack, 0, 0, 1},
      {refalrts::icPushStack, 0, 0, 11},
      {refalrts::icLinkBrackets, 8, 9, 0},
      {refalrts::icLinkBrackets, 0, 7, 0},
      {refalrts::icSetRes, 0, 0, 8},
      {refalrts::icSpliceTile, 11, 12, 0},
      {refalrts::icSpliceTile, 7, 7, 0},
      {refalrts::icSpliceTile, 10, 10, 0},
      {refalrts::icSpliceEVar, 0, 0, 5},
      {refalrts::icNextStep, 0, 0, 0},
      {refalrts::icProfilerStopSentence, 0, 0, 0},
      {refalrts::icOnFailGoTo, +21, 0, 0},
      // ( e.idx ) 'r' e.idx
      // </0 & EscRegexp/4 (/7 e.Accum#1/5 )/8 'r'/9 e.Text#1/2 >/1
      {refalrts::icSave, 0, 15, 2},
      {refalrts::icCharLeftSave, 9, static_cast<unsigned char>('r'), 15},
      // closed e.Accum#1 as range 5
      // closed e.Text#1 as range 15(2)
      //DEBUG: e.Accum#1: 5
      //DEBUG: e.Text#1: 2
      {refalrts::icEmptyResult, 0, 0, 0},
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ HalfReuse: (/0 HalfReuse: # TGenericEscChar/4 } Tile{ AsIs: e.Accum#1/5 } 'r'/10 Tile{ HalfReuse: )/7 } </11 & ReadRegexp/12 Tile{ HalfReuse: (/8 HalfReuse: )/9 AsIs: e.Text#1/15(2) AsIs: >/1 ]] }
      {refalrts::icAllocChar, 0, 'r', 10},
      {refalrts::icAllocBracket, 0, refalrts::ibOpenCall, 11},
      {refalrts::icAllocFunc, 0, 0, 12},
      {refalrts::icReinitBracket, 0, refalrts::ibOpenBracket, 0},
      {refalrts::icReinitIdent, 0, 2, 4},
      {refalrts::icReinitBracket, 0, refalrts::ibCloseBracket, 7},
      {refalrts::icReinitBracket, 0, refalrts::ibOpenBracket, 8},
      {refalrts::icReinitBracket, 0, refalrts::ibCloseBracket, 9},
      {refalrts::icPushStack, 0, 0, 1},
      {refalrts::icPushStack, 0, 0, 11},
      {refalrts::icLinkBrackets, 8, 9, 0},
      {refalrts::icLinkBrackets, 0, 7, 0},
      {refalrts::icSetRes, 0, 0, 8},
      {refalrts::icSpliceTile, 11, 12, 0},
      {refalrts::icSpliceTile, 7, 7, 0},
      {refalrts::icSpliceTile, 10, 10, 0},
      {refalrts::icSpliceEVar, 0, 0, 5},
      {refalrts::icNextStep, 0, 0, 0},
      {refalrts::icProfilerStopSentence, 0, 0, 0},
      {refalrts::icOnFailGoTo, +21, 0, 0},
      // ( e.idx ) '/' e.idx
      // </0 & EscRegexp/4 (/7 e.Accum#1/5 )/8 '/'/9 e.Text#1/2 >/1
      {refalrts::icSave, 0, 15, 2},
      {refalrts::icCharLeftSave, 9, static_cast<unsigned char>('/'), 15},
      // closed e.Accum#1 as range 5
      // closed e.Text#1 as range 15(2)
      //DEBUG: e.Accum#1: 5
      //DEBUG: e.Text#1: 2
      {refalrts::icEmptyResult, 0, 0, 0},
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ HalfReuse: (/0 HalfReuse: # TChar/4 } Tile{ AsIs: e.Accum#1/5 } '/'/10 Tile{ HalfReuse: )/7 } </11 & ReadRegexp/12 Tile{ HalfReuse: (/8 HalfReuse: )/9 AsIs: e.Text#1/15(2) AsIs: >/1 ]] }
      {refalrts::icAllocChar, 0, '/', 10},
      {refalrts::icAllocBracket, 0, refalrts::ibOpenCall, 11},
      {refalrts::icAllocFunc, 0, 0, 12},
      {refalrts::icReinitBracket, 0, refalrts::ibOpenBracket, 0},
      {refalrts::icReinitIdent, 0, 1, 4},
      {refalrts::icReinitBracket, 0, refalrts::ibCloseBracket, 7},
      {refalrts::icReinitBracket, 0, refalrts::ibOpenBracket, 8},
      {refalrts::icReinitBracket, 0, refalrts::ibCloseBracket, 9},
      {refalrts::icPushStack, 0, 0, 1},
      {refalrts::icPushStack, 0, 0, 11},
      {refalrts::icLinkBrackets, 8, 9, 0},
      {refalrts::icLinkBrackets, 0, 7, 0},
      {refalrts::icSetRes, 0, 0, 8},
      {refalrts::icSpliceTile, 11, 12, 0},
      {refalrts::icSpliceTile, 7, 7, 0},
      {refalrts::icSpliceTile, 10, 10, 0},
      {refalrts::icSpliceEVar, 0, 0, 5},
      {refalrts::icNextStep, 0, 0, 0},
      {refalrts::icProfilerStopSentence, 0, 0, 0},
      {refalrts::icOnFailGoTo, +12, 0, 0},
      // ( e.idx ) 'x' e.idx
      // </0 & EscRegexp/4 (/7 e.Accum#1/5 )/8 'x'/9 e.Text#1/2 >/1
      {refalrts::icSave, 0, 15, 2},
      {refalrts::icCharLeftSave, 9, static_cast<unsigned char>('x'), 15},
      // closed e.Accum#1 as range 5
      // closed e.Text#1 as range 15(2)
      //DEBUG: e.Accum#1: 5
      //DEBUG: e.Text#1: 2
      {refalrts::icEmptyResult, 0, 0, 0},
      //TRASH: {REMOVED TILE} (/7 e.Accum#1/5 {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 Reuse: & EscRegexp-XCode/4 } Tile{ HalfReuse: (/8 HalfReuse: )/9 AsIs: e.Text#1/15(2) AsIs: >/1 ]] }
      {refalrts::icUpdateFunc, 0, 2, 4},
      {refalrts::icReinitBracket, 0, refalrts::ibOpenBracket, 8},
      {refalrts::icReinitBracket, 0, refalrts::ibCloseBracket, 9},
      {refalrts::icPushStack, 0, 0, 1},
      {refalrts::icPushStack, 0, 0, 0},
      {refalrts::icLinkBrackets, 8, 9, 0},
      {refalrts::icSetRes, 0, 0, 8},
      {refalrts::icTrash, 0, 0, 4},
      {refalrts::icNextStep, 0, 0, 0},
      {refalrts::icProfilerStopSentence, 0, 0, 0},
      {refalrts::icOnFailGoTo, +12, 0, 0},
      // ( e.idx ) 'X' e.idx
      // </0 & EscRegexp/4 (/7 e.Accum#1/5 )/8 'X'/9 e.Text#1/2 >/1
      {refalrts::icSave, 0, 15, 2},
      {refalrts::icCharLeftSave, 9, static_cast<unsigned char>('X'), 15},
      // closed e.Accum#1 as range 5
      // closed e.Text#1 as range 15(2)
      //DEBUG: e.Accum#1: 5
      //DEBUG: e.Text#1: 2
      {refalrts::icEmptyResult, 0, 0, 0},
      //TRASH: {REMOVED TILE} (/7 e.Accum#1/5 {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 Reuse: & EscRegexp-XCode/4 } Tile{ HalfReuse: (/8 HalfReuse: )/9 AsIs: e.Text#1/15(2) AsIs: >/1 ]] }
      {refalrts::icUpdateFunc, 0, 2, 4},
      {refalrts::icReinitBracket, 0, refalrts::ibOpenBracket, 8},
      {refalrts::icReinitBracket, 0, refalrts::ibCloseBracket, 9},
      {refalrts::icPushStack, 0, 0, 1},
      {refalrts::icPushStack, 0, 0, 0},
      {refalrts::icLinkBrackets, 8, 9, 0},
      {refalrts::icSetRes, 0, 0, 8},
      {refalrts::icTrash, 0, 0, 4},
      {refalrts::icNextStep, 0, 0, 0},
      {refalrts::icProfilerStopSentence, 0, 0, 0},
      {refalrts::icOnFailGoTo, +10, 0, 0},
      // ( e.idx ) '0' e.idx
      // </0 & EscRegexp/4 (/7 e.Accum#1/5 )/8 '0'/9 e.Text#1/2 >/1
      {refalrts::icSave, 0, 15, 2},
      {refalrts::icCharLeftSave, 9, static_cast<unsigned char>('0'), 15},
      // closed e.Accum#1 as range 5
      // closed e.Text#1 as range 15(2)
      //DEBUG: e.Accum#1: 5
      //DEBUG: e.Text#1: 2
      {refalrts::icEmptyResult, 0, 0, 0},
      //TRASH: {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 Reuse: & EscRegexp-OCode/4 AsIs: (/7 AsIs: e.Accum#1/5 HalfReuse: '0'/8 HalfReuse: )/9 AsIs: e.Text#1/15(2) AsIs: >/1 ]] }
      {refalrts::icUpdateFunc, 0, 1, 4},
      {refalrts::icReinitChar, 0, '0', 8},
      {refalrts::icReinitBracket, 0, refalrts::ibCloseBracket, 9},
      {refalrts::icPushStack, 0, 0, 1},
      {refalrts::icPushStack, 0, 0, 0},
      {refalrts::icLinkBrackets, 7, 9, 0},
      {refalrts::icNextStep, 0, 0, 0},
      {refalrts::icProfilerStopSentence, 0, 0, 0},
      {refalrts::icOnFailGoTo, +10, 0, 0},
      // ( e.idx ) '1' e.idx
      // </0 & EscRegexp/4 (/7 e.Accum#1/5 )/8 '1'/9 e.Text#1/2 >/1
      {refalrts::icSave, 0, 15, 2},
      {refalrts::icCharLeftSave, 9, static_cast<unsigned char>('1'), 15},
      // closed e.Accum#1 as range 5
      // closed e.Text#1 as range 15(2)
      //DEBUG: e.Accum#1: 5
      //DEBUG: e.Text#1: 2
      {refalrts::icEmptyResult, 0, 0, 0},
      //TRASH: {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 Reuse: & EscRegexp-OCode/4 AsIs: (/7 AsIs: e.Accum#1/5 HalfReuse: '1'/8 HalfReuse: )/9 AsIs: e.Text#1/15(2) AsIs: >/1 ]] }
      {refalrts::icUpdateFunc, 0, 1, 4},
      {refalrts::icReinitChar, 0, '1', 8},
      {refalrts::icReinitBracket, 0, refalrts::ibCloseBracket, 9},
      {refalrts::icPushStack, 0, 0, 1},
      {refalrts::icPushStack, 0, 0, 0},
      {refalrts::icLinkBrackets, 7, 9, 0},
      {refalrts::icNextStep, 0, 0, 0},
      {refalrts::icProfilerStopSentence, 0, 0, 0},
      {refalrts::icOnFailGoTo, +10, 0, 0},
      // ( e.idx ) '2' e.idx
      // </0 & EscRegexp/4 (/7 e.Accum#1/5 )/8 '2'/9 e.Text#1/2 >/1
      {refalrts::icSave, 0, 15, 2},
      {refalrts::icCharLeftSave, 9, static_cast<unsigned char>('2'), 15},
      // closed e.Accum#1 as range 5
      // closed e.Text#1 as range 15(2)
      //DEBUG: e.Accum#1: 5
      //DEBUG: e.Text#1: 2
      {refalrts::icEmptyResult, 0, 0, 0},
      //TRASH: {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 Reuse: & EscRegexp-OCode/4 AsIs: (/7 AsIs: e.Accum#1/5 HalfReuse: '2'/8 HalfReuse: )/9 AsIs: e.Text#1/15(2) AsIs: >/1 ]] }
      {refalrts::icUpdateFunc, 0, 1, 4},
      {refalrts::icReinitChar, 0, '2', 8},
      {refalrts::icReinitBracket, 0, refalrts::ibCloseBracket, 9},
      {refalrts::icPushStack, 0, 0, 1},
      {refalrts::icPushStack, 0, 0, 0},
      {refalrts::icLinkBrackets, 7, 9, 0},
      {refalrts::icNextStep, 0, 0, 0},
      {refalrts::icProfilerStopSentence, 0, 0, 0},
      {refalrts::icOnFailGoTo, +10, 0, 0},
      // ( e.idx ) '3' e.idx
      // </0 & EscRegexp/4 (/7 e.Accum#1/5 )/8 '3'/9 e.Text#1/2 >/1
      {refalrts::icSave, 0, 15, 2},
      {refalrts::icCharLeftSave, 9, static_cast<unsigned char>('3'), 15},
      // closed e.Accum#1 as range 5
      // closed e.Text#1 as range 15(2)
      //DEBUG: e.Accum#1: 5
      //DEBUG: e.Text#1: 2
      {refalrts::icEmptyResult, 0, 0, 0},
      //TRASH: {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 Reuse: & EscRegexp-OCode/4 AsIs: (/7 AsIs: e.Accum#1/5 HalfReuse: '3'/8 HalfReuse: )/9 AsIs: e.Text#1/15(2) AsIs: >/1 ]] }
      {refalrts::icUpdateFunc, 0, 1, 4},
      {refalrts::icReinitChar, 0, '3', 8},
      {refalrts::icReinitBracket, 0, refalrts::ibCloseBracket, 9},
      {refalrts::icPushStack, 0, 0, 1},
      {refalrts::icPushStack, 0, 0, 0},
      {refalrts::icLinkBrackets, 7, 9, 0},
      {refalrts::icNextStep, 0, 0, 0},
      {refalrts::icProfilerStopSentence, 0, 0, 0},
      {refalrts::icOnFailGoTo, +10, 0, 0},
      // ( e.idx ) '4' e.idx
      // </0 & EscRegexp/4 (/7 e.Accum#1/5 )/8 '4'/9 e.Text#1/2 >/1
      {refalrts::icSave, 0, 15, 2},
      {refalrts::icCharLeftSave, 9, static_cast<unsigned char>('4'), 15},
      // closed e.Accum#1 as range 5
      // closed e.Text#1 as range 15(2)
      //DEBUG: e.Accum#1: 5
      //DEBUG: e.Text#1: 2
      {refalrts::icEmptyResult, 0, 0, 0},
      //TRASH: {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 Reuse: & EscRegexp-OCode/4 AsIs: (/7 AsIs: e.Accum#1/5 HalfReuse: '4'/8 HalfReuse: )/9 AsIs: e.Text#1/15(2) AsIs: >/1 ]] }
      {refalrts::icUpdateFunc, 0, 1, 4},
      {refalrts::icReinitChar, 0, '4', 8},
      {refalrts::icReinitBracket, 0, refalrts::ibCloseBracket, 9},
      {refalrts::icPushStack, 0, 0, 1},
      {refalrts::icPushStack, 0, 0, 0},
      {refalrts::icLinkBrackets, 7, 9, 0},
      {refalrts::icNextStep, 0, 0, 0},
      {refalrts::icProfilerStopSentence, 0, 0, 0},
      {refalrts::icOnFailGoTo, +10, 0, 0},
      // ( e.idx ) '5' e.idx
      // </0 & EscRegexp/4 (/7 e.Accum#1/5 )/8 '5'/9 e.Text#1/2 >/1
      {refalrts::icSave, 0, 15, 2},
      {refalrts::icCharLeftSave, 9, static_cast<unsigned char>('5'), 15},
      // closed e.Accum#1 as range 5
      // closed e.Text#1 as range 15(2)
      //DEBUG: e.Accum#1: 5
      //DEBUG: e.Text#1: 2
      {refalrts::icEmptyResult, 0, 0, 0},
      //TRASH: {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 Reuse: & EscRegexp-OCode/4 AsIs: (/7 AsIs: e.Accum#1/5 HalfReuse: '5'/8 HalfReuse: )/9 AsIs: e.Text#1/15(2) AsIs: >/1 ]] }
      {refalrts::icUpdateFunc, 0, 1, 4},
      {refalrts::icReinitChar, 0, '5', 8},
      {refalrts::icReinitBracket, 0, refalrts::ibCloseBracket, 9},
      {refalrts::icPushStack, 0, 0, 1},
      {refalrts::icPushStack, 0, 0, 0},
      {refalrts::icLinkBrackets, 7, 9, 0},
      {refalrts::icNextStep, 0, 0, 0},
      {refalrts::icProfilerStopSentence, 0, 0, 0},
      {refalrts::icOnFailGoTo, +10, 0, 0},
      // ( e.idx ) '6' e.idx
      // </0 & EscRegexp/4 (/7 e.Accum#1/5 )/8 '6'/9 e.Text#1/2 >/1
      {refalrts::icSave, 0, 15, 2},
      {refalrts::icCharLeftSave, 9, static_cast<unsigned char>('6'), 15},
      // closed e.Accum#1 as range 5
      // closed e.Text#1 as range 15(2)
      //DEBUG: e.Accum#1: 5
      //DEBUG: e.Text#1: 2
      {refalrts::icEmptyResult, 0, 0, 0},
      //TRASH: {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 Reuse: & EscRegexp-OCode/4 AsIs: (/7 AsIs: e.Accum#1/5 HalfReuse: '6'/8 HalfReuse: )/9 AsIs: e.Text#1/15(2) AsIs: >/1 ]] }
      {refalrts::icUpdateFunc, 0, 1, 4},
      {refalrts::icReinitChar, 0, '6', 8},
      {refalrts::icReinitBracket, 0, refalrts::ibCloseBracket, 9},
      {refalrts::icPushStack, 0, 0, 1},
      {refalrts::icPushStack, 0, 0, 0},
      {refalrts::icLinkBrackets, 7, 9, 0},
      {refalrts::icNextStep, 0, 0, 0},
      {refalrts::icProfilerStopSentence, 0, 0, 0},
      {refalrts::icOnFailGoTo, +10, 0, 0},
      // ( e.idx ) '7' e.idx
      // </0 & EscRegexp/4 (/7 e.Accum#1/5 )/8 '7'/9 e.Text#1/2 >/1
      {refalrts::icSave, 0, 15, 2},
      {refalrts::icCharLeftSave, 9, static_cast<unsigned char>('7'), 15},
      // closed e.Accum#1 as range 5
      // closed e.Text#1 as range 15(2)
      //DEBUG: e.Accum#1: 5
      //DEBUG: e.Text#1: 2
      {refalrts::icEmptyResult, 0, 0, 0},
      //TRASH: {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 Reuse: & EscRegexp-OCode/4 AsIs: (/7 AsIs: e.Accum#1/5 HalfReuse: '7'/8 HalfReuse: )/9 AsIs: e.Text#1/15(2) AsIs: >/1 ]] }
      {refalrts::icUpdateFunc, 0, 1, 4},
      {refalrts::icReinitChar, 0, '7', 8},
      {refalrts::icReinitBracket, 0, refalrts::ibCloseBracket, 9},
      {refalrts::icPushStack, 0, 0, 1},
      {refalrts::icPushStack, 0, 0, 0},
      {refalrts::icLinkBrackets, 7, 9, 0},
      {refalrts::icNextStep, 0, 0, 0},
      {refalrts::icProfilerStopSentence, 0, 0, 0},
      {refalrts::icOnFailGoTo, +21, 0, 0},
      // ( e.idx ) '.' e.idx
      // </0 & EscRegexp/4 (/7 e.Accum#1/5 )/8 '.'/9 e.Text#1/2 >/1
      {refalrts::icSave, 0, 15, 2},
      {refalrts::icCharLeftSave, 9, static_cast<unsigned char>('.'), 15},
      // closed e.Accum#1 as range 5
      // closed e.Text#1 as range 15(2)
      //DEBUG: e.Accum#1: 5
      //DEBUG: e.Text#1: 2
      {refalrts::icEmptyResult, 0, 0, 0},
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ HalfReuse: (/0 HalfReuse: # TChar/4 } Tile{ AsIs: e.Accum#1/5 } '.'/10 Tile{ HalfReuse: )/7 } </11 & ReadRegexp/12 Tile{ HalfReuse: (/8 HalfReuse: )/9 AsIs: e.Text#1/15(2) AsIs: >/1 ]] }
      {refalrts::icAllocChar, 0, '.', 10},
      {refalrts::icAllocBracket, 0, refalrts::ibOpenCall, 11},
      {refalrts::icAllocFunc, 0, 0, 12},
      {refalrts::icReinitBracket, 0, refalrts::ibOpenBracket, 0},
      {refalrts::icReinitIdent, 0, 1, 4},
      {refalrts::icReinitBracket, 0, refalrts::ibCloseBracket, 7},
      {refalrts::icReinitBracket, 0, refalrts::ibOpenBracket, 8},
      {refalrts::icReinitBracket, 0, refalrts::ibCloseBracket, 9},
      {refalrts::icPushStack, 0, 0, 1},
      {refalrts::icPushStack, 0, 0, 11},
      {refalrts::icLinkBrackets, 8, 9, 0},
      {refalrts::icLinkBrackets, 0, 7, 0},
      {refalrts::icSetRes, 0, 0, 8},
      {refalrts::icSpliceTile, 11, 12, 0},
      {refalrts::icSpliceTile, 7, 7, 0},
      {refalrts::icSpliceTile, 10, 10, 0},
      {refalrts::icSpliceEVar, 0, 0, 5},
      {refalrts::icNextStep, 0, 0, 0},
      {refalrts::icProfilerStopSentence, 0, 0, 0},
      {refalrts::icOnFailGoTo, +21, 0, 0},
      // ( e.idx ) '(' e.idx
      // </0 & EscRegexp/4 (/7 e.Accum#1/5 )/8 '('/9 e.Text#1/2 >/1
      {refalrts::icSave, 0, 15, 2},
      {refalrts::icCharLeftSave, 9, static_cast<unsigned char>('('), 15},
      // closed e.Accum#1 as range 5
      // closed e.Text#1 as range 15(2)
      //DEBUG: e.Accum#1: 5
      //DEBUG: e.Text#1: 2
      {refalrts::icEmptyResult, 0, 0, 0},
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ HalfReuse: (/0 HalfReuse: # TChar/4 } Tile{ AsIs: e.Accum#1/5 } '('/10 Tile{ HalfReuse: )/7 } </11 & ReadRegexp/12 Tile{ HalfReuse: (/8 HalfReuse: )/9 AsIs: e.Text#1/15(2) AsIs: >/1 ]] }
      {refalrts::icAllocChar, 0, '(', 10},
      {refalrts::icAllocBracket, 0, refalrts::ibOpenCall, 11},
      {refalrts::icAllocFunc, 0, 0, 12},
      {refalrts::icReinitBracket, 0, refalrts::ibOpenBracket, 0},
      {refalrts::icReinitIdent, 0, 1, 4},
      {refalrts::icReinitBracket, 0, refalrts::ibCloseBracket, 7},
      {refalrts::icReinitBracket, 0, refalrts::ibOpenBracket, 8},
      {refalrts::icReinitBracket, 0, refalrts::ibCloseBracket, 9},
      {refalrts::icPushStack, 0, 0, 1},
      {refalrts::icPushStack, 0, 0, 11},
      {refalrts::icLinkBrackets, 8, 9, 0},
      {refalrts::icLinkBrackets, 0, 7, 0},
      {refalrts::icSetRes, 0, 0, 8},
      {refalrts::icSpliceTile, 11, 12, 0},
      {refalrts::icSpliceTile, 7, 7, 0},
      {refalrts::icSpliceTile, 10, 10, 0},
      {refalrts::icSpliceEVar, 0, 0, 5},
      {refalrts::icNextStep, 0, 0, 0},
      {refalrts::icProfilerStopSentence, 0, 0, 0},
      {refalrts::icOnFailGoTo, +21, 0, 0},
      // ( e.idx ) ')' e.idx
      // </0 & EscRegexp/4 (/7 e.Accum#1/5 )/8 ')'/9 e.Text#1/2 >/1
      {refalrts::icSave, 0, 15, 2},
      {refalrts::icCharLeftSave, 9, static_cast<unsigned char>(')'), 15},
      // closed e.Accum#1 as range 5
      // closed e.Text#1 as range 15(2)
      //DEBUG: e.Accum#1: 5
      //DEBUG: e.Text#1: 2
      {refalrts::icEmptyResult, 0, 0, 0},
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ HalfReuse: (/0 HalfReuse: # TChar/4 } Tile{ AsIs: e.Accum#1/5 } ')'/10 Tile{ HalfReuse: )/7 } </11 & ReadRegexp/12 Tile{ HalfReuse: (/8 HalfReuse: )/9 AsIs: e.Text#1/15(2) AsIs: >/1 ]] }
      {refalrts::icAllocChar, 0, ')', 10},
      {refalrts::icAllocBracket, 0, refalrts::ibOpenCall, 11},
      {refalrts::icAllocFunc, 0, 0, 12},
      {refalrts::icReinitBracket, 0, refalrts::ibOpenBracket, 0},
      {refalrts::icReinitIdent, 0, 1, 4},
      {refalrts::icReinitBracket, 0, refalrts::ibCloseBracket, 7},
      {refalrts::icReinitBracket, 0, refalrts::ibOpenBracket, 8},
      {refalrts::icReinitBracket, 0, refalrts::ibCloseBracket, 9},
      {refalrts::icPushStack, 0, 0, 1},
      {refalrts::icPushStack, 0, 0, 11},
      {refalrts::icLinkBrackets, 8, 9, 0},
      {refalrts::icLinkBrackets, 0, 7, 0},
      {refalrts::icSetRes, 0, 0, 8},
      {refalrts::icSpliceTile, 11, 12, 0},
      {refalrts::icSpliceTile, 7, 7, 0},
      {refalrts::icSpliceTile, 10, 10, 0},
      {refalrts::icSpliceEVar, 0, 0, 5},
      {refalrts::icNextStep, 0, 0, 0},
      {refalrts::icProfilerStopSentence, 0, 0, 0},
      {refalrts::icOnFailGoTo, +21, 0, 0},
      // ( e.idx ) '|' e.idx
      // </0 & EscRegexp/4 (/7 e.Accum#1/5 )/8 '|'/9 e.Text#1/2 >/1
      {refalrts::icSave, 0, 15, 2},
      {refalrts::icCharLeftSave, 9, static_cast<unsigned char>('|'), 15},
      // closed e.Accum#1 as range 5
      // closed e.Text#1 as range 15(2)
      //DEBUG: e.Accum#1: 5
      //DEBUG: e.Text#1: 2
      {refalrts::icEmptyResult, 0, 0, 0},
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ HalfReuse: (/0 HalfReuse: # TChar/4 } Tile{ AsIs: e.Accum#1/5 } '|'/10 Tile{ HalfReuse: )/7 } </11 & ReadRegexp/12 Tile{ HalfReuse: (/8 HalfReuse: )/9 AsIs: e.Text#1/15(2) AsIs: >/1 ]] }
      {refalrts::icAllocChar, 0, '|', 10},
      {refalrts::icAllocBracket, 0, refalrts::ibOpenCall, 11},
      {refalrts::icAllocFunc, 0, 0, 12},
      {refalrts::icReinitBracket, 0, refalrts::ibOpenBracket, 0},
      {refalrts::icReinitIdent, 0, 1, 4},
      {refalrts::icReinitBracket, 0, refalrts::ibCloseBracket, 7},
      {refalrts::icReinitBracket, 0, refalrts::ibOpenBracket, 8},
      {refalrts::icReinitBracket, 0, refalrts::ibCloseBracket, 9},
      {refalrts::icPushStack, 0, 0, 1},
      {refalrts::icPushStack, 0, 0, 11},
      {refalrts::icLinkBrackets, 8, 9, 0},
      {refalrts::icLinkBrackets, 0, 7, 0},
      {refalrts::icSetRes, 0, 0, 8},
      {refalrts::icSpliceTile, 11, 12, 0},
      {refalrts::icSpliceTile, 7, 7, 0},
      {refalrts::icSpliceTile, 10, 10, 0},
      {refalrts::icSpliceEVar, 0, 0, 5},
      {refalrts::icNextStep, 0, 0, 0},
      {refalrts::icProfilerStopSentence, 0, 0, 0},
      {refalrts::icOnFailGoTo, +21, 0, 0},
      // ( e.idx ) '^' e.idx
      // </0 & EscRegexp/4 (/7 e.Accum#1/5 )/8 '^'/9 e.Text#1/2 >/1
      {refalrts::icSave, 0, 15, 2},
      {refalrts::icCharLeftSave, 9, static_cast<unsigned char>('^'), 15},
      // closed e.Accum#1 as range 5
      // closed e.Text#1 as range 15(2)
      //DEBUG: e.Accum#1: 5
      //DEBUG: e.Text#1: 2
      {refalrts::icEmptyResult, 0, 0, 0},
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ HalfReuse: (/0 HalfReuse: # TChar/4 } Tile{ AsIs: e.Accum#1/5 } '^'/10 Tile{ HalfReuse: )/7 } </11 & ReadRegexp/12 Tile{ HalfReuse: (/8 HalfReuse: )/9 AsIs: e.Text#1/15(2) AsIs: >/1 ]] }
      {refalrts::icAllocChar, 0, '^', 10},
      {refalrts::icAllocBracket, 0, refalrts::ibOpenCall, 11},
      {refalrts::icAllocFunc, 0, 0, 12},
      {refalrts::icReinitBracket, 0, refalrts::ibOpenBracket, 0},
      {refalrts::icReinitIdent, 0, 1, 4},
      {refalrts::icReinitBracket, 0, refalrts::ibCloseBracket, 7},
      {refalrts::icReinitBracket, 0, refalrts::ibOpenBracket, 8},
      {refalrts::icReinitBracket, 0, refalrts::ibCloseBracket, 9},
      {refalrts::icPushStack, 0, 0, 1},
      {refalrts::icPushStack, 0, 0, 11},
      {refalrts::icLinkBrackets, 8, 9, 0},
      {refalrts::icLinkBrackets, 0, 7, 0},
      {refalrts::icSetRes, 0, 0, 8},
      {refalrts::icSpliceTile, 11, 12, 0},
      {refalrts::icSpliceTile, 7, 7, 0},
      {refalrts::icSpliceTile, 10, 10, 0},
      {refalrts::icSpliceEVar, 0, 0, 5},
      {refalrts::icNextStep, 0, 0, 0},
      {refalrts::icProfilerStopSentence, 0, 0, 0},
      {refalrts::icOnFailGoTo, +21, 0, 0},
      // ( e.idx ) '$' e.idx
      // </0 & EscRegexp/4 (/7 e.Accum#1/5 )/8 '$'/9 e.Text#1/2 >/1
      {refalrts::icSave, 0, 15, 2},
      {refalrts::icCharLeftSave, 9, static_cast<unsigned char>('$'), 15},
      // closed e.Accum#1 as range 5
      // closed e.Text#1 as range 15(2)
      //DEBUG: e.Accum#1: 5
      //DEBUG: e.Text#1: 2
      {refalrts::icEmptyResult, 0, 0, 0},
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ HalfReuse: (/0 HalfReuse: # TChar/4 } Tile{ AsIs: e.Accum#1/5 } '$'/10 Tile{ HalfReuse: )/7 } </11 & ReadRegexp/12 Tile{ HalfReuse: (/8 HalfReuse: )/9 AsIs: e.Text#1/15(2) AsIs: >/1 ]] }
      {refalrts::icAllocChar, 0, '$', 10},
      {refalrts::icAllocBracket, 0, refalrts::ibOpenCall, 11},
      {refalrts::icAllocFunc, 0, 0, 12},
      {refalrts::icReinitBracket, 0, refalrts::ibOpenBracket, 0},
      {refalrts::icReinitIdent, 0, 1, 4},
      {refalrts::icReinitBracket, 0, refalrts::ibCloseBracket, 7},
      {refalrts::icReinitBracket, 0, refalrts::ibOpenBracket, 8},
      {refalrts::icReinitBracket, 0, refalrts::ibCloseBracket, 9},
      {refalrts::icPushStack, 0, 0, 1},
      {refalrts::icPushStack, 0, 0, 11},
      {refalrts::icLinkBrackets, 8, 9, 0},
      {refalrts::icLinkBrackets, 0, 7, 0},
      {refalrts::icSetRes, 0, 0, 8},
      {refalrts::icSpliceTile, 11, 12, 0},
      {refalrts::icSpliceTile, 7, 7, 0},
      {refalrts::icSpliceTile, 10, 10, 0},
      {refalrts::icSpliceEVar, 0, 0, 5},
      {refalrts::icNextStep, 0, 0, 0},
      {refalrts::icProfilerStopSentence, 0, 0, 0},
      {refalrts::icOnFailGoTo, +20, 0, 0},
      // ( e.idx ) s.idx e.idx
      // </0 & EscRegexp/4 (/7 e.Accum#1/5 )/8 s.Any#1/9 e.Text#1/2 >/1
      // closed e.Accum#1 as range 5
      {refalrts::icSave, 0, 15, 2},
      {refalrts::icsVarLeft, 0, 9, 15},
      // closed e.Text#1 as range 15(2)
      //DEBUG: e.Accum#1: 5
      //DEBUG: s.Any#1: 9
      //DEBUG: e.Text#1: 2
      {refalrts::icEmptyResult, 0, 0, 0},
      //TRASH: {REMOVED TILE} {REMOVED TILE} e.Accum#1/5 {REMOVED TILE} s.Any#1/9 {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ } (/10 # TokenError/11"Bad escaped symbol"/12 Tile{ AsIs: )/8 } Tile{ AsIs: </0 Reuse: & ReadRegexp/4 AsIs: (/7 } )/14 Tile{ AsIs: e.Text#1/15(2) } Tile{ AsIs: >/1 ]] }
      {refalrts::icAllocBracket, 0, refalrts::ibOpenBracket, 10},
      {refalrts::icAllocIdent, 0, 0, 11},
      {refalrts::icAllocString, 0, 1, 12},
      {refalrts::icAllocBracket, 0, refalrts::ibCloseBracket, 14},
      {refalrts::icUpdateFunc, 0, 0, 4},
      {refalrts::icPushStack, 0, 0, 1},
      {refalrts::icPushStack, 0, 0, 0},
      {refalrts::icLinkBrackets, 7, 14, 0},
      {refalrts::icLinkBrackets, 10, 8, 0},
      {refalrts::icSetRes, 0, 0, 1},
      {refalrts::icSpliceEVar, 0, 0, 15},
      {refalrts::icSpliceTile, 14, 14, 0},
      {refalrts::icSpliceTile, 0, 7, 0},
      {refalrts::icSpliceTile, 8, 8, 0},
      {refalrts::icSpliceTile, 10, 13, 0},
      {refalrts::icTrashLeftEdge, 0, 0, 0},
      {refalrts::icNextStep, 0, 0, 0},
      {refalrts::icProfilerStopSentence, 0, 0, 0},
      // ( e.idx )
      // </0 & EscRegexp/4 (/7 e.Accum#1/5 )/8 >/1
      {refalrts::icEmpty, 0, 0, 2},
      // closed e.Accum#1 as range 5
      //DEBUG: e.Accum#1: 5
      {refalrts::icEmptyResult, 0, 0, 0},
      //TRASH: {REMOVED TILE} e.Accum#1/5 {REMOVED TILE}
      //RESULT: Tile{ [[ HalfReuse: (/0 HalfReuse: # TokenError/4 HalfReuse: 'U'/7 }"nexpected EOF in Regex"/9 Tile{ HalfReuse: 'p'/8 HalfReuse: )/1 ]] }
      {refalrts::icAllocString, 0, 0, 9},
      {refalrts::icReinitBracket, 0, refalrts::ibOpenBracket, 0},
      {refalrts::icReinitIdent, 0, 0, 4},
      {refalrts::icReinitChar, 0, 'U', 7},
      {refalrts::icReinitChar, 0, 'p', 8},
      {refalrts::icReinitBracket, 0, refalrts::ibCloseBracket, 1},
      {refalrts::icLinkBrackets, 0, 1, 0},
      {refalrts::icSetRes, 0, 0, 8},
      {refalrts::icSpliceTile, 9, 10, 0},
      {refalrts::icTrash, 0, 0, 7},
      {refalrts::icNextStep, 0, 0, 0},
      {refalrts::icEnd, 0, 0, 0}
    };
  } // namespace scope_EscRegexp

} // unnamed namespace

namespace /* unnamed */ {
refalrts::RASLFunction descr_EscRegexp(
  "EscRegexp",
  scope_EscRegexp::raa,
  scope_EscRegexp::functions,
  scope_EscRegexp::idents,
  scope_EscRegexp::numbers,
  scope_EscRegexp::strings,
  scope_EscRegexp::filename
);
refalrts::RefalFunction& EscRegexp = descr_EscRegexp;

} // unnamed namespace

#else
static refalrts::FnResult func_EscRegexp(refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  refalrts::this_is_generated_function();
  // issue here memory for vars with 17 elems
  refalrts::Iter context[17];
  refalrts::zeros( context, 17 );
  //FAST GEN: e.$
  //GLOBAL GEN: ( e.$ ) e.$
  // </0 & EscRegexp/4 (/7 e.idxB#0/5 )/8 e.idxT#0/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  context[5] = 0;
  context[6] = 0;
  context[7] = refalrts::brackets_left( context[5], context[6], context[2], context[3] );
  if( ! context[7] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[7], context[8]);
  // closed e.idxB#0 as range 5
  // closed e.idxT#0 as range 2
  do {
    // ( e.idx ) '\\' e.idx
    // </0 & EscRegexp/4 (/7 e.Accum#1/5 )/8 '\\'/9 e.Text#1/2 >/1
    context[15] = context[2];
    context[16] = context[3];
    context[9] = refalrts::char_left( '\\', context[15], context[16] );
    if( ! context[9] )
      continue;
    // closed e.Accum#1 as range 5
    // closed e.Text#1 as range 15(2)
    //DEBUG: e.Accum#1: 5
    //DEBUG: e.Text#1: 2

    refalrts::reset_allocator();
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ HalfReuse: (/0 HalfReuse: # TGenericEscChar/4 } Tile{ AsIs: e.Accum#1/5 } '\\'/10 Tile{ HalfReuse: )/7 } </11 & ReadRegexp/12 Tile{ HalfReuse: (/8 HalfReuse: )/9 AsIs: e.Text#1/15(2) AsIs: >/1 ]] }
    if( ! refalrts::alloc_char( context[10], '\\' ) )
      return refalrts::cNoMemory;
    if( ! refalrts::alloc_open_call( context[11] ) )
      return refalrts::cNoMemory;
    if( ! refalrts::alloc_name( context[12], & ReadRegexp ) )
      return refalrts::cNoMemory;
    refalrts::reinit_open_bracket( context[0] );
    refalrts::reinit_ident( context[4], & ident_TGenericEscChar<int>::name );
    refalrts::reinit_close_bracket( context[7] );
    refalrts::reinit_open_bracket( context[8] );
    refalrts::reinit_close_bracket( context[9] );
    refalrts::push_stack( context[1] );
    refalrts::push_stack( context[11] );
    refalrts::link_brackets( context[8], context[9] );
    refalrts::link_brackets( context[0], context[7] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[8];
    res = refalrts::splice_evar( res, context[11], context[12] );
    res = refalrts::splice_evar( res, context[7], context[7] );
    res = refalrts::splice_evar( res, context[10], context[10] );
    res = refalrts::splice_evar( res, context[5], context[6] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence();

  do {
    // ( e.idx ) 'n' e.idx
    // </0 & EscRegexp/4 (/7 e.Accum#1/5 )/8 'n'/9 e.Text#1/2 >/1
    context[15] = context[2];
    context[16] = context[3];
    context[9] = refalrts::char_left( 'n', context[15], context[16] );
    if( ! context[9] )
      continue;
    // closed e.Accum#1 as range 5
    // closed e.Text#1 as range 15(2)
    //DEBUG: e.Accum#1: 5
    //DEBUG: e.Text#1: 2

    refalrts::reset_allocator();
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ HalfReuse: (/0 HalfReuse: # TGenericEscChar/4 } Tile{ AsIs: e.Accum#1/5 } 'n'/10 Tile{ HalfReuse: )/7 } </11 & ReadRegexp/12 Tile{ HalfReuse: (/8 HalfReuse: )/9 AsIs: e.Text#1/15(2) AsIs: >/1 ]] }
    if( ! refalrts::alloc_char( context[10], 'n' ) )
      return refalrts::cNoMemory;
    if( ! refalrts::alloc_open_call( context[11] ) )
      return refalrts::cNoMemory;
    if( ! refalrts::alloc_name( context[12], & ReadRegexp ) )
      return refalrts::cNoMemory;
    refalrts::reinit_open_bracket( context[0] );
    refalrts::reinit_ident( context[4], & ident_TGenericEscChar<int>::name );
    refalrts::reinit_close_bracket( context[7] );
    refalrts::reinit_open_bracket( context[8] );
    refalrts::reinit_close_bracket( context[9] );
    refalrts::push_stack( context[1] );
    refalrts::push_stack( context[11] );
    refalrts::link_brackets( context[8], context[9] );
    refalrts::link_brackets( context[0], context[7] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[8];
    res = refalrts::splice_evar( res, context[11], context[12] );
    res = refalrts::splice_evar( res, context[7], context[7] );
    res = refalrts::splice_evar( res, context[10], context[10] );
    res = refalrts::splice_evar( res, context[5], context[6] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence();

  do {
    // ( e.idx ) 't' e.idx
    // </0 & EscRegexp/4 (/7 e.Accum#1/5 )/8 't'/9 e.Text#1/2 >/1
    context[15] = context[2];
    context[16] = context[3];
    context[9] = refalrts::char_left( 't', context[15], context[16] );
    if( ! context[9] )
      continue;
    // closed e.Accum#1 as range 5
    // closed e.Text#1 as range 15(2)
    //DEBUG: e.Accum#1: 5
    //DEBUG: e.Text#1: 2

    refalrts::reset_allocator();
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ HalfReuse: (/0 HalfReuse: # TGenericEscChar/4 } Tile{ AsIs: e.Accum#1/5 } 't'/10 Tile{ HalfReuse: )/7 } </11 & ReadRegexp/12 Tile{ HalfReuse: (/8 HalfReuse: )/9 AsIs: e.Text#1/15(2) AsIs: >/1 ]] }
    if( ! refalrts::alloc_char( context[10], 't' ) )
      return refalrts::cNoMemory;
    if( ! refalrts::alloc_open_call( context[11] ) )
      return refalrts::cNoMemory;
    if( ! refalrts::alloc_name( context[12], & ReadRegexp ) )
      return refalrts::cNoMemory;
    refalrts::reinit_open_bracket( context[0] );
    refalrts::reinit_ident( context[4], & ident_TGenericEscChar<int>::name );
    refalrts::reinit_close_bracket( context[7] );
    refalrts::reinit_open_bracket( context[8] );
    refalrts::reinit_close_bracket( context[9] );
    refalrts::push_stack( context[1] );
    refalrts::push_stack( context[11] );
    refalrts::link_brackets( context[8], context[9] );
    refalrts::link_brackets( context[0], context[7] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[8];
    res = refalrts::splice_evar( res, context[11], context[12] );
    res = refalrts::splice_evar( res, context[7], context[7] );
    res = refalrts::splice_evar( res, context[10], context[10] );
    res = refalrts::splice_evar( res, context[5], context[6] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence();

  do {
    // ( e.idx ) 'r' e.idx
    // </0 & EscRegexp/4 (/7 e.Accum#1/5 )/8 'r'/9 e.Text#1/2 >/1
    context[15] = context[2];
    context[16] = context[3];
    context[9] = refalrts::char_left( 'r', context[15], context[16] );
    if( ! context[9] )
      continue;
    // closed e.Accum#1 as range 5
    // closed e.Text#1 as range 15(2)
    //DEBUG: e.Accum#1: 5
    //DEBUG: e.Text#1: 2

    refalrts::reset_allocator();
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ HalfReuse: (/0 HalfReuse: # TGenericEscChar/4 } Tile{ AsIs: e.Accum#1/5 } 'r'/10 Tile{ HalfReuse: )/7 } </11 & ReadRegexp/12 Tile{ HalfReuse: (/8 HalfReuse: )/9 AsIs: e.Text#1/15(2) AsIs: >/1 ]] }
    if( ! refalrts::alloc_char( context[10], 'r' ) )
      return refalrts::cNoMemory;
    if( ! refalrts::alloc_open_call( context[11] ) )
      return refalrts::cNoMemory;
    if( ! refalrts::alloc_name( context[12], & ReadRegexp ) )
      return refalrts::cNoMemory;
    refalrts::reinit_open_bracket( context[0] );
    refalrts::reinit_ident( context[4], & ident_TGenericEscChar<int>::name );
    refalrts::reinit_close_bracket( context[7] );
    refalrts::reinit_open_bracket( context[8] );
    refalrts::reinit_close_bracket( context[9] );
    refalrts::push_stack( context[1] );
    refalrts::push_stack( context[11] );
    refalrts::link_brackets( context[8], context[9] );
    refalrts::link_brackets( context[0], context[7] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[8];
    res = refalrts::splice_evar( res, context[11], context[12] );
    res = refalrts::splice_evar( res, context[7], context[7] );
    res = refalrts::splice_evar( res, context[10], context[10] );
    res = refalrts::splice_evar( res, context[5], context[6] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence();

  do {
    // ( e.idx ) '/' e.idx
    // </0 & EscRegexp/4 (/7 e.Accum#1/5 )/8 '/'/9 e.Text#1/2 >/1
    context[15] = context[2];
    context[16] = context[3];
    context[9] = refalrts::char_left( '/', context[15], context[16] );
    if( ! context[9] )
      continue;
    // closed e.Accum#1 as range 5
    // closed e.Text#1 as range 15(2)
    //DEBUG: e.Accum#1: 5
    //DEBUG: e.Text#1: 2

    refalrts::reset_allocator();
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ HalfReuse: (/0 HalfReuse: # TChar/4 } Tile{ AsIs: e.Accum#1/5 } '/'/10 Tile{ HalfReuse: )/7 } </11 & ReadRegexp/12 Tile{ HalfReuse: (/8 HalfReuse: )/9 AsIs: e.Text#1/15(2) AsIs: >/1 ]] }
    if( ! refalrts::alloc_char( context[10], '/' ) )
      return refalrts::cNoMemory;
    if( ! refalrts::alloc_open_call( context[11] ) )
      return refalrts::cNoMemory;
    if( ! refalrts::alloc_name( context[12], & ReadRegexp ) )
      return refalrts::cNoMemory;
    refalrts::reinit_open_bracket( context[0] );
    refalrts::reinit_ident( context[4], & ident_TChar<int>::name );
    refalrts::reinit_close_bracket( context[7] );
    refalrts::reinit_open_bracket( context[8] );
    refalrts::reinit_close_bracket( context[9] );
    refalrts::push_stack( context[1] );
    refalrts::push_stack( context[11] );
    refalrts::link_brackets( context[8], context[9] );
    refalrts::link_brackets( context[0], context[7] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[8];
    res = refalrts::splice_evar( res, context[11], context[12] );
    res = refalrts::splice_evar( res, context[7], context[7] );
    res = refalrts::splice_evar( res, context[10], context[10] );
    res = refalrts::splice_evar( res, context[5], context[6] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence();

  do {
    // ( e.idx ) 'x' e.idx
    // </0 & EscRegexp/4 (/7 e.Accum#1/5 )/8 'x'/9 e.Text#1/2 >/1
    context[15] = context[2];
    context[16] = context[3];
    context[9] = refalrts::char_left( 'x', context[15], context[16] );
    if( ! context[9] )
      continue;
    // closed e.Accum#1 as range 5
    // closed e.Text#1 as range 15(2)
    //DEBUG: e.Accum#1: 5
    //DEBUG: e.Text#1: 2

    refalrts::reset_allocator();
    //TRASH: {REMOVED TILE} (/7 e.Accum#1/5 {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 Reuse: & EscRegexp-XCode/4 } Tile{ HalfReuse: (/8 HalfReuse: )/9 AsIs: e.Text#1/15(2) AsIs: >/1 ]] }
    refalrts::update_name( context[4], & EscRegexp_XCode );
    refalrts::reinit_open_bracket( context[8] );
    refalrts::reinit_close_bracket( context[9] );
    refalrts::push_stack( context[1] );
    refalrts::push_stack( context[0] );
    refalrts::link_brackets( context[8], context[9] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[8];
    refalrts::use( res );
    refalrts::splice_to_freelist_open( context[4], res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence();

  do {
    // ( e.idx ) 'X' e.idx
    // </0 & EscRegexp/4 (/7 e.Accum#1/5 )/8 'X'/9 e.Text#1/2 >/1
    context[15] = context[2];
    context[16] = context[3];
    context[9] = refalrts::char_left( 'X', context[15], context[16] );
    if( ! context[9] )
      continue;
    // closed e.Accum#1 as range 5
    // closed e.Text#1 as range 15(2)
    //DEBUG: e.Accum#1: 5
    //DEBUG: e.Text#1: 2

    refalrts::reset_allocator();
    //TRASH: {REMOVED TILE} (/7 e.Accum#1/5 {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 Reuse: & EscRegexp-XCode/4 } Tile{ HalfReuse: (/8 HalfReuse: )/9 AsIs: e.Text#1/15(2) AsIs: >/1 ]] }
    refalrts::update_name( context[4], & EscRegexp_XCode );
    refalrts::reinit_open_bracket( context[8] );
    refalrts::reinit_close_bracket( context[9] );
    refalrts::push_stack( context[1] );
    refalrts::push_stack( context[0] );
    refalrts::link_brackets( context[8], context[9] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[8];
    refalrts::use( res );
    refalrts::splice_to_freelist_open( context[4], res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence();

  do {
    // ( e.idx ) '0' e.idx
    // </0 & EscRegexp/4 (/7 e.Accum#1/5 )/8 '0'/9 e.Text#1/2 >/1
    context[15] = context[2];
    context[16] = context[3];
    context[9] = refalrts::char_left( '0', context[15], context[16] );
    if( ! context[9] )
      continue;
    // closed e.Accum#1 as range 5
    // closed e.Text#1 as range 15(2)
    //DEBUG: e.Accum#1: 5
    //DEBUG: e.Text#1: 2

    refalrts::reset_allocator();
    //TRASH: {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 Reuse: & EscRegexp-OCode/4 AsIs: (/7 AsIs: e.Accum#1/5 HalfReuse: '0'/8 HalfReuse: )/9 AsIs: e.Text#1/15(2) AsIs: >/1 ]] }
    refalrts::update_name( context[4], & EscRegexp_OCode );
    refalrts::reinit_char( context[8], '0' );
    refalrts::reinit_close_bracket( context[9] );
    refalrts::push_stack( context[1] );
    refalrts::push_stack( context[0] );
    refalrts::link_brackets( context[7], context[9] );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence();

  do {
    // ( e.idx ) '1' e.idx
    // </0 & EscRegexp/4 (/7 e.Accum#1/5 )/8 '1'/9 e.Text#1/2 >/1
    context[15] = context[2];
    context[16] = context[3];
    context[9] = refalrts::char_left( '1', context[15], context[16] );
    if( ! context[9] )
      continue;
    // closed e.Accum#1 as range 5
    // closed e.Text#1 as range 15(2)
    //DEBUG: e.Accum#1: 5
    //DEBUG: e.Text#1: 2

    refalrts::reset_allocator();
    //TRASH: {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 Reuse: & EscRegexp-OCode/4 AsIs: (/7 AsIs: e.Accum#1/5 HalfReuse: '1'/8 HalfReuse: )/9 AsIs: e.Text#1/15(2) AsIs: >/1 ]] }
    refalrts::update_name( context[4], & EscRegexp_OCode );
    refalrts::reinit_char( context[8], '1' );
    refalrts::reinit_close_bracket( context[9] );
    refalrts::push_stack( context[1] );
    refalrts::push_stack( context[0] );
    refalrts::link_brackets( context[7], context[9] );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence();

  do {
    // ( e.idx ) '2' e.idx
    // </0 & EscRegexp/4 (/7 e.Accum#1/5 )/8 '2'/9 e.Text#1/2 >/1
    context[15] = context[2];
    context[16] = context[3];
    context[9] = refalrts::char_left( '2', context[15], context[16] );
    if( ! context[9] )
      continue;
    // closed e.Accum#1 as range 5
    // closed e.Text#1 as range 15(2)
    //DEBUG: e.Accum#1: 5
    //DEBUG: e.Text#1: 2

    refalrts::reset_allocator();
    //TRASH: {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 Reuse: & EscRegexp-OCode/4 AsIs: (/7 AsIs: e.Accum#1/5 HalfReuse: '2'/8 HalfReuse: )/9 AsIs: e.Text#1/15(2) AsIs: >/1 ]] }
    refalrts::update_name( context[4], & EscRegexp_OCode );
    refalrts::reinit_char( context[8], '2' );
    refalrts::reinit_close_bracket( context[9] );
    refalrts::push_stack( context[1] );
    refalrts::push_stack( context[0] );
    refalrts::link_brackets( context[7], context[9] );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence();

  do {
    // ( e.idx ) '3' e.idx
    // </0 & EscRegexp/4 (/7 e.Accum#1/5 )/8 '3'/9 e.Text#1/2 >/1
    context[15] = context[2];
    context[16] = context[3];
    context[9] = refalrts::char_left( '3', context[15], context[16] );
    if( ! context[9] )
      continue;
    // closed e.Accum#1 as range 5
    // closed e.Text#1 as range 15(2)
    //DEBUG: e.Accum#1: 5
    //DEBUG: e.Text#1: 2

    refalrts::reset_allocator();
    //TRASH: {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 Reuse: & EscRegexp-OCode/4 AsIs: (/7 AsIs: e.Accum#1/5 HalfReuse: '3'/8 HalfReuse: )/9 AsIs: e.Text#1/15(2) AsIs: >/1 ]] }
    refalrts::update_name( context[4], & EscRegexp_OCode );
    refalrts::reinit_char( context[8], '3' );
    refalrts::reinit_close_bracket( context[9] );
    refalrts::push_stack( context[1] );
    refalrts::push_stack( context[0] );
    refalrts::link_brackets( context[7], context[9] );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence();

  do {
    // ( e.idx ) '4' e.idx
    // </0 & EscRegexp/4 (/7 e.Accum#1/5 )/8 '4'/9 e.Text#1/2 >/1
    context[15] = context[2];
    context[16] = context[3];
    context[9] = refalrts::char_left( '4', context[15], context[16] );
    if( ! context[9] )
      continue;
    // closed e.Accum#1 as range 5
    // closed e.Text#1 as range 15(2)
    //DEBUG: e.Accum#1: 5
    //DEBUG: e.Text#1: 2

    refalrts::reset_allocator();
    //TRASH: {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 Reuse: & EscRegexp-OCode/4 AsIs: (/7 AsIs: e.Accum#1/5 HalfReuse: '4'/8 HalfReuse: )/9 AsIs: e.Text#1/15(2) AsIs: >/1 ]] }
    refalrts::update_name( context[4], & EscRegexp_OCode );
    refalrts::reinit_char( context[8], '4' );
    refalrts::reinit_close_bracket( context[9] );
    refalrts::push_stack( context[1] );
    refalrts::push_stack( context[0] );
    refalrts::link_brackets( context[7], context[9] );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence();

  do {
    // ( e.idx ) '5' e.idx
    // </0 & EscRegexp/4 (/7 e.Accum#1/5 )/8 '5'/9 e.Text#1/2 >/1
    context[15] = context[2];
    context[16] = context[3];
    context[9] = refalrts::char_left( '5', context[15], context[16] );
    if( ! context[9] )
      continue;
    // closed e.Accum#1 as range 5
    // closed e.Text#1 as range 15(2)
    //DEBUG: e.Accum#1: 5
    //DEBUG: e.Text#1: 2

    refalrts::reset_allocator();
    //TRASH: {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 Reuse: & EscRegexp-OCode/4 AsIs: (/7 AsIs: e.Accum#1/5 HalfReuse: '5'/8 HalfReuse: )/9 AsIs: e.Text#1/15(2) AsIs: >/1 ]] }
    refalrts::update_name( context[4], & EscRegexp_OCode );
    refalrts::reinit_char( context[8], '5' );
    refalrts::reinit_close_bracket( context[9] );
    refalrts::push_stack( context[1] );
    refalrts::push_stack( context[0] );
    refalrts::link_brackets( context[7], context[9] );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence();

  do {
    // ( e.idx ) '6' e.idx
    // </0 & EscRegexp/4 (/7 e.Accum#1/5 )/8 '6'/9 e.Text#1/2 >/1
    context[15] = context[2];
    context[16] = context[3];
    context[9] = refalrts::char_left( '6', context[15], context[16] );
    if( ! context[9] )
      continue;
    // closed e.Accum#1 as range 5
    // closed e.Text#1 as range 15(2)
    //DEBUG: e.Accum#1: 5
    //DEBUG: e.Text#1: 2

    refalrts::reset_allocator();
    //TRASH: {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 Reuse: & EscRegexp-OCode/4 AsIs: (/7 AsIs: e.Accum#1/5 HalfReuse: '6'/8 HalfReuse: )/9 AsIs: e.Text#1/15(2) AsIs: >/1 ]] }
    refalrts::update_name( context[4], & EscRegexp_OCode );
    refalrts::reinit_char( context[8], '6' );
    refalrts::reinit_close_bracket( context[9] );
    refalrts::push_stack( context[1] );
    refalrts::push_stack( context[0] );
    refalrts::link_brackets( context[7], context[9] );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence();

  do {
    // ( e.idx ) '7' e.idx
    // </0 & EscRegexp/4 (/7 e.Accum#1/5 )/8 '7'/9 e.Text#1/2 >/1
    context[15] = context[2];
    context[16] = context[3];
    context[9] = refalrts::char_left( '7', context[15], context[16] );
    if( ! context[9] )
      continue;
    // closed e.Accum#1 as range 5
    // closed e.Text#1 as range 15(2)
    //DEBUG: e.Accum#1: 5
    //DEBUG: e.Text#1: 2

    refalrts::reset_allocator();
    //TRASH: {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 Reuse: & EscRegexp-OCode/4 AsIs: (/7 AsIs: e.Accum#1/5 HalfReuse: '7'/8 HalfReuse: )/9 AsIs: e.Text#1/15(2) AsIs: >/1 ]] }
    refalrts::update_name( context[4], & EscRegexp_OCode );
    refalrts::reinit_char( context[8], '7' );
    refalrts::reinit_close_bracket( context[9] );
    refalrts::push_stack( context[1] );
    refalrts::push_stack( context[0] );
    refalrts::link_brackets( context[7], context[9] );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence();

  do {
    // ( e.idx ) '.' e.idx
    // </0 & EscRegexp/4 (/7 e.Accum#1/5 )/8 '.'/9 e.Text#1/2 >/1
    context[15] = context[2];
    context[16] = context[3];
    context[9] = refalrts::char_left( '.', context[15], context[16] );
    if( ! context[9] )
      continue;
    // closed e.Accum#1 as range 5
    // closed e.Text#1 as range 15(2)
    //DEBUG: e.Accum#1: 5
    //DEBUG: e.Text#1: 2

    refalrts::reset_allocator();
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ HalfReuse: (/0 HalfReuse: # TChar/4 } Tile{ AsIs: e.Accum#1/5 } '.'/10 Tile{ HalfReuse: )/7 } </11 & ReadRegexp/12 Tile{ HalfReuse: (/8 HalfReuse: )/9 AsIs: e.Text#1/15(2) AsIs: >/1 ]] }
    if( ! refalrts::alloc_char( context[10], '.' ) )
      return refalrts::cNoMemory;
    if( ! refalrts::alloc_open_call( context[11] ) )
      return refalrts::cNoMemory;
    if( ! refalrts::alloc_name( context[12], & ReadRegexp ) )
      return refalrts::cNoMemory;
    refalrts::reinit_open_bracket( context[0] );
    refalrts::reinit_ident( context[4], & ident_TChar<int>::name );
    refalrts::reinit_close_bracket( context[7] );
    refalrts::reinit_open_bracket( context[8] );
    refalrts::reinit_close_bracket( context[9] );
    refalrts::push_stack( context[1] );
    refalrts::push_stack( context[11] );
    refalrts::link_brackets( context[8], context[9] );
    refalrts::link_brackets( context[0], context[7] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[8];
    res = refalrts::splice_evar( res, context[11], context[12] );
    res = refalrts::splice_evar( res, context[7], context[7] );
    res = refalrts::splice_evar( res, context[10], context[10] );
    res = refalrts::splice_evar( res, context[5], context[6] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence();

  do {
    // ( e.idx ) '(' e.idx
    // </0 & EscRegexp/4 (/7 e.Accum#1/5 )/8 '('/9 e.Text#1/2 >/1
    context[15] = context[2];
    context[16] = context[3];
    context[9] = refalrts::char_left( '(', context[15], context[16] );
    if( ! context[9] )
      continue;
    // closed e.Accum#1 as range 5
    // closed e.Text#1 as range 15(2)
    //DEBUG: e.Accum#1: 5
    //DEBUG: e.Text#1: 2

    refalrts::reset_allocator();
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ HalfReuse: (/0 HalfReuse: # TChar/4 } Tile{ AsIs: e.Accum#1/5 } '('/10 Tile{ HalfReuse: )/7 } </11 & ReadRegexp/12 Tile{ HalfReuse: (/8 HalfReuse: )/9 AsIs: e.Text#1/15(2) AsIs: >/1 ]] }
    if( ! refalrts::alloc_char( context[10], '(' ) )
      return refalrts::cNoMemory;
    if( ! refalrts::alloc_open_call( context[11] ) )
      return refalrts::cNoMemory;
    if( ! refalrts::alloc_name( context[12], & ReadRegexp ) )
      return refalrts::cNoMemory;
    refalrts::reinit_open_bracket( context[0] );
    refalrts::reinit_ident( context[4], & ident_TChar<int>::name );
    refalrts::reinit_close_bracket( context[7] );
    refalrts::reinit_open_bracket( context[8] );
    refalrts::reinit_close_bracket( context[9] );
    refalrts::push_stack( context[1] );
    refalrts::push_stack( context[11] );
    refalrts::link_brackets( context[8], context[9] );
    refalrts::link_brackets( context[0], context[7] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[8];
    res = refalrts::splice_evar( res, context[11], context[12] );
    res = refalrts::splice_evar( res, context[7], context[7] );
    res = refalrts::splice_evar( res, context[10], context[10] );
    res = refalrts::splice_evar( res, context[5], context[6] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence();

  do {
    // ( e.idx ) ')' e.idx
    // </0 & EscRegexp/4 (/7 e.Accum#1/5 )/8 ')'/9 e.Text#1/2 >/1
    context[15] = context[2];
    context[16] = context[3];
    context[9] = refalrts::char_left( ')', context[15], context[16] );
    if( ! context[9] )
      continue;
    // closed e.Accum#1 as range 5
    // closed e.Text#1 as range 15(2)
    //DEBUG: e.Accum#1: 5
    //DEBUG: e.Text#1: 2

    refalrts::reset_allocator();
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ HalfReuse: (/0 HalfReuse: # TChar/4 } Tile{ AsIs: e.Accum#1/5 } ')'/10 Tile{ HalfReuse: )/7 } </11 & ReadRegexp/12 Tile{ HalfReuse: (/8 HalfReuse: )/9 AsIs: e.Text#1/15(2) AsIs: >/1 ]] }
    if( ! refalrts::alloc_char( context[10], ')' ) )
      return refalrts::cNoMemory;
    if( ! refalrts::alloc_open_call( context[11] ) )
      return refalrts::cNoMemory;
    if( ! refalrts::alloc_name( context[12], & ReadRegexp ) )
      return refalrts::cNoMemory;
    refalrts::reinit_open_bracket( context[0] );
    refalrts::reinit_ident( context[4], & ident_TChar<int>::name );
    refalrts::reinit_close_bracket( context[7] );
    refalrts::reinit_open_bracket( context[8] );
    refalrts::reinit_close_bracket( context[9] );
    refalrts::push_stack( context[1] );
    refalrts::push_stack( context[11] );
    refalrts::link_brackets( context[8], context[9] );
    refalrts::link_brackets( context[0], context[7] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[8];
    res = refalrts::splice_evar( res, context[11], context[12] );
    res = refalrts::splice_evar( res, context[7], context[7] );
    res = refalrts::splice_evar( res, context[10], context[10] );
    res = refalrts::splice_evar( res, context[5], context[6] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence();

  do {
    // ( e.idx ) '|' e.idx
    // </0 & EscRegexp/4 (/7 e.Accum#1/5 )/8 '|'/9 e.Text#1/2 >/1
    context[15] = context[2];
    context[16] = context[3];
    context[9] = refalrts::char_left( '|', context[15], context[16] );
    if( ! context[9] )
      continue;
    // closed e.Accum#1 as range 5
    // closed e.Text#1 as range 15(2)
    //DEBUG: e.Accum#1: 5
    //DEBUG: e.Text#1: 2

    refalrts::reset_allocator();
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ HalfReuse: (/0 HalfReuse: # TChar/4 } Tile{ AsIs: e.Accum#1/5 } '|'/10 Tile{ HalfReuse: )/7 } </11 & ReadRegexp/12 Tile{ HalfReuse: (/8 HalfReuse: )/9 AsIs: e.Text#1/15(2) AsIs: >/1 ]] }
    if( ! refalrts::alloc_char( context[10], '|' ) )
      return refalrts::cNoMemory;
    if( ! refalrts::alloc_open_call( context[11] ) )
      return refalrts::cNoMemory;
    if( ! refalrts::alloc_name( context[12], & ReadRegexp ) )
      return refalrts::cNoMemory;
    refalrts::reinit_open_bracket( context[0] );
    refalrts::reinit_ident( context[4], & ident_TChar<int>::name );
    refalrts::reinit_close_bracket( context[7] );
    refalrts::reinit_open_bracket( context[8] );
    refalrts::reinit_close_bracket( context[9] );
    refalrts::push_stack( context[1] );
    refalrts::push_stack( context[11] );
    refalrts::link_brackets( context[8], context[9] );
    refalrts::link_brackets( context[0], context[7] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[8];
    res = refalrts::splice_evar( res, context[11], context[12] );
    res = refalrts::splice_evar( res, context[7], context[7] );
    res = refalrts::splice_evar( res, context[10], context[10] );
    res = refalrts::splice_evar( res, context[5], context[6] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence();

  do {
    // ( e.idx ) '^' e.idx
    // </0 & EscRegexp/4 (/7 e.Accum#1/5 )/8 '^'/9 e.Text#1/2 >/1
    context[15] = context[2];
    context[16] = context[3];
    context[9] = refalrts::char_left( '^', context[15], context[16] );
    if( ! context[9] )
      continue;
    // closed e.Accum#1 as range 5
    // closed e.Text#1 as range 15(2)
    //DEBUG: e.Accum#1: 5
    //DEBUG: e.Text#1: 2

    refalrts::reset_allocator();
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ HalfReuse: (/0 HalfReuse: # TChar/4 } Tile{ AsIs: e.Accum#1/5 } '^'/10 Tile{ HalfReuse: )/7 } </11 & ReadRegexp/12 Tile{ HalfReuse: (/8 HalfReuse: )/9 AsIs: e.Text#1/15(2) AsIs: >/1 ]] }
    if( ! refalrts::alloc_char( context[10], '^' ) )
      return refalrts::cNoMemory;
    if( ! refalrts::alloc_open_call( context[11] ) )
      return refalrts::cNoMemory;
    if( ! refalrts::alloc_name( context[12], & ReadRegexp ) )
      return refalrts::cNoMemory;
    refalrts::reinit_open_bracket( context[0] );
    refalrts::reinit_ident( context[4], & ident_TChar<int>::name );
    refalrts::reinit_close_bracket( context[7] );
    refalrts::reinit_open_bracket( context[8] );
    refalrts::reinit_close_bracket( context[9] );
    refalrts::push_stack( context[1] );
    refalrts::push_stack( context[11] );
    refalrts::link_brackets( context[8], context[9] );
    refalrts::link_brackets( context[0], context[7] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[8];
    res = refalrts::splice_evar( res, context[11], context[12] );
    res = refalrts::splice_evar( res, context[7], context[7] );
    res = refalrts::splice_evar( res, context[10], context[10] );
    res = refalrts::splice_evar( res, context[5], context[6] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence();

  do {
    // ( e.idx ) '$' e.idx
    // </0 & EscRegexp/4 (/7 e.Accum#1/5 )/8 '$'/9 e.Text#1/2 >/1
    context[15] = context[2];
    context[16] = context[3];
    context[9] = refalrts::char_left( '$', context[15], context[16] );
    if( ! context[9] )
      continue;
    // closed e.Accum#1 as range 5
    // closed e.Text#1 as range 15(2)
    //DEBUG: e.Accum#1: 5
    //DEBUG: e.Text#1: 2

    refalrts::reset_allocator();
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ HalfReuse: (/0 HalfReuse: # TChar/4 } Tile{ AsIs: e.Accum#1/5 } '$'/10 Tile{ HalfReuse: )/7 } </11 & ReadRegexp/12 Tile{ HalfReuse: (/8 HalfReuse: )/9 AsIs: e.Text#1/15(2) AsIs: >/1 ]] }
    if( ! refalrts::alloc_char( context[10], '$' ) )
      return refalrts::cNoMemory;
    if( ! refalrts::alloc_open_call( context[11] ) )
      return refalrts::cNoMemory;
    if( ! refalrts::alloc_name( context[12], & ReadRegexp ) )
      return refalrts::cNoMemory;
    refalrts::reinit_open_bracket( context[0] );
    refalrts::reinit_ident( context[4], & ident_TChar<int>::name );
    refalrts::reinit_close_bracket( context[7] );
    refalrts::reinit_open_bracket( context[8] );
    refalrts::reinit_close_bracket( context[9] );
    refalrts::push_stack( context[1] );
    refalrts::push_stack( context[11] );
    refalrts::link_brackets( context[8], context[9] );
    refalrts::link_brackets( context[0], context[7] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[8];
    res = refalrts::splice_evar( res, context[11], context[12] );
    res = refalrts::splice_evar( res, context[7], context[7] );
    res = refalrts::splice_evar( res, context[10], context[10] );
    res = refalrts::splice_evar( res, context[5], context[6] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence();

  do {
    // ( e.idx ) s.idx e.idx
    // </0 & EscRegexp/4 (/7 e.Accum#1/5 )/8 s.Any#1/9 e.Text#1/2 >/1
    // closed e.Accum#1 as range 5
    context[15] = context[2];
    context[16] = context[3];
    if( ! refalrts::svar_left( context[9], context[15], context[16] ) )
      continue;
    // closed e.Text#1 as range 15(2)
    //DEBUG: e.Accum#1: 5
    //DEBUG: s.Any#1: 9
    //DEBUG: e.Text#1: 2

    refalrts::reset_allocator();
    //TRASH: {REMOVED TILE} {REMOVED TILE} e.Accum#1/5 {REMOVED TILE} s.Any#1/9 {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ } (/10 # TokenError/11"Bad escaped symbol"/12 Tile{ AsIs: )/8 } Tile{ AsIs: </0 Reuse: & ReadRegexp/4 AsIs: (/7 } )/14 Tile{ AsIs: e.Text#1/15(2) } Tile{ AsIs: >/1 ]] }
    if( ! refalrts::alloc_open_bracket( context[10] ) )
      return refalrts::cNoMemory;
    if( ! refalrts::alloc_ident( context[11], & ident_TokenError<int>::name ) )
      return refalrts::cNoMemory;
    if( ! refalrts::alloc_chars( context[12], context[13], "Bad escaped symbol", 18 ) )
      return refalrts::cNoMemory;
    if( ! refalrts::alloc_close_bracket( context[14] ) )
      return refalrts::cNoMemory;
    refalrts::update_name( context[4], & ReadRegexp );
    refalrts::push_stack( context[1] );
    refalrts::push_stack( context[0] );
    refalrts::link_brackets( context[7], context[14] );
    refalrts::link_brackets( context[10], context[8] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    res = refalrts::splice_evar( res, context[15], context[16] );
    res = refalrts::splice_evar( res, context[14], context[14] );
    res = refalrts::splice_evar( res, context[0], context[7] );
    res = refalrts::splice_evar( res, context[8], context[8] );
    res = refalrts::splice_evar( res, context[10], context[13] );
    refalrts::use( res );
    refalrts::splice_to_freelist_open( trash_prev, res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence();

  // ( e.idx )
  // </0 & EscRegexp/4 (/7 e.Accum#1/5 )/8 >/1
  if( ! refalrts::empty_seq( context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  // closed e.Accum#1 as range 5
  //DEBUG: e.Accum#1: 5

  refalrts::reset_allocator();
  //TRASH: {REMOVED TILE} e.Accum#1/5 {REMOVED TILE}
  //RESULT: Tile{ [[ HalfReuse: (/0 HalfReuse: # TokenError/4 HalfReuse: 'U'/7 }"nexpected EOF in Regex"/9 Tile{ HalfReuse: 'p'/8 HalfReuse: )/1 ]] }
  if( ! refalrts::alloc_chars( context[9], context[10], "nexpected EOF in Regex", 22 ) )
    return refalrts::cNoMemory;
  refalrts::reinit_open_bracket( context[0] );
  refalrts::reinit_ident( context[4], & ident_TokenError<int>::name );
  refalrts::reinit_char( context[7], 'U' );
  refalrts::reinit_char( context[8], 'p' );
  refalrts::reinit_close_bracket( context[1] );
  refalrts::link_brackets( context[0], context[1] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[8];
  res = refalrts::splice_evar( res, context[9], context[10] );
  refalrts::use( res );
  refalrts::splice_to_freelist_open( context[7], res );
  return refalrts::cSuccess;
}

namespace /* unnamed */ {
refalrts::RefalNativeFunction descr_EscRegexp(func_EscRegexp, "EscRegexp");
refalrts::RefalFunction& EscRegexp = descr_EscRegexp;

} // unnamed namespace

#endif
#ifdef INTERPRET
namespace /* unnamed */ {
  namespace scope_StartGroup {
    static const char *filename = "Flex-Lexer.cpp";
    static refalrts::RefalFunction *functions[] = {
      & ReadGroup
    };
    static const refalrts::RefalIdentifier idents[] = {
      & ident_TInvertGroup<int>::name
    };
    using refalrts::numbers;
    using refalrts::strings;
    static const refalrts::RASLCommand raa[] = {
      {refalrts::icThisIsGeneratedFunction, 0, 0, 0},
      {refalrts::icLoadConstants, 0, 0, 0},
      {refalrts::icReserveBacktrackStack, 1, 0, 0},
      {refalrts::icIssueMemory, 15, 0, 0},
      //FAST GEN: ( e.$ ) e.$
      //GLOBAL GEN: ( e.$ ) e.$
      // </0 & StartGroup/4 (/7 e.idxB#0/5 )/8 e.idxT#0/2 >/1
      {refalrts::icInitB0_Lite, 0, 0, 0},
      {refalrts::icCallSaveLeft, 0, 2, 0},
      {refalrts::icBracketLeftSave, 0, 5, 2},
      // closed e.idxB#0 as range 5
      // closed e.idxT#0 as range 2
      {refalrts::icOnFailGoTo, +21, 0, 0},
      // ( e.idx ) '^' e.idx
      // </0 & StartGroup/4 (/7 e.Accum#1/5 )/8 '^'/9 e.Text#1/2 >/1
      {refalrts::icSave, 0, 13, 2},
      {refalrts::icCharLeftSave, 9, static_cast<unsigned char>('^'), 13},
      // closed e.Accum#1 as range 5
      // closed e.Text#1 as range 13(2)
      //DEBUG: e.Accum#1: 5
      //DEBUG: e.Text#1: 2
      {refalrts::icEmptyResult, 0, 0, 0},
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ HalfReuse: (/0 HalfReuse: # TInvertGroup/4 } Tile{ AsIs: e.Accum#1/5 } '^'/10 Tile{ HalfReuse: )/7 } </11 & ReadGroup/12 Tile{ HalfReuse: (/8 HalfReuse: )/9 AsIs: e.Text#1/13(2) AsIs: >/1 ]] }
      {refalrts::icAllocChar, 0, '^', 10},
      {refalrts::icAllocBracket, 0, refalrts::ibOpenCall, 11},
      {refalrts::icAllocFunc, 0, 0, 12},
      {refalrts::icReinitBracket, 0, refalrts::ibOpenBracket, 0},
      {refalrts::icReinitIdent, 0, 0, 4},
      {refalrts::icReinitBracket, 0, refalrts::ibCloseBracket, 7},
      {refalrts::icReinitBracket, 0, refalrts::ibOpenBracket, 8},
      {refalrts::icReinitBracket, 0, refalrts::ibCloseBracket, 9},
      {refalrts::icPushStack, 0, 0, 1},
      {refalrts::icPushStack, 0, 0, 11},
      {refalrts::icLinkBrackets, 8, 9, 0},
      {refalrts::icLinkBrackets, 0, 7, 0},
      {refalrts::icSetRes, 0, 0, 8},
      {refalrts::icSpliceTile, 11, 12, 0},
      {refalrts::icSpliceTile, 7, 7, 0},
      {refalrts::icSpliceTile, 10, 10, 0},
      {refalrts::icSpliceEVar, 0, 0, 5},
      {refalrts::icNextStep, 0, 0, 0},
      {refalrts::icProfilerStopSentence, 0, 0, 0},
      // ( e.idx ) e.idx
      // </0 & StartGroup/4 (/7 e.Accum#1/5 )/8 e.Text#1/2 >/1
      // closed e.Accum#1 as range 5
      // closed e.Text#1 as range 2
      //DEBUG: e.Accum#1: 5
      //DEBUG: e.Text#1: 2
      {refalrts::icEmptyResult, 0, 0, 0},
      //TRASH: {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 Reuse: & ReadGroup/4 AsIs: (/7 AsIs: e.Accum#1/5 AsIs: )/8 AsIs: e.Text#1/2 AsIs: >/1 ]] }
      {refalrts::icUpdateFunc, 0, 0, 4},
      {refalrts::icPushStack, 0, 0, 1},
      {refalrts::icPushStack, 0, 0, 0},
      {refalrts::icLinkBrackets, 7, 8, 0},
      {refalrts::icNextStep, 0, 0, 0},
      {refalrts::icEnd, 0, 0, 0}
    };
  } // namespace scope_StartGroup

} // unnamed namespace

namespace /* unnamed */ {
refalrts::RASLFunction descr_StartGroup(
  "StartGroup",
  scope_StartGroup::raa,
  scope_StartGroup::functions,
  scope_StartGroup::idents,
  scope_StartGroup::numbers,
  scope_StartGroup::strings,
  scope_StartGroup::filename
);
refalrts::RefalFunction& StartGroup = descr_StartGroup;

} // unnamed namespace

#else
static refalrts::FnResult func_StartGroup(refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  refalrts::this_is_generated_function();
  // issue here memory for vars with 15 elems
  refalrts::Iter context[15];
  refalrts::zeros( context, 15 );
  //FAST GEN: ( e.$ ) e.$
  //GLOBAL GEN: ( e.$ ) e.$
  // </0 & StartGroup/4 (/7 e.idxB#0/5 )/8 e.idxT#0/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  context[5] = 0;
  context[6] = 0;
  context[7] = refalrts::brackets_left( context[5], context[6], context[2], context[3] );
  if( ! context[7] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[7], context[8]);
  // closed e.idxB#0 as range 5
  // closed e.idxT#0 as range 2
  do {
    // ( e.idx ) '^' e.idx
    // </0 & StartGroup/4 (/7 e.Accum#1/5 )/8 '^'/9 e.Text#1/2 >/1
    context[13] = context[2];
    context[14] = context[3];
    context[9] = refalrts::char_left( '^', context[13], context[14] );
    if( ! context[9] )
      continue;
    // closed e.Accum#1 as range 5
    // closed e.Text#1 as range 13(2)
    //DEBUG: e.Accum#1: 5
    //DEBUG: e.Text#1: 2

    refalrts::reset_allocator();
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ HalfReuse: (/0 HalfReuse: # TInvertGroup/4 } Tile{ AsIs: e.Accum#1/5 } '^'/10 Tile{ HalfReuse: )/7 } </11 & ReadGroup/12 Tile{ HalfReuse: (/8 HalfReuse: )/9 AsIs: e.Text#1/13(2) AsIs: >/1 ]] }
    if( ! refalrts::alloc_char( context[10], '^' ) )
      return refalrts::cNoMemory;
    if( ! refalrts::alloc_open_call( context[11] ) )
      return refalrts::cNoMemory;
    if( ! refalrts::alloc_name( context[12], & ReadGroup ) )
      return refalrts::cNoMemory;
    refalrts::reinit_open_bracket( context[0] );
    refalrts::reinit_ident( context[4], & ident_TInvertGroup<int>::name );
    refalrts::reinit_close_bracket( context[7] );
    refalrts::reinit_open_bracket( context[8] );
    refalrts::reinit_close_bracket( context[9] );
    refalrts::push_stack( context[1] );
    refalrts::push_stack( context[11] );
    refalrts::link_brackets( context[8], context[9] );
    refalrts::link_brackets( context[0], context[7] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[8];
    res = refalrts::splice_evar( res, context[11], context[12] );
    res = refalrts::splice_evar( res, context[7], context[7] );
    res = refalrts::splice_evar( res, context[10], context[10] );
    res = refalrts::splice_evar( res, context[5], context[6] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence();

  // ( e.idx ) e.idx
  // </0 & StartGroup/4 (/7 e.Accum#1/5 )/8 e.Text#1/2 >/1
  // closed e.Accum#1 as range 5
  // closed e.Text#1 as range 2
  //DEBUG: e.Accum#1: 5
  //DEBUG: e.Text#1: 2

  refalrts::reset_allocator();
  //TRASH: {REMOVED TILE}
  //RESULT: Tile{ [[ AsIs: </0 Reuse: & ReadGroup/4 AsIs: (/7 AsIs: e.Accum#1/5 AsIs: )/8 AsIs: e.Text#1/2 AsIs: >/1 ]] }
  refalrts::update_name( context[4], & ReadGroup );
  refalrts::push_stack( context[1] );
  refalrts::push_stack( context[0] );
  refalrts::link_brackets( context[7], context[8] );
  return refalrts::cSuccess;
}

namespace /* unnamed */ {
refalrts::RefalNativeFunction descr_StartGroup(func_StartGroup, "StartGroup");
refalrts::RefalFunction& StartGroup = descr_StartGroup;

} // unnamed namespace

#endif
#ifdef INTERPRET
namespace /* unnamed */ {
  namespace scope_ReadInclude {
    static const char *filename = "Flex-Lexer.cpp";
    static refalrts::RefalFunction *functions[] = {
      & ReadRegexp,
      & ReadBody
    };
    static const refalrts::RefalIdentifier idents[] = {
      & ident_TokenError<int>::name
    };
    using refalrts::numbers;
    static const refalrts::StringItem strings[] = {
      {"nexpected EOF in Includ", 23},
      {"Expected Name in Include", 24}
    };
    static const refalrts::RASLCommand raa[] = {
      {refalrts::icThisIsGeneratedFunction, 0, 0, 0},
      {refalrts::icLoadConstants, 0, 0, 0},
      {refalrts::icReserveBacktrackStack, 27, 0, 0},
      {refalrts::icIssueMemory, 17, 0, 0},
      //FAST GEN: e.$
      //GLOBAL GEN: ( e.$ ) e.$
      // </0 & ReadInclude/4 (/7 e.idxB#0/5 )/8 e.idxT#0/2 >/1
      {refalrts::icInitB0_Lite, 0, 0, 0},
      {refalrts::icCallSaveLeft, 0, 2, 0},
      {refalrts::icBracketLeftSave, 0, 5, 2},
      // closed e.idxB#0 as range 5
      // closed e.idxT#0 as range 2
      {refalrts::icOnFailGoTo, +10, 0, 0},
      // ( e.idx ) 'A' e.idx
      // </0 & ReadInclude/4 (/7 e.Accum#1/5 )/8 'A'/9 e.Text#1/2 >/1
      {refalrts::icSave, 0, 15, 2},
      {refalrts::icCharLeftSave, 9, static_cast<unsigned char>('A'), 15},
      // closed e.Accum#1 as range 5
      // closed e.Text#1 as range 15(2)
      //DEBUG: e.Accum#1: 5
      //DEBUG: e.Text#1: 2
      {refalrts::icEmptyResult, 0, 0, 0},
      //TRASH: {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 Reuse: & ReadBody/4 AsIs: (/7 AsIs: e.Accum#1/5 HalfReuse: 'A'/8 HalfReuse: )/9 AsIs: e.Text#1/15(2) AsIs: >/1 ]] }
      {refalrts::icUpdateFunc, 0, 1, 4},
      {refalrts::icReinitChar, 0, 'A', 8},
      {refalrts::icReinitBracket, 0, refalrts::ibCloseBracket, 9},
      {refalrts::icPushStack, 0, 0, 1},
      {refalrts::icPushStack, 0, 0, 0},
      {refalrts::icLinkBrackets, 7, 9, 0},
      {refalrts::icNextStep, 0, 0, 0},
      {refalrts::icProfilerStopSentence, 0, 0, 0},
      {refalrts::icOnFailGoTo, +10, 0, 0},
      // ( e.idx ) 'B' e.idx
      // </0 & ReadInclude/4 (/7 e.Accum#1/5 )/8 'B'/9 e.Text#1/2 >/1
      {refalrts::icSave, 0, 15, 2},
      {refalrts::icCharLeftSave, 9, static_cast<unsigned char>('B'), 15},
      // closed e.Accum#1 as range 5
      // closed e.Text#1 as range 15(2)
      //DEBUG: e.Accum#1: 5
      //DEBUG: e.Text#1: 2
      {refalrts::icEmptyResult, 0, 0, 0},
      //TRASH: {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 Reuse: & ReadBody/4 AsIs: (/7 AsIs: e.Accum#1/5 HalfReuse: 'B'/8 HalfReuse: )/9 AsIs: e.Text#1/15(2) AsIs: >/1 ]] }
      {refalrts::icUpdateFunc, 0, 1, 4},
      {refalrts::icReinitChar, 0, 'B', 8},
      {refalrts::icReinitBracket, 0, refalrts::ibCloseBracket, 9},
      {refalrts::icPushStack, 0, 0, 1},
      {refalrts::icPushStack, 0, 0, 0},
      {refalrts::icLinkBrackets, 7, 9, 0},
      {refalrts::icNextStep, 0, 0, 0},
      {refalrts::icProfilerStopSentence, 0, 0, 0},
      {refalrts::icOnFailGoTo, +10, 0, 0},
      // ( e.idx ) 'C' e.idx
      // </0 & ReadInclude/4 (/7 e.Accum#1/5 )/8 'C'/9 e.Text#1/2 >/1
      {refalrts::icSave, 0, 15, 2},
      {refalrts::icCharLeftSave, 9, static_cast<unsigned char>('C'), 15},
      // closed e.Accum#1 as range 5
      // closed e.Text#1 as range 15(2)
      //DEBUG: e.Accum#1: 5
      //DEBUG: e.Text#1: 2
      {refalrts::icEmptyResult, 0, 0, 0},
      //TRASH: {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 Reuse: & ReadBody/4 AsIs: (/7 AsIs: e.Accum#1/5 HalfReuse: 'C'/8 HalfReuse: )/9 AsIs: e.Text#1/15(2) AsIs: >/1 ]] }
      {refalrts::icUpdateFunc, 0, 1, 4},
      {refalrts::icReinitChar, 0, 'C', 8},
      {refalrts::icReinitBracket, 0, refalrts::ibCloseBracket, 9},
      {refalrts::icPushStack, 0, 0, 1},
      {refalrts::icPushStack, 0, 0, 0},
      {refalrts::icLinkBrackets, 7, 9, 0},
      {refalrts::icNextStep, 0, 0, 0},
      {refalrts::icProfilerStopSentence, 0, 0, 0},
      {refalrts::icOnFailGoTo, +10, 0, 0},
      // ( e.idx ) 'D' e.idx
      // </0 & ReadInclude/4 (/7 e.Accum#1/5 )/8 'D'/9 e.Text#1/2 >/1
      {refalrts::icSave, 0, 15, 2},
      {refalrts::icCharLeftSave, 9, static_cast<unsigned char>('D'), 15},
      // closed e.Accum#1 as range 5
      // closed e.Text#1 as range 15(2)
      //DEBUG: e.Accum#1: 5
      //DEBUG: e.Text#1: 2
      {refalrts::icEmptyResult, 0, 0, 0},
      //TRASH: {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 Reuse: & ReadBody/4 AsIs: (/7 AsIs: e.Accum#1/5 HalfReuse: 'D'/8 HalfReuse: )/9 AsIs: e.Text#1/15(2) AsIs: >/1 ]] }
      {refalrts::icUpdateFunc, 0, 1, 4},
      {refalrts::icReinitChar, 0, 'D', 8},
      {refalrts::icReinitBracket, 0, refalrts::ibCloseBracket, 9},
      {refalrts::icPushStack, 0, 0, 1},
      {refalrts::icPushStack, 0, 0, 0},
      {refalrts::icLinkBrackets, 7, 9, 0},
      {refalrts::icNextStep, 0, 0, 0},
      {refalrts::icProfilerStopSentence, 0, 0, 0},
      {refalrts::icOnFailGoTo, +10, 0, 0},
      // ( e.idx ) 'E' e.idx
      // </0 & ReadInclude/4 (/7 e.Accum#1/5 )/8 'E'/9 e.Text#1/2 >/1
      {refalrts::icSave, 0, 15, 2},
      {refalrts::icCharLeftSave, 9, static_cast<unsigned char>('E'), 15},
      // closed e.Accum#1 as range 5
      // closed e.Text#1 as range 15(2)
      //DEBUG: e.Accum#1: 5
      //DEBUG: e.Text#1: 2
      {refalrts::icEmptyResult, 0, 0, 0},
      //TRASH: {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 Reuse: & ReadBody/4 AsIs: (/7 AsIs: e.Accum#1/5 HalfReuse: 'E'/8 HalfReuse: )/9 AsIs: e.Text#1/15(2) AsIs: >/1 ]] }
      {refalrts::icUpdateFunc, 0, 1, 4},
      {refalrts::icReinitChar, 0, 'E', 8},
      {refalrts::icReinitBracket, 0, refalrts::ibCloseBracket, 9},
      {refalrts::icPushStack, 0, 0, 1},
      {refalrts::icPushStack, 0, 0, 0},
      {refalrts::icLinkBrackets, 7, 9, 0},
      {refalrts::icNextStep, 0, 0, 0},
      {refalrts::icProfilerStopSentence, 0, 0, 0},
      {refalrts::icOnFailGoTo, +10, 0, 0},
      // ( e.idx ) 'F' e.idx
      // </0 & ReadInclude/4 (/7 e.Accum#1/5 )/8 'F'/9 e.Text#1/2 >/1
      {refalrts::icSave, 0, 15, 2},
      {refalrts::icCharLeftSave, 9, static_cast<unsigned char>('F'), 15},
      // closed e.Accum#1 as range 5
      // closed e.Text#1 as range 15(2)
      //DEBUG: e.Accum#1: 5
      //DEBUG: e.Text#1: 2
      {refalrts::icEmptyResult, 0, 0, 0},
      //TRASH: {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 Reuse: & ReadBody/4 AsIs: (/7 AsIs: e.Accum#1/5 HalfReuse: 'F'/8 HalfReuse: )/9 AsIs: e.Text#1/15(2) AsIs: >/1 ]] }
      {refalrts::icUpdateFunc, 0, 1, 4},
      {refalrts::icReinitChar, 0, 'F', 8},
      {refalrts::icReinitBracket, 0, refalrts::ibCloseBracket, 9},
      {refalrts::icPushStack, 0, 0, 1},
      {refalrts::icPushStack, 0, 0, 0},
      {refalrts::icLinkBrackets, 7, 9, 0},
      {refalrts::icNextStep, 0, 0, 0},
      {refalrts::icProfilerStopSentence, 0, 0, 0},
      {refalrts::icOnFailGoTo, +10, 0, 0},
      // ( e.idx ) 'G' e.idx
      // </0 & ReadInclude/4 (/7 e.Accum#1/5 )/8 'G'/9 e.Text#1/2 >/1
      {refalrts::icSave, 0, 15, 2},
      {refalrts::icCharLeftSave, 9, static_cast<unsigned char>('G'), 15},
      // closed e.Accum#1 as range 5
      // closed e.Text#1 as range 15(2)
      //DEBUG: e.Accum#1: 5
      //DEBUG: e.Text#1: 2
      {refalrts::icEmptyResult, 0, 0, 0},
      //TRASH: {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 Reuse: & ReadBody/4 AsIs: (/7 AsIs: e.Accum#1/5 HalfReuse: 'G'/8 HalfReuse: )/9 AsIs: e.Text#1/15(2) AsIs: >/1 ]] }
      {refalrts::icUpdateFunc, 0, 1, 4},
      {refalrts::icReinitChar, 0, 'G', 8},
      {refalrts::icReinitBracket, 0, refalrts::ibCloseBracket, 9},
      {refalrts::icPushStack, 0, 0, 1},
      {refalrts::icPushStack, 0, 0, 0},
      {refalrts::icLinkBrackets, 7, 9, 0},
      {refalrts::icNextStep, 0, 0, 0},
      {refalrts::icProfilerStopSentence, 0, 0, 0},
      {refalrts::icOnFailGoTo, +10, 0, 0},
      // ( e.idx ) 'H' e.idx
      // </0 & ReadInclude/4 (/7 e.Accum#1/5 )/8 'H'/9 e.Text#1/2 >/1
      {refalrts::icSave, 0, 15, 2},
      {refalrts::icCharLeftSave, 9, static_cast<unsigned char>('H'), 15},
      // closed e.Accum#1 as range 5
      // closed e.Text#1 as range 15(2)
      //DEBUG: e.Accum#1: 5
      //DEBUG: e.Text#1: 2
      {refalrts::icEmptyResult, 0, 0, 0},
      //TRASH: {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 Reuse: & ReadBody/4 AsIs: (/7 AsIs: e.Accum#1/5 HalfReuse: 'H'/8 HalfReuse: )/9 AsIs: e.Text#1/15(2) AsIs: >/1 ]] }
      {refalrts::icUpdateFunc, 0, 1, 4},
      {refalrts::icReinitChar, 0, 'H', 8},
      {refalrts::icReinitBracket, 0, refalrts::ibCloseBracket, 9},
      {refalrts::icPushStack, 0, 0, 1},
      {refalrts::icPushStack, 0, 0, 0},
      {refalrts::icLinkBrackets, 7, 9, 0},
      {refalrts::icNextStep, 0, 0, 0},
      {refalrts::icProfilerStopSentence, 0, 0, 0},
      {refalrts::icOnFailGoTo, +10, 0, 0},
      // ( e.idx ) 'I' e.idx
      // </0 & ReadInclude/4 (/7 e.Accum#1/5 )/8 'I'/9 e.Text#1/2 >/1
      {refalrts::icSave, 0, 15, 2},
      {refalrts::icCharLeftSave, 9, static_cast<unsigned char>('I'), 15},
      // closed e.Accum#1 as range 5
      // closed e.Text#1 as range 15(2)
      //DEBUG: e.Accum#1: 5
      //DEBUG: e.Text#1: 2
      {refalrts::icEmptyResult, 0, 0, 0},
      //TRASH: {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 Reuse: & ReadBody/4 AsIs: (/7 AsIs: e.Accum#1/5 HalfReuse: 'I'/8 HalfReuse: )/9 AsIs: e.Text#1/15(2) AsIs: >/1 ]] }
      {refalrts::icUpdateFunc, 0, 1, 4},
      {refalrts::icReinitChar, 0, 'I', 8},
      {refalrts::icReinitBracket, 0, refalrts::ibCloseBracket, 9},
      {refalrts::icPushStack, 0, 0, 1},
      {refalrts::icPushStack, 0, 0, 0},
      {refalrts::icLinkBrackets, 7, 9, 0},
      {refalrts::icNextStep, 0, 0, 0},
      {refalrts::icProfilerStopSentence, 0, 0, 0},
      {refalrts::icOnFailGoTo, +10, 0, 0},
      // ( e.idx ) 'J' e.idx
      // </0 & ReadInclude/4 (/7 e.Accum#1/5 )/8 'J'/9 e.Text#1/2 >/1
      {refalrts::icSave, 0, 15, 2},
      {refalrts::icCharLeftSave, 9, static_cast<unsigned char>('J'), 15},
      // closed e.Accum#1 as range 5
      // closed e.Text#1 as range 15(2)
      //DEBUG: e.Accum#1: 5
      //DEBUG: e.Text#1: 2
      {refalrts::icEmptyResult, 0, 0, 0},
      //TRASH: {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 Reuse: & ReadBody/4 AsIs: (/7 AsIs: e.Accum#1/5 HalfReuse: 'J'/8 HalfReuse: )/9 AsIs: e.Text#1/15(2) AsIs: >/1 ]] }
      {refalrts::icUpdateFunc, 0, 1, 4},
      {refalrts::icReinitChar, 0, 'J', 8},
      {refalrts::icReinitBracket, 0, refalrts::ibCloseBracket, 9},
      {refalrts::icPushStack, 0, 0, 1},
      {refalrts::icPushStack, 0, 0, 0},
      {refalrts::icLinkBrackets, 7, 9, 0},
      {refalrts::icNextStep, 0, 0, 0},
      {refalrts::icProfilerStopSentence, 0, 0, 0},
      {refalrts::icOnFailGoTo, +10, 0, 0},
      // ( e.idx ) 'K' e.idx
      // </0 & ReadInclude/4 (/7 e.Accum#1/5 )/8 'K'/9 e.Text#1/2 >/1
      {refalrts::icSave, 0, 15, 2},
      {refalrts::icCharLeftSave, 9, static_cast<unsigned char>('K'), 15},
      // closed e.Accum#1 as range 5
      // closed e.Text#1 as range 15(2)
      //DEBUG: e.Accum#1: 5
      //DEBUG: e.Text#1: 2
      {refalrts::icEmptyResult, 0, 0, 0},
      //TRASH: {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 Reuse: & ReadBody/4 AsIs: (/7 AsIs: e.Accum#1/5 HalfReuse: 'K'/8 HalfReuse: )/9 AsIs: e.Text#1/15(2) AsIs: >/1 ]] }
      {refalrts::icUpdateFunc, 0, 1, 4},
      {refalrts::icReinitChar, 0, 'K', 8},
      {refalrts::icReinitBracket, 0, refalrts::ibCloseBracket, 9},
      {refalrts::icPushStack, 0, 0, 1},
      {refalrts::icPushStack, 0, 0, 0},
      {refalrts::icLinkBrackets, 7, 9, 0},
      {refalrts::icNextStep, 0, 0, 0},
      {refalrts::icProfilerStopSentence, 0, 0, 0},
      {refalrts::icOnFailGoTo, +10, 0, 0},
      // ( e.idx ) 'L' e.idx
      // </0 & ReadInclude/4 (/7 e.Accum#1/5 )/8 'L'/9 e.Text#1/2 >/1
      {refalrts::icSave, 0, 15, 2},
      {refalrts::icCharLeftSave, 9, static_cast<unsigned char>('L'), 15},
      // closed e.Accum#1 as range 5
      // closed e.Text#1 as range 15(2)
      //DEBUG: e.Accum#1: 5
      //DEBUG: e.Text#1: 2
      {refalrts::icEmptyResult, 0, 0, 0},
      //TRASH: {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 Reuse: & ReadBody/4 AsIs: (/7 AsIs: e.Accum#1/5 HalfReuse: 'L'/8 HalfReuse: )/9 AsIs: e.Text#1/15(2) AsIs: >/1 ]] }
      {refalrts::icUpdateFunc, 0, 1, 4},
      {refalrts::icReinitChar, 0, 'L', 8},
      {refalrts::icReinitBracket, 0, refalrts::ibCloseBracket, 9},
      {refalrts::icPushStack, 0, 0, 1},
      {refalrts::icPushStack, 0, 0, 0},
      {refalrts::icLinkBrackets, 7, 9, 0},
      {refalrts::icNextStep, 0, 0, 0},
      {refalrts::icProfilerStopSentence, 0, 0, 0},
      {refalrts::icOnFailGoTo, +10, 0, 0},
      // ( e.idx ) 'M' e.idx
      // </0 & ReadInclude/4 (/7 e.Accum#1/5 )/8 'M'/9 e.Text#1/2 >/1
      {refalrts::icSave, 0, 15, 2},
      {refalrts::icCharLeftSave, 9, static_cast<unsigned char>('M'), 15},
      // closed e.Accum#1 as range 5
      // closed e.Text#1 as range 15(2)
      //DEBUG: e.Accum#1: 5
      //DEBUG: e.Text#1: 2
      {refalrts::icEmptyResult, 0, 0, 0},
      //TRASH: {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 Reuse: & ReadBody/4 AsIs: (/7 AsIs: e.Accum#1/5 HalfReuse: 'M'/8 HalfReuse: )/9 AsIs: e.Text#1/15(2) AsIs: >/1 ]] }
      {refalrts::icUpdateFunc, 0, 1, 4},
      {refalrts::icReinitChar, 0, 'M', 8},
      {refalrts::icReinitBracket, 0, refalrts::ibCloseBracket, 9},
      {refalrts::icPushStack, 0, 0, 1},
      {refalrts::icPushStack, 0, 0, 0},
      {refalrts::icLinkBrackets, 7, 9, 0},
      {refalrts::icNextStep, 0, 0, 0},
      {refalrts::icProfilerStopSentence, 0, 0, 0},
      {refalrts::icOnFailGoTo, +10, 0, 0},
      // ( e.idx ) 'N' e.idx
      // </0 & ReadInclude/4 (/7 e.Accum#1/5 )/8 'N'/9 e.Text#1/2 >/1
      {refalrts::icSave, 0, 15, 2},
      {refalrts::icCharLeftSave, 9, static_cast<unsigned char>('N'), 15},
      // closed e.Accum#1 as range 5
      // closed e.Text#1 as range 15(2)
      //DEBUG: e.Accum#1: 5
      //DEBUG: e.Text#1: 2
      {refalrts::icEmptyResult, 0, 0, 0},
      //TRASH: {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 Reuse: & ReadBody/4 AsIs: (/7 AsIs: e.Accum#1/5 HalfReuse: 'N'/8 HalfReuse: )/9 AsIs: e.Text#1/15(2) AsIs: >/1 ]] }
      {refalrts::icUpdateFunc, 0, 1, 4},
      {refalrts::icReinitChar, 0, 'N', 8},
      {refalrts::icReinitBracket, 0, refalrts::ibCloseBracket, 9},
      {refalrts::icPushStack, 0, 0, 1},
      {refalrts::icPushStack, 0, 0, 0},
      {refalrts::icLinkBrackets, 7, 9, 0},
      {refalrts::icNextStep, 0, 0, 0},
      {refalrts::icProfilerStopSentence, 0, 0, 0},
      {refalrts::icOnFailGoTo, +10, 0, 0},
      // ( e.idx ) 'O' e.idx
      // </0 & ReadInclude/4 (/7 e.Accum#1/5 )/8 'O'/9 e.Text#1/2 >/1
      {refalrts::icSave, 0, 15, 2},
      {refalrts::icCharLeftSave, 9, static_cast<unsigned char>('O'), 15},
      // closed e.Accum#1 as range 5
      // closed e.Text#1 as range 15(2)
      //DEBUG: e.Accum#1: 5
      //DEBUG: e.Text#1: 2
      {refalrts::icEmptyResult, 0, 0, 0},
      //TRASH: {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 Reuse: & ReadBody/4 AsIs: (/7 AsIs: e.Accum#1/5 HalfReuse: 'O'/8 HalfReuse: )/9 AsIs: e.Text#1/15(2) AsIs: >/1 ]] }
      {refalrts::icUpdateFunc, 0, 1, 4},
      {refalrts::icReinitChar, 0, 'O', 8},
      {refalrts::icReinitBracket, 0, refalrts::ibCloseBracket, 9},
      {refalrts::icPushStack, 0, 0, 1},
      {refalrts::icPushStack, 0, 0, 0},
      {refalrts::icLinkBrackets, 7, 9, 0},
      {refalrts::icNextStep, 0, 0, 0},
      {refalrts::icProfilerStopSentence, 0, 0, 0},
      {refalrts::icOnFailGoTo, +10, 0, 0},
      // ( e.idx ) 'P' e.idx
      // </0 & ReadInclude/4 (/7 e.Accum#1/5 )/8 'P'/9 e.Text#1/2 >/1
      {refalrts::icSave, 0, 15, 2},
      {refalrts::icCharLeftSave, 9, static_cast<unsigned char>('P'), 15},
      // closed e.Accum#1 as range 5
      // closed e.Text#1 as range 15(2)
      //DEBUG: e.Accum#1: 5
      //DEBUG: e.Text#1: 2
      {refalrts::icEmptyResult, 0, 0, 0},
      //TRASH: {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 Reuse: & ReadBody/4 AsIs: (/7 AsIs: e.Accum#1/5 HalfReuse: 'P'/8 HalfReuse: )/9 AsIs: e.Text#1/15(2) AsIs: >/1 ]] }
      {refalrts::icUpdateFunc, 0, 1, 4},
      {refalrts::icReinitChar, 0, 'P', 8},
      {refalrts::icReinitBracket, 0, refalrts::ibCloseBracket, 9},
      {refalrts::icPushStack, 0, 0, 1},
      {refalrts::icPushStack, 0, 0, 0},
      {refalrts::icLinkBrackets, 7, 9, 0},
      {refalrts::icNextStep, 0, 0, 0},
      {refalrts::icProfilerStopSentence, 0, 0, 0},
      {refalrts::icOnFailGoTo, +10, 0, 0},
      // ( e.idx ) 'Q' e.idx
      // </0 & ReadInclude/4 (/7 e.Accum#1/5 )/8 'Q'/9 e.Text#1/2 >/1
      {refalrts::icSave, 0, 15, 2},
      {refalrts::icCharLeftSave, 9, static_cast<unsigned char>('Q'), 15},
      // closed e.Accum#1 as range 5
      // closed e.Text#1 as range 15(2)
      //DEBUG: e.Accum#1: 5
      //DEBUG: e.Text#1: 2
      {refalrts::icEmptyResult, 0, 0, 0},
      //TRASH: {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 Reuse: & ReadBody/4 AsIs: (/7 AsIs: e.Accum#1/5 HalfReuse: 'Q'/8 HalfReuse: )/9 AsIs: e.Text#1/15(2) AsIs: >/1 ]] }
      {refalrts::icUpdateFunc, 0, 1, 4},
      {refalrts::icReinitChar, 0, 'Q', 8},
      {refalrts::icReinitBracket, 0, refalrts::ibCloseBracket, 9},
      {refalrts::icPushStack, 0, 0, 1},
      {refalrts::icPushStack, 0, 0, 0},
      {refalrts::icLinkBrackets, 7, 9, 0},
      {refalrts::icNextStep, 0, 0, 0},
      {refalrts::icProfilerStopSentence, 0, 0, 0},
      {refalrts::icOnFailGoTo, +10, 0, 0},
      // ( e.idx ) 'R' e.idx
      // </0 & ReadInclude/4 (/7 e.Accum#1/5 )/8 'R'/9 e.Text#1/2 >/1
      {refalrts::icSave, 0, 15, 2},
      {refalrts::icCharLeftSave, 9, static_cast<unsigned char>('R'), 15},
      // closed e.Accum#1 as range 5
      // closed e.Text#1 as range 15(2)
      //DEBUG: e.Accum#1: 5
      //DEBUG: e.Text#1: 2
      {refalrts::icEmptyResult, 0, 0, 0},
      //TRASH: {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 Reuse: & ReadBody/4 AsIs: (/7 AsIs: e.Accum#1/5 HalfReuse: 'R'/8 HalfReuse: )/9 AsIs: e.Text#1/15(2) AsIs: >/1 ]] }
      {refalrts::icUpdateFunc, 0, 1, 4},
      {refalrts::icReinitChar, 0, 'R', 8},
      {refalrts::icReinitBracket, 0, refalrts::ibCloseBracket, 9},
      {refalrts::icPushStack, 0, 0, 1},
      {refalrts::icPushStack, 0, 0, 0},
      {refalrts::icLinkBrackets, 7, 9, 0},
      {refalrts::icNextStep, 0, 0, 0},
      {refalrts::icProfilerStopSentence, 0, 0, 0},
      {refalrts::icOnFailGoTo, +10, 0, 0},
      // ( e.idx ) 'S' e.idx
      // </0 & ReadInclude/4 (/7 e.Accum#1/5 )/8 'S'/9 e.Text#1/2 >/1
      {refalrts::icSave, 0, 15, 2},
      {refalrts::icCharLeftSave, 9, static_cast<unsigned char>('S'), 15},
      // closed e.Accum#1 as range 5
      // closed e.Text#1 as range 15(2)
      //DEBUG: e.Accum#1: 5
      //DEBUG: e.Text#1: 2
      {refalrts::icEmptyResult, 0, 0, 0},
      //TRASH: {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 Reuse: & ReadBody/4 AsIs: (/7 AsIs: e.Accum#1/5 HalfReuse: 'S'/8 HalfReuse: )/9 AsIs: e.Text#1/15(2) AsIs: >/1 ]] }
      {refalrts::icUpdateFunc, 0, 1, 4},
      {refalrts::icReinitChar, 0, 'S', 8},
      {refalrts::icReinitBracket, 0, refalrts::ibCloseBracket, 9},
      {refalrts::icPushStack, 0, 0, 1},
      {refalrts::icPushStack, 0, 0, 0},
      {refalrts::icLinkBrackets, 7, 9, 0},
      {refalrts::icNextStep, 0, 0, 0},
      {refalrts::icProfilerStopSentence, 0, 0, 0},
      {refalrts::icOnFailGoTo, +10, 0, 0},
      // ( e.idx ) 'T' e.idx
      // </0 & ReadInclude/4 (/7 e.Accum#1/5 )/8 'T'/9 e.Text#1/2 >/1
      {refalrts::icSave, 0, 15, 2},
      {refalrts::icCharLeftSave, 9, static_cast<unsigned char>('T'), 15},
      // closed e.Accum#1 as range 5
      // closed e.Text#1 as range 15(2)
      //DEBUG: e.Accum#1: 5
      //DEBUG: e.Text#1: 2
      {refalrts::icEmptyResult, 0, 0, 0},
      //TRASH: {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 Reuse: & ReadBody/4 AsIs: (/7 AsIs: e.Accum#1/5 HalfReuse: 'T'/8 HalfReuse: )/9 AsIs: e.Text#1/15(2) AsIs: >/1 ]] }
      {refalrts::icUpdateFunc, 0, 1, 4},
      {refalrts::icReinitChar, 0, 'T', 8},
      {refalrts::icReinitBracket, 0, refalrts::ibCloseBracket, 9},
      {refalrts::icPushStack, 0, 0, 1},
      {refalrts::icPushStack, 0, 0, 0},
      {refalrts::icLinkBrackets, 7, 9, 0},
      {refalrts::icNextStep, 0, 0, 0},
      {refalrts::icProfilerStopSentence, 0, 0, 0},
      {refalrts::icOnFailGoTo, +10, 0, 0},
      // ( e.idx ) 'U' e.idx
      // </0 & ReadInclude/4 (/7 e.Accum#1/5 )/8 'U'/9 e.Text#1/2 >/1
      {refalrts::icSave, 0, 15, 2},
      {refalrts::icCharLeftSave, 9, static_cast<unsigned char>('U'), 15},
      // closed e.Accum#1 as range 5
      // closed e.Text#1 as range 15(2)
      //DEBUG: e.Accum#1: 5
      //DEBUG: e.Text#1: 2
      {refalrts::icEmptyResult, 0, 0, 0},
      //TRASH: {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 Reuse: & ReadBody/4 AsIs: (/7 AsIs: e.Accum#1/5 HalfReuse: 'U'/8 HalfReuse: )/9 AsIs: e.Text#1/15(2) AsIs: >/1 ]] }
      {refalrts::icUpdateFunc, 0, 1, 4},
      {refalrts::icReinitChar, 0, 'U', 8},
      {refalrts::icReinitBracket, 0, refalrts::ibCloseBracket, 9},
      {refalrts::icPushStack, 0, 0, 1},
      {refalrts::icPushStack, 0, 0, 0},
      {refalrts::icLinkBrackets, 7, 9, 0},
      {refalrts::icNextStep, 0, 0, 0},
      {refalrts::icProfilerStopSentence, 0, 0, 0},
      {refalrts::icOnFailGoTo, +10, 0, 0},
      // ( e.idx ) 'V' e.idx
      // </0 & ReadInclude/4 (/7 e.Accum#1/5 )/8 'V'/9 e.Text#1/2 >/1
      {refalrts::icSave, 0, 15, 2},
      {refalrts::icCharLeftSave, 9, static_cast<unsigned char>('V'), 15},
      // closed e.Accum#1 as range 5
      // closed e.Text#1 as range 15(2)
      //DEBUG: e.Accum#1: 5
      //DEBUG: e.Text#1: 2
      {refalrts::icEmptyResult, 0, 0, 0},
      //TRASH: {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 Reuse: & ReadBody/4 AsIs: (/7 AsIs: e.Accum#1/5 HalfReuse: 'V'/8 HalfReuse: )/9 AsIs: e.Text#1/15(2) AsIs: >/1 ]] }
      {refalrts::icUpdateFunc, 0, 1, 4},
      {refalrts::icReinitChar, 0, 'V', 8},
      {refalrts::icReinitBracket, 0, refalrts::ibCloseBracket, 9},
      {refalrts::icPushStack, 0, 0, 1},
      {refalrts::icPushStack, 0, 0, 0},
      {refalrts::icLinkBrackets, 7, 9, 0},
      {refalrts::icNextStep, 0, 0, 0},
      {refalrts::icProfilerStopSentence, 0, 0, 0},
      {refalrts::icOnFailGoTo, +10, 0, 0},
      // ( e.idx ) 'W' e.idx
      // </0 & ReadInclude/4 (/7 e.Accum#1/5 )/8 'W'/9 e.Text#1/2 >/1
      {refalrts::icSave, 0, 15, 2},
      {refalrts::icCharLeftSave, 9, static_cast<unsigned char>('W'), 15},
      // closed e.Accum#1 as range 5
      // closed e.Text#1 as range 15(2)
      //DEBUG: e.Accum#1: 5
      //DEBUG: e.Text#1: 2
      {refalrts::icEmptyResult, 0, 0, 0},
      //TRASH: {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 Reuse: & ReadBody/4 AsIs: (/7 AsIs: e.Accum#1/5 HalfReuse: 'W'/8 HalfReuse: )/9 AsIs: e.Text#1/15(2) AsIs: >/1 ]] }
      {refalrts::icUpdateFunc, 0, 1, 4},
      {refalrts::icReinitChar, 0, 'W', 8},
      {refalrts::icReinitBracket, 0, refalrts::ibCloseBracket, 9},
      {refalrts::icPushStack, 0, 0, 1},
      {refalrts::icPushStack, 0, 0, 0},
      {refalrts::icLinkBrackets, 7, 9, 0},
      {refalrts::icNextStep, 0, 0, 0},
      {refalrts::icProfilerStopSentence, 0, 0, 0},
      {refalrts::icOnFailGoTo, +10, 0, 0},
      // ( e.idx ) 'X' e.idx
      // </0 & ReadInclude/4 (/7 e.Accum#1/5 )/8 'X'/9 e.Text#1/2 >/1
      {refalrts::icSave, 0, 15, 2},
      {refalrts::icCharLeftSave, 9, static_cast<unsigned char>('X'), 15},
      // closed e.Accum#1 as range 5
      // closed e.Text#1 as range 15(2)
      //DEBUG: e.Accum#1: 5
      //DEBUG: e.Text#1: 2
      {refalrts::icEmptyResult, 0, 0, 0},
      //TRASH: {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 Reuse: & ReadBody/4 AsIs: (/7 AsIs: e.Accum#1/5 HalfReuse: 'X'/8 HalfReuse: )/9 AsIs: e.Text#1/15(2) AsIs: >/1 ]] }
      {refalrts::icUpdateFunc, 0, 1, 4},
      {refalrts::icReinitChar, 0, 'X', 8},
      {refalrts::icReinitBracket, 0, refalrts::ibCloseBracket, 9},
      {refalrts::icPushStack, 0, 0, 1},
      {refalrts::icPushStack, 0, 0, 0},
      {refalrts::icLinkBrackets, 7, 9, 0},
      {refalrts::icNextStep, 0, 0, 0},
      {refalrts::icProfilerStopSentence, 0, 0, 0},
      {refalrts::icOnFailGoTo, +10, 0, 0},
      // ( e.idx ) 'Y' e.idx
      // </0 & ReadInclude/4 (/7 e.Accum#1/5 )/8 'Y'/9 e.Text#1/2 >/1
      {refalrts::icSave, 0, 15, 2},
      {refalrts::icCharLeftSave, 9, static_cast<unsigned char>('Y'), 15},
      // closed e.Accum#1 as range 5
      // closed e.Text#1 as range 15(2)
      //DEBUG: e.Accum#1: 5
      //DEBUG: e.Text#1: 2
      {refalrts::icEmptyResult, 0, 0, 0},
      //TRASH: {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 Reuse: & ReadBody/4 AsIs: (/7 AsIs: e.Accum#1/5 HalfReuse: 'Y'/8 HalfReuse: )/9 AsIs: e.Text#1/15(2) AsIs: >/1 ]] }
      {refalrts::icUpdateFunc, 0, 1, 4},
      {refalrts::icReinitChar, 0, 'Y', 8},
      {refalrts::icReinitBracket, 0, refalrts::ibCloseBracket, 9},
      {refalrts::icPushStack, 0, 0, 1},
      {refalrts::icPushStack, 0, 0, 0},
      {refalrts::icLinkBrackets, 7, 9, 0},
      {refalrts::icNextStep, 0, 0, 0},
      {refalrts::icProfilerStopSentence, 0, 0, 0},
      {refalrts::icOnFailGoTo, +10, 0, 0},
      // ( e.idx ) 'Z' e.idx
      // </0 & ReadInclude/4 (/7 e.Accum#1/5 )/8 'Z'/9 e.Text#1/2 >/1
      {refalrts::icSave, 0, 15, 2},
      {refalrts::icCharLeftSave, 9, static_cast<unsigned char>('Z'), 15},
      // closed e.Accum#1 as range 5
      // closed e.Text#1 as range 15(2)
      //DEBUG: e.Accum#1: 5
      //DEBUG: e.Text#1: 2
      {refalrts::icEmptyResult, 0, 0, 0},
      //TRASH: {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 Reuse: & ReadBody/4 AsIs: (/7 AsIs: e.Accum#1/5 HalfReuse: 'Z'/8 HalfReuse: )/9 AsIs: e.Text#1/15(2) AsIs: >/1 ]] }
      {refalrts::icUpdateFunc, 0, 1, 4},
      {refalrts::icReinitChar, 0, 'Z', 8},
      {refalrts::icReinitBracket, 0, refalrts::ibCloseBracket, 9},
      {refalrts::icPushStack, 0, 0, 1},
      {refalrts::icPushStack, 0, 0, 0},
      {refalrts::icLinkBrackets, 7, 9, 0},
      {refalrts::icNextStep, 0, 0, 0},
      {refalrts::icProfilerStopSentence, 0, 0, 0},
      {refalrts::icOnFailGoTo, +20, 0, 0},
      // ( e.idx ) s.idx e.idx
      // </0 & ReadInclude/4 (/7 e.Accum#1/5 )/8 s.Any#1/9 e.Text#1/2 >/1
      // closed e.Accum#1 as range 5
      {refalrts::icSave, 0, 15, 2},
      {refalrts::icsVarLeft, 0, 9, 15},
      // closed e.Text#1 as range 15(2)
      //DEBUG: e.Accum#1: 5
      //DEBUG: s.Any#1: 9
      //DEBUG: e.Text#1: 2
      {refalrts::icEmptyResult, 0, 0, 0},
      //TRASH: {REMOVED TILE} {REMOVED TILE} e.Accum#1/5 {REMOVED TILE} s.Any#1/9 {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ } (/10 # TokenError/11"Expected Name in Include"/12 Tile{ AsIs: )/8 } Tile{ AsIs: </0 Reuse: & ReadRegexp/4 AsIs: (/7 } )/14 Tile{ AsIs: e.Text#1/15(2) } Tile{ AsIs: >/1 ]] }
      {refalrts::icAllocBracket, 0, refalrts::ibOpenBracket, 10},
      {refalrts::icAllocIdent, 0, 0, 11},
      {refalrts::icAllocString, 0, 1, 12},
      {refalrts::icAllocBracket, 0, refalrts::ibCloseBracket, 14},
      {refalrts::icUpdateFunc, 0, 0, 4},
      {refalrts::icPushStack, 0, 0, 1},
      {refalrts::icPushStack, 0, 0, 0},
      {refalrts::icLinkBrackets, 7, 14, 0},
      {refalrts::icLinkBrackets, 10, 8, 0},
      {refalrts::icSetRes, 0, 0, 1},
      {refalrts::icSpliceEVar, 0, 0, 15},
      {refalrts::icSpliceTile, 14, 14, 0},
      {refalrts::icSpliceTile, 0, 7, 0},
      {refalrts::icSpliceTile, 8, 8, 0},
      {refalrts::icSpliceTile, 10, 13, 0},
      {refalrts::icTrashLeftEdge, 0, 0, 0},
      {refalrts::icNextStep, 0, 0, 0},
      {refalrts::icProfilerStopSentence, 0, 0, 0},
      // ( e.idx )
      // </0 & ReadInclude/4 (/7 e.Accum#1/5 )/8 >/1
      {refalrts::icEmpty, 0, 0, 2},
      // closed e.Accum#1 as range 5
      //DEBUG: e.Accum#1: 5
      {refalrts::icEmptyResult, 0, 0, 0},
      //TRASH: {REMOVED TILE} e.Accum#1/5 {REMOVED TILE}
      //RESULT: Tile{ [[ HalfReuse: (/0 HalfReuse: # TokenError/4 HalfReuse: 'U'/7 }"nexpected EOF in Includ"/9 Tile{ HalfReuse: 'e'/8 HalfReuse: )/1 ]] }
      {refalrts::icAllocString, 0, 0, 9},
      {refalrts::icReinitBracket, 0, refalrts::ibOpenBracket, 0},
      {refalrts::icReinitIdent, 0, 0, 4},
      {refalrts::icReinitChar, 0, 'U', 7},
      {refalrts::icReinitChar, 0, 'e', 8},
      {refalrts::icReinitBracket, 0, refalrts::ibCloseBracket, 1},
      {refalrts::icLinkBrackets, 0, 1, 0},
      {refalrts::icSetRes, 0, 0, 8},
      {refalrts::icSpliceTile, 9, 10, 0},
      {refalrts::icTrash, 0, 0, 7},
      {refalrts::icNextStep, 0, 0, 0},
      {refalrts::icEnd, 0, 0, 0}
    };
  } // namespace scope_ReadInclude

} // unnamed namespace

namespace /* unnamed */ {
refalrts::RASLFunction descr_ReadInclude(
  "ReadInclude",
  scope_ReadInclude::raa,
  scope_ReadInclude::functions,
  scope_ReadInclude::idents,
  scope_ReadInclude::numbers,
  scope_ReadInclude::strings,
  scope_ReadInclude::filename
);
refalrts::RefalFunction& ReadInclude = descr_ReadInclude;

} // unnamed namespace

#else
static refalrts::FnResult func_ReadInclude(refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  refalrts::this_is_generated_function();
  // issue here memory for vars with 17 elems
  refalrts::Iter context[17];
  refalrts::zeros( context, 17 );
  //FAST GEN: e.$
  //GLOBAL GEN: ( e.$ ) e.$
  // </0 & ReadInclude/4 (/7 e.idxB#0/5 )/8 e.idxT#0/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  context[5] = 0;
  context[6] = 0;
  context[7] = refalrts::brackets_left( context[5], context[6], context[2], context[3] );
  if( ! context[7] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[7], context[8]);
  // closed e.idxB#0 as range 5
  // closed e.idxT#0 as range 2
  do {
    // ( e.idx ) 'A' e.idx
    // </0 & ReadInclude/4 (/7 e.Accum#1/5 )/8 'A'/9 e.Text#1/2 >/1
    context[15] = context[2];
    context[16] = context[3];
    context[9] = refalrts::char_left( 'A', context[15], context[16] );
    if( ! context[9] )
      continue;
    // closed e.Accum#1 as range 5
    // closed e.Text#1 as range 15(2)
    //DEBUG: e.Accum#1: 5
    //DEBUG: e.Text#1: 2

    refalrts::reset_allocator();
    //TRASH: {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 Reuse: & ReadBody/4 AsIs: (/7 AsIs: e.Accum#1/5 HalfReuse: 'A'/8 HalfReuse: )/9 AsIs: e.Text#1/15(2) AsIs: >/1 ]] }
    refalrts::update_name( context[4], & ReadBody );
    refalrts::reinit_char( context[8], 'A' );
    refalrts::reinit_close_bracket( context[9] );
    refalrts::push_stack( context[1] );
    refalrts::push_stack( context[0] );
    refalrts::link_brackets( context[7], context[9] );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence();

  do {
    // ( e.idx ) 'B' e.idx
    // </0 & ReadInclude/4 (/7 e.Accum#1/5 )/8 'B'/9 e.Text#1/2 >/1
    context[15] = context[2];
    context[16] = context[3];
    context[9] = refalrts::char_left( 'B', context[15], context[16] );
    if( ! context[9] )
      continue;
    // closed e.Accum#1 as range 5
    // closed e.Text#1 as range 15(2)
    //DEBUG: e.Accum#1: 5
    //DEBUG: e.Text#1: 2

    refalrts::reset_allocator();
    //TRASH: {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 Reuse: & ReadBody/4 AsIs: (/7 AsIs: e.Accum#1/5 HalfReuse: 'B'/8 HalfReuse: )/9 AsIs: e.Text#1/15(2) AsIs: >/1 ]] }
    refalrts::update_name( context[4], & ReadBody );
    refalrts::reinit_char( context[8], 'B' );
    refalrts::reinit_close_bracket( context[9] );
    refalrts::push_stack( context[1] );
    refalrts::push_stack( context[0] );
    refalrts::link_brackets( context[7], context[9] );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence();

  do {
    // ( e.idx ) 'C' e.idx
    // </0 & ReadInclude/4 (/7 e.Accum#1/5 )/8 'C'/9 e.Text#1/2 >/1
    context[15] = context[2];
    context[16] = context[3];
    context[9] = refalrts::char_left( 'C', context[15], context[16] );
    if( ! context[9] )
      continue;
    // closed e.Accum#1 as range 5
    // closed e.Text#1 as range 15(2)
    //DEBUG: e.Accum#1: 5
    //DEBUG: e.Text#1: 2

    refalrts::reset_allocator();
    //TRASH: {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 Reuse: & ReadBody/4 AsIs: (/7 AsIs: e.Accum#1/5 HalfReuse: 'C'/8 HalfReuse: )/9 AsIs: e.Text#1/15(2) AsIs: >/1 ]] }
    refalrts::update_name( context[4], & ReadBody );
    refalrts::reinit_char( context[8], 'C' );
    refalrts::reinit_close_bracket( context[9] );
    refalrts::push_stack( context[1] );
    refalrts::push_stack( context[0] );
    refalrts::link_brackets( context[7], context[9] );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence();

  do {
    // ( e.idx ) 'D' e.idx
    // </0 & ReadInclude/4 (/7 e.Accum#1/5 )/8 'D'/9 e.Text#1/2 >/1
    context[15] = context[2];
    context[16] = context[3];
    context[9] = refalrts::char_left( 'D', context[15], context[16] );
    if( ! context[9] )
      continue;
    // closed e.Accum#1 as range 5
    // closed e.Text#1 as range 15(2)
    //DEBUG: e.Accum#1: 5
    //DEBUG: e.Text#1: 2

    refalrts::reset_allocator();
    //TRASH: {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 Reuse: & ReadBody/4 AsIs: (/7 AsIs: e.Accum#1/5 HalfReuse: 'D'/8 HalfReuse: )/9 AsIs: e.Text#1/15(2) AsIs: >/1 ]] }
    refalrts::update_name( context[4], & ReadBody );
    refalrts::reinit_char( context[8], 'D' );
    refalrts::reinit_close_bracket( context[9] );
    refalrts::push_stack( context[1] );
    refalrts::push_stack( context[0] );
    refalrts::link_brackets( context[7], context[9] );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence();

  do {
    // ( e.idx ) 'E' e.idx
    // </0 & ReadInclude/4 (/7 e.Accum#1/5 )/8 'E'/9 e.Text#1/2 >/1
    context[15] = context[2];
    context[16] = context[3];
    context[9] = refalrts::char_left( 'E', context[15], context[16] );
    if( ! context[9] )
      continue;
    // closed e.Accum#1 as range 5
    // closed e.Text#1 as range 15(2)
    //DEBUG: e.Accum#1: 5
    //DEBUG: e.Text#1: 2

    refalrts::reset_allocator();
    //TRASH: {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 Reuse: & ReadBody/4 AsIs: (/7 AsIs: e.Accum#1/5 HalfReuse: 'E'/8 HalfReuse: )/9 AsIs: e.Text#1/15(2) AsIs: >/1 ]] }
    refalrts::update_name( context[4], & ReadBody );
    refalrts::reinit_char( context[8], 'E' );
    refalrts::reinit_close_bracket( context[9] );
    refalrts::push_stack( context[1] );
    refalrts::push_stack( context[0] );
    refalrts::link_brackets( context[7], context[9] );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence();

  do {
    // ( e.idx ) 'F' e.idx
    // </0 & ReadInclude/4 (/7 e.Accum#1/5 )/8 'F'/9 e.Text#1/2 >/1
    context[15] = context[2];
    context[16] = context[3];
    context[9] = refalrts::char_left( 'F', context[15], context[16] );
    if( ! context[9] )
      continue;
    // closed e.Accum#1 as range 5
    // closed e.Text#1 as range 15(2)
    //DEBUG: e.Accum#1: 5
    //DEBUG: e.Text#1: 2

    refalrts::reset_allocator();
    //TRASH: {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 Reuse: & ReadBody/4 AsIs: (/7 AsIs: e.Accum#1/5 HalfReuse: 'F'/8 HalfReuse: )/9 AsIs: e.Text#1/15(2) AsIs: >/1 ]] }
    refalrts::update_name( context[4], & ReadBody );
    refalrts::reinit_char( context[8], 'F' );
    refalrts::reinit_close_bracket( context[9] );
    refalrts::push_stack( context[1] );
    refalrts::push_stack( context[0] );
    refalrts::link_brackets( context[7], context[9] );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence();

  do {
    // ( e.idx ) 'G' e.idx
    // </0 & ReadInclude/4 (/7 e.Accum#1/5 )/8 'G'/9 e.Text#1/2 >/1
    context[15] = context[2];
    context[16] = context[3];
    context[9] = refalrts::char_left( 'G', context[15], context[16] );
    if( ! context[9] )
      continue;
    // closed e.Accum#1 as range 5
    // closed e.Text#1 as range 15(2)
    //DEBUG: e.Accum#1: 5
    //DEBUG: e.Text#1: 2

    refalrts::reset_allocator();
    //TRASH: {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 Reuse: & ReadBody/4 AsIs: (/7 AsIs: e.Accum#1/5 HalfReuse: 'G'/8 HalfReuse: )/9 AsIs: e.Text#1/15(2) AsIs: >/1 ]] }
    refalrts::update_name( context[4], & ReadBody );
    refalrts::reinit_char( context[8], 'G' );
    refalrts::reinit_close_bracket( context[9] );
    refalrts::push_stack( context[1] );
    refalrts::push_stack( context[0] );
    refalrts::link_brackets( context[7], context[9] );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence();

  do {
    // ( e.idx ) 'H' e.idx
    // </0 & ReadInclude/4 (/7 e.Accum#1/5 )/8 'H'/9 e.Text#1/2 >/1
    context[15] = context[2];
    context[16] = context[3];
    context[9] = refalrts::char_left( 'H', context[15], context[16] );
    if( ! context[9] )
      continue;
    // closed e.Accum#1 as range 5
    // closed e.Text#1 as range 15(2)
    //DEBUG: e.Accum#1: 5
    //DEBUG: e.Text#1: 2

    refalrts::reset_allocator();
    //TRASH: {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 Reuse: & ReadBody/4 AsIs: (/7 AsIs: e.Accum#1/5 HalfReuse: 'H'/8 HalfReuse: )/9 AsIs: e.Text#1/15(2) AsIs: >/1 ]] }
    refalrts::update_name( context[4], & ReadBody );
    refalrts::reinit_char( context[8], 'H' );
    refalrts::reinit_close_bracket( context[9] );
    refalrts::push_stack( context[1] );
    refalrts::push_stack( context[0] );
    refalrts::link_brackets( context[7], context[9] );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence();

  do {
    // ( e.idx ) 'I' e.idx
    // </0 & ReadInclude/4 (/7 e.Accum#1/5 )/8 'I'/9 e.Text#1/2 >/1
    context[15] = context[2];
    context[16] = context[3];
    context[9] = refalrts::char_left( 'I', context[15], context[16] );
    if( ! context[9] )
      continue;
    // closed e.Accum#1 as range 5
    // closed e.Text#1 as range 15(2)
    //DEBUG: e.Accum#1: 5
    //DEBUG: e.Text#1: 2

    refalrts::reset_allocator();
    //TRASH: {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 Reuse: & ReadBody/4 AsIs: (/7 AsIs: e.Accum#1/5 HalfReuse: 'I'/8 HalfReuse: )/9 AsIs: e.Text#1/15(2) AsIs: >/1 ]] }
    refalrts::update_name( context[4], & ReadBody );
    refalrts::reinit_char( context[8], 'I' );
    refalrts::reinit_close_bracket( context[9] );
    refalrts::push_stack( context[1] );
    refalrts::push_stack( context[0] );
    refalrts::link_brackets( context[7], context[9] );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence();

  do {
    // ( e.idx ) 'J' e.idx
    // </0 & ReadInclude/4 (/7 e.Accum#1/5 )/8 'J'/9 e.Text#1/2 >/1
    context[15] = context[2];
    context[16] = context[3];
    context[9] = refalrts::char_left( 'J', context[15], context[16] );
    if( ! context[9] )
      continue;
    // closed e.Accum#1 as range 5
    // closed e.Text#1 as range 15(2)
    //DEBUG: e.Accum#1: 5
    //DEBUG: e.Text#1: 2

    refalrts::reset_allocator();
    //TRASH: {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 Reuse: & ReadBody/4 AsIs: (/7 AsIs: e.Accum#1/5 HalfReuse: 'J'/8 HalfReuse: )/9 AsIs: e.Text#1/15(2) AsIs: >/1 ]] }
    refalrts::update_name( context[4], & ReadBody );
    refalrts::reinit_char( context[8], 'J' );
    refalrts::reinit_close_bracket( context[9] );
    refalrts::push_stack( context[1] );
    refalrts::push_stack( context[0] );
    refalrts::link_brackets( context[7], context[9] );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence();

  do {
    // ( e.idx ) 'K' e.idx
    // </0 & ReadInclude/4 (/7 e.Accum#1/5 )/8 'K'/9 e.Text#1/2 >/1
    context[15] = context[2];
    context[16] = context[3];
    context[9] = refalrts::char_left( 'K', context[15], context[16] );
    if( ! context[9] )
      continue;
    // closed e.Accum#1 as range 5
    // closed e.Text#1 as range 15(2)
    //DEBUG: e.Accum#1: 5
    //DEBUG: e.Text#1: 2

    refalrts::reset_allocator();
    //TRASH: {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 Reuse: & ReadBody/4 AsIs: (/7 AsIs: e.Accum#1/5 HalfReuse: 'K'/8 HalfReuse: )/9 AsIs: e.Text#1/15(2) AsIs: >/1 ]] }
    refalrts::update_name( context[4], & ReadBody );
    refalrts::reinit_char( context[8], 'K' );
    refalrts::reinit_close_bracket( context[9] );
    refalrts::push_stack( context[1] );
    refalrts::push_stack( context[0] );
    refalrts::link_brackets( context[7], context[9] );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence();

  do {
    // ( e.idx ) 'L' e.idx
    // </0 & ReadInclude/4 (/7 e.Accum#1/5 )/8 'L'/9 e.Text#1/2 >/1
    context[15] = context[2];
    context[16] = context[3];
    context[9] = refalrts::char_left( 'L', context[15], context[16] );
    if( ! context[9] )
      continue;
    // closed e.Accum#1 as range 5
    // closed e.Text#1 as range 15(2)
    //DEBUG: e.Accum#1: 5
    //DEBUG: e.Text#1: 2

    refalrts::reset_allocator();
    //TRASH: {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 Reuse: & ReadBody/4 AsIs: (/7 AsIs: e.Accum#1/5 HalfReuse: 'L'/8 HalfReuse: )/9 AsIs: e.Text#1/15(2) AsIs: >/1 ]] }
    refalrts::update_name( context[4], & ReadBody );
    refalrts::reinit_char( context[8], 'L' );
    refalrts::reinit_close_bracket( context[9] );
    refalrts::push_stack( context[1] );
    refalrts::push_stack( context[0] );
    refalrts::link_brackets( context[7], context[9] );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence();

  do {
    // ( e.idx ) 'M' e.idx
    // </0 & ReadInclude/4 (/7 e.Accum#1/5 )/8 'M'/9 e.Text#1/2 >/1
    context[15] = context[2];
    context[16] = context[3];
    context[9] = refalrts::char_left( 'M', context[15], context[16] );
    if( ! context[9] )
      continue;
    // closed e.Accum#1 as range 5
    // closed e.Text#1 as range 15(2)
    //DEBUG: e.Accum#1: 5
    //DEBUG: e.Text#1: 2

    refalrts::reset_allocator();
    //TRASH: {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 Reuse: & ReadBody/4 AsIs: (/7 AsIs: e.Accum#1/5 HalfReuse: 'M'/8 HalfReuse: )/9 AsIs: e.Text#1/15(2) AsIs: >/1 ]] }
    refalrts::update_name( context[4], & ReadBody );
    refalrts::reinit_char( context[8], 'M' );
    refalrts::reinit_close_bracket( context[9] );
    refalrts::push_stack( context[1] );
    refalrts::push_stack( context[0] );
    refalrts::link_brackets( context[7], context[9] );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence();

  do {
    // ( e.idx ) 'N' e.idx
    // </0 & ReadInclude/4 (/7 e.Accum#1/5 )/8 'N'/9 e.Text#1/2 >/1
    context[15] = context[2];
    context[16] = context[3];
    context[9] = refalrts::char_left( 'N', context[15], context[16] );
    if( ! context[9] )
      continue;
    // closed e.Accum#1 as range 5
    // closed e.Text#1 as range 15(2)
    //DEBUG: e.Accum#1: 5
    //DEBUG: e.Text#1: 2

    refalrts::reset_allocator();
    //TRASH: {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 Reuse: & ReadBody/4 AsIs: (/7 AsIs: e.Accum#1/5 HalfReuse: 'N'/8 HalfReuse: )/9 AsIs: e.Text#1/15(2) AsIs: >/1 ]] }
    refalrts::update_name( context[4], & ReadBody );
    refalrts::reinit_char( context[8], 'N' );
    refalrts::reinit_close_bracket( context[9] );
    refalrts::push_stack( context[1] );
    refalrts::push_stack( context[0] );
    refalrts::link_brackets( context[7], context[9] );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence();

  do {
    // ( e.idx ) 'O' e.idx
    // </0 & ReadInclude/4 (/7 e.Accum#1/5 )/8 'O'/9 e.Text#1/2 >/1
    context[15] = context[2];
    context[16] = context[3];
    context[9] = refalrts::char_left( 'O', context[15], context[16] );
    if( ! context[9] )
      continue;
    // closed e.Accum#1 as range 5
    // closed e.Text#1 as range 15(2)
    //DEBUG: e.Accum#1: 5
    //DEBUG: e.Text#1: 2

    refalrts::reset_allocator();
    //TRASH: {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 Reuse: & ReadBody/4 AsIs: (/7 AsIs: e.Accum#1/5 HalfReuse: 'O'/8 HalfReuse: )/9 AsIs: e.Text#1/15(2) AsIs: >/1 ]] }
    refalrts::update_name( context[4], & ReadBody );
    refalrts::reinit_char( context[8], 'O' );
    refalrts::reinit_close_bracket( context[9] );
    refalrts::push_stack( context[1] );
    refalrts::push_stack( context[0] );
    refalrts::link_brackets( context[7], context[9] );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence();

  do {
    // ( e.idx ) 'P' e.idx
    // </0 & ReadInclude/4 (/7 e.Accum#1/5 )/8 'P'/9 e.Text#1/2 >/1
    context[15] = context[2];
    context[16] = context[3];
    context[9] = refalrts::char_left( 'P', context[15], context[16] );
    if( ! context[9] )
      continue;
    // closed e.Accum#1 as range 5
    // closed e.Text#1 as range 15(2)
    //DEBUG: e.Accum#1: 5
    //DEBUG: e.Text#1: 2

    refalrts::reset_allocator();
    //TRASH: {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 Reuse: & ReadBody/4 AsIs: (/7 AsIs: e.Accum#1/5 HalfReuse: 'P'/8 HalfReuse: )/9 AsIs: e.Text#1/15(2) AsIs: >/1 ]] }
    refalrts::update_name( context[4], & ReadBody );
    refalrts::reinit_char( context[8], 'P' );
    refalrts::reinit_close_bracket( context[9] );
    refalrts::push_stack( context[1] );
    refalrts::push_stack( context[0] );
    refalrts::link_brackets( context[7], context[9] );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence();

  do {
    // ( e.idx ) 'Q' e.idx
    // </0 & ReadInclude/4 (/7 e.Accum#1/5 )/8 'Q'/9 e.Text#1/2 >/1
    context[15] = context[2];
    context[16] = context[3];
    context[9] = refalrts::char_left( 'Q', context[15], context[16] );
    if( ! context[9] )
      continue;
    // closed e.Accum#1 as range 5
    // closed e.Text#1 as range 15(2)
    //DEBUG: e.Accum#1: 5
    //DEBUG: e.Text#1: 2

    refalrts::reset_allocator();
    //TRASH: {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 Reuse: & ReadBody/4 AsIs: (/7 AsIs: e.Accum#1/5 HalfReuse: 'Q'/8 HalfReuse: )/9 AsIs: e.Text#1/15(2) AsIs: >/1 ]] }
    refalrts::update_name( context[4], & ReadBody );
    refalrts::reinit_char( context[8], 'Q' );
    refalrts::reinit_close_bracket( context[9] );
    refalrts::push_stack( context[1] );
    refalrts::push_stack( context[0] );
    refalrts::link_brackets( context[7], context[9] );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence();

  do {
    // ( e.idx ) 'R' e.idx
    // </0 & ReadInclude/4 (/7 e.Accum#1/5 )/8 'R'/9 e.Text#1/2 >/1
    context[15] = context[2];
    context[16] = context[3];
    context[9] = refalrts::char_left( 'R', context[15], context[16] );
    if( ! context[9] )
      continue;
    // closed e.Accum#1 as range 5
    // closed e.Text#1 as range 15(2)
    //DEBUG: e.Accum#1: 5
    //DEBUG: e.Text#1: 2

    refalrts::reset_allocator();
    //TRASH: {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 Reuse: & ReadBody/4 AsIs: (/7 AsIs: e.Accum#1/5 HalfReuse: 'R'/8 HalfReuse: )/9 AsIs: e.Text#1/15(2) AsIs: >/1 ]] }
    refalrts::update_name( context[4], & ReadBody );
    refalrts::reinit_char( context[8], 'R' );
    refalrts::reinit_close_bracket( context[9] );
    refalrts::push_stack( context[1] );
    refalrts::push_stack( context[0] );
    refalrts::link_brackets( context[7], context[9] );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence();

  do {
    // ( e.idx ) 'S' e.idx
    // </0 & ReadInclude/4 (/7 e.Accum#1/5 )/8 'S'/9 e.Text#1/2 >/1
    context[15] = context[2];
    context[16] = context[3];
    context[9] = refalrts::char_left( 'S', context[15], context[16] );
    if( ! context[9] )
      continue;
    // closed e.Accum#1 as range 5
    // closed e.Text#1 as range 15(2)
    //DEBUG: e.Accum#1: 5
    //DEBUG: e.Text#1: 2

    refalrts::reset_allocator();
    //TRASH: {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 Reuse: & ReadBody/4 AsIs: (/7 AsIs: e.Accum#1/5 HalfReuse: 'S'/8 HalfReuse: )/9 AsIs: e.Text#1/15(2) AsIs: >/1 ]] }
    refalrts::update_name( context[4], & ReadBody );
    refalrts::reinit_char( context[8], 'S' );
    refalrts::reinit_close_bracket( context[9] );
    refalrts::push_stack( context[1] );
    refalrts::push_stack( context[0] );
    refalrts::link_brackets( context[7], context[9] );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence();

  do {
    // ( e.idx ) 'T' e.idx
    // </0 & ReadInclude/4 (/7 e.Accum#1/5 )/8 'T'/9 e.Text#1/2 >/1
    context[15] = context[2];
    context[16] = context[3];
    context[9] = refalrts::char_left( 'T', context[15], context[16] );
    if( ! context[9] )
      continue;
    // closed e.Accum#1 as range 5
    // closed e.Text#1 as range 15(2)
    //DEBUG: e.Accum#1: 5
    //DEBUG: e.Text#1: 2

    refalrts::reset_allocator();
    //TRASH: {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 Reuse: & ReadBody/4 AsIs: (/7 AsIs: e.Accum#1/5 HalfReuse: 'T'/8 HalfReuse: )/9 AsIs: e.Text#1/15(2) AsIs: >/1 ]] }
    refalrts::update_name( context[4], & ReadBody );
    refalrts::reinit_char( context[8], 'T' );
    refalrts::reinit_close_bracket( context[9] );
    refalrts::push_stack( context[1] );
    refalrts::push_stack( context[0] );
    refalrts::link_brackets( context[7], context[9] );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence();

  do {
    // ( e.idx ) 'U' e.idx
    // </0 & ReadInclude/4 (/7 e.Accum#1/5 )/8 'U'/9 e.Text#1/2 >/1
    context[15] = context[2];
    context[16] = context[3];
    context[9] = refalrts::char_left( 'U', context[15], context[16] );
    if( ! context[9] )
      continue;
    // closed e.Accum#1 as range 5
    // closed e.Text#1 as range 15(2)
    //DEBUG: e.Accum#1: 5
    //DEBUG: e.Text#1: 2

    refalrts::reset_allocator();
    //TRASH: {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 Reuse: & ReadBody/4 AsIs: (/7 AsIs: e.Accum#1/5 HalfReuse: 'U'/8 HalfReuse: )/9 AsIs: e.Text#1/15(2) AsIs: >/1 ]] }
    refalrts::update_name( context[4], & ReadBody );
    refalrts::reinit_char( context[8], 'U' );
    refalrts::reinit_close_bracket( context[9] );
    refalrts::push_stack( context[1] );
    refalrts::push_stack( context[0] );
    refalrts::link_brackets( context[7], context[9] );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence();

  do {
    // ( e.idx ) 'V' e.idx
    // </0 & ReadInclude/4 (/7 e.Accum#1/5 )/8 'V'/9 e.Text#1/2 >/1
    context[15] = context[2];
    context[16] = context[3];
    context[9] = refalrts::char_left( 'V', context[15], context[16] );
    if( ! context[9] )
      continue;
    // closed e.Accum#1 as range 5
    // closed e.Text#1 as range 15(2)
    //DEBUG: e.Accum#1: 5
    //DEBUG: e.Text#1: 2

    refalrts::reset_allocator();
    //TRASH: {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 Reuse: & ReadBody/4 AsIs: (/7 AsIs: e.Accum#1/5 HalfReuse: 'V'/8 HalfReuse: )/9 AsIs: e.Text#1/15(2) AsIs: >/1 ]] }
    refalrts::update_name( context[4], & ReadBody );
    refalrts::reinit_char( context[8], 'V' );
    refalrts::reinit_close_bracket( context[9] );
    refalrts::push_stack( context[1] );
    refalrts::push_stack( context[0] );
    refalrts::link_brackets( context[7], context[9] );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence();

  do {
    // ( e.idx ) 'W' e.idx
    // </0 & ReadInclude/4 (/7 e.Accum#1/5 )/8 'W'/9 e.Text#1/2 >/1
    context[15] = context[2];
    context[16] = context[3];
    context[9] = refalrts::char_left( 'W', context[15], context[16] );
    if( ! context[9] )
      continue;
    // closed e.Accum#1 as range 5
    // closed e.Text#1 as range 15(2)
    //DEBUG: e.Accum#1: 5
    //DEBUG: e.Text#1: 2

    refalrts::reset_allocator();
    //TRASH: {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 Reuse: & ReadBody/4 AsIs: (/7 AsIs: e.Accum#1/5 HalfReuse: 'W'/8 HalfReuse: )/9 AsIs: e.Text#1/15(2) AsIs: >/1 ]] }
    refalrts::update_name( context[4], & ReadBody );
    refalrts::reinit_char( context[8], 'W' );
    refalrts::reinit_close_bracket( context[9] );
    refalrts::push_stack( context[1] );
    refalrts::push_stack( context[0] );
    refalrts::link_brackets( context[7], context[9] );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence();

  do {
    // ( e.idx ) 'X' e.idx
    // </0 & ReadInclude/4 (/7 e.Accum#1/5 )/8 'X'/9 e.Text#1/2 >/1
    context[15] = context[2];
    context[16] = context[3];
    context[9] = refalrts::char_left( 'X', context[15], context[16] );
    if( ! context[9] )
      continue;
    // closed e.Accum#1 as range 5
    // closed e.Text#1 as range 15(2)
    //DEBUG: e.Accum#1: 5
    //DEBUG: e.Text#1: 2

    refalrts::reset_allocator();
    //TRASH: {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 Reuse: & ReadBody/4 AsIs: (/7 AsIs: e.Accum#1/5 HalfReuse: 'X'/8 HalfReuse: )/9 AsIs: e.Text#1/15(2) AsIs: >/1 ]] }
    refalrts::update_name( context[4], & ReadBody );
    refalrts::reinit_char( context[8], 'X' );
    refalrts::reinit_close_bracket( context[9] );
    refalrts::push_stack( context[1] );
    refalrts::push_stack( context[0] );
    refalrts::link_brackets( context[7], context[9] );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence();

  do {
    // ( e.idx ) 'Y' e.idx
    // </0 & ReadInclude/4 (/7 e.Accum#1/5 )/8 'Y'/9 e.Text#1/2 >/1
    context[15] = context[2];
    context[16] = context[3];
    context[9] = refalrts::char_left( 'Y', context[15], context[16] );
    if( ! context[9] )
      continue;
    // closed e.Accum#1 as range 5
    // closed e.Text#1 as range 15(2)
    //DEBUG: e.Accum#1: 5
    //DEBUG: e.Text#1: 2

    refalrts::reset_allocator();
    //TRASH: {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 Reuse: & ReadBody/4 AsIs: (/7 AsIs: e.Accum#1/5 HalfReuse: 'Y'/8 HalfReuse: )/9 AsIs: e.Text#1/15(2) AsIs: >/1 ]] }
    refalrts::update_name( context[4], & ReadBody );
    refalrts::reinit_char( context[8], 'Y' );
    refalrts::reinit_close_bracket( context[9] );
    refalrts::push_stack( context[1] );
    refalrts::push_stack( context[0] );
    refalrts::link_brackets( context[7], context[9] );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence();

  do {
    // ( e.idx ) 'Z' e.idx
    // </0 & ReadInclude/4 (/7 e.Accum#1/5 )/8 'Z'/9 e.Text#1/2 >/1
    context[15] = context[2];
    context[16] = context[3];
    context[9] = refalrts::char_left( 'Z', context[15], context[16] );
    if( ! context[9] )
      continue;
    // closed e.Accum#1 as range 5
    // closed e.Text#1 as range 15(2)
    //DEBUG: e.Accum#1: 5
    //DEBUG: e.Text#1: 2

    refalrts::reset_allocator();
    //TRASH: {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 Reuse: & ReadBody/4 AsIs: (/7 AsIs: e.Accum#1/5 HalfReuse: 'Z'/8 HalfReuse: )/9 AsIs: e.Text#1/15(2) AsIs: >/1 ]] }
    refalrts::update_name( context[4], & ReadBody );
    refalrts::reinit_char( context[8], 'Z' );
    refalrts::reinit_close_bracket( context[9] );
    refalrts::push_stack( context[1] );
    refalrts::push_stack( context[0] );
    refalrts::link_brackets( context[7], context[9] );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence();

  do {
    // ( e.idx ) s.idx e.idx
    // </0 & ReadInclude/4 (/7 e.Accum#1/5 )/8 s.Any#1/9 e.Text#1/2 >/1
    // closed e.Accum#1 as range 5
    context[15] = context[2];
    context[16] = context[3];
    if( ! refalrts::svar_left( context[9], context[15], context[16] ) )
      continue;
    // closed e.Text#1 as range 15(2)
    //DEBUG: e.Accum#1: 5
    //DEBUG: s.Any#1: 9
    //DEBUG: e.Text#1: 2

    refalrts::reset_allocator();
    //TRASH: {REMOVED TILE} {REMOVED TILE} e.Accum#1/5 {REMOVED TILE} s.Any#1/9 {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ } (/10 # TokenError/11"Expected Name in Include"/12 Tile{ AsIs: )/8 } Tile{ AsIs: </0 Reuse: & ReadRegexp/4 AsIs: (/7 } )/14 Tile{ AsIs: e.Text#1/15(2) } Tile{ AsIs: >/1 ]] }
    if( ! refalrts::alloc_open_bracket( context[10] ) )
      return refalrts::cNoMemory;
    if( ! refalrts::alloc_ident( context[11], & ident_TokenError<int>::name ) )
      return refalrts::cNoMemory;
    if( ! refalrts::alloc_chars( context[12], context[13], "Expected Name in Include", 24 ) )
      return refalrts::cNoMemory;
    if( ! refalrts::alloc_close_bracket( context[14] ) )
      return refalrts::cNoMemory;
    refalrts::update_name( context[4], & ReadRegexp );
    refalrts::push_stack( context[1] );
    refalrts::push_stack( context[0] );
    refalrts::link_brackets( context[7], context[14] );
    refalrts::link_brackets( context[10], context[8] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    res = refalrts::splice_evar( res, context[15], context[16] );
    res = refalrts::splice_evar( res, context[14], context[14] );
    res = refalrts::splice_evar( res, context[0], context[7] );
    res = refalrts::splice_evar( res, context[8], context[8] );
    res = refalrts::splice_evar( res, context[10], context[13] );
    refalrts::use( res );
    refalrts::splice_to_freelist_open( trash_prev, res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence();

  // ( e.idx )
  // </0 & ReadInclude/4 (/7 e.Accum#1/5 )/8 >/1
  if( ! refalrts::empty_seq( context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  // closed e.Accum#1 as range 5
  //DEBUG: e.Accum#1: 5

  refalrts::reset_allocator();
  //TRASH: {REMOVED TILE} e.Accum#1/5 {REMOVED TILE}
  //RESULT: Tile{ [[ HalfReuse: (/0 HalfReuse: # TokenError/4 HalfReuse: 'U'/7 }"nexpected EOF in Includ"/9 Tile{ HalfReuse: 'e'/8 HalfReuse: )/1 ]] }
  if( ! refalrts::alloc_chars( context[9], context[10], "nexpected EOF in Includ", 23 ) )
    return refalrts::cNoMemory;
  refalrts::reinit_open_bracket( context[0] );
  refalrts::reinit_ident( context[4], & ident_TokenError<int>::name );
  refalrts::reinit_char( context[7], 'U' );
  refalrts::reinit_char( context[8], 'e' );
  refalrts::reinit_close_bracket( context[1] );
  refalrts::link_brackets( context[0], context[1] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[8];
  res = refalrts::splice_evar( res, context[9], context[10] );
  refalrts::use( res );
  refalrts::splice_to_freelist_open( context[7], res );
  return refalrts::cSuccess;
}

namespace /* unnamed */ {
refalrts::RefalNativeFunction descr_ReadInclude(func_ReadInclude, "ReadInclude");
refalrts::RefalFunction& ReadInclude = descr_ReadInclude;

} // unnamed namespace

#endif
#ifdef INTERPRET
namespace /* unnamed */ {
  namespace scope_EscRegexp_XCode {
    static const char *filename = "Flex-Lexer.cpp";
    static refalrts::RefalFunction *functions[] = {
      & ReadRegexp
    };
    static const refalrts::RefalIdentifier idents[] = {
      & ident_TkHexNumber<int>::name
    };
    using refalrts::numbers;
    using refalrts::strings;
    static const refalrts::RASLCommand raa[] = {
      {refalrts::icThisIsGeneratedFunction, 0, 0, 0},
      {refalrts::icLoadConstants, 0, 0, 0},
      {refalrts::icReserveBacktrackStack, 22, 0, 0},
      {refalrts::icIssueMemory, 14, 0, 0},
      //FAST GEN: ( e.$ ) e.$
      //GLOBAL GEN: ( e.$ ) e.$
      // </0 & EscRegexp-XCode/4 (/7 e.idxB#0/5 )/8 e.idxT#0/2 >/1
      {refalrts::icInitB0_Lite, 0, 0, 0},
      {refalrts::icCallSaveLeft, 0, 2, 0},
      {refalrts::icBracketLeftSave, 0, 5, 2},
      // closed e.idxB#0 as range 5
      // closed e.idxT#0 as range 2
      {refalrts::icOnFailGoTo, +9, 0, 0},
      // ( e.idx ) '0' e.idx
      // </0 & EscRegexp-XCode/4 (/7 e.Accum#1/5 )/8 '0'/9 e.Text#1/2 >/1
      {refalrts::icSave, 0, 12, 2},
      {refalrts::icCharLeftSave, 9, static_cast<unsigned char>('0'), 12},
      // closed e.Accum#1 as range 5
      // closed e.Text#1 as range 12(2)
      //DEBUG: e.Accum#1: 5
      //DEBUG: e.Text#1: 2
      {refalrts::icEmptyResult, 0, 0, 0},
      //TRASH: {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 AsIs: & EscRegexp-XCode/4 AsIs: (/7 AsIs: e.Accum#1/5 HalfReuse: '0'/8 HalfReuse: )/9 AsIs: e.Text#1/12(2) AsIs: >/1 ]] }
      {refalrts::icReinitChar, 0, '0', 8},
      {refalrts::icReinitBracket, 0, refalrts::ibCloseBracket, 9},
      {refalrts::icPushStack, 0, 0, 1},
      {refalrts::icPushStack, 0, 0, 0},
      {refalrts::icLinkBrackets, 7, 9, 0},
      {refalrts::icNextStep, 0, 0, 0},
      {refalrts::icProfilerStopSentence, 0, 0, 0},
      {refalrts::icOnFailGoTo, +9, 0, 0},
      // ( e.idx ) '1' e.idx
      // </0 & EscRegexp-XCode/4 (/7 e.Accum#1/5 )/8 '1'/9 e.Text#1/2 >/1
      {refalrts::icSave, 0, 12, 2},
      {refalrts::icCharLeftSave, 9, static_cast<unsigned char>('1'), 12},
      // closed e.Accum#1 as range 5
      // closed e.Text#1 as range 12(2)
      //DEBUG: e.Accum#1: 5
      //DEBUG: e.Text#1: 2
      {refalrts::icEmptyResult, 0, 0, 0},
      //TRASH: {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 AsIs: & EscRegexp-XCode/4 AsIs: (/7 AsIs: e.Accum#1/5 HalfReuse: '1'/8 HalfReuse: )/9 AsIs: e.Text#1/12(2) AsIs: >/1 ]] }
      {refalrts::icReinitChar, 0, '1', 8},
      {refalrts::icReinitBracket, 0, refalrts::ibCloseBracket, 9},
      {refalrts::icPushStack, 0, 0, 1},
      {refalrts::icPushStack, 0, 0, 0},
      {refalrts::icLinkBrackets, 7, 9, 0},
      {refalrts::icNextStep, 0, 0, 0},
      {refalrts::icProfilerStopSentence, 0, 0, 0},
      {refalrts::icOnFailGoTo, +9, 0, 0},
      // ( e.idx ) '2' e.idx
      // </0 & EscRegexp-XCode/4 (/7 e.Accum#1/5 )/8 '2'/9 e.Text#1/2 >/1
      {refalrts::icSave, 0, 12, 2},
      {refalrts::icCharLeftSave, 9, static_cast<unsigned char>('2'), 12},
      // closed e.Accum#1 as range 5
      // closed e.Text#1 as range 12(2)
      //DEBUG: e.Accum#1: 5
      //DEBUG: e.Text#1: 2
      {refalrts::icEmptyResult, 0, 0, 0},
      //TRASH: {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 AsIs: & EscRegexp-XCode/4 AsIs: (/7 AsIs: e.Accum#1/5 HalfReuse: '2'/8 HalfReuse: )/9 AsIs: e.Text#1/12(2) AsIs: >/1 ]] }
      {refalrts::icReinitChar, 0, '2', 8},
      {refalrts::icReinitBracket, 0, refalrts::ibCloseBracket, 9},
      {refalrts::icPushStack, 0, 0, 1},
      {refalrts::icPushStack, 0, 0, 0},
      {refalrts::icLinkBrackets, 7, 9, 0},
      {refalrts::icNextStep, 0, 0, 0},
      {refalrts::icProfilerStopSentence, 0, 0, 0},
      {refalrts::icOnFailGoTo, +9, 0, 0},
      // ( e.idx ) '3' e.idx
      // </0 & EscRegexp-XCode/4 (/7 e.Accum#1/5 )/8 '3'/9 e.Text#1/2 >/1
      {refalrts::icSave, 0, 12, 2},
      {refalrts::icCharLeftSave, 9, static_cast<unsigned char>('3'), 12},
      // closed e.Accum#1 as range 5
      // closed e.Text#1 as range 12(2)
      //DEBUG: e.Accum#1: 5
      //DEBUG: e.Text#1: 2
      {refalrts::icEmptyResult, 0, 0, 0},
      //TRASH: {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 AsIs: & EscRegexp-XCode/4 AsIs: (/7 AsIs: e.Accum#1/5 HalfReuse: '3'/8 HalfReuse: )/9 AsIs: e.Text#1/12(2) AsIs: >/1 ]] }
      {refalrts::icReinitChar, 0, '3', 8},
      {refalrts::icReinitBracket, 0, refalrts::ibCloseBracket, 9},
      {refalrts::icPushStack, 0, 0, 1},
      {refalrts::icPushStack, 0, 0, 0},
      {refalrts::icLinkBrackets, 7, 9, 0},
      {refalrts::icNextStep, 0, 0, 0},
      {refalrts::icProfilerStopSentence, 0, 0, 0},
      {refalrts::icOnFailGoTo, +9, 0, 0},
      // ( e.idx ) '4' e.idx
      // </0 & EscRegexp-XCode/4 (/7 e.Accum#1/5 )/8 '4'/9 e.Text#1/2 >/1
      {refalrts::icSave, 0, 12, 2},
      {refalrts::icCharLeftSave, 9, static_cast<unsigned char>('4'), 12},
      // closed e.Accum#1 as range 5
      // closed e.Text#1 as range 12(2)
      //DEBUG: e.Accum#1: 5
      //DEBUG: e.Text#1: 2
      {refalrts::icEmptyResult, 0, 0, 0},
      //TRASH: {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 AsIs: & EscRegexp-XCode/4 AsIs: (/7 AsIs: e.Accum#1/5 HalfReuse: '4'/8 HalfReuse: )/9 AsIs: e.Text#1/12(2) AsIs: >/1 ]] }
      {refalrts::icReinitChar, 0, '4', 8},
      {refalrts::icReinitBracket, 0, refalrts::ibCloseBracket, 9},
      {refalrts::icPushStack, 0, 0, 1},
      {refalrts::icPushStack, 0, 0, 0},
      {refalrts::icLinkBrackets, 7, 9, 0},
      {refalrts::icNextStep, 0, 0, 0},
      {refalrts::icProfilerStopSentence, 0, 0, 0},
      {refalrts::icOnFailGoTo, +9, 0, 0},
      // ( e.idx ) '5' e.idx
      // </0 & EscRegexp-XCode/4 (/7 e.Accum#1/5 )/8 '5'/9 e.Text#1/2 >/1
      {refalrts::icSave, 0, 12, 2},
      {refalrts::icCharLeftSave, 9, static_cast<unsigned char>('5'), 12},
      // closed e.Accum#1 as range 5
      // closed e.Text#1 as range 12(2)
      //DEBUG: e.Accum#1: 5
      //DEBUG: e.Text#1: 2
      {refalrts::icEmptyResult, 0, 0, 0},
      //TRASH: {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 AsIs: & EscRegexp-XCode/4 AsIs: (/7 AsIs: e.Accum#1/5 HalfReuse: '5'/8 HalfReuse: )/9 AsIs: e.Text#1/12(2) AsIs: >/1 ]] }
      {refalrts::icReinitChar, 0, '5', 8},
      {refalrts::icReinitBracket, 0, refalrts::ibCloseBracket, 9},
      {refalrts::icPushStack, 0, 0, 1},
      {refalrts::icPushStack, 0, 0, 0},
      {refalrts::icLinkBrackets, 7, 9, 0},
      {refalrts::icNextStep, 0, 0, 0},
      {refalrts::icProfilerStopSentence, 0, 0, 0},
      {refalrts::icOnFailGoTo, +9, 0, 0},
      // ( e.idx ) '6' e.idx
      // </0 & EscRegexp-XCode/4 (/7 e.Accum#1/5 )/8 '6'/9 e.Text#1/2 >/1
      {refalrts::icSave, 0, 12, 2},
      {refalrts::icCharLeftSave, 9, static_cast<unsigned char>('6'), 12},
      // closed e.Accum#1 as range 5
      // closed e.Text#1 as range 12(2)
      //DEBUG: e.Accum#1: 5
      //DEBUG: e.Text#1: 2
      {refalrts::icEmptyResult, 0, 0, 0},
      //TRASH: {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 AsIs: & EscRegexp-XCode/4 AsIs: (/7 AsIs: e.Accum#1/5 HalfReuse: '6'/8 HalfReuse: )/9 AsIs: e.Text#1/12(2) AsIs: >/1 ]] }
      {refalrts::icReinitChar, 0, '6', 8},
      {refalrts::icReinitBracket, 0, refalrts::ibCloseBracket, 9},
      {refalrts::icPushStack, 0, 0, 1},
      {refalrts::icPushStack, 0, 0, 0},
      {refalrts::icLinkBrackets, 7, 9, 0},
      {refalrts::icNextStep, 0, 0, 0},
      {refalrts::icProfilerStopSentence, 0, 0, 0},
      {refalrts::icOnFailGoTo, +9, 0, 0},
      // ( e.idx ) '7' e.idx
      // </0 & EscRegexp-XCode/4 (/7 e.Accum#1/5 )/8 '7'/9 e.Text#1/2 >/1
      {refalrts::icSave, 0, 12, 2},
      {refalrts::icCharLeftSave, 9, static_cast<unsigned char>('7'), 12},
      // closed e.Accum#1 as range 5
      // closed e.Text#1 as range 12(2)
      //DEBUG: e.Accum#1: 5
      //DEBUG: e.Text#1: 2
      {refalrts::icEmptyResult, 0, 0, 0},
      //TRASH: {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 AsIs: & EscRegexp-XCode/4 AsIs: (/7 AsIs: e.Accum#1/5 HalfReuse: '7'/8 HalfReuse: )/9 AsIs: e.Text#1/12(2) AsIs: >/1 ]] }
      {refalrts::icReinitChar, 0, '7', 8},
      {refalrts::icReinitBracket, 0, refalrts::ibCloseBracket, 9},
      {refalrts::icPushStack, 0, 0, 1},
      {refalrts::icPushStack, 0, 0, 0},
      {refalrts::icLinkBrackets, 7, 9, 0},
      {refalrts::icNextStep, 0, 0, 0},
      {refalrts::icProfilerStopSentence, 0, 0, 0},
      {refalrts::icOnFailGoTo, +9, 0, 0},
      // ( e.idx ) '8' e.idx
      // </0 & EscRegexp-XCode/4 (/7 e.Accum#1/5 )/8 '8'/9 e.Text#1/2 >/1
      {refalrts::icSave, 0, 12, 2},
      {refalrts::icCharLeftSave, 9, static_cast<unsigned char>('8'), 12},
      // closed e.Accum#1 as range 5
      // closed e.Text#1 as range 12(2)
      //DEBUG: e.Accum#1: 5
      //DEBUG: e.Text#1: 2
      {refalrts::icEmptyResult, 0, 0, 0},
      //TRASH: {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 AsIs: & EscRegexp-XCode/4 AsIs: (/7 AsIs: e.Accum#1/5 HalfReuse: '8'/8 HalfReuse: )/9 AsIs: e.Text#1/12(2) AsIs: >/1 ]] }
      {refalrts::icReinitChar, 0, '8', 8},
      {refalrts::icReinitBracket, 0, refalrts::ibCloseBracket, 9},
      {refalrts::icPushStack, 0, 0, 1},
      {refalrts::icPushStack, 0, 0, 0},
      {refalrts::icLinkBrackets, 7, 9, 0},
      {refalrts::icNextStep, 0, 0, 0},
      {refalrts::icProfilerStopSentence, 0, 0, 0},
      {refalrts::icOnFailGoTo, +9, 0, 0},
      // ( e.idx ) '9' e.idx
      // </0 & EscRegexp-XCode/4 (/7 e.Accum#1/5 )/8 '9'/9 e.Text#1/2 >/1
      {refalrts::icSave, 0, 12, 2},
      {refalrts::icCharLeftSave, 9, static_cast<unsigned char>('9'), 12},
      // closed e.Accum#1 as range 5
      // closed e.Text#1 as range 12(2)
      //DEBUG: e.Accum#1: 5
      //DEBUG: e.Text#1: 2
      {refalrts::icEmptyResult, 0, 0, 0},
      //TRASH: {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 AsIs: & EscRegexp-XCode/4 AsIs: (/7 AsIs: e.Accum#1/5 HalfReuse: '9'/8 HalfReuse: )/9 AsIs: e.Text#1/12(2) AsIs: >/1 ]] }
      {refalrts::icReinitChar, 0, '9', 8},
      {refalrts::icReinitBracket, 0, refalrts::ibCloseBracket, 9},
      {refalrts::icPushStack, 0, 0, 1},
      {refalrts::icPushStack, 0, 0, 0},
      {refalrts::icLinkBrackets, 7, 9, 0},
      {refalrts::icNextStep, 0, 0, 0},
      {refalrts::icProfilerStopSentence, 0, 0, 0},
      {refalrts::icOnFailGoTo, +9, 0, 0},
      // ( e.idx ) 'A' e.idx
      // </0 & EscRegexp-XCode/4 (/7 e.Accum#1/5 )/8 'A'/9 e.Text#1/2 >/1
      {refalrts::icSave, 0, 12, 2},
      {refalrts::icCharLeftSave, 9, static_cast<unsigned char>('A'), 12},
      // closed e.Accum#1 as range 5
      // closed e.Text#1 as range 12(2)
      //DEBUG: e.Accum#1: 5
      //DEBUG: e.Text#1: 2
      {refalrts::icEmptyResult, 0, 0, 0},
      //TRASH: {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 AsIs: & EscRegexp-XCode/4 AsIs: (/7 AsIs: e.Accum#1/5 HalfReuse: 'A'/8 HalfReuse: )/9 AsIs: e.Text#1/12(2) AsIs: >/1 ]] }
      {refalrts::icReinitChar, 0, 'A', 8},
      {refalrts::icReinitBracket, 0, refalrts::ibCloseBracket, 9},
      {refalrts::icPushStack, 0, 0, 1},
      {refalrts::icPushStack, 0, 0, 0},
      {refalrts::icLinkBrackets, 7, 9, 0},
      {refalrts::icNextStep, 0, 0, 0},
      {refalrts::icProfilerStopSentence, 0, 0, 0},
      {refalrts::icOnFailGoTo, +9, 0, 0},
      // ( e.idx ) 'B' e.idx
      // </0 & EscRegexp-XCode/4 (/7 e.Accum#1/5 )/8 'B'/9 e.Text#1/2 >/1
      {refalrts::icSave, 0, 12, 2},
      {refalrts::icCharLeftSave, 9, static_cast<unsigned char>('B'), 12},
      // closed e.Accum#1 as range 5
      // closed e.Text#1 as range 12(2)
      //DEBUG: e.Accum#1: 5
      //DEBUG: e.Text#1: 2
      {refalrts::icEmptyResult, 0, 0, 0},
      //TRASH: {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 AsIs: & EscRegexp-XCode/4 AsIs: (/7 AsIs: e.Accum#1/5 HalfReuse: 'B'/8 HalfReuse: )/9 AsIs: e.Text#1/12(2) AsIs: >/1 ]] }
      {refalrts::icReinitChar, 0, 'B', 8},
      {refalrts::icReinitBracket, 0, refalrts::ibCloseBracket, 9},
      {refalrts::icPushStack, 0, 0, 1},
      {refalrts::icPushStack, 0, 0, 0},
      {refalrts::icLinkBrackets, 7, 9, 0},
      {refalrts::icNextStep, 0, 0, 0},
      {refalrts::icProfilerStopSentence, 0, 0, 0},
      {refalrts::icOnFailGoTo, +9, 0, 0},
      // ( e.idx ) 'C' e.idx
      // </0 & EscRegexp-XCode/4 (/7 e.Accum#1/5 )/8 'C'/9 e.Text#1/2 >/1
      {refalrts::icSave, 0, 12, 2},
      {refalrts::icCharLeftSave, 9, static_cast<unsigned char>('C'), 12},
      // closed e.Accum#1 as range 5
      // closed e.Text#1 as range 12(2)
      //DEBUG: e.Accum#1: 5
      //DEBUG: e.Text#1: 2
      {refalrts::icEmptyResult, 0, 0, 0},
      //TRASH: {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 AsIs: & EscRegexp-XCode/4 AsIs: (/7 AsIs: e.Accum#1/5 HalfReuse: 'C'/8 HalfReuse: )/9 AsIs: e.Text#1/12(2) AsIs: >/1 ]] }
      {refalrts::icReinitChar, 0, 'C', 8},
      {refalrts::icReinitBracket, 0, refalrts::ibCloseBracket, 9},
      {refalrts::icPushStack, 0, 0, 1},
      {refalrts::icPushStack, 0, 0, 0},
      {refalrts::icLinkBrackets, 7, 9, 0},
      {refalrts::icNextStep, 0, 0, 0},
      {refalrts::icProfilerStopSentence, 0, 0, 0},
      {refalrts::icOnFailGoTo, +9, 0, 0},
      // ( e.idx ) 'D' e.idx
      // </0 & EscRegexp-XCode/4 (/7 e.Accum#1/5 )/8 'D'/9 e.Text#1/2 >/1
      {refalrts::icSave, 0, 12, 2},
      {refalrts::icCharLeftSave, 9, static_cast<unsigned char>('D'), 12},
      // closed e.Accum#1 as range 5
      // closed e.Text#1 as range 12(2)
      //DEBUG: e.Accum#1: 5
      //DEBUG: e.Text#1: 2
      {refalrts::icEmptyResult, 0, 0, 0},
      //TRASH: {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 AsIs: & EscRegexp-XCode/4 AsIs: (/7 AsIs: e.Accum#1/5 HalfReuse: 'D'/8 HalfReuse: )/9 AsIs: e.Text#1/12(2) AsIs: >/1 ]] }
      {refalrts::icReinitChar, 0, 'D', 8},
      {refalrts::icReinitBracket, 0, refalrts::ibCloseBracket, 9},
      {refalrts::icPushStack, 0, 0, 1},
      {refalrts::icPushStack, 0, 0, 0},
      {refalrts::icLinkBrackets, 7, 9, 0},
      {refalrts::icNextStep, 0, 0, 0},
      {refalrts::icProfilerStopSentence, 0, 0, 0},
      {refalrts::icOnFailGoTo, +9, 0, 0},
      // ( e.idx ) 'E' e.idx
      // </0 & EscRegexp-XCode/4 (/7 e.Accum#1/5 )/8 'E'/9 e.Text#1/2 >/1
      {refalrts::icSave, 0, 12, 2},
      {refalrts::icCharLeftSave, 9, static_cast<unsigned char>('E'), 12},
      // closed e.Accum#1 as range 5
      // closed e.Text#1 as range 12(2)
      //DEBUG: e.Accum#1: 5
      //DEBUG: e.Text#1: 2
      {refalrts::icEmptyResult, 0, 0, 0},
      //TRASH: {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 AsIs: & EscRegexp-XCode/4 AsIs: (/7 AsIs: e.Accum#1/5 HalfReuse: 'E'/8 HalfReuse: )/9 AsIs: e.Text#1/12(2) AsIs: >/1 ]] }
      {refalrts::icReinitChar, 0, 'E', 8},
      {refalrts::icReinitBracket, 0, refalrts::ibCloseBracket, 9},
      {refalrts::icPushStack, 0, 0, 1},
      {refalrts::icPushStack, 0, 0, 0},
      {refalrts::icLinkBrackets, 7, 9, 0},
      {refalrts::icNextStep, 0, 0, 0},
      {refalrts::icProfilerStopSentence, 0, 0, 0},
      {refalrts::icOnFailGoTo, +9, 0, 0},
      // ( e.idx ) 'F' e.idx
      // </0 & EscRegexp-XCode/4 (/7 e.Accum#1/5 )/8 'F'/9 e.Text#1/2 >/1
      {refalrts::icSave, 0, 12, 2},
      {refalrts::icCharLeftSave, 9, static_cast<unsigned char>('F'), 12},
      // closed e.Accum#1 as range 5
      // closed e.Text#1 as range 12(2)
      //DEBUG: e.Accum#1: 5
      //DEBUG: e.Text#1: 2
      {refalrts::icEmptyResult, 0, 0, 0},
      //TRASH: {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 AsIs: & EscRegexp-XCode/4 AsIs: (/7 AsIs: e.Accum#1/5 HalfReuse: 'F'/8 HalfReuse: )/9 AsIs: e.Text#1/12(2) AsIs: >/1 ]] }
      {refalrts::icReinitChar, 0, 'F', 8},
      {refalrts::icReinitBracket, 0, refalrts::ibCloseBracket, 9},
      {refalrts::icPushStack, 0, 0, 1},
      {refalrts::icPushStack, 0, 0, 0},
      {refalrts::icLinkBrackets, 7, 9, 0},
      {refalrts::icNextStep, 0, 0, 0},
      {refalrts::icProfilerStopSentence, 0, 0, 0},
      {refalrts::icOnFailGoTo, +9, 0, 0},
      // ( e.idx ) 'a' e.idx
      // </0 & EscRegexp-XCode/4 (/7 e.Accum#1/5 )/8 'a'/9 e.Text#1/2 >/1
      {refalrts::icSave, 0, 12, 2},
      {refalrts::icCharLeftSave, 9, static_cast<unsigned char>('a'), 12},
      // closed e.Accum#1 as range 5
      // closed e.Text#1 as range 12(2)
      //DEBUG: e.Accum#1: 5
      //DEBUG: e.Text#1: 2
      {refalrts::icEmptyResult, 0, 0, 0},
      //TRASH: {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 AsIs: & EscRegexp-XCode/4 AsIs: (/7 AsIs: e.Accum#1/5 HalfReuse: 'a'/8 HalfReuse: )/9 AsIs: e.Text#1/12(2) AsIs: >/1 ]] }
      {refalrts::icReinitChar, 0, 'a', 8},
      {refalrts::icReinitBracket, 0, refalrts::ibCloseBracket, 9},
      {refalrts::icPushStack, 0, 0, 1},
      {refalrts::icPushStack, 0, 0, 0},
      {refalrts::icLinkBrackets, 7, 9, 0},
      {refalrts::icNextStep, 0, 0, 0},
      {refalrts::icProfilerStopSentence, 0, 0, 0},
      {refalrts::icOnFailGoTo, +9, 0, 0},
      // ( e.idx ) 'b' e.idx
      // </0 & EscRegexp-XCode/4 (/7 e.Accum#1/5 )/8 'b'/9 e.Text#1/2 >/1
      {refalrts::icSave, 0, 12, 2},
      {refalrts::icCharLeftSave, 9, static_cast<unsigned char>('b'), 12},
      // closed e.Accum#1 as range 5
      // closed e.Text#1 as range 12(2)
      //DEBUG: e.Accum#1: 5
      //DEBUG: e.Text#1: 2
      {refalrts::icEmptyResult, 0, 0, 0},
      //TRASH: {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 AsIs: & EscRegexp-XCode/4 AsIs: (/7 AsIs: e.Accum#1/5 HalfReuse: 'b'/8 HalfReuse: )/9 AsIs: e.Text#1/12(2) AsIs: >/1 ]] }
      {refalrts::icReinitChar, 0, 'b', 8},
      {refalrts::icReinitBracket, 0, refalrts::ibCloseBracket, 9},
      {refalrts::icPushStack, 0, 0, 1},
      {refalrts::icPushStack, 0, 0, 0},
      {refalrts::icLinkBrackets, 7, 9, 0},
      {refalrts::icNextStep, 0, 0, 0},
      {refalrts::icProfilerStopSentence, 0, 0, 0},
      {refalrts::icOnFailGoTo, +9, 0, 0},
      // ( e.idx ) 'c' e.idx
      // </0 & EscRegexp-XCode/4 (/7 e.Accum#1/5 )/8 'c'/9 e.Text#1/2 >/1
      {refalrts::icSave, 0, 12, 2},
      {refalrts::icCharLeftSave, 9, static_cast<unsigned char>('c'), 12},
      // closed e.Accum#1 as range 5
      // closed e.Text#1 as range 12(2)
      //DEBUG: e.Accum#1: 5
      //DEBUG: e.Text#1: 2
      {refalrts::icEmptyResult, 0, 0, 0},
      //TRASH: {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 AsIs: & EscRegexp-XCode/4 AsIs: (/7 AsIs: e.Accum#1/5 HalfReuse: 'c'/8 HalfReuse: )/9 AsIs: e.Text#1/12(2) AsIs: >/1 ]] }
      {refalrts::icReinitChar, 0, 'c', 8},
      {refalrts::icReinitBracket, 0, refalrts::ibCloseBracket, 9},
      {refalrts::icPushStack, 0, 0, 1},
      {refalrts::icPushStack, 0, 0, 0},
      {refalrts::icLinkBrackets, 7, 9, 0},
      {refalrts::icNextStep, 0, 0, 0},
      {refalrts::icProfilerStopSentence, 0, 0, 0},
      {refalrts::icOnFailGoTo, +9, 0, 0},
      // ( e.idx ) 'd' e.idx
      // </0 & EscRegexp-XCode/4 (/7 e.Accum#1/5 )/8 'd'/9 e.Text#1/2 >/1
      {refalrts::icSave, 0, 12, 2},
      {refalrts::icCharLeftSave, 9, static_cast<unsigned char>('d'), 12},
      // closed e.Accum#1 as range 5
      // closed e.Text#1 as range 12(2)
      //DEBUG: e.Accum#1: 5
      //DEBUG: e.Text#1: 2
      {refalrts::icEmptyResult, 0, 0, 0},
      //TRASH: {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 AsIs: & EscRegexp-XCode/4 AsIs: (/7 AsIs: e.Accum#1/5 HalfReuse: 'd'/8 HalfReuse: )/9 AsIs: e.Text#1/12(2) AsIs: >/1 ]] }
      {refalrts::icReinitChar, 0, 'd', 8},
      {refalrts::icReinitBracket, 0, refalrts::ibCloseBracket, 9},
      {refalrts::icPushStack, 0, 0, 1},
      {refalrts::icPushStack, 0, 0, 0},
      {refalrts::icLinkBrackets, 7, 9, 0},
      {refalrts::icNextStep, 0, 0, 0},
      {refalrts::icProfilerStopSentence, 0, 0, 0},
      {refalrts::icOnFailGoTo, +9, 0, 0},
      // ( e.idx ) 'e' e.idx
      // </0 & EscRegexp-XCode/4 (/7 e.Accum#1/5 )/8 'e'/9 e.Text#1/2 >/1
      {refalrts::icSave, 0, 12, 2},
      {refalrts::icCharLeftSave, 9, static_cast<unsigned char>('e'), 12},
      // closed e.Accum#1 as range 5
      // closed e.Text#1 as range 12(2)
      //DEBUG: e.Accum#1: 5
      //DEBUG: e.Text#1: 2
      {refalrts::icEmptyResult, 0, 0, 0},
      //TRASH: {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 AsIs: & EscRegexp-XCode/4 AsIs: (/7 AsIs: e.Accum#1/5 HalfReuse: 'e'/8 HalfReuse: )/9 AsIs: e.Text#1/12(2) AsIs: >/1 ]] }
      {refalrts::icReinitChar, 0, 'e', 8},
      {refalrts::icReinitBracket, 0, refalrts::ibCloseBracket, 9},
      {refalrts::icPushStack, 0, 0, 1},
      {refalrts::icPushStack, 0, 0, 0},
      {refalrts::icLinkBrackets, 7, 9, 0},
      {refalrts::icNextStep, 0, 0, 0},
      {refalrts::icProfilerStopSentence, 0, 0, 0},
      {refalrts::icOnFailGoTo, +9, 0, 0},
      // ( e.idx ) 'f' e.idx
      // </0 & EscRegexp-XCode/4 (/7 e.Accum#1/5 )/8 'f'/9 e.Text#1/2 >/1
      {refalrts::icSave, 0, 12, 2},
      {refalrts::icCharLeftSave, 9, static_cast<unsigned char>('f'), 12},
      // closed e.Accum#1 as range 5
      // closed e.Text#1 as range 12(2)
      //DEBUG: e.Accum#1: 5
      //DEBUG: e.Text#1: 2
      {refalrts::icEmptyResult, 0, 0, 0},
      //TRASH: {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 AsIs: & EscRegexp-XCode/4 AsIs: (/7 AsIs: e.Accum#1/5 HalfReuse: 'f'/8 HalfReuse: )/9 AsIs: e.Text#1/12(2) AsIs: >/1 ]] }
      {refalrts::icReinitChar, 0, 'f', 8},
      {refalrts::icReinitBracket, 0, refalrts::ibCloseBracket, 9},
      {refalrts::icPushStack, 0, 0, 1},
      {refalrts::icPushStack, 0, 0, 0},
      {refalrts::icLinkBrackets, 7, 9, 0},
      {refalrts::icNextStep, 0, 0, 0},
      {refalrts::icProfilerStopSentence, 0, 0, 0},
      // ( e.idx ) e.idx
      // </0 & EscRegexp-XCode/4 (/7 e.Accum#1/5 )/8 e.Text#1/2 >/1
      // closed e.Accum#1 as range 5
      // closed e.Text#1 as range 2
      //DEBUG: e.Accum#1: 5
      //DEBUG: e.Text#1: 2
      {refalrts::icEmptyResult, 0, 0, 0},
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ } (/9 # TkHexNumber/10 Tile{ AsIs: e.Accum#1/5 } )/11 Tile{ AsIs: </0 Reuse: & ReadRegexp/4 AsIs: (/7 } Tile{ AsIs: )/8 AsIs: e.Text#1/2 AsIs: >/1 ]] }
      {refalrts::icAllocBracket, 0, refalrts::ibOpenBracket, 9},
      {refalrts::icAllocIdent, 0, 0, 10},
      {refalrts::icAllocBracket, 0, refalrts::ibCloseBracket, 11},
      {refalrts::icUpdateFunc, 0, 0, 4},
      {refalrts::icPushStack, 0, 0, 1},
      {refalrts::icPushStack, 0, 0, 0},
      {refalrts::icLinkBrackets, 7, 8, 0},
      {refalrts::icLinkBrackets, 9, 11, 0},
      {refalrts::icSetRes, 0, 0, 8},
      {refalrts::icSpliceTile, 0, 7, 0},
      {refalrts::icSpliceTile, 11, 11, 0},
      {refalrts::icSpliceEVar, 0, 0, 5},
      {refalrts::icSpliceTile, 9, 10, 0},
      {refalrts::icNextStep, 0, 0, 0},
      {refalrts::icEnd, 0, 0, 0}
    };
  } // namespace scope_EscRegexp_XCode

} // unnamed namespace

namespace /* unnamed */ {
refalrts::RASLFunction descr_EscRegexp_XCode(
  "EscRegexp-XCode",
  scope_EscRegexp_XCode::raa,
  scope_EscRegexp_XCode::functions,
  scope_EscRegexp_XCode::idents,
  scope_EscRegexp_XCode::numbers,
  scope_EscRegexp_XCode::strings,
  scope_EscRegexp_XCode::filename
);
refalrts::RefalFunction& EscRegexp_XCode = descr_EscRegexp_XCode;

} // unnamed namespace

#else
static refalrts::FnResult func_EscRegexp_XCode(refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  refalrts::this_is_generated_function();
  // issue here memory for vars with 14 elems
  refalrts::Iter context[14];
  refalrts::zeros( context, 14 );
  //FAST GEN: ( e.$ ) e.$
  //GLOBAL GEN: ( e.$ ) e.$
  // </0 & EscRegexp-XCode/4 (/7 e.idxB#0/5 )/8 e.idxT#0/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  context[5] = 0;
  context[6] = 0;
  context[7] = refalrts::brackets_left( context[5], context[6], context[2], context[3] );
  if( ! context[7] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[7], context[8]);
  // closed e.idxB#0 as range 5
  // closed e.idxT#0 as range 2
  do {
    // ( e.idx ) '0' e.idx
    // </0 & EscRegexp-XCode/4 (/7 e.Accum#1/5 )/8 '0'/9 e.Text#1/2 >/1
    context[12] = context[2];
    context[13] = context[3];
    context[9] = refalrts::char_left( '0', context[12], context[13] );
    if( ! context[9] )
      continue;
    // closed e.Accum#1 as range 5
    // closed e.Text#1 as range 12(2)
    //DEBUG: e.Accum#1: 5
    //DEBUG: e.Text#1: 2

    refalrts::reset_allocator();
    //TRASH: {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 AsIs: & EscRegexp-XCode/4 AsIs: (/7 AsIs: e.Accum#1/5 HalfReuse: '0'/8 HalfReuse: )/9 AsIs: e.Text#1/12(2) AsIs: >/1 ]] }
    refalrts::reinit_char( context[8], '0' );
    refalrts::reinit_close_bracket( context[9] );
    refalrts::push_stack( context[1] );
    refalrts::push_stack( context[0] );
    refalrts::link_brackets( context[7], context[9] );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence();

  do {
    // ( e.idx ) '1' e.idx
    // </0 & EscRegexp-XCode/4 (/7 e.Accum#1/5 )/8 '1'/9 e.Text#1/2 >/1
    context[12] = context[2];
    context[13] = context[3];
    context[9] = refalrts::char_left( '1', context[12], context[13] );
    if( ! context[9] )
      continue;
    // closed e.Accum#1 as range 5
    // closed e.Text#1 as range 12(2)
    //DEBUG: e.Accum#1: 5
    //DEBUG: e.Text#1: 2

    refalrts::reset_allocator();
    //TRASH: {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 AsIs: & EscRegexp-XCode/4 AsIs: (/7 AsIs: e.Accum#1/5 HalfReuse: '1'/8 HalfReuse: )/9 AsIs: e.Text#1/12(2) AsIs: >/1 ]] }
    refalrts::reinit_char( context[8], '1' );
    refalrts::reinit_close_bracket( context[9] );
    refalrts::push_stack( context[1] );
    refalrts::push_stack( context[0] );
    refalrts::link_brackets( context[7], context[9] );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence();

  do {
    // ( e.idx ) '2' e.idx
    // </0 & EscRegexp-XCode/4 (/7 e.Accum#1/5 )/8 '2'/9 e.Text#1/2 >/1
    context[12] = context[2];
    context[13] = context[3];
    context[9] = refalrts::char_left( '2', context[12], context[13] );
    if( ! context[9] )
      continue;
    // closed e.Accum#1 as range 5
    // closed e.Text#1 as range 12(2)
    //DEBUG: e.Accum#1: 5
    //DEBUG: e.Text#1: 2

    refalrts::reset_allocator();
    //TRASH: {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 AsIs: & EscRegexp-XCode/4 AsIs: (/7 AsIs: e.Accum#1/5 HalfReuse: '2'/8 HalfReuse: )/9 AsIs: e.Text#1/12(2) AsIs: >/1 ]] }
    refalrts::reinit_char( context[8], '2' );
    refalrts::reinit_close_bracket( context[9] );
    refalrts::push_stack( context[1] );
    refalrts::push_stack( context[0] );
    refalrts::link_brackets( context[7], context[9] );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence();

  do {
    // ( e.idx ) '3' e.idx
    // </0 & EscRegexp-XCode/4 (/7 e.Accum#1/5 )/8 '3'/9 e.Text#1/2 >/1
    context[12] = context[2];
    context[13] = context[3];
    context[9] = refalrts::char_left( '3', context[12], context[13] );
    if( ! context[9] )
      continue;
    // closed e.Accum#1 as range 5
    // closed e.Text#1 as range 12(2)
    //DEBUG: e.Accum#1: 5
    //DEBUG: e.Text#1: 2

    refalrts::reset_allocator();
    //TRASH: {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 AsIs: & EscRegexp-XCode/4 AsIs: (/7 AsIs: e.Accum#1/5 HalfReuse: '3'/8 HalfReuse: )/9 AsIs: e.Text#1/12(2) AsIs: >/1 ]] }
    refalrts::reinit_char( context[8], '3' );
    refalrts::reinit_close_bracket( context[9] );
    refalrts::push_stack( context[1] );
    refalrts::push_stack( context[0] );
    refalrts::link_brackets( context[7], context[9] );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence();

  do {
    // ( e.idx ) '4' e.idx
    // </0 & EscRegexp-XCode/4 (/7 e.Accum#1/5 )/8 '4'/9 e.Text#1/2 >/1
    context[12] = context[2];
    context[13] = context[3];
    context[9] = refalrts::char_left( '4', context[12], context[13] );
    if( ! context[9] )
      continue;
    // closed e.Accum#1 as range 5
    // closed e.Text#1 as range 12(2)
    //DEBUG: e.Accum#1: 5
    //DEBUG: e.Text#1: 2

    refalrts::reset_allocator();
    //TRASH: {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 AsIs: & EscRegexp-XCode/4 AsIs: (/7 AsIs: e.Accum#1/5 HalfReuse: '4'/8 HalfReuse: )/9 AsIs: e.Text#1/12(2) AsIs: >/1 ]] }
    refalrts::reinit_char( context[8], '4' );
    refalrts::reinit_close_bracket( context[9] );
    refalrts::push_stack( context[1] );
    refalrts::push_stack( context[0] );
    refalrts::link_brackets( context[7], context[9] );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence();

  do {
    // ( e.idx ) '5' e.idx
    // </0 & EscRegexp-XCode/4 (/7 e.Accum#1/5 )/8 '5'/9 e.Text#1/2 >/1
    context[12] = context[2];
    context[13] = context[3];
    context[9] = refalrts::char_left( '5', context[12], context[13] );
    if( ! context[9] )
      continue;
    // closed e.Accum#1 as range 5
    // closed e.Text#1 as range 12(2)
    //DEBUG: e.Accum#1: 5
    //DEBUG: e.Text#1: 2

    refalrts::reset_allocator();
    //TRASH: {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 AsIs: & EscRegexp-XCode/4 AsIs: (/7 AsIs: e.Accum#1/5 HalfReuse: '5'/8 HalfReuse: )/9 AsIs: e.Text#1/12(2) AsIs: >/1 ]] }
    refalrts::reinit_char( context[8], '5' );
    refalrts::reinit_close_bracket( context[9] );
    refalrts::push_stack( context[1] );
    refalrts::push_stack( context[0] );
    refalrts::link_brackets( context[7], context[9] );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence();

  do {
    // ( e.idx ) '6' e.idx
    // </0 & EscRegexp-XCode/4 (/7 e.Accum#1/5 )/8 '6'/9 e.Text#1/2 >/1
    context[12] = context[2];
    context[13] = context[3];
    context[9] = refalrts::char_left( '6', context[12], context[13] );
    if( ! context[9] )
      continue;
    // closed e.Accum#1 as range 5
    // closed e.Text#1 as range 12(2)
    //DEBUG: e.Accum#1: 5
    //DEBUG: e.Text#1: 2

    refalrts::reset_allocator();
    //TRASH: {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 AsIs: & EscRegexp-XCode/4 AsIs: (/7 AsIs: e.Accum#1/5 HalfReuse: '6'/8 HalfReuse: )/9 AsIs: e.Text#1/12(2) AsIs: >/1 ]] }
    refalrts::reinit_char( context[8], '6' );
    refalrts::reinit_close_bracket( context[9] );
    refalrts::push_stack( context[1] );
    refalrts::push_stack( context[0] );
    refalrts::link_brackets( context[7], context[9] );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence();

  do {
    // ( e.idx ) '7' e.idx
    // </0 & EscRegexp-XCode/4 (/7 e.Accum#1/5 )/8 '7'/9 e.Text#1/2 >/1
    context[12] = context[2];
    context[13] = context[3];
    context[9] = refalrts::char_left( '7', context[12], context[13] );
    if( ! context[9] )
      continue;
    // closed e.Accum#1 as range 5
    // closed e.Text#1 as range 12(2)
    //DEBUG: e.Accum#1: 5
    //DEBUG: e.Text#1: 2

    refalrts::reset_allocator();
    //TRASH: {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 AsIs: & EscRegexp-XCode/4 AsIs: (/7 AsIs: e.Accum#1/5 HalfReuse: '7'/8 HalfReuse: )/9 AsIs: e.Text#1/12(2) AsIs: >/1 ]] }
    refalrts::reinit_char( context[8], '7' );
    refalrts::reinit_close_bracket( context[9] );
    refalrts::push_stack( context[1] );
    refalrts::push_stack( context[0] );
    refalrts::link_brackets( context[7], context[9] );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence();

  do {
    // ( e.idx ) '8' e.idx
    // </0 & EscRegexp-XCode/4 (/7 e.Accum#1/5 )/8 '8'/9 e.Text#1/2 >/1
    context[12] = context[2];
    context[13] = context[3];
    context[9] = refalrts::char_left( '8', context[12], context[13] );
    if( ! context[9] )
      continue;
    // closed e.Accum#1 as range 5
    // closed e.Text#1 as range 12(2)
    //DEBUG: e.Accum#1: 5
    //DEBUG: e.Text#1: 2

    refalrts::reset_allocator();
    //TRASH: {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 AsIs: & EscRegexp-XCode/4 AsIs: (/7 AsIs: e.Accum#1/5 HalfReuse: '8'/8 HalfReuse: )/9 AsIs: e.Text#1/12(2) AsIs: >/1 ]] }
    refalrts::reinit_char( context[8], '8' );
    refalrts::reinit_close_bracket( context[9] );
    refalrts::push_stack( context[1] );
    refalrts::push_stack( context[0] );
    refalrts::link_brackets( context[7], context[9] );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence();

  do {
    // ( e.idx ) '9' e.idx
    // </0 & EscRegexp-XCode/4 (/7 e.Accum#1/5 )/8 '9'/9 e.Text#1/2 >/1
    context[12] = context[2];
    context[13] = context[3];
    context[9] = refalrts::char_left( '9', context[12], context[13] );
    if( ! context[9] )
      continue;
    // closed e.Accum#1 as range 5
    // closed e.Text#1 as range 12(2)
    //DEBUG: e.Accum#1: 5
    //DEBUG: e.Text#1: 2

    refalrts::reset_allocator();
    //TRASH: {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 AsIs: & EscRegexp-XCode/4 AsIs: (/7 AsIs: e.Accum#1/5 HalfReuse: '9'/8 HalfReuse: )/9 AsIs: e.Text#1/12(2) AsIs: >/1 ]] }
    refalrts::reinit_char( context[8], '9' );
    refalrts::reinit_close_bracket( context[9] );
    refalrts::push_stack( context[1] );
    refalrts::push_stack( context[0] );
    refalrts::link_brackets( context[7], context[9] );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence();

  do {
    // ( e.idx ) 'A' e.idx
    // </0 & EscRegexp-XCode/4 (/7 e.Accum#1/5 )/8 'A'/9 e.Text#1/2 >/1
    context[12] = context[2];
    context[13] = context[3];
    context[9] = refalrts::char_left( 'A', context[12], context[13] );
    if( ! context[9] )
      continue;
    // closed e.Accum#1 as range 5
    // closed e.Text#1 as range 12(2)
    //DEBUG: e.Accum#1: 5
    //DEBUG: e.Text#1: 2

    refalrts::reset_allocator();
    //TRASH: {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 AsIs: & EscRegexp-XCode/4 AsIs: (/7 AsIs: e.Accum#1/5 HalfReuse: 'A'/8 HalfReuse: )/9 AsIs: e.Text#1/12(2) AsIs: >/1 ]] }
    refalrts::reinit_char( context[8], 'A' );
    refalrts::reinit_close_bracket( context[9] );
    refalrts::push_stack( context[1] );
    refalrts::push_stack( context[0] );
    refalrts::link_brackets( context[7], context[9] );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence();

  do {
    // ( e.idx ) 'B' e.idx
    // </0 & EscRegexp-XCode/4 (/7 e.Accum#1/5 )/8 'B'/9 e.Text#1/2 >/1
    context[12] = context[2];
    context[13] = context[3];
    context[9] = refalrts::char_left( 'B', context[12], context[13] );
    if( ! context[9] )
      continue;
    // closed e.Accum#1 as range 5
    // closed e.Text#1 as range 12(2)
    //DEBUG: e.Accum#1: 5
    //DEBUG: e.Text#1: 2

    refalrts::reset_allocator();
    //TRASH: {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 AsIs: & EscRegexp-XCode/4 AsIs: (/7 AsIs: e.Accum#1/5 HalfReuse: 'B'/8 HalfReuse: )/9 AsIs: e.Text#1/12(2) AsIs: >/1 ]] }
    refalrts::reinit_char( context[8], 'B' );
    refalrts::reinit_close_bracket( context[9] );
    refalrts::push_stack( context[1] );
    refalrts::push_stack( context[0] );
    refalrts::link_brackets( context[7], context[9] );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence();

  do {
    // ( e.idx ) 'C' e.idx
    // </0 & EscRegexp-XCode/4 (/7 e.Accum#1/5 )/8 'C'/9 e.Text#1/2 >/1
    context[12] = context[2];
    context[13] = context[3];
    context[9] = refalrts::char_left( 'C', context[12], context[13] );
    if( ! context[9] )
      continue;
    // closed e.Accum#1 as range 5
    // closed e.Text#1 as range 12(2)
    //DEBUG: e.Accum#1: 5
    //DEBUG: e.Text#1: 2

    refalrts::reset_allocator();
    //TRASH: {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 AsIs: & EscRegexp-XCode/4 AsIs: (/7 AsIs: e.Accum#1/5 HalfReuse: 'C'/8 HalfReuse: )/9 AsIs: e.Text#1/12(2) AsIs: >/1 ]] }
    refalrts::reinit_char( context[8], 'C' );
    refalrts::reinit_close_bracket( context[9] );
    refalrts::push_stack( context[1] );
    refalrts::push_stack( context[0] );
    refalrts::link_brackets( context[7], context[9] );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence();

  do {
    // ( e.idx ) 'D' e.idx
    // </0 & EscRegexp-XCode/4 (/7 e.Accum#1/5 )/8 'D'/9 e.Text#1/2 >/1
    context[12] = context[2];
    context[13] = context[3];
    context[9] = refalrts::char_left( 'D', context[12], context[13] );
    if( ! context[9] )
      continue;
    // closed e.Accum#1 as range 5
    // closed e.Text#1 as range 12(2)
    //DEBUG: e.Accum#1: 5
    //DEBUG: e.Text#1: 2

    refalrts::reset_allocator();
    //TRASH: {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 AsIs: & EscRegexp-XCode/4 AsIs: (/7 AsIs: e.Accum#1/5 HalfReuse: 'D'/8 HalfReuse: )/9 AsIs: e.Text#1/12(2) AsIs: >/1 ]] }
    refalrts::reinit_char( context[8], 'D' );
    refalrts::reinit_close_bracket( context[9] );
    refalrts::push_stack( context[1] );
    refalrts::push_stack( context[0] );
    refalrts::link_brackets( context[7], context[9] );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence();

  do {
    // ( e.idx ) 'E' e.idx
    // </0 & EscRegexp-XCode/4 (/7 e.Accum#1/5 )/8 'E'/9 e.Text#1/2 >/1
    context[12] = context[2];
    context[13] = context[3];
    context[9] = refalrts::char_left( 'E', context[12], context[13] );
    if( ! context[9] )
      continue;
    // closed e.Accum#1 as range 5
    // closed e.Text#1 as range 12(2)
    //DEBUG: e.Accum#1: 5
    //DEBUG: e.Text#1: 2

    refalrts::reset_allocator();
    //TRASH: {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 AsIs: & EscRegexp-XCode/4 AsIs: (/7 AsIs: e.Accum#1/5 HalfReuse: 'E'/8 HalfReuse: )/9 AsIs: e.Text#1/12(2) AsIs: >/1 ]] }
    refalrts::reinit_char( context[8], 'E' );
    refalrts::reinit_close_bracket( context[9] );
    refalrts::push_stack( context[1] );
    refalrts::push_stack( context[0] );
    refalrts::link_brackets( context[7], context[9] );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence();

  do {
    // ( e.idx ) 'F' e.idx
    // </0 & EscRegexp-XCode/4 (/7 e.Accum#1/5 )/8 'F'/9 e.Text#1/2 >/1
    context[12] = context[2];
    context[13] = context[3];
    context[9] = refalrts::char_left( 'F', context[12], context[13] );
    if( ! context[9] )
      continue;
    // closed e.Accum#1 as range 5
    // closed e.Text#1 as range 12(2)
    //DEBUG: e.Accum#1: 5
    //DEBUG: e.Text#1: 2

    refalrts::reset_allocator();
    //TRASH: {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 AsIs: & EscRegexp-XCode/4 AsIs: (/7 AsIs: e.Accum#1/5 HalfReuse: 'F'/8 HalfReuse: )/9 AsIs: e.Text#1/12(2) AsIs: >/1 ]] }
    refalrts::reinit_char( context[8], 'F' );
    refalrts::reinit_close_bracket( context[9] );
    refalrts::push_stack( context[1] );
    refalrts::push_stack( context[0] );
    refalrts::link_brackets( context[7], context[9] );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence();

  do {
    // ( e.idx ) 'a' e.idx
    // </0 & EscRegexp-XCode/4 (/7 e.Accum#1/5 )/8 'a'/9 e.Text#1/2 >/1
    context[12] = context[2];
    context[13] = context[3];
    context[9] = refalrts::char_left( 'a', context[12], context[13] );
    if( ! context[9] )
      continue;
    // closed e.Accum#1 as range 5
    // closed e.Text#1 as range 12(2)
    //DEBUG: e.Accum#1: 5
    //DEBUG: e.Text#1: 2

    refalrts::reset_allocator();
    //TRASH: {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 AsIs: & EscRegexp-XCode/4 AsIs: (/7 AsIs: e.Accum#1/5 HalfReuse: 'a'/8 HalfReuse: )/9 AsIs: e.Text#1/12(2) AsIs: >/1 ]] }
    refalrts::reinit_char( context[8], 'a' );
    refalrts::reinit_close_bracket( context[9] );
    refalrts::push_stack( context[1] );
    refalrts::push_stack( context[0] );
    refalrts::link_brackets( context[7], context[9] );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence();

  do {
    // ( e.idx ) 'b' e.idx
    // </0 & EscRegexp-XCode/4 (/7 e.Accum#1/5 )/8 'b'/9 e.Text#1/2 >/1
    context[12] = context[2];
    context[13] = context[3];
    context[9] = refalrts::char_left( 'b', context[12], context[13] );
    if( ! context[9] )
      continue;
    // closed e.Accum#1 as range 5
    // closed e.Text#1 as range 12(2)
    //DEBUG: e.Accum#1: 5
    //DEBUG: e.Text#1: 2

    refalrts::reset_allocator();
    //TRASH: {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 AsIs: & EscRegexp-XCode/4 AsIs: (/7 AsIs: e.Accum#1/5 HalfReuse: 'b'/8 HalfReuse: )/9 AsIs: e.Text#1/12(2) AsIs: >/1 ]] }
    refalrts::reinit_char( context[8], 'b' );
    refalrts::reinit_close_bracket( context[9] );
    refalrts::push_stack( context[1] );
    refalrts::push_stack( context[0] );
    refalrts::link_brackets( context[7], context[9] );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence();

  do {
    // ( e.idx ) 'c' e.idx
    // </0 & EscRegexp-XCode/4 (/7 e.Accum#1/5 )/8 'c'/9 e.Text#1/2 >/1
    context[12] = context[2];
    context[13] = context[3];
    context[9] = refalrts::char_left( 'c', context[12], context[13] );
    if( ! context[9] )
      continue;
    // closed e.Accum#1 as range 5
    // closed e.Text#1 as range 12(2)
    //DEBUG: e.Accum#1: 5
    //DEBUG: e.Text#1: 2

    refalrts::reset_allocator();
    //TRASH: {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 AsIs: & EscRegexp-XCode/4 AsIs: (/7 AsIs: e.Accum#1/5 HalfReuse: 'c'/8 HalfReuse: )/9 AsIs: e.Text#1/12(2) AsIs: >/1 ]] }
    refalrts::reinit_char( context[8], 'c' );
    refalrts::reinit_close_bracket( context[9] );
    refalrts::push_stack( context[1] );
    refalrts::push_stack( context[0] );
    refalrts::link_brackets( context[7], context[9] );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence();

  do {
    // ( e.idx ) 'd' e.idx
    // </0 & EscRegexp-XCode/4 (/7 e.Accum#1/5 )/8 'd'/9 e.Text#1/2 >/1
    context[12] = context[2];
    context[13] = context[3];
    context[9] = refalrts::char_left( 'd', context[12], context[13] );
    if( ! context[9] )
      continue;
    // closed e.Accum#1 as range 5
    // closed e.Text#1 as range 12(2)
    //DEBUG: e.Accum#1: 5
    //DEBUG: e.Text#1: 2

    refalrts::reset_allocator();
    //TRASH: {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 AsIs: & EscRegexp-XCode/4 AsIs: (/7 AsIs: e.Accum#1/5 HalfReuse: 'd'/8 HalfReuse: )/9 AsIs: e.Text#1/12(2) AsIs: >/1 ]] }
    refalrts::reinit_char( context[8], 'd' );
    refalrts::reinit_close_bracket( context[9] );
    refalrts::push_stack( context[1] );
    refalrts::push_stack( context[0] );
    refalrts::link_brackets( context[7], context[9] );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence();

  do {
    // ( e.idx ) 'e' e.idx
    // </0 & EscRegexp-XCode/4 (/7 e.Accum#1/5 )/8 'e'/9 e.Text#1/2 >/1
    context[12] = context[2];
    context[13] = context[3];
    context[9] = refalrts::char_left( 'e', context[12], context[13] );
    if( ! context[9] )
      continue;
    // closed e.Accum#1 as range 5
    // closed e.Text#1 as range 12(2)
    //DEBUG: e.Accum#1: 5
    //DEBUG: e.Text#1: 2

    refalrts::reset_allocator();
    //TRASH: {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 AsIs: & EscRegexp-XCode/4 AsIs: (/7 AsIs: e.Accum#1/5 HalfReuse: 'e'/8 HalfReuse: )/9 AsIs: e.Text#1/12(2) AsIs: >/1 ]] }
    refalrts::reinit_char( context[8], 'e' );
    refalrts::reinit_close_bracket( context[9] );
    refalrts::push_stack( context[1] );
    refalrts::push_stack( context[0] );
    refalrts::link_brackets( context[7], context[9] );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence();

  do {
    // ( e.idx ) 'f' e.idx
    // </0 & EscRegexp-XCode/4 (/7 e.Accum#1/5 )/8 'f'/9 e.Text#1/2 >/1
    context[12] = context[2];
    context[13] = context[3];
    context[9] = refalrts::char_left( 'f', context[12], context[13] );
    if( ! context[9] )
      continue;
    // closed e.Accum#1 as range 5
    // closed e.Text#1 as range 12(2)
    //DEBUG: e.Accum#1: 5
    //DEBUG: e.Text#1: 2

    refalrts::reset_allocator();
    //TRASH: {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 AsIs: & EscRegexp-XCode/4 AsIs: (/7 AsIs: e.Accum#1/5 HalfReuse: 'f'/8 HalfReuse: )/9 AsIs: e.Text#1/12(2) AsIs: >/1 ]] }
    refalrts::reinit_char( context[8], 'f' );
    refalrts::reinit_close_bracket( context[9] );
    refalrts::push_stack( context[1] );
    refalrts::push_stack( context[0] );
    refalrts::link_brackets( context[7], context[9] );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence();

  // ( e.idx ) e.idx
  // </0 & EscRegexp-XCode/4 (/7 e.Accum#1/5 )/8 e.Text#1/2 >/1
  // closed e.Accum#1 as range 5
  // closed e.Text#1 as range 2
  //DEBUG: e.Accum#1: 5
  //DEBUG: e.Text#1: 2

  refalrts::reset_allocator();
  //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ } (/9 # TkHexNumber/10 Tile{ AsIs: e.Accum#1/5 } )/11 Tile{ AsIs: </0 Reuse: & ReadRegexp/4 AsIs: (/7 } Tile{ AsIs: )/8 AsIs: e.Text#1/2 AsIs: >/1 ]] }
  if( ! refalrts::alloc_open_bracket( context[9] ) )
    return refalrts::cNoMemory;
  if( ! refalrts::alloc_ident( context[10], & ident_TkHexNumber<int>::name ) )
    return refalrts::cNoMemory;
  if( ! refalrts::alloc_close_bracket( context[11] ) )
    return refalrts::cNoMemory;
  refalrts::update_name( context[4], & ReadRegexp );
  refalrts::push_stack( context[1] );
  refalrts::push_stack( context[0] );
  refalrts::link_brackets( context[7], context[8] );
  refalrts::link_brackets( context[9], context[11] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[8];
  res = refalrts::splice_evar( res, context[0], context[7] );
  res = refalrts::splice_evar( res, context[11], context[11] );
  res = refalrts::splice_evar( res, context[5], context[6] );
  res = refalrts::splice_evar( res, context[9], context[10] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

namespace /* unnamed */ {
refalrts::RefalNativeFunction descr_EscRegexp_XCode(func_EscRegexp_XCode, "EscRegexp-XCode");
refalrts::RefalFunction& EscRegexp_XCode = descr_EscRegexp_XCode;

} // unnamed namespace

#endif
#ifdef INTERPRET
namespace /* unnamed */ {
  namespace scope_EscRegexp_OCode {
    static const char *filename = "Flex-Lexer.cpp";
    static refalrts::RefalFunction *functions[] = {
      & ReadRegexp,
      & EscRegexp_OCode_C1
    };
    static const refalrts::RefalIdentifier idents[] = {
      & ident_TkOctNumber<int>::name
    };
    using refalrts::numbers;
    using refalrts::strings;
    static const refalrts::RASLCommand raa[] = {
      {refalrts::icThisIsGeneratedFunction, 0, 0, 0},
      {refalrts::icLoadConstants, 0, 0, 0},
      {refalrts::icReserveBacktrackStack, 8, 0, 0},
      {refalrts::icIssueMemory, 14, 0, 0},
      //FAST GEN: ( e.$ ) e.$
      //GLOBAL GEN: ( e.$ ) e.$
      // </0 & EscRegexp-OCode/4 (/7 e.idxB#0/5 )/8 e.idxT#0/2 >/1
      {refalrts::icInitB0_Lite, 0, 0, 0},
      {refalrts::icCallSaveLeft, 0, 2, 0},
      {refalrts::icBracketLeftSave, 0, 5, 2},
      // closed e.idxB#0 as range 5
      // closed e.idxT#0 as range 2
      {refalrts::icOnFailGoTo, +10, 0, 0},
      // ( e.idx ) '0' e.idx
      // </0 & EscRegexp-OCode/4 (/7 e.Accum#1/5 )/8 '0'/9 e.Text#1/2 >/1
      {refalrts::icSave, 0, 12, 2},
      {refalrts::icCharLeftSave, 9, static_cast<unsigned char>('0'), 12},
      // closed e.Accum#1 as range 5
      // closed e.Text#1 as range 12(2)
      //DEBUG: e.Accum#1: 5
      //DEBUG: e.Text#1: 2
      {refalrts::icEmptyResult, 0, 0, 0},
      //TRASH: {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 Reuse: & EscRegexp-OCode-C1/4 AsIs: (/7 AsIs: e.Accum#1/5 HalfReuse: '0'/8 HalfReuse: )/9 AsIs: e.Text#1/12(2) AsIs: >/1 ]] }
      {refalrts::icUpdateFunc, 0, 1, 4},
      {refalrts::icReinitChar, 0, '0', 8},
      {refalrts::icReinitBracket, 0, refalrts::ibCloseBracket, 9},
      {refalrts::icPushStack, 0, 0, 1},
      {refalrts::icPushStack, 0, 0, 0},
      {refalrts::icLinkBrackets, 7, 9, 0},
      {refalrts::icNextStep, 0, 0, 0},
      {refalrts::icProfilerStopSentence, 0, 0, 0},
      {refalrts::icOnFailGoTo, +10, 0, 0},
      // ( e.idx ) '1' e.idx
      // </0 & EscRegexp-OCode/4 (/7 e.Accum#1/5 )/8 '1'/9 e.Text#1/2 >/1
      {refalrts::icSave, 0, 12, 2},
      {refalrts::icCharLeftSave, 9, static_cast<unsigned char>('1'), 12},
      // closed e.Accum#1 as range 5
      // closed e.Text#1 as range 12(2)
      //DEBUG: e.Accum#1: 5
      //DEBUG: e.Text#1: 2
      {refalrts::icEmptyResult, 0, 0, 0},
      //TRASH: {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 Reuse: & EscRegexp-OCode-C1/4 AsIs: (/7 AsIs: e.Accum#1/5 HalfReuse: '1'/8 HalfReuse: )/9 AsIs: e.Text#1/12(2) AsIs: >/1 ]] }
      {refalrts::icUpdateFunc, 0, 1, 4},
      {refalrts::icReinitChar, 0, '1', 8},
      {refalrts::icReinitBracket, 0, refalrts::ibCloseBracket, 9},
      {refalrts::icPushStack, 0, 0, 1},
      {refalrts::icPushStack, 0, 0, 0},
      {refalrts::icLinkBrackets, 7, 9, 0},
      {refalrts::icNextStep, 0, 0, 0},
      {refalrts::icProfilerStopSentence, 0, 0, 0},
      {refalrts::icOnFailGoTo, +10, 0, 0},
      // ( e.idx ) '2' e.idx
      // </0 & EscRegexp-OCode/4 (/7 e.Accum#1/5 )/8 '2'/9 e.Text#1/2 >/1
      {refalrts::icSave, 0, 12, 2},
      {refalrts::icCharLeftSave, 9, static_cast<unsigned char>('2'), 12},
      // closed e.Accum#1 as range 5
      // closed e.Text#1 as range 12(2)
      //DEBUG: e.Accum#1: 5
      //DEBUG: e.Text#1: 2
      {refalrts::icEmptyResult, 0, 0, 0},
      //TRASH: {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 Reuse: & EscRegexp-OCode-C1/4 AsIs: (/7 AsIs: e.Accum#1/5 HalfReuse: '2'/8 HalfReuse: )/9 AsIs: e.Text#1/12(2) AsIs: >/1 ]] }
      {refalrts::icUpdateFunc, 0, 1, 4},
      {refalrts::icReinitChar, 0, '2', 8},
      {refalrts::icReinitBracket, 0, refalrts::ibCloseBracket, 9},
      {refalrts::icPushStack, 0, 0, 1},
      {refalrts::icPushStack, 0, 0, 0},
      {refalrts::icLinkBrackets, 7, 9, 0},
      {refalrts::icNextStep, 0, 0, 0},
      {refalrts::icProfilerStopSentence, 0, 0, 0},
      {refalrts::icOnFailGoTo, +10, 0, 0},
      // ( e.idx ) '3' e.idx
      // </0 & EscRegexp-OCode/4 (/7 e.Accum#1/5 )/8 '3'/9 e.Text#1/2 >/1
      {refalrts::icSave, 0, 12, 2},
      {refalrts::icCharLeftSave, 9, static_cast<unsigned char>('3'), 12},
      // closed e.Accum#1 as range 5
      // closed e.Text#1 as range 12(2)
      //DEBUG: e.Accum#1: 5
      //DEBUG: e.Text#1: 2
      {refalrts::icEmptyResult, 0, 0, 0},
      //TRASH: {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 Reuse: & EscRegexp-OCode-C1/4 AsIs: (/7 AsIs: e.Accum#1/5 HalfReuse: '3'/8 HalfReuse: )/9 AsIs: e.Text#1/12(2) AsIs: >/1 ]] }
      {refalrts::icUpdateFunc, 0, 1, 4},
      {refalrts::icReinitChar, 0, '3', 8},
      {refalrts::icReinitBracket, 0, refalrts::ibCloseBracket, 9},
      {refalrts::icPushStack, 0, 0, 1},
      {refalrts::icPushStack, 0, 0, 0},
      {refalrts::icLinkBrackets, 7, 9, 0},
      {refalrts::icNextStep, 0, 0, 0},
      {refalrts::icProfilerStopSentence, 0, 0, 0},
      {refalrts::icOnFailGoTo, +10, 0, 0},
      // ( e.idx ) '4' e.idx
      // </0 & EscRegexp-OCode/4 (/7 e.Accum#1/5 )/8 '4'/9 e.Text#1/2 >/1
      {refalrts::icSave, 0, 12, 2},
      {refalrts::icCharLeftSave, 9, static_cast<unsigned char>('4'), 12},
      // closed e.Accum#1 as range 5
      // closed e.Text#1 as range 12(2)
      //DEBUG: e.Accum#1: 5
      //DEBUG: e.Text#1: 2
      {refalrts::icEmptyResult, 0, 0, 0},
      //TRASH: {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 Reuse: & EscRegexp-OCode-C1/4 AsIs: (/7 AsIs: e.Accum#1/5 HalfReuse: '4'/8 HalfReuse: )/9 AsIs: e.Text#1/12(2) AsIs: >/1 ]] }
      {refalrts::icUpdateFunc, 0, 1, 4},
      {refalrts::icReinitChar, 0, '4', 8},
      {refalrts::icReinitBracket, 0, refalrts::ibCloseBracket, 9},
      {refalrts::icPushStack, 0, 0, 1},
      {refalrts::icPushStack, 0, 0, 0},
      {refalrts::icLinkBrackets, 7, 9, 0},
      {refalrts::icNextStep, 0, 0, 0},
      {refalrts::icProfilerStopSentence, 0, 0, 0},
      {refalrts::icOnFailGoTo, +10, 0, 0},
      // ( e.idx ) '5' e.idx
      // </0 & EscRegexp-OCode/4 (/7 e.Accum#1/5 )/8 '5'/9 e.Text#1/2 >/1
      {refalrts::icSave, 0, 12, 2},
      {refalrts::icCharLeftSave, 9, static_cast<unsigned char>('5'), 12},
      // closed e.Accum#1 as range 5
      // closed e.Text#1 as range 12(2)
      //DEBUG: e.Accum#1: 5
      //DEBUG: e.Text#1: 2
      {refalrts::icEmptyResult, 0, 0, 0},
      //TRASH: {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 Reuse: & EscRegexp-OCode-C1/4 AsIs: (/7 AsIs: e.Accum#1/5 HalfReuse: '5'/8 HalfReuse: )/9 AsIs: e.Text#1/12(2) AsIs: >/1 ]] }
      {refalrts::icUpdateFunc, 0, 1, 4},
      {refalrts::icReinitChar, 0, '5', 8},
      {refalrts::icReinitBracket, 0, refalrts::ibCloseBracket, 9},
      {refalrts::icPushStack, 0, 0, 1},
      {refalrts::icPushStack, 0, 0, 0},
      {refalrts::icLinkBrackets, 7, 9, 0},
      {refalrts::icNextStep, 0, 0, 0},
      {refalrts::icProfilerStopSentence, 0, 0, 0},
      {refalrts::icOnFailGoTo, +10, 0, 0},
      // ( e.idx ) '6' e.idx
      // </0 & EscRegexp-OCode/4 (/7 e.Accum#1/5 )/8 '6'/9 e.Text#1/2 >/1
      {refalrts::icSave, 0, 12, 2},
      {refalrts::icCharLeftSave, 9, static_cast<unsigned char>('6'), 12},
      // closed e.Accum#1 as range 5
      // closed e.Text#1 as range 12(2)
      //DEBUG: e.Accum#1: 5
      //DEBUG: e.Text#1: 2
      {refalrts::icEmptyResult, 0, 0, 0},
      //TRASH: {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 Reuse: & EscRegexp-OCode-C1/4 AsIs: (/7 AsIs: e.Accum#1/5 HalfReuse: '6'/8 HalfReuse: )/9 AsIs: e.Text#1/12(2) AsIs: >/1 ]] }
      {refalrts::icUpdateFunc, 0, 1, 4},
      {refalrts::icReinitChar, 0, '6', 8},
      {refalrts::icReinitBracket, 0, refalrts::ibCloseBracket, 9},
      {refalrts::icPushStack, 0, 0, 1},
      {refalrts::icPushStack, 0, 0, 0},
      {refalrts::icLinkBrackets, 7, 9, 0},
      {refalrts::icNextStep, 0, 0, 0},
      {refalrts::icProfilerStopSentence, 0, 0, 0},
      {refalrts::icOnFailGoTo, +10, 0, 0},
      // ( e.idx ) '7' e.idx
      // </0 & EscRegexp-OCode/4 (/7 e.Accum#1/5 )/8 '7'/9 e.Text#1/2 >/1
      {refalrts::icSave, 0, 12, 2},
      {refalrts::icCharLeftSave, 9, static_cast<unsigned char>('7'), 12},
      // closed e.Accum#1 as range 5
      // closed e.Text#1 as range 12(2)
      //DEBUG: e.Accum#1: 5
      //DEBUG: e.Text#1: 2
      {refalrts::icEmptyResult, 0, 0, 0},
      //TRASH: {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 Reuse: & EscRegexp-OCode-C1/4 AsIs: (/7 AsIs: e.Accum#1/5 HalfReuse: '7'/8 HalfReuse: )/9 AsIs: e.Text#1/12(2) AsIs: >/1 ]] }
      {refalrts::icUpdateFunc, 0, 1, 4},
      {refalrts::icReinitChar, 0, '7', 8},
      {refalrts::icReinitBracket, 0, refalrts::ibCloseBracket, 9},
      {refalrts::icPushStack, 0, 0, 1},
      {refalrts::icPushStack, 0, 0, 0},
      {refalrts::icLinkBrackets, 7, 9, 0},
      {refalrts::icNextStep, 0, 0, 0},
      {refalrts::icProfilerStopSentence, 0, 0, 0},
      // ( e.idx ) e.idx
      // </0 & EscRegexp-OCode/4 (/7 e.Accum#1/5 )/8 e.Text#1/2 >/1
      // closed e.Accum#1 as range 5
      // closed e.Text#1 as range 2
      //DEBUG: e.Accum#1: 5
      //DEBUG: e.Text#1: 2
      {refalrts::icEmptyResult, 0, 0, 0},
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ } (/9 # TkOctNumber/10 Tile{ AsIs: e.Accum#1/5 } )/11 Tile{ AsIs: </0 Reuse: & ReadRegexp/4 AsIs: (/7 } Tile{ AsIs: )/8 AsIs: e.Text#1/2 AsIs: >/1 ]] }
      {refalrts::icAllocBracket, 0, refalrts::ibOpenBracket, 9},
      {refalrts::icAllocIdent, 0, 0, 10},
      {refalrts::icAllocBracket, 0, refalrts::ibCloseBracket, 11},
      {refalrts::icUpdateFunc, 0, 0, 4},
      {refalrts::icPushStack, 0, 0, 1},
      {refalrts::icPushStack, 0, 0, 0},
      {refalrts::icLinkBrackets, 7, 8, 0},
      {refalrts::icLinkBrackets, 9, 11, 0},
      {refalrts::icSetRes, 0, 0, 8},
      {refalrts::icSpliceTile, 0, 7, 0},
      {refalrts::icSpliceTile, 11, 11, 0},
      {refalrts::icSpliceEVar, 0, 0, 5},
      {refalrts::icSpliceTile, 9, 10, 0},
      {refalrts::icNextStep, 0, 0, 0},
      {refalrts::icEnd, 0, 0, 0}
    };
  } // namespace scope_EscRegexp_OCode

} // unnamed namespace

namespace /* unnamed */ {
refalrts::RASLFunction descr_EscRegexp_OCode(
  "EscRegexp-OCode",
  scope_EscRegexp_OCode::raa,
  scope_EscRegexp_OCode::functions,
  scope_EscRegexp_OCode::idents,
  scope_EscRegexp_OCode::numbers,
  scope_EscRegexp_OCode::strings,
  scope_EscRegexp_OCode::filename
);
refalrts::RefalFunction& EscRegexp_OCode = descr_EscRegexp_OCode;

} // unnamed namespace

#else
static refalrts::FnResult func_EscRegexp_OCode(refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  refalrts::this_is_generated_function();
  // issue here memory for vars with 14 elems
  refalrts::Iter context[14];
  refalrts::zeros( context, 14 );
  //FAST GEN: ( e.$ ) e.$
  //GLOBAL GEN: ( e.$ ) e.$
  // </0 & EscRegexp-OCode/4 (/7 e.idxB#0/5 )/8 e.idxT#0/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  context[5] = 0;
  context[6] = 0;
  context[7] = refalrts::brackets_left( context[5], context[6], context[2], context[3] );
  if( ! context[7] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[7], context[8]);
  // closed e.idxB#0 as range 5
  // closed e.idxT#0 as range 2
  do {
    // ( e.idx ) '0' e.idx
    // </0 & EscRegexp-OCode/4 (/7 e.Accum#1/5 )/8 '0'/9 e.Text#1/2 >/1
    context[12] = context[2];
    context[13] = context[3];
    context[9] = refalrts::char_left( '0', context[12], context[13] );
    if( ! context[9] )
      continue;
    // closed e.Accum#1 as range 5
    // closed e.Text#1 as range 12(2)
    //DEBUG: e.Accum#1: 5
    //DEBUG: e.Text#1: 2

    refalrts::reset_allocator();
    //TRASH: {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 Reuse: & EscRegexp-OCode-C1/4 AsIs: (/7 AsIs: e.Accum#1/5 HalfReuse: '0'/8 HalfReuse: )/9 AsIs: e.Text#1/12(2) AsIs: >/1 ]] }
    refalrts::update_name( context[4], & EscRegexp_OCode_C1 );
    refalrts::reinit_char( context[8], '0' );
    refalrts::reinit_close_bracket( context[9] );
    refalrts::push_stack( context[1] );
    refalrts::push_stack( context[0] );
    refalrts::link_brackets( context[7], context[9] );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence();

  do {
    // ( e.idx ) '1' e.idx
    // </0 & EscRegexp-OCode/4 (/7 e.Accum#1/5 )/8 '1'/9 e.Text#1/2 >/1
    context[12] = context[2];
    context[13] = context[3];
    context[9] = refalrts::char_left( '1', context[12], context[13] );
    if( ! context[9] )
      continue;
    // closed e.Accum#1 as range 5
    // closed e.Text#1 as range 12(2)
    //DEBUG: e.Accum#1: 5
    //DEBUG: e.Text#1: 2

    refalrts::reset_allocator();
    //TRASH: {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 Reuse: & EscRegexp-OCode-C1/4 AsIs: (/7 AsIs: e.Accum#1/5 HalfReuse: '1'/8 HalfReuse: )/9 AsIs: e.Text#1/12(2) AsIs: >/1 ]] }
    refalrts::update_name( context[4], & EscRegexp_OCode_C1 );
    refalrts::reinit_char( context[8], '1' );
    refalrts::reinit_close_bracket( context[9] );
    refalrts::push_stack( context[1] );
    refalrts::push_stack( context[0] );
    refalrts::link_brackets( context[7], context[9] );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence();

  do {
    // ( e.idx ) '2' e.idx
    // </0 & EscRegexp-OCode/4 (/7 e.Accum#1/5 )/8 '2'/9 e.Text#1/2 >/1
    context[12] = context[2];
    context[13] = context[3];
    context[9] = refalrts::char_left( '2', context[12], context[13] );
    if( ! context[9] )
      continue;
    // closed e.Accum#1 as range 5
    // closed e.Text#1 as range 12(2)
    //DEBUG: e.Accum#1: 5
    //DEBUG: e.Text#1: 2

    refalrts::reset_allocator();
    //TRASH: {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 Reuse: & EscRegexp-OCode-C1/4 AsIs: (/7 AsIs: e.Accum#1/5 HalfReuse: '2'/8 HalfReuse: )/9 AsIs: e.Text#1/12(2) AsIs: >/1 ]] }
    refalrts::update_name( context[4], & EscRegexp_OCode_C1 );
    refalrts::reinit_char( context[8], '2' );
    refalrts::reinit_close_bracket( context[9] );
    refalrts::push_stack( context[1] );
    refalrts::push_stack( context[0] );
    refalrts::link_brackets( context[7], context[9] );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence();

  do {
    // ( e.idx ) '3' e.idx
    // </0 & EscRegexp-OCode/4 (/7 e.Accum#1/5 )/8 '3'/9 e.Text#1/2 >/1
    context[12] = context[2];
    context[13] = context[3];
    context[9] = refalrts::char_left( '3', context[12], context[13] );
    if( ! context[9] )
      continue;
    // closed e.Accum#1 as range 5
    // closed e.Text#1 as range 12(2)
    //DEBUG: e.Accum#1: 5
    //DEBUG: e.Text#1: 2

    refalrts::reset_allocator();
    //TRASH: {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 Reuse: & EscRegexp-OCode-C1/4 AsIs: (/7 AsIs: e.Accum#1/5 HalfReuse: '3'/8 HalfReuse: )/9 AsIs: e.Text#1/12(2) AsIs: >/1 ]] }
    refalrts::update_name( context[4], & EscRegexp_OCode_C1 );
    refalrts::reinit_char( context[8], '3' );
    refalrts::reinit_close_bracket( context[9] );
    refalrts::push_stack( context[1] );
    refalrts::push_stack( context[0] );
    refalrts::link_brackets( context[7], context[9] );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence();

  do {
    // ( e.idx ) '4' e.idx
    // </0 & EscRegexp-OCode/4 (/7 e.Accum#1/5 )/8 '4'/9 e.Text#1/2 >/1
    context[12] = context[2];
    context[13] = context[3];
    context[9] = refalrts::char_left( '4', context[12], context[13] );
    if( ! context[9] )
      continue;
    // closed e.Accum#1 as range 5
    // closed e.Text#1 as range 12(2)
    //DEBUG: e.Accum#1: 5
    //DEBUG: e.Text#1: 2

    refalrts::reset_allocator();
    //TRASH: {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 Reuse: & EscRegexp-OCode-C1/4 AsIs: (/7 AsIs: e.Accum#1/5 HalfReuse: '4'/8 HalfReuse: )/9 AsIs: e.Text#1/12(2) AsIs: >/1 ]] }
    refalrts::update_name( context[4], & EscRegexp_OCode_C1 );
    refalrts::reinit_char( context[8], '4' );
    refalrts::reinit_close_bracket( context[9] );
    refalrts::push_stack( context[1] );
    refalrts::push_stack( context[0] );
    refalrts::link_brackets( context[7], context[9] );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence();

  do {
    // ( e.idx ) '5' e.idx
    // </0 & EscRegexp-OCode/4 (/7 e.Accum#1/5 )/8 '5'/9 e.Text#1/2 >/1
    context[12] = context[2];
    context[13] = context[3];
    context[9] = refalrts::char_left( '5', context[12], context[13] );
    if( ! context[9] )
      continue;
    // closed e.Accum#1 as range 5
    // closed e.Text#1 as range 12(2)
    //DEBUG: e.Accum#1: 5
    //DEBUG: e.Text#1: 2

    refalrts::reset_allocator();
    //TRASH: {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 Reuse: & EscRegexp-OCode-C1/4 AsIs: (/7 AsIs: e.Accum#1/5 HalfReuse: '5'/8 HalfReuse: )/9 AsIs: e.Text#1/12(2) AsIs: >/1 ]] }
    refalrts::update_name( context[4], & EscRegexp_OCode_C1 );
    refalrts::reinit_char( context[8], '5' );
    refalrts::reinit_close_bracket( context[9] );
    refalrts::push_stack( context[1] );
    refalrts::push_stack( context[0] );
    refalrts::link_brackets( context[7], context[9] );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence();

  do {
    // ( e.idx ) '6' e.idx
    // </0 & EscRegexp-OCode/4 (/7 e.Accum#1/5 )/8 '6'/9 e.Text#1/2 >/1
    context[12] = context[2];
    context[13] = context[3];
    context[9] = refalrts::char_left( '6', context[12], context[13] );
    if( ! context[9] )
      continue;
    // closed e.Accum#1 as range 5
    // closed e.Text#1 as range 12(2)
    //DEBUG: e.Accum#1: 5
    //DEBUG: e.Text#1: 2

    refalrts::reset_allocator();
    //TRASH: {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 Reuse: & EscRegexp-OCode-C1/4 AsIs: (/7 AsIs: e.Accum#1/5 HalfReuse: '6'/8 HalfReuse: )/9 AsIs: e.Text#1/12(2) AsIs: >/1 ]] }
    refalrts::update_name( context[4], & EscRegexp_OCode_C1 );
    refalrts::reinit_char( context[8], '6' );
    refalrts::reinit_close_bracket( context[9] );
    refalrts::push_stack( context[1] );
    refalrts::push_stack( context[0] );
    refalrts::link_brackets( context[7], context[9] );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence();

  do {
    // ( e.idx ) '7' e.idx
    // </0 & EscRegexp-OCode/4 (/7 e.Accum#1/5 )/8 '7'/9 e.Text#1/2 >/1
    context[12] = context[2];
    context[13] = context[3];
    context[9] = refalrts::char_left( '7', context[12], context[13] );
    if( ! context[9] )
      continue;
    // closed e.Accum#1 as range 5
    // closed e.Text#1 as range 12(2)
    //DEBUG: e.Accum#1: 5
    //DEBUG: e.Text#1: 2

    refalrts::reset_allocator();
    //TRASH: {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 Reuse: & EscRegexp-OCode-C1/4 AsIs: (/7 AsIs: e.Accum#1/5 HalfReuse: '7'/8 HalfReuse: )/9 AsIs: e.Text#1/12(2) AsIs: >/1 ]] }
    refalrts::update_name( context[4], & EscRegexp_OCode_C1 );
    refalrts::reinit_char( context[8], '7' );
    refalrts::reinit_close_bracket( context[9] );
    refalrts::push_stack( context[1] );
    refalrts::push_stack( context[0] );
    refalrts::link_brackets( context[7], context[9] );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence();

  // ( e.idx ) e.idx
  // </0 & EscRegexp-OCode/4 (/7 e.Accum#1/5 )/8 e.Text#1/2 >/1
  // closed e.Accum#1 as range 5
  // closed e.Text#1 as range 2
  //DEBUG: e.Accum#1: 5
  //DEBUG: e.Text#1: 2

  refalrts::reset_allocator();
  //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ } (/9 # TkOctNumber/10 Tile{ AsIs: e.Accum#1/5 } )/11 Tile{ AsIs: </0 Reuse: & ReadRegexp/4 AsIs: (/7 } Tile{ AsIs: )/8 AsIs: e.Text#1/2 AsIs: >/1 ]] }
  if( ! refalrts::alloc_open_bracket( context[9] ) )
    return refalrts::cNoMemory;
  if( ! refalrts::alloc_ident( context[10], & ident_TkOctNumber<int>::name ) )
    return refalrts::cNoMemory;
  if( ! refalrts::alloc_close_bracket( context[11] ) )
    return refalrts::cNoMemory;
  refalrts::update_name( context[4], & ReadRegexp );
  refalrts::push_stack( context[1] );
  refalrts::push_stack( context[0] );
  refalrts::link_brackets( context[7], context[8] );
  refalrts::link_brackets( context[9], context[11] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[8];
  res = refalrts::splice_evar( res, context[0], context[7] );
  res = refalrts::splice_evar( res, context[11], context[11] );
  res = refalrts::splice_evar( res, context[5], context[6] );
  res = refalrts::splice_evar( res, context[9], context[10] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

namespace /* unnamed */ {
refalrts::RefalNativeFunction descr_EscRegexp_OCode(func_EscRegexp_OCode, "EscRegexp-OCode");
refalrts::RefalFunction& EscRegexp_OCode = descr_EscRegexp_OCode;

} // unnamed namespace

#endif
#ifdef INTERPRET
namespace /* unnamed */ {
  namespace scope_ReadGroup {
    static const char *filename = "Flex-Lexer.cpp";
    static refalrts::RefalFunction *functions[] = {
      & EscGroup,
      & ReadRegexp
    };
    static const refalrts::RefalIdentifier idents[] = {
      & ident_TokenError<int>::name,
      & ident_TChar<int>::name,
      & ident_TGroupRange<int>::name,
      & ident_TEndGroup<int>::name
    };
    using refalrts::numbers;
    static const refalrts::StringItem strings[] = {
      {"nexpected EOF in Regex", 22}
    };
    static const refalrts::RASLCommand raa[] = {
      {refalrts::icThisIsGeneratedFunction, 0, 0, 0},
      {refalrts::icLoadConstants, 0, 0, 0},
      {refalrts::icReserveBacktrackStack, 4, 0, 0},
      {refalrts::icIssueMemory, 15, 0, 0},
      //FAST GEN: e.$
      //GLOBAL GEN: ( e.$ ) e.$
      // </0 & ReadGroup/4 (/7 e.idxB#0/5 )/8 e.idxT#0/2 >/1
      {refalrts::icInitB0_Lite, 0, 0, 0},
      {refalrts::icCallSaveLeft, 0, 2, 0},
      {refalrts::icBracketLeftSave, 0, 5, 2},
      // closed e.idxB#0 as range 5
      // closed e.idxT#0 as range 2
      {refalrts::icOnFailGoTo, +21, 0, 0},
      // ( e.idx ) ']' e.idx
      // </0 & ReadGroup/4 (/7 e.Accum#1/5 )/8 ']'/9 e.Text#1/2 >/1
      {refalrts::icSave, 0, 13, 2},
      {refalrts::icCharLeftSave, 9, static_cast<unsigned char>(']'), 13},
      // closed e.Accum#1 as range 5
      // closed e.Text#1 as range 13(2)
      //DEBUG: e.Accum#1: 5
      //DEBUG: e.Text#1: 2
      {refalrts::icEmptyResult, 0, 0, 0},
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ HalfReuse: (/0 HalfReuse: # TEndGroup/4 } Tile{ AsIs: e.Accum#1/5 } ']'/10 Tile{ HalfReuse: )/7 } </11 & ReadRegexp/12 Tile{ HalfReuse: (/8 HalfReuse: )/9 AsIs: e.Text#1/13(2) AsIs: >/1 ]] }
      {refalrts::icAllocChar, 0, ']', 10},
      {refalrts::icAllocBracket, 0, refalrts::ibOpenCall, 11},
      {refalrts::icAllocFunc, 0, 1, 12},
      {refalrts::icReinitBracket, 0, refalrts::ibOpenBracket, 0},
      {refalrts::icReinitIdent, 0, 3, 4},
      {refalrts::icReinitBracket, 0, refalrts::ibCloseBracket, 7},
      {refalrts::icReinitBracket, 0, refalrts::ibOpenBracket, 8},
      {refalrts::icReinitBracket, 0, refalrts::ibCloseBracket, 9},
      {refalrts::icPushStack, 0, 0, 1},
      {refalrts::icPushStack, 0, 0, 11},
      {refalrts::icLinkBrackets, 8, 9, 0},
      {refalrts::icLinkBrackets, 0, 7, 0},
      {refalrts::icSetRes, 0, 0, 8},
      {refalrts::icSpliceTile, 11, 12, 0},
      {refalrts::icSpliceTile, 7, 7, 0},
      {refalrts::icSpliceTile, 10, 10, 0},
      {refalrts::icSpliceEVar, 0, 0, 5},
      {refalrts::icNextStep, 0, 0, 0},
      {refalrts::icProfilerStopSentence, 0, 0, 0},
      {refalrts::icOnFailGoTo, +19, 0, 0},
      // ( e.idx ) '-' e.idx
      // </0 & ReadGroup/4 (/7 e.Accum#1/5 )/8 '-'/9 e.Text#1/2 >/1
      {refalrts::icSave, 0, 13, 2},
      {refalrts::icCharLeftSave, 9, static_cast<unsigned char>('-'), 13},
      // closed e.Accum#1 as range 5
      // closed e.Text#1 as range 13(2)
      //DEBUG: e.Accum#1: 5
      //DEBUG: e.Text#1: 2
      {refalrts::icEmptyResult, 0, 0, 0},
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ } Tile{ AsIs: (/7 } # TGroupRange/10 Tile{ AsIs: e.Accum#1/5 } '-'/11 )/12 Tile{ AsIs: </0 AsIs: & ReadGroup/4 } Tile{ HalfReuse: (/8 HalfReuse: )/9 AsIs: e.Text#1/13(2) AsIs: >/1 ]] }
      {refalrts::icAllocIdent, 0, 2, 10},
      {refalrts::icAllocChar, 0, '-', 11},
      {refalrts::icAllocBracket, 0, refalrts::ibCloseBracket, 12},
      {refalrts::icReinitBracket, 0, refalrts::ibOpenBracket, 8},
      {refalrts::icReinitBracket, 0, refalrts::ibCloseBracket, 9},
      {refalrts::icPushStack, 0, 0, 1},
      {refalrts::icPushStack, 0, 0, 0},
      {refalrts::icLinkBrackets, 8, 9, 0},
      {refalrts::icLinkBrackets, 7, 12, 0},
      {refalrts::icSetRes, 0, 0, 8},
      {refalrts::icSpliceTile, 0, 4, 0},
      {refalrts::icSpliceTile, 11, 12, 0},
      {refalrts::icSpliceEVar, 0, 0, 5},
      {refalrts::icSpliceTile, 10, 10, 0},
      {refalrts::icSpliceTile, 7, 7, 0},
      {refalrts::icNextStep, 0, 0, 0},
      {refalrts::icProfilerStopSentence, 0, 0, 0},
      {refalrts::icOnFailGoTo, +12, 0, 0},
      // ( e.idx ) '\\' e.idx
      // </0 & ReadGroup/4 (/7 e.Accum#1/5 )/8 '\\'/9 e.Text#1/2 >/1
      {refalrts::icSave, 0, 13, 2},
      {refalrts::icCharLeftSave, 9, static_cast<unsigned char>('\\'), 13},
      // closed e.Accum#1 as range 5
      // closed e.Text#1 as range 13(2)
      //DEBUG: e.Accum#1: 5
      //DEBUG: e.Text#1: 2
      {refalrts::icEmptyResult, 0, 0, 0},
      //TRASH: {REMOVED TILE} (/7 e.Accum#1/5 {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 Reuse: & EscGroup/4 } Tile{ HalfReuse: (/8 HalfReuse: )/9 AsIs: e.Text#1/13(2) AsIs: >/1 ]] }
      {refalrts::icUpdateFunc, 0, 0, 4},
      {refalrts::icReinitBracket, 0, refalrts::ibOpenBracket, 8},
      {refalrts::icReinitBracket, 0, refalrts::ibCloseBracket, 9},
      {refalrts::icPushStack, 0, 0, 1},
      {refalrts::icPushStack, 0, 0, 0},
      {refalrts::icLinkBrackets, 8, 9, 0},
      {refalrts::icSetRes, 0, 0, 8},
      {refalrts::icTrash, 0, 0, 4},
      {refalrts::icNextStep, 0, 0, 0},
      {refalrts::icProfilerStopSentence, 0, 0, 0},
      {refalrts::icOnFailGoTo, +19, 0, 0},
      // ( e.idx ) s.idx e.idx
      // </0 & ReadGroup/4 (/7 e.Accum#1/5 )/8 s.Any#1/9 e.Text#1/2 >/1
      // closed e.Accum#1 as range 5
      {refalrts::icSave, 0, 13, 2},
      {refalrts::icsVarLeft, 0, 9, 13},
      // closed e.Text#1 as range 13(2)
      //DEBUG: e.Accum#1: 5
      //DEBUG: s.Any#1: 9
      //DEBUG: e.Text#1: 2
      {refalrts::icEmptyResult, 0, 0, 0},
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ } (/10 # TChar/11 Tile{ AsIs: e.Accum#1/5 } Tile{ AsIs: s.Any#1/9 } Tile{ AsIs: )/8 } Tile{ AsIs: </0 AsIs: & ReadGroup/4 AsIs: (/7 } )/12 Tile{ AsIs: e.Text#1/13(2) } Tile{ AsIs: >/1 ]] }
      {refalrts::icAllocBracket, 0, refalrts::ibOpenBracket, 10},
      {refalrts::icAllocIdent, 0, 1, 11},
      {refalrts::icAllocBracket, 0, refalrts::ibCloseBracket, 12},
      {refalrts::icPushStack, 0, 0, 1},
      {refalrts::icPushStack, 0, 0, 0},
      {refalrts::icLinkBrackets, 7, 12, 0},
      {refalrts::icLinkBrackets, 10, 8, 0},
      {refalrts::icSetRes, 0, 0, 1},
      {refalrts::icSpliceEVar, 0, 0, 13},
      {refalrts::icSpliceTile, 12, 12, 0},
      {refalrts::icSpliceTile, 0, 7, 0},
      {refalrts::icSpliceTile, 8, 8, 0},
      {refalrts::icSpliceTile, 9, 9, 0},
      {refalrts::icSpliceEVar, 0, 0, 5},
      {refalrts::icSpliceTile, 10, 11, 0},
      {refalrts::icNextStep, 0, 0, 0},
      {refalrts::icProfilerStopSentence, 0, 0, 0},
      // ( e.idx )
      // </0 & ReadGroup/4 (/7 e.Accum#1/5 )/8 >/1
      {refalrts::icEmpty, 0, 0, 2},
      // closed e.Accum#1 as range 5
      //DEBUG: e.Accum#1: 5
      {refalrts::icEmptyResult, 0, 0, 0},
      //TRASH: {REMOVED TILE} e.Accum#1/5 {REMOVED TILE}
      //RESULT: Tile{ [[ HalfReuse: (/0 HalfReuse: # TokenError/4 HalfReuse: 'U'/7 }"nexpected EOF in Regex"/9 Tile{ HalfReuse: 'p'/8 HalfReuse: )/1 ]] }
      {refalrts::icAllocString, 0, 0, 9},
      {refalrts::icReinitBracket, 0, refalrts::ibOpenBracket, 0},
      {refalrts::icReinitIdent, 0, 0, 4},
      {refalrts::icReinitChar, 0, 'U', 7},
      {refalrts::icReinitChar, 0, 'p', 8},
      {refalrts::icReinitBracket, 0, refalrts::ibCloseBracket, 1},
      {refalrts::icLinkBrackets, 0, 1, 0},
      {refalrts::icSetRes, 0, 0, 8},
      {refalrts::icSpliceTile, 9, 10, 0},
      {refalrts::icTrash, 0, 0, 7},
      {refalrts::icNextStep, 0, 0, 0},
      {refalrts::icEnd, 0, 0, 0}
    };
  } // namespace scope_ReadGroup

} // unnamed namespace

namespace /* unnamed */ {
refalrts::RASLFunction descr_ReadGroup(
  "ReadGroup",
  scope_ReadGroup::raa,
  scope_ReadGroup::functions,
  scope_ReadGroup::idents,
  scope_ReadGroup::numbers,
  scope_ReadGroup::strings,
  scope_ReadGroup::filename
);
refalrts::RefalFunction& ReadGroup = descr_ReadGroup;

} // unnamed namespace

#else
static refalrts::FnResult func_ReadGroup(refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  refalrts::this_is_generated_function();
  // issue here memory for vars with 15 elems
  refalrts::Iter context[15];
  refalrts::zeros( context, 15 );
  //FAST GEN: e.$
  //GLOBAL GEN: ( e.$ ) e.$
  // </0 & ReadGroup/4 (/7 e.idxB#0/5 )/8 e.idxT#0/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  context[5] = 0;
  context[6] = 0;
  context[7] = refalrts::brackets_left( context[5], context[6], context[2], context[3] );
  if( ! context[7] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[7], context[8]);
  // closed e.idxB#0 as range 5
  // closed e.idxT#0 as range 2
  do {
    // ( e.idx ) ']' e.idx
    // </0 & ReadGroup/4 (/7 e.Accum#1/5 )/8 ']'/9 e.Text#1/2 >/1
    context[13] = context[2];
    context[14] = context[3];
    context[9] = refalrts::char_left( ']', context[13], context[14] );
    if( ! context[9] )
      continue;
    // closed e.Accum#1 as range 5
    // closed e.Text#1 as range 13(2)
    //DEBUG: e.Accum#1: 5
    //DEBUG: e.Text#1: 2

    refalrts::reset_allocator();
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ HalfReuse: (/0 HalfReuse: # TEndGroup/4 } Tile{ AsIs: e.Accum#1/5 } ']'/10 Tile{ HalfReuse: )/7 } </11 & ReadRegexp/12 Tile{ HalfReuse: (/8 HalfReuse: )/9 AsIs: e.Text#1/13(2) AsIs: >/1 ]] }
    if( ! refalrts::alloc_char( context[10], ']' ) )
      return refalrts::cNoMemory;
    if( ! refalrts::alloc_open_call( context[11] ) )
      return refalrts::cNoMemory;
    if( ! refalrts::alloc_name( context[12], & ReadRegexp ) )
      return refalrts::cNoMemory;
    refalrts::reinit_open_bracket( context[0] );
    refalrts::reinit_ident( context[4], & ident_TEndGroup<int>::name );
    refalrts::reinit_close_bracket( context[7] );
    refalrts::reinit_open_bracket( context[8] );
    refalrts::reinit_close_bracket( context[9] );
    refalrts::push_stack( context[1] );
    refalrts::push_stack( context[11] );
    refalrts::link_brackets( context[8], context[9] );
    refalrts::link_brackets( context[0], context[7] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[8];
    res = refalrts::splice_evar( res, context[11], context[12] );
    res = refalrts::splice_evar( res, context[7], context[7] );
    res = refalrts::splice_evar( res, context[10], context[10] );
    res = refalrts::splice_evar( res, context[5], context[6] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence();

  do {
    // ( e.idx ) '-' e.idx
    // </0 & ReadGroup/4 (/7 e.Accum#1/5 )/8 '-'/9 e.Text#1/2 >/1
    context[13] = context[2];
    context[14] = context[3];
    context[9] = refalrts::char_left( '-', context[13], context[14] );
    if( ! context[9] )
      continue;
    // closed e.Accum#1 as range 5
    // closed e.Text#1 as range 13(2)
    //DEBUG: e.Accum#1: 5
    //DEBUG: e.Text#1: 2

    refalrts::reset_allocator();
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ AsIs: (/7 } # TGroupRange/10 Tile{ AsIs: e.Accum#1/5 } '-'/11 )/12 Tile{ AsIs: </0 AsIs: & ReadGroup/4 } Tile{ HalfReuse: (/8 HalfReuse: )/9 AsIs: e.Text#1/13(2) AsIs: >/1 ]] }
    if( ! refalrts::alloc_ident( context[10], & ident_TGroupRange<int>::name ) )
      return refalrts::cNoMemory;
    if( ! refalrts::alloc_char( context[11], '-' ) )
      return refalrts::cNoMemory;
    if( ! refalrts::alloc_close_bracket( context[12] ) )
      return refalrts::cNoMemory;
    refalrts::reinit_open_bracket( context[8] );
    refalrts::reinit_close_bracket( context[9] );
    refalrts::push_stack( context[1] );
    refalrts::push_stack( context[0] );
    refalrts::link_brackets( context[8], context[9] );
    refalrts::link_brackets( context[7], context[12] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[8];
    res = refalrts::splice_evar( res, context[0], context[4] );
    res = refalrts::splice_evar( res, context[11], context[12] );
    res = refalrts::splice_evar( res, context[5], context[6] );
    res = refalrts::splice_evar( res, context[10], context[10] );
    res = refalrts::splice_evar( res, context[7], context[7] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence();

  do {
    // ( e.idx ) '\\' e.idx
    // </0 & ReadGroup/4 (/7 e.Accum#1/5 )/8 '\\'/9 e.Text#1/2 >/1
    context[13] = context[2];
    context[14] = context[3];
    context[9] = refalrts::char_left( '\\', context[13], context[14] );
    if( ! context[9] )
      continue;
    // closed e.Accum#1 as range 5
    // closed e.Text#1 as range 13(2)
    //DEBUG: e.Accum#1: 5
    //DEBUG: e.Text#1: 2

    refalrts::reset_allocator();
    //TRASH: {REMOVED TILE} (/7 e.Accum#1/5 {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 Reuse: & EscGroup/4 } Tile{ HalfReuse: (/8 HalfReuse: )/9 AsIs: e.Text#1/13(2) AsIs: >/1 ]] }
    refalrts::update_name( context[4], & EscGroup );
    refalrts::reinit_open_bracket( context[8] );
    refalrts::reinit_close_bracket( context[9] );
    refalrts::push_stack( context[1] );
    refalrts::push_stack( context[0] );
    refalrts::link_brackets( context[8], context[9] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[8];
    refalrts::use( res );
    refalrts::splice_to_freelist_open( context[4], res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence();

  do {
    // ( e.idx ) s.idx e.idx
    // </0 & ReadGroup/4 (/7 e.Accum#1/5 )/8 s.Any#1/9 e.Text#1/2 >/1
    // closed e.Accum#1 as range 5
    context[13] = context[2];
    context[14] = context[3];
    if( ! refalrts::svar_left( context[9], context[13], context[14] ) )
      continue;
    // closed e.Text#1 as range 13(2)
    //DEBUG: e.Accum#1: 5
    //DEBUG: s.Any#1: 9
    //DEBUG: e.Text#1: 2

    refalrts::reset_allocator();
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ } (/10 # TChar/11 Tile{ AsIs: e.Accum#1/5 } Tile{ AsIs: s.Any#1/9 } Tile{ AsIs: )/8 } Tile{ AsIs: </0 AsIs: & ReadGroup/4 AsIs: (/7 } )/12 Tile{ AsIs: e.Text#1/13(2) } Tile{ AsIs: >/1 ]] }
    if( ! refalrts::alloc_open_bracket( context[10] ) )
      return refalrts::cNoMemory;
    if( ! refalrts::alloc_ident( context[11], & ident_TChar<int>::name ) )
      return refalrts::cNoMemory;
    if( ! refalrts::alloc_close_bracket( context[12] ) )
      return refalrts::cNoMemory;
    refalrts::push_stack( context[1] );
    refalrts::push_stack( context[0] );
    refalrts::link_brackets( context[7], context[12] );
    refalrts::link_brackets( context[10], context[8] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    res = refalrts::splice_evar( res, context[13], context[14] );
    res = refalrts::splice_evar( res, context[12], context[12] );
    res = refalrts::splice_evar( res, context[0], context[7] );
    res = refalrts::splice_evar( res, context[8], context[8] );
    res = refalrts::splice_evar( res, context[9], context[9] );
    res = refalrts::splice_evar( res, context[5], context[6] );
    res = refalrts::splice_evar( res, context[10], context[11] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence();

  // ( e.idx )
  // </0 & ReadGroup/4 (/7 e.Accum#1/5 )/8 >/1
  if( ! refalrts::empty_seq( context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  // closed e.Accum#1 as range 5
  //DEBUG: e.Accum#1: 5

  refalrts::reset_allocator();
  //TRASH: {REMOVED TILE} e.Accum#1/5 {REMOVED TILE}
  //RESULT: Tile{ [[ HalfReuse: (/0 HalfReuse: # TokenError/4 HalfReuse: 'U'/7 }"nexpected EOF in Regex"/9 Tile{ HalfReuse: 'p'/8 HalfReuse: )/1 ]] }
  if( ! refalrts::alloc_chars( context[9], context[10], "nexpected EOF in Regex", 22 ) )
    return refalrts::cNoMemory;
  refalrts::reinit_open_bracket( context[0] );
  refalrts::reinit_ident( context[4], & ident_TokenError<int>::name );
  refalrts::reinit_char( context[7], 'U' );
  refalrts::reinit_char( context[8], 'p' );
  refalrts::reinit_close_bracket( context[1] );
  refalrts::link_brackets( context[0], context[1] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[8];
  res = refalrts::splice_evar( res, context[9], context[10] );
  refalrts::use( res );
  refalrts::splice_to_freelist_open( context[7], res );
  return refalrts::cSuccess;
}

namespace /* unnamed */ {
refalrts::RefalNativeFunction descr_ReadGroup(func_ReadGroup, "ReadGroup");
refalrts::RefalFunction& ReadGroup = descr_ReadGroup;

} // unnamed namespace

#endif
#ifdef INTERPRET
namespace /* unnamed */ {
  namespace scope_ReadBody {
    static const char *filename = "Flex-Lexer.cpp";
    static refalrts::RefalFunction *functions[] = {
      & ReadRegexp
    };
    static const refalrts::RefalIdentifier idents[] = {
      & ident_TokenError<int>::name,
      & ident_TInclude<int>::name
    };
    using refalrts::numbers;
    static const refalrts::StringItem strings[] = {
      {"Unclused include", 16}
    };
    static const refalrts::RASLCommand raa[] = {
      {refalrts::icThisIsGeneratedFunction, 0, 0, 0},
      {refalrts::icLoadConstants, 0, 0, 0},
      {refalrts::icReserveBacktrackStack, 63, 0, 0},
      {refalrts::icIssueMemory, 16, 0, 0},
      //FAST GEN: ( e.$ ) e.$
      //GLOBAL GEN: ( e.$ ) e.$
      // </0 & ReadBody/4 (/7 e.idxB#0/5 )/8 e.idxT#0/2 >/1
      {refalrts::icInitB0_Lite, 0, 0, 0},
      {refalrts::icCallSaveLeft, 0, 2, 0},
      {refalrts::icBracketLeftSave, 0, 5, 2},
      // closed e.idxB#0 as range 5
      // closed e.idxT#0 as range 2
      {refalrts::icOnFailGoTo, +9, 0, 0},
      // ( e.idx ) '0' e.idx
      // </0 & ReadBody/4 (/7 e.Accum#1/5 )/8 '0'/9 e.Text#1/2 >/1
      {refalrts::icSave, 0, 14, 2},
      {refalrts::icCharLeftSave, 9, static_cast<unsigned char>('0'), 14},
      // closed e.Accum#1 as range 5
      // closed e.Text#1 as range 14(2)
      //DEBUG: e.Accum#1: 5
      //DEBUG: e.Text#1: 2
      {refalrts::icEmptyResult, 0, 0, 0},
      //TRASH: {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 AsIs: & ReadBody/4 AsIs: (/7 AsIs: e.Accum#1/5 HalfReuse: '0'/8 HalfReuse: )/9 AsIs: e.Text#1/14(2) AsIs: >/1 ]] }
      {refalrts::icReinitChar, 0, '0', 8},
      {refalrts::icReinitBracket, 0, refalrts::ibCloseBracket, 9},
      {refalrts::icPushStack, 0, 0, 1},
      {refalrts::icPushStack, 0, 0, 0},
      {refalrts::icLinkBrackets, 7, 9, 0},
      {refalrts::icNextStep, 0, 0, 0},
      {refalrts::icProfilerStopSentence, 0, 0, 0},
      {refalrts::icOnFailGoTo, +9, 0, 0},
      // ( e.idx ) '1' e.idx
      // </0 & ReadBody/4 (/7 e.Accum#1/5 )/8 '1'/9 e.Text#1/2 >/1
      {refalrts::icSave, 0, 14, 2},
      {refalrts::icCharLeftSave, 9, static_cast<unsigned char>('1'), 14},
      // closed e.Accum#1 as range 5
      // closed e.Text#1 as range 14(2)
      //DEBUG: e.Accum#1: 5
      //DEBUG: e.Text#1: 2
      {refalrts::icEmptyResult, 0, 0, 0},
      //TRASH: {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 AsIs: & ReadBody/4 AsIs: (/7 AsIs: e.Accum#1/5 HalfReuse: '1'/8 HalfReuse: )/9 AsIs: e.Text#1/14(2) AsIs: >/1 ]] }
      {refalrts::icReinitChar, 0, '1', 8},
      {refalrts::icReinitBracket, 0, refalrts::ibCloseBracket, 9},
      {refalrts::icPushStack, 0, 0, 1},
      {refalrts::icPushStack, 0, 0, 0},
      {refalrts::icLinkBrackets, 7, 9, 0},
      {refalrts::icNextStep, 0, 0, 0},
      {refalrts::icProfilerStopSentence, 0, 0, 0},
      {refalrts::icOnFailGoTo, +9, 0, 0},
      // ( e.idx ) '2' e.idx
      // </0 & ReadBody/4 (/7 e.Accum#1/5 )/8 '2'/9 e.Text#1/2 >/1
      {refalrts::icSave, 0, 14, 2},
      {refalrts::icCharLeftSave, 9, static_cast<unsigned char>('2'), 14},
      // closed e.Accum#1 as range 5
      // closed e.Text#1 as range 14(2)
      //DEBUG: e.Accum#1: 5
      //DEBUG: e.Text#1: 2
      {refalrts::icEmptyResult, 0, 0, 0},
      //TRASH: {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 AsIs: & ReadBody/4 AsIs: (/7 AsIs: e.Accum#1/5 HalfReuse: '2'/8 HalfReuse: )/9 AsIs: e.Text#1/14(2) AsIs: >/1 ]] }
      {refalrts::icReinitChar, 0, '2', 8},
      {refalrts::icReinitBracket, 0, refalrts::ibCloseBracket, 9},
      {refalrts::icPushStack, 0, 0, 1},
      {refalrts::icPushStack, 0, 0, 0},
      {refalrts::icLinkBrackets, 7, 9, 0},
      {refalrts::icNextStep, 0, 0, 0},
      {refalrts::icProfilerStopSentence, 0, 0, 0},
      {refalrts::icOnFailGoTo, +9, 0, 0},
      // ( e.idx ) '3' e.idx
      // </0 & ReadBody/4 (/7 e.Accum#1/5 )/8 '3'/9 e.Text#1/2 >/1
      {refalrts::icSave, 0, 14, 2},
      {refalrts::icCharLeftSave, 9, static_cast<unsigned char>('3'), 14},
      // closed e.Accum#1 as range 5
      // closed e.Text#1 as range 14(2)
      //DEBUG: e.Accum#1: 5
      //DEBUG: e.Text#1: 2
      {refalrts::icEmptyResult, 0, 0, 0},
      //TRASH: {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 AsIs: & ReadBody/4 AsIs: (/7 AsIs: e.Accum#1/5 HalfReuse: '3'/8 HalfReuse: )/9 AsIs: e.Text#1/14(2) AsIs: >/1 ]] }
      {refalrts::icReinitChar, 0, '3', 8},
      {refalrts::icReinitBracket, 0, refalrts::ibCloseBracket, 9},
      {refalrts::icPushStack, 0, 0, 1},
      {refalrts::icPushStack, 0, 0, 0},
      {refalrts::icLinkBrackets, 7, 9, 0},
      {refalrts::icNextStep, 0, 0, 0},
      {refalrts::icProfilerStopSentence, 0, 0, 0},
      {refalrts::icOnFailGoTo, +9, 0, 0},
      // ( e.idx ) '4' e.idx
      // </0 & ReadBody/4 (/7 e.Accum#1/5 )/8 '4'/9 e.Text#1/2 >/1
      {refalrts::icSave, 0, 14, 2},
      {refalrts::icCharLeftSave, 9, static_cast<unsigned char>('4'), 14},
      // closed e.Accum#1 as range 5
      // closed e.Text#1 as range 14(2)
      //DEBUG: e.Accum#1: 5
      //DEBUG: e.Text#1: 2
      {refalrts::icEmptyResult, 0, 0, 0},
      //TRASH: {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 AsIs: & ReadBody/4 AsIs: (/7 AsIs: e.Accum#1/5 HalfReuse: '4'/8 HalfReuse: )/9 AsIs: e.Text#1/14(2) AsIs: >/1 ]] }
      {refalrts::icReinitChar, 0, '4', 8},
      {refalrts::icReinitBracket, 0, refalrts::ibCloseBracket, 9},
      {refalrts::icPushStack, 0, 0, 1},
      {refalrts::icPushStack, 0, 0, 0},
      {refalrts::icLinkBrackets, 7, 9, 0},
      {refalrts::icNextStep, 0, 0, 0},
      {refalrts::icProfilerStopSentence, 0, 0, 0},
      {refalrts::icOnFailGoTo, +9, 0, 0},
      // ( e.idx ) '5' e.idx
      // </0 & ReadBody/4 (/7 e.Accum#1/5 )/8 '5'/9 e.Text#1/2 >/1
      {refalrts::icSave, 0, 14, 2},
      {refalrts::icCharLeftSave, 9, static_cast<unsigned char>('5'), 14},
      // closed e.Accum#1 as range 5
      // closed e.Text#1 as range 14(2)
      //DEBUG: e.Accum#1: 5
      //DEBUG: e.Text#1: 2
      {refalrts::icEmptyResult, 0, 0, 0},
      //TRASH: {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 AsIs: & ReadBody/4 AsIs: (/7 AsIs: e.Accum#1/5 HalfReuse: '5'/8 HalfReuse: )/9 AsIs: e.Text#1/14(2) AsIs: >/1 ]] }
      {refalrts::icReinitChar, 0, '5', 8},
      {refalrts::icReinitBracket, 0, refalrts::ibCloseBracket, 9},
      {refalrts::icPushStack, 0, 0, 1},
      {refalrts::icPushStack, 0, 0, 0},
      {refalrts::icLinkBrackets, 7, 9, 0},
      {refalrts::icNextStep, 0, 0, 0},
      {refalrts::icProfilerStopSentence, 0, 0, 0},
      {refalrts::icOnFailGoTo, +9, 0, 0},
      // ( e.idx ) '6' e.idx
      // </0 & ReadBody/4 (/7 e.Accum#1/5 )/8 '6'/9 e.Text#1/2 >/1
      {refalrts::icSave, 0, 14, 2},
      {refalrts::icCharLeftSave, 9, static_cast<unsigned char>('6'), 14},
      // closed e.Accum#1 as range 5
      // closed e.Text#1 as range 14(2)
      //DEBUG: e.Accum#1: 5
      //DEBUG: e.Text#1: 2
      {refalrts::icEmptyResult, 0, 0, 0},
      //TRASH: {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 AsIs: & ReadBody/4 AsIs: (/7 AsIs: e.Accum#1/5 HalfReuse: '6'/8 HalfReuse: )/9 AsIs: e.Text#1/14(2) AsIs: >/1 ]] }
      {refalrts::icReinitChar, 0, '6', 8},
      {refalrts::icReinitBracket, 0, refalrts::ibCloseBracket, 9},
      {refalrts::icPushStack, 0, 0, 1},
      {refalrts::icPushStack, 0, 0, 0},
      {refalrts::icLinkBrackets, 7, 9, 0},
      {refalrts::icNextStep, 0, 0, 0},
      {refalrts::icProfilerStopSentence, 0, 0, 0},
      {refalrts::icOnFailGoTo, +9, 0, 0},
      // ( e.idx ) '7' e.idx
      // </0 & ReadBody/4 (/7 e.Accum#1/5 )/8 '7'/9 e.Text#1/2 >/1
      {refalrts::icSave, 0, 14, 2},
      {refalrts::icCharLeftSave, 9, static_cast<unsigned char>('7'), 14},
      // closed e.Accum#1 as range 5
      // closed e.Text#1 as range 14(2)
      //DEBUG: e.Accum#1: 5
      //DEBUG: e.Text#1: 2
      {refalrts::icEmptyResult, 0, 0, 0},
      //TRASH: {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 AsIs: & ReadBody/4 AsIs: (/7 AsIs: e.Accum#1/5 HalfReuse: '7'/8 HalfReuse: )/9 AsIs: e.Text#1/14(2) AsIs: >/1 ]] }
      {refalrts::icReinitChar, 0, '7', 8},
      {refalrts::icReinitBracket, 0, refalrts::ibCloseBracket, 9},
      {refalrts::icPushStack, 0, 0, 1},
      {refalrts::icPushStack, 0, 0, 0},
      {refalrts::icLinkBrackets, 7, 9, 0},
      {refalrts::icNextStep, 0, 0, 0},
      {refalrts::icProfilerStopSentence, 0, 0, 0},
      {refalrts::icOnFailGoTo, +9, 0, 0},
      // ( e.idx ) '8' e.idx
      // </0 & ReadBody/4 (/7 e.Accum#1/5 )/8 '8'/9 e.Text#1/2 >/1
      {refalrts::icSave, 0, 14, 2},
      {refalrts::icCharLeftSave, 9, static_cast<unsigned char>('8'), 14},
      // closed e.Accum#1 as range 5
      // closed e.Text#1 as range 14(2)
      //DEBUG: e.Accum#1: 5
      //DEBUG: e.Text#1: 2
      {refalrts::icEmptyResult, 0, 0, 0},
      //TRASH: {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 AsIs: & ReadBody/4 AsIs: (/7 AsIs: e.Accum#1/5 HalfReuse: '8'/8 HalfReuse: )/9 AsIs: e.Text#1/14(2) AsIs: >/1 ]] }
      {refalrts::icReinitChar, 0, '8', 8},
      {refalrts::icReinitBracket, 0, refalrts::ibCloseBracket, 9},
      {refalrts::icPushStack, 0, 0, 1},
      {refalrts::icPushStack, 0, 0, 0},
      {refalrts::icLinkBrackets, 7, 9, 0},
      {refalrts::icNextStep, 0, 0, 0},
      {refalrts::icProfilerStopSentence, 0, 0, 0},
      {refalrts::icOnFailGoTo, +9, 0, 0},
      // ( e.idx ) '9' e.idx
      // </0 & ReadBody/4 (/7 e.Accum#1/5 )/8 '9'/9 e.Text#1/2 >/1
      {refalrts::icSave, 0, 14, 2},
      {refalrts::icCharLeftSave, 9, static_cast<unsigned char>('9'), 14},
      // closed e.Accum#1 as range 5
      // closed e.Text#1 as range 14(2)
      //DEBUG: e.Accum#1: 5
      //DEBUG: e.Text#1: 2
      {refalrts::icEmptyResult, 0, 0, 0},
      //TRASH: {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 AsIs: & ReadBody/4 AsIs: (/7 AsIs: e.Accum#1/5 HalfReuse: '9'/8 HalfReuse: )/9 AsIs: e.Text#1/14(2) AsIs: >/1 ]] }
      {refalrts::icReinitChar, 0, '9', 8},
      {refalrts::icReinitBracket, 0, refalrts::ibCloseBracket, 9},
      {refalrts::icPushStack, 0, 0, 1},
      {refalrts::icPushStack, 0, 0, 0},
      {refalrts::icLinkBrackets, 7, 9, 0},
      {refalrts::icNextStep, 0, 0, 0},
      {refalrts::icProfilerStopSentence, 0, 0, 0},
      {refalrts::icOnFailGoTo, +9, 0, 0},
      // ( e.idx ) 'a' e.idx
      // </0 & ReadBody/4 (/7 e.Accum#1/5 )/8 'a'/9 e.Text#1/2 >/1
      {refalrts::icSave, 0, 14, 2},
      {refalrts::icCharLeftSave, 9, static_cast<unsigned char>('a'), 14},
      // closed e.Accum#1 as range 5
      // closed e.Text#1 as range 14(2)
      //DEBUG: e.Accum#1: 5
      //DEBUG: e.Text#1: 2
      {refalrts::icEmptyResult, 0, 0, 0},
      //TRASH: {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 AsIs: & ReadBody/4 AsIs: (/7 AsIs: e.Accum#1/5 HalfReuse: 'a'/8 HalfReuse: )/9 AsIs: e.Text#1/14(2) AsIs: >/1 ]] }
      {refalrts::icReinitChar, 0, 'a', 8},
      {refalrts::icReinitBracket, 0, refalrts::ibCloseBracket, 9},
      {refalrts::icPushStack, 0, 0, 1},
      {refalrts::icPushStack, 0, 0, 0},
      {refalrts::icLinkBrackets, 7, 9, 0},
      {refalrts::icNextStep, 0, 0, 0},
      {refalrts::icProfilerStopSentence, 0, 0, 0},
      {refalrts::icOnFailGoTo, +9, 0, 0},
      // ( e.idx ) 'b' e.idx
      // </0 & ReadBody/4 (/7 e.Accum#1/5 )/8 'b'/9 e.Text#1/2 >/1
      {refalrts::icSave, 0, 14, 2},
      {refalrts::icCharLeftSave, 9, static_cast<unsigned char>('b'), 14},
      // closed e.Accum#1 as range 5
      // closed e.Text#1 as range 14(2)
      //DEBUG: e.Accum#1: 5
      //DEBUG: e.Text#1: 2
      {refalrts::icEmptyResult, 0, 0, 0},
      //TRASH: {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 AsIs: & ReadBody/4 AsIs: (/7 AsIs: e.Accum#1/5 HalfReuse: 'b'/8 HalfReuse: )/9 AsIs: e.Text#1/14(2) AsIs: >/1 ]] }
      {refalrts::icReinitChar, 0, 'b', 8},
      {refalrts::icReinitBracket, 0, refalrts::ibCloseBracket, 9},
      {refalrts::icPushStack, 0, 0, 1},
      {refalrts::icPushStack, 0, 0, 0},
      {refalrts::icLinkBrackets, 7, 9, 0},
      {refalrts::icNextStep, 0, 0, 0},
      {refalrts::icProfilerStopSentence, 0, 0, 0},
      {refalrts::icOnFailGoTo, +9, 0, 0},
      // ( e.idx ) 'c' e.idx
      // </0 & ReadBody/4 (/7 e.Accum#1/5 )/8 'c'/9 e.Text#1/2 >/1
      {refalrts::icSave, 0, 14, 2},
      {refalrts::icCharLeftSave, 9, static_cast<unsigned char>('c'), 14},
      // closed e.Accum#1 as range 5
      // closed e.Text#1 as range 14(2)
      //DEBUG: e.Accum#1: 5
      //DEBUG: e.Text#1: 2
      {refalrts::icEmptyResult, 0, 0, 0},
      //TRASH: {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 AsIs: & ReadBody/4 AsIs: (/7 AsIs: e.Accum#1/5 HalfReuse: 'c'/8 HalfReuse: )/9 AsIs: e.Text#1/14(2) AsIs: >/1 ]] }
      {refalrts::icReinitChar, 0, 'c', 8},
      {refalrts::icReinitBracket, 0, refalrts::ibCloseBracket, 9},
      {refalrts::icPushStack, 0, 0, 1},
      {refalrts::icPushStack, 0, 0, 0},
      {refalrts::icLinkBrackets, 7, 9, 0},
      {refalrts::icNextStep, 0, 0, 0},
      {refalrts::icProfilerStopSentence, 0, 0, 0},
      {refalrts::icOnFailGoTo, +9, 0, 0},
      // ( e.idx ) 'd' e.idx
      // </0 & ReadBody/4 (/7 e.Accum#1/5 )/8 'd'/9 e.Text#1/2 >/1
      {refalrts::icSave, 0, 14, 2},
      {refalrts::icCharLeftSave, 9, static_cast<unsigned char>('d'), 14},
      // closed e.Accum#1 as range 5
      // closed e.Text#1 as range 14(2)
      //DEBUG: e.Accum#1: 5
      //DEBUG: e.Text#1: 2
      {refalrts::icEmptyResult, 0, 0, 0},
      //TRASH: {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 AsIs: & ReadBody/4 AsIs: (/7 AsIs: e.Accum#1/5 HalfReuse: 'd'/8 HalfReuse: )/9 AsIs: e.Text#1/14(2) AsIs: >/1 ]] }
      {refalrts::icReinitChar, 0, 'd', 8},
      {refalrts::icReinitBracket, 0, refalrts::ibCloseBracket, 9},
      {refalrts::icPushStack, 0, 0, 1},
      {refalrts::icPushStack, 0, 0, 0},
      {refalrts::icLinkBrackets, 7, 9, 0},
      {refalrts::icNextStep, 0, 0, 0},
      {refalrts::icProfilerStopSentence, 0, 0, 0},
      {refalrts::icOnFailGoTo, +9, 0, 0},
      // ( e.idx ) 'e' e.idx
      // </0 & ReadBody/4 (/7 e.Accum#1/5 )/8 'e'/9 e.Text#1/2 >/1
      {refalrts::icSave, 0, 14, 2},
      {refalrts::icCharLeftSave, 9, static_cast<unsigned char>('e'), 14},
      // closed e.Accum#1 as range 5
      // closed e.Text#1 as range 14(2)
      //DEBUG: e.Accum#1: 5
      //DEBUG: e.Text#1: 2
      {refalrts::icEmptyResult, 0, 0, 0},
      //TRASH: {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 AsIs: & ReadBody/4 AsIs: (/7 AsIs: e.Accum#1/5 HalfReuse: 'e'/8 HalfReuse: )/9 AsIs: e.Text#1/14(2) AsIs: >/1 ]] }
      {refalrts::icReinitChar, 0, 'e', 8},
      {refalrts::icReinitBracket, 0, refalrts::ibCloseBracket, 9},
      {refalrts::icPushStack, 0, 0, 1},
      {refalrts::icPushStack, 0, 0, 0},
      {refalrts::icLinkBrackets, 7, 9, 0},
      {refalrts::icNextStep, 0, 0, 0},
      {refalrts::icProfilerStopSentence, 0, 0, 0},
      {refalrts::icOnFailGoTo, +9, 0, 0},
      // ( e.idx ) 'f' e.idx
      // </0 & ReadBody/4 (/7 e.Accum#1/5 )/8 'f'/9 e.Text#1/2 >/1
      {refalrts::icSave, 0, 14, 2},
      {refalrts::icCharLeftSave, 9, static_cast<unsigned char>('f'), 14},
      // closed e.Accum#1 as range 5
      // closed e.Text#1 as range 14(2)
      //DEBUG: e.Accum#1: 5
      //DEBUG: e.Text#1: 2
      {refalrts::icEmptyResult, 0, 0, 0},
      //TRASH: {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 AsIs: & ReadBody/4 AsIs: (/7 AsIs: e.Accum#1/5 HalfReuse: 'f'/8 HalfReuse: )/9 AsIs: e.Text#1/14(2) AsIs: >/1 ]] }
      {refalrts::icReinitChar, 0, 'f', 8},
      {refalrts::icReinitBracket, 0, refalrts::ibCloseBracket, 9},
      {refalrts::icPushStack, 0, 0, 1},
      {refalrts::icPushStack, 0, 0, 0},
      {refalrts::icLinkBrackets, 7, 9, 0},
      {refalrts::icNextStep, 0, 0, 0},
      {refalrts::icProfilerStopSentence, 0, 0, 0},
      {refalrts::icOnFailGoTo, +9, 0, 0},
      // ( e.idx ) 'g' e.idx
      // </0 & ReadBody/4 (/7 e.Accum#1/5 )/8 'g'/9 e.Text#1/2 >/1
      {refalrts::icSave, 0, 14, 2},
      {refalrts::icCharLeftSave, 9, static_cast<unsigned char>('g'), 14},
      // closed e.Accum#1 as range 5
      // closed e.Text#1 as range 14(2)
      //DEBUG: e.Accum#1: 5
      //DEBUG: e.Text#1: 2
      {refalrts::icEmptyResult, 0, 0, 0},
      //TRASH: {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 AsIs: & ReadBody/4 AsIs: (/7 AsIs: e.Accum#1/5 HalfReuse: 'g'/8 HalfReuse: )/9 AsIs: e.Text#1/14(2) AsIs: >/1 ]] }
      {refalrts::icReinitChar, 0, 'g', 8},
      {refalrts::icReinitBracket, 0, refalrts::ibCloseBracket, 9},
      {refalrts::icPushStack, 0, 0, 1},
      {refalrts::icPushStack, 0, 0, 0},
      {refalrts::icLinkBrackets, 7, 9, 0},
      {refalrts::icNextStep, 0, 0, 0},
      {refalrts::icProfilerStopSentence, 0, 0, 0},
      {refalrts::icOnFailGoTo, +9, 0, 0},
      // ( e.idx ) 'h' e.idx
      // </0 & ReadBody/4 (/7 e.Accum#1/5 )/8 'h'/9 e.Text#1/2 >/1
      {refalrts::icSave, 0, 14, 2},
      {refalrts::icCharLeftSave, 9, static_cast<unsigned char>('h'), 14},
      // closed e.Accum#1 as range 5
      // closed e.Text#1 as range 14(2)
      //DEBUG: e.Accum#1: 5
      //DEBUG: e.Text#1: 2
      {refalrts::icEmptyResult, 0, 0, 0},
      //TRASH: {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 AsIs: & ReadBody/4 AsIs: (/7 AsIs: e.Accum#1/5 HalfReuse: 'h'/8 HalfReuse: )/9 AsIs: e.Text#1/14(2) AsIs: >/1 ]] }
      {refalrts::icReinitChar, 0, 'h', 8},
      {refalrts::icReinitBracket, 0, refalrts::ibCloseBracket, 9},
      {refalrts::icPushStack, 0, 0, 1},
      {refalrts::icPushStack, 0, 0, 0},
      {refalrts::icLinkBrackets, 7, 9, 0},
      {refalrts::icNextStep, 0, 0, 0},
      {refalrts::icProfilerStopSentence, 0, 0, 0},
      {refalrts::icOnFailGoTo, +9, 0, 0},
      // ( e.idx ) 'i' e.idx
      // </0 & ReadBody/4 (/7 e.Accum#1/5 )/8 'i'/9 e.Text#1/2 >/1
      {refalrts::icSave, 0, 14, 2},
      {refalrts::icCharLeftSave, 9, static_cast<unsigned char>('i'), 14},
      // closed e.Accum#1 as range 5
      // closed e.Text#1 as range 14(2)
      //DEBUG: e.Accum#1: 5
      //DEBUG: e.Text#1: 2
      {refalrts::icEmptyResult, 0, 0, 0},
      //TRASH: {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 AsIs: & ReadBody/4 AsIs: (/7 AsIs: e.Accum#1/5 HalfReuse: 'i'/8 HalfReuse: )/9 AsIs: e.Text#1/14(2) AsIs: >/1 ]] }
      {refalrts::icReinitChar, 0, 'i', 8},
      {refalrts::icReinitBracket, 0, refalrts::ibCloseBracket, 9},
      {refalrts::icPushStack, 0, 0, 1},
      {refalrts::icPushStack, 0, 0, 0},
      {refalrts::icLinkBrackets, 7, 9, 0},
      {refalrts::icNextStep, 0, 0, 0},
      {refalrts::icProfilerStopSentence, 0, 0, 0},
      {refalrts::icOnFailGoTo, +9, 0, 0},
      // ( e.idx ) 'j' e.idx
      // </0 & ReadBody/4 (/7 e.Accum#1/5 )/8 'j'/9 e.Text#1/2 >/1
      {refalrts::icSave, 0, 14, 2},
      {refalrts::icCharLeftSave, 9, static_cast<unsigned char>('j'), 14},
      // closed e.Accum#1 as range 5
      // closed e.Text#1 as range 14(2)
      //DEBUG: e.Accum#1: 5
      //DEBUG: e.Text#1: 2
      {refalrts::icEmptyResult, 0, 0, 0},
      //TRASH: {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 AsIs: & ReadBody/4 AsIs: (/7 AsIs: e.Accum#1/5 HalfReuse: 'j'/8 HalfReuse: )/9 AsIs: e.Text#1/14(2) AsIs: >/1 ]] }
      {refalrts::icReinitChar, 0, 'j', 8},
      {refalrts::icReinitBracket, 0, refalrts::ibCloseBracket, 9},
      {refalrts::icPushStack, 0, 0, 1},
      {refalrts::icPushStack, 0, 0, 0},
      {refalrts::icLinkBrackets, 7, 9, 0},
      {refalrts::icNextStep, 0, 0, 0},
      {refalrts::icProfilerStopSentence, 0, 0, 0},
      {refalrts::icOnFailGoTo, +9, 0, 0},
      // ( e.idx ) 'k' e.idx
      // </0 & ReadBody/4 (/7 e.Accum#1/5 )/8 'k'/9 e.Text#1/2 >/1
      {refalrts::icSave, 0, 14, 2},
      {refalrts::icCharLeftSave, 9, static_cast<unsigned char>('k'), 14},
      // closed e.Accum#1 as range 5
      // closed e.Text#1 as range 14(2)
      //DEBUG: e.Accum#1: 5
      //DEBUG: e.Text#1: 2
      {refalrts::icEmptyResult, 0, 0, 0},
      //TRASH: {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 AsIs: & ReadBody/4 AsIs: (/7 AsIs: e.Accum#1/5 HalfReuse: 'k'/8 HalfReuse: )/9 AsIs: e.Text#1/14(2) AsIs: >/1 ]] }
      {refalrts::icReinitChar, 0, 'k', 8},
      {refalrts::icReinitBracket, 0, refalrts::ibCloseBracket, 9},
      {refalrts::icPushStack, 0, 0, 1},
      {refalrts::icPushStack, 0, 0, 0},
      {refalrts::icLinkBrackets, 7, 9, 0},
      {refalrts::icNextStep, 0, 0, 0},
      {refalrts::icProfilerStopSentence, 0, 0, 0},
      {refalrts::icOnFailGoTo, +9, 0, 0},
      // ( e.idx ) 'l' e.idx
      // </0 & ReadBody/4 (/7 e.Accum#1/5 )/8 'l'/9 e.Text#1/2 >/1
      {refalrts::icSave, 0, 14, 2},
      {refalrts::icCharLeftSave, 9, static_cast<unsigned char>('l'), 14},
      // closed e.Accum#1 as range 5
      // closed e.Text#1 as range 14(2)
      //DEBUG: e.Accum#1: 5
      //DEBUG: e.Text#1: 2
      {refalrts::icEmptyResult, 0, 0, 0},
      //TRASH: {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 AsIs: & ReadBody/4 AsIs: (/7 AsIs: e.Accum#1/5 HalfReuse: 'l'/8 HalfReuse: )/9 AsIs: e.Text#1/14(2) AsIs: >/1 ]] }
      {refalrts::icReinitChar, 0, 'l', 8},
      {refalrts::icReinitBracket, 0, refalrts::ibCloseBracket, 9},
      {refalrts::icPushStack, 0, 0, 1},
      {refalrts::icPushStack, 0, 0, 0},
      {refalrts::icLinkBrackets, 7, 9, 0},
      {refalrts::icNextStep, 0, 0, 0},
      {refalrts::icProfilerStopSentence, 0, 0, 0},
      {refalrts::icOnFailGoTo, +9, 0, 0},
      // ( e.idx ) 'm' e.idx
      // </0 & ReadBody/4 (/7 e.Accum#1/5 )/8 'm'/9 e.Text#1/2 >/1
      {refalrts::icSave, 0, 14, 2},
      {refalrts::icCharLeftSave, 9, static_cast<unsigned char>('m'), 14},
      // closed e.Accum#1 as range 5
      // closed e.Text#1 as range 14(2)
      //DEBUG: e.Accum#1: 5
      //DEBUG: e.Text#1: 2
      {refalrts::icEmptyResult, 0, 0, 0},
      //TRASH: {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 AsIs: & ReadBody/4 AsIs: (/7 AsIs: e.Accum#1/5 HalfReuse: 'm'/8 HalfReuse: )/9 AsIs: e.Text#1/14(2) AsIs: >/1 ]] }
      {refalrts::icReinitChar, 0, 'm', 8},
      {refalrts::icReinitBracket, 0, refalrts::ibCloseBracket, 9},
      {refalrts::icPushStack, 0, 0, 1},
      {refalrts::icPushStack, 0, 0, 0},
      {refalrts::icLinkBrackets, 7, 9, 0},
      {refalrts::icNextStep, 0, 0, 0},
      {refalrts::icProfilerStopSentence, 0, 0, 0},
      {refalrts::icOnFailGoTo, +9, 0, 0},
      // ( e.idx ) 'n' e.idx
      // </0 & ReadBody/4 (/7 e.Accum#1/5 )/8 'n'/9 e.Text#1/2 >/1
      {refalrts::icSave, 0, 14, 2},
      {refalrts::icCharLeftSave, 9, static_cast<unsigned char>('n'), 14},
      // closed e.Accum#1 as range 5
      // closed e.Text#1 as range 14(2)
      //DEBUG: e.Accum#1: 5
      //DEBUG: e.Text#1: 2
      {refalrts::icEmptyResult, 0, 0, 0},
      //TRASH: {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 AsIs: & ReadBody/4 AsIs: (/7 AsIs: e.Accum#1/5 HalfReuse: 'n'/8 HalfReuse: )/9 AsIs: e.Text#1/14(2) AsIs: >/1 ]] }
      {refalrts::icReinitChar, 0, 'n', 8},
      {refalrts::icReinitBracket, 0, refalrts::ibCloseBracket, 9},
      {refalrts::icPushStack, 0, 0, 1},
      {refalrts::icPushStack, 0, 0, 0},
      {refalrts::icLinkBrackets, 7, 9, 0},
      {refalrts::icNextStep, 0, 0, 0},
      {refalrts::icProfilerStopSentence, 0, 0, 0},
      {refalrts::icOnFailGoTo, +9, 0, 0},
      // ( e.idx ) 'o' e.idx
      // </0 & ReadBody/4 (/7 e.Accum#1/5 )/8 'o'/9 e.Text#1/2 >/1
      {refalrts::icSave, 0, 14, 2},
      {refalrts::icCharLeftSave, 9, static_cast<unsigned char>('o'), 14},
      // closed e.Accum#1 as range 5
      // closed e.Text#1 as range 14(2)
      //DEBUG: e.Accum#1: 5
      //DEBUG: e.Text#1: 2
      {refalrts::icEmptyResult, 0, 0, 0},
      //TRASH: {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 AsIs: & ReadBody/4 AsIs: (/7 AsIs: e.Accum#1/5 HalfReuse: 'o'/8 HalfReuse: )/9 AsIs: e.Text#1/14(2) AsIs: >/1 ]] }
      {refalrts::icReinitChar, 0, 'o', 8},
      {refalrts::icReinitBracket, 0, refalrts::ibCloseBracket, 9},
      {refalrts::icPushStack, 0, 0, 1},
      {refalrts::icPushStack, 0, 0, 0},
      {refalrts::icLinkBrackets, 7, 9, 0},
      {refalrts::icNextStep, 0, 0, 0},
      {refalrts::icProfilerStopSentence, 0, 0, 0},
      {refalrts::icOnFailGoTo, +9, 0, 0},
      // ( e.idx ) 'p' e.idx
      // </0 & ReadBody/4 (/7 e.Accum#1/5 )/8 'p'/9 e.Text#1/2 >/1
      {refalrts::icSave, 0, 14, 2},
      {refalrts::icCharLeftSave, 9, static_cast<unsigned char>('p'), 14},
      // closed e.Accum#1 as range 5
      // closed e.Text#1 as range 14(2)
      //DEBUG: e.Accum#1: 5
      //DEBUG: e.Text#1: 2
      {refalrts::icEmptyResult, 0, 0, 0},
      //TRASH: {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 AsIs: & ReadBody/4 AsIs: (/7 AsIs: e.Accum#1/5 HalfReuse: 'p'/8 HalfReuse: )/9 AsIs: e.Text#1/14(2) AsIs: >/1 ]] }
      {refalrts::icReinitChar, 0, 'p', 8},
      {refalrts::icReinitBracket, 0, refalrts::ibCloseBracket, 9},
      {refalrts::icPushStack, 0, 0, 1},
      {refalrts::icPushStack, 0, 0, 0},
      {refalrts::icLinkBrackets, 7, 9, 0},
      {refalrts::icNextStep, 0, 0, 0},
      {refalrts::icProfilerStopSentence, 0, 0, 0},
      {refalrts::icOnFailGoTo, +9, 0, 0},
      // ( e.idx ) 'q' e.idx
      // </0 & ReadBody/4 (/7 e.Accum#1/5 )/8 'q'/9 e.Text#1/2 >/1
      {refalrts::icSave, 0, 14, 2},
      {refalrts::icCharLeftSave, 9, static_cast<unsigned char>('q'), 14},
      // closed e.Accum#1 as range 5
      // closed e.Text#1 as range 14(2)
      //DEBUG: e.Accum#1: 5
      //DEBUG: e.Text#1: 2
      {refalrts::icEmptyResult, 0, 0, 0},
      //TRASH: {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 AsIs: & ReadBody/4 AsIs: (/7 AsIs: e.Accum#1/5 HalfReuse: 'q'/8 HalfReuse: )/9 AsIs: e.Text#1/14(2) AsIs: >/1 ]] }
      {refalrts::icReinitChar, 0, 'q', 8},
      {refalrts::icReinitBracket, 0, refalrts::ibCloseBracket, 9},
      {refalrts::icPushStack, 0, 0, 1},
      {refalrts::icPushStack, 0, 0, 0},
      {refalrts::icLinkBrackets, 7, 9, 0},
      {refalrts::icNextStep, 0, 0, 0},
      {refalrts::icProfilerStopSentence, 0, 0, 0},
      {refalrts::icOnFailGoTo, +9, 0, 0},
      // ( e.idx ) 'r' e.idx
      // </0 & ReadBody/4 (/7 e.Accum#1/5 )/8 'r'/9 e.Text#1/2 >/1
      {refalrts::icSave, 0, 14, 2},
      {refalrts::icCharLeftSave, 9, static_cast<unsigned char>('r'), 14},
      // closed e.Accum#1 as range 5
      // closed e.Text#1 as range 14(2)
      //DEBUG: e.Accum#1: 5
      //DEBUG: e.Text#1: 2
      {refalrts::icEmptyResult, 0, 0, 0},
      //TRASH: {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 AsIs: & ReadBody/4 AsIs: (/7 AsIs: e.Accum#1/5 HalfReuse: 'r'/8 HalfReuse: )/9 AsIs: e.Text#1/14(2) AsIs: >/1 ]] }
      {refalrts::icReinitChar, 0, 'r', 8},
      {refalrts::icReinitBracket, 0, refalrts::ibCloseBracket, 9},
      {refalrts::icPushStack, 0, 0, 1},
      {refalrts::icPushStack, 0, 0, 0},
      {refalrts::icLinkBrackets, 7, 9, 0},
      {refalrts::icNextStep, 0, 0, 0},
      {refalrts::icProfilerStopSentence, 0, 0, 0},
      {refalrts::icOnFailGoTo, +9, 0, 0},
      // ( e.idx ) 's' e.idx
      // </0 & ReadBody/4 (/7 e.Accum#1/5 )/8 's'/9 e.Text#1/2 >/1
      {refalrts::icSave, 0, 14, 2},
      {refalrts::icCharLeftSave, 9, static_cast<unsigned char>('s'), 14},
      // closed e.Accum#1 as range 5
      // closed e.Text#1 as range 14(2)
      //DEBUG: e.Accum#1: 5
      //DEBUG: e.Text#1: 2
      {refalrts::icEmptyResult, 0, 0, 0},
      //TRASH: {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 AsIs: & ReadBody/4 AsIs: (/7 AsIs: e.Accum#1/5 HalfReuse: 's'/8 HalfReuse: )/9 AsIs: e.Text#1/14(2) AsIs: >/1 ]] }
      {refalrts::icReinitChar, 0, 's', 8},
      {refalrts::icReinitBracket, 0, refalrts::ibCloseBracket, 9},
      {refalrts::icPushStack, 0, 0, 1},
      {refalrts::icPushStack, 0, 0, 0},
      {refalrts::icLinkBrackets, 7, 9, 0},
      {refalrts::icNextStep, 0, 0, 0},
      {refalrts::icProfilerStopSentence, 0, 0, 0},
      {refalrts::icOnFailGoTo, +9, 0, 0},
      // ( e.idx ) 't' e.idx
      // </0 & ReadBody/4 (/7 e.Accum#1/5 )/8 't'/9 e.Text#1/2 >/1
      {refalrts::icSave, 0, 14, 2},
      {refalrts::icCharLeftSave, 9, static_cast<unsigned char>('t'), 14},
      // closed e.Accum#1 as range 5
      // closed e.Text#1 as range 14(2)
      //DEBUG: e.Accum#1: 5
      //DEBUG: e.Text#1: 2
      {refalrts::icEmptyResult, 0, 0, 0},
      //TRASH: {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 AsIs: & ReadBody/4 AsIs: (/7 AsIs: e.Accum#1/5 HalfReuse: 't'/8 HalfReuse: )/9 AsIs: e.Text#1/14(2) AsIs: >/1 ]] }
      {refalrts::icReinitChar, 0, 't', 8},
      {refalrts::icReinitBracket, 0, refalrts::ibCloseBracket, 9},
      {refalrts::icPushStack, 0, 0, 1},
      {refalrts::icPushStack, 0, 0, 0},
      {refalrts::icLinkBrackets, 7, 9, 0},
      {refalrts::icNextStep, 0, 0, 0},
      {refalrts::icProfilerStopSentence, 0, 0, 0},
      {refalrts::icOnFailGoTo, +9, 0, 0},
      // ( e.idx ) 'u' e.idx
      // </0 & ReadBody/4 (/7 e.Accum#1/5 )/8 'u'/9 e.Text#1/2 >/1
      {refalrts::icSave, 0, 14, 2},
      {refalrts::icCharLeftSave, 9, static_cast<unsigned char>('u'), 14},
      // closed e.Accum#1 as range 5
      // closed e.Text#1 as range 14(2)
      //DEBUG: e.Accum#1: 5
      //DEBUG: e.Text#1: 2
      {refalrts::icEmptyResult, 0, 0, 0},
      //TRASH: {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 AsIs: & ReadBody/4 AsIs: (/7 AsIs: e.Accum#1/5 HalfReuse: 'u'/8 HalfReuse: )/9 AsIs: e.Text#1/14(2) AsIs: >/1 ]] }
      {refalrts::icReinitChar, 0, 'u', 8},
      {refalrts::icReinitBracket, 0, refalrts::ibCloseBracket, 9},
      {refalrts::icPushStack, 0, 0, 1},
      {refalrts::icPushStack, 0, 0, 0},
      {refalrts::icLinkBrackets, 7, 9, 0},
      {refalrts::icNextStep, 0, 0, 0},
      {refalrts::icProfilerStopSentence, 0, 0, 0},
      {refalrts::icOnFailGoTo, +9, 0, 0},
      // ( e.idx ) 'v' e.idx
      // </0 & ReadBody/4 (/7 e.Accum#1/5 )/8 'v'/9 e.Text#1/2 >/1
      {refalrts::icSave, 0, 14, 2},
      {refalrts::icCharLeftSave, 9, static_cast<unsigned char>('v'), 14},
      // closed e.Accum#1 as range 5
      // closed e.Text#1 as range 14(2)
      //DEBUG: e.Accum#1: 5
      //DEBUG: e.Text#1: 2
      {refalrts::icEmptyResult, 0, 0, 0},
      //TRASH: {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 AsIs: & ReadBody/4 AsIs: (/7 AsIs: e.Accum#1/5 HalfReuse: 'v'/8 HalfReuse: )/9 AsIs: e.Text#1/14(2) AsIs: >/1 ]] }
      {refalrts::icReinitChar, 0, 'v', 8},
      {refalrts::icReinitBracket, 0, refalrts::ibCloseBracket, 9},
      {refalrts::icPushStack, 0, 0, 1},
      {refalrts::icPushStack, 0, 0, 0},
      {refalrts::icLinkBrackets, 7, 9, 0},
      {refalrts::icNextStep, 0, 0, 0},
      {refalrts::icProfilerStopSentence, 0, 0, 0},
      {refalrts::icOnFailGoTo, +9, 0, 0},
      // ( e.idx ) 'w' e.idx
      // </0 & ReadBody/4 (/7 e.Accum#1/5 )/8 'w'/9 e.Text#1/2 >/1
      {refalrts::icSave, 0, 14, 2},
      {refalrts::icCharLeftSave, 9, static_cast<unsigned char>('w'), 14},
      // closed e.Accum#1 as range 5
      // closed e.Text#1 as range 14(2)
      //DEBUG: e.Accum#1: 5
      //DEBUG: e.Text#1: 2
      {refalrts::icEmptyResult, 0, 0, 0},
      //TRASH: {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 AsIs: & ReadBody/4 AsIs: (/7 AsIs: e.Accum#1/5 HalfReuse: 'w'/8 HalfReuse: )/9 AsIs: e.Text#1/14(2) AsIs: >/1 ]] }
      {refalrts::icReinitChar, 0, 'w', 8},
      {refalrts::icReinitBracket, 0, refalrts::ibCloseBracket, 9},
      {refalrts::icPushStack, 0, 0, 1},
      {refalrts::icPushStack, 0, 0, 0},
      {refalrts::icLinkBrackets, 7, 9, 0},
      {refalrts::icNextStep, 0, 0, 0},
      {refalrts::icProfilerStopSentence, 0, 0, 0},
      {refalrts::icOnFailGoTo, +9, 0, 0},
      // ( e.idx ) 'x' e.idx
      // </0 & ReadBody/4 (/7 e.Accum#1/5 )/8 'x'/9 e.Text#1/2 >/1
      {refalrts::icSave, 0, 14, 2},
      {refalrts::icCharLeftSave, 9, static_cast<unsigned char>('x'), 14},
      // closed e.Accum#1 as range 5
      // closed e.Text#1 as range 14(2)
      //DEBUG: e.Accum#1: 5
      //DEBUG: e.Text#1: 2
      {refalrts::icEmptyResult, 0, 0, 0},
      //TRASH: {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 AsIs: & ReadBody/4 AsIs: (/7 AsIs: e.Accum#1/5 HalfReuse: 'x'/8 HalfReuse: )/9 AsIs: e.Text#1/14(2) AsIs: >/1 ]] }
      {refalrts::icReinitChar, 0, 'x', 8},
      {refalrts::icReinitBracket, 0, refalrts::ibCloseBracket, 9},
      {refalrts::icPushStack, 0, 0, 1},
      {refalrts::icPushStack, 0, 0, 0},
      {refalrts::icLinkBrackets, 7, 9, 0},
      {refalrts::icNextStep, 0, 0, 0},
      {refalrts::icProfilerStopSentence, 0, 0, 0},
      {refalrts::icOnFailGoTo, +9, 0, 0},
      // ( e.idx ) 'y' e.idx
      // </0 & ReadBody/4 (/7 e.Accum#1/5 )/8 'y'/9 e.Text#1/2 >/1
      {refalrts::icSave, 0, 14, 2},
      {refalrts::icCharLeftSave, 9, static_cast<unsigned char>('y'), 14},
      // closed e.Accum#1 as range 5
      // closed e.Text#1 as range 14(2)
      //DEBUG: e.Accum#1: 5
      //DEBUG: e.Text#1: 2
      {refalrts::icEmptyResult, 0, 0, 0},
      //TRASH: {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 AsIs: & ReadBody/4 AsIs: (/7 AsIs: e.Accum#1/5 HalfReuse: 'y'/8 HalfReuse: )/9 AsIs: e.Text#1/14(2) AsIs: >/1 ]] }
      {refalrts::icReinitChar, 0, 'y', 8},
      {refalrts::icReinitBracket, 0, refalrts::ibCloseBracket, 9},
      {refalrts::icPushStack, 0, 0, 1},
      {refalrts::icPushStack, 0, 0, 0},
      {refalrts::icLinkBrackets, 7, 9, 0},
      {refalrts::icNextStep, 0, 0, 0},
      {refalrts::icProfilerStopSentence, 0, 0, 0},
      {refalrts::icOnFailGoTo, +9, 0, 0},
      // ( e.idx ) 'z' e.idx
      // </0 & ReadBody/4 (/7 e.Accum#1/5 )/8 'z'/9 e.Text#1/2 >/1
      {refalrts::icSave, 0, 14, 2},
      {refalrts::icCharLeftSave, 9, static_cast<unsigned char>('z'), 14},
      // closed e.Accum#1 as range 5
      // closed e.Text#1 as range 14(2)
      //DEBUG: e.Accum#1: 5
      //DEBUG: e.Text#1: 2
      {refalrts::icEmptyResult, 0, 0, 0},
      //TRASH: {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 AsIs: & ReadBody/4 AsIs: (/7 AsIs: e.Accum#1/5 HalfReuse: 'z'/8 HalfReuse: )/9 AsIs: e.Text#1/14(2) AsIs: >/1 ]] }
      {refalrts::icReinitChar, 0, 'z', 8},
      {refalrts::icReinitBracket, 0, refalrts::ibCloseBracket, 9},
      {refalrts::icPushStack, 0, 0, 1},
      {refalrts::icPushStack, 0, 0, 0},
      {refalrts::icLinkBrackets, 7, 9, 0},
      {refalrts::icNextStep, 0, 0, 0},
      {refalrts::icProfilerStopSentence, 0, 0, 0},
      {refalrts::icOnFailGoTo, +9, 0, 0},
      // ( e.idx ) 'A' e.idx
      // </0 & ReadBody/4 (/7 e.Accum#1/5 )/8 'A'/9 e.Text#1/2 >/1
      {refalrts::icSave, 0, 14, 2},
      {refalrts::icCharLeftSave, 9, static_cast<unsigned char>('A'), 14},
      // closed e.Accum#1 as range 5
      // closed e.Text#1 as range 14(2)
      //DEBUG: e.Accum#1: 5
      //DEBUG: e.Text#1: 2
      {refalrts::icEmptyResult, 0, 0, 0},
      //TRASH: {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 AsIs: & ReadBody/4 AsIs: (/7 AsIs: e.Accum#1/5 HalfReuse: 'A'/8 HalfReuse: )/9 AsIs: e.Text#1/14(2) AsIs: >/1 ]] }
      {refalrts::icReinitChar, 0, 'A', 8},
      {refalrts::icReinitBracket, 0, refalrts::ibCloseBracket, 9},
      {refalrts::icPushStack, 0, 0, 1},
      {refalrts::icPushStack, 0, 0, 0},
      {refalrts::icLinkBrackets, 7, 9, 0},
      {refalrts::icNextStep, 0, 0, 0},
      {refalrts::icProfilerStopSentence, 0, 0, 0},
      {refalrts::icOnFailGoTo, +9, 0, 0},
      // ( e.idx ) 'B' e.idx
      // </0 & ReadBody/4 (/7 e.Accum#1/5 )/8 'B'/9 e.Text#1/2 >/1
      {refalrts::icSave, 0, 14, 2},
      {refalrts::icCharLeftSave, 9, static_cast<unsigned char>('B'), 14},
      // closed e.Accum#1 as range 5
      // closed e.Text#1 as range 14(2)
      //DEBUG: e.Accum#1: 5
      //DEBUG: e.Text#1: 2
      {refalrts::icEmptyResult, 0, 0, 0},
      //TRASH: {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 AsIs: & ReadBody/4 AsIs: (/7 AsIs: e.Accum#1/5 HalfReuse: 'B'/8 HalfReuse: )/9 AsIs: e.Text#1/14(2) AsIs: >/1 ]] }
      {refalrts::icReinitChar, 0, 'B', 8},
      {refalrts::icReinitBracket, 0, refalrts::ibCloseBracket, 9},
      {refalrts::icPushStack, 0, 0, 1},
      {refalrts::icPushStack, 0, 0, 0},
      {refalrts::icLinkBrackets, 7, 9, 0},
      {refalrts::icNextStep, 0, 0, 0},
      {refalrts::icProfilerStopSentence, 0, 0, 0},
      {refalrts::icOnFailGoTo, +9, 0, 0},
      // ( e.idx ) 'C' e.idx
      // </0 & ReadBody/4 (/7 e.Accum#1/5 )/8 'C'/9 e.Text#1/2 >/1
      {refalrts::icSave, 0, 14, 2},
      {refalrts::icCharLeftSave, 9, static_cast<unsigned char>('C'), 14},
      // closed e.Accum#1 as range 5
      // closed e.Text#1 as range 14(2)
      //DEBUG: e.Accum#1: 5
      //DEBUG: e.Text#1: 2
      {refalrts::icEmptyResult, 0, 0, 0},
      //TRASH: {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 AsIs: & ReadBody/4 AsIs: (/7 AsIs: e.Accum#1/5 HalfReuse: 'C'/8 HalfReuse: )/9 AsIs: e.Text#1/14(2) AsIs: >/1 ]] }
      {refalrts::icReinitChar, 0, 'C', 8},
      {refalrts::icReinitBracket, 0, refalrts::ibCloseBracket, 9},
      {refalrts::icPushStack, 0, 0, 1},
      {refalrts::icPushStack, 0, 0, 0},
      {refalrts::icLinkBrackets, 7, 9, 0},
      {refalrts::icNextStep, 0, 0, 0},
      {refalrts::icProfilerStopSentence, 0, 0, 0},
      {refalrts::icOnFailGoTo, +9, 0, 0},
      // ( e.idx ) 'D' e.idx
      // </0 & ReadBody/4 (/7 e.Accum#1/5 )/8 'D'/9 e.Text#1/2 >/1
      {refalrts::icSave, 0, 14, 2},
      {refalrts::icCharLeftSave, 9, static_cast<unsigned char>('D'), 14},
      // closed e.Accum#1 as range 5
      // closed e.Text#1 as range 14(2)
      //DEBUG: e.Accum#1: 5
      //DEBUG: e.Text#1: 2
      {refalrts::icEmptyResult, 0, 0, 0},
      //TRASH: {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 AsIs: & ReadBody/4 AsIs: (/7 AsIs: e.Accum#1/5 HalfReuse: 'D'/8 HalfReuse: )/9 AsIs: e.Text#1/14(2) AsIs: >/1 ]] }
      {refalrts::icReinitChar, 0, 'D', 8},
      {refalrts::icReinitBracket, 0, refalrts::ibCloseBracket, 9},
      {refalrts::icPushStack, 0, 0, 1},
      {refalrts::icPushStack, 0, 0, 0},
      {refalrts::icLinkBrackets, 7, 9, 0},
      {refalrts::icNextStep, 0, 0, 0},
      {refalrts::icProfilerStopSentence, 0, 0, 0},
      {refalrts::icOnFailGoTo, +9, 0, 0},
      // ( e.idx ) 'E' e.idx
      // </0 & ReadBody/4 (/7 e.Accum#1/5 )/8 'E'/9 e.Text#1/2 >/1
      {refalrts::icSave, 0, 14, 2},
      {refalrts::icCharLeftSave, 9, static_cast<unsigned char>('E'), 14},
      // closed e.Accum#1 as range 5
      // closed e.Text#1 as range 14(2)
      //DEBUG: e.Accum#1: 5
      //DEBUG: e.Text#1: 2
      {refalrts::icEmptyResult, 0, 0, 0},
      //TRASH: {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 AsIs: & ReadBody/4 AsIs: (/7 AsIs: e.Accum#1/5 HalfReuse: 'E'/8 HalfReuse: )/9 AsIs: e.Text#1/14(2) AsIs: >/1 ]] }
      {refalrts::icReinitChar, 0, 'E', 8},
      {refalrts::icReinitBracket, 0, refalrts::ibCloseBracket, 9},
      {refalrts::icPushStack, 0, 0, 1},
      {refalrts::icPushStack, 0, 0, 0},
      {refalrts::icLinkBrackets, 7, 9, 0},
      {refalrts::icNextStep, 0, 0, 0},
      {refalrts::icProfilerStopSentence, 0, 0, 0},
      {refalrts::icOnFailGoTo, +9, 0, 0},
      // ( e.idx ) 'F' e.idx
      // </0 & ReadBody/4 (/7 e.Accum#1/5 )/8 'F'/9 e.Text#1/2 >/1
      {refalrts::icSave, 0, 14, 2},
      {refalrts::icCharLeftSave, 9, static_cast<unsigned char>('F'), 14},
      // closed e.Accum#1 as range 5
      // closed e.Text#1 as range 14(2)
      //DEBUG: e.Accum#1: 5
      //DEBUG: e.Text#1: 2
      {refalrts::icEmptyResult, 0, 0, 0},
      //TRASH: {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 AsIs: & ReadBody/4 AsIs: (/7 AsIs: e.Accum#1/5 HalfReuse: 'F'/8 HalfReuse: )/9 AsIs: e.Text#1/14(2) AsIs: >/1 ]] }
      {refalrts::icReinitChar, 0, 'F', 8},
      {refalrts::icReinitBracket, 0, refalrts::ibCloseBracket, 9},
      {refalrts::icPushStack, 0, 0, 1},
      {refalrts::icPushStack, 0, 0, 0},
      {refalrts::icLinkBrackets, 7, 9, 0},
      {refalrts::icNextStep, 0, 0, 0},
      {refalrts::icProfilerStopSentence, 0, 0, 0},
      {refalrts::icOnFailGoTo, +9, 0, 0},
      // ( e.idx ) 'G' e.idx
      // </0 & ReadBody/4 (/7 e.Accum#1/5 )/8 'G'/9 e.Text#1/2 >/1
      {refalrts::icSave, 0, 14, 2},
      {refalrts::icCharLeftSave, 9, static_cast<unsigned char>('G'), 14},
      // closed e.Accum#1 as range 5
      // closed e.Text#1 as range 14(2)
      //DEBUG: e.Accum#1: 5
      //DEBUG: e.Text#1: 2
      {refalrts::icEmptyResult, 0, 0, 0},
      //TRASH: {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 AsIs: & ReadBody/4 AsIs: (/7 AsIs: e.Accum#1/5 HalfReuse: 'G'/8 HalfReuse: )/9 AsIs: e.Text#1/14(2) AsIs: >/1 ]] }
      {refalrts::icReinitChar, 0, 'G', 8},
      {refalrts::icReinitBracket, 0, refalrts::ibCloseBracket, 9},
      {refalrts::icPushStack, 0, 0, 1},
      {refalrts::icPushStack, 0, 0, 0},
      {refalrts::icLinkBrackets, 7, 9, 0},
      {refalrts::icNextStep, 0, 0, 0},
      {refalrts::icProfilerStopSentence, 0, 0, 0},
      {refalrts::icOnFailGoTo, +9, 0, 0},
      // ( e.idx ) 'H' e.idx
      // </0 & ReadBody/4 (/7 e.Accum#1/5 )/8 'H'/9 e.Text#1/2 >/1
      {refalrts::icSave, 0, 14, 2},
      {refalrts::icCharLeftSave, 9, static_cast<unsigned char>('H'), 14},
      // closed e.Accum#1 as range 5
      // closed e.Text#1 as range 14(2)
      //DEBUG: e.Accum#1: 5
      //DEBUG: e.Text#1: 2
      {refalrts::icEmptyResult, 0, 0, 0},
      //TRASH: {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 AsIs: & ReadBody/4 AsIs: (/7 AsIs: e.Accum#1/5 HalfReuse: 'H'/8 HalfReuse: )/9 AsIs: e.Text#1/14(2) AsIs: >/1 ]] }
      {refalrts::icReinitChar, 0, 'H', 8},
      {refalrts::icReinitBracket, 0, refalrts::ibCloseBracket, 9},
      {refalrts::icPushStack, 0, 0, 1},
      {refalrts::icPushStack, 0, 0, 0},
      {refalrts::icLinkBrackets, 7, 9, 0},
      {refalrts::icNextStep, 0, 0, 0},
      {refalrts::icProfilerStopSentence, 0, 0, 0},
      {refalrts::icOnFailGoTo, +9, 0, 0},
      // ( e.idx ) 'I' e.idx
      // </0 & ReadBody/4 (/7 e.Accum#1/5 )/8 'I'/9 e.Text#1/2 >/1
      {refalrts::icSave, 0, 14, 2},
      {refalrts::icCharLeftSave, 9, static_cast<unsigned char>('I'), 14},
      // closed e.Accum#1 as range 5
      // closed e.Text#1 as range 14(2)
      //DEBUG: e.Accum#1: 5
      //DEBUG: e.Text#1: 2
      {refalrts::icEmptyResult, 0, 0, 0},
      //TRASH: {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 AsIs: & ReadBody/4 AsIs: (/7 AsIs: e.Accum#1/5 HalfReuse: 'I'/8 HalfReuse: )/9 AsIs: e.Text#1/14(2) AsIs: >/1 ]] }
      {refalrts::icReinitChar, 0, 'I', 8},
      {refalrts::icReinitBracket, 0, refalrts::ibCloseBracket, 9},
      {refalrts::icPushStack, 0, 0, 1},
      {refalrts::icPushStack, 0, 0, 0},
      {refalrts::icLinkBrackets, 7, 9, 0},
      {refalrts::icNextStep, 0, 0, 0},
      {refalrts::icProfilerStopSentence, 0, 0, 0},
      {refalrts::icOnFailGoTo, +9, 0, 0},
      // ( e.idx ) 'J' e.idx
      // </0 & ReadBody/4 (/7 e.Accum#1/5 )/8 'J'/9 e.Text#1/2 >/1
      {refalrts::icSave, 0, 14, 2},
      {refalrts::icCharLeftSave, 9, static_cast<unsigned char>('J'), 14},
      // closed e.Accum#1 as range 5
      // closed e.Text#1 as range 14(2)
      //DEBUG: e.Accum#1: 5
      //DEBUG: e.Text#1: 2
      {refalrts::icEmptyResult, 0, 0, 0},
      //TRASH: {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 AsIs: & ReadBody/4 AsIs: (/7 AsIs: e.Accum#1/5 HalfReuse: 'J'/8 HalfReuse: )/9 AsIs: e.Text#1/14(2) AsIs: >/1 ]] }
      {refalrts::icReinitChar, 0, 'J', 8},
      {refalrts::icReinitBracket, 0, refalrts::ibCloseBracket, 9},
      {refalrts::icPushStack, 0, 0, 1},
      {refalrts::icPushStack, 0, 0, 0},
      {refalrts::icLinkBrackets, 7, 9, 0},
      {refalrts::icNextStep, 0, 0, 0},
      {refalrts::icProfilerStopSentence, 0, 0, 0},
      {refalrts::icOnFailGoTo, +9, 0, 0},
      // ( e.idx ) 'K' e.idx
      // </0 & ReadBody/4 (/7 e.Accum#1/5 )/8 'K'/9 e.Text#1/2 >/1
      {refalrts::icSave, 0, 14, 2},
      {refalrts::icCharLeftSave, 9, static_cast<unsigned char>('K'), 14},
      // closed e.Accum#1 as range 5
      // closed e.Text#1 as range 14(2)
      //DEBUG: e.Accum#1: 5
      //DEBUG: e.Text#1: 2
      {refalrts::icEmptyResult, 0, 0, 0},
      //TRASH: {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 AsIs: & ReadBody/4 AsIs: (/7 AsIs: e.Accum#1/5 HalfReuse: 'K'/8 HalfReuse: )/9 AsIs: e.Text#1/14(2) AsIs: >/1 ]] }
      {refalrts::icReinitChar, 0, 'K', 8},
      {refalrts::icReinitBracket, 0, refalrts::ibCloseBracket, 9},
      {refalrts::icPushStack, 0, 0, 1},
      {refalrts::icPushStack, 0, 0, 0},
      {refalrts::icLinkBrackets, 7, 9, 0},
      {refalrts::icNextStep, 0, 0, 0},
      {refalrts::icProfilerStopSentence, 0, 0, 0},
      {refalrts::icOnFailGoTo, +9, 0, 0},
      // ( e.idx ) 'L' e.idx
      // </0 & ReadBody/4 (/7 e.Accum#1/5 )/8 'L'/9 e.Text#1/2 >/1
      {refalrts::icSave, 0, 14, 2},
      {refalrts::icCharLeftSave, 9, static_cast<unsigned char>('L'), 14},
      // closed e.Accum#1 as range 5
      // closed e.Text#1 as range 14(2)
      //DEBUG: e.Accum#1: 5
      //DEBUG: e.Text#1: 2
      {refalrts::icEmptyResult, 0, 0, 0},
      //TRASH: {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 AsIs: & ReadBody/4 AsIs: (/7 AsIs: e.Accum#1/5 HalfReuse: 'L'/8 HalfReuse: )/9 AsIs: e.Text#1/14(2) AsIs: >/1 ]] }
      {refalrts::icReinitChar, 0, 'L', 8},
      {refalrts::icReinitBracket, 0, refalrts::ibCloseBracket, 9},
      {refalrts::icPushStack, 0, 0, 1},
      {refalrts::icPushStack, 0, 0, 0},
      {refalrts::icLinkBrackets, 7, 9, 0},
      {refalrts::icNextStep, 0, 0, 0},
      {refalrts::icProfilerStopSentence, 0, 0, 0},
      {refalrts::icOnFailGoTo, +9, 0, 0},
      // ( e.idx ) 'M' e.idx
      // </0 & ReadBody/4 (/7 e.Accum#1/5 )/8 'M'/9 e.Text#1/2 >/1
      {refalrts::icSave, 0, 14, 2},
      {refalrts::icCharLeftSave, 9, static_cast<unsigned char>('M'), 14},
      // closed e.Accum#1 as range 5
      // closed e.Text#1 as range 14(2)
      //DEBUG: e.Accum#1: 5
      //DEBUG: e.Text#1: 2
      {refalrts::icEmptyResult, 0, 0, 0},
      //TRASH: {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 AsIs: & ReadBody/4 AsIs: (/7 AsIs: e.Accum#1/5 HalfReuse: 'M'/8 HalfReuse: )/9 AsIs: e.Text#1/14(2) AsIs: >/1 ]] }
      {refalrts::icReinitChar, 0, 'M', 8},
      {refalrts::icReinitBracket, 0, refalrts::ibCloseBracket, 9},
      {refalrts::icPushStack, 0, 0, 1},
      {refalrts::icPushStack, 0, 0, 0},
      {refalrts::icLinkBrackets, 7, 9, 0},
      {refalrts::icNextStep, 0, 0, 0},
      {refalrts::icProfilerStopSentence, 0, 0, 0},
      {refalrts::icOnFailGoTo, +9, 0, 0},
      // ( e.idx ) 'N' e.idx
      // </0 & ReadBody/4 (/7 e.Accum#1/5 )/8 'N'/9 e.Text#1/2 >/1
      {refalrts::icSave, 0, 14, 2},
      {refalrts::icCharLeftSave, 9, static_cast<unsigned char>('N'), 14},
      // closed e.Accum#1 as range 5
      // closed e.Text#1 as range 14(2)
      //DEBUG: e.Accum#1: 5
      //DEBUG: e.Text#1: 2
      {refalrts::icEmptyResult, 0, 0, 0},
      //TRASH: {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 AsIs: & ReadBody/4 AsIs: (/7 AsIs: e.Accum#1/5 HalfReuse: 'N'/8 HalfReuse: )/9 AsIs: e.Text#1/14(2) AsIs: >/1 ]] }
      {refalrts::icReinitChar, 0, 'N', 8},
      {refalrts::icReinitBracket, 0, refalrts::ibCloseBracket, 9},
      {refalrts::icPushStack, 0, 0, 1},
      {refalrts::icPushStack, 0, 0, 0},
      {refalrts::icLinkBrackets, 7, 9, 0},
      {refalrts::icNextStep, 0, 0, 0},
      {refalrts::icProfilerStopSentence, 0, 0, 0},
      {refalrts::icOnFailGoTo, +9, 0, 0},
      // ( e.idx ) 'O' e.idx
      // </0 & ReadBody/4 (/7 e.Accum#1/5 )/8 'O'/9 e.Text#1/2 >/1
      {refalrts::icSave, 0, 14, 2},
      {refalrts::icCharLeftSave, 9, static_cast<unsigned char>('O'), 14},
      // closed e.Accum#1 as range 5
      // closed e.Text#1 as range 14(2)
      //DEBUG: e.Accum#1: 5
      //DEBUG: e.Text#1: 2
      {refalrts::icEmptyResult, 0, 0, 0},
      //TRASH: {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 AsIs: & ReadBody/4 AsIs: (/7 AsIs: e.Accum#1/5 HalfReuse: 'O'/8 HalfReuse: )/9 AsIs: e.Text#1/14(2) AsIs: >/1 ]] }
      {refalrts::icReinitChar, 0, 'O', 8},
      {refalrts::icReinitBracket, 0, refalrts::ibCloseBracket, 9},
      {refalrts::icPushStack, 0, 0, 1},
      {refalrts::icPushStack, 0, 0, 0},
      {refalrts::icLinkBrackets, 7, 9, 0},
      {refalrts::icNextStep, 0, 0, 0},
      {refalrts::icProfilerStopSentence, 0, 0, 0},
      {refalrts::icOnFailGoTo, +9, 0, 0},
      // ( e.idx ) 'P' e.idx
      // </0 & ReadBody/4 (/7 e.Accum#1/5 )/8 'P'/9 e.Text#1/2 >/1
      {refalrts::icSave, 0, 14, 2},
      {refalrts::icCharLeftSave, 9, static_cast<unsigned char>('P'), 14},
      // closed e.Accum#1 as range 5
      // closed e.Text#1 as range 14(2)
      //DEBUG: e.Accum#1: 5
      //DEBUG: e.Text#1: 2
      {refalrts::icEmptyResult, 0, 0, 0},
      //TRASH: {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 AsIs: & ReadBody/4 AsIs: (/7 AsIs: e.Accum#1/5 HalfReuse: 'P'/8 HalfReuse: )/9 AsIs: e.Text#1/14(2) AsIs: >/1 ]] }
      {refalrts::icReinitChar, 0, 'P', 8},
      {refalrts::icReinitBracket, 0, refalrts::ibCloseBracket, 9},
      {refalrts::icPushStack, 0, 0, 1},
      {refalrts::icPushStack, 0, 0, 0},
      {refalrts::icLinkBrackets, 7, 9, 0},
      {refalrts::icNextStep, 0, 0, 0},
      {refalrts::icProfilerStopSentence, 0, 0, 0},
      {refalrts::icOnFailGoTo, +9, 0, 0},
      // ( e.idx ) 'Q' e.idx
      // </0 & ReadBody/4 (/7 e.Accum#1/5 )/8 'Q'/9 e.Text#1/2 >/1
      {refalrts::icSave, 0, 14, 2},
      {refalrts::icCharLeftSave, 9, static_cast<unsigned char>('Q'), 14},
      // closed e.Accum#1 as range 5
      // closed e.Text#1 as range 14(2)
      //DEBUG: e.Accum#1: 5
      //DEBUG: e.Text#1: 2
      {refalrts::icEmptyResult, 0, 0, 0},
      //TRASH: {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 AsIs: & ReadBody/4 AsIs: (/7 AsIs: e.Accum#1/5 HalfReuse: 'Q'/8 HalfReuse: )/9 AsIs: e.Text#1/14(2) AsIs: >/1 ]] }
      {refalrts::icReinitChar, 0, 'Q', 8},
      {refalrts::icReinitBracket, 0, refalrts::ibCloseBracket, 9},
      {refalrts::icPushStack, 0, 0, 1},
      {refalrts::icPushStack, 0, 0, 0},
      {refalrts::icLinkBrackets, 7, 9, 0},
      {refalrts::icNextStep, 0, 0, 0},
      {refalrts::icProfilerStopSentence, 0, 0, 0},
      {refalrts::icOnFailGoTo, +9, 0, 0},
      // ( e.idx ) 'R' e.idx
      // </0 & ReadBody/4 (/7 e.Accum#1/5 )/8 'R'/9 e.Text#1/2 >/1
      {refalrts::icSave, 0, 14, 2},
      {refalrts::icCharLeftSave, 9, static_cast<unsigned char>('R'), 14},
      // closed e.Accum#1 as range 5
      // closed e.Text#1 as range 14(2)
      //DEBUG: e.Accum#1: 5
      //DEBUG: e.Text#1: 2
      {refalrts::icEmptyResult, 0, 0, 0},
      //TRASH: {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 AsIs: & ReadBody/4 AsIs: (/7 AsIs: e.Accum#1/5 HalfReuse: 'R'/8 HalfReuse: )/9 AsIs: e.Text#1/14(2) AsIs: >/1 ]] }
      {refalrts::icReinitChar, 0, 'R', 8},
      {refalrts::icReinitBracket, 0, refalrts::ibCloseBracket, 9},
      {refalrts::icPushStack, 0, 0, 1},
      {refalrts::icPushStack, 0, 0, 0},
      {refalrts::icLinkBrackets, 7, 9, 0},
      {refalrts::icNextStep, 0, 0, 0},
      {refalrts::icProfilerStopSentence, 0, 0, 0},
      {refalrts::icOnFailGoTo, +9, 0, 0},
      // ( e.idx ) 'S' e.idx
      // </0 & ReadBody/4 (/7 e.Accum#1/5 )/8 'S'/9 e.Text#1/2 >/1
      {refalrts::icSave, 0, 14, 2},
      {refalrts::icCharLeftSave, 9, static_cast<unsigned char>('S'), 14},
      // closed e.Accum#1 as range 5
      // closed e.Text#1 as range 14(2)
      //DEBUG: e.Accum#1: 5
      //DEBUG: e.Text#1: 2
      {refalrts::icEmptyResult, 0, 0, 0},
      //TRASH: {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 AsIs: & ReadBody/4 AsIs: (/7 AsIs: e.Accum#1/5 HalfReuse: 'S'/8 HalfReuse: )/9 AsIs: e.Text#1/14(2) AsIs: >/1 ]] }
      {refalrts::icReinitChar, 0, 'S', 8},
      {refalrts::icReinitBracket, 0, refalrts::ibCloseBracket, 9},
      {refalrts::icPushStack, 0, 0, 1},
      {refalrts::icPushStack, 0, 0, 0},
      {refalrts::icLinkBrackets, 7, 9, 0},
      {refalrts::icNextStep, 0, 0, 0},
      {refalrts::icProfilerStopSentence, 0, 0, 0},
      {refalrts::icOnFailGoTo, +9, 0, 0},
      // ( e.idx ) 'T' e.idx
      // </0 & ReadBody/4 (/7 e.Accum#1/5 )/8 'T'/9 e.Text#1/2 >/1
      {refalrts::icSave, 0, 14, 2},
      {refalrts::icCharLeftSave, 9, static_cast<unsigned char>('T'), 14},
      // closed e.Accum#1 as range 5
      // closed e.Text#1 as range 14(2)
      //DEBUG: e.Accum#1: 5
      //DEBUG: e.Text#1: 2
      {refalrts::icEmptyResult, 0, 0, 0},
      //TRASH: {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 AsIs: & ReadBody/4 AsIs: (/7 AsIs: e.Accum#1/5 HalfReuse: 'T'/8 HalfReuse: )/9 AsIs: e.Text#1/14(2) AsIs: >/1 ]] }
      {refalrts::icReinitChar, 0, 'T', 8},
      {refalrts::icReinitBracket, 0, refalrts::ibCloseBracket, 9},
      {refalrts::icPushStack, 0, 0, 1},
      {refalrts::icPushStack, 0, 0, 0},
      {refalrts::icLinkBrackets, 7, 9, 0},
      {refalrts::icNextStep, 0, 0, 0},
      {refalrts::icProfilerStopSentence, 0, 0, 0},
      {refalrts::icOnFailGoTo, +9, 0, 0},
      // ( e.idx ) 'U' e.idx
      // </0 & ReadBody/4 (/7 e.Accum#1/5 )/8 'U'/9 e.Text#1/2 >/1
      {refalrts::icSave, 0, 14, 2},
      {refalrts::icCharLeftSave, 9, static_cast<unsigned char>('U'), 14},
      // closed e.Accum#1 as range 5
      // closed e.Text#1 as range 14(2)
      //DEBUG: e.Accum#1: 5
      //DEBUG: e.Text#1: 2
      {refalrts::icEmptyResult, 0, 0, 0},
      //TRASH: {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 AsIs: & ReadBody/4 AsIs: (/7 AsIs: e.Accum#1/5 HalfReuse: 'U'/8 HalfReuse: )/9 AsIs: e.Text#1/14(2) AsIs: >/1 ]] }
      {refalrts::icReinitChar, 0, 'U', 8},
      {refalrts::icReinitBracket, 0, refalrts::ibCloseBracket, 9},
      {refalrts::icPushStack, 0, 0, 1},
      {refalrts::icPushStack, 0, 0, 0},
      {refalrts::icLinkBrackets, 7, 9, 0},
      {refalrts::icNextStep, 0, 0, 0},
      {refalrts::icProfilerStopSentence, 0, 0, 0},
      {refalrts::icOnFailGoTo, +9, 0, 0},
      // ( e.idx ) 'V' e.idx
      // </0 & ReadBody/4 (/7 e.Accum#1/5 )/8 'V'/9 e.Text#1/2 >/1
      {refalrts::icSave, 0, 14, 2},
      {refalrts::icCharLeftSave, 9, static_cast<unsigned char>('V'), 14},
      // closed e.Accum#1 as range 5
      // closed e.Text#1 as range 14(2)
      //DEBUG: e.Accum#1: 5
      //DEBUG: e.Text#1: 2
      {refalrts::icEmptyResult, 0, 0, 0},
      //TRASH: {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 AsIs: & ReadBody/4 AsIs: (/7 AsIs: e.Accum#1/5 HalfReuse: 'V'/8 HalfReuse: )/9 AsIs: e.Text#1/14(2) AsIs: >/1 ]] }
      {refalrts::icReinitChar, 0, 'V', 8},
      {refalrts::icReinitBracket, 0, refalrts::ibCloseBracket, 9},
      {refalrts::icPushStack, 0, 0, 1},
      {refalrts::icPushStack, 0, 0, 0},
      {refalrts::icLinkBrackets, 7, 9, 0},
      {refalrts::icNextStep, 0, 0, 0},
      {refalrts::icProfilerStopSentence, 0, 0, 0},
      {refalrts::icOnFailGoTo, +9, 0, 0},
      // ( e.idx ) 'W' e.idx
      // </0 & ReadBody/4 (/7 e.Accum#1/5 )/8 'W'/9 e.Text#1/2 >/1
      {refalrts::icSave, 0, 14, 2},
      {refalrts::icCharLeftSave, 9, static_cast<unsigned char>('W'), 14},
      // closed e.Accum#1 as range 5
      // closed e.Text#1 as range 14(2)
      //DEBUG: e.Accum#1: 5
      //DEBUG: e.Text#1: 2
      {refalrts::icEmptyResult, 0, 0, 0},
      //TRASH: {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 AsIs: & ReadBody/4 AsIs: (/7 AsIs: e.Accum#1/5 HalfReuse: 'W'/8 HalfReuse: )/9 AsIs: e.Text#1/14(2) AsIs: >/1 ]] }
      {refalrts::icReinitChar, 0, 'W', 8},
      {refalrts::icReinitBracket, 0, refalrts::ibCloseBracket, 9},
      {refalrts::icPushStack, 0, 0, 1},
      {refalrts::icPushStack, 0, 0, 0},
      {refalrts::icLinkBrackets, 7, 9, 0},
      {refalrts::icNextStep, 0, 0, 0},
      {refalrts::icProfilerStopSentence, 0, 0, 0},
      {refalrts::icOnFailGoTo, +9, 0, 0},
      // ( e.idx ) 'X' e.idx
      // </0 & ReadBody/4 (/7 e.Accum#1/5 )/8 'X'/9 e.Text#1/2 >/1
      {refalrts::icSave, 0, 14, 2},
      {refalrts::icCharLeftSave, 9, static_cast<unsigned char>('X'), 14},
      // closed e.Accum#1 as range 5
      // closed e.Text#1 as range 14(2)
      //DEBUG: e.Accum#1: 5
      //DEBUG: e.Text#1: 2
      {refalrts::icEmptyResult, 0, 0, 0},
      //TRASH: {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 AsIs: & ReadBody/4 AsIs: (/7 AsIs: e.Accum#1/5 HalfReuse: 'X'/8 HalfReuse: )/9 AsIs: e.Text#1/14(2) AsIs: >/1 ]] }
      {refalrts::icReinitChar, 0, 'X', 8},
      {refalrts::icReinitBracket, 0, refalrts::ibCloseBracket, 9},
      {refalrts::icPushStack, 0, 0, 1},
      {refalrts::icPushStack, 0, 0, 0},
      {refalrts::icLinkBrackets, 7, 9, 0},
      {refalrts::icNextStep, 0, 0, 0},
      {refalrts::icProfilerStopSentence, 0, 0, 0},
      {refalrts::icOnFailGoTo, +9, 0, 0},
      // ( e.idx ) 'Y' e.idx
      // </0 & ReadBody/4 (/7 e.Accum#1/5 )/8 'Y'/9 e.Text#1/2 >/1
      {refalrts::icSave, 0, 14, 2},
      {refalrts::icCharLeftSave, 9, static_cast<unsigned char>('Y'), 14},
      // closed e.Accum#1 as range 5
      // closed e.Text#1 as range 14(2)
      //DEBUG: e.Accum#1: 5
      //DEBUG: e.Text#1: 2
      {refalrts::icEmptyResult, 0, 0, 0},
      //TRASH: {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 AsIs: & ReadBody/4 AsIs: (/7 AsIs: e.Accum#1/5 HalfReuse: 'Y'/8 HalfReuse: )/9 AsIs: e.Text#1/14(2) AsIs: >/1 ]] }
      {refalrts::icReinitChar, 0, 'Y', 8},
      {refalrts::icReinitBracket, 0, refalrts::ibCloseBracket, 9},
      {refalrts::icPushStack, 0, 0, 1},
      {refalrts::icPushStack, 0, 0, 0},
      {refalrts::icLinkBrackets, 7, 9, 0},
      {refalrts::icNextStep, 0, 0, 0},
      {refalrts::icProfilerStopSentence, 0, 0, 0},
      {refalrts::icOnFailGoTo, +9, 0, 0},
      // ( e.idx ) 'Z' e.idx
      // </0 & ReadBody/4 (/7 e.Accum#1/5 )/8 'Z'/9 e.Text#1/2 >/1
      {refalrts::icSave, 0, 14, 2},
      {refalrts::icCharLeftSave, 9, static_cast<unsigned char>('Z'), 14},
      // closed e.Accum#1 as range 5
      // closed e.Text#1 as range 14(2)
      //DEBUG: e.Accum#1: 5
      //DEBUG: e.Text#1: 2
      {refalrts::icEmptyResult, 0, 0, 0},
      //TRASH: {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 AsIs: & ReadBody/4 AsIs: (/7 AsIs: e.Accum#1/5 HalfReuse: 'Z'/8 HalfReuse: )/9 AsIs: e.Text#1/14(2) AsIs: >/1 ]] }
      {refalrts::icReinitChar, 0, 'Z', 8},
      {refalrts::icReinitBracket, 0, refalrts::ibCloseBracket, 9},
      {refalrts::icPushStack, 0, 0, 1},
      {refalrts::icPushStack, 0, 0, 0},
      {refalrts::icLinkBrackets, 7, 9, 0},
      {refalrts::icNextStep, 0, 0, 0},
      {refalrts::icProfilerStopSentence, 0, 0, 0},
      {refalrts::icOnFailGoTo, +21, 0, 0},
      // ( e.idx ) '}' e.idx
      // </0 & ReadBody/4 (/7 e.Accum#1/5 )/8 '}'/9 e.Text#1/2 >/1
      {refalrts::icSave, 0, 14, 2},
      {refalrts::icCharLeftSave, 9, static_cast<unsigned char>('}'), 14},
      // closed e.Accum#1 as range 5
      // closed e.Text#1 as range 14(2)
      //DEBUG: e.Accum#1: 5
      //DEBUG: e.Text#1: 2
      {refalrts::icEmptyResult, 0, 0, 0},
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ HalfReuse: (/0 HalfReuse: # TInclude/4 } Tile{ AsIs: e.Accum#1/5 } '}'/10 Tile{ HalfReuse: )/7 } </11 & ReadRegexp/12 Tile{ HalfReuse: (/8 HalfReuse: )/9 AsIs: e.Text#1/14(2) AsIs: >/1 ]] }
      {refalrts::icAllocChar, 0, '}', 10},
      {refalrts::icAllocBracket, 0, refalrts::ibOpenCall, 11},
      {refalrts::icAllocFunc, 0, 0, 12},
      {refalrts::icReinitBracket, 0, refalrts::ibOpenBracket, 0},
      {refalrts::icReinitIdent, 0, 1, 4},
      {refalrts::icReinitBracket, 0, refalrts::ibCloseBracket, 7},
      {refalrts::icReinitBracket, 0, refalrts::ibOpenBracket, 8},
      {refalrts::icReinitBracket, 0, refalrts::ibCloseBracket, 9},
      {refalrts::icPushStack, 0, 0, 1},
      {refalrts::icPushStack, 0, 0, 11},
      {refalrts::icLinkBrackets, 8, 9, 0},
      {refalrts::icLinkBrackets, 0, 7, 0},
      {refalrts::icSetRes, 0, 0, 8},
      {refalrts::icSpliceTile, 11, 12, 0},
      {refalrts::icSpliceTile, 7, 7, 0},
      {refalrts::icSpliceTile, 10, 10, 0},
      {refalrts::icSpliceEVar, 0, 0, 5},
      {refalrts::icNextStep, 0, 0, 0},
      {refalrts::icProfilerStopSentence, 0, 0, 0},
      // ( e.idx ) e.idx
      // </0 & ReadBody/4 (/7 e.Accum#1/5 )/8 e.Text#1/2 >/1
      // closed e.Accum#1 as range 5
      // closed e.Text#1 as range 2
      //DEBUG: e.Accum#1: 5
      //DEBUG: e.Text#1: 2
      {refalrts::icEmptyResult, 0, 0, 0},
      //TRASH: {REMOVED TILE} {REMOVED TILE} e.Accum#1/5 {REMOVED TILE}
      //RESULT: Tile{ [[ } (/9 # TokenError/10"Unclused include"/11 )/13 Tile{ AsIs: </0 Reuse: & ReadRegexp/4 AsIs: (/7 } Tile{ AsIs: )/8 AsIs: e.Text#1/2 AsIs: >/1 ]] }
      {refalrts::icAllocBracket, 0, refalrts::ibOpenBracket, 9},
      {refalrts::icAllocIdent, 0, 0, 10},
      {refalrts::icAllocString, 0, 0, 11},
      {refalrts::icAllocBracket, 0, refalrts::ibCloseBracket, 13},
      {refalrts::icUpdateFunc, 0, 0, 4},
      {refalrts::icPushStack, 0, 0, 1},
      {refalrts::icPushStack, 0, 0, 0},
      {refalrts::icLinkBrackets, 7, 8, 0},
      {refalrts::icLinkBrackets, 9, 13, 0},
      {refalrts::icSetRes, 0, 0, 8},
      {refalrts::icSpliceTile, 0, 7, 0},
      {refalrts::icSpliceTile, 9, 13, 0},
      {refalrts::icTrashLeftEdge, 0, 0, 0},
      {refalrts::icNextStep, 0, 0, 0},
      {refalrts::icEnd, 0, 0, 0}
    };
  } // namespace scope_ReadBody

} // unnamed namespace

namespace /* unnamed */ {
refalrts::RASLFunction descr_ReadBody(
  "ReadBody",
  scope_ReadBody::raa,
  scope_ReadBody::functions,
  scope_ReadBody::idents,
  scope_ReadBody::numbers,
  scope_ReadBody::strings,
  scope_ReadBody::filename
);
refalrts::RefalFunction& ReadBody = descr_ReadBody;

} // unnamed namespace

#else
static refalrts::FnResult func_ReadBody(refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  refalrts::this_is_generated_function();
  // issue here memory for vars with 16 elems
  refalrts::Iter context[16];
  refalrts::zeros( context, 16 );
  //FAST GEN: ( e.$ ) e.$
  //GLOBAL GEN: ( e.$ ) e.$
  // </0 & ReadBody/4 (/7 e.idxB#0/5 )/8 e.idxT#0/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  context[5] = 0;
  context[6] = 0;
  context[7] = refalrts::brackets_left( context[5], context[6], context[2], context[3] );
  if( ! context[7] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[7], context[8]);
  // closed e.idxB#0 as range 5
  // closed e.idxT#0 as range 2
  do {
    // ( e.idx ) '0' e.idx
    // </0 & ReadBody/4 (/7 e.Accum#1/5 )/8 '0'/9 e.Text#1/2 >/1
    context[14] = context[2];
    context[15] = context[3];
    context[9] = refalrts::char_left( '0', context[14], context[15] );
    if( ! context[9] )
      continue;
    // closed e.Accum#1 as range 5
    // closed e.Text#1 as range 14(2)
    //DEBUG: e.Accum#1: 5
    //DEBUG: e.Text#1: 2

    refalrts::reset_allocator();
    //TRASH: {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 AsIs: & ReadBody/4 AsIs: (/7 AsIs: e.Accum#1/5 HalfReuse: '0'/8 HalfReuse: )/9 AsIs: e.Text#1/14(2) AsIs: >/1 ]] }
    refalrts::reinit_char( context[8], '0' );
    refalrts::reinit_close_bracket( context[9] );
    refalrts::push_stack( context[1] );
    refalrts::push_stack( context[0] );
    refalrts::link_brackets( context[7], context[9] );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence();

  do {
    // ( e.idx ) '1' e.idx
    // </0 & ReadBody/4 (/7 e.Accum#1/5 )/8 '1'/9 e.Text#1/2 >/1
    context[14] = context[2];
    context[15] = context[3];
    context[9] = refalrts::char_left( '1', context[14], context[15] );
    if( ! context[9] )
      continue;
    // closed e.Accum#1 as range 5
    // closed e.Text#1 as range 14(2)
    //DEBUG: e.Accum#1: 5
    //DEBUG: e.Text#1: 2

    refalrts::reset_allocator();
    //TRASH: {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 AsIs: & ReadBody/4 AsIs: (/7 AsIs: e.Accum#1/5 HalfReuse: '1'/8 HalfReuse: )/9 AsIs: e.Text#1/14(2) AsIs: >/1 ]] }
    refalrts::reinit_char( context[8], '1' );
    refalrts::reinit_close_bracket( context[9] );
    refalrts::push_stack( context[1] );
    refalrts::push_stack( context[0] );
    refalrts::link_brackets( context[7], context[9] );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence();

  do {
    // ( e.idx ) '2' e.idx
    // </0 & ReadBody/4 (/7 e.Accum#1/5 )/8 '2'/9 e.Text#1/2 >/1
    context[14] = context[2];
    context[15] = context[3];
    context[9] = refalrts::char_left( '2', context[14], context[15] );
    if( ! context[9] )
      continue;
    // closed e.Accum#1 as range 5
    // closed e.Text#1 as range 14(2)
    //DEBUG: e.Accum#1: 5
    //DEBUG: e.Text#1: 2

    refalrts::reset_allocator();
    //TRASH: {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 AsIs: & ReadBody/4 AsIs: (/7 AsIs: e.Accum#1/5 HalfReuse: '2'/8 HalfReuse: )/9 AsIs: e.Text#1/14(2) AsIs: >/1 ]] }
    refalrts::reinit_char( context[8], '2' );
    refalrts::reinit_close_bracket( context[9] );
    refalrts::push_stack( context[1] );
    refalrts::push_stack( context[0] );
    refalrts::link_brackets( context[7], context[9] );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence();

  do {
    // ( e.idx ) '3' e.idx
    // </0 & ReadBody/4 (/7 e.Accum#1/5 )/8 '3'/9 e.Text#1/2 >/1
    context[14] = context[2];
    context[15] = context[3];
    context[9] = refalrts::char_left( '3', context[14], context[15] );
    if( ! context[9] )
      continue;
    // closed e.Accum#1 as range 5
    // closed e.Text#1 as range 14(2)
    //DEBUG: e.Accum#1: 5
    //DEBUG: e.Text#1: 2

    refalrts::reset_allocator();
    //TRASH: {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 AsIs: & ReadBody/4 AsIs: (/7 AsIs: e.Accum#1/5 HalfReuse: '3'/8 HalfReuse: )/9 AsIs: e.Text#1/14(2) AsIs: >/1 ]] }
    refalrts::reinit_char( context[8], '3' );
    refalrts::reinit_close_bracket( context[9] );
    refalrts::push_stack( context[1] );
    refalrts::push_stack( context[0] );
    refalrts::link_brackets( context[7], context[9] );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence();

  do {
    // ( e.idx ) '4' e.idx
    // </0 & ReadBody/4 (/7 e.Accum#1/5 )/8 '4'/9 e.Text#1/2 >/1
    context[14] = context[2];
    context[15] = context[3];
    context[9] = refalrts::char_left( '4', context[14], context[15] );
    if( ! context[9] )
      continue;
    // closed e.Accum#1 as range 5
    // closed e.Text#1 as range 14(2)
    //DEBUG: e.Accum#1: 5
    //DEBUG: e.Text#1: 2

    refalrts::reset_allocator();
    //TRASH: {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 AsIs: & ReadBody/4 AsIs: (/7 AsIs: e.Accum#1/5 HalfReuse: '4'/8 HalfReuse: )/9 AsIs: e.Text#1/14(2) AsIs: >/1 ]] }
    refalrts::reinit_char( context[8], '4' );
    refalrts::reinit_close_bracket( context[9] );
    refalrts::push_stack( context[1] );
    refalrts::push_stack( context[0] );
    refalrts::link_brackets( context[7], context[9] );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence();

  do {
    // ( e.idx ) '5' e.idx
    // </0 & ReadBody/4 (/7 e.Accum#1/5 )/8 '5'/9 e.Text#1/2 >/1
    context[14] = context[2];
    context[15] = context[3];
    context[9] = refalrts::char_left( '5', context[14], context[15] );
    if( ! context[9] )
      continue;
    // closed e.Accum#1 as range 5
    // closed e.Text#1 as range 14(2)
    //DEBUG: e.Accum#1: 5
    //DEBUG: e.Text#1: 2

    refalrts::reset_allocator();
    //TRASH: {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 AsIs: & ReadBody/4 AsIs: (/7 AsIs: e.Accum#1/5 HalfReuse: '5'/8 HalfReuse: )/9 AsIs: e.Text#1/14(2) AsIs: >/1 ]] }
    refalrts::reinit_char( context[8], '5' );
    refalrts::reinit_close_bracket( context[9] );
    refalrts::push_stack( context[1] );
    refalrts::push_stack( context[0] );
    refalrts::link_brackets( context[7], context[9] );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence();

  do {
    // ( e.idx ) '6' e.idx
    // </0 & ReadBody/4 (/7 e.Accum#1/5 )/8 '6'/9 e.Text#1/2 >/1
    context[14] = context[2];
    context[15] = context[3];
    context[9] = refalrts::char_left( '6', context[14], context[15] );
    if( ! context[9] )
      continue;
    // closed e.Accum#1 as range 5
    // closed e.Text#1 as range 14(2)
    //DEBUG: e.Accum#1: 5
    //DEBUG: e.Text#1: 2

    refalrts::reset_allocator();
    //TRASH: {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 AsIs: & ReadBody/4 AsIs: (/7 AsIs: e.Accum#1/5 HalfReuse: '6'/8 HalfReuse: )/9 AsIs: e.Text#1/14(2) AsIs: >/1 ]] }
    refalrts::reinit_char( context[8], '6' );
    refalrts::reinit_close_bracket( context[9] );
    refalrts::push_stack( context[1] );
    refalrts::push_stack( context[0] );
    refalrts::link_brackets( context[7], context[9] );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence();

  do {
    // ( e.idx ) '7' e.idx
    // </0 & ReadBody/4 (/7 e.Accum#1/5 )/8 '7'/9 e.Text#1/2 >/1
    context[14] = context[2];
    context[15] = context[3];
    context[9] = refalrts::char_left( '7', context[14], context[15] );
    if( ! context[9] )
      continue;
    // closed e.Accum#1 as range 5
    // closed e.Text#1 as range 14(2)
    //DEBUG: e.Accum#1: 5
    //DEBUG: e.Text#1: 2

    refalrts::reset_allocator();
    //TRASH: {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 AsIs: & ReadBody/4 AsIs: (/7 AsIs: e.Accum#1/5 HalfReuse: '7'/8 HalfReuse: )/9 AsIs: e.Text#1/14(2) AsIs: >/1 ]] }
    refalrts::reinit_char( context[8], '7' );
    refalrts::reinit_close_bracket( context[9] );
    refalrts::push_stack( context[1] );
    refalrts::push_stack( context[0] );
    refalrts::link_brackets( context[7], context[9] );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence();

  do {
    // ( e.idx ) '8' e.idx
    // </0 & ReadBody/4 (/7 e.Accum#1/5 )/8 '8'/9 e.Text#1/2 >/1
    context[14] = context[2];
    context[15] = context[3];
    context[9] = refalrts::char_left( '8', context[14], context[15] );
    if( ! context[9] )
      continue;
    // closed e.Accum#1 as range 5
    // closed e.Text#1 as range 14(2)
    //DEBUG: e.Accum#1: 5
    //DEBUG: e.Text#1: 2

    refalrts::reset_allocator();
    //TRASH: {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 AsIs: & ReadBody/4 AsIs: (/7 AsIs: e.Accum#1/5 HalfReuse: '8'/8 HalfReuse: )/9 AsIs: e.Text#1/14(2) AsIs: >/1 ]] }
    refalrts::reinit_char( context[8], '8' );
    refalrts::reinit_close_bracket( context[9] );
    refalrts::push_stack( context[1] );
    refalrts::push_stack( context[0] );
    refalrts::link_brackets( context[7], context[9] );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence();

  do {
    // ( e.idx ) '9' e.idx
    // </0 & ReadBody/4 (/7 e.Accum#1/5 )/8 '9'/9 e.Text#1/2 >/1
    context[14] = context[2];
    context[15] = context[3];
    context[9] = refalrts::char_left( '9', context[14], context[15] );
    if( ! context[9] )
      continue;
    // closed e.Accum#1 as range 5
    // closed e.Text#1 as range 14(2)
    //DEBUG: e.Accum#1: 5
    //DEBUG: e.Text#1: 2

    refalrts::reset_allocator();
    //TRASH: {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 AsIs: & ReadBody/4 AsIs: (/7 AsIs: e.Accum#1/5 HalfReuse: '9'/8 HalfReuse: )/9 AsIs: e.Text#1/14(2) AsIs: >/1 ]] }
    refalrts::reinit_char( context[8], '9' );
    refalrts::reinit_close_bracket( context[9] );
    refalrts::push_stack( context[1] );
    refalrts::push_stack( context[0] );
    refalrts::link_brackets( context[7], context[9] );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence();

  do {
    // ( e.idx ) 'a' e.idx
    // </0 & ReadBody/4 (/7 e.Accum#1/5 )/8 'a'/9 e.Text#1/2 >/1
    context[14] = context[2];
    context[15] = context[3];
    context[9] = refalrts::char_left( 'a', context[14], context[15] );
    if( ! context[9] )
      continue;
    // closed e.Accum#1 as range 5
    // closed e.Text#1 as range 14(2)
    //DEBUG: e.Accum#1: 5
    //DEBUG: e.Text#1: 2

    refalrts::reset_allocator();
    //TRASH: {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 AsIs: & ReadBody/4 AsIs: (/7 AsIs: e.Accum#1/5 HalfReuse: 'a'/8 HalfReuse: )/9 AsIs: e.Text#1/14(2) AsIs: >/1 ]] }
    refalrts::reinit_char( context[8], 'a' );
    refalrts::reinit_close_bracket( context[9] );
    refalrts::push_stack( context[1] );
    refalrts::push_stack( context[0] );
    refalrts::link_brackets( context[7], context[9] );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence();

  do {
    // ( e.idx ) 'b' e.idx
    // </0 & ReadBody/4 (/7 e.Accum#1/5 )/8 'b'/9 e.Text#1/2 >/1
    context[14] = context[2];
    context[15] = context[3];
    context[9] = refalrts::char_left( 'b', context[14], context[15] );
    if( ! context[9] )
      continue;
    // closed e.Accum#1 as range 5
    // closed e.Text#1 as range 14(2)
    //DEBUG: e.Accum#1: 5
    //DEBUG: e.Text#1: 2

    refalrts::reset_allocator();
    //TRASH: {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 AsIs: & ReadBody/4 AsIs: (/7 AsIs: e.Accum#1/5 HalfReuse: 'b'/8 HalfReuse: )/9 AsIs: e.Text#1/14(2) AsIs: >/1 ]] }
    refalrts::reinit_char( context[8], 'b' );
    refalrts::reinit_close_bracket( context[9] );
    refalrts::push_stack( context[1] );
    refalrts::push_stack( context[0] );
    refalrts::link_brackets( context[7], context[9] );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence();

  do {
    // ( e.idx ) 'c' e.idx
    // </0 & ReadBody/4 (/7 e.Accum#1/5 )/8 'c'/9 e.Text#1/2 >/1
    context[14] = context[2];
    context[15] = context[3];
    context[9] = refalrts::char_left( 'c', context[14], context[15] );
    if( ! context[9] )
      continue;
    // closed e.Accum#1 as range 5
    // closed e.Text#1 as range 14(2)
    //DEBUG: e.Accum#1: 5
    //DEBUG: e.Text#1: 2

    refalrts::reset_allocator();
    //TRASH: {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 AsIs: & ReadBody/4 AsIs: (/7 AsIs: e.Accum#1/5 HalfReuse: 'c'/8 HalfReuse: )/9 AsIs: e.Text#1/14(2) AsIs: >/1 ]] }
    refalrts::reinit_char( context[8], 'c' );
    refalrts::reinit_close_bracket( context[9] );
    refalrts::push_stack( context[1] );
    refalrts::push_stack( context[0] );
    refalrts::link_brackets( context[7], context[9] );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence();

  do {
    // ( e.idx ) 'd' e.idx
    // </0 & ReadBody/4 (/7 e.Accum#1/5 )/8 'd'/9 e.Text#1/2 >/1
    context[14] = context[2];
    context[15] = context[3];
    context[9] = refalrts::char_left( 'd', context[14], context[15] );
    if( ! context[9] )
      continue;
    // closed e.Accum#1 as range 5
    // closed e.Text#1 as range 14(2)
    //DEBUG: e.Accum#1: 5
    //DEBUG: e.Text#1: 2

    refalrts::reset_allocator();
    //TRASH: {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 AsIs: & ReadBody/4 AsIs: (/7 AsIs: e.Accum#1/5 HalfReuse: 'd'/8 HalfReuse: )/9 AsIs: e.Text#1/14(2) AsIs: >/1 ]] }
    refalrts::reinit_char( context[8], 'd' );
    refalrts::reinit_close_bracket( context[9] );
    refalrts::push_stack( context[1] );
    refalrts::push_stack( context[0] );
    refalrts::link_brackets( context[7], context[9] );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence();

  do {
    // ( e.idx ) 'e' e.idx
    // </0 & ReadBody/4 (/7 e.Accum#1/5 )/8 'e'/9 e.Text#1/2 >/1
    context[14] = context[2];
    context[15] = context[3];
    context[9] = refalrts::char_left( 'e', context[14], context[15] );
    if( ! context[9] )
      continue;
    // closed e.Accum#1 as range 5
    // closed e.Text#1 as range 14(2)
    //DEBUG: e.Accum#1: 5
    //DEBUG: e.Text#1: 2

    refalrts::reset_allocator();
    //TRASH: {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 AsIs: & ReadBody/4 AsIs: (/7 AsIs: e.Accum#1/5 HalfReuse: 'e'/8 HalfReuse: )/9 AsIs: e.Text#1/14(2) AsIs: >/1 ]] }
    refalrts::reinit_char( context[8], 'e' );
    refalrts::reinit_close_bracket( context[9] );
    refalrts::push_stack( context[1] );
    refalrts::push_stack( context[0] );
    refalrts::link_brackets( context[7], context[9] );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence();

  do {
    // ( e.idx ) 'f' e.idx
    // </0 & ReadBody/4 (/7 e.Accum#1/5 )/8 'f'/9 e.Text#1/2 >/1
    context[14] = context[2];
    context[15] = context[3];
    context[9] = refalrts::char_left( 'f', context[14], context[15] );
    if( ! context[9] )
      continue;
    // closed e.Accum#1 as range 5
    // closed e.Text#1 as range 14(2)
    //DEBUG: e.Accum#1: 5
    //DEBUG: e.Text#1: 2

    refalrts::reset_allocator();
    //TRASH: {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 AsIs: & ReadBody/4 AsIs: (/7 AsIs: e.Accum#1/5 HalfReuse: 'f'/8 HalfReuse: )/9 AsIs: e.Text#1/14(2) AsIs: >/1 ]] }
    refalrts::reinit_char( context[8], 'f' );
    refalrts::reinit_close_bracket( context[9] );
    refalrts::push_stack( context[1] );
    refalrts::push_stack( context[0] );
    refalrts::link_brackets( context[7], context[9] );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence();

  do {
    // ( e.idx ) 'g' e.idx
    // </0 & ReadBody/4 (/7 e.Accum#1/5 )/8 'g'/9 e.Text#1/2 >/1
    context[14] = context[2];
    context[15] = context[3];
    context[9] = refalrts::char_left( 'g', context[14], context[15] );
    if( ! context[9] )
      continue;
    // closed e.Accum#1 as range 5
    // closed e.Text#1 as range 14(2)
    //DEBUG: e.Accum#1: 5
    //DEBUG: e.Text#1: 2

    refalrts::reset_allocator();
    //TRASH: {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 AsIs: & ReadBody/4 AsIs: (/7 AsIs: e.Accum#1/5 HalfReuse: 'g'/8 HalfReuse: )/9 AsIs: e.Text#1/14(2) AsIs: >/1 ]] }
    refalrts::reinit_char( context[8], 'g' );
    refalrts::reinit_close_bracket( context[9] );
    refalrts::push_stack( context[1] );
    refalrts::push_stack( context[0] );
    refalrts::link_brackets( context[7], context[9] );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence();

  do {
    // ( e.idx ) 'h' e.idx
    // </0 & ReadBody/4 (/7 e.Accum#1/5 )/8 'h'/9 e.Text#1/2 >/1
    context[14] = context[2];
    context[15] = context[3];
    context[9] = refalrts::char_left( 'h', context[14], context[15] );
    if( ! context[9] )
      continue;
    // closed e.Accum#1 as range 5
    // closed e.Text#1 as range 14(2)
    //DEBUG: e.Accum#1: 5
    //DEBUG: e.Text#1: 2

    refalrts::reset_allocator();
    //TRASH: {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 AsIs: & ReadBody/4 AsIs: (/7 AsIs: e.Accum#1/5 HalfReuse: 'h'/8 HalfReuse: )/9 AsIs: e.Text#1/14(2) AsIs: >/1 ]] }
    refalrts::reinit_char( context[8], 'h' );
    refalrts::reinit_close_bracket( context[9] );
    refalrts::push_stack( context[1] );
    refalrts::push_stack( context[0] );
    refalrts::link_brackets( context[7], context[9] );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence();

  do {
    // ( e.idx ) 'i' e.idx
    // </0 & ReadBody/4 (/7 e.Accum#1/5 )/8 'i'/9 e.Text#1/2 >/1
    context[14] = context[2];
    context[15] = context[3];
    context[9] = refalrts::char_left( 'i', context[14], context[15] );
    if( ! context[9] )
      continue;
    // closed e.Accum#1 as range 5
    // closed e.Text#1 as range 14(2)
    //DEBUG: e.Accum#1: 5
    //DEBUG: e.Text#1: 2

    refalrts::reset_allocator();
    //TRASH: {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 AsIs: & ReadBody/4 AsIs: (/7 AsIs: e.Accum#1/5 HalfReuse: 'i'/8 HalfReuse: )/9 AsIs: e.Text#1/14(2) AsIs: >/1 ]] }
    refalrts::reinit_char( context[8], 'i' );
    refalrts::reinit_close_bracket( context[9] );
    refalrts::push_stack( context[1] );
    refalrts::push_stack( context[0] );
    refalrts::link_brackets( context[7], context[9] );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence();

  do {
    // ( e.idx ) 'j' e.idx
    // </0 & ReadBody/4 (/7 e.Accum#1/5 )/8 'j'/9 e.Text#1/2 >/1
    context[14] = context[2];
    context[15] = context[3];
    context[9] = refalrts::char_left( 'j', context[14], context[15] );
    if( ! context[9] )
      continue;
    // closed e.Accum#1 as range 5
    // closed e.Text#1 as range 14(2)
    //DEBUG: e.Accum#1: 5
    //DEBUG: e.Text#1: 2

    refalrts::reset_allocator();
    //TRASH: {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 AsIs: & ReadBody/4 AsIs: (/7 AsIs: e.Accum#1/5 HalfReuse: 'j'/8 HalfReuse: )/9 AsIs: e.Text#1/14(2) AsIs: >/1 ]] }
    refalrts::reinit_char( context[8], 'j' );
    refalrts::reinit_close_bracket( context[9] );
    refalrts::push_stack( context[1] );
    refalrts::push_stack( context[0] );
    refalrts::link_brackets( context[7], context[9] );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence();

  do {
    // ( e.idx ) 'k' e.idx
    // </0 & ReadBody/4 (/7 e.Accum#1/5 )/8 'k'/9 e.Text#1/2 >/1
    context[14] = context[2];
    context[15] = context[3];
    context[9] = refalrts::char_left( 'k', context[14], context[15] );
    if( ! context[9] )
      continue;
    // closed e.Accum#1 as range 5
    // closed e.Text#1 as range 14(2)
    //DEBUG: e.Accum#1: 5
    //DEBUG: e.Text#1: 2

    refalrts::reset_allocator();
    //TRASH: {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 AsIs: & ReadBody/4 AsIs: (/7 AsIs: e.Accum#1/5 HalfReuse: 'k'/8 HalfReuse: )/9 AsIs: e.Text#1/14(2) AsIs: >/1 ]] }
    refalrts::reinit_char( context[8], 'k' );
    refalrts::reinit_close_bracket( context[9] );
    refalrts::push_stack( context[1] );
    refalrts::push_stack( context[0] );
    refalrts::link_brackets( context[7], context[9] );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence();

  do {
    // ( e.idx ) 'l' e.idx
    // </0 & ReadBody/4 (/7 e.Accum#1/5 )/8 'l'/9 e.Text#1/2 >/1
    context[14] = context[2];
    context[15] = context[3];
    context[9] = refalrts::char_left( 'l', context[14], context[15] );
    if( ! context[9] )
      continue;
    // closed e.Accum#1 as range 5
    // closed e.Text#1 as range 14(2)
    //DEBUG: e.Accum#1: 5
    //DEBUG: e.Text#1: 2

    refalrts::reset_allocator();
    //TRASH: {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 AsIs: & ReadBody/4 AsIs: (/7 AsIs: e.Accum#1/5 HalfReuse: 'l'/8 HalfReuse: )/9 AsIs: e.Text#1/14(2) AsIs: >/1 ]] }
    refalrts::reinit_char( context[8], 'l' );
    refalrts::reinit_close_bracket( context[9] );
    refalrts::push_stack( context[1] );
    refalrts::push_stack( context[0] );
    refalrts::link_brackets( context[7], context[9] );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence();

  do {
    // ( e.idx ) 'm' e.idx
    // </0 & ReadBody/4 (/7 e.Accum#1/5 )/8 'm'/9 e.Text#1/2 >/1
    context[14] = context[2];
    context[15] = context[3];
    context[9] = refalrts::char_left( 'm', context[14], context[15] );
    if( ! context[9] )
      continue;
    // closed e.Accum#1 as range 5
    // closed e.Text#1 as range 14(2)
    //DEBUG: e.Accum#1: 5
    //DEBUG: e.Text#1: 2

    refalrts::reset_allocator();
    //TRASH: {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 AsIs: & ReadBody/4 AsIs: (/7 AsIs: e.Accum#1/5 HalfReuse: 'm'/8 HalfReuse: )/9 AsIs: e.Text#1/14(2) AsIs: >/1 ]] }
    refalrts::reinit_char( context[8], 'm' );
    refalrts::reinit_close_bracket( context[9] );
    refalrts::push_stack( context[1] );
    refalrts::push_stack( context[0] );
    refalrts::link_brackets( context[7], context[9] );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence();

  do {
    // ( e.idx ) 'n' e.idx
    // </0 & ReadBody/4 (/7 e.Accum#1/5 )/8 'n'/9 e.Text#1/2 >/1
    context[14] = context[2];
    context[15] = context[3];
    context[9] = refalrts::char_left( 'n', context[14], context[15] );
    if( ! context[9] )
      continue;
    // closed e.Accum#1 as range 5
    // closed e.Text#1 as range 14(2)
    //DEBUG: e.Accum#1: 5
    //DEBUG: e.Text#1: 2

    refalrts::reset_allocator();
    //TRASH: {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 AsIs: & ReadBody/4 AsIs: (/7 AsIs: e.Accum#1/5 HalfReuse: 'n'/8 HalfReuse: )/9 AsIs: e.Text#1/14(2) AsIs: >/1 ]] }
    refalrts::reinit_char( context[8], 'n' );
    refalrts::reinit_close_bracket( context[9] );
    refalrts::push_stack( context[1] );
    refalrts::push_stack( context[0] );
    refalrts::link_brackets( context[7], context[9] );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence();

  do {
    // ( e.idx ) 'o' e.idx
    // </0 & ReadBody/4 (/7 e.Accum#1/5 )/8 'o'/9 e.Text#1/2 >/1
    context[14] = context[2];
    context[15] = context[3];
    context[9] = refalrts::char_left( 'o', context[14], context[15] );
    if( ! context[9] )
      continue;
    // closed e.Accum#1 as range 5
    // closed e.Text#1 as range 14(2)
    //DEBUG: e.Accum#1: 5
    //DEBUG: e.Text#1: 2

    refalrts::reset_allocator();
    //TRASH: {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 AsIs: & ReadBody/4 AsIs: (/7 AsIs: e.Accum#1/5 HalfReuse: 'o'/8 HalfReuse: )/9 AsIs: e.Text#1/14(2) AsIs: >/1 ]] }
    refalrts::reinit_char( context[8], 'o' );
    refalrts::reinit_close_bracket( context[9] );
    refalrts::push_stack( context[1] );
    refalrts::push_stack( context[0] );
    refalrts::link_brackets( context[7], context[9] );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence();

  do {
    // ( e.idx ) 'p' e.idx
    // </0 & ReadBody/4 (/7 e.Accum#1/5 )/8 'p'/9 e.Text#1/2 >/1
    context[14] = context[2];
    context[15] = context[3];
    context[9] = refalrts::char_left( 'p', context[14], context[15] );
    if( ! context[9] )
      continue;
    // closed e.Accum#1 as range 5
    // closed e.Text#1 as range 14(2)
    //DEBUG: e.Accum#1: 5
    //DEBUG: e.Text#1: 2

    refalrts::reset_allocator();
    //TRASH: {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 AsIs: & ReadBody/4 AsIs: (/7 AsIs: e.Accum#1/5 HalfReuse: 'p'/8 HalfReuse: )/9 AsIs: e.Text#1/14(2) AsIs: >/1 ]] }
    refalrts::reinit_char( context[8], 'p' );
    refalrts::reinit_close_bracket( context[9] );
    refalrts::push_stack( context[1] );
    refalrts::push_stack( context[0] );
    refalrts::link_brackets( context[7], context[9] );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence();

  do {
    // ( e.idx ) 'q' e.idx
    // </0 & ReadBody/4 (/7 e.Accum#1/5 )/8 'q'/9 e.Text#1/2 >/1
    context[14] = context[2];
    context[15] = context[3];
    context[9] = refalrts::char_left( 'q', context[14], context[15] );
    if( ! context[9] )
      continue;
    // closed e.Accum#1 as range 5
    // closed e.Text#1 as range 14(2)
    //DEBUG: e.Accum#1: 5
    //DEBUG: e.Text#1: 2

    refalrts::reset_allocator();
    //TRASH: {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 AsIs: & ReadBody/4 AsIs: (/7 AsIs: e.Accum#1/5 HalfReuse: 'q'/8 HalfReuse: )/9 AsIs: e.Text#1/14(2) AsIs: >/1 ]] }
    refalrts::reinit_char( context[8], 'q' );
    refalrts::reinit_close_bracket( context[9] );
    refalrts::push_stack( context[1] );
    refalrts::push_stack( context[0] );
    refalrts::link_brackets( context[7], context[9] );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence();

  do {
    // ( e.idx ) 'r' e.idx
    // </0 & ReadBody/4 (/7 e.Accum#1/5 )/8 'r'/9 e.Text#1/2 >/1
    context[14] = context[2];
    context[15] = context[3];
    context[9] = refalrts::char_left( 'r', context[14], context[15] );
    if( ! context[9] )
      continue;
    // closed e.Accum#1 as range 5
    // closed e.Text#1 as range 14(2)
    //DEBUG: e.Accum#1: 5
    //DEBUG: e.Text#1: 2

    refalrts::reset_allocator();
    //TRASH: {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 AsIs: & ReadBody/4 AsIs: (/7 AsIs: e.Accum#1/5 HalfReuse: 'r'/8 HalfReuse: )/9 AsIs: e.Text#1/14(2) AsIs: >/1 ]] }
    refalrts::reinit_char( context[8], 'r' );
    refalrts::reinit_close_bracket( context[9] );
    refalrts::push_stack( context[1] );
    refalrts::push_stack( context[0] );
    refalrts::link_brackets( context[7], context[9] );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence();

  do {
    // ( e.idx ) 's' e.idx
    // </0 & ReadBody/4 (/7 e.Accum#1/5 )/8 's'/9 e.Text#1/2 >/1
    context[14] = context[2];
    context[15] = context[3];
    context[9] = refalrts::char_left( 's', context[14], context[15] );
    if( ! context[9] )
      continue;
    // closed e.Accum#1 as range 5
    // closed e.Text#1 as range 14(2)
    //DEBUG: e.Accum#1: 5
    //DEBUG: e.Text#1: 2

    refalrts::reset_allocator();
    //TRASH: {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 AsIs: & ReadBody/4 AsIs: (/7 AsIs: e.Accum#1/5 HalfReuse: 's'/8 HalfReuse: )/9 AsIs: e.Text#1/14(2) AsIs: >/1 ]] }
    refalrts::reinit_char( context[8], 's' );
    refalrts::reinit_close_bracket( context[9] );
    refalrts::push_stack( context[1] );
    refalrts::push_stack( context[0] );
    refalrts::link_brackets( context[7], context[9] );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence();

  do {
    // ( e.idx ) 't' e.idx
    // </0 & ReadBody/4 (/7 e.Accum#1/5 )/8 't'/9 e.Text#1/2 >/1
    context[14] = context[2];
    context[15] = context[3];
    context[9] = refalrts::char_left( 't', context[14], context[15] );
    if( ! context[9] )
      continue;
    // closed e.Accum#1 as range 5
    // closed e.Text#1 as range 14(2)
    //DEBUG: e.Accum#1: 5
    //DEBUG: e.Text#1: 2

    refalrts::reset_allocator();
    //TRASH: {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 AsIs: & ReadBody/4 AsIs: (/7 AsIs: e.Accum#1/5 HalfReuse: 't'/8 HalfReuse: )/9 AsIs: e.Text#1/14(2) AsIs: >/1 ]] }
    refalrts::reinit_char( context[8], 't' );
    refalrts::reinit_close_bracket( context[9] );
    refalrts::push_stack( context[1] );
    refalrts::push_stack( context[0] );
    refalrts::link_brackets( context[7], context[9] );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence();

  do {
    // ( e.idx ) 'u' e.idx
    // </0 & ReadBody/4 (/7 e.Accum#1/5 )/8 'u'/9 e.Text#1/2 >/1
    context[14] = context[2];
    context[15] = context[3];
    context[9] = refalrts::char_left( 'u', context[14], context[15] );
    if( ! context[9] )
      continue;
    // closed e.Accum#1 as range 5
    // closed e.Text#1 as range 14(2)
    //DEBUG: e.Accum#1: 5
    //DEBUG: e.Text#1: 2

    refalrts::reset_allocator();
    //TRASH: {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 AsIs: & ReadBody/4 AsIs: (/7 AsIs: e.Accum#1/5 HalfReuse: 'u'/8 HalfReuse: )/9 AsIs: e.Text#1/14(2) AsIs: >/1 ]] }
    refalrts::reinit_char( context[8], 'u' );
    refalrts::reinit_close_bracket( context[9] );
    refalrts::push_stack( context[1] );
    refalrts::push_stack( context[0] );
    refalrts::link_brackets( context[7], context[9] );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence();

  do {
    // ( e.idx ) 'v' e.idx
    // </0 & ReadBody/4 (/7 e.Accum#1/5 )/8 'v'/9 e.Text#1/2 >/1
    context[14] = context[2];
    context[15] = context[3];
    context[9] = refalrts::char_left( 'v', context[14], context[15] );
    if( ! context[9] )
      continue;
    // closed e.Accum#1 as range 5
    // closed e.Text#1 as range 14(2)
    //DEBUG: e.Accum#1: 5
    //DEBUG: e.Text#1: 2

    refalrts::reset_allocator();
    //TRASH: {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 AsIs: & ReadBody/4 AsIs: (/7 AsIs: e.Accum#1/5 HalfReuse: 'v'/8 HalfReuse: )/9 AsIs: e.Text#1/14(2) AsIs: >/1 ]] }
    refalrts::reinit_char( context[8], 'v' );
    refalrts::reinit_close_bracket( context[9] );
    refalrts::push_stack( context[1] );
    refalrts::push_stack( context[0] );
    refalrts::link_brackets( context[7], context[9] );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence();

  do {
    // ( e.idx ) 'w' e.idx
    // </0 & ReadBody/4 (/7 e.Accum#1/5 )/8 'w'/9 e.Text#1/2 >/1
    context[14] = context[2];
    context[15] = context[3];
    context[9] = refalrts::char_left( 'w', context[14], context[15] );
    if( ! context[9] )
      continue;
    // closed e.Accum#1 as range 5
    // closed e.Text#1 as range 14(2)
    //DEBUG: e.Accum#1: 5
    //DEBUG: e.Text#1: 2

    refalrts::reset_allocator();
    //TRASH: {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 AsIs: & ReadBody/4 AsIs: (/7 AsIs: e.Accum#1/5 HalfReuse: 'w'/8 HalfReuse: )/9 AsIs: e.Text#1/14(2) AsIs: >/1 ]] }
    refalrts::reinit_char( context[8], 'w' );
    refalrts::reinit_close_bracket( context[9] );
    refalrts::push_stack( context[1] );
    refalrts::push_stack( context[0] );
    refalrts::link_brackets( context[7], context[9] );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence();

  do {
    // ( e.idx ) 'x' e.idx
    // </0 & ReadBody/4 (/7 e.Accum#1/5 )/8 'x'/9 e.Text#1/2 >/1
    context[14] = context[2];
    context[15] = context[3];
    context[9] = refalrts::char_left( 'x', context[14], context[15] );
    if( ! context[9] )
      continue;
    // closed e.Accum#1 as range 5
    // closed e.Text#1 as range 14(2)
    //DEBUG: e.Accum#1: 5
    //DEBUG: e.Text#1: 2

    refalrts::reset_allocator();
    //TRASH: {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 AsIs: & ReadBody/4 AsIs: (/7 AsIs: e.Accum#1/5 HalfReuse: 'x'/8 HalfReuse: )/9 AsIs: e.Text#1/14(2) AsIs: >/1 ]] }
    refalrts::reinit_char( context[8], 'x' );
    refalrts::reinit_close_bracket( context[9] );
    refalrts::push_stack( context[1] );
    refalrts::push_stack( context[0] );
    refalrts::link_brackets( context[7], context[9] );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence();

  do {
    // ( e.idx ) 'y' e.idx
    // </0 & ReadBody/4 (/7 e.Accum#1/5 )/8 'y'/9 e.Text#1/2 >/1
    context[14] = context[2];
    context[15] = context[3];
    context[9] = refalrts::char_left( 'y', context[14], context[15] );
    if( ! context[9] )
      continue;
    // closed e.Accum#1 as range 5
    // closed e.Text#1 as range 14(2)
    //DEBUG: e.Accum#1: 5
    //DEBUG: e.Text#1: 2

    refalrts::reset_allocator();
    //TRASH: {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 AsIs: & ReadBody/4 AsIs: (/7 AsIs: e.Accum#1/5 HalfReuse: 'y'/8 HalfReuse: )/9 AsIs: e.Text#1/14(2) AsIs: >/1 ]] }
    refalrts::reinit_char( context[8], 'y' );
    refalrts::reinit_close_bracket( context[9] );
    refalrts::push_stack( context[1] );
    refalrts::push_stack( context[0] );
    refalrts::link_brackets( context[7], context[9] );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence();

  do {
    // ( e.idx ) 'z' e.idx
    // </0 & ReadBody/4 (/7 e.Accum#1/5 )/8 'z'/9 e.Text#1/2 >/1
    context[14] = context[2];
    context[15] = context[3];
    context[9] = refalrts::char_left( 'z', context[14], context[15] );
    if( ! context[9] )
      continue;
    // closed e.Accum#1 as range 5
    // closed e.Text#1 as range 14(2)
    //DEBUG: e.Accum#1: 5
    //DEBUG: e.Text#1: 2

    refalrts::reset_allocator();
    //TRASH: {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 AsIs: & ReadBody/4 AsIs: (/7 AsIs: e.Accum#1/5 HalfReuse: 'z'/8 HalfReuse: )/9 AsIs: e.Text#1/14(2) AsIs: >/1 ]] }
    refalrts::reinit_char( context[8], 'z' );
    refalrts::reinit_close_bracket( context[9] );
    refalrts::push_stack( context[1] );
    refalrts::push_stack( context[0] );
    refalrts::link_brackets( context[7], context[9] );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence();

  do {
    // ( e.idx ) 'A' e.idx
    // </0 & ReadBody/4 (/7 e.Accum#1/5 )/8 'A'/9 e.Text#1/2 >/1
    context[14] = context[2];
    context[15] = context[3];
    context[9] = refalrts::char_left( 'A', context[14], context[15] );
    if( ! context[9] )
      continue;
    // closed e.Accum#1 as range 5
    // closed e.Text#1 as range 14(2)
    //DEBUG: e.Accum#1: 5
    //DEBUG: e.Text#1: 2

    refalrts::reset_allocator();
    //TRASH: {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 AsIs: & ReadBody/4 AsIs: (/7 AsIs: e.Accum#1/5 HalfReuse: 'A'/8 HalfReuse: )/9 AsIs: e.Text#1/14(2) AsIs: >/1 ]] }
    refalrts::reinit_char( context[8], 'A' );
    refalrts::reinit_close_bracket( context[9] );
    refalrts::push_stack( context[1] );
    refalrts::push_stack( context[0] );
    refalrts::link_brackets( context[7], context[9] );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence();

  do {
    // ( e.idx ) 'B' e.idx
    // </0 & ReadBody/4 (/7 e.Accum#1/5 )/8 'B'/9 e.Text#1/2 >/1
    context[14] = context[2];
    context[15] = context[3];
    context[9] = refalrts::char_left( 'B', context[14], context[15] );
    if( ! context[9] )
      continue;
    // closed e.Accum#1 as range 5
    // closed e.Text#1 as range 14(2)
    //DEBUG: e.Accum#1: 5
    //DEBUG: e.Text#1: 2

    refalrts::reset_allocator();
    //TRASH: {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 AsIs: & ReadBody/4 AsIs: (/7 AsIs: e.Accum#1/5 HalfReuse: 'B'/8 HalfReuse: )/9 AsIs: e.Text#1/14(2) AsIs: >/1 ]] }
    refalrts::reinit_char( context[8], 'B' );
    refalrts::reinit_close_bracket( context[9] );
    refalrts::push_stack( context[1] );
    refalrts::push_stack( context[0] );
    refalrts::link_brackets( context[7], context[9] );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence();

  do {
    // ( e.idx ) 'C' e.idx
    // </0 & ReadBody/4 (/7 e.Accum#1/5 )/8 'C'/9 e.Text#1/2 >/1
    context[14] = context[2];
    context[15] = context[3];
    context[9] = refalrts::char_left( 'C', context[14], context[15] );
    if( ! context[9] )
      continue;
    // closed e.Accum#1 as range 5
    // closed e.Text#1 as range 14(2)
    //DEBUG: e.Accum#1: 5
    //DEBUG: e.Text#1: 2

    refalrts::reset_allocator();
    //TRASH: {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 AsIs: & ReadBody/4 AsIs: (/7 AsIs: e.Accum#1/5 HalfReuse: 'C'/8 HalfReuse: )/9 AsIs: e.Text#1/14(2) AsIs: >/1 ]] }
    refalrts::reinit_char( context[8], 'C' );
    refalrts::reinit_close_bracket( context[9] );
    refalrts::push_stack( context[1] );
    refalrts::push_stack( context[0] );
    refalrts::link_brackets( context[7], context[9] );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence();

  do {
    // ( e.idx ) 'D' e.idx
    // </0 & ReadBody/4 (/7 e.Accum#1/5 )/8 'D'/9 e.Text#1/2 >/1
    context[14] = context[2];
    context[15] = context[3];
    context[9] = refalrts::char_left( 'D', context[14], context[15] );
    if( ! context[9] )
      continue;
    // closed e.Accum#1 as range 5
    // closed e.Text#1 as range 14(2)
    //DEBUG: e.Accum#1: 5
    //DEBUG: e.Text#1: 2

    refalrts::reset_allocator();
    //TRASH: {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 AsIs: & ReadBody/4 AsIs: (/7 AsIs: e.Accum#1/5 HalfReuse: 'D'/8 HalfReuse: )/9 AsIs: e.Text#1/14(2) AsIs: >/1 ]] }
    refalrts::reinit_char( context[8], 'D' );
    refalrts::reinit_close_bracket( context[9] );
    refalrts::push_stack( context[1] );
    refalrts::push_stack( context[0] );
    refalrts::link_brackets( context[7], context[9] );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence();

  do {
    // ( e.idx ) 'E' e.idx
    // </0 & ReadBody/4 (/7 e.Accum#1/5 )/8 'E'/9 e.Text#1/2 >/1
    context[14] = context[2];
    context[15] = context[3];
    context[9] = refalrts::char_left( 'E', context[14], context[15] );
    if( ! context[9] )
      continue;
    // closed e.Accum#1 as range 5
    // closed e.Text#1 as range 14(2)
    //DEBUG: e.Accum#1: 5
    //DEBUG: e.Text#1: 2

    refalrts::reset_allocator();
    //TRASH: {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 AsIs: & ReadBody/4 AsIs: (/7 AsIs: e.Accum#1/5 HalfReuse: 'E'/8 HalfReuse: )/9 AsIs: e.Text#1/14(2) AsIs: >/1 ]] }
    refalrts::reinit_char( context[8], 'E' );
    refalrts::reinit_close_bracket( context[9] );
    refalrts::push_stack( context[1] );
    refalrts::push_stack( context[0] );
    refalrts::link_brackets( context[7], context[9] );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence();

  do {
    // ( e.idx ) 'F' e.idx
    // </0 & ReadBody/4 (/7 e.Accum#1/5 )/8 'F'/9 e.Text#1/2 >/1
    context[14] = context[2];
    context[15] = context[3];
    context[9] = refalrts::char_left( 'F', context[14], context[15] );
    if( ! context[9] )
      continue;
    // closed e.Accum#1 as range 5
    // closed e.Text#1 as range 14(2)
    //DEBUG: e.Accum#1: 5
    //DEBUG: e.Text#1: 2

    refalrts::reset_allocator();
    //TRASH: {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 AsIs: & ReadBody/4 AsIs: (/7 AsIs: e.Accum#1/5 HalfReuse: 'F'/8 HalfReuse: )/9 AsIs: e.Text#1/14(2) AsIs: >/1 ]] }
    refalrts::reinit_char( context[8], 'F' );
    refalrts::reinit_close_bracket( context[9] );
    refalrts::push_stack( context[1] );
    refalrts::push_stack( context[0] );
    refalrts::link_brackets( context[7], context[9] );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence();

  do {
    // ( e.idx ) 'G' e.idx
    // </0 & ReadBody/4 (/7 e.Accum#1/5 )/8 'G'/9 e.Text#1/2 >/1
    context[14] = context[2];
    context[15] = context[3];
    context[9] = refalrts::char_left( 'G', context[14], context[15] );
    if( ! context[9] )
      continue;
    // closed e.Accum#1 as range 5
    // closed e.Text#1 as range 14(2)
    //DEBUG: e.Accum#1: 5
    //DEBUG: e.Text#1: 2

    refalrts::reset_allocator();
    //TRASH: {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 AsIs: & ReadBody/4 AsIs: (/7 AsIs: e.Accum#1/5 HalfReuse: 'G'/8 HalfReuse: )/9 AsIs: e.Text#1/14(2) AsIs: >/1 ]] }
    refalrts::reinit_char( context[8], 'G' );
    refalrts::reinit_close_bracket( context[9] );
    refalrts::push_stack( context[1] );
    refalrts::push_stack( context[0] );
    refalrts::link_brackets( context[7], context[9] );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence();

  do {
    // ( e.idx ) 'H' e.idx
    // </0 & ReadBody/4 (/7 e.Accum#1/5 )/8 'H'/9 e.Text#1/2 >/1
    context[14] = context[2];
    context[15] = context[3];
    context[9] = refalrts::char_left( 'H', context[14], context[15] );
    if( ! context[9] )
      continue;
    // closed e.Accum#1 as range 5
    // closed e.Text#1 as range 14(2)
    //DEBUG: e.Accum#1: 5
    //DEBUG: e.Text#1: 2

    refalrts::reset_allocator();
    //TRASH: {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 AsIs: & ReadBody/4 AsIs: (/7 AsIs: e.Accum#1/5 HalfReuse: 'H'/8 HalfReuse: )/9 AsIs: e.Text#1/14(2) AsIs: >/1 ]] }
    refalrts::reinit_char( context[8], 'H' );
    refalrts::reinit_close_bracket( context[9] );
    refalrts::push_stack( context[1] );
    refalrts::push_stack( context[0] );
    refalrts::link_brackets( context[7], context[9] );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence();

  do {
    // ( e.idx ) 'I' e.idx
    // </0 & ReadBody/4 (/7 e.Accum#1/5 )/8 'I'/9 e.Text#1/2 >/1
    context[14] = context[2];
    context[15] = context[3];
    context[9] = refalrts::char_left( 'I', context[14], context[15] );
    if( ! context[9] )
      continue;
    // closed e.Accum#1 as range 5
    // closed e.Text#1 as range 14(2)
    //DEBUG: e.Accum#1: 5
    //DEBUG: e.Text#1: 2

    refalrts::reset_allocator();
    //TRASH: {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 AsIs: & ReadBody/4 AsIs: (/7 AsIs: e.Accum#1/5 HalfReuse: 'I'/8 HalfReuse: )/9 AsIs: e.Text#1/14(2) AsIs: >/1 ]] }
    refalrts::reinit_char( context[8], 'I' );
    refalrts::reinit_close_bracket( context[9] );
    refalrts::push_stack( context[1] );
    refalrts::push_stack( context[0] );
    refalrts::link_brackets( context[7], context[9] );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence();

  do {
    // ( e.idx ) 'J' e.idx
    // </0 & ReadBody/4 (/7 e.Accum#1/5 )/8 'J'/9 e.Text#1/2 >/1
    context[14] = context[2];
    context[15] = context[3];
    context[9] = refalrts::char_left( 'J', context[14], context[15] );
    if( ! context[9] )
      continue;
    // closed e.Accum#1 as range 5
    // closed e.Text#1 as range 14(2)
    //DEBUG: e.Accum#1: 5
    //DEBUG: e.Text#1: 2

    refalrts::reset_allocator();
    //TRASH: {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 AsIs: & ReadBody/4 AsIs: (/7 AsIs: e.Accum#1/5 HalfReuse: 'J'/8 HalfReuse: )/9 AsIs: e.Text#1/14(2) AsIs: >/1 ]] }
    refalrts::reinit_char( context[8], 'J' );
    refalrts::reinit_close_bracket( context[9] );
    refalrts::push_stack( context[1] );
    refalrts::push_stack( context[0] );
    refalrts::link_brackets( context[7], context[9] );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence();

  do {
    // ( e.idx ) 'K' e.idx
    // </0 & ReadBody/4 (/7 e.Accum#1/5 )/8 'K'/9 e.Text#1/2 >/1
    context[14] = context[2];
    context[15] = context[3];
    context[9] = refalrts::char_left( 'K', context[14], context[15] );
    if( ! context[9] )
      continue;
    // closed e.Accum#1 as range 5
    // closed e.Text#1 as range 14(2)
    //DEBUG: e.Accum#1: 5
    //DEBUG: e.Text#1: 2

    refalrts::reset_allocator();
    //TRASH: {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 AsIs: & ReadBody/4 AsIs: (/7 AsIs: e.Accum#1/5 HalfReuse: 'K'/8 HalfReuse: )/9 AsIs: e.Text#1/14(2) AsIs: >/1 ]] }
    refalrts::reinit_char( context[8], 'K' );
    refalrts::reinit_close_bracket( context[9] );
    refalrts::push_stack( context[1] );
    refalrts::push_stack( context[0] );
    refalrts::link_brackets( context[7], context[9] );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence();

  do {
    // ( e.idx ) 'L' e.idx
    // </0 & ReadBody/4 (/7 e.Accum#1/5 )/8 'L'/9 e.Text#1/2 >/1
    context[14] = context[2];
    context[15] = context[3];
    context[9] = refalrts::char_left( 'L', context[14], context[15] );
    if( ! context[9] )
      continue;
    // closed e.Accum#1 as range 5
    // closed e.Text#1 as range 14(2)
    //DEBUG: e.Accum#1: 5
    //DEBUG: e.Text#1: 2

    refalrts::reset_allocator();
    //TRASH: {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 AsIs: & ReadBody/4 AsIs: (/7 AsIs: e.Accum#1/5 HalfReuse: 'L'/8 HalfReuse: )/9 AsIs: e.Text#1/14(2) AsIs: >/1 ]] }
    refalrts::reinit_char( context[8], 'L' );
    refalrts::reinit_close_bracket( context[9] );
    refalrts::push_stack( context[1] );
    refalrts::push_stack( context[0] );
    refalrts::link_brackets( context[7], context[9] );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence();

  do {
    // ( e.idx ) 'M' e.idx
    // </0 & ReadBody/4 (/7 e.Accum#1/5 )/8 'M'/9 e.Text#1/2 >/1
    context[14] = context[2];
    context[15] = context[3];
    context[9] = refalrts::char_left( 'M', context[14], context[15] );
    if( ! context[9] )
      continue;
    // closed e.Accum#1 as range 5
    // closed e.Text#1 as range 14(2)
    //DEBUG: e.Accum#1: 5
    //DEBUG: e.Text#1: 2

    refalrts::reset_allocator();
    //TRASH: {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 AsIs: & ReadBody/4 AsIs: (/7 AsIs: e.Accum#1/5 HalfReuse: 'M'/8 HalfReuse: )/9 AsIs: e.Text#1/14(2) AsIs: >/1 ]] }
    refalrts::reinit_char( context[8], 'M' );
    refalrts::reinit_close_bracket( context[9] );
    refalrts::push_stack( context[1] );
    refalrts::push_stack( context[0] );
    refalrts::link_brackets( context[7], context[9] );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence();

  do {
    // ( e.idx ) 'N' e.idx
    // </0 & ReadBody/4 (/7 e.Accum#1/5 )/8 'N'/9 e.Text#1/2 >/1
    context[14] = context[2];
    context[15] = context[3];
    context[9] = refalrts::char_left( 'N', context[14], context[15] );
    if( ! context[9] )
      continue;
    // closed e.Accum#1 as range 5
    // closed e.Text#1 as range 14(2)
    //DEBUG: e.Accum#1: 5
    //DEBUG: e.Text#1: 2

    refalrts::reset_allocator();
    //TRASH: {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 AsIs: & ReadBody/4 AsIs: (/7 AsIs: e.Accum#1/5 HalfReuse: 'N'/8 HalfReuse: )/9 AsIs: e.Text#1/14(2) AsIs: >/1 ]] }
    refalrts::reinit_char( context[8], 'N' );
    refalrts::reinit_close_bracket( context[9] );
    refalrts::push_stack( context[1] );
    refalrts::push_stack( context[0] );
    refalrts::link_brackets( context[7], context[9] );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence();

  do {
    // ( e.idx ) 'O' e.idx
    // </0 & ReadBody/4 (/7 e.Accum#1/5 )/8 'O'/9 e.Text#1/2 >/1
    context[14] = context[2];
    context[15] = context[3];
    context[9] = refalrts::char_left( 'O', context[14], context[15] );
    if( ! context[9] )
      continue;
    // closed e.Accum#1 as range 5
    // closed e.Text#1 as range 14(2)
    //DEBUG: e.Accum#1: 5
    //DEBUG: e.Text#1: 2

    refalrts::reset_allocator();
    //TRASH: {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 AsIs: & ReadBody/4 AsIs: (/7 AsIs: e.Accum#1/5 HalfReuse: 'O'/8 HalfReuse: )/9 AsIs: e.Text#1/14(2) AsIs: >/1 ]] }
    refalrts::reinit_char( context[8], 'O' );
    refalrts::reinit_close_bracket( context[9] );
    refalrts::push_stack( context[1] );
    refalrts::push_stack( context[0] );
    refalrts::link_brackets( context[7], context[9] );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence();

  do {
    // ( e.idx ) 'P' e.idx
    // </0 & ReadBody/4 (/7 e.Accum#1/5 )/8 'P'/9 e.Text#1/2 >/1
    context[14] = context[2];
    context[15] = context[3];
    context[9] = refalrts::char_left( 'P', context[14], context[15] );
    if( ! context[9] )
      continue;
    // closed e.Accum#1 as range 5
    // closed e.Text#1 as range 14(2)
    //DEBUG: e.Accum#1: 5
    //DEBUG: e.Text#1: 2

    refalrts::reset_allocator();
    //TRASH: {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 AsIs: & ReadBody/4 AsIs: (/7 AsIs: e.Accum#1/5 HalfReuse: 'P'/8 HalfReuse: )/9 AsIs: e.Text#1/14(2) AsIs: >/1 ]] }
    refalrts::reinit_char( context[8], 'P' );
    refalrts::reinit_close_bracket( context[9] );
    refalrts::push_stack( context[1] );
    refalrts::push_stack( context[0] );
    refalrts::link_brackets( context[7], context[9] );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence();

  do {
    // ( e.idx ) 'Q' e.idx
    // </0 & ReadBody/4 (/7 e.Accum#1/5 )/8 'Q'/9 e.Text#1/2 >/1
    context[14] = context[2];
    context[15] = context[3];
    context[9] = refalrts::char_left( 'Q', context[14], context[15] );
    if( ! context[9] )
      continue;
    // closed e.Accum#1 as range 5
    // closed e.Text#1 as range 14(2)
    //DEBUG: e.Accum#1: 5
    //DEBUG: e.Text#1: 2

    refalrts::reset_allocator();
    //TRASH: {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 AsIs: & ReadBody/4 AsIs: (/7 AsIs: e.Accum#1/5 HalfReuse: 'Q'/8 HalfReuse: )/9 AsIs: e.Text#1/14(2) AsIs: >/1 ]] }
    refalrts::reinit_char( context[8], 'Q' );
    refalrts::reinit_close_bracket( context[9] );
    refalrts::push_stack( context[1] );
    refalrts::push_stack( context[0] );
    refalrts::link_brackets( context[7], context[9] );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence();

  do {
    // ( e.idx ) 'R' e.idx
    // </0 & ReadBody/4 (/7 e.Accum#1/5 )/8 'R'/9 e.Text#1/2 >/1
    context[14] = context[2];
    context[15] = context[3];
    context[9] = refalrts::char_left( 'R', context[14], context[15] );
    if( ! context[9] )
      continue;
    // closed e.Accum#1 as range 5
    // closed e.Text#1 as range 14(2)
    //DEBUG: e.Accum#1: 5
    //DEBUG: e.Text#1: 2

    refalrts::reset_allocator();
    //TRASH: {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 AsIs: & ReadBody/4 AsIs: (/7 AsIs: e.Accum#1/5 HalfReuse: 'R'/8 HalfReuse: )/9 AsIs: e.Text#1/14(2) AsIs: >/1 ]] }
    refalrts::reinit_char( context[8], 'R' );
    refalrts::reinit_close_bracket( context[9] );
    refalrts::push_stack( context[1] );
    refalrts::push_stack( context[0] );
    refalrts::link_brackets( context[7], context[9] );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence();

  do {
    // ( e.idx ) 'S' e.idx
    // </0 & ReadBody/4 (/7 e.Accum#1/5 )/8 'S'/9 e.Text#1/2 >/1
    context[14] = context[2];
    context[15] = context[3];
    context[9] = refalrts::char_left( 'S', context[14], context[15] );
    if( ! context[9] )
      continue;
    // closed e.Accum#1 as range 5
    // closed e.Text#1 as range 14(2)
    //DEBUG: e.Accum#1: 5
    //DEBUG: e.Text#1: 2

    refalrts::reset_allocator();
    //TRASH: {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 AsIs: & ReadBody/4 AsIs: (/7 AsIs: e.Accum#1/5 HalfReuse: 'S'/8 HalfReuse: )/9 AsIs: e.Text#1/14(2) AsIs: >/1 ]] }
    refalrts::reinit_char( context[8], 'S' );
    refalrts::reinit_close_bracket( context[9] );
    refalrts::push_stack( context[1] );
    refalrts::push_stack( context[0] );
    refalrts::link_brackets( context[7], context[9] );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence();

  do {
    // ( e.idx ) 'T' e.idx
    // </0 & ReadBody/4 (/7 e.Accum#1/5 )/8 'T'/9 e.Text#1/2 >/1
    context[14] = context[2];
    context[15] = context[3];
    context[9] = refalrts::char_left( 'T', context[14], context[15] );
    if( ! context[9] )
      continue;
    // closed e.Accum#1 as range 5
    // closed e.Text#1 as range 14(2)
    //DEBUG: e.Accum#1: 5
    //DEBUG: e.Text#1: 2

    refalrts::reset_allocator();
    //TRASH: {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 AsIs: & ReadBody/4 AsIs: (/7 AsIs: e.Accum#1/5 HalfReuse: 'T'/8 HalfReuse: )/9 AsIs: e.Text#1/14(2) AsIs: >/1 ]] }
    refalrts::reinit_char( context[8], 'T' );
    refalrts::reinit_close_bracket( context[9] );
    refalrts::push_stack( context[1] );
    refalrts::push_stack( context[0] );
    refalrts::link_brackets( context[7], context[9] );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence();

  do {
    // ( e.idx ) 'U' e.idx
    // </0 & ReadBody/4 (/7 e.Accum#1/5 )/8 'U'/9 e.Text#1/2 >/1
    context[14] = context[2];
    context[15] = context[3];
    context[9] = refalrts::char_left( 'U', context[14], context[15] );
    if( ! context[9] )
      continue;
    // closed e.Accum#1 as range 5
    // closed e.Text#1 as range 14(2)
    //DEBUG: e.Accum#1: 5
    //DEBUG: e.Text#1: 2

    refalrts::reset_allocator();
    //TRASH: {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 AsIs: & ReadBody/4 AsIs: (/7 AsIs: e.Accum#1/5 HalfReuse: 'U'/8 HalfReuse: )/9 AsIs: e.Text#1/14(2) AsIs: >/1 ]] }
    refalrts::reinit_char( context[8], 'U' );
    refalrts::reinit_close_bracket( context[9] );
    refalrts::push_stack( context[1] );
    refalrts::push_stack( context[0] );
    refalrts::link_brackets( context[7], context[9] );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence();

  do {
    // ( e.idx ) 'V' e.idx
    // </0 & ReadBody/4 (/7 e.Accum#1/5 )/8 'V'/9 e.Text#1/2 >/1
    context[14] = context[2];
    context[15] = context[3];
    context[9] = refalrts::char_left( 'V', context[14], context[15] );
    if( ! context[9] )
      continue;
    // closed e.Accum#1 as range 5
    // closed e.Text#1 as range 14(2)
    //DEBUG: e.Accum#1: 5
    //DEBUG: e.Text#1: 2

    refalrts::reset_allocator();
    //TRASH: {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 AsIs: & ReadBody/4 AsIs: (/7 AsIs: e.Accum#1/5 HalfReuse: 'V'/8 HalfReuse: )/9 AsIs: e.Text#1/14(2) AsIs: >/1 ]] }
    refalrts::reinit_char( context[8], 'V' );
    refalrts::reinit_close_bracket( context[9] );
    refalrts::push_stack( context[1] );
    refalrts::push_stack( context[0] );
    refalrts::link_brackets( context[7], context[9] );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence();

  do {
    // ( e.idx ) 'W' e.idx
    // </0 & ReadBody/4 (/7 e.Accum#1/5 )/8 'W'/9 e.Text#1/2 >/1
    context[14] = context[2];
    context[15] = context[3];
    context[9] = refalrts::char_left( 'W', context[14], context[15] );
    if( ! context[9] )
      continue;
    // closed e.Accum#1 as range 5
    // closed e.Text#1 as range 14(2)
    //DEBUG: e.Accum#1: 5
    //DEBUG: e.Text#1: 2

    refalrts::reset_allocator();
    //TRASH: {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 AsIs: & ReadBody/4 AsIs: (/7 AsIs: e.Accum#1/5 HalfReuse: 'W'/8 HalfReuse: )/9 AsIs: e.Text#1/14(2) AsIs: >/1 ]] }
    refalrts::reinit_char( context[8], 'W' );
    refalrts::reinit_close_bracket( context[9] );
    refalrts::push_stack( context[1] );
    refalrts::push_stack( context[0] );
    refalrts::link_brackets( context[7], context[9] );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence();

  do {
    // ( e.idx ) 'X' e.idx
    // </0 & ReadBody/4 (/7 e.Accum#1/5 )/8 'X'/9 e.Text#1/2 >/1
    context[14] = context[2];
    context[15] = context[3];
    context[9] = refalrts::char_left( 'X', context[14], context[15] );
    if( ! context[9] )
      continue;
    // closed e.Accum#1 as range 5
    // closed e.Text#1 as range 14(2)
    //DEBUG: e.Accum#1: 5
    //DEBUG: e.Text#1: 2

    refalrts::reset_allocator();
    //TRASH: {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 AsIs: & ReadBody/4 AsIs: (/7 AsIs: e.Accum#1/5 HalfReuse: 'X'/8 HalfReuse: )/9 AsIs: e.Text#1/14(2) AsIs: >/1 ]] }
    refalrts::reinit_char( context[8], 'X' );
    refalrts::reinit_close_bracket( context[9] );
    refalrts::push_stack( context[1] );
    refalrts::push_stack( context[0] );
    refalrts::link_brackets( context[7], context[9] );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence();

  do {
    // ( e.idx ) 'Y' e.idx
    // </0 & ReadBody/4 (/7 e.Accum#1/5 )/8 'Y'/9 e.Text#1/2 >/1
    context[14] = context[2];
    context[15] = context[3];
    context[9] = refalrts::char_left( 'Y', context[14], context[15] );
    if( ! context[9] )
      continue;
    // closed e.Accum#1 as range 5
    // closed e.Text#1 as range 14(2)
    //DEBUG: e.Accum#1: 5
    //DEBUG: e.Text#1: 2

    refalrts::reset_allocator();
    //TRASH: {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 AsIs: & ReadBody/4 AsIs: (/7 AsIs: e.Accum#1/5 HalfReuse: 'Y'/8 HalfReuse: )/9 AsIs: e.Text#1/14(2) AsIs: >/1 ]] }
    refalrts::reinit_char( context[8], 'Y' );
    refalrts::reinit_close_bracket( context[9] );
    refalrts::push_stack( context[1] );
    refalrts::push_stack( context[0] );
    refalrts::link_brackets( context[7], context[9] );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence();

  do {
    // ( e.idx ) 'Z' e.idx
    // </0 & ReadBody/4 (/7 e.Accum#1/5 )/8 'Z'/9 e.Text#1/2 >/1
    context[14] = context[2];
    context[15] = context[3];
    context[9] = refalrts::char_left( 'Z', context[14], context[15] );
    if( ! context[9] )
      continue;
    // closed e.Accum#1 as range 5
    // closed e.Text#1 as range 14(2)
    //DEBUG: e.Accum#1: 5
    //DEBUG: e.Text#1: 2

    refalrts::reset_allocator();
    //TRASH: {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 AsIs: & ReadBody/4 AsIs: (/7 AsIs: e.Accum#1/5 HalfReuse: 'Z'/8 HalfReuse: )/9 AsIs: e.Text#1/14(2) AsIs: >/1 ]] }
    refalrts::reinit_char( context[8], 'Z' );
    refalrts::reinit_close_bracket( context[9] );
    refalrts::push_stack( context[1] );
    refalrts::push_stack( context[0] );
    refalrts::link_brackets( context[7], context[9] );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence();

  do {
    // ( e.idx ) '}' e.idx
    // </0 & ReadBody/4 (/7 e.Accum#1/5 )/8 '}'/9 e.Text#1/2 >/1
    context[14] = context[2];
    context[15] = context[3];
    context[9] = refalrts::char_left( '}', context[14], context[15] );
    if( ! context[9] )
      continue;
    // closed e.Accum#1 as range 5
    // closed e.Text#1 as range 14(2)
    //DEBUG: e.Accum#1: 5
    //DEBUG: e.Text#1: 2

    refalrts::reset_allocator();
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ HalfReuse: (/0 HalfReuse: # TInclude/4 } Tile{ AsIs: e.Accum#1/5 } '}'/10 Tile{ HalfReuse: )/7 } </11 & ReadRegexp/12 Tile{ HalfReuse: (/8 HalfReuse: )/9 AsIs: e.Text#1/14(2) AsIs: >/1 ]] }
    if( ! refalrts::alloc_char( context[10], '}' ) )
      return refalrts::cNoMemory;
    if( ! refalrts::alloc_open_call( context[11] ) )
      return refalrts::cNoMemory;
    if( ! refalrts::alloc_name( context[12], & ReadRegexp ) )
      return refalrts::cNoMemory;
    refalrts::reinit_open_bracket( context[0] );
    refalrts::reinit_ident( context[4], & ident_TInclude<int>::name );
    refalrts::reinit_close_bracket( context[7] );
    refalrts::reinit_open_bracket( context[8] );
    refalrts::reinit_close_bracket( context[9] );
    refalrts::push_stack( context[1] );
    refalrts::push_stack( context[11] );
    refalrts::link_brackets( context[8], context[9] );
    refalrts::link_brackets( context[0], context[7] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[8];
    res = refalrts::splice_evar( res, context[11], context[12] );
    res = refalrts::splice_evar( res, context[7], context[7] );
    res = refalrts::splice_evar( res, context[10], context[10] );
    res = refalrts::splice_evar( res, context[5], context[6] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence();

  // ( e.idx ) e.idx
  // </0 & ReadBody/4 (/7 e.Accum#1/5 )/8 e.Text#1/2 >/1
  // closed e.Accum#1 as range 5
  // closed e.Text#1 as range 2
  //DEBUG: e.Accum#1: 5
  //DEBUG: e.Text#1: 2

  refalrts::reset_allocator();
  //TRASH: {REMOVED TILE} {REMOVED TILE} e.Accum#1/5 {REMOVED TILE}
  //RESULT: Tile{ [[ } (/9 # TokenError/10"Unclused include"/11 )/13 Tile{ AsIs: </0 Reuse: & ReadRegexp/4 AsIs: (/7 } Tile{ AsIs: )/8 AsIs: e.Text#1/2 AsIs: >/1 ]] }
  if( ! refalrts::alloc_open_bracket( context[9] ) )
    return refalrts::cNoMemory;
  if( ! refalrts::alloc_ident( context[10], & ident_TokenError<int>::name ) )
    return refalrts::cNoMemory;
  if( ! refalrts::alloc_chars( context[11], context[12], "Unclused include", 16 ) )
    return refalrts::cNoMemory;
  if( ! refalrts::alloc_close_bracket( context[13] ) )
    return refalrts::cNoMemory;
  refalrts::update_name( context[4], & ReadRegexp );
  refalrts::push_stack( context[1] );
  refalrts::push_stack( context[0] );
  refalrts::link_brackets( context[7], context[8] );
  refalrts::link_brackets( context[9], context[13] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[8];
  res = refalrts::splice_evar( res, context[0], context[7] );
  res = refalrts::splice_evar( res, context[9], context[13] );
  refalrts::use( res );
  refalrts::splice_to_freelist_open( trash_prev, res );
  return refalrts::cSuccess;
}

namespace /* unnamed */ {
refalrts::RefalNativeFunction descr_ReadBody(func_ReadBody, "ReadBody");
refalrts::RefalFunction& ReadBody = descr_ReadBody;

} // unnamed namespace

#endif
#ifdef INTERPRET
namespace /* unnamed */ {
  namespace scope_EscRegexp_OCode_C1 {
    static const char *filename = "Flex-Lexer.cpp";
    static refalrts::RefalFunction *functions[] = {
      & ReadRegexp
    };
    static const refalrts::RefalIdentifier idents[] = {
      & ident_TkOctNumber<int>::name
    };
    using refalrts::numbers;
    using refalrts::strings;
    static const refalrts::RASLCommand raa[] = {
      {refalrts::icThisIsGeneratedFunction, 0, 0, 0},
      {refalrts::icLoadConstants, 0, 0, 0},
      {refalrts::icReserveBacktrackStack, 8, 0, 0},
      {refalrts::icIssueMemory, 15, 0, 0},
      //FAST GEN: ( e.$ ) e.$
      //GLOBAL GEN: ( e.$ ) e.$
      // </0 & EscRegexp-OCode-C1/4 (/7 e.idxB#0/5 )/8 e.idxT#0/2 >/1
      {refalrts::icInitB0_Lite, 0, 0, 0},
      {refalrts::icCallSaveLeft, 0, 2, 0},
      {refalrts::icBracketLeftSave, 0, 5, 2},
      // closed e.idxB#0 as range 5
      // closed e.idxT#0 as range 2
      {refalrts::icOnFailGoTo, +21, 0, 0},
      // ( e.idx ) '0' e.idx
      // </0 & EscRegexp-OCode-C1/4 (/7 e.Accum#1/5 )/8 '0'/9 e.Text#1/2 >/1
      {refalrts::icSave, 0, 13, 2},
      {refalrts::icCharLeftSave, 9, static_cast<unsigned char>('0'), 13},
      // closed e.Accum#1 as range 5
      // closed e.Text#1 as range 13(2)
      //DEBUG: e.Accum#1: 5
      //DEBUG: e.Text#1: 2
      {refalrts::icEmptyResult, 0, 0, 0},
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ HalfReuse: (/0 HalfReuse: # TkOctNumber/4 } Tile{ AsIs: e.Accum#1/5 } '0'/10 Tile{ HalfReuse: )/7 } </11 & ReadRegexp/12 Tile{ HalfReuse: (/8 HalfReuse: )/9 AsIs: e.Text#1/13(2) AsIs: >/1 ]] }
      {refalrts::icAllocChar, 0, '0', 10},
      {refalrts::icAllocBracket, 0, refalrts::ibOpenCall, 11},
      {refalrts::icAllocFunc, 0, 0, 12},
      {refalrts::icReinitBracket, 0, refalrts::ibOpenBracket, 0},
      {refalrts::icReinitIdent, 0, 0, 4},
      {refalrts::icReinitBracket, 0, refalrts::ibCloseBracket, 7},
      {refalrts::icReinitBracket, 0, refalrts::ibOpenBracket, 8},
      {refalrts::icReinitBracket, 0, refalrts::ibCloseBracket, 9},
      {refalrts::icPushStack, 0, 0, 1},
      {refalrts::icPushStack, 0, 0, 11},
      {refalrts::icLinkBrackets, 8, 9, 0},
      {refalrts::icLinkBrackets, 0, 7, 0},
      {refalrts::icSetRes, 0, 0, 8},
      {refalrts::icSpliceTile, 11, 12, 0},
      {refalrts::icSpliceTile, 7, 7, 0},
      {refalrts::icSpliceTile, 10, 10, 0},
      {refalrts::icSpliceEVar, 0, 0, 5},
      {refalrts::icNextStep, 0, 0, 0},
      {refalrts::icProfilerStopSentence, 0, 0, 0},
      {refalrts::icOnFailGoTo, +21, 0, 0},
      // ( e.idx ) '1' e.idx
      // </0 & EscRegexp-OCode-C1/4 (/7 e.Accum#1/5 )/8 '1'/9 e.Text#1/2 >/1
      {refalrts::icSave, 0, 13, 2},
      {refalrts::icCharLeftSave, 9, static_cast<unsigned char>('1'), 13},
      // closed e.Accum#1 as range 5
      // closed e.Text#1 as range 13(2)
      //DEBUG: e.Accum#1: 5
      //DEBUG: e.Text#1: 2
      {refalrts::icEmptyResult, 0, 0, 0},
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ HalfReuse: (/0 HalfReuse: # TkOctNumber/4 } Tile{ AsIs: e.Accum#1/5 } '1'/10 Tile{ HalfReuse: )/7 } </11 & ReadRegexp/12 Tile{ HalfReuse: (/8 HalfReuse: )/9 AsIs: e.Text#1/13(2) AsIs: >/1 ]] }
      {refalrts::icAllocChar, 0, '1', 10},
      {refalrts::icAllocBracket, 0, refalrts::ibOpenCall, 11},
      {refalrts::icAllocFunc, 0, 0, 12},
      {refalrts::icReinitBracket, 0, refalrts::ibOpenBracket, 0},
      {refalrts::icReinitIdent, 0, 0, 4},
      {refalrts::icReinitBracket, 0, refalrts::ibCloseBracket, 7},
      {refalrts::icReinitBracket, 0, refalrts::ibOpenBracket, 8},
      {refalrts::icReinitBracket, 0, refalrts::ibCloseBracket, 9},
      {refalrts::icPushStack, 0, 0, 1},
      {refalrts::icPushStack, 0, 0, 11},
      {refalrts::icLinkBrackets, 8, 9, 0},
      {refalrts::icLinkBrackets, 0, 7, 0},
      {refalrts::icSetRes, 0, 0, 8},
      {refalrts::icSpliceTile, 11, 12, 0},
      {refalrts::icSpliceTile, 7, 7, 0},
      {refalrts::icSpliceTile, 10, 10, 0},
      {refalrts::icSpliceEVar, 0, 0, 5},
      {refalrts::icNextStep, 0, 0, 0},
      {refalrts::icProfilerStopSentence, 0, 0, 0},
      {refalrts::icOnFailGoTo, +21, 0, 0},
      // ( e.idx ) '2' e.idx
      // </0 & EscRegexp-OCode-C1/4 (/7 e.Accum#1/5 )/8 '2'/9 e.Text#1/2 >/1
      {refalrts::icSave, 0, 13, 2},
      {refalrts::icCharLeftSave, 9, static_cast<unsigned char>('2'), 13},
      // closed e.Accum#1 as range 5
      // closed e.Text#1 as range 13(2)
      //DEBUG: e.Accum#1: 5
      //DEBUG: e.Text#1: 2
      {refalrts::icEmptyResult, 0, 0, 0},
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ HalfReuse: (/0 HalfReuse: # TkOctNumber/4 } Tile{ AsIs: e.Accum#1/5 } '2'/10 Tile{ HalfReuse: )/7 } </11 & ReadRegexp/12 Tile{ HalfReuse: (/8 HalfReuse: )/9 AsIs: e.Text#1/13(2) AsIs: >/1 ]] }
      {refalrts::icAllocChar, 0, '2', 10},
      {refalrts::icAllocBracket, 0, refalrts::ibOpenCall, 11},
      {refalrts::icAllocFunc, 0, 0, 12},
      {refalrts::icReinitBracket, 0, refalrts::ibOpenBracket, 0},
      {refalrts::icReinitIdent, 0, 0, 4},
      {refalrts::icReinitBracket, 0, refalrts::ibCloseBracket, 7},
      {refalrts::icReinitBracket, 0, refalrts::ibOpenBracket, 8},
      {refalrts::icReinitBracket, 0, refalrts::ibCloseBracket, 9},
      {refalrts::icPushStack, 0, 0, 1},
      {refalrts::icPushStack, 0, 0, 11},
      {refalrts::icLinkBrackets, 8, 9, 0},
      {refalrts::icLinkBrackets, 0, 7, 0},
      {refalrts::icSetRes, 0, 0, 8},
      {refalrts::icSpliceTile, 11, 12, 0},
      {refalrts::icSpliceTile, 7, 7, 0},
      {refalrts::icSpliceTile, 10, 10, 0},
      {refalrts::icSpliceEVar, 0, 0, 5},
      {refalrts::icNextStep, 0, 0, 0},
      {refalrts::icProfilerStopSentence, 0, 0, 0},
      {refalrts::icOnFailGoTo, +21, 0, 0},
      // ( e.idx ) '3' e.idx
      // </0 & EscRegexp-OCode-C1/4 (/7 e.Accum#1/5 )/8 '3'/9 e.Text#1/2 >/1
      {refalrts::icSave, 0, 13, 2},
      {refalrts::icCharLeftSave, 9, static_cast<unsigned char>('3'), 13},
      // closed e.Accum#1 as range 5
      // closed e.Text#1 as range 13(2)
      //DEBUG: e.Accum#1: 5
      //DEBUG: e.Text#1: 2
      {refalrts::icEmptyResult, 0, 0, 0},
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ HalfReuse: (/0 HalfReuse: # TkOctNumber/4 } Tile{ AsIs: e.Accum#1/5 } '3'/10 Tile{ HalfReuse: )/7 } </11 & ReadRegexp/12 Tile{ HalfReuse: (/8 HalfReuse: )/9 AsIs: e.Text#1/13(2) AsIs: >/1 ]] }
      {refalrts::icAllocChar, 0, '3', 10},
      {refalrts::icAllocBracket, 0, refalrts::ibOpenCall, 11},
      {refalrts::icAllocFunc, 0, 0, 12},
      {refalrts::icReinitBracket, 0, refalrts::ibOpenBracket, 0},
      {refalrts::icReinitIdent, 0, 0, 4},
      {refalrts::icReinitBracket, 0, refalrts::ibCloseBracket, 7},
      {refalrts::icReinitBracket, 0, refalrts::ibOpenBracket, 8},
      {refalrts::icReinitBracket, 0, refalrts::ibCloseBracket, 9},
      {refalrts::icPushStack, 0, 0, 1},
      {refalrts::icPushStack, 0, 0, 11},
      {refalrts::icLinkBrackets, 8, 9, 0},
      {refalrts::icLinkBrackets, 0, 7, 0},
      {refalrts::icSetRes, 0, 0, 8},
      {refalrts::icSpliceTile, 11, 12, 0},
      {refalrts::icSpliceTile, 7, 7, 0},
      {refalrts::icSpliceTile, 10, 10, 0},
      {refalrts::icSpliceEVar, 0, 0, 5},
      {refalrts::icNextStep, 0, 0, 0},
      {refalrts::icProfilerStopSentence, 0, 0, 0},
      {refalrts::icOnFailGoTo, +21, 0, 0},
      // ( e.idx ) '4' e.idx
      // </0 & EscRegexp-OCode-C1/4 (/7 e.Accum#1/5 )/8 '4'/9 e.Text#1/2 >/1
      {refalrts::icSave, 0, 13, 2},
      {refalrts::icCharLeftSave, 9, static_cast<unsigned char>('4'), 13},
      // closed e.Accum#1 as range 5
      // closed e.Text#1 as range 13(2)
      //DEBUG: e.Accum#1: 5
      //DEBUG: e.Text#1: 2
      {refalrts::icEmptyResult, 0, 0, 0},
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ HalfReuse: (/0 HalfReuse: # TkOctNumber/4 } Tile{ AsIs: e.Accum#1/5 } '4'/10 Tile{ HalfReuse: )/7 } </11 & ReadRegexp/12 Tile{ HalfReuse: (/8 HalfReuse: )/9 AsIs: e.Text#1/13(2) AsIs: >/1 ]] }
      {refalrts::icAllocChar, 0, '4', 10},
      {refalrts::icAllocBracket, 0, refalrts::ibOpenCall, 11},
      {refalrts::icAllocFunc, 0, 0, 12},
      {refalrts::icReinitBracket, 0, refalrts::ibOpenBracket, 0},
      {refalrts::icReinitIdent, 0, 0, 4},
      {refalrts::icReinitBracket, 0, refalrts::ibCloseBracket, 7},
      {refalrts::icReinitBracket, 0, refalrts::ibOpenBracket, 8},
      {refalrts::icReinitBracket, 0, refalrts::ibCloseBracket, 9},
      {refalrts::icPushStack, 0, 0, 1},
      {refalrts::icPushStack, 0, 0, 11},
      {refalrts::icLinkBrackets, 8, 9, 0},
      {refalrts::icLinkBrackets, 0, 7, 0},
      {refalrts::icSetRes, 0, 0, 8},
      {refalrts::icSpliceTile, 11, 12, 0},
      {refalrts::icSpliceTile, 7, 7, 0},
      {refalrts::icSpliceTile, 10, 10, 0},
      {refalrts::icSpliceEVar, 0, 0, 5},
      {refalrts::icNextStep, 0, 0, 0},
      {refalrts::icProfilerStopSentence, 0, 0, 0},
      {refalrts::icOnFailGoTo, +21, 0, 0},
      // ( e.idx ) '5' e.idx
      // </0 & EscRegexp-OCode-C1/4 (/7 e.Accum#1/5 )/8 '5'/9 e.Text#1/2 >/1
      {refalrts::icSave, 0, 13, 2},
      {refalrts::icCharLeftSave, 9, static_cast<unsigned char>('5'), 13},
      // closed e.Accum#1 as range 5
      // closed e.Text#1 as range 13(2)
      //DEBUG: e.Accum#1: 5
      //DEBUG: e.Text#1: 2
      {refalrts::icEmptyResult, 0, 0, 0},
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ HalfReuse: (/0 HalfReuse: # TkOctNumber/4 } Tile{ AsIs: e.Accum#1/5 } '5'/10 Tile{ HalfReuse: )/7 } </11 & ReadRegexp/12 Tile{ HalfReuse: (/8 HalfReuse: )/9 AsIs: e.Text#1/13(2) AsIs: >/1 ]] }
      {refalrts::icAllocChar, 0, '5', 10},
      {refalrts::icAllocBracket, 0, refalrts::ibOpenCall, 11},
      {refalrts::icAllocFunc, 0, 0, 12},
      {refalrts::icReinitBracket, 0, refalrts::ibOpenBracket, 0},
      {refalrts::icReinitIdent, 0, 0, 4},
      {refalrts::icReinitBracket, 0, refalrts::ibCloseBracket, 7},
      {refalrts::icReinitBracket, 0, refalrts::ibOpenBracket, 8},
      {refalrts::icReinitBracket, 0, refalrts::ibCloseBracket, 9},
      {refalrts::icPushStack, 0, 0, 1},
      {refalrts::icPushStack, 0, 0, 11},
      {refalrts::icLinkBrackets, 8, 9, 0},
      {refalrts::icLinkBrackets, 0, 7, 0},
      {refalrts::icSetRes, 0, 0, 8},
      {refalrts::icSpliceTile, 11, 12, 0},
      {refalrts::icSpliceTile, 7, 7, 0},
      {refalrts::icSpliceTile, 10, 10, 0},
      {refalrts::icSpliceEVar, 0, 0, 5},
      {refalrts::icNextStep, 0, 0, 0},
      {refalrts::icProfilerStopSentence, 0, 0, 0},
      {refalrts::icOnFailGoTo, +21, 0, 0},
      // ( e.idx ) '6' e.idx
      // </0 & EscRegexp-OCode-C1/4 (/7 e.Accum#1/5 )/8 '6'/9 e.Text#1/2 >/1
      {refalrts::icSave, 0, 13, 2},
      {refalrts::icCharLeftSave, 9, static_cast<unsigned char>('6'), 13},
      // closed e.Accum#1 as range 5
      // closed e.Text#1 as range 13(2)
      //DEBUG: e.Accum#1: 5
      //DEBUG: e.Text#1: 2
      {refalrts::icEmptyResult, 0, 0, 0},
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ HalfReuse: (/0 HalfReuse: # TkOctNumber/4 } Tile{ AsIs: e.Accum#1/5 } '6'/10 Tile{ HalfReuse: )/7 } </11 & ReadRegexp/12 Tile{ HalfReuse: (/8 HalfReuse: )/9 AsIs: e.Text#1/13(2) AsIs: >/1 ]] }
      {refalrts::icAllocChar, 0, '6', 10},
      {refalrts::icAllocBracket, 0, refalrts::ibOpenCall, 11},
      {refalrts::icAllocFunc, 0, 0, 12},
      {refalrts::icReinitBracket, 0, refalrts::ibOpenBracket, 0},
      {refalrts::icReinitIdent, 0, 0, 4},
      {refalrts::icReinitBracket, 0, refalrts::ibCloseBracket, 7},
      {refalrts::icReinitBracket, 0, refalrts::ibOpenBracket, 8},
      {refalrts::icReinitBracket, 0, refalrts::ibCloseBracket, 9},
      {refalrts::icPushStack, 0, 0, 1},
      {refalrts::icPushStack, 0, 0, 11},
      {refalrts::icLinkBrackets, 8, 9, 0},
      {refalrts::icLinkBrackets, 0, 7, 0},
      {refalrts::icSetRes, 0, 0, 8},
      {refalrts::icSpliceTile, 11, 12, 0},
      {refalrts::icSpliceTile, 7, 7, 0},
      {refalrts::icSpliceTile, 10, 10, 0},
      {refalrts::icSpliceEVar, 0, 0, 5},
      {refalrts::icNextStep, 0, 0, 0},
      {refalrts::icProfilerStopSentence, 0, 0, 0},
      {refalrts::icOnFailGoTo, +21, 0, 0},
      // ( e.idx ) '7' e.idx
      // </0 & EscRegexp-OCode-C1/4 (/7 e.Accum#1/5 )/8 '7'/9 e.Text#1/2 >/1
      {refalrts::icSave, 0, 13, 2},
      {refalrts::icCharLeftSave, 9, static_cast<unsigned char>('7'), 13},
      // closed e.Accum#1 as range 5
      // closed e.Text#1 as range 13(2)
      //DEBUG: e.Accum#1: 5
      //DEBUG: e.Text#1: 2
      {refalrts::icEmptyResult, 0, 0, 0},
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ HalfReuse: (/0 HalfReuse: # TkOctNumber/4 } Tile{ AsIs: e.Accum#1/5 } '7'/10 Tile{ HalfReuse: )/7 } </11 & ReadRegexp/12 Tile{ HalfReuse: (/8 HalfReuse: )/9 AsIs: e.Text#1/13(2) AsIs: >/1 ]] }
      {refalrts::icAllocChar, 0, '7', 10},
      {refalrts::icAllocBracket, 0, refalrts::ibOpenCall, 11},
      {refalrts::icAllocFunc, 0, 0, 12},
      {refalrts::icReinitBracket, 0, refalrts::ibOpenBracket, 0},
      {refalrts::icReinitIdent, 0, 0, 4},
      {refalrts::icReinitBracket, 0, refalrts::ibCloseBracket, 7},
      {refalrts::icReinitBracket, 0, refalrts::ibOpenBracket, 8},
      {refalrts::icReinitBracket, 0, refalrts::ibCloseBracket, 9},
      {refalrts::icPushStack, 0, 0, 1},
      {refalrts::icPushStack, 0, 0, 11},
      {refalrts::icLinkBrackets, 8, 9, 0},
      {refalrts::icLinkBrackets, 0, 7, 0},
      {refalrts::icSetRes, 0, 0, 8},
      {refalrts::icSpliceTile, 11, 12, 0},
      {refalrts::icSpliceTile, 7, 7, 0},
      {refalrts::icSpliceTile, 10, 10, 0},
      {refalrts::icSpliceEVar, 0, 0, 5},
      {refalrts::icNextStep, 0, 0, 0},
      {refalrts::icProfilerStopSentence, 0, 0, 0},
      // ( e.idx ) e.idx
      // </0 & EscRegexp-OCode-C1/4 (/7 e.Accum#1/5 )/8 e.Text#1/2 >/1
      // closed e.Accum#1 as range 5
      // closed e.Text#1 as range 2
      //DEBUG: e.Accum#1: 5
      //DEBUG: e.Text#1: 2
      {refalrts::icEmptyResult, 0, 0, 0},
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ } (/9 # TkOctNumber/10 Tile{ AsIs: e.Accum#1/5 } )/11 Tile{ AsIs: </0 Reuse: & ReadRegexp/4 AsIs: (/7 } Tile{ AsIs: )/8 AsIs: e.Text#1/2 AsIs: >/1 ]] }
      {refalrts::icAllocBracket, 0, refalrts::ibOpenBracket, 9},
      {refalrts::icAllocIdent, 0, 0, 10},
      {refalrts::icAllocBracket, 0, refalrts::ibCloseBracket, 11},
      {refalrts::icUpdateFunc, 0, 0, 4},
      {refalrts::icPushStack, 0, 0, 1},
      {refalrts::icPushStack, 0, 0, 0},
      {refalrts::icLinkBrackets, 7, 8, 0},
      {refalrts::icLinkBrackets, 9, 11, 0},
      {refalrts::icSetRes, 0, 0, 8},
      {refalrts::icSpliceTile, 0, 7, 0},
      {refalrts::icSpliceTile, 11, 11, 0},
      {refalrts::icSpliceEVar, 0, 0, 5},
      {refalrts::icSpliceTile, 9, 10, 0},
      {refalrts::icNextStep, 0, 0, 0},
      {refalrts::icEnd, 0, 0, 0}
    };
  } // namespace scope_EscRegexp_OCode_C1

} // unnamed namespace

namespace /* unnamed */ {
refalrts::RASLFunction descr_EscRegexp_OCode_C1(
  "EscRegexp-OCode-C1",
  scope_EscRegexp_OCode_C1::raa,
  scope_EscRegexp_OCode_C1::functions,
  scope_EscRegexp_OCode_C1::idents,
  scope_EscRegexp_OCode_C1::numbers,
  scope_EscRegexp_OCode_C1::strings,
  scope_EscRegexp_OCode_C1::filename
);
refalrts::RefalFunction& EscRegexp_OCode_C1 = descr_EscRegexp_OCode_C1;

} // unnamed namespace

#else
static refalrts::FnResult func_EscRegexp_OCode_C1(refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  refalrts::this_is_generated_function();
  // issue here memory for vars with 15 elems
  refalrts::Iter context[15];
  refalrts::zeros( context, 15 );
  //FAST GEN: ( e.$ ) e.$
  //GLOBAL GEN: ( e.$ ) e.$
  // </0 & EscRegexp-OCode-C1/4 (/7 e.idxB#0/5 )/8 e.idxT#0/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  context[5] = 0;
  context[6] = 0;
  context[7] = refalrts::brackets_left( context[5], context[6], context[2], context[3] );
  if( ! context[7] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[7], context[8]);
  // closed e.idxB#0 as range 5
  // closed e.idxT#0 as range 2
  do {
    // ( e.idx ) '0' e.idx
    // </0 & EscRegexp-OCode-C1/4 (/7 e.Accum#1/5 )/8 '0'/9 e.Text#1/2 >/1
    context[13] = context[2];
    context[14] = context[3];
    context[9] = refalrts::char_left( '0', context[13], context[14] );
    if( ! context[9] )
      continue;
    // closed e.Accum#1 as range 5
    // closed e.Text#1 as range 13(2)
    //DEBUG: e.Accum#1: 5
    //DEBUG: e.Text#1: 2

    refalrts::reset_allocator();
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ HalfReuse: (/0 HalfReuse: # TkOctNumber/4 } Tile{ AsIs: e.Accum#1/5 } '0'/10 Tile{ HalfReuse: )/7 } </11 & ReadRegexp/12 Tile{ HalfReuse: (/8 HalfReuse: )/9 AsIs: e.Text#1/13(2) AsIs: >/1 ]] }
    if( ! refalrts::alloc_char( context[10], '0' ) )
      return refalrts::cNoMemory;
    if( ! refalrts::alloc_open_call( context[11] ) )
      return refalrts::cNoMemory;
    if( ! refalrts::alloc_name( context[12], & ReadRegexp ) )
      return refalrts::cNoMemory;
    refalrts::reinit_open_bracket( context[0] );
    refalrts::reinit_ident( context[4], & ident_TkOctNumber<int>::name );
    refalrts::reinit_close_bracket( context[7] );
    refalrts::reinit_open_bracket( context[8] );
    refalrts::reinit_close_bracket( context[9] );
    refalrts::push_stack( context[1] );
    refalrts::push_stack( context[11] );
    refalrts::link_brackets( context[8], context[9] );
    refalrts::link_brackets( context[0], context[7] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[8];
    res = refalrts::splice_evar( res, context[11], context[12] );
    res = refalrts::splice_evar( res, context[7], context[7] );
    res = refalrts::splice_evar( res, context[10], context[10] );
    res = refalrts::splice_evar( res, context[5], context[6] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence();

  do {
    // ( e.idx ) '1' e.idx
    // </0 & EscRegexp-OCode-C1/4 (/7 e.Accum#1/5 )/8 '1'/9 e.Text#1/2 >/1
    context[13] = context[2];
    context[14] = context[3];
    context[9] = refalrts::char_left( '1', context[13], context[14] );
    if( ! context[9] )
      continue;
    // closed e.Accum#1 as range 5
    // closed e.Text#1 as range 13(2)
    //DEBUG: e.Accum#1: 5
    //DEBUG: e.Text#1: 2

    refalrts::reset_allocator();
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ HalfReuse: (/0 HalfReuse: # TkOctNumber/4 } Tile{ AsIs: e.Accum#1/5 } '1'/10 Tile{ HalfReuse: )/7 } </11 & ReadRegexp/12 Tile{ HalfReuse: (/8 HalfReuse: )/9 AsIs: e.Text#1/13(2) AsIs: >/1 ]] }
    if( ! refalrts::alloc_char( context[10], '1' ) )
      return refalrts::cNoMemory;
    if( ! refalrts::alloc_open_call( context[11] ) )
      return refalrts::cNoMemory;
    if( ! refalrts::alloc_name( context[12], & ReadRegexp ) )
      return refalrts::cNoMemory;
    refalrts::reinit_open_bracket( context[0] );
    refalrts::reinit_ident( context[4], & ident_TkOctNumber<int>::name );
    refalrts::reinit_close_bracket( context[7] );
    refalrts::reinit_open_bracket( context[8] );
    refalrts::reinit_close_bracket( context[9] );
    refalrts::push_stack( context[1] );
    refalrts::push_stack( context[11] );
    refalrts::link_brackets( context[8], context[9] );
    refalrts::link_brackets( context[0], context[7] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[8];
    res = refalrts::splice_evar( res, context[11], context[12] );
    res = refalrts::splice_evar( res, context[7], context[7] );
    res = refalrts::splice_evar( res, context[10], context[10] );
    res = refalrts::splice_evar( res, context[5], context[6] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence();

  do {
    // ( e.idx ) '2' e.idx
    // </0 & EscRegexp-OCode-C1/4 (/7 e.Accum#1/5 )/8 '2'/9 e.Text#1/2 >/1
    context[13] = context[2];
    context[14] = context[3];
    context[9] = refalrts::char_left( '2', context[13], context[14] );
    if( ! context[9] )
      continue;
    // closed e.Accum#1 as range 5
    // closed e.Text#1 as range 13(2)
    //DEBUG: e.Accum#1: 5
    //DEBUG: e.Text#1: 2

    refalrts::reset_allocator();
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ HalfReuse: (/0 HalfReuse: # TkOctNumber/4 } Tile{ AsIs: e.Accum#1/5 } '2'/10 Tile{ HalfReuse: )/7 } </11 & ReadRegexp/12 Tile{ HalfReuse: (/8 HalfReuse: )/9 AsIs: e.Text#1/13(2) AsIs: >/1 ]] }
    if( ! refalrts::alloc_char( context[10], '2' ) )
      return refalrts::cNoMemory;
    if( ! refalrts::alloc_open_call( context[11] ) )
      return refalrts::cNoMemory;
    if( ! refalrts::alloc_name( context[12], & ReadRegexp ) )
      return refalrts::cNoMemory;
    refalrts::reinit_open_bracket( context[0] );
    refalrts::reinit_ident( context[4], & ident_TkOctNumber<int>::name );
    refalrts::reinit_close_bracket( context[7] );
    refalrts::reinit_open_bracket( context[8] );
    refalrts::reinit_close_bracket( context[9] );
    refalrts::push_stack( context[1] );
    refalrts::push_stack( context[11] );
    refalrts::link_brackets( context[8], context[9] );
    refalrts::link_brackets( context[0], context[7] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[8];
    res = refalrts::splice_evar( res, context[11], context[12] );
    res = refalrts::splice_evar( res, context[7], context[7] );
    res = refalrts::splice_evar( res, context[10], context[10] );
    res = refalrts::splice_evar( res, context[5], context[6] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence();

  do {
    // ( e.idx ) '3' e.idx
    // </0 & EscRegexp-OCode-C1/4 (/7 e.Accum#1/5 )/8 '3'/9 e.Text#1/2 >/1
    context[13] = context[2];
    context[14] = context[3];
    context[9] = refalrts::char_left( '3', context[13], context[14] );
    if( ! context[9] )
      continue;
    // closed e.Accum#1 as range 5
    // closed e.Text#1 as range 13(2)
    //DEBUG: e.Accum#1: 5
    //DEBUG: e.Text#1: 2

    refalrts::reset_allocator();
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ HalfReuse: (/0 HalfReuse: # TkOctNumber/4 } Tile{ AsIs: e.Accum#1/5 } '3'/10 Tile{ HalfReuse: )/7 } </11 & ReadRegexp/12 Tile{ HalfReuse: (/8 HalfReuse: )/9 AsIs: e.Text#1/13(2) AsIs: >/1 ]] }
    if( ! refalrts::alloc_char( context[10], '3' ) )
      return refalrts::cNoMemory;
    if( ! refalrts::alloc_open_call( context[11] ) )
      return refalrts::cNoMemory;
    if( ! refalrts::alloc_name( context[12], & ReadRegexp ) )
      return refalrts::cNoMemory;
    refalrts::reinit_open_bracket( context[0] );
    refalrts::reinit_ident( context[4], & ident_TkOctNumber<int>::name );
    refalrts::reinit_close_bracket( context[7] );
    refalrts::reinit_open_bracket( context[8] );
    refalrts::reinit_close_bracket( context[9] );
    refalrts::push_stack( context[1] );
    refalrts::push_stack( context[11] );
    refalrts::link_brackets( context[8], context[9] );
    refalrts::link_brackets( context[0], context[7] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[8];
    res = refalrts::splice_evar( res, context[11], context[12] );
    res = refalrts::splice_evar( res, context[7], context[7] );
    res = refalrts::splice_evar( res, context[10], context[10] );
    res = refalrts::splice_evar( res, context[5], context[6] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence();

  do {
    // ( e.idx ) '4' e.idx
    // </0 & EscRegexp-OCode-C1/4 (/7 e.Accum#1/5 )/8 '4'/9 e.Text#1/2 >/1
    context[13] = context[2];
    context[14] = context[3];
    context[9] = refalrts::char_left( '4', context[13], context[14] );
    if( ! context[9] )
      continue;
    // closed e.Accum#1 as range 5
    // closed e.Text#1 as range 13(2)
    //DEBUG: e.Accum#1: 5
    //DEBUG: e.Text#1: 2

    refalrts::reset_allocator();
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ HalfReuse: (/0 HalfReuse: # TkOctNumber/4 } Tile{ AsIs: e.Accum#1/5 } '4'/10 Tile{ HalfReuse: )/7 } </11 & ReadRegexp/12 Tile{ HalfReuse: (/8 HalfReuse: )/9 AsIs: e.Text#1/13(2) AsIs: >/1 ]] }
    if( ! refalrts::alloc_char( context[10], '4' ) )
      return refalrts::cNoMemory;
    if( ! refalrts::alloc_open_call( context[11] ) )
      return refalrts::cNoMemory;
    if( ! refalrts::alloc_name( context[12], & ReadRegexp ) )
      return refalrts::cNoMemory;
    refalrts::reinit_open_bracket( context[0] );
    refalrts::reinit_ident( context[4], & ident_TkOctNumber<int>::name );
    refalrts::reinit_close_bracket( context[7] );
    refalrts::reinit_open_bracket( context[8] );
    refalrts::reinit_close_bracket( context[9] );
    refalrts::push_stack( context[1] );
    refalrts::push_stack( context[11] );
    refalrts::link_brackets( context[8], context[9] );
    refalrts::link_brackets( context[0], context[7] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[8];
    res = refalrts::splice_evar( res, context[11], context[12] );
    res = refalrts::splice_evar( res, context[7], context[7] );
    res = refalrts::splice_evar( res, context[10], context[10] );
    res = refalrts::splice_evar( res, context[5], context[6] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence();

  do {
    // ( e.idx ) '5' e.idx
    // </0 & EscRegexp-OCode-C1/4 (/7 e.Accum#1/5 )/8 '5'/9 e.Text#1/2 >/1
    context[13] = context[2];
    context[14] = context[3];
    context[9] = refalrts::char_left( '5', context[13], context[14] );
    if( ! context[9] )
      continue;
    // closed e.Accum#1 as range 5
    // closed e.Text#1 as range 13(2)
    //DEBUG: e.Accum#1: 5
    //DEBUG: e.Text#1: 2

    refalrts::reset_allocator();
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ HalfReuse: (/0 HalfReuse: # TkOctNumber/4 } Tile{ AsIs: e.Accum#1/5 } '5'/10 Tile{ HalfReuse: )/7 } </11 & ReadRegexp/12 Tile{ HalfReuse: (/8 HalfReuse: )/9 AsIs: e.Text#1/13(2) AsIs: >/1 ]] }
    if( ! refalrts::alloc_char( context[10], '5' ) )
      return refalrts::cNoMemory;
    if( ! refalrts::alloc_open_call( context[11] ) )
      return refalrts::cNoMemory;
    if( ! refalrts::alloc_name( context[12], & ReadRegexp ) )
      return refalrts::cNoMemory;
    refalrts::reinit_open_bracket( context[0] );
    refalrts::reinit_ident( context[4], & ident_TkOctNumber<int>::name );
    refalrts::reinit_close_bracket( context[7] );
    refalrts::reinit_open_bracket( context[8] );
    refalrts::reinit_close_bracket( context[9] );
    refalrts::push_stack( context[1] );
    refalrts::push_stack( context[11] );
    refalrts::link_brackets( context[8], context[9] );
    refalrts::link_brackets( context[0], context[7] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[8];
    res = refalrts::splice_evar( res, context[11], context[12] );
    res = refalrts::splice_evar( res, context[7], context[7] );
    res = refalrts::splice_evar( res, context[10], context[10] );
    res = refalrts::splice_evar( res, context[5], context[6] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence();

  do {
    // ( e.idx ) '6' e.idx
    // </0 & EscRegexp-OCode-C1/4 (/7 e.Accum#1/5 )/8 '6'/9 e.Text#1/2 >/1
    context[13] = context[2];
    context[14] = context[3];
    context[9] = refalrts::char_left( '6', context[13], context[14] );
    if( ! context[9] )
      continue;
    // closed e.Accum#1 as range 5
    // closed e.Text#1 as range 13(2)
    //DEBUG: e.Accum#1: 5
    //DEBUG: e.Text#1: 2

    refalrts::reset_allocator();
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ HalfReuse: (/0 HalfReuse: # TkOctNumber/4 } Tile{ AsIs: e.Accum#1/5 } '6'/10 Tile{ HalfReuse: )/7 } </11 & ReadRegexp/12 Tile{ HalfReuse: (/8 HalfReuse: )/9 AsIs: e.Text#1/13(2) AsIs: >/1 ]] }
    if( ! refalrts::alloc_char( context[10], '6' ) )
      return refalrts::cNoMemory;
    if( ! refalrts::alloc_open_call( context[11] ) )
      return refalrts::cNoMemory;
    if( ! refalrts::alloc_name( context[12], & ReadRegexp ) )
      return refalrts::cNoMemory;
    refalrts::reinit_open_bracket( context[0] );
    refalrts::reinit_ident( context[4], & ident_TkOctNumber<int>::name );
    refalrts::reinit_close_bracket( context[7] );
    refalrts::reinit_open_bracket( context[8] );
    refalrts::reinit_close_bracket( context[9] );
    refalrts::push_stack( context[1] );
    refalrts::push_stack( context[11] );
    refalrts::link_brackets( context[8], context[9] );
    refalrts::link_brackets( context[0], context[7] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[8];
    res = refalrts::splice_evar( res, context[11], context[12] );
    res = refalrts::splice_evar( res, context[7], context[7] );
    res = refalrts::splice_evar( res, context[10], context[10] );
    res = refalrts::splice_evar( res, context[5], context[6] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence();

  do {
    // ( e.idx ) '7' e.idx
    // </0 & EscRegexp-OCode-C1/4 (/7 e.Accum#1/5 )/8 '7'/9 e.Text#1/2 >/1
    context[13] = context[2];
    context[14] = context[3];
    context[9] = refalrts::char_left( '7', context[13], context[14] );
    if( ! context[9] )
      continue;
    // closed e.Accum#1 as range 5
    // closed e.Text#1 as range 13(2)
    //DEBUG: e.Accum#1: 5
    //DEBUG: e.Text#1: 2

    refalrts::reset_allocator();
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ HalfReuse: (/0 HalfReuse: # TkOctNumber/4 } Tile{ AsIs: e.Accum#1/5 } '7'/10 Tile{ HalfReuse: )/7 } </11 & ReadRegexp/12 Tile{ HalfReuse: (/8 HalfReuse: )/9 AsIs: e.Text#1/13(2) AsIs: >/1 ]] }
    if( ! refalrts::alloc_char( context[10], '7' ) )
      return refalrts::cNoMemory;
    if( ! refalrts::alloc_open_call( context[11] ) )
      return refalrts::cNoMemory;
    if( ! refalrts::alloc_name( context[12], & ReadRegexp ) )
      return refalrts::cNoMemory;
    refalrts::reinit_open_bracket( context[0] );
    refalrts::reinit_ident( context[4], & ident_TkOctNumber<int>::name );
    refalrts::reinit_close_bracket( context[7] );
    refalrts::reinit_open_bracket( context[8] );
    refalrts::reinit_close_bracket( context[9] );
    refalrts::push_stack( context[1] );
    refalrts::push_stack( context[11] );
    refalrts::link_brackets( context[8], context[9] );
    refalrts::link_brackets( context[0], context[7] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[8];
    res = refalrts::splice_evar( res, context[11], context[12] );
    res = refalrts::splice_evar( res, context[7], context[7] );
    res = refalrts::splice_evar( res, context[10], context[10] );
    res = refalrts::splice_evar( res, context[5], context[6] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence();

  // ( e.idx ) e.idx
  // </0 & EscRegexp-OCode-C1/4 (/7 e.Accum#1/5 )/8 e.Text#1/2 >/1
  // closed e.Accum#1 as range 5
  // closed e.Text#1 as range 2
  //DEBUG: e.Accum#1: 5
  //DEBUG: e.Text#1: 2

  refalrts::reset_allocator();
  //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ } (/9 # TkOctNumber/10 Tile{ AsIs: e.Accum#1/5 } )/11 Tile{ AsIs: </0 Reuse: & ReadRegexp/4 AsIs: (/7 } Tile{ AsIs: )/8 AsIs: e.Text#1/2 AsIs: >/1 ]] }
  if( ! refalrts::alloc_open_bracket( context[9] ) )
    return refalrts::cNoMemory;
  if( ! refalrts::alloc_ident( context[10], & ident_TkOctNumber<int>::name ) )
    return refalrts::cNoMemory;
  if( ! refalrts::alloc_close_bracket( context[11] ) )
    return refalrts::cNoMemory;
  refalrts::update_name( context[4], & ReadRegexp );
  refalrts::push_stack( context[1] );
  refalrts::push_stack( context[0] );
  refalrts::link_brackets( context[7], context[8] );
  refalrts::link_brackets( context[9], context[11] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[8];
  res = refalrts::splice_evar( res, context[0], context[7] );
  res = refalrts::splice_evar( res, context[11], context[11] );
  res = refalrts::splice_evar( res, context[5], context[6] );
  res = refalrts::splice_evar( res, context[9], context[10] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

namespace /* unnamed */ {
refalrts::RefalNativeFunction descr_EscRegexp_OCode_C1(func_EscRegexp_OCode_C1, "EscRegexp-OCode-C1");
refalrts::RefalFunction& EscRegexp_OCode_C1 = descr_EscRegexp_OCode_C1;

} // unnamed namespace

#endif
#ifdef INTERPRET
namespace /* unnamed */ {
  namespace scope_EscGroup {
    static const char *filename = "Flex-Lexer.cpp";
    static refalrts::RefalFunction *functions[] = {
      & ReadGroup,
      & EscGroup_OCode,
      & EscGroup_XCode
    };
    static const refalrts::RefalIdentifier idents[] = {
      & ident_TokenError<int>::name,
      & ident_TChar<int>::name,
      & ident_TGenericEscChar<int>::name
    };
    using refalrts::numbers;
    static const refalrts::StringItem strings[] = {
      {"nexpected EOF in Regex", 22},
      {"Bad escaped symbol", 18}
    };
    static const refalrts::RASLCommand raa[] = {
      {refalrts::icThisIsGeneratedFunction, 0, 0, 0},
      {refalrts::icLoadConstants, 0, 0, 0},
      {refalrts::icReserveBacktrackStack, 17, 0, 0},
      {refalrts::icIssueMemory, 17, 0, 0},
      //FAST GEN: e.$
      //GLOBAL GEN: ( e.$ ) e.$
      // </0 & EscGroup/4 (/7 e.idxB#0/5 )/8 e.idxT#0/2 >/1
      {refalrts::icInitB0_Lite, 0, 0, 0},
      {refalrts::icCallSaveLeft, 0, 2, 0},
      {refalrts::icBracketLeftSave, 0, 5, 2},
      // closed e.idxB#0 as range 5
      // closed e.idxT#0 as range 2
      {refalrts::icOnFailGoTo, +21, 0, 0},
      // ( e.idx ) '\\' e.idx
      // </0 & EscGroup/4 (/7 e.Accum#1/5 )/8 '\\'/9 e.Text#1/2 >/1
      {refalrts::icSave, 0, 15, 2},
      {refalrts::icCharLeftSave, 9, static_cast<unsigned char>('\\'), 15},
      // closed e.Accum#1 as range 5
      // closed e.Text#1 as range 15(2)
      //DEBUG: e.Accum#1: 5
      //DEBUG: e.Text#1: 2
      {refalrts::icEmptyResult, 0, 0, 0},
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ HalfReuse: (/0 HalfReuse: # TGenericEscChar/4 } Tile{ AsIs: e.Accum#1/5 } '\\'/10 Tile{ HalfReuse: )/7 } </11 & ReadGroup/12 Tile{ HalfReuse: (/8 HalfReuse: )/9 AsIs: e.Text#1/15(2) AsIs: >/1 ]] }
      {refalrts::icAllocChar, 0, '\\', 10},
      {refalrts::icAllocBracket, 0, refalrts::ibOpenCall, 11},
      {refalrts::icAllocFunc, 0, 0, 12},
      {refalrts::icReinitBracket, 0, refalrts::ibOpenBracket, 0},
      {refalrts::icReinitIdent, 0, 2, 4},
      {refalrts::icReinitBracket, 0, refalrts::ibCloseBracket, 7},
      {refalrts::icReinitBracket, 0, refalrts::ibOpenBracket, 8},
      {refalrts::icReinitBracket, 0, refalrts::ibCloseBracket, 9},
      {refalrts::icPushStack, 0, 0, 1},
      {refalrts::icPushStack, 0, 0, 11},
      {refalrts::icLinkBrackets, 8, 9, 0},
      {refalrts::icLinkBrackets, 0, 7, 0},
      {refalrts::icSetRes, 0, 0, 8},
      {refalrts::icSpliceTile, 11, 12, 0},
      {refalrts::icSpliceTile, 7, 7, 0},
      {refalrts::icSpliceTile, 10, 10, 0},
      {refalrts::icSpliceEVar, 0, 0, 5},
      {refalrts::icNextStep, 0, 0, 0},
      {refalrts::icProfilerStopSentence, 0, 0, 0},
      {refalrts::icOnFailGoTo, +21, 0, 0},
      // ( e.idx ) 'n' e.idx
      // </0 & EscGroup/4 (/7 e.Accum#1/5 )/8 'n'/9 e.Text#1/2 >/1
      {refalrts::icSave, 0, 15, 2},
      {refalrts::icCharLeftSave, 9, static_cast<unsigned char>('n'), 15},
      // closed e.Accum#1 as range 5
      // closed e.Text#1 as range 15(2)
      //DEBUG: e.Accum#1: 5
      //DEBUG: e.Text#1: 2
      {refalrts::icEmptyResult, 0, 0, 0},
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ HalfReuse: (/0 HalfReuse: # TGenericEscChar/4 } Tile{ AsIs: e.Accum#1/5 } 'n'/10 Tile{ HalfReuse: )/7 } </11 & ReadGroup/12 Tile{ HalfReuse: (/8 HalfReuse: )/9 AsIs: e.Text#1/15(2) AsIs: >/1 ]] }
      {refalrts::icAllocChar, 0, 'n', 10},
      {refalrts::icAllocBracket, 0, refalrts::ibOpenCall, 11},
      {refalrts::icAllocFunc, 0, 0, 12},
      {refalrts::icReinitBracket, 0, refalrts::ibOpenBracket, 0},
      {refalrts::icReinitIdent, 0, 2, 4},
      {refalrts::icReinitBracket, 0, refalrts::ibCloseBracket, 7},
      {refalrts::icReinitBracket, 0, refalrts::ibOpenBracket, 8},
      {refalrts::icReinitBracket, 0, refalrts::ibCloseBracket, 9},
      {refalrts::icPushStack, 0, 0, 1},
      {refalrts::icPushStack, 0, 0, 11},
      {refalrts::icLinkBrackets, 8, 9, 0},
      {refalrts::icLinkBrackets, 0, 7, 0},
      {refalrts::icSetRes, 0, 0, 8},
      {refalrts::icSpliceTile, 11, 12, 0},
      {refalrts::icSpliceTile, 7, 7, 0},
      {refalrts::icSpliceTile, 10, 10, 0},
      {refalrts::icSpliceEVar, 0, 0, 5},
      {refalrts::icNextStep, 0, 0, 0},
      {refalrts::icProfilerStopSentence, 0, 0, 0},
      {refalrts::icOnFailGoTo, +21, 0, 0},
      // ( e.idx ) 't' e.idx
      // </0 & EscGroup/4 (/7 e.Accum#1/5 )/8 't'/9 e.Text#1/2 >/1
      {refalrts::icSave, 0, 15, 2},
      {refalrts::icCharLeftSave, 9, static_cast<unsigned char>('t'), 15},
      // closed e.Accum#1 as range 5
      // closed e.Text#1 as range 15(2)
      //DEBUG: e.Accum#1: 5
      //DEBUG: e.Text#1: 2
      {refalrts::icEmptyResult, 0, 0, 0},
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ HalfReuse: (/0 HalfReuse: # TGenericEscChar/4 } Tile{ AsIs: e.Accum#1/5 } 't'/10 Tile{ HalfReuse: )/7 } </11 & ReadGroup/12 Tile{ HalfReuse: (/8 HalfReuse: )/9 AsIs: e.Text#1/15(2) AsIs: >/1 ]] }
      {refalrts::icAllocChar, 0, 't', 10},
      {refalrts::icAllocBracket, 0, refalrts::ibOpenCall, 11},
      {refalrts::icAllocFunc, 0, 0, 12},
      {refalrts::icReinitBracket, 0, refalrts::ibOpenBracket, 0},
      {refalrts::icReinitIdent, 0, 2, 4},
      {refalrts::icReinitBracket, 0, refalrts::ibCloseBracket, 7},
      {refalrts::icReinitBracket, 0, refalrts::ibOpenBracket, 8},
      {refalrts::icReinitBracket, 0, refalrts::ibCloseBracket, 9},
      {refalrts::icPushStack, 0, 0, 1},
      {refalrts::icPushStack, 0, 0, 11},
      {refalrts::icLinkBrackets, 8, 9, 0},
      {refalrts::icLinkBrackets, 0, 7, 0},
      {refalrts::icSetRes, 0, 0, 8},
      {refalrts::icSpliceTile, 11, 12, 0},
      {refalrts::icSpliceTile, 7, 7, 0},
      {refalrts::icSpliceTile, 10, 10, 0},
      {refalrts::icSpliceEVar, 0, 0, 5},
      {refalrts::icNextStep, 0, 0, 0},
      {refalrts::icProfilerStopSentence, 0, 0, 0},
      {refalrts::icOnFailGoTo, +21, 0, 0},
      // ( e.idx ) 'r' e.idx
      // </0 & EscGroup/4 (/7 e.Accum#1/5 )/8 'r'/9 e.Text#1/2 >/1
      {refalrts::icSave, 0, 15, 2},
      {refalrts::icCharLeftSave, 9, static_cast<unsigned char>('r'), 15},
      // closed e.Accum#1 as range 5
      // closed e.Text#1 as range 15(2)
      //DEBUG: e.Accum#1: 5
      //DEBUG: e.Text#1: 2
      {refalrts::icEmptyResult, 0, 0, 0},
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ HalfReuse: (/0 HalfReuse: # TGenericEscChar/4 } Tile{ AsIs: e.Accum#1/5 } 'r'/10 Tile{ HalfReuse: )/7 } </11 & ReadGroup/12 Tile{ HalfReuse: (/8 HalfReuse: )/9 AsIs: e.Text#1/15(2) AsIs: >/1 ]] }
      {refalrts::icAllocChar, 0, 'r', 10},
      {refalrts::icAllocBracket, 0, refalrts::ibOpenCall, 11},
      {refalrts::icAllocFunc, 0, 0, 12},
      {refalrts::icReinitBracket, 0, refalrts::ibOpenBracket, 0},
      {refalrts::icReinitIdent, 0, 2, 4},
      {refalrts::icReinitBracket, 0, refalrts::ibCloseBracket, 7},
      {refalrts::icReinitBracket, 0, refalrts::ibOpenBracket, 8},
      {refalrts::icReinitBracket, 0, refalrts::ibCloseBracket, 9},
      {refalrts::icPushStack, 0, 0, 1},
      {refalrts::icPushStack, 0, 0, 11},
      {refalrts::icLinkBrackets, 8, 9, 0},
      {refalrts::icLinkBrackets, 0, 7, 0},
      {refalrts::icSetRes, 0, 0, 8},
      {refalrts::icSpliceTile, 11, 12, 0},
      {refalrts::icSpliceTile, 7, 7, 0},
      {refalrts::icSpliceTile, 10, 10, 0},
      {refalrts::icSpliceEVar, 0, 0, 5},
      {refalrts::icNextStep, 0, 0, 0},
      {refalrts::icProfilerStopSentence, 0, 0, 0},
      {refalrts::icOnFailGoTo, +21, 0, 0},
      // ( e.idx ) ']' e.idx
      // </0 & EscGroup/4 (/7 e.Accum#1/5 )/8 ']'/9 e.Text#1/2 >/1
      {refalrts::icSave, 0, 15, 2},
      {refalrts::icCharLeftSave, 9, static_cast<unsigned char>(']'), 15},
      // closed e.Accum#1 as range 5
      // closed e.Text#1 as range 15(2)
      //DEBUG: e.Accum#1: 5
      //DEBUG: e.Text#1: 2
      {refalrts::icEmptyResult, 0, 0, 0},
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ HalfReuse: (/0 HalfReuse: # TChar/4 } Tile{ AsIs: e.Accum#1/5 } ']'/10 Tile{ HalfReuse: )/7 } </11 & ReadGroup/12 Tile{ HalfReuse: (/8 HalfReuse: )/9 AsIs: e.Text#1/15(2) AsIs: >/1 ]] }
      {refalrts::icAllocChar, 0, ']', 10},
      {refalrts::icAllocBracket, 0, refalrts::ibOpenCall, 11},
      {refalrts::icAllocFunc, 0, 0, 12},
      {refalrts::icReinitBracket, 0, refalrts::ibOpenBracket, 0},
      {refalrts::icReinitIdent, 0, 1, 4},
      {refalrts::icReinitBracket, 0, refalrts::ibCloseBracket, 7},
      {refalrts::icReinitBracket, 0, refalrts::ibOpenBracket, 8},
      {refalrts::icReinitBracket, 0, refalrts::ibCloseBracket, 9},
      {refalrts::icPushStack, 0, 0, 1},
      {refalrts::icPushStack, 0, 0, 11},
      {refalrts::icLinkBrackets, 8, 9, 0},
      {refalrts::icLinkBrackets, 0, 7, 0},
      {refalrts::icSetRes, 0, 0, 8},
      {refalrts::icSpliceTile, 11, 12, 0},
      {refalrts::icSpliceTile, 7, 7, 0},
      {refalrts::icSpliceTile, 10, 10, 0},
      {refalrts::icSpliceEVar, 0, 0, 5},
      {refalrts::icNextStep, 0, 0, 0},
      {refalrts::icProfilerStopSentence, 0, 0, 0},
      {refalrts::icOnFailGoTo, +21, 0, 0},
      // ( e.idx ) '-' e.idx
      // </0 & EscGroup/4 (/7 e.Accum#1/5 )/8 '-'/9 e.Text#1/2 >/1
      {refalrts::icSave, 0, 15, 2},
      {refalrts::icCharLeftSave, 9, static_cast<unsigned char>('-'), 15},
      // closed e.Accum#1 as range 5
      // closed e.Text#1 as range 15(2)
      //DEBUG: e.Accum#1: 5
      //DEBUG: e.Text#1: 2
      {refalrts::icEmptyResult, 0, 0, 0},
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ HalfReuse: (/0 HalfReuse: # TChar/4 } Tile{ AsIs: e.Accum#1/5 } '-'/10 Tile{ HalfReuse: )/7 } </11 & ReadGroup/12 Tile{ HalfReuse: (/8 HalfReuse: )/9 AsIs: e.Text#1/15(2) AsIs: >/1 ]] }
      {refalrts::icAllocChar, 0, '-', 10},
      {refalrts::icAllocBracket, 0, refalrts::ibOpenCall, 11},
      {refalrts::icAllocFunc, 0, 0, 12},
      {refalrts::icReinitBracket, 0, refalrts::ibOpenBracket, 0},
      {refalrts::icReinitIdent, 0, 1, 4},
      {refalrts::icReinitBracket, 0, refalrts::ibCloseBracket, 7},
      {refalrts::icReinitBracket, 0, refalrts::ibOpenBracket, 8},
      {refalrts::icReinitBracket, 0, refalrts::ibCloseBracket, 9},
      {refalrts::icPushStack, 0, 0, 1},
      {refalrts::icPushStack, 0, 0, 11},
      {refalrts::icLinkBrackets, 8, 9, 0},
      {refalrts::icLinkBrackets, 0, 7, 0},
      {refalrts::icSetRes, 0, 0, 8},
      {refalrts::icSpliceTile, 11, 12, 0},
      {refalrts::icSpliceTile, 7, 7, 0},
      {refalrts::icSpliceTile, 10, 10, 0},
      {refalrts::icSpliceEVar, 0, 0, 5},
      {refalrts::icNextStep, 0, 0, 0},
      {refalrts::icProfilerStopSentence, 0, 0, 0},
      {refalrts::icOnFailGoTo, +12, 0, 0},
      // ( e.idx ) 'x' e.idx
      // </0 & EscGroup/4 (/7 e.Accum#1/5 )/8 'x'/9 e.Text#1/2 >/1
      {refalrts::icSave, 0, 15, 2},
      {refalrts::icCharLeftSave, 9, static_cast<unsigned char>('x'), 15},
      // closed e.Accum#1 as range 5
      // closed e.Text#1 as range 15(2)
      //DEBUG: e.Accum#1: 5
      //DEBUG: e.Text#1: 2
      {refalrts::icEmptyResult, 0, 0, 0},
      //TRASH: {REMOVED TILE} (/7 e.Accum#1/5 {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 Reuse: & EscGroup-XCode/4 } Tile{ HalfReuse: (/8 HalfReuse: )/9 AsIs: e.Text#1/15(2) AsIs: >/1 ]] }
      {refalrts::icUpdateFunc, 0, 2, 4},
      {refalrts::icReinitBracket, 0, refalrts::ibOpenBracket, 8},
      {refalrts::icReinitBracket, 0, refalrts::ibCloseBracket, 9},
      {refalrts::icPushStack, 0, 0, 1},
      {refalrts::icPushStack, 0, 0, 0},
      {refalrts::icLinkBrackets, 8, 9, 0},
      {refalrts::icSetRes, 0, 0, 8},
      {refalrts::icTrash, 0, 0, 4},
      {refalrts::icNextStep, 0, 0, 0},
      {refalrts::icProfilerStopSentence, 0, 0, 0},
      {refalrts::icOnFailGoTo, +12, 0, 0},
      // ( e.idx ) 'X' e.idx
      // </0 & EscGroup/4 (/7 e.Accum#1/5 )/8 'X'/9 e.Text#1/2 >/1
      {refalrts::icSave, 0, 15, 2},
      {refalrts::icCharLeftSave, 9, static_cast<unsigned char>('X'), 15},
      // closed e.Accum#1 as range 5
      // closed e.Text#1 as range 15(2)
      //DEBUG: e.Accum#1: 5
      //DEBUG: e.Text#1: 2
      {refalrts::icEmptyResult, 0, 0, 0},
      //TRASH: {REMOVED TILE} (/7 e.Accum#1/5 {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 Reuse: & EscGroup-XCode/4 } Tile{ HalfReuse: (/8 HalfReuse: )/9 AsIs: e.Text#1/15(2) AsIs: >/1 ]] }
      {refalrts::icUpdateFunc, 0, 2, 4},
      {refalrts::icReinitBracket, 0, refalrts::ibOpenBracket, 8},
      {refalrts::icReinitBracket, 0, refalrts::ibCloseBracket, 9},
      {refalrts::icPushStack, 0, 0, 1},
      {refalrts::icPushStack, 0, 0, 0},
      {refalrts::icLinkBrackets, 8, 9, 0},
      {refalrts::icSetRes, 0, 0, 8},
      {refalrts::icTrash, 0, 0, 4},
      {refalrts::icNextStep, 0, 0, 0},
      {refalrts::icProfilerStopSentence, 0, 0, 0},
      {refalrts::icOnFailGoTo, +10, 0, 0},
      // ( e.idx ) '0' e.idx
      // </0 & EscGroup/4 (/7 e.Accum#1/5 )/8 '0'/9 e.Text#1/2 >/1
      {refalrts::icSave, 0, 15, 2},
      {refalrts::icCharLeftSave, 9, static_cast<unsigned char>('0'), 15},
      // closed e.Accum#1 as range 5
      // closed e.Text#1 as range 15(2)
      //DEBUG: e.Accum#1: 5
      //DEBUG: e.Text#1: 2
      {refalrts::icEmptyResult, 0, 0, 0},
      //TRASH: {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 Reuse: & EscGroup-OCode/4 AsIs: (/7 AsIs: e.Accum#1/5 HalfReuse: '0'/8 HalfReuse: )/9 AsIs: e.Text#1/15(2) AsIs: >/1 ]] }
      {refalrts::icUpdateFunc, 0, 1, 4},
      {refalrts::icReinitChar, 0, '0', 8},
      {refalrts::icReinitBracket, 0, refalrts::ibCloseBracket, 9},
      {refalrts::icPushStack, 0, 0, 1},
      {refalrts::icPushStack, 0, 0, 0},
      {refalrts::icLinkBrackets, 7, 9, 0},
      {refalrts::icNextStep, 0, 0, 0},
      {refalrts::icProfilerStopSentence, 0, 0, 0},
      {refalrts::icOnFailGoTo, +10, 0, 0},
      // ( e.idx ) '1' e.idx
      // </0 & EscGroup/4 (/7 e.Accum#1/5 )/8 '1'/9 e.Text#1/2 >/1
      {refalrts::icSave, 0, 15, 2},
      {refalrts::icCharLeftSave, 9, static_cast<unsigned char>('1'), 15},
      // closed e.Accum#1 as range 5
      // closed e.Text#1 as range 15(2)
      //DEBUG: e.Accum#1: 5
      //DEBUG: e.Text#1: 2
      {refalrts::icEmptyResult, 0, 0, 0},
      //TRASH: {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 Reuse: & EscGroup-OCode/4 AsIs: (/7 AsIs: e.Accum#1/5 HalfReuse: '1'/8 HalfReuse: )/9 AsIs: e.Text#1/15(2) AsIs: >/1 ]] }
      {refalrts::icUpdateFunc, 0, 1, 4},
      {refalrts::icReinitChar, 0, '1', 8},
      {refalrts::icReinitBracket, 0, refalrts::ibCloseBracket, 9},
      {refalrts::icPushStack, 0, 0, 1},
      {refalrts::icPushStack, 0, 0, 0},
      {refalrts::icLinkBrackets, 7, 9, 0},
      {refalrts::icNextStep, 0, 0, 0},
      {refalrts::icProfilerStopSentence, 0, 0, 0},
      {refalrts::icOnFailGoTo, +10, 0, 0},
      // ( e.idx ) '2' e.idx
      // </0 & EscGroup/4 (/7 e.Accum#1/5 )/8 '2'/9 e.Text#1/2 >/1
      {refalrts::icSave, 0, 15, 2},
      {refalrts::icCharLeftSave, 9, static_cast<unsigned char>('2'), 15},
      // closed e.Accum#1 as range 5
      // closed e.Text#1 as range 15(2)
      //DEBUG: e.Accum#1: 5
      //DEBUG: e.Text#1: 2
      {refalrts::icEmptyResult, 0, 0, 0},
      //TRASH: {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 Reuse: & EscGroup-OCode/4 AsIs: (/7 AsIs: e.Accum#1/5 HalfReuse: '2'/8 HalfReuse: )/9 AsIs: e.Text#1/15(2) AsIs: >/1 ]] }
      {refalrts::icUpdateFunc, 0, 1, 4},
      {refalrts::icReinitChar, 0, '2', 8},
      {refalrts::icReinitBracket, 0, refalrts::ibCloseBracket, 9},
      {refalrts::icPushStack, 0, 0, 1},
      {refalrts::icPushStack, 0, 0, 0},
      {refalrts::icLinkBrackets, 7, 9, 0},
      {refalrts::icNextStep, 0, 0, 0},
      {refalrts::icProfilerStopSentence, 0, 0, 0},
      {refalrts::icOnFailGoTo, +10, 0, 0},
      // ( e.idx ) '3' e.idx
      // </0 & EscGroup/4 (/7 e.Accum#1/5 )/8 '3'/9 e.Text#1/2 >/1
      {refalrts::icSave, 0, 15, 2},
      {refalrts::icCharLeftSave, 9, static_cast<unsigned char>('3'), 15},
      // closed e.Accum#1 as range 5
      // closed e.Text#1 as range 15(2)
      //DEBUG: e.Accum#1: 5
      //DEBUG: e.Text#1: 2
      {refalrts::icEmptyResult, 0, 0, 0},
      //TRASH: {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 Reuse: & EscGroup-OCode/4 AsIs: (/7 AsIs: e.Accum#1/5 HalfReuse: '3'/8 HalfReuse: )/9 AsIs: e.Text#1/15(2) AsIs: >/1 ]] }
      {refalrts::icUpdateFunc, 0, 1, 4},
      {refalrts::icReinitChar, 0, '3', 8},
      {refalrts::icReinitBracket, 0, refalrts::ibCloseBracket, 9},
      {refalrts::icPushStack, 0, 0, 1},
      {refalrts::icPushStack, 0, 0, 0},
      {refalrts::icLinkBrackets, 7, 9, 0},
      {refalrts::icNextStep, 0, 0, 0},
      {refalrts::icProfilerStopSentence, 0, 0, 0},
      {refalrts::icOnFailGoTo, +10, 0, 0},
      // ( e.idx ) '4' e.idx
      // </0 & EscGroup/4 (/7 e.Accum#1/5 )/8 '4'/9 e.Text#1/2 >/1
      {refalrts::icSave, 0, 15, 2},
      {refalrts::icCharLeftSave, 9, static_cast<unsigned char>('4'), 15},
      // closed e.Accum#1 as range 5
      // closed e.Text#1 as range 15(2)
      //DEBUG: e.Accum#1: 5
      //DEBUG: e.Text#1: 2
      {refalrts::icEmptyResult, 0, 0, 0},
      //TRASH: {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 Reuse: & EscGroup-OCode/4 AsIs: (/7 AsIs: e.Accum#1/5 HalfReuse: '4'/8 HalfReuse: )/9 AsIs: e.Text#1/15(2) AsIs: >/1 ]] }
      {refalrts::icUpdateFunc, 0, 1, 4},
      {refalrts::icReinitChar, 0, '4', 8},
      {refalrts::icReinitBracket, 0, refalrts::ibCloseBracket, 9},
      {refalrts::icPushStack, 0, 0, 1},
      {refalrts::icPushStack, 0, 0, 0},
      {refalrts::icLinkBrackets, 7, 9, 0},
      {refalrts::icNextStep, 0, 0, 0},
      {refalrts::icProfilerStopSentence, 0, 0, 0},
      {refalrts::icOnFailGoTo, +10, 0, 0},
      // ( e.idx ) '5' e.idx
      // </0 & EscGroup/4 (/7 e.Accum#1/5 )/8 '5'/9 e.Text#1/2 >/1
      {refalrts::icSave, 0, 15, 2},
      {refalrts::icCharLeftSave, 9, static_cast<unsigned char>('5'), 15},
      // closed e.Accum#1 as range 5
      // closed e.Text#1 as range 15(2)
      //DEBUG: e.Accum#1: 5
      //DEBUG: e.Text#1: 2
      {refalrts::icEmptyResult, 0, 0, 0},
      //TRASH: {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 Reuse: & EscGroup-OCode/4 AsIs: (/7 AsIs: e.Accum#1/5 HalfReuse: '5'/8 HalfReuse: )/9 AsIs: e.Text#1/15(2) AsIs: >/1 ]] }
      {refalrts::icUpdateFunc, 0, 1, 4},
      {refalrts::icReinitChar, 0, '5', 8},
      {refalrts::icReinitBracket, 0, refalrts::ibCloseBracket, 9},
      {refalrts::icPushStack, 0, 0, 1},
      {refalrts::icPushStack, 0, 0, 0},
      {refalrts::icLinkBrackets, 7, 9, 0},
      {refalrts::icNextStep, 0, 0, 0},
      {refalrts::icProfilerStopSentence, 0, 0, 0},
      {refalrts::icOnFailGoTo, +10, 0, 0},
      // ( e.idx ) '6' e.idx
      // </0 & EscGroup/4 (/7 e.Accum#1/5 )/8 '6'/9 e.Text#1/2 >/1
      {refalrts::icSave, 0, 15, 2},
      {refalrts::icCharLeftSave, 9, static_cast<unsigned char>('6'), 15},
      // closed e.Accum#1 as range 5
      // closed e.Text#1 as range 15(2)
      //DEBUG: e.Accum#1: 5
      //DEBUG: e.Text#1: 2
      {refalrts::icEmptyResult, 0, 0, 0},
      //TRASH: {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 Reuse: & EscGroup-OCode/4 AsIs: (/7 AsIs: e.Accum#1/5 HalfReuse: '6'/8 HalfReuse: )/9 AsIs: e.Text#1/15(2) AsIs: >/1 ]] }
      {refalrts::icUpdateFunc, 0, 1, 4},
      {refalrts::icReinitChar, 0, '6', 8},
      {refalrts::icReinitBracket, 0, refalrts::ibCloseBracket, 9},
      {refalrts::icPushStack, 0, 0, 1},
      {refalrts::icPushStack, 0, 0, 0},
      {refalrts::icLinkBrackets, 7, 9, 0},
      {refalrts::icNextStep, 0, 0, 0},
      {refalrts::icProfilerStopSentence, 0, 0, 0},
      {refalrts::icOnFailGoTo, +10, 0, 0},
      // ( e.idx ) '7' e.idx
      // </0 & EscGroup/4 (/7 e.Accum#1/5 )/8 '7'/9 e.Text#1/2 >/1
      {refalrts::icSave, 0, 15, 2},
      {refalrts::icCharLeftSave, 9, static_cast<unsigned char>('7'), 15},
      // closed e.Accum#1 as range 5
      // closed e.Text#1 as range 15(2)
      //DEBUG: e.Accum#1: 5
      //DEBUG: e.Text#1: 2
      {refalrts::icEmptyResult, 0, 0, 0},
      //TRASH: {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 Reuse: & EscGroup-OCode/4 AsIs: (/7 AsIs: e.Accum#1/5 HalfReuse: '7'/8 HalfReuse: )/9 AsIs: e.Text#1/15(2) AsIs: >/1 ]] }
      {refalrts::icUpdateFunc, 0, 1, 4},
      {refalrts::icReinitChar, 0, '7', 8},
      {refalrts::icReinitBracket, 0, refalrts::ibCloseBracket, 9},
      {refalrts::icPushStack, 0, 0, 1},
      {refalrts::icPushStack, 0, 0, 0},
      {refalrts::icLinkBrackets, 7, 9, 0},
      {refalrts::icNextStep, 0, 0, 0},
      {refalrts::icProfilerStopSentence, 0, 0, 0},
      {refalrts::icOnFailGoTo, +20, 0, 0},
      // ( e.idx ) s.idx e.idx
      // </0 & EscGroup/4 (/7 e.Accum#1/5 )/8 s.Any#1/9 e.Text#1/2 >/1
      // closed e.Accum#1 as range 5
      {refalrts::icSave, 0, 15, 2},
      {refalrts::icsVarLeft, 0, 9, 15},
      // closed e.Text#1 as range 15(2)
      //DEBUG: e.Accum#1: 5
      //DEBUG: s.Any#1: 9
      //DEBUG: e.Text#1: 2
      {refalrts::icEmptyResult, 0, 0, 0},
      //TRASH: {REMOVED TILE} {REMOVED TILE} e.Accum#1/5 {REMOVED TILE} s.Any#1/9 {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ } (/10 # TokenError/11"Bad escaped symbol"/12 Tile{ AsIs: )/8 } Tile{ AsIs: </0 Reuse: & ReadGroup/4 AsIs: (/7 } )/14 Tile{ AsIs: e.Text#1/15(2) } Tile{ AsIs: >/1 ]] }
      {refalrts::icAllocBracket, 0, refalrts::ibOpenBracket, 10},
      {refalrts::icAllocIdent, 0, 0, 11},
      {refalrts::icAllocString, 0, 1, 12},
      {refalrts::icAllocBracket, 0, refalrts::ibCloseBracket, 14},
      {refalrts::icUpdateFunc, 0, 0, 4},
      {refalrts::icPushStack, 0, 0, 1},
      {refalrts::icPushStack, 0, 0, 0},
      {refalrts::icLinkBrackets, 7, 14, 0},
      {refalrts::icLinkBrackets, 10, 8, 0},
      {refalrts::icSetRes, 0, 0, 1},
      {refalrts::icSpliceEVar, 0, 0, 15},
      {refalrts::icSpliceTile, 14, 14, 0},
      {refalrts::icSpliceTile, 0, 7, 0},
      {refalrts::icSpliceTile, 8, 8, 0},
      {refalrts::icSpliceTile, 10, 13, 0},
      {refalrts::icTrashLeftEdge, 0, 0, 0},
      {refalrts::icNextStep, 0, 0, 0},
      {refalrts::icProfilerStopSentence, 0, 0, 0},
      // ( e.idx )
      // </0 & EscGroup/4 (/7 e.Accum#1/5 )/8 >/1
      {refalrts::icEmpty, 0, 0, 2},
      // closed e.Accum#1 as range 5
      //DEBUG: e.Accum#1: 5
      {refalrts::icEmptyResult, 0, 0, 0},
      //TRASH: {REMOVED TILE} e.Accum#1/5 {REMOVED TILE}
      //RESULT: Tile{ [[ HalfReuse: (/0 HalfReuse: # TokenError/4 HalfReuse: 'U'/7 }"nexpected EOF in Regex"/9 Tile{ HalfReuse: 'p'/8 HalfReuse: )/1 ]] }
      {refalrts::icAllocString, 0, 0, 9},
      {refalrts::icReinitBracket, 0, refalrts::ibOpenBracket, 0},
      {refalrts::icReinitIdent, 0, 0, 4},
      {refalrts::icReinitChar, 0, 'U', 7},
      {refalrts::icReinitChar, 0, 'p', 8},
      {refalrts::icReinitBracket, 0, refalrts::ibCloseBracket, 1},
      {refalrts::icLinkBrackets, 0, 1, 0},
      {refalrts::icSetRes, 0, 0, 8},
      {refalrts::icSpliceTile, 9, 10, 0},
      {refalrts::icTrash, 0, 0, 7},
      {refalrts::icNextStep, 0, 0, 0},
      {refalrts::icEnd, 0, 0, 0}
    };
  } // namespace scope_EscGroup

} // unnamed namespace

namespace /* unnamed */ {
refalrts::RASLFunction descr_EscGroup(
  "EscGroup",
  scope_EscGroup::raa,
  scope_EscGroup::functions,
  scope_EscGroup::idents,
  scope_EscGroup::numbers,
  scope_EscGroup::strings,
  scope_EscGroup::filename
);
refalrts::RefalFunction& EscGroup = descr_EscGroup;

} // unnamed namespace

#else
static refalrts::FnResult func_EscGroup(refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  refalrts::this_is_generated_function();
  // issue here memory for vars with 17 elems
  refalrts::Iter context[17];
  refalrts::zeros( context, 17 );
  //FAST GEN: e.$
  //GLOBAL GEN: ( e.$ ) e.$
  // </0 & EscGroup/4 (/7 e.idxB#0/5 )/8 e.idxT#0/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  context[5] = 0;
  context[6] = 0;
  context[7] = refalrts::brackets_left( context[5], context[6], context[2], context[3] );
  if( ! context[7] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[7], context[8]);
  // closed e.idxB#0 as range 5
  // closed e.idxT#0 as range 2
  do {
    // ( e.idx ) '\\' e.idx
    // </0 & EscGroup/4 (/7 e.Accum#1/5 )/8 '\\'/9 e.Text#1/2 >/1
    context[15] = context[2];
    context[16] = context[3];
    context[9] = refalrts::char_left( '\\', context[15], context[16] );
    if( ! context[9] )
      continue;
    // closed e.Accum#1 as range 5
    // closed e.Text#1 as range 15(2)
    //DEBUG: e.Accum#1: 5
    //DEBUG: e.Text#1: 2

    refalrts::reset_allocator();
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ HalfReuse: (/0 HalfReuse: # TGenericEscChar/4 } Tile{ AsIs: e.Accum#1/5 } '\\'/10 Tile{ HalfReuse: )/7 } </11 & ReadGroup/12 Tile{ HalfReuse: (/8 HalfReuse: )/9 AsIs: e.Text#1/15(2) AsIs: >/1 ]] }
    if( ! refalrts::alloc_char( context[10], '\\' ) )
      return refalrts::cNoMemory;
    if( ! refalrts::alloc_open_call( context[11] ) )
      return refalrts::cNoMemory;
    if( ! refalrts::alloc_name( context[12], & ReadGroup ) )
      return refalrts::cNoMemory;
    refalrts::reinit_open_bracket( context[0] );
    refalrts::reinit_ident( context[4], & ident_TGenericEscChar<int>::name );
    refalrts::reinit_close_bracket( context[7] );
    refalrts::reinit_open_bracket( context[8] );
    refalrts::reinit_close_bracket( context[9] );
    refalrts::push_stack( context[1] );
    refalrts::push_stack( context[11] );
    refalrts::link_brackets( context[8], context[9] );
    refalrts::link_brackets( context[0], context[7] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[8];
    res = refalrts::splice_evar( res, context[11], context[12] );
    res = refalrts::splice_evar( res, context[7], context[7] );
    res = refalrts::splice_evar( res, context[10], context[10] );
    res = refalrts::splice_evar( res, context[5], context[6] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence();

  do {
    // ( e.idx ) 'n' e.idx
    // </0 & EscGroup/4 (/7 e.Accum#1/5 )/8 'n'/9 e.Text#1/2 >/1
    context[15] = context[2];
    context[16] = context[3];
    context[9] = refalrts::char_left( 'n', context[15], context[16] );
    if( ! context[9] )
      continue;
    // closed e.Accum#1 as range 5
    // closed e.Text#1 as range 15(2)
    //DEBUG: e.Accum#1: 5
    //DEBUG: e.Text#1: 2

    refalrts::reset_allocator();
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ HalfReuse: (/0 HalfReuse: # TGenericEscChar/4 } Tile{ AsIs: e.Accum#1/5 } 'n'/10 Tile{ HalfReuse: )/7 } </11 & ReadGroup/12 Tile{ HalfReuse: (/8 HalfReuse: )/9 AsIs: e.Text#1/15(2) AsIs: >/1 ]] }
    if( ! refalrts::alloc_char( context[10], 'n' ) )
      return refalrts::cNoMemory;
    if( ! refalrts::alloc_open_call( context[11] ) )
      return refalrts::cNoMemory;
    if( ! refalrts::alloc_name( context[12], & ReadGroup ) )
      return refalrts::cNoMemory;
    refalrts::reinit_open_bracket( context[0] );
    refalrts::reinit_ident( context[4], & ident_TGenericEscChar<int>::name );
    refalrts::reinit_close_bracket( context[7] );
    refalrts::reinit_open_bracket( context[8] );
    refalrts::reinit_close_bracket( context[9] );
    refalrts::push_stack( context[1] );
    refalrts::push_stack( context[11] );
    refalrts::link_brackets( context[8], context[9] );
    refalrts::link_brackets( context[0], context[7] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[8];
    res = refalrts::splice_evar( res, context[11], context[12] );
    res = refalrts::splice_evar( res, context[7], context[7] );
    res = refalrts::splice_evar( res, context[10], context[10] );
    res = refalrts::splice_evar( res, context[5], context[6] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence();

  do {
    // ( e.idx ) 't' e.idx
    // </0 & EscGroup/4 (/7 e.Accum#1/5 )/8 't'/9 e.Text#1/2 >/1
    context[15] = context[2];
    context[16] = context[3];
    context[9] = refalrts::char_left( 't', context[15], context[16] );
    if( ! context[9] )
      continue;
    // closed e.Accum#1 as range 5
    // closed e.Text#1 as range 15(2)
    //DEBUG: e.Accum#1: 5
    //DEBUG: e.Text#1: 2

    refalrts::reset_allocator();
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ HalfReuse: (/0 HalfReuse: # TGenericEscChar/4 } Tile{ AsIs: e.Accum#1/5 } 't'/10 Tile{ HalfReuse: )/7 } </11 & ReadGroup/12 Tile{ HalfReuse: (/8 HalfReuse: )/9 AsIs: e.Text#1/15(2) AsIs: >/1 ]] }
    if( ! refalrts::alloc_char( context[10], 't' ) )
      return refalrts::cNoMemory;
    if( ! refalrts::alloc_open_call( context[11] ) )
      return refalrts::cNoMemory;
    if( ! refalrts::alloc_name( context[12], & ReadGroup ) )
      return refalrts::cNoMemory;
    refalrts::reinit_open_bracket( context[0] );
    refalrts::reinit_ident( context[4], & ident_TGenericEscChar<int>::name );
    refalrts::reinit_close_bracket( context[7] );
    refalrts::reinit_open_bracket( context[8] );
    refalrts::reinit_close_bracket( context[9] );
    refalrts::push_stack( context[1] );
    refalrts::push_stack( context[11] );
    refalrts::link_brackets( context[8], context[9] );
    refalrts::link_brackets( context[0], context[7] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[8];
    res = refalrts::splice_evar( res, context[11], context[12] );
    res = refalrts::splice_evar( res, context[7], context[7] );
    res = refalrts::splice_evar( res, context[10], context[10] );
    res = refalrts::splice_evar( res, context[5], context[6] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence();

  do {
    // ( e.idx ) 'r' e.idx
    // </0 & EscGroup/4 (/7 e.Accum#1/5 )/8 'r'/9 e.Text#1/2 >/1
    context[15] = context[2];
    context[16] = context[3];
    context[9] = refalrts::char_left( 'r', context[15], context[16] );
    if( ! context[9] )
      continue;
    // closed e.Accum#1 as range 5
    // closed e.Text#1 as range 15(2)
    //DEBUG: e.Accum#1: 5
    //DEBUG: e.Text#1: 2

    refalrts::reset_allocator();
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ HalfReuse: (/0 HalfReuse: # TGenericEscChar/4 } Tile{ AsIs: e.Accum#1/5 } 'r'/10 Tile{ HalfReuse: )/7 } </11 & ReadGroup/12 Tile{ HalfReuse: (/8 HalfReuse: )/9 AsIs: e.Text#1/15(2) AsIs: >/1 ]] }
    if( ! refalrts::alloc_char( context[10], 'r' ) )
      return refalrts::cNoMemory;
    if( ! refalrts::alloc_open_call( context[11] ) )
      return refalrts::cNoMemory;
    if( ! refalrts::alloc_name( context[12], & ReadGroup ) )
      return refalrts::cNoMemory;
    refalrts::reinit_open_bracket( context[0] );
    refalrts::reinit_ident( context[4], & ident_TGenericEscChar<int>::name );
    refalrts::reinit_close_bracket( context[7] );
    refalrts::reinit_open_bracket( context[8] );
    refalrts::reinit_close_bracket( context[9] );
    refalrts::push_stack( context[1] );
    refalrts::push_stack( context[11] );
    refalrts::link_brackets( context[8], context[9] );
    refalrts::link_brackets( context[0], context[7] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[8];
    res = refalrts::splice_evar( res, context[11], context[12] );
    res = refalrts::splice_evar( res, context[7], context[7] );
    res = refalrts::splice_evar( res, context[10], context[10] );
    res = refalrts::splice_evar( res, context[5], context[6] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence();

  do {
    // ( e.idx ) ']' e.idx
    // </0 & EscGroup/4 (/7 e.Accum#1/5 )/8 ']'/9 e.Text#1/2 >/1
    context[15] = context[2];
    context[16] = context[3];
    context[9] = refalrts::char_left( ']', context[15], context[16] );
    if( ! context[9] )
      continue;
    // closed e.Accum#1 as range 5
    // closed e.Text#1 as range 15(2)
    //DEBUG: e.Accum#1: 5
    //DEBUG: e.Text#1: 2

    refalrts::reset_allocator();
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ HalfReuse: (/0 HalfReuse: # TChar/4 } Tile{ AsIs: e.Accum#1/5 } ']'/10 Tile{ HalfReuse: )/7 } </11 & ReadGroup/12 Tile{ HalfReuse: (/8 HalfReuse: )/9 AsIs: e.Text#1/15(2) AsIs: >/1 ]] }
    if( ! refalrts::alloc_char( context[10], ']' ) )
      return refalrts::cNoMemory;
    if( ! refalrts::alloc_open_call( context[11] ) )
      return refalrts::cNoMemory;
    if( ! refalrts::alloc_name( context[12], & ReadGroup ) )
      return refalrts::cNoMemory;
    refalrts::reinit_open_bracket( context[0] );
    refalrts::reinit_ident( context[4], & ident_TChar<int>::name );
    refalrts::reinit_close_bracket( context[7] );
    refalrts::reinit_open_bracket( context[8] );
    refalrts::reinit_close_bracket( context[9] );
    refalrts::push_stack( context[1] );
    refalrts::push_stack( context[11] );
    refalrts::link_brackets( context[8], context[9] );
    refalrts::link_brackets( context[0], context[7] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[8];
    res = refalrts::splice_evar( res, context[11], context[12] );
    res = refalrts::splice_evar( res, context[7], context[7] );
    res = refalrts::splice_evar( res, context[10], context[10] );
    res = refalrts::splice_evar( res, context[5], context[6] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence();

  do {
    // ( e.idx ) '-' e.idx
    // </0 & EscGroup/4 (/7 e.Accum#1/5 )/8 '-'/9 e.Text#1/2 >/1
    context[15] = context[2];
    context[16] = context[3];
    context[9] = refalrts::char_left( '-', context[15], context[16] );
    if( ! context[9] )
      continue;
    // closed e.Accum#1 as range 5
    // closed e.Text#1 as range 15(2)
    //DEBUG: e.Accum#1: 5
    //DEBUG: e.Text#1: 2

    refalrts::reset_allocator();
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ HalfReuse: (/0 HalfReuse: # TChar/4 } Tile{ AsIs: e.Accum#1/5 } '-'/10 Tile{ HalfReuse: )/7 } </11 & ReadGroup/12 Tile{ HalfReuse: (/8 HalfReuse: )/9 AsIs: e.Text#1/15(2) AsIs: >/1 ]] }
    if( ! refalrts::alloc_char( context[10], '-' ) )
      return refalrts::cNoMemory;
    if( ! refalrts::alloc_open_call( context[11] ) )
      return refalrts::cNoMemory;
    if( ! refalrts::alloc_name( context[12], & ReadGroup ) )
      return refalrts::cNoMemory;
    refalrts::reinit_open_bracket( context[0] );
    refalrts::reinit_ident( context[4], & ident_TChar<int>::name );
    refalrts::reinit_close_bracket( context[7] );
    refalrts::reinit_open_bracket( context[8] );
    refalrts::reinit_close_bracket( context[9] );
    refalrts::push_stack( context[1] );
    refalrts::push_stack( context[11] );
    refalrts::link_brackets( context[8], context[9] );
    refalrts::link_brackets( context[0], context[7] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[8];
    res = refalrts::splice_evar( res, context[11], context[12] );
    res = refalrts::splice_evar( res, context[7], context[7] );
    res = refalrts::splice_evar( res, context[10], context[10] );
    res = refalrts::splice_evar( res, context[5], context[6] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence();

  do {
    // ( e.idx ) 'x' e.idx
    // </0 & EscGroup/4 (/7 e.Accum#1/5 )/8 'x'/9 e.Text#1/2 >/1
    context[15] = context[2];
    context[16] = context[3];
    context[9] = refalrts::char_left( 'x', context[15], context[16] );
    if( ! context[9] )
      continue;
    // closed e.Accum#1 as range 5
    // closed e.Text#1 as range 15(2)
    //DEBUG: e.Accum#1: 5
    //DEBUG: e.Text#1: 2

    refalrts::reset_allocator();
    //TRASH: {REMOVED TILE} (/7 e.Accum#1/5 {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 Reuse: & EscGroup-XCode/4 } Tile{ HalfReuse: (/8 HalfReuse: )/9 AsIs: e.Text#1/15(2) AsIs: >/1 ]] }
    refalrts::update_name( context[4], & EscGroup_XCode );
    refalrts::reinit_open_bracket( context[8] );
    refalrts::reinit_close_bracket( context[9] );
    refalrts::push_stack( context[1] );
    refalrts::push_stack( context[0] );
    refalrts::link_brackets( context[8], context[9] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[8];
    refalrts::use( res );
    refalrts::splice_to_freelist_open( context[4], res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence();

  do {
    // ( e.idx ) 'X' e.idx
    // </0 & EscGroup/4 (/7 e.Accum#1/5 )/8 'X'/9 e.Text#1/2 >/1
    context[15] = context[2];
    context[16] = context[3];
    context[9] = refalrts::char_left( 'X', context[15], context[16] );
    if( ! context[9] )
      continue;
    // closed e.Accum#1 as range 5
    // closed e.Text#1 as range 15(2)
    //DEBUG: e.Accum#1: 5
    //DEBUG: e.Text#1: 2

    refalrts::reset_allocator();
    //TRASH: {REMOVED TILE} (/7 e.Accum#1/5 {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 Reuse: & EscGroup-XCode/4 } Tile{ HalfReuse: (/8 HalfReuse: )/9 AsIs: e.Text#1/15(2) AsIs: >/1 ]] }
    refalrts::update_name( context[4], & EscGroup_XCode );
    refalrts::reinit_open_bracket( context[8] );
    refalrts::reinit_close_bracket( context[9] );
    refalrts::push_stack( context[1] );
    refalrts::push_stack( context[0] );
    refalrts::link_brackets( context[8], context[9] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[8];
    refalrts::use( res );
    refalrts::splice_to_freelist_open( context[4], res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence();

  do {
    // ( e.idx ) '0' e.idx
    // </0 & EscGroup/4 (/7 e.Accum#1/5 )/8 '0'/9 e.Text#1/2 >/1
    context[15] = context[2];
    context[16] = context[3];
    context[9] = refalrts::char_left( '0', context[15], context[16] );
    if( ! context[9] )
      continue;
    // closed e.Accum#1 as range 5
    // closed e.Text#1 as range 15(2)
    //DEBUG: e.Accum#1: 5
    //DEBUG: e.Text#1: 2

    refalrts::reset_allocator();
    //TRASH: {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 Reuse: & EscGroup-OCode/4 AsIs: (/7 AsIs: e.Accum#1/5 HalfReuse: '0'/8 HalfReuse: )/9 AsIs: e.Text#1/15(2) AsIs: >/1 ]] }
    refalrts::update_name( context[4], & EscGroup_OCode );
    refalrts::reinit_char( context[8], '0' );
    refalrts::reinit_close_bracket( context[9] );
    refalrts::push_stack( context[1] );
    refalrts::push_stack( context[0] );
    refalrts::link_brackets( context[7], context[9] );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence();

  do {
    // ( e.idx ) '1' e.idx
    // </0 & EscGroup/4 (/7 e.Accum#1/5 )/8 '1'/9 e.Text#1/2 >/1
    context[15] = context[2];
    context[16] = context[3];
    context[9] = refalrts::char_left( '1', context[15], context[16] );
    if( ! context[9] )
      continue;
    // closed e.Accum#1 as range 5
    // closed e.Text#1 as range 15(2)
    //DEBUG: e.Accum#1: 5
    //DEBUG: e.Text#1: 2

    refalrts::reset_allocator();
    //TRASH: {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 Reuse: & EscGroup-OCode/4 AsIs: (/7 AsIs: e.Accum#1/5 HalfReuse: '1'/8 HalfReuse: )/9 AsIs: e.Text#1/15(2) AsIs: >/1 ]] }
    refalrts::update_name( context[4], & EscGroup_OCode );
    refalrts::reinit_char( context[8], '1' );
    refalrts::reinit_close_bracket( context[9] );
    refalrts::push_stack( context[1] );
    refalrts::push_stack( context[0] );
    refalrts::link_brackets( context[7], context[9] );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence();

  do {
    // ( e.idx ) '2' e.idx
    // </0 & EscGroup/4 (/7 e.Accum#1/5 )/8 '2'/9 e.Text#1/2 >/1
    context[15] = context[2];
    context[16] = context[3];
    context[9] = refalrts::char_left( '2', context[15], context[16] );
    if( ! context[9] )
      continue;
    // closed e.Accum#1 as range 5
    // closed e.Text#1 as range 15(2)
    //DEBUG: e.Accum#1: 5
    //DEBUG: e.Text#1: 2

    refalrts::reset_allocator();
    //TRASH: {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 Reuse: & EscGroup-OCode/4 AsIs: (/7 AsIs: e.Accum#1/5 HalfReuse: '2'/8 HalfReuse: )/9 AsIs: e.Text#1/15(2) AsIs: >/1 ]] }
    refalrts::update_name( context[4], & EscGroup_OCode );
    refalrts::reinit_char( context[8], '2' );
    refalrts::reinit_close_bracket( context[9] );
    refalrts::push_stack( context[1] );
    refalrts::push_stack( context[0] );
    refalrts::link_brackets( context[7], context[9] );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence();

  do {
    // ( e.idx ) '3' e.idx
    // </0 & EscGroup/4 (/7 e.Accum#1/5 )/8 '3'/9 e.Text#1/2 >/1
    context[15] = context[2];
    context[16] = context[3];
    context[9] = refalrts::char_left( '3', context[15], context[16] );
    if( ! context[9] )
      continue;
    // closed e.Accum#1 as range 5
    // closed e.Text#1 as range 15(2)
    //DEBUG: e.Accum#1: 5
    //DEBUG: e.Text#1: 2

    refalrts::reset_allocator();
    //TRASH: {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 Reuse: & EscGroup-OCode/4 AsIs: (/7 AsIs: e.Accum#1/5 HalfReuse: '3'/8 HalfReuse: )/9 AsIs: e.Text#1/15(2) AsIs: >/1 ]] }
    refalrts::update_name( context[4], & EscGroup_OCode );
    refalrts::reinit_char( context[8], '3' );
    refalrts::reinit_close_bracket( context[9] );
    refalrts::push_stack( context[1] );
    refalrts::push_stack( context[0] );
    refalrts::link_brackets( context[7], context[9] );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence();

  do {
    // ( e.idx ) '4' e.idx
    // </0 & EscGroup/4 (/7 e.Accum#1/5 )/8 '4'/9 e.Text#1/2 >/1
    context[15] = context[2];
    context[16] = context[3];
    context[9] = refalrts::char_left( '4', context[15], context[16] );
    if( ! context[9] )
      continue;
    // closed e.Accum#1 as range 5
    // closed e.Text#1 as range 15(2)
    //DEBUG: e.Accum#1: 5
    //DEBUG: e.Text#1: 2

    refalrts::reset_allocator();
    //TRASH: {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 Reuse: & EscGroup-OCode/4 AsIs: (/7 AsIs: e.Accum#1/5 HalfReuse: '4'/8 HalfReuse: )/9 AsIs: e.Text#1/15(2) AsIs: >/1 ]] }
    refalrts::update_name( context[4], & EscGroup_OCode );
    refalrts::reinit_char( context[8], '4' );
    refalrts::reinit_close_bracket( context[9] );
    refalrts::push_stack( context[1] );
    refalrts::push_stack( context[0] );
    refalrts::link_brackets( context[7], context[9] );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence();

  do {
    // ( e.idx ) '5' e.idx
    // </0 & EscGroup/4 (/7 e.Accum#1/5 )/8 '5'/9 e.Text#1/2 >/1
    context[15] = context[2];
    context[16] = context[3];
    context[9] = refalrts::char_left( '5', context[15], context[16] );
    if( ! context[9] )
      continue;
    // closed e.Accum#1 as range 5
    // closed e.Text#1 as range 15(2)
    //DEBUG: e.Accum#1: 5
    //DEBUG: e.Text#1: 2

    refalrts::reset_allocator();
    //TRASH: {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 Reuse: & EscGroup-OCode/4 AsIs: (/7 AsIs: e.Accum#1/5 HalfReuse: '5'/8 HalfReuse: )/9 AsIs: e.Text#1/15(2) AsIs: >/1 ]] }
    refalrts::update_name( context[4], & EscGroup_OCode );
    refalrts::reinit_char( context[8], '5' );
    refalrts::reinit_close_bracket( context[9] );
    refalrts::push_stack( context[1] );
    refalrts::push_stack( context[0] );
    refalrts::link_brackets( context[7], context[9] );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence();

  do {
    // ( e.idx ) '6' e.idx
    // </0 & EscGroup/4 (/7 e.Accum#1/5 )/8 '6'/9 e.Text#1/2 >/1
    context[15] = context[2];
    context[16] = context[3];
    context[9] = refalrts::char_left( '6', context[15], context[16] );
    if( ! context[9] )
      continue;
    // closed e.Accum#1 as range 5
    // closed e.Text#1 as range 15(2)
    //DEBUG: e.Accum#1: 5
    //DEBUG: e.Text#1: 2

    refalrts::reset_allocator();
    //TRASH: {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 Reuse: & EscGroup-OCode/4 AsIs: (/7 AsIs: e.Accum#1/5 HalfReuse: '6'/8 HalfReuse: )/9 AsIs: e.Text#1/15(2) AsIs: >/1 ]] }
    refalrts::update_name( context[4], & EscGroup_OCode );
    refalrts::reinit_char( context[8], '6' );
    refalrts::reinit_close_bracket( context[9] );
    refalrts::push_stack( context[1] );
    refalrts::push_stack( context[0] );
    refalrts::link_brackets( context[7], context[9] );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence();

  do {
    // ( e.idx ) '7' e.idx
    // </0 & EscGroup/4 (/7 e.Accum#1/5 )/8 '7'/9 e.Text#1/2 >/1
    context[15] = context[2];
    context[16] = context[3];
    context[9] = refalrts::char_left( '7', context[15], context[16] );
    if( ! context[9] )
      continue;
    // closed e.Accum#1 as range 5
    // closed e.Text#1 as range 15(2)
    //DEBUG: e.Accum#1: 5
    //DEBUG: e.Text#1: 2

    refalrts::reset_allocator();
    //TRASH: {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 Reuse: & EscGroup-OCode/4 AsIs: (/7 AsIs: e.Accum#1/5 HalfReuse: '7'/8 HalfReuse: )/9 AsIs: e.Text#1/15(2) AsIs: >/1 ]] }
    refalrts::update_name( context[4], & EscGroup_OCode );
    refalrts::reinit_char( context[8], '7' );
    refalrts::reinit_close_bracket( context[9] );
    refalrts::push_stack( context[1] );
    refalrts::push_stack( context[0] );
    refalrts::link_brackets( context[7], context[9] );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence();

  do {
    // ( e.idx ) s.idx e.idx
    // </0 & EscGroup/4 (/7 e.Accum#1/5 )/8 s.Any#1/9 e.Text#1/2 >/1
    // closed e.Accum#1 as range 5
    context[15] = context[2];
    context[16] = context[3];
    if( ! refalrts::svar_left( context[9], context[15], context[16] ) )
      continue;
    // closed e.Text#1 as range 15(2)
    //DEBUG: e.Accum#1: 5
    //DEBUG: s.Any#1: 9
    //DEBUG: e.Text#1: 2

    refalrts::reset_allocator();
    //TRASH: {REMOVED TILE} {REMOVED TILE} e.Accum#1/5 {REMOVED TILE} s.Any#1/9 {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ } (/10 # TokenError/11"Bad escaped symbol"/12 Tile{ AsIs: )/8 } Tile{ AsIs: </0 Reuse: & ReadGroup/4 AsIs: (/7 } )/14 Tile{ AsIs: e.Text#1/15(2) } Tile{ AsIs: >/1 ]] }
    if( ! refalrts::alloc_open_bracket( context[10] ) )
      return refalrts::cNoMemory;
    if( ! refalrts::alloc_ident( context[11], & ident_TokenError<int>::name ) )
      return refalrts::cNoMemory;
    if( ! refalrts::alloc_chars( context[12], context[13], "Bad escaped symbol", 18 ) )
      return refalrts::cNoMemory;
    if( ! refalrts::alloc_close_bracket( context[14] ) )
      return refalrts::cNoMemory;
    refalrts::update_name( context[4], & ReadGroup );
    refalrts::push_stack( context[1] );
    refalrts::push_stack( context[0] );
    refalrts::link_brackets( context[7], context[14] );
    refalrts::link_brackets( context[10], context[8] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    res = refalrts::splice_evar( res, context[15], context[16] );
    res = refalrts::splice_evar( res, context[14], context[14] );
    res = refalrts::splice_evar( res, context[0], context[7] );
    res = refalrts::splice_evar( res, context[8], context[8] );
    res = refalrts::splice_evar( res, context[10], context[13] );
    refalrts::use( res );
    refalrts::splice_to_freelist_open( trash_prev, res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence();

  // ( e.idx )
  // </0 & EscGroup/4 (/7 e.Accum#1/5 )/8 >/1
  if( ! refalrts::empty_seq( context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  // closed e.Accum#1 as range 5
  //DEBUG: e.Accum#1: 5

  refalrts::reset_allocator();
  //TRASH: {REMOVED TILE} e.Accum#1/5 {REMOVED TILE}
  //RESULT: Tile{ [[ HalfReuse: (/0 HalfReuse: # TokenError/4 HalfReuse: 'U'/7 }"nexpected EOF in Regex"/9 Tile{ HalfReuse: 'p'/8 HalfReuse: )/1 ]] }
  if( ! refalrts::alloc_chars( context[9], context[10], "nexpected EOF in Regex", 22 ) )
    return refalrts::cNoMemory;
  refalrts::reinit_open_bracket( context[0] );
  refalrts::reinit_ident( context[4], & ident_TokenError<int>::name );
  refalrts::reinit_char( context[7], 'U' );
  refalrts::reinit_char( context[8], 'p' );
  refalrts::reinit_close_bracket( context[1] );
  refalrts::link_brackets( context[0], context[1] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[8];
  res = refalrts::splice_evar( res, context[9], context[10] );
  refalrts::use( res );
  refalrts::splice_to_freelist_open( context[7], res );
  return refalrts::cSuccess;
}

namespace /* unnamed */ {
refalrts::RefalNativeFunction descr_EscGroup(func_EscGroup, "EscGroup");
refalrts::RefalFunction& EscGroup = descr_EscGroup;

} // unnamed namespace

#endif
#ifdef INTERPRET
namespace /* unnamed */ {
  namespace scope_EscGroup_XCode {
    static const char *filename = "Flex-Lexer.cpp";
    static refalrts::RefalFunction *functions[] = {
      & ReadGroup
    };
    static const refalrts::RefalIdentifier idents[] = {
      & ident_TkHexNumber<int>::name
    };
    using refalrts::numbers;
    using refalrts::strings;
    static const refalrts::RASLCommand raa[] = {
      {refalrts::icThisIsGeneratedFunction, 0, 0, 0},
      {refalrts::icLoadConstants, 0, 0, 0},
      {refalrts::icReserveBacktrackStack, 22, 0, 0},
      {refalrts::icIssueMemory, 14, 0, 0},
      //FAST GEN: ( e.$ ) e.$
      //GLOBAL GEN: ( e.$ ) e.$
      // </0 & EscGroup-XCode/4 (/7 e.idxB#0/5 )/8 e.idxT#0/2 >/1
      {refalrts::icInitB0_Lite, 0, 0, 0},
      {refalrts::icCallSaveLeft, 0, 2, 0},
      {refalrts::icBracketLeftSave, 0, 5, 2},
      // closed e.idxB#0 as range 5
      // closed e.idxT#0 as range 2
      {refalrts::icOnFailGoTo, +9, 0, 0},
      // ( e.idx ) '0' e.idx
      // </0 & EscGroup-XCode/4 (/7 e.Accum#1/5 )/8 '0'/9 e.Text#1/2 >/1
      {refalrts::icSave, 0, 12, 2},
      {refalrts::icCharLeftSave, 9, static_cast<unsigned char>('0'), 12},
      // closed e.Accum#1 as range 5
      // closed e.Text#1 as range 12(2)
      //DEBUG: e.Accum#1: 5
      //DEBUG: e.Text#1: 2
      {refalrts::icEmptyResult, 0, 0, 0},
      //TRASH: {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 AsIs: & EscGroup-XCode/4 AsIs: (/7 AsIs: e.Accum#1/5 HalfReuse: '0'/8 HalfReuse: )/9 AsIs: e.Text#1/12(2) AsIs: >/1 ]] }
      {refalrts::icReinitChar, 0, '0', 8},
      {refalrts::icReinitBracket, 0, refalrts::ibCloseBracket, 9},
      {refalrts::icPushStack, 0, 0, 1},
      {refalrts::icPushStack, 0, 0, 0},
      {refalrts::icLinkBrackets, 7, 9, 0},
      {refalrts::icNextStep, 0, 0, 0},
      {refalrts::icProfilerStopSentence, 0, 0, 0},
      {refalrts::icOnFailGoTo, +9, 0, 0},
      // ( e.idx ) '1' e.idx
      // </0 & EscGroup-XCode/4 (/7 e.Accum#1/5 )/8 '1'/9 e.Text#1/2 >/1
      {refalrts::icSave, 0, 12, 2},
      {refalrts::icCharLeftSave, 9, static_cast<unsigned char>('1'), 12},
      // closed e.Accum#1 as range 5
      // closed e.Text#1 as range 12(2)
      //DEBUG: e.Accum#1: 5
      //DEBUG: e.Text#1: 2
      {refalrts::icEmptyResult, 0, 0, 0},
      //TRASH: {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 AsIs: & EscGroup-XCode/4 AsIs: (/7 AsIs: e.Accum#1/5 HalfReuse: '1'/8 HalfReuse: )/9 AsIs: e.Text#1/12(2) AsIs: >/1 ]] }
      {refalrts::icReinitChar, 0, '1', 8},
      {refalrts::icReinitBracket, 0, refalrts::ibCloseBracket, 9},
      {refalrts::icPushStack, 0, 0, 1},
      {refalrts::icPushStack, 0, 0, 0},
      {refalrts::icLinkBrackets, 7, 9, 0},
      {refalrts::icNextStep, 0, 0, 0},
      {refalrts::icProfilerStopSentence, 0, 0, 0},
      {refalrts::icOnFailGoTo, +9, 0, 0},
      // ( e.idx ) '2' e.idx
      // </0 & EscGroup-XCode/4 (/7 e.Accum#1/5 )/8 '2'/9 e.Text#1/2 >/1
      {refalrts::icSave, 0, 12, 2},
      {refalrts::icCharLeftSave, 9, static_cast<unsigned char>('2'), 12},
      // closed e.Accum#1 as range 5
      // closed e.Text#1 as range 12(2)
      //DEBUG: e.Accum#1: 5
      //DEBUG: e.Text#1: 2
      {refalrts::icEmptyResult, 0, 0, 0},
      //TRASH: {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 AsIs: & EscGroup-XCode/4 AsIs: (/7 AsIs: e.Accum#1/5 HalfReuse: '2'/8 HalfReuse: )/9 AsIs: e.Text#1/12(2) AsIs: >/1 ]] }
      {refalrts::icReinitChar, 0, '2', 8},
      {refalrts::icReinitBracket, 0, refalrts::ibCloseBracket, 9},
      {refalrts::icPushStack, 0, 0, 1},
      {refalrts::icPushStack, 0, 0, 0},
      {refalrts::icLinkBrackets, 7, 9, 0},
      {refalrts::icNextStep, 0, 0, 0},
      {refalrts::icProfilerStopSentence, 0, 0, 0},
      {refalrts::icOnFailGoTo, +9, 0, 0},
      // ( e.idx ) '3' e.idx
      // </0 & EscGroup-XCode/4 (/7 e.Accum#1/5 )/8 '3'/9 e.Text#1/2 >/1
      {refalrts::icSave, 0, 12, 2},
      {refalrts::icCharLeftSave, 9, static_cast<unsigned char>('3'), 12},
      // closed e.Accum#1 as range 5
      // closed e.Text#1 as range 12(2)
      //DEBUG: e.Accum#1: 5
      //DEBUG: e.Text#1: 2
      {refalrts::icEmptyResult, 0, 0, 0},
      //TRASH: {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 AsIs: & EscGroup-XCode/4 AsIs: (/7 AsIs: e.Accum#1/5 HalfReuse: '3'/8 HalfReuse: )/9 AsIs: e.Text#1/12(2) AsIs: >/1 ]] }
      {refalrts::icReinitChar, 0, '3', 8},
      {refalrts::icReinitBracket, 0, refalrts::ibCloseBracket, 9},
      {refalrts::icPushStack, 0, 0, 1},
      {refalrts::icPushStack, 0, 0, 0},
      {refalrts::icLinkBrackets, 7, 9, 0},
      {refalrts::icNextStep, 0, 0, 0},
      {refalrts::icProfilerStopSentence, 0, 0, 0},
      {refalrts::icOnFailGoTo, +9, 0, 0},
      // ( e.idx ) '4' e.idx
      // </0 & EscGroup-XCode/4 (/7 e.Accum#1/5 )/8 '4'/9 e.Text#1/2 >/1
      {refalrts::icSave, 0, 12, 2},
      {refalrts::icCharLeftSave, 9, static_cast<unsigned char>('4'), 12},
      // closed e.Accum#1 as range 5
      // closed e.Text#1 as range 12(2)
      //DEBUG: e.Accum#1: 5
      //DEBUG: e.Text#1: 2
      {refalrts::icEmptyResult, 0, 0, 0},
      //TRASH: {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 AsIs: & EscGroup-XCode/4 AsIs: (/7 AsIs: e.Accum#1/5 HalfReuse: '4'/8 HalfReuse: )/9 AsIs: e.Text#1/12(2) AsIs: >/1 ]] }
      {refalrts::icReinitChar, 0, '4', 8},
      {refalrts::icReinitBracket, 0, refalrts::ibCloseBracket, 9},
      {refalrts::icPushStack, 0, 0, 1},
      {refalrts::icPushStack, 0, 0, 0},
      {refalrts::icLinkBrackets, 7, 9, 0},
      {refalrts::icNextStep, 0, 0, 0},
      {refalrts::icProfilerStopSentence, 0, 0, 0},
      {refalrts::icOnFailGoTo, +9, 0, 0},
      // ( e.idx ) '5' e.idx
      // </0 & EscGroup-XCode/4 (/7 e.Accum#1/5 )/8 '5'/9 e.Text#1/2 >/1
      {refalrts::icSave, 0, 12, 2},
      {refalrts::icCharLeftSave, 9, static_cast<unsigned char>('5'), 12},
      // closed e.Accum#1 as range 5
      // closed e.Text#1 as range 12(2)
      //DEBUG: e.Accum#1: 5
      //DEBUG: e.Text#1: 2
      {refalrts::icEmptyResult, 0, 0, 0},
      //TRASH: {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 AsIs: & EscGroup-XCode/4 AsIs: (/7 AsIs: e.Accum#1/5 HalfReuse: '5'/8 HalfReuse: )/9 AsIs: e.Text#1/12(2) AsIs: >/1 ]] }
      {refalrts::icReinitChar, 0, '5', 8},
      {refalrts::icReinitBracket, 0, refalrts::ibCloseBracket, 9},
      {refalrts::icPushStack, 0, 0, 1},
      {refalrts::icPushStack, 0, 0, 0},
      {refalrts::icLinkBrackets, 7, 9, 0},
      {refalrts::icNextStep, 0, 0, 0},
      {refalrts::icProfilerStopSentence, 0, 0, 0},
      {refalrts::icOnFailGoTo, +9, 0, 0},
      // ( e.idx ) '6' e.idx
      // </0 & EscGroup-XCode/4 (/7 e.Accum#1/5 )/8 '6'/9 e.Text#1/2 >/1
      {refalrts::icSave, 0, 12, 2},
      {refalrts::icCharLeftSave, 9, static_cast<unsigned char>('6'), 12},
      // closed e.Accum#1 as range 5
      // closed e.Text#1 as range 12(2)
      //DEBUG: e.Accum#1: 5
      //DEBUG: e.Text#1: 2
      {refalrts::icEmptyResult, 0, 0, 0},
      //TRASH: {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 AsIs: & EscGroup-XCode/4 AsIs: (/7 AsIs: e.Accum#1/5 HalfReuse: '6'/8 HalfReuse: )/9 AsIs: e.Text#1/12(2) AsIs: >/1 ]] }
      {refalrts::icReinitChar, 0, '6', 8},
      {refalrts::icReinitBracket, 0, refalrts::ibCloseBracket, 9},
      {refalrts::icPushStack, 0, 0, 1},
      {refalrts::icPushStack, 0, 0, 0},
      {refalrts::icLinkBrackets, 7, 9, 0},
      {refalrts::icNextStep, 0, 0, 0},
      {refalrts::icProfilerStopSentence, 0, 0, 0},
      {refalrts::icOnFailGoTo, +9, 0, 0},
      // ( e.idx ) '7' e.idx
      // </0 & EscGroup-XCode/4 (/7 e.Accum#1/5 )/8 '7'/9 e.Text#1/2 >/1
      {refalrts::icSave, 0, 12, 2},
      {refalrts::icCharLeftSave, 9, static_cast<unsigned char>('7'), 12},
      // closed e.Accum#1 as range 5
      // closed e.Text#1 as range 12(2)
      //DEBUG: e.Accum#1: 5
      //DEBUG: e.Text#1: 2
      {refalrts::icEmptyResult, 0, 0, 0},
      //TRASH: {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 AsIs: & EscGroup-XCode/4 AsIs: (/7 AsIs: e.Accum#1/5 HalfReuse: '7'/8 HalfReuse: )/9 AsIs: e.Text#1/12(2) AsIs: >/1 ]] }
      {refalrts::icReinitChar, 0, '7', 8},
      {refalrts::icReinitBracket, 0, refalrts::ibCloseBracket, 9},
      {refalrts::icPushStack, 0, 0, 1},
      {refalrts::icPushStack, 0, 0, 0},
      {refalrts::icLinkBrackets, 7, 9, 0},
      {refalrts::icNextStep, 0, 0, 0},
      {refalrts::icProfilerStopSentence, 0, 0, 0},
      {refalrts::icOnFailGoTo, +9, 0, 0},
      // ( e.idx ) '8' e.idx
      // </0 & EscGroup-XCode/4 (/7 e.Accum#1/5 )/8 '8'/9 e.Text#1/2 >/1
      {refalrts::icSave, 0, 12, 2},
      {refalrts::icCharLeftSave, 9, static_cast<unsigned char>('8'), 12},
      // closed e.Accum#1 as range 5
      // closed e.Text#1 as range 12(2)
      //DEBUG: e.Accum#1: 5
      //DEBUG: e.Text#1: 2
      {refalrts::icEmptyResult, 0, 0, 0},
      //TRASH: {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 AsIs: & EscGroup-XCode/4 AsIs: (/7 AsIs: e.Accum#1/5 HalfReuse: '8'/8 HalfReuse: )/9 AsIs: e.Text#1/12(2) AsIs: >/1 ]] }
      {refalrts::icReinitChar, 0, '8', 8},
      {refalrts::icReinitBracket, 0, refalrts::ibCloseBracket, 9},
      {refalrts::icPushStack, 0, 0, 1},
      {refalrts::icPushStack, 0, 0, 0},
      {refalrts::icLinkBrackets, 7, 9, 0},
      {refalrts::icNextStep, 0, 0, 0},
      {refalrts::icProfilerStopSentence, 0, 0, 0},
      {refalrts::icOnFailGoTo, +9, 0, 0},
      // ( e.idx ) '9' e.idx
      // </0 & EscGroup-XCode/4 (/7 e.Accum#1/5 )/8 '9'/9 e.Text#1/2 >/1
      {refalrts::icSave, 0, 12, 2},
      {refalrts::icCharLeftSave, 9, static_cast<unsigned char>('9'), 12},
      // closed e.Accum#1 as range 5
      // closed e.Text#1 as range 12(2)
      //DEBUG: e.Accum#1: 5
      //DEBUG: e.Text#1: 2
      {refalrts::icEmptyResult, 0, 0, 0},
      //TRASH: {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 AsIs: & EscGroup-XCode/4 AsIs: (/7 AsIs: e.Accum#1/5 HalfReuse: '9'/8 HalfReuse: )/9 AsIs: e.Text#1/12(2) AsIs: >/1 ]] }
      {refalrts::icReinitChar, 0, '9', 8},
      {refalrts::icReinitBracket, 0, refalrts::ibCloseBracket, 9},
      {refalrts::icPushStack, 0, 0, 1},
      {refalrts::icPushStack, 0, 0, 0},
      {refalrts::icLinkBrackets, 7, 9, 0},
      {refalrts::icNextStep, 0, 0, 0},
      {refalrts::icProfilerStopSentence, 0, 0, 0},
      {refalrts::icOnFailGoTo, +9, 0, 0},
      // ( e.idx ) 'A' e.idx
      // </0 & EscGroup-XCode/4 (/7 e.Accum#1/5 )/8 'A'/9 e.Text#1/2 >/1
      {refalrts::icSave, 0, 12, 2},
      {refalrts::icCharLeftSave, 9, static_cast<unsigned char>('A'), 12},
      // closed e.Accum#1 as range 5
      // closed e.Text#1 as range 12(2)
      //DEBUG: e.Accum#1: 5
      //DEBUG: e.Text#1: 2
      {refalrts::icEmptyResult, 0, 0, 0},
      //TRASH: {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 AsIs: & EscGroup-XCode/4 AsIs: (/7 AsIs: e.Accum#1/5 HalfReuse: 'A'/8 HalfReuse: )/9 AsIs: e.Text#1/12(2) AsIs: >/1 ]] }
      {refalrts::icReinitChar, 0, 'A', 8},
      {refalrts::icReinitBracket, 0, refalrts::ibCloseBracket, 9},
      {refalrts::icPushStack, 0, 0, 1},
      {refalrts::icPushStack, 0, 0, 0},
      {refalrts::icLinkBrackets, 7, 9, 0},
      {refalrts::icNextStep, 0, 0, 0},
      {refalrts::icProfilerStopSentence, 0, 0, 0},
      {refalrts::icOnFailGoTo, +9, 0, 0},
      // ( e.idx ) 'B' e.idx
      // </0 & EscGroup-XCode/4 (/7 e.Accum#1/5 )/8 'B'/9 e.Text#1/2 >/1
      {refalrts::icSave, 0, 12, 2},
      {refalrts::icCharLeftSave, 9, static_cast<unsigned char>('B'), 12},
      // closed e.Accum#1 as range 5
      // closed e.Text#1 as range 12(2)
      //DEBUG: e.Accum#1: 5
      //DEBUG: e.Text#1: 2
      {refalrts::icEmptyResult, 0, 0, 0},
      //TRASH: {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 AsIs: & EscGroup-XCode/4 AsIs: (/7 AsIs: e.Accum#1/5 HalfReuse: 'B'/8 HalfReuse: )/9 AsIs: e.Text#1/12(2) AsIs: >/1 ]] }
      {refalrts::icReinitChar, 0, 'B', 8},
      {refalrts::icReinitBracket, 0, refalrts::ibCloseBracket, 9},
      {refalrts::icPushStack, 0, 0, 1},
      {refalrts::icPushStack, 0, 0, 0},
      {refalrts::icLinkBrackets, 7, 9, 0},
      {refalrts::icNextStep, 0, 0, 0},
      {refalrts::icProfilerStopSentence, 0, 0, 0},
      {refalrts::icOnFailGoTo, +9, 0, 0},
      // ( e.idx ) 'C' e.idx
      // </0 & EscGroup-XCode/4 (/7 e.Accum#1/5 )/8 'C'/9 e.Text#1/2 >/1
      {refalrts::icSave, 0, 12, 2},
      {refalrts::icCharLeftSave, 9, static_cast<unsigned char>('C'), 12},
      // closed e.Accum#1 as range 5
      // closed e.Text#1 as range 12(2)
      //DEBUG: e.Accum#1: 5
      //DEBUG: e.Text#1: 2
      {refalrts::icEmptyResult, 0, 0, 0},
      //TRASH: {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 AsIs: & EscGroup-XCode/4 AsIs: (/7 AsIs: e.Accum#1/5 HalfReuse: 'C'/8 HalfReuse: )/9 AsIs: e.Text#1/12(2) AsIs: >/1 ]] }
      {refalrts::icReinitChar, 0, 'C', 8},
      {refalrts::icReinitBracket, 0, refalrts::ibCloseBracket, 9},
      {refalrts::icPushStack, 0, 0, 1},
      {refalrts::icPushStack, 0, 0, 0},
      {refalrts::icLinkBrackets, 7, 9, 0},
      {refalrts::icNextStep, 0, 0, 0},
      {refalrts::icProfilerStopSentence, 0, 0, 0},
      {refalrts::icOnFailGoTo, +9, 0, 0},
      // ( e.idx ) 'D' e.idx
      // </0 & EscGroup-XCode/4 (/7 e.Accum#1/5 )/8 'D'/9 e.Text#1/2 >/1
      {refalrts::icSave, 0, 12, 2},
      {refalrts::icCharLeftSave, 9, static_cast<unsigned char>('D'), 12},
      // closed e.Accum#1 as range 5
      // closed e.Text#1 as range 12(2)
      //DEBUG: e.Accum#1: 5
      //DEBUG: e.Text#1: 2
      {refalrts::icEmptyResult, 0, 0, 0},
      //TRASH: {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 AsIs: & EscGroup-XCode/4 AsIs: (/7 AsIs: e.Accum#1/5 HalfReuse: 'D'/8 HalfReuse: )/9 AsIs: e.Text#1/12(2) AsIs: >/1 ]] }
      {refalrts::icReinitChar, 0, 'D', 8},
      {refalrts::icReinitBracket, 0, refalrts::ibCloseBracket, 9},
      {refalrts::icPushStack, 0, 0, 1},
      {refalrts::icPushStack, 0, 0, 0},
      {refalrts::icLinkBrackets, 7, 9, 0},
      {refalrts::icNextStep, 0, 0, 0},
      {refalrts::icProfilerStopSentence, 0, 0, 0},
      {refalrts::icOnFailGoTo, +9, 0, 0},
      // ( e.idx ) 'E' e.idx
      // </0 & EscGroup-XCode/4 (/7 e.Accum#1/5 )/8 'E'/9 e.Text#1/2 >/1
      {refalrts::icSave, 0, 12, 2},
      {refalrts::icCharLeftSave, 9, static_cast<unsigned char>('E'), 12},
      // closed e.Accum#1 as range 5
      // closed e.Text#1 as range 12(2)
      //DEBUG: e.Accum#1: 5
      //DEBUG: e.Text#1: 2
      {refalrts::icEmptyResult, 0, 0, 0},
      //TRASH: {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 AsIs: & EscGroup-XCode/4 AsIs: (/7 AsIs: e.Accum#1/5 HalfReuse: 'E'/8 HalfReuse: )/9 AsIs: e.Text#1/12(2) AsIs: >/1 ]] }
      {refalrts::icReinitChar, 0, 'E', 8},
      {refalrts::icReinitBracket, 0, refalrts::ibCloseBracket, 9},
      {refalrts::icPushStack, 0, 0, 1},
      {refalrts::icPushStack, 0, 0, 0},
      {refalrts::icLinkBrackets, 7, 9, 0},
      {refalrts::icNextStep, 0, 0, 0},
      {refalrts::icProfilerStopSentence, 0, 0, 0},
      {refalrts::icOnFailGoTo, +9, 0, 0},
      // ( e.idx ) 'F' e.idx
      // </0 & EscGroup-XCode/4 (/7 e.Accum#1/5 )/8 'F'/9 e.Text#1/2 >/1
      {refalrts::icSave, 0, 12, 2},
      {refalrts::icCharLeftSave, 9, static_cast<unsigned char>('F'), 12},
      // closed e.Accum#1 as range 5
      // closed e.Text#1 as range 12(2)
      //DEBUG: e.Accum#1: 5
      //DEBUG: e.Text#1: 2
      {refalrts::icEmptyResult, 0, 0, 0},
      //TRASH: {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 AsIs: & EscGroup-XCode/4 AsIs: (/7 AsIs: e.Accum#1/5 HalfReuse: 'F'/8 HalfReuse: )/9 AsIs: e.Text#1/12(2) AsIs: >/1 ]] }
      {refalrts::icReinitChar, 0, 'F', 8},
      {refalrts::icReinitBracket, 0, refalrts::ibCloseBracket, 9},
      {refalrts::icPushStack, 0, 0, 1},
      {refalrts::icPushStack, 0, 0, 0},
      {refalrts::icLinkBrackets, 7, 9, 0},
      {refalrts::icNextStep, 0, 0, 0},
      {refalrts::icProfilerStopSentence, 0, 0, 0},
      {refalrts::icOnFailGoTo, +9, 0, 0},
      // ( e.idx ) 'a' e.idx
      // </0 & EscGroup-XCode/4 (/7 e.Accum#1/5 )/8 'a'/9 e.Text#1/2 >/1
      {refalrts::icSave, 0, 12, 2},
      {refalrts::icCharLeftSave, 9, static_cast<unsigned char>('a'), 12},
      // closed e.Accum#1 as range 5
      // closed e.Text#1 as range 12(2)
      //DEBUG: e.Accum#1: 5
      //DEBUG: e.Text#1: 2
      {refalrts::icEmptyResult, 0, 0, 0},
      //TRASH: {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 AsIs: & EscGroup-XCode/4 AsIs: (/7 AsIs: e.Accum#1/5 HalfReuse: 'a'/8 HalfReuse: )/9 AsIs: e.Text#1/12(2) AsIs: >/1 ]] }
      {refalrts::icReinitChar, 0, 'a', 8},
      {refalrts::icReinitBracket, 0, refalrts::ibCloseBracket, 9},
      {refalrts::icPushStack, 0, 0, 1},
      {refalrts::icPushStack, 0, 0, 0},
      {refalrts::icLinkBrackets, 7, 9, 0},
      {refalrts::icNextStep, 0, 0, 0},
      {refalrts::icProfilerStopSentence, 0, 0, 0},
      {refalrts::icOnFailGoTo, +9, 0, 0},
      // ( e.idx ) 'b' e.idx
      // </0 & EscGroup-XCode/4 (/7 e.Accum#1/5 )/8 'b'/9 e.Text#1/2 >/1
      {refalrts::icSave, 0, 12, 2},
      {refalrts::icCharLeftSave, 9, static_cast<unsigned char>('b'), 12},
      // closed e.Accum#1 as range 5
      // closed e.Text#1 as range 12(2)
      //DEBUG: e.Accum#1: 5
      //DEBUG: e.Text#1: 2
      {refalrts::icEmptyResult, 0, 0, 0},
      //TRASH: {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 AsIs: & EscGroup-XCode/4 AsIs: (/7 AsIs: e.Accum#1/5 HalfReuse: 'b'/8 HalfReuse: )/9 AsIs: e.Text#1/12(2) AsIs: >/1 ]] }
      {refalrts::icReinitChar, 0, 'b', 8},
      {refalrts::icReinitBracket, 0, refalrts::ibCloseBracket, 9},
      {refalrts::icPushStack, 0, 0, 1},
      {refalrts::icPushStack, 0, 0, 0},
      {refalrts::icLinkBrackets, 7, 9, 0},
      {refalrts::icNextStep, 0, 0, 0},
      {refalrts::icProfilerStopSentence, 0, 0, 0},
      {refalrts::icOnFailGoTo, +9, 0, 0},
      // ( e.idx ) 'c' e.idx
      // </0 & EscGroup-XCode/4 (/7 e.Accum#1/5 )/8 'c'/9 e.Text#1/2 >/1
      {refalrts::icSave, 0, 12, 2},
      {refalrts::icCharLeftSave, 9, static_cast<unsigned char>('c'), 12},
      // closed e.Accum#1 as range 5
      // closed e.Text#1 as range 12(2)
      //DEBUG: e.Accum#1: 5
      //DEBUG: e.Text#1: 2
      {refalrts::icEmptyResult, 0, 0, 0},
      //TRASH: {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 AsIs: & EscGroup-XCode/4 AsIs: (/7 AsIs: e.Accum#1/5 HalfReuse: 'c'/8 HalfReuse: )/9 AsIs: e.Text#1/12(2) AsIs: >/1 ]] }
      {refalrts::icReinitChar, 0, 'c', 8},
      {refalrts::icReinitBracket, 0, refalrts::ibCloseBracket, 9},
      {refalrts::icPushStack, 0, 0, 1},
      {refalrts::icPushStack, 0, 0, 0},
      {refalrts::icLinkBrackets, 7, 9, 0},
      {refalrts::icNextStep, 0, 0, 0},
      {refalrts::icProfilerStopSentence, 0, 0, 0},
      {refalrts::icOnFailGoTo, +9, 0, 0},
      // ( e.idx ) 'd' e.idx
      // </0 & EscGroup-XCode/4 (/7 e.Accum#1/5 )/8 'd'/9 e.Text#1/2 >/1
      {refalrts::icSave, 0, 12, 2},
      {refalrts::icCharLeftSave, 9, static_cast<unsigned char>('d'), 12},
      // closed e.Accum#1 as range 5
      // closed e.Text#1 as range 12(2)
      //DEBUG: e.Accum#1: 5
      //DEBUG: e.Text#1: 2
      {refalrts::icEmptyResult, 0, 0, 0},
      //TRASH: {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 AsIs: & EscGroup-XCode/4 AsIs: (/7 AsIs: e.Accum#1/5 HalfReuse: 'd'/8 HalfReuse: )/9 AsIs: e.Text#1/12(2) AsIs: >/1 ]] }
      {refalrts::icReinitChar, 0, 'd', 8},
      {refalrts::icReinitBracket, 0, refalrts::ibCloseBracket, 9},
      {refalrts::icPushStack, 0, 0, 1},
      {refalrts::icPushStack, 0, 0, 0},
      {refalrts::icLinkBrackets, 7, 9, 0},
      {refalrts::icNextStep, 0, 0, 0},
      {refalrts::icProfilerStopSentence, 0, 0, 0},
      {refalrts::icOnFailGoTo, +9, 0, 0},
      // ( e.idx ) 'e' e.idx
      // </0 & EscGroup-XCode/4 (/7 e.Accum#1/5 )/8 'e'/9 e.Text#1/2 >/1
      {refalrts::icSave, 0, 12, 2},
      {refalrts::icCharLeftSave, 9, static_cast<unsigned char>('e'), 12},
      // closed e.Accum#1 as range 5
      // closed e.Text#1 as range 12(2)
      //DEBUG: e.Accum#1: 5
      //DEBUG: e.Text#1: 2
      {refalrts::icEmptyResult, 0, 0, 0},
      //TRASH: {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 AsIs: & EscGroup-XCode/4 AsIs: (/7 AsIs: e.Accum#1/5 HalfReuse: 'e'/8 HalfReuse: )/9 AsIs: e.Text#1/12(2) AsIs: >/1 ]] }
      {refalrts::icReinitChar, 0, 'e', 8},
      {refalrts::icReinitBracket, 0, refalrts::ibCloseBracket, 9},
      {refalrts::icPushStack, 0, 0, 1},
      {refalrts::icPushStack, 0, 0, 0},
      {refalrts::icLinkBrackets, 7, 9, 0},
      {refalrts::icNextStep, 0, 0, 0},
      {refalrts::icProfilerStopSentence, 0, 0, 0},
      {refalrts::icOnFailGoTo, +9, 0, 0},
      // ( e.idx ) 'f' e.idx
      // </0 & EscGroup-XCode/4 (/7 e.Accum#1/5 )/8 'f'/9 e.Text#1/2 >/1
      {refalrts::icSave, 0, 12, 2},
      {refalrts::icCharLeftSave, 9, static_cast<unsigned char>('f'), 12},
      // closed e.Accum#1 as range 5
      // closed e.Text#1 as range 12(2)
      //DEBUG: e.Accum#1: 5
      //DEBUG: e.Text#1: 2
      {refalrts::icEmptyResult, 0, 0, 0},
      //TRASH: {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 AsIs: & EscGroup-XCode/4 AsIs: (/7 AsIs: e.Accum#1/5 HalfReuse: 'f'/8 HalfReuse: )/9 AsIs: e.Text#1/12(2) AsIs: >/1 ]] }
      {refalrts::icReinitChar, 0, 'f', 8},
      {refalrts::icReinitBracket, 0, refalrts::ibCloseBracket, 9},
      {refalrts::icPushStack, 0, 0, 1},
      {refalrts::icPushStack, 0, 0, 0},
      {refalrts::icLinkBrackets, 7, 9, 0},
      {refalrts::icNextStep, 0, 0, 0},
      {refalrts::icProfilerStopSentence, 0, 0, 0},
      // ( e.idx ) e.idx
      // </0 & EscGroup-XCode/4 (/7 e.Accum#1/5 )/8 e.Text#1/2 >/1
      // closed e.Accum#1 as range 5
      // closed e.Text#1 as range 2
      //DEBUG: e.Accum#1: 5
      //DEBUG: e.Text#1: 2
      {refalrts::icEmptyResult, 0, 0, 0},
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ } (/9 # TkHexNumber/10 Tile{ AsIs: e.Accum#1/5 } )/11 Tile{ AsIs: </0 Reuse: & ReadGroup/4 AsIs: (/7 } Tile{ AsIs: )/8 AsIs: e.Text#1/2 AsIs: >/1 ]] }
      {refalrts::icAllocBracket, 0, refalrts::ibOpenBracket, 9},
      {refalrts::icAllocIdent, 0, 0, 10},
      {refalrts::icAllocBracket, 0, refalrts::ibCloseBracket, 11},
      {refalrts::icUpdateFunc, 0, 0, 4},
      {refalrts::icPushStack, 0, 0, 1},
      {refalrts::icPushStack, 0, 0, 0},
      {refalrts::icLinkBrackets, 7, 8, 0},
      {refalrts::icLinkBrackets, 9, 11, 0},
      {refalrts::icSetRes, 0, 0, 8},
      {refalrts::icSpliceTile, 0, 7, 0},
      {refalrts::icSpliceTile, 11, 11, 0},
      {refalrts::icSpliceEVar, 0, 0, 5},
      {refalrts::icSpliceTile, 9, 10, 0},
      {refalrts::icNextStep, 0, 0, 0},
      {refalrts::icEnd, 0, 0, 0}
    };
  } // namespace scope_EscGroup_XCode

} // unnamed namespace

namespace /* unnamed */ {
refalrts::RASLFunction descr_EscGroup_XCode(
  "EscGroup-XCode",
  scope_EscGroup_XCode::raa,
  scope_EscGroup_XCode::functions,
  scope_EscGroup_XCode::idents,
  scope_EscGroup_XCode::numbers,
  scope_EscGroup_XCode::strings,
  scope_EscGroup_XCode::filename
);
refalrts::RefalFunction& EscGroup_XCode = descr_EscGroup_XCode;

} // unnamed namespace

#else
static refalrts::FnResult func_EscGroup_XCode(refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  refalrts::this_is_generated_function();
  // issue here memory for vars with 14 elems
  refalrts::Iter context[14];
  refalrts::zeros( context, 14 );
  //FAST GEN: ( e.$ ) e.$
  //GLOBAL GEN: ( e.$ ) e.$
  // </0 & EscGroup-XCode/4 (/7 e.idxB#0/5 )/8 e.idxT#0/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  context[5] = 0;
  context[6] = 0;
  context[7] = refalrts::brackets_left( context[5], context[6], context[2], context[3] );
  if( ! context[7] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[7], context[8]);
  // closed e.idxB#0 as range 5
  // closed e.idxT#0 as range 2
  do {
    // ( e.idx ) '0' e.idx
    // </0 & EscGroup-XCode/4 (/7 e.Accum#1/5 )/8 '0'/9 e.Text#1/2 >/1
    context[12] = context[2];
    context[13] = context[3];
    context[9] = refalrts::char_left( '0', context[12], context[13] );
    if( ! context[9] )
      continue;
    // closed e.Accum#1 as range 5
    // closed e.Text#1 as range 12(2)
    //DEBUG: e.Accum#1: 5
    //DEBUG: e.Text#1: 2

    refalrts::reset_allocator();
    //TRASH: {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 AsIs: & EscGroup-XCode/4 AsIs: (/7 AsIs: e.Accum#1/5 HalfReuse: '0'/8 HalfReuse: )/9 AsIs: e.Text#1/12(2) AsIs: >/1 ]] }
    refalrts::reinit_char( context[8], '0' );
    refalrts::reinit_close_bracket( context[9] );
    refalrts::push_stack( context[1] );
    refalrts::push_stack( context[0] );
    refalrts::link_brackets( context[7], context[9] );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence();

  do {
    // ( e.idx ) '1' e.idx
    // </0 & EscGroup-XCode/4 (/7 e.Accum#1/5 )/8 '1'/9 e.Text#1/2 >/1
    context[12] = context[2];
    context[13] = context[3];
    context[9] = refalrts::char_left( '1', context[12], context[13] );
    if( ! context[9] )
      continue;
    // closed e.Accum#1 as range 5
    // closed e.Text#1 as range 12(2)
    //DEBUG: e.Accum#1: 5
    //DEBUG: e.Text#1: 2

    refalrts::reset_allocator();
    //TRASH: {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 AsIs: & EscGroup-XCode/4 AsIs: (/7 AsIs: e.Accum#1/5 HalfReuse: '1'/8 HalfReuse: )/9 AsIs: e.Text#1/12(2) AsIs: >/1 ]] }
    refalrts::reinit_char( context[8], '1' );
    refalrts::reinit_close_bracket( context[9] );
    refalrts::push_stack( context[1] );
    refalrts::push_stack( context[0] );
    refalrts::link_brackets( context[7], context[9] );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence();

  do {
    // ( e.idx ) '2' e.idx
    // </0 & EscGroup-XCode/4 (/7 e.Accum#1/5 )/8 '2'/9 e.Text#1/2 >/1
    context[12] = context[2];
    context[13] = context[3];
    context[9] = refalrts::char_left( '2', context[12], context[13] );
    if( ! context[9] )
      continue;
    // closed e.Accum#1 as range 5
    // closed e.Text#1 as range 12(2)
    //DEBUG: e.Accum#1: 5
    //DEBUG: e.Text#1: 2

    refalrts::reset_allocator();
    //TRASH: {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 AsIs: & EscGroup-XCode/4 AsIs: (/7 AsIs: e.Accum#1/5 HalfReuse: '2'/8 HalfReuse: )/9 AsIs: e.Text#1/12(2) AsIs: >/1 ]] }
    refalrts::reinit_char( context[8], '2' );
    refalrts::reinit_close_bracket( context[9] );
    refalrts::push_stack( context[1] );
    refalrts::push_stack( context[0] );
    refalrts::link_brackets( context[7], context[9] );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence();

  do {
    // ( e.idx ) '3' e.idx
    // </0 & EscGroup-XCode/4 (/7 e.Accum#1/5 )/8 '3'/9 e.Text#1/2 >/1
    context[12] = context[2];
    context[13] = context[3];
    context[9] = refalrts::char_left( '3', context[12], context[13] );
    if( ! context[9] )
      continue;
    // closed e.Accum#1 as range 5
    // closed e.Text#1 as range 12(2)
    //DEBUG: e.Accum#1: 5
    //DEBUG: e.Text#1: 2

    refalrts::reset_allocator();
    //TRASH: {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 AsIs: & EscGroup-XCode/4 AsIs: (/7 AsIs: e.Accum#1/5 HalfReuse: '3'/8 HalfReuse: )/9 AsIs: e.Text#1/12(2) AsIs: >/1 ]] }
    refalrts::reinit_char( context[8], '3' );
    refalrts::reinit_close_bracket( context[9] );
    refalrts::push_stack( context[1] );
    refalrts::push_stack( context[0] );
    refalrts::link_brackets( context[7], context[9] );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence();

  do {
    // ( e.idx ) '4' e.idx
    // </0 & EscGroup-XCode/4 (/7 e.Accum#1/5 )/8 '4'/9 e.Text#1/2 >/1
    context[12] = context[2];
    context[13] = context[3];
    context[9] = refalrts::char_left( '4', context[12], context[13] );
    if( ! context[9] )
      continue;
    // closed e.Accum#1 as range 5
    // closed e.Text#1 as range 12(2)
    //DEBUG: e.Accum#1: 5
    //DEBUG: e.Text#1: 2

    refalrts::reset_allocator();
    //TRASH: {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 AsIs: & EscGroup-XCode/4 AsIs: (/7 AsIs: e.Accum#1/5 HalfReuse: '4'/8 HalfReuse: )/9 AsIs: e.Text#1/12(2) AsIs: >/1 ]] }
    refalrts::reinit_char( context[8], '4' );
    refalrts::reinit_close_bracket( context[9] );
    refalrts::push_stack( context[1] );
    refalrts::push_stack( context[0] );
    refalrts::link_brackets( context[7], context[9] );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence();

  do {
    // ( e.idx ) '5' e.idx
    // </0 & EscGroup-XCode/4 (/7 e.Accum#1/5 )/8 '5'/9 e.Text#1/2 >/1
    context[12] = context[2];
    context[13] = context[3];
    context[9] = refalrts::char_left( '5', context[12], context[13] );
    if( ! context[9] )
      continue;
    // closed e.Accum#1 as range 5
    // closed e.Text#1 as range 12(2)
    //DEBUG: e.Accum#1: 5
    //DEBUG: e.Text#1: 2

    refalrts::reset_allocator();
    //TRASH: {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 AsIs: & EscGroup-XCode/4 AsIs: (/7 AsIs: e.Accum#1/5 HalfReuse: '5'/8 HalfReuse: )/9 AsIs: e.Text#1/12(2) AsIs: >/1 ]] }
    refalrts::reinit_char( context[8], '5' );
    refalrts::reinit_close_bracket( context[9] );
    refalrts::push_stack( context[1] );
    refalrts::push_stack( context[0] );
    refalrts::link_brackets( context[7], context[9] );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence();

  do {
    // ( e.idx ) '6' e.idx
    // </0 & EscGroup-XCode/4 (/7 e.Accum#1/5 )/8 '6'/9 e.Text#1/2 >/1
    context[12] = context[2];
    context[13] = context[3];
    context[9] = refalrts::char_left( '6', context[12], context[13] );
    if( ! context[9] )
      continue;
    // closed e.Accum#1 as range 5
    // closed e.Text#1 as range 12(2)
    //DEBUG: e.Accum#1: 5
    //DEBUG: e.Text#1: 2

    refalrts::reset_allocator();
    //TRASH: {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 AsIs: & EscGroup-XCode/4 AsIs: (/7 AsIs: e.Accum#1/5 HalfReuse: '6'/8 HalfReuse: )/9 AsIs: e.Text#1/12(2) AsIs: >/1 ]] }
    refalrts::reinit_char( context[8], '6' );
    refalrts::reinit_close_bracket( context[9] );
    refalrts::push_stack( context[1] );
    refalrts::push_stack( context[0] );
    refalrts::link_brackets( context[7], context[9] );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence();

  do {
    // ( e.idx ) '7' e.idx
    // </0 & EscGroup-XCode/4 (/7 e.Accum#1/5 )/8 '7'/9 e.Text#1/2 >/1
    context[12] = context[2];
    context[13] = context[3];
    context[9] = refalrts::char_left( '7', context[12], context[13] );
    if( ! context[9] )
      continue;
    // closed e.Accum#1 as range 5
    // closed e.Text#1 as range 12(2)
    //DEBUG: e.Accum#1: 5
    //DEBUG: e.Text#1: 2

    refalrts::reset_allocator();
    //TRASH: {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 AsIs: & EscGroup-XCode/4 AsIs: (/7 AsIs: e.Accum#1/5 HalfReuse: '7'/8 HalfReuse: )/9 AsIs: e.Text#1/12(2) AsIs: >/1 ]] }
    refalrts::reinit_char( context[8], '7' );
    refalrts::reinit_close_bracket( context[9] );
    refalrts::push_stack( context[1] );
    refalrts::push_stack( context[0] );
    refalrts::link_brackets( context[7], context[9] );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence();

  do {
    // ( e.idx ) '8' e.idx
    // </0 & EscGroup-XCode/4 (/7 e.Accum#1/5 )/8 '8'/9 e.Text#1/2 >/1
    context[12] = context[2];
    context[13] = context[3];
    context[9] = refalrts::char_left( '8', context[12], context[13] );
    if( ! context[9] )
      continue;
    // closed e.Accum#1 as range 5
    // closed e.Text#1 as range 12(2)
    //DEBUG: e.Accum#1: 5
    //DEBUG: e.Text#1: 2

    refalrts::reset_allocator();
    //TRASH: {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 AsIs: & EscGroup-XCode/4 AsIs: (/7 AsIs: e.Accum#1/5 HalfReuse: '8'/8 HalfReuse: )/9 AsIs: e.Text#1/12(2) AsIs: >/1 ]] }
    refalrts::reinit_char( context[8], '8' );
    refalrts::reinit_close_bracket( context[9] );
    refalrts::push_stack( context[1] );
    refalrts::push_stack( context[0] );
    refalrts::link_brackets( context[7], context[9] );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence();

  do {
    // ( e.idx ) '9' e.idx
    // </0 & EscGroup-XCode/4 (/7 e.Accum#1/5 )/8 '9'/9 e.Text#1/2 >/1
    context[12] = context[2];
    context[13] = context[3];
    context[9] = refalrts::char_left( '9', context[12], context[13] );
    if( ! context[9] )
      continue;
    // closed e.Accum#1 as range 5
    // closed e.Text#1 as range 12(2)
    //DEBUG: e.Accum#1: 5
    //DEBUG: e.Text#1: 2

    refalrts::reset_allocator();
    //TRASH: {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 AsIs: & EscGroup-XCode/4 AsIs: (/7 AsIs: e.Accum#1/5 HalfReuse: '9'/8 HalfReuse: )/9 AsIs: e.Text#1/12(2) AsIs: >/1 ]] }
    refalrts::reinit_char( context[8], '9' );
    refalrts::reinit_close_bracket( context[9] );
    refalrts::push_stack( context[1] );
    refalrts::push_stack( context[0] );
    refalrts::link_brackets( context[7], context[9] );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence();

  do {
    // ( e.idx ) 'A' e.idx
    // </0 & EscGroup-XCode/4 (/7 e.Accum#1/5 )/8 'A'/9 e.Text#1/2 >/1
    context[12] = context[2];
    context[13] = context[3];
    context[9] = refalrts::char_left( 'A', context[12], context[13] );
    if( ! context[9] )
      continue;
    // closed e.Accum#1 as range 5
    // closed e.Text#1 as range 12(2)
    //DEBUG: e.Accum#1: 5
    //DEBUG: e.Text#1: 2

    refalrts::reset_allocator();
    //TRASH: {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 AsIs: & EscGroup-XCode/4 AsIs: (/7 AsIs: e.Accum#1/5 HalfReuse: 'A'/8 HalfReuse: )/9 AsIs: e.Text#1/12(2) AsIs: >/1 ]] }
    refalrts::reinit_char( context[8], 'A' );
    refalrts::reinit_close_bracket( context[9] );
    refalrts::push_stack( context[1] );
    refalrts::push_stack( context[0] );
    refalrts::link_brackets( context[7], context[9] );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence();

  do {
    // ( e.idx ) 'B' e.idx
    // </0 & EscGroup-XCode/4 (/7 e.Accum#1/5 )/8 'B'/9 e.Text#1/2 >/1
    context[12] = context[2];
    context[13] = context[3];
    context[9] = refalrts::char_left( 'B', context[12], context[13] );
    if( ! context[9] )
      continue;
    // closed e.Accum#1 as range 5
    // closed e.Text#1 as range 12(2)
    //DEBUG: e.Accum#1: 5
    //DEBUG: e.Text#1: 2

    refalrts::reset_allocator();
    //TRASH: {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 AsIs: & EscGroup-XCode/4 AsIs: (/7 AsIs: e.Accum#1/5 HalfReuse: 'B'/8 HalfReuse: )/9 AsIs: e.Text#1/12(2) AsIs: >/1 ]] }
    refalrts::reinit_char( context[8], 'B' );
    refalrts::reinit_close_bracket( context[9] );
    refalrts::push_stack( context[1] );
    refalrts::push_stack( context[0] );
    refalrts::link_brackets( context[7], context[9] );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence();

  do {
    // ( e.idx ) 'C' e.idx
    // </0 & EscGroup-XCode/4 (/7 e.Accum#1/5 )/8 'C'/9 e.Text#1/2 >/1
    context[12] = context[2];
    context[13] = context[3];
    context[9] = refalrts::char_left( 'C', context[12], context[13] );
    if( ! context[9] )
      continue;
    // closed e.Accum#1 as range 5
    // closed e.Text#1 as range 12(2)
    //DEBUG: e.Accum#1: 5
    //DEBUG: e.Text#1: 2

    refalrts::reset_allocator();
    //TRASH: {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 AsIs: & EscGroup-XCode/4 AsIs: (/7 AsIs: e.Accum#1/5 HalfReuse: 'C'/8 HalfReuse: )/9 AsIs: e.Text#1/12(2) AsIs: >/1 ]] }
    refalrts::reinit_char( context[8], 'C' );
    refalrts::reinit_close_bracket( context[9] );
    refalrts::push_stack( context[1] );
    refalrts::push_stack( context[0] );
    refalrts::link_brackets( context[7], context[9] );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence();

  do {
    // ( e.idx ) 'D' e.idx
    // </0 & EscGroup-XCode/4 (/7 e.Accum#1/5 )/8 'D'/9 e.Text#1/2 >/1
    context[12] = context[2];
    context[13] = context[3];
    context[9] = refalrts::char_left( 'D', context[12], context[13] );
    if( ! context[9] )
      continue;
    // closed e.Accum#1 as range 5
    // closed e.Text#1 as range 12(2)
    //DEBUG: e.Accum#1: 5
    //DEBUG: e.Text#1: 2

    refalrts::reset_allocator();
    //TRASH: {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 AsIs: & EscGroup-XCode/4 AsIs: (/7 AsIs: e.Accum#1/5 HalfReuse: 'D'/8 HalfReuse: )/9 AsIs: e.Text#1/12(2) AsIs: >/1 ]] }
    refalrts::reinit_char( context[8], 'D' );
    refalrts::reinit_close_bracket( context[9] );
    refalrts::push_stack( context[1] );
    refalrts::push_stack( context[0] );
    refalrts::link_brackets( context[7], context[9] );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence();

  do {
    // ( e.idx ) 'E' e.idx
    // </0 & EscGroup-XCode/4 (/7 e.Accum#1/5 )/8 'E'/9 e.Text#1/2 >/1
    context[12] = context[2];
    context[13] = context[3];
    context[9] = refalrts::char_left( 'E', context[12], context[13] );
    if( ! context[9] )
      continue;
    // closed e.Accum#1 as range 5
    // closed e.Text#1 as range 12(2)
    //DEBUG: e.Accum#1: 5
    //DEBUG: e.Text#1: 2

    refalrts::reset_allocator();
    //TRASH: {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 AsIs: & EscGroup-XCode/4 AsIs: (/7 AsIs: e.Accum#1/5 HalfReuse: 'E'/8 HalfReuse: )/9 AsIs: e.Text#1/12(2) AsIs: >/1 ]] }
    refalrts::reinit_char( context[8], 'E' );
    refalrts::reinit_close_bracket( context[9] );
    refalrts::push_stack( context[1] );
    refalrts::push_stack( context[0] );
    refalrts::link_brackets( context[7], context[9] );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence();

  do {
    // ( e.idx ) 'F' e.idx
    // </0 & EscGroup-XCode/4 (/7 e.Accum#1/5 )/8 'F'/9 e.Text#1/2 >/1
    context[12] = context[2];
    context[13] = context[3];
    context[9] = refalrts::char_left( 'F', context[12], context[13] );
    if( ! context[9] )
      continue;
    // closed e.Accum#1 as range 5
    // closed e.Text#1 as range 12(2)
    //DEBUG: e.Accum#1: 5
    //DEBUG: e.Text#1: 2

    refalrts::reset_allocator();
    //TRASH: {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 AsIs: & EscGroup-XCode/4 AsIs: (/7 AsIs: e.Accum#1/5 HalfReuse: 'F'/8 HalfReuse: )/9 AsIs: e.Text#1/12(2) AsIs: >/1 ]] }
    refalrts::reinit_char( context[8], 'F' );
    refalrts::reinit_close_bracket( context[9] );
    refalrts::push_stack( context[1] );
    refalrts::push_stack( context[0] );
    refalrts::link_brackets( context[7], context[9] );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence();

  do {
    // ( e.idx ) 'a' e.idx
    // </0 & EscGroup-XCode/4 (/7 e.Accum#1/5 )/8 'a'/9 e.Text#1/2 >/1
    context[12] = context[2];
    context[13] = context[3];
    context[9] = refalrts::char_left( 'a', context[12], context[13] );
    if( ! context[9] )
      continue;
    // closed e.Accum#1 as range 5
    // closed e.Text#1 as range 12(2)
    //DEBUG: e.Accum#1: 5
    //DEBUG: e.Text#1: 2

    refalrts::reset_allocator();
    //TRASH: {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 AsIs: & EscGroup-XCode/4 AsIs: (/7 AsIs: e.Accum#1/5 HalfReuse: 'a'/8 HalfReuse: )/9 AsIs: e.Text#1/12(2) AsIs: >/1 ]] }
    refalrts::reinit_char( context[8], 'a' );
    refalrts::reinit_close_bracket( context[9] );
    refalrts::push_stack( context[1] );
    refalrts::push_stack( context[0] );
    refalrts::link_brackets( context[7], context[9] );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence();

  do {
    // ( e.idx ) 'b' e.idx
    // </0 & EscGroup-XCode/4 (/7 e.Accum#1/5 )/8 'b'/9 e.Text#1/2 >/1
    context[12] = context[2];
    context[13] = context[3];
    context[9] = refalrts::char_left( 'b', context[12], context[13] );
    if( ! context[9] )
      continue;
    // closed e.Accum#1 as range 5
    // closed e.Text#1 as range 12(2)
    //DEBUG: e.Accum#1: 5
    //DEBUG: e.Text#1: 2

    refalrts::reset_allocator();
    //TRASH: {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 AsIs: & EscGroup-XCode/4 AsIs: (/7 AsIs: e.Accum#1/5 HalfReuse: 'b'/8 HalfReuse: )/9 AsIs: e.Text#1/12(2) AsIs: >/1 ]] }
    refalrts::reinit_char( context[8], 'b' );
    refalrts::reinit_close_bracket( context[9] );
    refalrts::push_stack( context[1] );
    refalrts::push_stack( context[0] );
    refalrts::link_brackets( context[7], context[9] );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence();

  do {
    // ( e.idx ) 'c' e.idx
    // </0 & EscGroup-XCode/4 (/7 e.Accum#1/5 )/8 'c'/9 e.Text#1/2 >/1
    context[12] = context[2];
    context[13] = context[3];
    context[9] = refalrts::char_left( 'c', context[12], context[13] );
    if( ! context[9] )
      continue;
    // closed e.Accum#1 as range 5
    // closed e.Text#1 as range 12(2)
    //DEBUG: e.Accum#1: 5
    //DEBUG: e.Text#1: 2

    refalrts::reset_allocator();
    //TRASH: {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 AsIs: & EscGroup-XCode/4 AsIs: (/7 AsIs: e.Accum#1/5 HalfReuse: 'c'/8 HalfReuse: )/9 AsIs: e.Text#1/12(2) AsIs: >/1 ]] }
    refalrts::reinit_char( context[8], 'c' );
    refalrts::reinit_close_bracket( context[9] );
    refalrts::push_stack( context[1] );
    refalrts::push_stack( context[0] );
    refalrts::link_brackets( context[7], context[9] );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence();

  do {
    // ( e.idx ) 'd' e.idx
    // </0 & EscGroup-XCode/4 (/7 e.Accum#1/5 )/8 'd'/9 e.Text#1/2 >/1
    context[12] = context[2];
    context[13] = context[3];
    context[9] = refalrts::char_left( 'd', context[12], context[13] );
    if( ! context[9] )
      continue;
    // closed e.Accum#1 as range 5
    // closed e.Text#1 as range 12(2)
    //DEBUG: e.Accum#1: 5
    //DEBUG: e.Text#1: 2

    refalrts::reset_allocator();
    //TRASH: {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 AsIs: & EscGroup-XCode/4 AsIs: (/7 AsIs: e.Accum#1/5 HalfReuse: 'd'/8 HalfReuse: )/9 AsIs: e.Text#1/12(2) AsIs: >/1 ]] }
    refalrts::reinit_char( context[8], 'd' );
    refalrts::reinit_close_bracket( context[9] );
    refalrts::push_stack( context[1] );
    refalrts::push_stack( context[0] );
    refalrts::link_brackets( context[7], context[9] );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence();

  do {
    // ( e.idx ) 'e' e.idx
    // </0 & EscGroup-XCode/4 (/7 e.Accum#1/5 )/8 'e'/9 e.Text#1/2 >/1
    context[12] = context[2];
    context[13] = context[3];
    context[9] = refalrts::char_left( 'e', context[12], context[13] );
    if( ! context[9] )
      continue;
    // closed e.Accum#1 as range 5
    // closed e.Text#1 as range 12(2)
    //DEBUG: e.Accum#1: 5
    //DEBUG: e.Text#1: 2

    refalrts::reset_allocator();
    //TRASH: {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 AsIs: & EscGroup-XCode/4 AsIs: (/7 AsIs: e.Accum#1/5 HalfReuse: 'e'/8 HalfReuse: )/9 AsIs: e.Text#1/12(2) AsIs: >/1 ]] }
    refalrts::reinit_char( context[8], 'e' );
    refalrts::reinit_close_bracket( context[9] );
    refalrts::push_stack( context[1] );
    refalrts::push_stack( context[0] );
    refalrts::link_brackets( context[7], context[9] );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence();

  do {
    // ( e.idx ) 'f' e.idx
    // </0 & EscGroup-XCode/4 (/7 e.Accum#1/5 )/8 'f'/9 e.Text#1/2 >/1
    context[12] = context[2];
    context[13] = context[3];
    context[9] = refalrts::char_left( 'f', context[12], context[13] );
    if( ! context[9] )
      continue;
    // closed e.Accum#1 as range 5
    // closed e.Text#1 as range 12(2)
    //DEBUG: e.Accum#1: 5
    //DEBUG: e.Text#1: 2

    refalrts::reset_allocator();
    //TRASH: {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 AsIs: & EscGroup-XCode/4 AsIs: (/7 AsIs: e.Accum#1/5 HalfReuse: 'f'/8 HalfReuse: )/9 AsIs: e.Text#1/12(2) AsIs: >/1 ]] }
    refalrts::reinit_char( context[8], 'f' );
    refalrts::reinit_close_bracket( context[9] );
    refalrts::push_stack( context[1] );
    refalrts::push_stack( context[0] );
    refalrts::link_brackets( context[7], context[9] );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence();

  // ( e.idx ) e.idx
  // </0 & EscGroup-XCode/4 (/7 e.Accum#1/5 )/8 e.Text#1/2 >/1
  // closed e.Accum#1 as range 5
  // closed e.Text#1 as range 2
  //DEBUG: e.Accum#1: 5
  //DEBUG: e.Text#1: 2

  refalrts::reset_allocator();
  //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ } (/9 # TkHexNumber/10 Tile{ AsIs: e.Accum#1/5 } )/11 Tile{ AsIs: </0 Reuse: & ReadGroup/4 AsIs: (/7 } Tile{ AsIs: )/8 AsIs: e.Text#1/2 AsIs: >/1 ]] }
  if( ! refalrts::alloc_open_bracket( context[9] ) )
    return refalrts::cNoMemory;
  if( ! refalrts::alloc_ident( context[10], & ident_TkHexNumber<int>::name ) )
    return refalrts::cNoMemory;
  if( ! refalrts::alloc_close_bracket( context[11] ) )
    return refalrts::cNoMemory;
  refalrts::update_name( context[4], & ReadGroup );
  refalrts::push_stack( context[1] );
  refalrts::push_stack( context[0] );
  refalrts::link_brackets( context[7], context[8] );
  refalrts::link_brackets( context[9], context[11] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[8];
  res = refalrts::splice_evar( res, context[0], context[7] );
  res = refalrts::splice_evar( res, context[11], context[11] );
  res = refalrts::splice_evar( res, context[5], context[6] );
  res = refalrts::splice_evar( res, context[9], context[10] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

namespace /* unnamed */ {
refalrts::RefalNativeFunction descr_EscGroup_XCode(func_EscGroup_XCode, "EscGroup-XCode");
refalrts::RefalFunction& EscGroup_XCode = descr_EscGroup_XCode;

} // unnamed namespace

#endif
#ifdef INTERPRET
namespace /* unnamed */ {
  namespace scope_EscGroup_OCode {
    static const char *filename = "Flex-Lexer.cpp";
    static refalrts::RefalFunction *functions[] = {
      & ReadGroup,
      & EscGroup_OCode_C1
    };
    static const refalrts::RefalIdentifier idents[] = {
      & ident_TkOctNumber<int>::name
    };
    using refalrts::numbers;
    using refalrts::strings;
    static const refalrts::RASLCommand raa[] = {
      {refalrts::icThisIsGeneratedFunction, 0, 0, 0},
      {refalrts::icLoadConstants, 0, 0, 0},
      {refalrts::icReserveBacktrackStack, 8, 0, 0},
      {refalrts::icIssueMemory, 14, 0, 0},
      //FAST GEN: ( e.$ ) e.$
      //GLOBAL GEN: ( e.$ ) e.$
      // </0 & EscGroup-OCode/4 (/7 e.idxB#0/5 )/8 e.idxT#0/2 >/1
      {refalrts::icInitB0_Lite, 0, 0, 0},
      {refalrts::icCallSaveLeft, 0, 2, 0},
      {refalrts::icBracketLeftSave, 0, 5, 2},
      // closed e.idxB#0 as range 5
      // closed e.idxT#0 as range 2
      {refalrts::icOnFailGoTo, +10, 0, 0},
      // ( e.idx ) '0' e.idx
      // </0 & EscGroup-OCode/4 (/7 e.Accum#1/5 )/8 '0'/9 e.Text#1/2 >/1
      {refalrts::icSave, 0, 12, 2},
      {refalrts::icCharLeftSave, 9, static_cast<unsigned char>('0'), 12},
      // closed e.Accum#1 as range 5
      // closed e.Text#1 as range 12(2)
      //DEBUG: e.Accum#1: 5
      //DEBUG: e.Text#1: 2
      {refalrts::icEmptyResult, 0, 0, 0},
      //TRASH: {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 Reuse: & EscGroup-OCode-C1/4 AsIs: (/7 AsIs: e.Accum#1/5 HalfReuse: '0'/8 HalfReuse: )/9 AsIs: e.Text#1/12(2) AsIs: >/1 ]] }
      {refalrts::icUpdateFunc, 0, 1, 4},
      {refalrts::icReinitChar, 0, '0', 8},
      {refalrts::icReinitBracket, 0, refalrts::ibCloseBracket, 9},
      {refalrts::icPushStack, 0, 0, 1},
      {refalrts::icPushStack, 0, 0, 0},
      {refalrts::icLinkBrackets, 7, 9, 0},
      {refalrts::icNextStep, 0, 0, 0},
      {refalrts::icProfilerStopSentence, 0, 0, 0},
      {refalrts::icOnFailGoTo, +10, 0, 0},
      // ( e.idx ) '1' e.idx
      // </0 & EscGroup-OCode/4 (/7 e.Accum#1/5 )/8 '1'/9 e.Text#1/2 >/1
      {refalrts::icSave, 0, 12, 2},
      {refalrts::icCharLeftSave, 9, static_cast<unsigned char>('1'), 12},
      // closed e.Accum#1 as range 5
      // closed e.Text#1 as range 12(2)
      //DEBUG: e.Accum#1: 5
      //DEBUG: e.Text#1: 2
      {refalrts::icEmptyResult, 0, 0, 0},
      //TRASH: {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 Reuse: & EscGroup-OCode-C1/4 AsIs: (/7 AsIs: e.Accum#1/5 HalfReuse: '1'/8 HalfReuse: )/9 AsIs: e.Text#1/12(2) AsIs: >/1 ]] }
      {refalrts::icUpdateFunc, 0, 1, 4},
      {refalrts::icReinitChar, 0, '1', 8},
      {refalrts::icReinitBracket, 0, refalrts::ibCloseBracket, 9},
      {refalrts::icPushStack, 0, 0, 1},
      {refalrts::icPushStack, 0, 0, 0},
      {refalrts::icLinkBrackets, 7, 9, 0},
      {refalrts::icNextStep, 0, 0, 0},
      {refalrts::icProfilerStopSentence, 0, 0, 0},
      {refalrts::icOnFailGoTo, +10, 0, 0},
      // ( e.idx ) '2' e.idx
      // </0 & EscGroup-OCode/4 (/7 e.Accum#1/5 )/8 '2'/9 e.Text#1/2 >/1
      {refalrts::icSave, 0, 12, 2},
      {refalrts::icCharLeftSave, 9, static_cast<unsigned char>('2'), 12},
      // closed e.Accum#1 as range 5
      // closed e.Text#1 as range 12(2)
      //DEBUG: e.Accum#1: 5
      //DEBUG: e.Text#1: 2
      {refalrts::icEmptyResult, 0, 0, 0},
      //TRASH: {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 Reuse: & EscGroup-OCode-C1/4 AsIs: (/7 AsIs: e.Accum#1/5 HalfReuse: '2'/8 HalfReuse: )/9 AsIs: e.Text#1/12(2) AsIs: >/1 ]] }
      {refalrts::icUpdateFunc, 0, 1, 4},
      {refalrts::icReinitChar, 0, '2', 8},
      {refalrts::icReinitBracket, 0, refalrts::ibCloseBracket, 9},
      {refalrts::icPushStack, 0, 0, 1},
      {refalrts::icPushStack, 0, 0, 0},
      {refalrts::icLinkBrackets, 7, 9, 0},
      {refalrts::icNextStep, 0, 0, 0},
      {refalrts::icProfilerStopSentence, 0, 0, 0},
      {refalrts::icOnFailGoTo, +10, 0, 0},
      // ( e.idx ) '3' e.idx
      // </0 & EscGroup-OCode/4 (/7 e.Accum#1/5 )/8 '3'/9 e.Text#1/2 >/1
      {refalrts::icSave, 0, 12, 2},
      {refalrts::icCharLeftSave, 9, static_cast<unsigned char>('3'), 12},
      // closed e.Accum#1 as range 5
      // closed e.Text#1 as range 12(2)
      //DEBUG: e.Accum#1: 5
      //DEBUG: e.Text#1: 2
      {refalrts::icEmptyResult, 0, 0, 0},
      //TRASH: {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 Reuse: & EscGroup-OCode-C1/4 AsIs: (/7 AsIs: e.Accum#1/5 HalfReuse: '3'/8 HalfReuse: )/9 AsIs: e.Text#1/12(2) AsIs: >/1 ]] }
      {refalrts::icUpdateFunc, 0, 1, 4},
      {refalrts::icReinitChar, 0, '3', 8},
      {refalrts::icReinitBracket, 0, refalrts::ibCloseBracket, 9},
      {refalrts::icPushStack, 0, 0, 1},
      {refalrts::icPushStack, 0, 0, 0},
      {refalrts::icLinkBrackets, 7, 9, 0},
      {refalrts::icNextStep, 0, 0, 0},
      {refalrts::icProfilerStopSentence, 0, 0, 0},
      {refalrts::icOnFailGoTo, +10, 0, 0},
      // ( e.idx ) '4' e.idx
      // </0 & EscGroup-OCode/4 (/7 e.Accum#1/5 )/8 '4'/9 e.Text#1/2 >/1
      {refalrts::icSave, 0, 12, 2},
      {refalrts::icCharLeftSave, 9, static_cast<unsigned char>('4'), 12},
      // closed e.Accum#1 as range 5
      // closed e.Text#1 as range 12(2)
      //DEBUG: e.Accum#1: 5
      //DEBUG: e.Text#1: 2
      {refalrts::icEmptyResult, 0, 0, 0},
      //TRASH: {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 Reuse: & EscGroup-OCode-C1/4 AsIs: (/7 AsIs: e.Accum#1/5 HalfReuse: '4'/8 HalfReuse: )/9 AsIs: e.Text#1/12(2) AsIs: >/1 ]] }
      {refalrts::icUpdateFunc, 0, 1, 4},
      {refalrts::icReinitChar, 0, '4', 8},
      {refalrts::icReinitBracket, 0, refalrts::ibCloseBracket, 9},
      {refalrts::icPushStack, 0, 0, 1},
      {refalrts::icPushStack, 0, 0, 0},
      {refalrts::icLinkBrackets, 7, 9, 0},
      {refalrts::icNextStep, 0, 0, 0},
      {refalrts::icProfilerStopSentence, 0, 0, 0},
      {refalrts::icOnFailGoTo, +10, 0, 0},
      // ( e.idx ) '5' e.idx
      // </0 & EscGroup-OCode/4 (/7 e.Accum#1/5 )/8 '5'/9 e.Text#1/2 >/1
      {refalrts::icSave, 0, 12, 2},
      {refalrts::icCharLeftSave, 9, static_cast<unsigned char>('5'), 12},
      // closed e.Accum#1 as range 5
      // closed e.Text#1 as range 12(2)
      //DEBUG: e.Accum#1: 5
      //DEBUG: e.Text#1: 2
      {refalrts::icEmptyResult, 0, 0, 0},
      //TRASH: {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 Reuse: & EscGroup-OCode-C1/4 AsIs: (/7 AsIs: e.Accum#1/5 HalfReuse: '5'/8 HalfReuse: )/9 AsIs: e.Text#1/12(2) AsIs: >/1 ]] }
      {refalrts::icUpdateFunc, 0, 1, 4},
      {refalrts::icReinitChar, 0, '5', 8},
      {refalrts::icReinitBracket, 0, refalrts::ibCloseBracket, 9},
      {refalrts::icPushStack, 0, 0, 1},
      {refalrts::icPushStack, 0, 0, 0},
      {refalrts::icLinkBrackets, 7, 9, 0},
      {refalrts::icNextStep, 0, 0, 0},
      {refalrts::icProfilerStopSentence, 0, 0, 0},
      {refalrts::icOnFailGoTo, +10, 0, 0},
      // ( e.idx ) '6' e.idx
      // </0 & EscGroup-OCode/4 (/7 e.Accum#1/5 )/8 '6'/9 e.Text#1/2 >/1
      {refalrts::icSave, 0, 12, 2},
      {refalrts::icCharLeftSave, 9, static_cast<unsigned char>('6'), 12},
      // closed e.Accum#1 as range 5
      // closed e.Text#1 as range 12(2)
      //DEBUG: e.Accum#1: 5
      //DEBUG: e.Text#1: 2
      {refalrts::icEmptyResult, 0, 0, 0},
      //TRASH: {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 Reuse: & EscGroup-OCode-C1/4 AsIs: (/7 AsIs: e.Accum#1/5 HalfReuse: '6'/8 HalfReuse: )/9 AsIs: e.Text#1/12(2) AsIs: >/1 ]] }
      {refalrts::icUpdateFunc, 0, 1, 4},
      {refalrts::icReinitChar, 0, '6', 8},
      {refalrts::icReinitBracket, 0, refalrts::ibCloseBracket, 9},
      {refalrts::icPushStack, 0, 0, 1},
      {refalrts::icPushStack, 0, 0, 0},
      {refalrts::icLinkBrackets, 7, 9, 0},
      {refalrts::icNextStep, 0, 0, 0},
      {refalrts::icProfilerStopSentence, 0, 0, 0},
      {refalrts::icOnFailGoTo, +10, 0, 0},
      // ( e.idx ) '7' e.idx
      // </0 & EscGroup-OCode/4 (/7 e.Accum#1/5 )/8 '7'/9 e.Text#1/2 >/1
      {refalrts::icSave, 0, 12, 2},
      {refalrts::icCharLeftSave, 9, static_cast<unsigned char>('7'), 12},
      // closed e.Accum#1 as range 5
      // closed e.Text#1 as range 12(2)
      //DEBUG: e.Accum#1: 5
      //DEBUG: e.Text#1: 2
      {refalrts::icEmptyResult, 0, 0, 0},
      //TRASH: {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 Reuse: & EscGroup-OCode-C1/4 AsIs: (/7 AsIs: e.Accum#1/5 HalfReuse: '7'/8 HalfReuse: )/9 AsIs: e.Text#1/12(2) AsIs: >/1 ]] }
      {refalrts::icUpdateFunc, 0, 1, 4},
      {refalrts::icReinitChar, 0, '7', 8},
      {refalrts::icReinitBracket, 0, refalrts::ibCloseBracket, 9},
      {refalrts::icPushStack, 0, 0, 1},
      {refalrts::icPushStack, 0, 0, 0},
      {refalrts::icLinkBrackets, 7, 9, 0},
      {refalrts::icNextStep, 0, 0, 0},
      {refalrts::icProfilerStopSentence, 0, 0, 0},
      // ( e.idx ) e.idx
      // </0 & EscGroup-OCode/4 (/7 e.Accum#1/5 )/8 e.Text#1/2 >/1
      // closed e.Accum#1 as range 5
      // closed e.Text#1 as range 2
      //DEBUG: e.Accum#1: 5
      //DEBUG: e.Text#1: 2
      {refalrts::icEmptyResult, 0, 0, 0},
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ } (/9 # TkOctNumber/10 Tile{ AsIs: e.Accum#1/5 } )/11 Tile{ AsIs: </0 Reuse: & ReadGroup/4 AsIs: (/7 } Tile{ AsIs: )/8 AsIs: e.Text#1/2 AsIs: >/1 ]] }
      {refalrts::icAllocBracket, 0, refalrts::ibOpenBracket, 9},
      {refalrts::icAllocIdent, 0, 0, 10},
      {refalrts::icAllocBracket, 0, refalrts::ibCloseBracket, 11},
      {refalrts::icUpdateFunc, 0, 0, 4},
      {refalrts::icPushStack, 0, 0, 1},
      {refalrts::icPushStack, 0, 0, 0},
      {refalrts::icLinkBrackets, 7, 8, 0},
      {refalrts::icLinkBrackets, 9, 11, 0},
      {refalrts::icSetRes, 0, 0, 8},
      {refalrts::icSpliceTile, 0, 7, 0},
      {refalrts::icSpliceTile, 11, 11, 0},
      {refalrts::icSpliceEVar, 0, 0, 5},
      {refalrts::icSpliceTile, 9, 10, 0},
      {refalrts::icNextStep, 0, 0, 0},
      {refalrts::icEnd, 0, 0, 0}
    };
  } // namespace scope_EscGroup_OCode

} // unnamed namespace

namespace /* unnamed */ {
refalrts::RASLFunction descr_EscGroup_OCode(
  "EscGroup-OCode",
  scope_EscGroup_OCode::raa,
  scope_EscGroup_OCode::functions,
  scope_EscGroup_OCode::idents,
  scope_EscGroup_OCode::numbers,
  scope_EscGroup_OCode::strings,
  scope_EscGroup_OCode::filename
);
refalrts::RefalFunction& EscGroup_OCode = descr_EscGroup_OCode;

} // unnamed namespace

#else
static refalrts::FnResult func_EscGroup_OCode(refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  refalrts::this_is_generated_function();
  // issue here memory for vars with 14 elems
  refalrts::Iter context[14];
  refalrts::zeros( context, 14 );
  //FAST GEN: ( e.$ ) e.$
  //GLOBAL GEN: ( e.$ ) e.$
  // </0 & EscGroup-OCode/4 (/7 e.idxB#0/5 )/8 e.idxT#0/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  context[5] = 0;
  context[6] = 0;
  context[7] = refalrts::brackets_left( context[5], context[6], context[2], context[3] );
  if( ! context[7] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[7], context[8]);
  // closed e.idxB#0 as range 5
  // closed e.idxT#0 as range 2
  do {
    // ( e.idx ) '0' e.idx
    // </0 & EscGroup-OCode/4 (/7 e.Accum#1/5 )/8 '0'/9 e.Text#1/2 >/1
    context[12] = context[2];
    context[13] = context[3];
    context[9] = refalrts::char_left( '0', context[12], context[13] );
    if( ! context[9] )
      continue;
    // closed e.Accum#1 as range 5
    // closed e.Text#1 as range 12(2)
    //DEBUG: e.Accum#1: 5
    //DEBUG: e.Text#1: 2

    refalrts::reset_allocator();
    //TRASH: {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 Reuse: & EscGroup-OCode-C1/4 AsIs: (/7 AsIs: e.Accum#1/5 HalfReuse: '0'/8 HalfReuse: )/9 AsIs: e.Text#1/12(2) AsIs: >/1 ]] }
    refalrts::update_name( context[4], & EscGroup_OCode_C1 );
    refalrts::reinit_char( context[8], '0' );
    refalrts::reinit_close_bracket( context[9] );
    refalrts::push_stack( context[1] );
    refalrts::push_stack( context[0] );
    refalrts::link_brackets( context[7], context[9] );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence();

  do {
    // ( e.idx ) '1' e.idx
    // </0 & EscGroup-OCode/4 (/7 e.Accum#1/5 )/8 '1'/9 e.Text#1/2 >/1
    context[12] = context[2];
    context[13] = context[3];
    context[9] = refalrts::char_left( '1', context[12], context[13] );
    if( ! context[9] )
      continue;
    // closed e.Accum#1 as range 5
    // closed e.Text#1 as range 12(2)
    //DEBUG: e.Accum#1: 5
    //DEBUG: e.Text#1: 2

    refalrts::reset_allocator();
    //TRASH: {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 Reuse: & EscGroup-OCode-C1/4 AsIs: (/7 AsIs: e.Accum#1/5 HalfReuse: '1'/8 HalfReuse: )/9 AsIs: e.Text#1/12(2) AsIs: >/1 ]] }
    refalrts::update_name( context[4], & EscGroup_OCode_C1 );
    refalrts::reinit_char( context[8], '1' );
    refalrts::reinit_close_bracket( context[9] );
    refalrts::push_stack( context[1] );
    refalrts::push_stack( context[0] );
    refalrts::link_brackets( context[7], context[9] );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence();

  do {
    // ( e.idx ) '2' e.idx
    // </0 & EscGroup-OCode/4 (/7 e.Accum#1/5 )/8 '2'/9 e.Text#1/2 >/1
    context[12] = context[2];
    context[13] = context[3];
    context[9] = refalrts::char_left( '2', context[12], context[13] );
    if( ! context[9] )
      continue;
    // closed e.Accum#1 as range 5
    // closed e.Text#1 as range 12(2)
    //DEBUG: e.Accum#1: 5
    //DEBUG: e.Text#1: 2

    refalrts::reset_allocator();
    //TRASH: {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 Reuse: & EscGroup-OCode-C1/4 AsIs: (/7 AsIs: e.Accum#1/5 HalfReuse: '2'/8 HalfReuse: )/9 AsIs: e.Text#1/12(2) AsIs: >/1 ]] }
    refalrts::update_name( context[4], & EscGroup_OCode_C1 );
    refalrts::reinit_char( context[8], '2' );
    refalrts::reinit_close_bracket( context[9] );
    refalrts::push_stack( context[1] );
    refalrts::push_stack( context[0] );
    refalrts::link_brackets( context[7], context[9] );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence();

  do {
    // ( e.idx ) '3' e.idx
    // </0 & EscGroup-OCode/4 (/7 e.Accum#1/5 )/8 '3'/9 e.Text#1/2 >/1
    context[12] = context[2];
    context[13] = context[3];
    context[9] = refalrts::char_left( '3', context[12], context[13] );
    if( ! context[9] )
      continue;
    // closed e.Accum#1 as range 5
    // closed e.Text#1 as range 12(2)
    //DEBUG: e.Accum#1: 5
    //DEBUG: e.Text#1: 2

    refalrts::reset_allocator();
    //TRASH: {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 Reuse: & EscGroup-OCode-C1/4 AsIs: (/7 AsIs: e.Accum#1/5 HalfReuse: '3'/8 HalfReuse: )/9 AsIs: e.Text#1/12(2) AsIs: >/1 ]] }
    refalrts::update_name( context[4], & EscGroup_OCode_C1 );
    refalrts::reinit_char( context[8], '3' );
    refalrts::reinit_close_bracket( context[9] );
    refalrts::push_stack( context[1] );
    refalrts::push_stack( context[0] );
    refalrts::link_brackets( context[7], context[9] );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence();

  do {
    // ( e.idx ) '4' e.idx
    // </0 & EscGroup-OCode/4 (/7 e.Accum#1/5 )/8 '4'/9 e.Text#1/2 >/1
    context[12] = context[2];
    context[13] = context[3];
    context[9] = refalrts::char_left( '4', context[12], context[13] );
    if( ! context[9] )
      continue;
    // closed e.Accum#1 as range 5
    // closed e.Text#1 as range 12(2)
    //DEBUG: e.Accum#1: 5
    //DEBUG: e.Text#1: 2

    refalrts::reset_allocator();
    //TRASH: {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 Reuse: & EscGroup-OCode-C1/4 AsIs: (/7 AsIs: e.Accum#1/5 HalfReuse: '4'/8 HalfReuse: )/9 AsIs: e.Text#1/12(2) AsIs: >/1 ]] }
    refalrts::update_name( context[4], & EscGroup_OCode_C1 );
    refalrts::reinit_char( context[8], '4' );
    refalrts::reinit_close_bracket( context[9] );
    refalrts::push_stack( context[1] );
    refalrts::push_stack( context[0] );
    refalrts::link_brackets( context[7], context[9] );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence();

  do {
    // ( e.idx ) '5' e.idx
    // </0 & EscGroup-OCode/4 (/7 e.Accum#1/5 )/8 '5'/9 e.Text#1/2 >/1
    context[12] = context[2];
    context[13] = context[3];
    context[9] = refalrts::char_left( '5', context[12], context[13] );
    if( ! context[9] )
      continue;
    // closed e.Accum#1 as range 5
    // closed e.Text#1 as range 12(2)
    //DEBUG: e.Accum#1: 5
    //DEBUG: e.Text#1: 2

    refalrts::reset_allocator();
    //TRASH: {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 Reuse: & EscGroup-OCode-C1/4 AsIs: (/7 AsIs: e.Accum#1/5 HalfReuse: '5'/8 HalfReuse: )/9 AsIs: e.Text#1/12(2) AsIs: >/1 ]] }
    refalrts::update_name( context[4], & EscGroup_OCode_C1 );
    refalrts::reinit_char( context[8], '5' );
    refalrts::reinit_close_bracket( context[9] );
    refalrts::push_stack( context[1] );
    refalrts::push_stack( context[0] );
    refalrts::link_brackets( context[7], context[9] );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence();

  do {
    // ( e.idx ) '6' e.idx
    // </0 & EscGroup-OCode/4 (/7 e.Accum#1/5 )/8 '6'/9 e.Text#1/2 >/1
    context[12] = context[2];
    context[13] = context[3];
    context[9] = refalrts::char_left( '6', context[12], context[13] );
    if( ! context[9] )
      continue;
    // closed e.Accum#1 as range 5
    // closed e.Text#1 as range 12(2)
    //DEBUG: e.Accum#1: 5
    //DEBUG: e.Text#1: 2

    refalrts::reset_allocator();
    //TRASH: {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 Reuse: & EscGroup-OCode-C1/4 AsIs: (/7 AsIs: e.Accum#1/5 HalfReuse: '6'/8 HalfReuse: )/9 AsIs: e.Text#1/12(2) AsIs: >/1 ]] }
    refalrts::update_name( context[4], & EscGroup_OCode_C1 );
    refalrts::reinit_char( context[8], '6' );
    refalrts::reinit_close_bracket( context[9] );
    refalrts::push_stack( context[1] );
    refalrts::push_stack( context[0] );
    refalrts::link_brackets( context[7], context[9] );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence();

  do {
    // ( e.idx ) '7' e.idx
    // </0 & EscGroup-OCode/4 (/7 e.Accum#1/5 )/8 '7'/9 e.Text#1/2 >/1
    context[12] = context[2];
    context[13] = context[3];
    context[9] = refalrts::char_left( '7', context[12], context[13] );
    if( ! context[9] )
      continue;
    // closed e.Accum#1 as range 5
    // closed e.Text#1 as range 12(2)
    //DEBUG: e.Accum#1: 5
    //DEBUG: e.Text#1: 2

    refalrts::reset_allocator();
    //TRASH: {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 Reuse: & EscGroup-OCode-C1/4 AsIs: (/7 AsIs: e.Accum#1/5 HalfReuse: '7'/8 HalfReuse: )/9 AsIs: e.Text#1/12(2) AsIs: >/1 ]] }
    refalrts::update_name( context[4], & EscGroup_OCode_C1 );
    refalrts::reinit_char( context[8], '7' );
    refalrts::reinit_close_bracket( context[9] );
    refalrts::push_stack( context[1] );
    refalrts::push_stack( context[0] );
    refalrts::link_brackets( context[7], context[9] );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence();

  // ( e.idx ) e.idx
  // </0 & EscGroup-OCode/4 (/7 e.Accum#1/5 )/8 e.Text#1/2 >/1
  // closed e.Accum#1 as range 5
  // closed e.Text#1 as range 2
  //DEBUG: e.Accum#1: 5
  //DEBUG: e.Text#1: 2

  refalrts::reset_allocator();
  //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ } (/9 # TkOctNumber/10 Tile{ AsIs: e.Accum#1/5 } )/11 Tile{ AsIs: </0 Reuse: & ReadGroup/4 AsIs: (/7 } Tile{ AsIs: )/8 AsIs: e.Text#1/2 AsIs: >/1 ]] }
  if( ! refalrts::alloc_open_bracket( context[9] ) )
    return refalrts::cNoMemory;
  if( ! refalrts::alloc_ident( context[10], & ident_TkOctNumber<int>::name ) )
    return refalrts::cNoMemory;
  if( ! refalrts::alloc_close_bracket( context[11] ) )
    return refalrts::cNoMemory;
  refalrts::update_name( context[4], & ReadGroup );
  refalrts::push_stack( context[1] );
  refalrts::push_stack( context[0] );
  refalrts::link_brackets( context[7], context[8] );
  refalrts::link_brackets( context[9], context[11] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[8];
  res = refalrts::splice_evar( res, context[0], context[7] );
  res = refalrts::splice_evar( res, context[11], context[11] );
  res = refalrts::splice_evar( res, context[5], context[6] );
  res = refalrts::splice_evar( res, context[9], context[10] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

namespace /* unnamed */ {
refalrts::RefalNativeFunction descr_EscGroup_OCode(func_EscGroup_OCode, "EscGroup-OCode");
refalrts::RefalFunction& EscGroup_OCode = descr_EscGroup_OCode;

} // unnamed namespace

#endif
#ifdef INTERPRET
namespace /* unnamed */ {
  namespace scope_EscGroup_OCode_C1 {
    static const char *filename = "Flex-Lexer.cpp";
    static refalrts::RefalFunction *functions[] = {
      & ReadGroup
    };
    static const refalrts::RefalIdentifier idents[] = {
      & ident_TkOctNumber<int>::name
    };
    using refalrts::numbers;
    using refalrts::strings;
    static const refalrts::RASLCommand raa[] = {
      {refalrts::icThisIsGeneratedFunction, 0, 0, 0},
      {refalrts::icLoadConstants, 0, 0, 0},
      {refalrts::icReserveBacktrackStack, 8, 0, 0},
      {refalrts::icIssueMemory, 15, 0, 0},
      //FAST GEN: ( e.$ ) e.$
      //GLOBAL GEN: ( e.$ ) e.$
      // </0 & EscGroup-OCode-C1/4 (/7 e.idxB#0/5 )/8 e.idxT#0/2 >/1
      {refalrts::icInitB0_Lite, 0, 0, 0},
      {refalrts::icCallSaveLeft, 0, 2, 0},
      {refalrts::icBracketLeftSave, 0, 5, 2},
      // closed e.idxB#0 as range 5
      // closed e.idxT#0 as range 2
      {refalrts::icOnFailGoTo, +21, 0, 0},
      // ( e.idx ) '0' e.idx
      // </0 & EscGroup-OCode-C1/4 (/7 e.Accum#1/5 )/8 '0'/9 e.Text#1/2 >/1
      {refalrts::icSave, 0, 13, 2},
      {refalrts::icCharLeftSave, 9, static_cast<unsigned char>('0'), 13},
      // closed e.Accum#1 as range 5
      // closed e.Text#1 as range 13(2)
      //DEBUG: e.Accum#1: 5
      //DEBUG: e.Text#1: 2
      {refalrts::icEmptyResult, 0, 0, 0},
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ HalfReuse: (/0 HalfReuse: # TkOctNumber/4 } Tile{ AsIs: e.Accum#1/5 } '0'/10 Tile{ HalfReuse: )/7 } </11 & ReadGroup/12 Tile{ HalfReuse: (/8 HalfReuse: )/9 AsIs: e.Text#1/13(2) AsIs: >/1 ]] }
      {refalrts::icAllocChar, 0, '0', 10},
      {refalrts::icAllocBracket, 0, refalrts::ibOpenCall, 11},
      {refalrts::icAllocFunc, 0, 0, 12},
      {refalrts::icReinitBracket, 0, refalrts::ibOpenBracket, 0},
      {refalrts::icReinitIdent, 0, 0, 4},
      {refalrts::icReinitBracket, 0, refalrts::ibCloseBracket, 7},
      {refalrts::icReinitBracket, 0, refalrts::ibOpenBracket, 8},
      {refalrts::icReinitBracket, 0, refalrts::ibCloseBracket, 9},
      {refalrts::icPushStack, 0, 0, 1},
      {refalrts::icPushStack, 0, 0, 11},
      {refalrts::icLinkBrackets, 8, 9, 0},
      {refalrts::icLinkBrackets, 0, 7, 0},
      {refalrts::icSetRes, 0, 0, 8},
      {refalrts::icSpliceTile, 11, 12, 0},
      {refalrts::icSpliceTile, 7, 7, 0},
      {refalrts::icSpliceTile, 10, 10, 0},
      {refalrts::icSpliceEVar, 0, 0, 5},
      {refalrts::icNextStep, 0, 0, 0},
      {refalrts::icProfilerStopSentence, 0, 0, 0},
      {refalrts::icOnFailGoTo, +21, 0, 0},
      // ( e.idx ) '1' e.idx
      // </0 & EscGroup-OCode-C1/4 (/7 e.Accum#1/5 )/8 '1'/9 e.Text#1/2 >/1
      {refalrts::icSave, 0, 13, 2},
      {refalrts::icCharLeftSave, 9, static_cast<unsigned char>('1'), 13},
      // closed e.Accum#1 as range 5
      // closed e.Text#1 as range 13(2)
      //DEBUG: e.Accum#1: 5
      //DEBUG: e.Text#1: 2
      {refalrts::icEmptyResult, 0, 0, 0},
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ HalfReuse: (/0 HalfReuse: # TkOctNumber/4 } Tile{ AsIs: e.Accum#1/5 } '1'/10 Tile{ HalfReuse: )/7 } </11 & ReadGroup/12 Tile{ HalfReuse: (/8 HalfReuse: )/9 AsIs: e.Text#1/13(2) AsIs: >/1 ]] }
      {refalrts::icAllocChar, 0, '1', 10},
      {refalrts::icAllocBracket, 0, refalrts::ibOpenCall, 11},
      {refalrts::icAllocFunc, 0, 0, 12},
      {refalrts::icReinitBracket, 0, refalrts::ibOpenBracket, 0},
      {refalrts::icReinitIdent, 0, 0, 4},
      {refalrts::icReinitBracket, 0, refalrts::ibCloseBracket, 7},
      {refalrts::icReinitBracket, 0, refalrts::ibOpenBracket, 8},
      {refalrts::icReinitBracket, 0, refalrts::ibCloseBracket, 9},
      {refalrts::icPushStack, 0, 0, 1},
      {refalrts::icPushStack, 0, 0, 11},
      {refalrts::icLinkBrackets, 8, 9, 0},
      {refalrts::icLinkBrackets, 0, 7, 0},
      {refalrts::icSetRes, 0, 0, 8},
      {refalrts::icSpliceTile, 11, 12, 0},
      {refalrts::icSpliceTile, 7, 7, 0},
      {refalrts::icSpliceTile, 10, 10, 0},
      {refalrts::icSpliceEVar, 0, 0, 5},
      {refalrts::icNextStep, 0, 0, 0},
      {refalrts::icProfilerStopSentence, 0, 0, 0},
      {refalrts::icOnFailGoTo, +21, 0, 0},
      // ( e.idx ) '2' e.idx
      // </0 & EscGroup-OCode-C1/4 (/7 e.Accum#1/5 )/8 '2'/9 e.Text#1/2 >/1
      {refalrts::icSave, 0, 13, 2},
      {refalrts::icCharLeftSave, 9, static_cast<unsigned char>('2'), 13},
      // closed e.Accum#1 as range 5
      // closed e.Text#1 as range 13(2)
      //DEBUG: e.Accum#1: 5
      //DEBUG: e.Text#1: 2
      {refalrts::icEmptyResult, 0, 0, 0},
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ HalfReuse: (/0 HalfReuse: # TkOctNumber/4 } Tile{ AsIs: e.Accum#1/5 } '2'/10 Tile{ HalfReuse: )/7 } </11 & ReadGroup/12 Tile{ HalfReuse: (/8 HalfReuse: )/9 AsIs: e.Text#1/13(2) AsIs: >/1 ]] }
      {refalrts::icAllocChar, 0, '2', 10},
      {refalrts::icAllocBracket, 0, refalrts::ibOpenCall, 11},
      {refalrts::icAllocFunc, 0, 0, 12},
      {refalrts::icReinitBracket, 0, refalrts::ibOpenBracket, 0},
      {refalrts::icReinitIdent, 0, 0, 4},
      {refalrts::icReinitBracket, 0, refalrts::ibCloseBracket, 7},
      {refalrts::icReinitBracket, 0, refalrts::ibOpenBracket, 8},
      {refalrts::icReinitBracket, 0, refalrts::ibCloseBracket, 9},
      {refalrts::icPushStack, 0, 0, 1},
      {refalrts::icPushStack, 0, 0, 11},
      {refalrts::icLinkBrackets, 8, 9, 0},
      {refalrts::icLinkBrackets, 0, 7, 0},
      {refalrts::icSetRes, 0, 0, 8},
      {refalrts::icSpliceTile, 11, 12, 0},
      {refalrts::icSpliceTile, 7, 7, 0},
      {refalrts::icSpliceTile, 10, 10, 0},
      {refalrts::icSpliceEVar, 0, 0, 5},
      {refalrts::icNextStep, 0, 0, 0},
      {refalrts::icProfilerStopSentence, 0, 0, 0},
      {refalrts::icOnFailGoTo, +21, 0, 0},
      // ( e.idx ) '3' e.idx
      // </0 & EscGroup-OCode-C1/4 (/7 e.Accum#1/5 )/8 '3'/9 e.Text#1/2 >/1
      {refalrts::icSave, 0, 13, 2},
      {refalrts::icCharLeftSave, 9, static_cast<unsigned char>('3'), 13},
      // closed e.Accum#1 as range 5
      // closed e.Text#1 as range 13(2)
      //DEBUG: e.Accum#1: 5
      //DEBUG: e.Text#1: 2
      {refalrts::icEmptyResult, 0, 0, 0},
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ HalfReuse: (/0 HalfReuse: # TkOctNumber/4 } Tile{ AsIs: e.Accum#1/5 } '3'/10 Tile{ HalfReuse: )/7 } </11 & ReadGroup/12 Tile{ HalfReuse: (/8 HalfReuse: )/9 AsIs: e.Text#1/13(2) AsIs: >/1 ]] }
      {refalrts::icAllocChar, 0, '3', 10},
      {refalrts::icAllocBracket, 0, refalrts::ibOpenCall, 11},
      {refalrts::icAllocFunc, 0, 0, 12},
      {refalrts::icReinitBracket, 0, refalrts::ibOpenBracket, 0},
      {refalrts::icReinitIdent, 0, 0, 4},
      {refalrts::icReinitBracket, 0, refalrts::ibCloseBracket, 7},
      {refalrts::icReinitBracket, 0, refalrts::ibOpenBracket, 8},
      {refalrts::icReinitBracket, 0, refalrts::ibCloseBracket, 9},
      {refalrts::icPushStack, 0, 0, 1},
      {refalrts::icPushStack, 0, 0, 11},
      {refalrts::icLinkBrackets, 8, 9, 0},
      {refalrts::icLinkBrackets, 0, 7, 0},
      {refalrts::icSetRes, 0, 0, 8},
      {refalrts::icSpliceTile, 11, 12, 0},
      {refalrts::icSpliceTile, 7, 7, 0},
      {refalrts::icSpliceTile, 10, 10, 0},
      {refalrts::icSpliceEVar, 0, 0, 5},
      {refalrts::icNextStep, 0, 0, 0},
      {refalrts::icProfilerStopSentence, 0, 0, 0},
      {refalrts::icOnFailGoTo, +21, 0, 0},
      // ( e.idx ) '4' e.idx
      // </0 & EscGroup-OCode-C1/4 (/7 e.Accum#1/5 )/8 '4'/9 e.Text#1/2 >/1
      {refalrts::icSave, 0, 13, 2},
      {refalrts::icCharLeftSave, 9, static_cast<unsigned char>('4'), 13},
      // closed e.Accum#1 as range 5
      // closed e.Text#1 as range 13(2)
      //DEBUG: e.Accum#1: 5
      //DEBUG: e.Text#1: 2
      {refalrts::icEmptyResult, 0, 0, 0},
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ HalfReuse: (/0 HalfReuse: # TkOctNumber/4 } Tile{ AsIs: e.Accum#1/5 } '4'/10 Tile{ HalfReuse: )/7 } </11 & ReadGroup/12 Tile{ HalfReuse: (/8 HalfReuse: )/9 AsIs: e.Text#1/13(2) AsIs: >/1 ]] }
      {refalrts::icAllocChar, 0, '4', 10},
      {refalrts::icAllocBracket, 0, refalrts::ibOpenCall, 11},
      {refalrts::icAllocFunc, 0, 0, 12},
      {refalrts::icReinitBracket, 0, refalrts::ibOpenBracket, 0},
      {refalrts::icReinitIdent, 0, 0, 4},
      {refalrts::icReinitBracket, 0, refalrts::ibCloseBracket, 7},
      {refalrts::icReinitBracket, 0, refalrts::ibOpenBracket, 8},
      {refalrts::icReinitBracket, 0, refalrts::ibCloseBracket, 9},
      {refalrts::icPushStack, 0, 0, 1},
      {refalrts::icPushStack, 0, 0, 11},
      {refalrts::icLinkBrackets, 8, 9, 0},
      {refalrts::icLinkBrackets, 0, 7, 0},
      {refalrts::icSetRes, 0, 0, 8},
      {refalrts::icSpliceTile, 11, 12, 0},
      {refalrts::icSpliceTile, 7, 7, 0},
      {refalrts::icSpliceTile, 10, 10, 0},
      {refalrts::icSpliceEVar, 0, 0, 5},
      {refalrts::icNextStep, 0, 0, 0},
      {refalrts::icProfilerStopSentence, 0, 0, 0},
      {refalrts::icOnFailGoTo, +21, 0, 0},
      // ( e.idx ) '5' e.idx
      // </0 & EscGroup-OCode-C1/4 (/7 e.Accum#1/5 )/8 '5'/9 e.Text#1/2 >/1
      {refalrts::icSave, 0, 13, 2},
      {refalrts::icCharLeftSave, 9, static_cast<unsigned char>('5'), 13},
      // closed e.Accum#1 as range 5
      // closed e.Text#1 as range 13(2)
      //DEBUG: e.Accum#1: 5
      //DEBUG: e.Text#1: 2
      {refalrts::icEmptyResult, 0, 0, 0},
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ HalfReuse: (/0 HalfReuse: # TkOctNumber/4 } Tile{ AsIs: e.Accum#1/5 } '5'/10 Tile{ HalfReuse: )/7 } </11 & ReadGroup/12 Tile{ HalfReuse: (/8 HalfReuse: )/9 AsIs: e.Text#1/13(2) AsIs: >/1 ]] }
      {refalrts::icAllocChar, 0, '5', 10},
      {refalrts::icAllocBracket, 0, refalrts::ibOpenCall, 11},
      {refalrts::icAllocFunc, 0, 0, 12},
      {refalrts::icReinitBracket, 0, refalrts::ibOpenBracket, 0},
      {refalrts::icReinitIdent, 0, 0, 4},
      {refalrts::icReinitBracket, 0, refalrts::ibCloseBracket, 7},
      {refalrts::icReinitBracket, 0, refalrts::ibOpenBracket, 8},
      {refalrts::icReinitBracket, 0, refalrts::ibCloseBracket, 9},
      {refalrts::icPushStack, 0, 0, 1},
      {refalrts::icPushStack, 0, 0, 11},
      {refalrts::icLinkBrackets, 8, 9, 0},
      {refalrts::icLinkBrackets, 0, 7, 0},
      {refalrts::icSetRes, 0, 0, 8},
      {refalrts::icSpliceTile, 11, 12, 0},
      {refalrts::icSpliceTile, 7, 7, 0},
      {refalrts::icSpliceTile, 10, 10, 0},
      {refalrts::icSpliceEVar, 0, 0, 5},
      {refalrts::icNextStep, 0, 0, 0},
      {refalrts::icProfilerStopSentence, 0, 0, 0},
      {refalrts::icOnFailGoTo, +21, 0, 0},
      // ( e.idx ) '6' e.idx
      // </0 & EscGroup-OCode-C1/4 (/7 e.Accum#1/5 )/8 '6'/9 e.Text#1/2 >/1
      {refalrts::icSave, 0, 13, 2},
      {refalrts::icCharLeftSave, 9, static_cast<unsigned char>('6'), 13},
      // closed e.Accum#1 as range 5
      // closed e.Text#1 as range 13(2)
      //DEBUG: e.Accum#1: 5
      //DEBUG: e.Text#1: 2
      {refalrts::icEmptyResult, 0, 0, 0},
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ HalfReuse: (/0 HalfReuse: # TkOctNumber/4 } Tile{ AsIs: e.Accum#1/5 } '6'/10 Tile{ HalfReuse: )/7 } </11 & ReadGroup/12 Tile{ HalfReuse: (/8 HalfReuse: )/9 AsIs: e.Text#1/13(2) AsIs: >/1 ]] }
      {refalrts::icAllocChar, 0, '6', 10},
      {refalrts::icAllocBracket, 0, refalrts::ibOpenCall, 11},
      {refalrts::icAllocFunc, 0, 0, 12},
      {refalrts::icReinitBracket, 0, refalrts::ibOpenBracket, 0},
      {refalrts::icReinitIdent, 0, 0, 4},
      {refalrts::icReinitBracket, 0, refalrts::ibCloseBracket, 7},
      {refalrts::icReinitBracket, 0, refalrts::ibOpenBracket, 8},
      {refalrts::icReinitBracket, 0, refalrts::ibCloseBracket, 9},
      {refalrts::icPushStack, 0, 0, 1},
      {refalrts::icPushStack, 0, 0, 11},
      {refalrts::icLinkBrackets, 8, 9, 0},
      {refalrts::icLinkBrackets, 0, 7, 0},
      {refalrts::icSetRes, 0, 0, 8},
      {refalrts::icSpliceTile, 11, 12, 0},
      {refalrts::icSpliceTile, 7, 7, 0},
      {refalrts::icSpliceTile, 10, 10, 0},
      {refalrts::icSpliceEVar, 0, 0, 5},
      {refalrts::icNextStep, 0, 0, 0},
      {refalrts::icProfilerStopSentence, 0, 0, 0},
      {refalrts::icOnFailGoTo, +21, 0, 0},
      // ( e.idx ) '7' e.idx
      // </0 & EscGroup-OCode-C1/4 (/7 e.Accum#1/5 )/8 '7'/9 e.Text#1/2 >/1
      {refalrts::icSave, 0, 13, 2},
      {refalrts::icCharLeftSave, 9, static_cast<unsigned char>('7'), 13},
      // closed e.Accum#1 as range 5
      // closed e.Text#1 as range 13(2)
      //DEBUG: e.Accum#1: 5
      //DEBUG: e.Text#1: 2
      {refalrts::icEmptyResult, 0, 0, 0},
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ HalfReuse: (/0 HalfReuse: # TkOctNumber/4 } Tile{ AsIs: e.Accum#1/5 } '7'/10 Tile{ HalfReuse: )/7 } </11 & ReadGroup/12 Tile{ HalfReuse: (/8 HalfReuse: )/9 AsIs: e.Text#1/13(2) AsIs: >/1 ]] }
      {refalrts::icAllocChar, 0, '7', 10},
      {refalrts::icAllocBracket, 0, refalrts::ibOpenCall, 11},
      {refalrts::icAllocFunc, 0, 0, 12},
      {refalrts::icReinitBracket, 0, refalrts::ibOpenBracket, 0},
      {refalrts::icReinitIdent, 0, 0, 4},
      {refalrts::icReinitBracket, 0, refalrts::ibCloseBracket, 7},
      {refalrts::icReinitBracket, 0, refalrts::ibOpenBracket, 8},
      {refalrts::icReinitBracket, 0, refalrts::ibCloseBracket, 9},
      {refalrts::icPushStack, 0, 0, 1},
      {refalrts::icPushStack, 0, 0, 11},
      {refalrts::icLinkBrackets, 8, 9, 0},
      {refalrts::icLinkBrackets, 0, 7, 0},
      {refalrts::icSetRes, 0, 0, 8},
      {refalrts::icSpliceTile, 11, 12, 0},
      {refalrts::icSpliceTile, 7, 7, 0},
      {refalrts::icSpliceTile, 10, 10, 0},
      {refalrts::icSpliceEVar, 0, 0, 5},
      {refalrts::icNextStep, 0, 0, 0},
      {refalrts::icProfilerStopSentence, 0, 0, 0},
      // ( e.idx ) e.idx
      // </0 & EscGroup-OCode-C1/4 (/7 e.Accum#1/5 )/8 e.Text#1/2 >/1
      // closed e.Accum#1 as range 5
      // closed e.Text#1 as range 2
      //DEBUG: e.Accum#1: 5
      //DEBUG: e.Text#1: 2
      {refalrts::icEmptyResult, 0, 0, 0},
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ } (/9 # TkOctNumber/10 Tile{ AsIs: e.Accum#1/5 } )/11 Tile{ AsIs: </0 Reuse: & ReadGroup/4 AsIs: (/7 } Tile{ AsIs: )/8 AsIs: e.Text#1/2 AsIs: >/1 ]] }
      {refalrts::icAllocBracket, 0, refalrts::ibOpenBracket, 9},
      {refalrts::icAllocIdent, 0, 0, 10},
      {refalrts::icAllocBracket, 0, refalrts::ibCloseBracket, 11},
      {refalrts::icUpdateFunc, 0, 0, 4},
      {refalrts::icPushStack, 0, 0, 1},
      {refalrts::icPushStack, 0, 0, 0},
      {refalrts::icLinkBrackets, 7, 8, 0},
      {refalrts::icLinkBrackets, 9, 11, 0},
      {refalrts::icSetRes, 0, 0, 8},
      {refalrts::icSpliceTile, 0, 7, 0},
      {refalrts::icSpliceTile, 11, 11, 0},
      {refalrts::icSpliceEVar, 0, 0, 5},
      {refalrts::icSpliceTile, 9, 10, 0},
      {refalrts::icNextStep, 0, 0, 0},
      {refalrts::icEnd, 0, 0, 0}
    };
  } // namespace scope_EscGroup_OCode_C1

} // unnamed namespace

namespace /* unnamed */ {
refalrts::RASLFunction descr_EscGroup_OCode_C1(
  "EscGroup-OCode-C1",
  scope_EscGroup_OCode_C1::raa,
  scope_EscGroup_OCode_C1::functions,
  scope_EscGroup_OCode_C1::idents,
  scope_EscGroup_OCode_C1::numbers,
  scope_EscGroup_OCode_C1::strings,
  scope_EscGroup_OCode_C1::filename
);
refalrts::RefalFunction& EscGroup_OCode_C1 = descr_EscGroup_OCode_C1;

} // unnamed namespace

#else
static refalrts::FnResult func_EscGroup_OCode_C1(refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  refalrts::this_is_generated_function();
  // issue here memory for vars with 15 elems
  refalrts::Iter context[15];
  refalrts::zeros( context, 15 );
  //FAST GEN: ( e.$ ) e.$
  //GLOBAL GEN: ( e.$ ) e.$
  // </0 & EscGroup-OCode-C1/4 (/7 e.idxB#0/5 )/8 e.idxT#0/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  context[5] = 0;
  context[6] = 0;
  context[7] = refalrts::brackets_left( context[5], context[6], context[2], context[3] );
  if( ! context[7] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[7], context[8]);
  // closed e.idxB#0 as range 5
  // closed e.idxT#0 as range 2
  do {
    // ( e.idx ) '0' e.idx
    // </0 & EscGroup-OCode-C1/4 (/7 e.Accum#1/5 )/8 '0'/9 e.Text#1/2 >/1
    context[13] = context[2];
    context[14] = context[3];
    context[9] = refalrts::char_left( '0', context[13], context[14] );
    if( ! context[9] )
      continue;
    // closed e.Accum#1 as range 5
    // closed e.Text#1 as range 13(2)
    //DEBUG: e.Accum#1: 5
    //DEBUG: e.Text#1: 2

    refalrts::reset_allocator();
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ HalfReuse: (/0 HalfReuse: # TkOctNumber/4 } Tile{ AsIs: e.Accum#1/5 } '0'/10 Tile{ HalfReuse: )/7 } </11 & ReadGroup/12 Tile{ HalfReuse: (/8 HalfReuse: )/9 AsIs: e.Text#1/13(2) AsIs: >/1 ]] }
    if( ! refalrts::alloc_char( context[10], '0' ) )
      return refalrts::cNoMemory;
    if( ! refalrts::alloc_open_call( context[11] ) )
      return refalrts::cNoMemory;
    if( ! refalrts::alloc_name( context[12], & ReadGroup ) )
      return refalrts::cNoMemory;
    refalrts::reinit_open_bracket( context[0] );
    refalrts::reinit_ident( context[4], & ident_TkOctNumber<int>::name );
    refalrts::reinit_close_bracket( context[7] );
    refalrts::reinit_open_bracket( context[8] );
    refalrts::reinit_close_bracket( context[9] );
    refalrts::push_stack( context[1] );
    refalrts::push_stack( context[11] );
    refalrts::link_brackets( context[8], context[9] );
    refalrts::link_brackets( context[0], context[7] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[8];
    res = refalrts::splice_evar( res, context[11], context[12] );
    res = refalrts::splice_evar( res, context[7], context[7] );
    res = refalrts::splice_evar( res, context[10], context[10] );
    res = refalrts::splice_evar( res, context[5], context[6] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence();

  do {
    // ( e.idx ) '1' e.idx
    // </0 & EscGroup-OCode-C1/4 (/7 e.Accum#1/5 )/8 '1'/9 e.Text#1/2 >/1
    context[13] = context[2];
    context[14] = context[3];
    context[9] = refalrts::char_left( '1', context[13], context[14] );
    if( ! context[9] )
      continue;
    // closed e.Accum#1 as range 5
    // closed e.Text#1 as range 13(2)
    //DEBUG: e.Accum#1: 5
    //DEBUG: e.Text#1: 2

    refalrts::reset_allocator();
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ HalfReuse: (/0 HalfReuse: # TkOctNumber/4 } Tile{ AsIs: e.Accum#1/5 } '1'/10 Tile{ HalfReuse: )/7 } </11 & ReadGroup/12 Tile{ HalfReuse: (/8 HalfReuse: )/9 AsIs: e.Text#1/13(2) AsIs: >/1 ]] }
    if( ! refalrts::alloc_char( context[10], '1' ) )
      return refalrts::cNoMemory;
    if( ! refalrts::alloc_open_call( context[11] ) )
      return refalrts::cNoMemory;
    if( ! refalrts::alloc_name( context[12], & ReadGroup ) )
      return refalrts::cNoMemory;
    refalrts::reinit_open_bracket( context[0] );
    refalrts::reinit_ident( context[4], & ident_TkOctNumber<int>::name );
    refalrts::reinit_close_bracket( context[7] );
    refalrts::reinit_open_bracket( context[8] );
    refalrts::reinit_close_bracket( context[9] );
    refalrts::push_stack( context[1] );
    refalrts::push_stack( context[11] );
    refalrts::link_brackets( context[8], context[9] );
    refalrts::link_brackets( context[0], context[7] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[8];
    res = refalrts::splice_evar( res, context[11], context[12] );
    res = refalrts::splice_evar( res, context[7], context[7] );
    res = refalrts::splice_evar( res, context[10], context[10] );
    res = refalrts::splice_evar( res, context[5], context[6] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence();

  do {
    // ( e.idx ) '2' e.idx
    // </0 & EscGroup-OCode-C1/4 (/7 e.Accum#1/5 )/8 '2'/9 e.Text#1/2 >/1
    context[13] = context[2];
    context[14] = context[3];
    context[9] = refalrts::char_left( '2', context[13], context[14] );
    if( ! context[9] )
      continue;
    // closed e.Accum#1 as range 5
    // closed e.Text#1 as range 13(2)
    //DEBUG: e.Accum#1: 5
    //DEBUG: e.Text#1: 2

    refalrts::reset_allocator();
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ HalfReuse: (/0 HalfReuse: # TkOctNumber/4 } Tile{ AsIs: e.Accum#1/5 } '2'/10 Tile{ HalfReuse: )/7 } </11 & ReadGroup/12 Tile{ HalfReuse: (/8 HalfReuse: )/9 AsIs: e.Text#1/13(2) AsIs: >/1 ]] }
    if( ! refalrts::alloc_char( context[10], '2' ) )
      return refalrts::cNoMemory;
    if( ! refalrts::alloc_open_call( context[11] ) )
      return refalrts::cNoMemory;
    if( ! refalrts::alloc_name( context[12], & ReadGroup ) )
      return refalrts::cNoMemory;
    refalrts::reinit_open_bracket( context[0] );
    refalrts::reinit_ident( context[4], & ident_TkOctNumber<int>::name );
    refalrts::reinit_close_bracket( context[7] );
    refalrts::reinit_open_bracket( context[8] );
    refalrts::reinit_close_bracket( context[9] );
    refalrts::push_stack( context[1] );
    refalrts::push_stack( context[11] );
    refalrts::link_brackets( context[8], context[9] );
    refalrts::link_brackets( context[0], context[7] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[8];
    res = refalrts::splice_evar( res, context[11], context[12] );
    res = refalrts::splice_evar( res, context[7], context[7] );
    res = refalrts::splice_evar( res, context[10], context[10] );
    res = refalrts::splice_evar( res, context[5], context[6] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence();

  do {
    // ( e.idx ) '3' e.idx
    // </0 & EscGroup-OCode-C1/4 (/7 e.Accum#1/5 )/8 '3'/9 e.Text#1/2 >/1
    context[13] = context[2];
    context[14] = context[3];
    context[9] = refalrts::char_left( '3', context[13], context[14] );
    if( ! context[9] )
      continue;
    // closed e.Accum#1 as range 5
    // closed e.Text#1 as range 13(2)
    //DEBUG: e.Accum#1: 5
    //DEBUG: e.Text#1: 2

    refalrts::reset_allocator();
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ HalfReuse: (/0 HalfReuse: # TkOctNumber/4 } Tile{ AsIs: e.Accum#1/5 } '3'/10 Tile{ HalfReuse: )/7 } </11 & ReadGroup/12 Tile{ HalfReuse: (/8 HalfReuse: )/9 AsIs: e.Text#1/13(2) AsIs: >/1 ]] }
    if( ! refalrts::alloc_char( context[10], '3' ) )
      return refalrts::cNoMemory;
    if( ! refalrts::alloc_open_call( context[11] ) )
      return refalrts::cNoMemory;
    if( ! refalrts::alloc_name( context[12], & ReadGroup ) )
      return refalrts::cNoMemory;
    refalrts::reinit_open_bracket( context[0] );
    refalrts::reinit_ident( context[4], & ident_TkOctNumber<int>::name );
    refalrts::reinit_close_bracket( context[7] );
    refalrts::reinit_open_bracket( context[8] );
    refalrts::reinit_close_bracket( context[9] );
    refalrts::push_stack( context[1] );
    refalrts::push_stack( context[11] );
    refalrts::link_brackets( context[8], context[9] );
    refalrts::link_brackets( context[0], context[7] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[8];
    res = refalrts::splice_evar( res, context[11], context[12] );
    res = refalrts::splice_evar( res, context[7], context[7] );
    res = refalrts::splice_evar( res, context[10], context[10] );
    res = refalrts::splice_evar( res, context[5], context[6] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence();

  do {
    // ( e.idx ) '4' e.idx
    // </0 & EscGroup-OCode-C1/4 (/7 e.Accum#1/5 )/8 '4'/9 e.Text#1/2 >/1
    context[13] = context[2];
    context[14] = context[3];
    context[9] = refalrts::char_left( '4', context[13], context[14] );
    if( ! context[9] )
      continue;
    // closed e.Accum#1 as range 5
    // closed e.Text#1 as range 13(2)
    //DEBUG: e.Accum#1: 5
    //DEBUG: e.Text#1: 2

    refalrts::reset_allocator();
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ HalfReuse: (/0 HalfReuse: # TkOctNumber/4 } Tile{ AsIs: e.Accum#1/5 } '4'/10 Tile{ HalfReuse: )/7 } </11 & ReadGroup/12 Tile{ HalfReuse: (/8 HalfReuse: )/9 AsIs: e.Text#1/13(2) AsIs: >/1 ]] }
    if( ! refalrts::alloc_char( context[10], '4' ) )
      return refalrts::cNoMemory;
    if( ! refalrts::alloc_open_call( context[11] ) )
      return refalrts::cNoMemory;
    if( ! refalrts::alloc_name( context[12], & ReadGroup ) )
      return refalrts::cNoMemory;
    refalrts::reinit_open_bracket( context[0] );
    refalrts::reinit_ident( context[4], & ident_TkOctNumber<int>::name );
    refalrts::reinit_close_bracket( context[7] );
    refalrts::reinit_open_bracket( context[8] );
    refalrts::reinit_close_bracket( context[9] );
    refalrts::push_stack( context[1] );
    refalrts::push_stack( context[11] );
    refalrts::link_brackets( context[8], context[9] );
    refalrts::link_brackets( context[0], context[7] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[8];
    res = refalrts::splice_evar( res, context[11], context[12] );
    res = refalrts::splice_evar( res, context[7], context[7] );
    res = refalrts::splice_evar( res, context[10], context[10] );
    res = refalrts::splice_evar( res, context[5], context[6] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence();

  do {
    // ( e.idx ) '5' e.idx
    // </0 & EscGroup-OCode-C1/4 (/7 e.Accum#1/5 )/8 '5'/9 e.Text#1/2 >/1
    context[13] = context[2];
    context[14] = context[3];
    context[9] = refalrts::char_left( '5', context[13], context[14] );
    if( ! context[9] )
      continue;
    // closed e.Accum#1 as range 5
    // closed e.Text#1 as range 13(2)
    //DEBUG: e.Accum#1: 5
    //DEBUG: e.Text#1: 2

    refalrts::reset_allocator();
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ HalfReuse: (/0 HalfReuse: # TkOctNumber/4 } Tile{ AsIs: e.Accum#1/5 } '5'/10 Tile{ HalfReuse: )/7 } </11 & ReadGroup/12 Tile{ HalfReuse: (/8 HalfReuse: )/9 AsIs: e.Text#1/13(2) AsIs: >/1 ]] }
    if( ! refalrts::alloc_char( context[10], '5' ) )
      return refalrts::cNoMemory;
    if( ! refalrts::alloc_open_call( context[11] ) )
      return refalrts::cNoMemory;
    if( ! refalrts::alloc_name( context[12], & ReadGroup ) )
      return refalrts::cNoMemory;
    refalrts::reinit_open_bracket( context[0] );
    refalrts::reinit_ident( context[4], & ident_TkOctNumber<int>::name );
    refalrts::reinit_close_bracket( context[7] );
    refalrts::reinit_open_bracket( context[8] );
    refalrts::reinit_close_bracket( context[9] );
    refalrts::push_stack( context[1] );
    refalrts::push_stack( context[11] );
    refalrts::link_brackets( context[8], context[9] );
    refalrts::link_brackets( context[0], context[7] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[8];
    res = refalrts::splice_evar( res, context[11], context[12] );
    res = refalrts::splice_evar( res, context[7], context[7] );
    res = refalrts::splice_evar( res, context[10], context[10] );
    res = refalrts::splice_evar( res, context[5], context[6] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence();

  do {
    // ( e.idx ) '6' e.idx
    // </0 & EscGroup-OCode-C1/4 (/7 e.Accum#1/5 )/8 '6'/9 e.Text#1/2 >/1
    context[13] = context[2];
    context[14] = context[3];
    context[9] = refalrts::char_left( '6', context[13], context[14] );
    if( ! context[9] )
      continue;
    // closed e.Accum#1 as range 5
    // closed e.Text#1 as range 13(2)
    //DEBUG: e.Accum#1: 5
    //DEBUG: e.Text#1: 2

    refalrts::reset_allocator();
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ HalfReuse: (/0 HalfReuse: # TkOctNumber/4 } Tile{ AsIs: e.Accum#1/5 } '6'/10 Tile{ HalfReuse: )/7 } </11 & ReadGroup/12 Tile{ HalfReuse: (/8 HalfReuse: )/9 AsIs: e.Text#1/13(2) AsIs: >/1 ]] }
    if( ! refalrts::alloc_char( context[10], '6' ) )
      return refalrts::cNoMemory;
    if( ! refalrts::alloc_open_call( context[11] ) )
      return refalrts::cNoMemory;
    if( ! refalrts::alloc_name( context[12], & ReadGroup ) )
      return refalrts::cNoMemory;
    refalrts::reinit_open_bracket( context[0] );
    refalrts::reinit_ident( context[4], & ident_TkOctNumber<int>::name );
    refalrts::reinit_close_bracket( context[7] );
    refalrts::reinit_open_bracket( context[8] );
    refalrts::reinit_close_bracket( context[9] );
    refalrts::push_stack( context[1] );
    refalrts::push_stack( context[11] );
    refalrts::link_brackets( context[8], context[9] );
    refalrts::link_brackets( context[0], context[7] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[8];
    res = refalrts::splice_evar( res, context[11], context[12] );
    res = refalrts::splice_evar( res, context[7], context[7] );
    res = refalrts::splice_evar( res, context[10], context[10] );
    res = refalrts::splice_evar( res, context[5], context[6] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence();

  do {
    // ( e.idx ) '7' e.idx
    // </0 & EscGroup-OCode-C1/4 (/7 e.Accum#1/5 )/8 '7'/9 e.Text#1/2 >/1
    context[13] = context[2];
    context[14] = context[3];
    context[9] = refalrts::char_left( '7', context[13], context[14] );
    if( ! context[9] )
      continue;
    // closed e.Accum#1 as range 5
    // closed e.Text#1 as range 13(2)
    //DEBUG: e.Accum#1: 5
    //DEBUG: e.Text#1: 2

    refalrts::reset_allocator();
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ HalfReuse: (/0 HalfReuse: # TkOctNumber/4 } Tile{ AsIs: e.Accum#1/5 } '7'/10 Tile{ HalfReuse: )/7 } </11 & ReadGroup/12 Tile{ HalfReuse: (/8 HalfReuse: )/9 AsIs: e.Text#1/13(2) AsIs: >/1 ]] }
    if( ! refalrts::alloc_char( context[10], '7' ) )
      return refalrts::cNoMemory;
    if( ! refalrts::alloc_open_call( context[11] ) )
      return refalrts::cNoMemory;
    if( ! refalrts::alloc_name( context[12], & ReadGroup ) )
      return refalrts::cNoMemory;
    refalrts::reinit_open_bracket( context[0] );
    refalrts::reinit_ident( context[4], & ident_TkOctNumber<int>::name );
    refalrts::reinit_close_bracket( context[7] );
    refalrts::reinit_open_bracket( context[8] );
    refalrts::reinit_close_bracket( context[9] );
    refalrts::push_stack( context[1] );
    refalrts::push_stack( context[11] );
    refalrts::link_brackets( context[8], context[9] );
    refalrts::link_brackets( context[0], context[7] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[8];
    res = refalrts::splice_evar( res, context[11], context[12] );
    res = refalrts::splice_evar( res, context[7], context[7] );
    res = refalrts::splice_evar( res, context[10], context[10] );
    res = refalrts::splice_evar( res, context[5], context[6] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence();

  // ( e.idx ) e.idx
  // </0 & EscGroup-OCode-C1/4 (/7 e.Accum#1/5 )/8 e.Text#1/2 >/1
  // closed e.Accum#1 as range 5
  // closed e.Text#1 as range 2
  //DEBUG: e.Accum#1: 5
  //DEBUG: e.Text#1: 2

  refalrts::reset_allocator();
  //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ } (/9 # TkOctNumber/10 Tile{ AsIs: e.Accum#1/5 } )/11 Tile{ AsIs: </0 Reuse: & ReadGroup/4 AsIs: (/7 } Tile{ AsIs: )/8 AsIs: e.Text#1/2 AsIs: >/1 ]] }
  if( ! refalrts::alloc_open_bracket( context[9] ) )
    return refalrts::cNoMemory;
  if( ! refalrts::alloc_ident( context[10], & ident_TkOctNumber<int>::name ) )
    return refalrts::cNoMemory;
  if( ! refalrts::alloc_close_bracket( context[11] ) )
    return refalrts::cNoMemory;
  refalrts::update_name( context[4], & ReadGroup );
  refalrts::push_stack( context[1] );
  refalrts::push_stack( context[0] );
  refalrts::link_brackets( context[7], context[8] );
  refalrts::link_brackets( context[9], context[11] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[8];
  res = refalrts::splice_evar( res, context[0], context[7] );
  res = refalrts::splice_evar( res, context[11], context[11] );
  res = refalrts::splice_evar( res, context[5], context[6] );
  res = refalrts::splice_evar( res, context[9], context[10] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

namespace /* unnamed */ {
refalrts::RefalNativeFunction descr_EscGroup_OCode_C1(func_EscGroup_OCode_C1, "EscGroup-OCode-C1");
refalrts::RefalFunction& EscGroup_OCode_C1 = descr_EscGroup_OCode_C1;

} // unnamed namespace

#endif

//End of file
