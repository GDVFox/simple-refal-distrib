// Automatically generated file. Don't edit!
#include "refalrts.h"


extern refalrts::FnResult Add(refalrts::Iter arg_begin, refalrts::Iter arg_end);
extern refalrts::FnResult EscapeChar(refalrts::Iter arg_begin, refalrts::Iter arg_end);
extern refalrts::FnResult Fetch(refalrts::Iter arg_begin, refalrts::Iter arg_end);
extern refalrts::FnResult GenProgram(refalrts::Iter arg_begin, refalrts::Iter arg_end);
extern refalrts::FnResult Inc(refalrts::Iter arg_begin, refalrts::Iter arg_end);
extern refalrts::FnResult Map(refalrts::Iter arg_begin, refalrts::Iter arg_end);
extern refalrts::FnResult MapReduce(refalrts::Iter arg_begin, refalrts::Iter arg_end);
extern refalrts::FnResult StrFromInt(refalrts::Iter arg_begin, refalrts::Iter arg_end);
static refalrts::FnResult AllocatorFuncArgument(refalrts::Iter arg_begin, refalrts::Iter arg_end);
static refalrts::FnResult AllocatorFuncName(refalrts::Iter arg_begin, refalrts::Iter arg_end);
static refalrts::FnResult BreakerFromIndent(refalrts::Iter arg_begin, refalrts::Iter arg_end);
static refalrts::FnResult ContextItem(refalrts::Iter arg_begin, refalrts::Iter arg_end);
static refalrts::FnResult ContextRange(refalrts::Iter arg_begin, refalrts::Iter arg_end);
static refalrts::FnResult ContextRange_B(refalrts::Iter arg_begin, refalrts::Iter arg_end);
static refalrts::FnResult ContextRange_E(refalrts::Iter arg_begin, refalrts::Iter arg_end);
static refalrts::FnResult CreateCommandInfo(refalrts::Iter arg_begin, refalrts::Iter arg_end);
static refalrts::FnResult CreateCommandTag(refalrts::Iter arg_begin, refalrts::Iter arg_end);
static refalrts::FnResult CreateMode(refalrts::Iter arg_begin, refalrts::Iter arg_end);
static refalrts::FnResult DoPrintLength(refalrts::Iter arg_begin, refalrts::Iter arg_end);
static refalrts::FnResult Escape(refalrts::Iter arg_begin, refalrts::Iter arg_end);
static refalrts::FnResult EscapeString(refalrts::Iter arg_begin, refalrts::Iter arg_end);
static refalrts::FnResult FuncArguments(refalrts::Iter arg_begin, refalrts::Iter arg_end);
static refalrts::FnResult GenCommand(refalrts::Iter arg_begin, refalrts::Iter arg_end);
static refalrts::FnResult GenCommonHeaders(refalrts::Iter arg_begin, refalrts::Iter arg_end);
static refalrts::FnResult GenCommonTailer(refalrts::Iter arg_begin, refalrts::Iter arg_end);
static refalrts::FnResult GenExtern(refalrts::Iter arg_begin, refalrts::Iter arg_end);
static refalrts::FnResult GenFnStart(refalrts::Iter arg_begin, refalrts::Iter arg_end);
static refalrts::FnResult GenForward(refalrts::Iter arg_begin, refalrts::Iter arg_end);
static refalrts::FnResult GenIdent(refalrts::Iter arg_begin, refalrts::Iter arg_end);
static refalrts::FnResult GenReturn(refalrts::Iter arg_begin, refalrts::Iter arg_end);
static refalrts::FnResult GenSwap(refalrts::Iter arg_begin, refalrts::Iter arg_end);
static refalrts::FnResult NakedArguments(refalrts::Iter arg_begin, refalrts::Iter arg_end);
static refalrts::FnResult PrintBracketsVarInit(refalrts::Iter arg_begin, refalrts::Iter arg_end);
static refalrts::FnResult PrintCreateElem(refalrts::Iter arg_begin, refalrts::Iter arg_end);
static refalrts::FnResult PrintDirection(refalrts::Iter arg_begin, refalrts::Iter arg_end);
static refalrts::FnResult PrintInterpretCreateElem(refalrts::Iter arg_begin, refalrts::Iter arg_end);
static refalrts::FnResult PrintLength(refalrts::Iter arg_begin, refalrts::Iter arg_end);
static refalrts::FnResult PrintMatch(refalrts::Iter arg_begin, refalrts::Iter arg_end);
static refalrts::FnResult PrintMatchADT(refalrts::Iter arg_begin, refalrts::Iter arg_end);
static refalrts::FnResult PrintMatchADTSave(refalrts::Iter arg_begin, refalrts::Iter arg_end);
static refalrts::FnResult PrintMatchBrackets(refalrts::Iter arg_begin, refalrts::Iter arg_end);
static refalrts::FnResult PrintMatchBracketsSave(refalrts::Iter arg_begin, refalrts::Iter arg_end);
static refalrts::FnResult PrintMatchChar(refalrts::Iter arg_begin, refalrts::Iter arg_end);
static refalrts::FnResult PrintMatchCharSave(refalrts::Iter arg_begin, refalrts::Iter arg_end);
static refalrts::FnResult PrintMatchEmpty(refalrts::Iter arg_begin, refalrts::Iter arg_end);
static refalrts::FnResult PrintMatchIdent(refalrts::Iter arg_begin, refalrts::Iter arg_end);
static refalrts::FnResult PrintMatchIdentSave(refalrts::Iter arg_begin, refalrts::Iter arg_end);
static refalrts::FnResult PrintMatchName(refalrts::Iter arg_begin, refalrts::Iter arg_end);
static refalrts::FnResult PrintMatchNameSave(refalrts::Iter arg_begin, refalrts::Iter arg_end);
static refalrts::FnResult PrintMatchNumber(refalrts::Iter arg_begin, refalrts::Iter arg_end);
static refalrts::FnResult PrintMatchNumberSave(refalrts::Iter arg_begin, refalrts::Iter arg_end);
static refalrts::FnResult PrintMatchRepeated(refalrts::Iter arg_begin, refalrts::Iter arg_end);
static refalrts::FnResult PrintMatchRepeatedSave(refalrts::Iter arg_begin, refalrts::Iter arg_end);
static refalrts::FnResult PrintMatchSTVar(refalrts::Iter arg_begin, refalrts::Iter arg_end);
static refalrts::FnResult PrintMatchSTVarSave(refalrts::Iter arg_begin, refalrts::Iter arg_end);
static refalrts::FnResult PrintMatchSave(refalrts::Iter arg_begin, refalrts::Iter arg_end);
static refalrts::FnResult PrintName(refalrts::Iter arg_begin, refalrts::Iter arg_end);
static refalrts::FnResult PrintString(refalrts::Iter arg_begin, refalrts::Iter arg_end);
static refalrts::FnResult StrFromDirection(refalrts::Iter arg_begin, refalrts::Iter arg_end);
static refalrts::FnResult SwGenFnStart(refalrts::Iter arg_begin, refalrts::Iter arg_end);
static refalrts::FnResult TextFromMemoryClass(refalrts::Iter arg_begin, refalrts::Iter arg_end);
static refalrts::FnResult VarMatchFunction(refalrts::Iter arg_begin, refalrts::Iter arg_end);

// identifier #AlgLeft
template <typename SREFAL_PARAM_INT>
struct ident_AlgLeft {
  static const char *name() {
    return "AlgLeft";
  }
};

// identifier #AlgRight
template <typename SREFAL_PARAM_INT>
struct ident_AlgRight {
  static const char *name() {
    return "AlgRight";
  }
};

// identifier #AlgTerm
template <typename SREFAL_PARAM_INT>
struct ident_AlgTerm {
  static const char *name() {
    return "AlgTerm";
  }
};

// identifier #Allocate
template <typename SREFAL_PARAM_INT>
struct ident_Allocate {
  static const char *name() {
    return "Allocate";
  }
};

// identifier #CmdADT
template <typename SREFAL_PARAM_INT>
struct ident_CmdADT {
  static const char *name() {
    return "CmdADT";
  }
};

// identifier #CmdADTSave
template <typename SREFAL_PARAM_INT>
struct ident_CmdADTSave {
  static const char *name() {
    return "CmdADTSave";
  }
};

// identifier #CmdAllocateElem
template <typename SREFAL_PARAM_INT>
struct ident_CmdAllocateElem {
  static const char *name() {
    return "CmdAllocateElem";
  }
};

// identifier #CmdBrackets
template <typename SREFAL_PARAM_INT>
struct ident_CmdBrackets {
  static const char *name() {
    return "CmdBrackets";
  }
};

// identifier #CmdBracketsSave
template <typename SREFAL_PARAM_INT>
struct ident_CmdBracketsSave {
  static const char *name() {
    return "CmdBracketsSave";
  }
};

// identifier #CmdCallSave
template <typename SREFAL_PARAM_INT>
struct ident_CmdCallSave {
  static const char *name() {
    return "CmdCallSave";
  }
};

// identifier #CmdChar
template <typename SREFAL_PARAM_INT>
struct ident_CmdChar {
  static const char *name() {
    return "CmdChar";
  }
};

// identifier #CmdCharSave
template <typename SREFAL_PARAM_INT>
struct ident_CmdCharSave {
  static const char *name() {
    return "CmdCharSave";
  }
};

// identifier #CmdComment
template <typename SREFAL_PARAM_INT>
struct ident_CmdComment {
  static const char *name() {
    return "CmdComment";
  }
};

// identifier #CmdCopyVar
template <typename SREFAL_PARAM_INT>
struct ident_CmdCopyVar {
  static const char *name() {
    return "CmdCopyVar";
  }
};

// identifier #CmdDeclaration
template <typename SREFAL_PARAM_INT>
struct ident_CmdDeclaration {
  static const char *name() {
    return "CmdDeclaration";
  }
};

// identifier #CmdDefineIdent
template <typename SREFAL_PARAM_INT>
struct ident_CmdDefineIdent {
  static const char *name() {
    return "CmdDefineIdent";
  }
};

// identifier #CmdElse
template <typename SREFAL_PARAM_INT>
struct ident_CmdElse {
  static const char *name() {
    return "CmdElse";
  }
};

// identifier #CmdEmpty
template <typename SREFAL_PARAM_INT>
struct ident_CmdEmpty {
  static const char *name() {
    return "CmdEmpty";
  }
};

// identifier #CmdEmptyResult
template <typename SREFAL_PARAM_INT>
struct ident_CmdEmptyResult {
  static const char *name() {
    return "CmdEmptyResult";
  }
};

// identifier #CmdEndIf
template <typename SREFAL_PARAM_INT>
struct ident_CmdEndIf {
  static const char *name() {
    return "CmdEndIf";
  }
};

// identifier #CmdEndSentence
template <typename SREFAL_PARAM_INT>
struct ident_CmdEndSentence {
  static const char *name() {
    return "CmdEndSentence";
  }
};

// identifier #CmdEnum
template <typename SREFAL_PARAM_INT>
struct ident_CmdEnum {
  static const char *name() {
    return "CmdEnum";
  }
};

// identifier #CmdFail
template <typename SREFAL_PARAM_INT>
struct ident_CmdFail {
  static const char *name() {
    return "CmdFail";
  }
};

// identifier #CmdFinRAA
template <typename SREFAL_PARAM_INT>
struct ident_CmdFinRAA {
  static const char *name() {
    return "CmdFinRAA";
  }
};

// identifier #CmdFnEnd
template <typename SREFAL_PARAM_INT>
struct ident_CmdFnEnd {
  static const char *name() {
    return "CmdFnEnd";
  }
};

// identifier #CmdFnStart
template <typename SREFAL_PARAM_INT>
struct ident_CmdFnStart {
  static const char *name() {
    return "CmdFnStart";
  }
};

// identifier #CmdIdent
template <typename SREFAL_PARAM_INT>
struct ident_CmdIdent {
  static const char *name() {
    return "CmdIdent";
  }
};

// identifier #CmdIdentSave
template <typename SREFAL_PARAM_INT>
struct ident_CmdIdentSave {
  static const char *name() {
    return "CmdIdentSave";
  }
};

// identifier #CmdIfDef
template <typename SREFAL_PARAM_INT>
struct ident_CmdIfDef {
  static const char *name() {
    return "CmdIfDef";
  }
};

// identifier #CmdInitB0
template <typename SREFAL_PARAM_INT>
struct ident_CmdInitB0 {
  static const char *name() {
    return "CmdInitB0";
  }
};

// identifier #CmdInitB0_Lite
template <typename SREFAL_PARAM_INT>
struct ident_CmdInitB0_Lite {
  static const char *name() {
    return "CmdInitB0_Lite";
  }
};

// identifier #CmdInitRAA
template <typename SREFAL_PARAM_INT>
struct ident_CmdInitRAA {
  static const char *name() {
    return "CmdInitRAA";
  }
};

// identifier #CmdInsertElem
template <typename SREFAL_PARAM_INT>
struct ident_CmdInsertElem {
  static const char *name() {
    return "CmdInsertElem";
  }
};

// identifier #CmdInsertRange
template <typename SREFAL_PARAM_INT>
struct ident_CmdInsertRange {
  static const char *name() {
    return "CmdInsertRange";
  }
};

// identifier #CmdInsertTile
template <typename SREFAL_PARAM_INT>
struct ident_CmdInsertTile {
  static const char *name() {
    return "CmdInsertTile";
  }
};

// identifier #CmdInsertVar
template <typename SREFAL_PARAM_INT>
struct ident_CmdInsertVar {
  static const char *name() {
    return "CmdInsertVar";
  }
};

// identifier #CmdIssueMem
template <typename SREFAL_PARAM_INT>
struct ident_CmdIssueMem {
  static const char *name() {
    return "CmdIssueMem";
  }
};

// identifier #CmdLinkBrackets
template <typename SREFAL_PARAM_INT>
struct ident_CmdLinkBrackets {
  static const char *name() {
    return "CmdLinkBrackets";
  }
};

// identifier #CmdName
template <typename SREFAL_PARAM_INT>
struct ident_CmdName {
  static const char *name() {
    return "CmdName";
  }
};

// identifier #CmdNameSave
template <typename SREFAL_PARAM_INT>
struct ident_CmdNameSave {
  static const char *name() {
    return "CmdNameSave";
  }
};

// identifier #CmdNumber
template <typename SREFAL_PARAM_INT>
struct ident_CmdNumber {
  static const char *name() {
    return "CmdNumber";
  }
};

// identifier #CmdNumberSave
template <typename SREFAL_PARAM_INT>
struct ident_CmdNumberSave {
  static const char *name() {
    return "CmdNumberSave";
  }
};

// identifier #CmdOpenedE_End
template <typename SREFAL_PARAM_INT>
struct ident_CmdOpenedE_End {
  static const char *name() {
    return "CmdOpenedE_End";
  }
};

// identifier #CmdOpenedE_Start
template <typename SREFAL_PARAM_INT>
struct ident_CmdOpenedE_Start {
  static const char *name() {
    return "CmdOpenedE_Start";
  }
};

// identifier #CmdPushStack
template <typename SREFAL_PARAM_INT>
struct ident_CmdPushStack {
  static const char *name() {
    return "CmdPushStack";
  }
};

// identifier #CmdReinitElem
template <typename SREFAL_PARAM_INT>
struct ident_CmdReinitElem {
  static const char *name() {
    return "CmdReinitElem";
  }
};

// identifier #CmdReinitSVar
template <typename SREFAL_PARAM_INT>
struct ident_CmdReinitSVar {
  static const char *name() {
    return "CmdReinitSVar";
  }
};

// identifier #CmdRepeated
template <typename SREFAL_PARAM_INT>
struct ident_CmdRepeated {
  static const char *name() {
    return "CmdRepeated";
  }
};

// identifier #CmdRepeatedSave
template <typename SREFAL_PARAM_INT>
struct ident_CmdRepeatedSave {
  static const char *name() {
    return "CmdRepeatedSave";
  }
};

// identifier #CmdResetAllocator
template <typename SREFAL_PARAM_INT>
struct ident_CmdResetAllocator {
  static const char *name() {
    return "CmdResetAllocator";
  }
};

// identifier #CmdReturnResult
template <typename SREFAL_PARAM_INT>
struct ident_CmdReturnResult {
  static const char *name() {
    return "CmdReturnResult";
  }
};

// identifier #CmdReturnResult_NoTrash
template <typename SREFAL_PARAM_INT>
struct ident_CmdReturnResult_NoTrash {
  static const char *name() {
    return "CmdReturnResult_NoTrash";
  }
};

// identifier #CmdSave
template <typename SREFAL_PARAM_INT>
struct ident_CmdSave {
  static const char *name() {
    return "CmdSave";
  }
};

// identifier #CmdSeparator
template <typename SREFAL_PARAM_INT>
struct ident_CmdSeparator {
  static const char *name() {
    return "CmdSeparator";
  }
};

// identifier #CmdSetRes
template <typename SREFAL_PARAM_INT>
struct ident_CmdSetRes {
  static const char *name() {
    return "CmdSetRes";
  }
};

// identifier #CmdStartSentence
template <typename SREFAL_PARAM_INT>
struct ident_CmdStartSentence {
  static const char *name() {
    return "CmdStartSentence";
  }
};

// identifier #CmdSwap
template <typename SREFAL_PARAM_INT>
struct ident_CmdSwap {
  static const char *name() {
    return "CmdSwap";
  }
};

// identifier #CmdTrash
template <typename SREFAL_PARAM_INT>
struct ident_CmdTrash {
  static const char *name() {
    return "CmdTrash";
  }
};

// identifier #CmdUpdateElem
template <typename SREFAL_PARAM_INT>
struct ident_CmdUpdateElem {
  static const char *name() {
    return "CmdUpdateElem";
  }
};

// identifier #CmdUseRes
template <typename SREFAL_PARAM_INT>
struct ident_CmdUseRes {
  static const char *name() {
    return "CmdUseRes";
  }
};

// identifier #CmdVar
template <typename SREFAL_PARAM_INT>
struct ident_CmdVar {
  static const char *name() {
    return "CmdVar";
  }
};

// identifier #CmdVarSave
template <typename SREFAL_PARAM_INT>
struct ident_CmdVarSave {
  static const char *name() {
    return "CmdVarSave";
  }
};

// identifier #CmdiADT
template <typename SREFAL_PARAM_INT>
struct ident_CmdiADT {
  static const char *name() {
    return "CmdiADT";
  }
};

// identifier #CmdiADTSave
template <typename SREFAL_PARAM_INT>
struct ident_CmdiADTSave {
  static const char *name() {
    return "CmdiADTSave";
  }
};

// identifier #CmdiBracket
template <typename SREFAL_PARAM_INT>
struct ident_CmdiBracket {
  static const char *name() {
    return "CmdiBracket";
  }
};

// identifier #CmdiBracketsSave
template <typename SREFAL_PARAM_INT>
struct ident_CmdiBracketsSave {
  static const char *name() {
    return "CmdiBracketsSave";
  }
};

// identifier #CmdiCallSave
template <typename SREFAL_PARAM_INT>
struct ident_CmdiCallSave {
  static const char *name() {
    return "CmdiCallSave";
  }
};

// identifier #CmdiChar
template <typename SREFAL_PARAM_INT>
struct ident_CmdiChar {
  static const char *name() {
    return "CmdiChar";
  }
};

// identifier #CmdiCharSave
template <typename SREFAL_PARAM_INT>
struct ident_CmdiCharSave {
  static const char *name() {
    return "CmdiCharSave";
  }
};

// identifier #CmdiCopyVar
template <typename SREFAL_PARAM_INT>
struct ident_CmdiCopyVar {
  static const char *name() {
    return "CmdiCopyVar";
  }
};

// identifier #CmdiCreateElem
template <typename SREFAL_PARAM_INT>
struct ident_CmdiCreateElem {
  static const char *name() {
    return "CmdiCreateElem";
  }
};

// identifier #CmdiEPrepare
template <typename SREFAL_PARAM_INT>
struct ident_CmdiEPrepare {
  static const char *name() {
    return "CmdiEPrepare";
  }
};

// identifier #CmdiEStart
template <typename SREFAL_PARAM_INT>
struct ident_CmdiEStart {
  static const char *name() {
    return "CmdiEStart";
  }
};

// identifier #CmdiEmpty
template <typename SREFAL_PARAM_INT>
struct ident_CmdiEmpty {
  static const char *name() {
    return "CmdiEmpty";
  }
};

// identifier #CmdiEmptyResult
template <typename SREFAL_PARAM_INT>
struct ident_CmdiEmptyResult {
  static const char *name() {
    return "CmdiEmptyResult";
  }
};

// identifier #CmdiFail
template <typename SREFAL_PARAM_INT>
struct ident_CmdiFail {
  static const char *name() {
    return "CmdiFail";
  }
};

// identifier #CmdiFuncArray
template <typename SREFAL_PARAM_INT>
struct ident_CmdiFuncArray {
  static const char *name() {
    return "CmdiFuncArray";
  }
};

// identifier #CmdiHugeNum
template <typename SREFAL_PARAM_INT>
struct ident_CmdiHugeNum {
  static const char *name() {
    return "CmdiHugeNum";
  }
};

// identifier #CmdiHugeNumSave
template <typename SREFAL_PARAM_INT>
struct ident_CmdiHugeNumSave {
  static const char *name() {
    return "CmdiHugeNumSave";
  }
};

// identifier #CmdiIdent
template <typename SREFAL_PARAM_INT>
struct ident_CmdiIdent {
  static const char *name() {
    return "CmdiIdent";
  }
};

// identifier #CmdiIdentSave
template <typename SREFAL_PARAM_INT>
struct ident_CmdiIdentSave {
  static const char *name() {
    return "CmdiIdentSave";
  }
};

// identifier #CmdiInitB0
template <typename SREFAL_PARAM_INT>
struct ident_CmdiInitB0 {
  static const char *name() {
    return "CmdiInitB0";
  }
};

// identifier #CmdiInitB0_Lite
template <typename SREFAL_PARAM_INT>
struct ident_CmdiInitB0_Lite {
  static const char *name() {
    return "CmdiInitB0_Lite";
  }
};

// identifier #CmdiInsertElem
template <typename SREFAL_PARAM_INT>
struct ident_CmdiInsertElem {
  static const char *name() {
    return "CmdiInsertElem";
  }
};

// identifier #CmdiInsertRange
template <typename SREFAL_PARAM_INT>
struct ident_CmdiInsertRange {
  static const char *name() {
    return "CmdiInsertRange";
  }
};

// identifier #CmdiInsertTile
template <typename SREFAL_PARAM_INT>
struct ident_CmdiInsertTile {
  static const char *name() {
    return "CmdiInsertTile";
  }
};

// identifier #CmdiInsertVar
template <typename SREFAL_PARAM_INT>
struct ident_CmdiInsertVar {
  static const char *name() {
    return "CmdiInsertVar";
  }
};

// identifier #CmdiLabelArray
template <typename SREFAL_PARAM_INT>
struct ident_CmdiLabelArray {
  static const char *name() {
    return "CmdiLabelArray";
  }
};

// identifier #CmdiLinkBrackets
template <typename SREFAL_PARAM_INT>
struct ident_CmdiLinkBrackets {
  static const char *name() {
    return "CmdiLinkBrackets";
  }
};

// identifier #CmdiName
template <typename SREFAL_PARAM_INT>
struct ident_CmdiName {
  static const char *name() {
    return "CmdiName";
  }
};

// identifier #CmdiNameSave
template <typename SREFAL_PARAM_INT>
struct ident_CmdiNameSave {
  static const char *name() {
    return "CmdiNameSave";
  }
};

// identifier #CmdiNum
template <typename SREFAL_PARAM_INT>
struct ident_CmdiNum {
  static const char *name() {
    return "CmdiNum";
  }
};

// identifier #CmdiNumSave
template <typename SREFAL_PARAM_INT>
struct ident_CmdiNumSave {
  static const char *name() {
    return "CmdiNumSave";
  }
};

// identifier #CmdiNumberArray
template <typename SREFAL_PARAM_INT>
struct ident_CmdiNumberArray {
  static const char *name() {
    return "CmdiNumberArray";
  }
};

// identifier #CmdiOnFailGoTo
template <typename SREFAL_PARAM_INT>
struct ident_CmdiOnFailGoTo {
  static const char *name() {
    return "CmdiOnFailGoTo";
  }
};

// identifier #CmdiPushStack
template <typename SREFAL_PARAM_INT>
struct ident_CmdiPushStack {
  static const char *name() {
    return "CmdiPushStack";
  }
};

// identifier #CmdiReinitSVar
template <typename SREFAL_PARAM_INT>
struct ident_CmdiReinitSVar {
  static const char *name() {
    return "CmdiReinitSVar";
  }
};

// identifier #CmdiRepeat
template <typename SREFAL_PARAM_INT>
struct ident_CmdiRepeat {
  static const char *name() {
    return "CmdiRepeat";
  }
};

// identifier #CmdiRepeatedSave
template <typename SREFAL_PARAM_INT>
struct ident_CmdiRepeatedSave {
  static const char *name() {
    return "CmdiRepeatedSave";
  }
};

// identifier #CmdiReserveStack
template <typename SREFAL_PARAM_INT>
struct ident_CmdiReserveStack {
  static const char *name() {
    return "CmdiReserveStack";
  }
};

// identifier #CmdiReturnResult
template <typename SREFAL_PARAM_INT>
struct ident_CmdiReturnResult {
  static const char *name() {
    return "CmdiReturnResult";
  }
};

// identifier #CmdiReturnResult_NoTrash
template <typename SREFAL_PARAM_INT>
struct ident_CmdiReturnResult_NoTrash {
  static const char *name() {
    return "CmdiReturnResult_NoTrash";
  }
};

// identifier #CmdiRunInterpret
template <typename SREFAL_PARAM_INT>
struct ident_CmdiRunInterpret {
  static const char *name() {
    return "CmdiRunInterpret";
  }
};

// identifier #CmdiSave
template <typename SREFAL_PARAM_INT>
struct ident_CmdiSave {
  static const char *name() {
    return "CmdiSave";
  }
};

// identifier #CmdiSetRes
template <typename SREFAL_PARAM_INT>
struct ident_CmdiSetRes {
  static const char *name() {
    return "CmdiSetRes";
  }
};

// identifier #CmdiStringArray
template <typename SREFAL_PARAM_INT>
struct ident_CmdiStringArray {
  static const char *name() {
    return "CmdiStringArray";
  }
};

// identifier #CmdiTrash
template <typename SREFAL_PARAM_INT>
struct ident_CmdiTrash {
  static const char *name() {
    return "CmdiTrash";
  }
};

// identifier #CmdiVar
template <typename SREFAL_PARAM_INT>
struct ident_CmdiVar {
  static const char *name() {
    return "CmdiVar";
  }
};

// identifier #CmdiVarSave
template <typename SREFAL_PARAM_INT>
struct ident_CmdiVarSave {
  static const char *name() {
    return "CmdiVarSave";
  }
};

// identifier #CreateClosure
template <typename SREFAL_PARAM_INT>
struct ident_CreateClosure {
  static const char *name() {
    return "CreateClosure";
  }
};

// identifier #ElChar
template <typename SREFAL_PARAM_INT>
struct ident_ElChar {
  static const char *name() {
    return "ElChar";
  }
};

// identifier #ElCloseADT
template <typename SREFAL_PARAM_INT>
struct ident_ElCloseADT {
  static const char *name() {
    return "ElCloseADT";
  }
};

// identifier #ElCloseBracket
template <typename SREFAL_PARAM_INT>
struct ident_ElCloseBracket {
  static const char *name() {
    return "ElCloseBracket";
  }
};

// identifier #ElCloseCall
template <typename SREFAL_PARAM_INT>
struct ident_ElCloseCall {
  static const char *name() {
    return "ElCloseCall";
  }
};

// identifier #ElHugeNumber
template <typename SREFAL_PARAM_INT>
struct ident_ElHugeNumber {
  static const char *name() {
    return "ElHugeNumber";
  }
};

// identifier #ElIdent
template <typename SREFAL_PARAM_INT>
struct ident_ElIdent {
  static const char *name() {
    return "ElIdent";
  }
};

// identifier #ElName
template <typename SREFAL_PARAM_INT>
struct ident_ElName {
  static const char *name() {
    return "ElName";
  }
};

// identifier #ElNumber
template <typename SREFAL_PARAM_INT>
struct ident_ElNumber {
  static const char *name() {
    return "ElNumber";
  }
};

// identifier #ElOpenADT
template <typename SREFAL_PARAM_INT>
struct ident_ElOpenADT {
  static const char *name() {
    return "ElOpenADT";
  }
};

// identifier #ElOpenBracket
template <typename SREFAL_PARAM_INT>
struct ident_ElOpenBracket {
  static const char *name() {
    return "ElOpenBracket";
  }
};

// identifier #ElOpenCall
template <typename SREFAL_PARAM_INT>
struct ident_ElOpenCall {
  static const char *name() {
    return "ElOpenCall";
  }
};

// identifier #ElString
template <typename SREFAL_PARAM_INT>
struct ident_ElString {
  static const char *name() {
    return "ElString";
  }
};

// identifier #Fail
template <typename SREFAL_PARAM_INT>
struct ident_Fail {
  static const char *name() {
    return "Fail";
  }
};

// identifier #GN_Entry
template <typename SREFAL_PARAM_INT>
struct ident_GN_Entry {
  static const char *name() {
    return "GN_Entry";
  }
};

// identifier #GN_Local
template <typename SREFAL_PARAM_INT>
struct ident_GN_Local {
  static const char *name() {
    return "GN_Local";
  }
};

// identifier #LEFT_EDGE
template <typename SREFAL_PARAM_INT>
struct ident_LEFT_EDGE {
  static const char *name() {
    return "LEFT_EDGE";
  }
};

// identifier #RIGHT_EDGE
template <typename SREFAL_PARAM_INT>
struct ident_RIGHT_EDGE {
  static const char *name() {
    return "RIGHT_EDGE";
  }
};

// identifier #Reinit
template <typename SREFAL_PARAM_INT>
struct ident_Reinit {
  static const char *name() {
    return "Reinit";
  }
};

// identifier #Success
template <typename SREFAL_PARAM_INT>
struct ident_Success {
  static const char *name() {
    return "Success";
  }
};

// identifier #Update
template <typename SREFAL_PARAM_INT>
struct ident_Update {
  static const char *name() {
    return "Update";
  }
};

static refalrts::FnResult FuncArguments(refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  refalrts::this_is_generated_function();
  // issue here memory for vars with 7 elems
  refalrts::Iter context[7];
  refalrts::zeros( context, 7 );
#ifdef INTERPRET
  using refalrts::functions;
  using refalrts::idents;
  using refalrts::numbers;
  static const refalrts::StringItem strings[] = {
    {"alrts::Iter arg_begin, refalrts::Iter arg_end", 45}
  };
  static const refalrts::RASLCommand raa[] = {
    // </0 & FuncArguments/4 >/1
    {refalrts::icInitB0_Lite, 0, 0, 0},
    {refalrts::icCallSaveLeft, 0, 2, 0},
    {refalrts::icEmpty, 0, 0, 2},
    {refalrts::icEmptyResult, 0, 0, 0},
    //TRASH: {REMOVED TILE}  {REMOVED TILE} 
    //RESULT: Tile{ [[ HalfReuse: 'r'/0 HalfReuse: 'e'/4 HalfReuse: 'f'/1 }"alrts::Iter arg_begin, refalrts::Iter arg_end"/5 Tile{ ]] }
    {refalrts::icAllocString, 0, 0, 5},
    {refalrts::icReinitChar, 0, 'r', 0},
    {refalrts::icReinitChar, 0, 'e', 4},
    {refalrts::icReinitChar, 0, 'f', 1},
    {refalrts::icSetResRightEdge, 0, 0, 0},
    {refalrts::icSpliceTile, 5, 6, 0},
    {refalrts::icReturnResult_NoTrash, 0, 0, 0},
    {refalrts::icEnd, 0, 0, 0}
  };
  int open_e_stack[1];
  refalrts::FnResult res = refalrts::interpret_array(
    raa, context, arg_begin, arg_end,
    functions, idents, numbers, strings, open_e_stack
  );
  return res;
#else
  // </0 & FuncArguments/4 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  if( ! refalrts::empty_seq( context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;

  refalrts::reset_allocator();
  //TRASH: {REMOVED TILE}  {REMOVED TILE} 
  //RESULT: Tile{ [[ HalfReuse: 'r'/0 HalfReuse: 'e'/4 HalfReuse: 'f'/1 }"alrts::Iter arg_begin, refalrts::Iter arg_end"/5 Tile{ ]] }
  if( ! refalrts::alloc_chars( context[5], context[6], "alrts::Iter arg_begin, refalrts::Iter arg_end", 45 ) )
    return refalrts::cNoMemory;
  refalrts::reinit_char( context[0], 'r' );
  refalrts::reinit_char( context[4], 'e' );
  refalrts::reinit_char( context[1], 'f' );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = arg_end->next;
  res = refalrts::splice_evar( res, context[5], context[6] );
  refalrts::use( res );
  return refalrts::FnResult(refalrts::cSuccess | (__LINE__ << 8));
#endif
}

static refalrts::FnResult NakedArguments(refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  refalrts::this_is_generated_function();
  // issue here memory for vars with 7 elems
  refalrts::Iter context[7];
  refalrts::zeros( context, 7 );
#ifdef INTERPRET
  using refalrts::functions;
  using refalrts::idents;
  using refalrts::numbers;
  static const refalrts::StringItem strings[] = {
    {"alrts::Iter, refalrts::Iter", 27}
  };
  static const refalrts::RASLCommand raa[] = {
    // </0 & NakedArguments/4 >/1
    {refalrts::icInitB0_Lite, 0, 0, 0},
    {refalrts::icCallSaveLeft, 0, 2, 0},
    {refalrts::icEmpty, 0, 0, 2},
    {refalrts::icEmptyResult, 0, 0, 0},
    //TRASH: {REMOVED TILE}  {REMOVED TILE} 
    //RESULT: Tile{ [[ HalfReuse: 'r'/0 HalfReuse: 'e'/4 HalfReuse: 'f'/1 }"alrts::Iter, refalrts::Iter"/5 Tile{ ]] }
    {refalrts::icAllocString, 0, 0, 5},
    {refalrts::icReinitChar, 0, 'r', 0},
    {refalrts::icReinitChar, 0, 'e', 4},
    {refalrts::icReinitChar, 0, 'f', 1},
    {refalrts::icSetResRightEdge, 0, 0, 0},
    {refalrts::icSpliceTile, 5, 6, 0},
    {refalrts::icReturnResult_NoTrash, 0, 0, 0},
    {refalrts::icEnd, 0, 0, 0}
  };
  int open_e_stack[1];
  refalrts::FnResult res = refalrts::interpret_array(
    raa, context, arg_begin, arg_end,
    functions, idents, numbers, strings, open_e_stack
  );
  return res;
#else
  // </0 & NakedArguments/4 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  if( ! refalrts::empty_seq( context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;

  refalrts::reset_allocator();
  //TRASH: {REMOVED TILE}  {REMOVED TILE} 
  //RESULT: Tile{ [[ HalfReuse: 'r'/0 HalfReuse: 'e'/4 HalfReuse: 'f'/1 }"alrts::Iter, refalrts::Iter"/5 Tile{ ]] }
  if( ! refalrts::alloc_chars( context[5], context[6], "alrts::Iter, refalrts::Iter", 27 ) )
    return refalrts::cNoMemory;
  refalrts::reinit_char( context[0], 'r' );
  refalrts::reinit_char( context[4], 'e' );
  refalrts::reinit_char( context[1], 'f' );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = arg_end->next;
  res = refalrts::splice_evar( res, context[5], context[6] );
  refalrts::use( res );
  return refalrts::FnResult(refalrts::cSuccess | (__LINE__ << 8));
#endif
}

static refalrts::FnResult TextFromMemoryClass(refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  refalrts::this_is_generated_function();
  // issue here memory for vars with 8 elems
  refalrts::Iter context[8];
  refalrts::zeros( context, 8 );
#ifdef INTERPRET
  using refalrts::functions;
  static const refalrts::RefalIdentifier idents[] = {
    & ident_GN_Entry<int>::name,
    & ident_GN_Local<int>::name
  };
  using refalrts::numbers;
  static const refalrts::StringItem strings[] = {
    {"ic ", 3}
  };
  static const refalrts::RASLCommand raa[] = {
    //FAST GEN:S 
    //GLOBAL GEN:S 
    // </0 & TextFromMemoryClass/4 s.idx#0/5 >/1
    {refalrts::icInitB0_Lite, 0, 0, 0},
    {refalrts::icCallSaveLeft, 0, 2, 0},
    {refalrts::icsVarLeft, 0, 5, 2},
    {refalrts::icEmpty, 0, 0, 2},
    {refalrts::icOnFailGoTo, +10, 0, 0},
    //#GN_Local
    // </0 & TextFromMemoryClass/4 # GN_Local/5 >/1
    {refalrts::icIdentTerm, 0, 1, 5},
    {refalrts::icEmptyResult, 0, 0, 0},
    //TRASH: {REMOVED TILE}  {REMOVED TILE} 
    //RESULT: Tile{ [[ HalfReuse: 's'/0 HalfReuse: 't'/4 HalfReuse: 'a'/5 HalfReuse: 't'/1 }"ic "/6 Tile{ ]] }
    {refalrts::icAllocString, 0, 0, 6},
    {refalrts::icReinitChar, 0, 's', 0},
    {refalrts::icReinitChar, 0, 't', 4},
    {refalrts::icReinitChar, 0, 'a', 5},
    {refalrts::icReinitChar, 0, 't', 1},
    {refalrts::icSetResRightEdge, 0, 0, 0},
    {refalrts::icSpliceTile, 6, 7, 0},
    {refalrts::icReturnResult_NoTrash, 0, 0, 0},
    //#GN_Entry
    // </0 & TextFromMemoryClass/4 # GN_Entry/5 >/1
    {refalrts::icIdentTerm, 0, 0, 5},
    {refalrts::icEmptyResult, 0, 0, 0},
    //TRASH: {REMOVED TILE}  </0 & TextFromMemoryClass/4 # GN_Entry/5 >/1 {REMOVED TILE} 
    //RESULT: Tile{ [[ } Tile{ ]] }
    {refalrts::icSetResRightEdge, 0, 0, 0},
    {refalrts::icTrashLeftEdge, 0, 0, 0},
    {refalrts::icReturnResult_NoTrash, 0, 0, 0},
    {refalrts::icEnd, 0, 0, 0}
  };
  int open_e_stack[1];
  refalrts::FnResult res = refalrts::interpret_array(
    raa, context, arg_begin, arg_end,
    functions, idents, numbers, strings, open_e_stack
  );
  return res;
#else
  //FAST GEN:S 
  //GLOBAL GEN:S 
  // </0 & TextFromMemoryClass/4 s.idx#0/5 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  if( ! refalrts::svar_left( context[5], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  if( ! refalrts::empty_seq( context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  do {
    refalrts::start_sentence();
    //#GN_Local
    // </0 & TextFromMemoryClass/4 # GN_Local/5 >/1
    if( ! refalrts::ident_term(  & ident_GN_Local<int>::name, context[5] ) )
      continue;

    refalrts::reset_allocator();
    //TRASH: {REMOVED TILE}  {REMOVED TILE} 
    //RESULT: Tile{ [[ HalfReuse: 's'/0 HalfReuse: 't'/4 HalfReuse: 'a'/5 HalfReuse: 't'/1 }"ic "/6 Tile{ ]] }
    if( ! refalrts::alloc_chars( context[6], context[7], "ic ", 3 ) )
      return refalrts::cNoMemory;
    refalrts::reinit_char( context[0], 's' );
    refalrts::reinit_char( context[4], 't' );
    refalrts::reinit_char( context[5], 'a' );
    refalrts::reinit_char( context[1], 't' );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = arg_end->next;
    res = refalrts::splice_evar( res, context[6], context[7] );
    refalrts::use( res );
    return refalrts::FnResult(refalrts::cSuccess | (__LINE__ << 8));
  } while ( 0 );

  //#GN_Entry
  // </0 & TextFromMemoryClass/4 # GN_Entry/5 >/1
  if( ! refalrts::ident_term(  & ident_GN_Entry<int>::name, context[5] ) )
    return refalrts::cRecognitionImpossible;

  refalrts::reset_allocator();
  //TRASH: {REMOVED TILE}  </0 & TextFromMemoryClass/4 # GN_Entry/5 >/1 {REMOVED TILE} 
  //RESULT: Tile{ [[ } Tile{ ]] }
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = arg_end->next;
  refalrts::use( res );
  refalrts::splice_to_freelist_open( trash_prev, res );
  return refalrts::FnResult(refalrts::cSuccess | (__LINE__ << 8));
#endif
}

static refalrts::FnResult SwGenFnStart(refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  refalrts::this_is_generated_function();
  // issue here memory for vars with 20 elems
  refalrts::Iter context[20];
  refalrts::zeros( context, 20 );
#ifdef INTERPRET
  static const refalrts::RefalFunction functions[] = {
    { TextFromMemoryClass, "TextFromMemoryClass" }
  };
  using refalrts::idents;
  using refalrts::numbers;
  static const refalrts::StringItem strings[] = {
    {"  refalrts::this_is_generated_function();", 41},
    {") {", 3},
    {"refalrts::FnResult ", 19}
  };
  static const refalrts::RASLCommand raa[] = {
    // </0 & SwGenFnStart/4 s.MemoryClass#1/5 s.FnArguments#1/6 e.Name#1/2 >/1
    {refalrts::icInitB0_Lite, 0, 0, 0},
    {refalrts::icCallSaveLeft, 0, 2, 0},
    {refalrts::icsVarLeft, 0, 5, 2},
    {refalrts::icsVarLeft, 0, 6, 2},
    // closed e.Name#1 as range 2
    {refalrts::icEmptyResult, 0, 0, 0},
    //TRASH: {REMOVED TILE}  {REMOVED TILE}  {REMOVED TILE}  {REMOVED TILE}  {REMOVED TILE} 
    //RESULT: Tile{ [[ } (/7 Tile{ AsIs: </0 Reuse: & TextFromMemoryClass/4 AsIs: s.MemoryClass#1/5 } >/8"refalrts::FnResult "/9 Tile{ AsIs: e.Name#1/2 } '('/11 </12 Tile{ AsIs: s.FnArguments#1/6 } >/13") {"/14 )/16 (/17"  refalrts::this_is_generated_function();"/18 Tile{ HalfReuse: )/1 ]] }
    {refalrts::icAllocBracket, 0, refalrts::ibOpenBracket, 7},
    {refalrts::icAllocBracket, 0, refalrts::ibCloseCall, 8},
    {refalrts::icAllocString, 0, 2, 9},
    {refalrts::icAllocChar, 0, '(', 11},
    {refalrts::icAllocBracket, 0, refalrts::ibOpenCall, 12},
    {refalrts::icAllocBracket, 0, refalrts::ibCloseCall, 13},
    {refalrts::icAllocString, 0, 1, 14},
    {refalrts::icAllocBracket, 0, refalrts::ibCloseBracket, 16},
    {refalrts::icAllocBracket, 0, refalrts::ibOpenBracket, 17},
    {refalrts::icAllocString, 0, 0, 18},
    {refalrts::icUpdateFunc, 0, 0, 4},
    {refalrts::icReinitBracket, 0, refalrts::ibCloseBracket, 1},
    {refalrts::icLinkBrackets, 17, 1, 0},
    {refalrts::icLinkBrackets, 7, 16, 0},
    {refalrts::icPushStack, 0, 0, 13},
    {refalrts::icPushStack, 0, 0, 12},
    {refalrts::icPushStack, 0, 0, 8},
    {refalrts::icPushStack, 0, 0, 0},
    {refalrts::icSetRes, 0, 0, 1},
    {refalrts::icSpliceTile, 13, 19, 0},
    {refalrts::icSpliceTile, 6, 6, 0},
    {refalrts::icSpliceTile, 11, 12, 0},
    {refalrts::icSpliceEVar, 0, 0, 2},
    {refalrts::icSpliceTile, 8, 10, 0},
    {refalrts::icSpliceTile, 0, 5, 0},
    {refalrts::icSpliceTile, 7, 7, 0},
    {refalrts::icReturnResult_NoTrash, 0, 0, 0},
    {refalrts::icEnd, 0, 0, 0}
  };
  int open_e_stack[1];
  refalrts::FnResult res = refalrts::interpret_array(
    raa, context, arg_begin, arg_end,
    functions, idents, numbers, strings, open_e_stack
  );
  return res;
#else
  // </0 & SwGenFnStart/4 s.MemoryClass#1/5 s.FnArguments#1/6 e.Name#1/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  if( ! refalrts::svar_left( context[5], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  if( ! refalrts::svar_left( context[6], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  // closed e.Name#1 as range 2

  refalrts::reset_allocator();
  //TRASH: {REMOVED TILE}  {REMOVED TILE}  {REMOVED TILE}  {REMOVED TILE}  {REMOVED TILE} 
  //RESULT: Tile{ [[ } (/7 Tile{ AsIs: </0 Reuse: & TextFromMemoryClass/4 AsIs: s.MemoryClass#1/5 } >/8"refalrts::FnResult "/9 Tile{ AsIs: e.Name#1/2 } '('/11 </12 Tile{ AsIs: s.FnArguments#1/6 } >/13") {"/14 )/16 (/17"  refalrts::this_is_generated_function();"/18 Tile{ HalfReuse: )/1 ]] }
  if( ! refalrts::alloc_open_bracket( context[7] ) )
    return refalrts::cNoMemory;
  if( ! refalrts::alloc_close_call( context[8] ) )
    return refalrts::cNoMemory;
  if( ! refalrts::alloc_chars( context[9], context[10], "refalrts::FnResult ", 19 ) )
    return refalrts::cNoMemory;
  if( ! refalrts::alloc_char( context[11], '(' ) )
    return refalrts::cNoMemory;
  if( ! refalrts::alloc_open_call( context[12] ) )
    return refalrts::cNoMemory;
  if( ! refalrts::alloc_close_call( context[13] ) )
    return refalrts::cNoMemory;
  if( ! refalrts::alloc_chars( context[14], context[15], ") {", 3 ) )
    return refalrts::cNoMemory;
  if( ! refalrts::alloc_close_bracket( context[16] ) )
    return refalrts::cNoMemory;
  if( ! refalrts::alloc_open_bracket( context[17] ) )
    return refalrts::cNoMemory;
  if( ! refalrts::alloc_chars( context[18], context[19], "  refalrts::this_is_generated_function();", 41 ) )
    return refalrts::cNoMemory;
  refalrts::update_name( context[4], TextFromMemoryClass, "TextFromMemoryClass" );
  refalrts::reinit_close_bracket( context[1] );
  refalrts::link_brackets( context[17], context[1] );
  refalrts::link_brackets( context[7], context[16] );
  refalrts::push_stack( context[13] );
  refalrts::push_stack( context[12] );
  refalrts::push_stack( context[8] );
  refalrts::push_stack( context[0] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[1];
  res = refalrts::splice_evar( res, context[13], context[19] );
  res = refalrts::splice_evar( res, context[6], context[6] );
  res = refalrts::splice_evar( res, context[11], context[12] );
  res = refalrts::splice_evar( res, context[2], context[3] );
  res = refalrts::splice_evar( res, context[8], context[10] );
  res = refalrts::splice_evar( res, context[0], context[5] );
  res = refalrts::splice_evar( res, context[7], context[7] );
  refalrts::use( res );
  return refalrts::FnResult(refalrts::cSuccess | (__LINE__ << 8));
#endif
}

static refalrts::FnResult GenFnStart(refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  refalrts::this_is_generated_function();
  // issue here memory for vars with 7 elems
  refalrts::Iter context[7];
  refalrts::zeros( context, 7 );
#ifdef INTERPRET
  static const refalrts::RefalFunction functions[] = {
    { SwGenFnStart, "SwGenFnStart" },
    { FuncArguments, "FuncArguments" }
  };
  using refalrts::idents;
  using refalrts::numbers;
  using refalrts::strings;
  static const refalrts::RASLCommand raa[] = {
    // </0 & GenFnStart/4 s.MemoryClass#1/5 e.Name#1/2 >/1
    {refalrts::icInitB0_Lite, 0, 0, 0},
    {refalrts::icCallSaveLeft, 0, 2, 0},
    {refalrts::icsVarLeft, 0, 5, 2},
    // closed e.Name#1 as range 2
    {refalrts::icEmptyResult, 0, 0, 0},
    //TRASH: {REMOVED TILE}  {REMOVED TILE}  {REMOVED TILE} 
    //RESULT: Tile{ [[ AsIs: </0 Reuse: & SwGenFnStart/4 AsIs: s.MemoryClass#1/5 } & FuncArguments/6 Tile{ AsIs: e.Name#1/2 } Tile{ AsIs: >/1 ]] }
    {refalrts::icAllocFunc, 0, 1, 6},
    {refalrts::icUpdateFunc, 0, 0, 4},
    {refalrts::icPushStack, 0, 0, 1},
    {refalrts::icPushStack, 0, 0, 0},
    {refalrts::icSetRes, 0, 0, 1},
    {refalrts::icSpliceEVar, 0, 0, 2},
    {refalrts::icSpliceTile, 6, 6, 0},
    {refalrts::icReturnResult_NoTrash, 0, 0, 0},
    {refalrts::icEnd, 0, 0, 0}
  };
  int open_e_stack[1];
  refalrts::FnResult res = refalrts::interpret_array(
    raa, context, arg_begin, arg_end,
    functions, idents, numbers, strings, open_e_stack
  );
  return res;
#else
  // </0 & GenFnStart/4 s.MemoryClass#1/5 e.Name#1/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  if( ! refalrts::svar_left( context[5], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  // closed e.Name#1 as range 2

  refalrts::reset_allocator();
  //TRASH: {REMOVED TILE}  {REMOVED TILE}  {REMOVED TILE} 
  //RESULT: Tile{ [[ AsIs: </0 Reuse: & SwGenFnStart/4 AsIs: s.MemoryClass#1/5 } & FuncArguments/6 Tile{ AsIs: e.Name#1/2 } Tile{ AsIs: >/1 ]] }
  if( ! refalrts::alloc_name( context[6], FuncArguments, "FuncArguments" ) )
    return refalrts::cNoMemory;
  refalrts::update_name( context[4], SwGenFnStart, "SwGenFnStart" );
  refalrts::push_stack( context[1] );
  refalrts::push_stack( context[0] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[1];
  res = refalrts::splice_evar( res, context[2], context[3] );
  res = refalrts::splice_evar( res, context[6], context[6] );
  refalrts::use( res );
  return refalrts::FnResult(refalrts::cSuccess | (__LINE__ << 8));
#endif
}

static refalrts::FnResult GenExtern(refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  refalrts::this_is_generated_function();
  // issue here memory for vars with 14 elems
  refalrts::Iter context[14];
  refalrts::zeros( context, 14 );
#ifdef INTERPRET
  static const refalrts::RefalFunction functions[] = {
    { FuncArguments, "FuncArguments" }
  };
  using refalrts::idents;
  using refalrts::numbers;
  static const refalrts::StringItem strings[] = {
    {");", 2},
    {"extern refalrts::FnResul", 24}
  };
  static const refalrts::RASLCommand raa[] = {
    // </0 & GenExtern/4 e.Name#1/2 >/1
    {refalrts::icInitB0_Lite, 0, 0, 0},
    {refalrts::icCallSaveLeft, 0, 2, 0},
    // closed e.Name#1 as range 2
    {refalrts::icEmptyResult, 0, 0, 0},
    //TRASH: {REMOVED TILE}  {REMOVED TILE}  {REMOVED TILE} 
    //RESULT: Tile{ [[ } (/5"extern refalrts::FnResul"/6 Tile{ HalfReuse: 't'/0 HalfReuse: ' '/4 AsIs: e.Name#1/2 HalfReuse: '('/1 } </8 & FuncArguments/9 >/10");"/11 )/13 Tile{ ]] }
    {refalrts::icAllocBracket, 0, refalrts::ibOpenBracket, 5},
    {refalrts::icAllocString, 0, 1, 6},
    {refalrts::icAllocBracket, 0, refalrts::ibOpenCall, 8},
    {refalrts::icAllocFunc, 0, 0, 9},
    {refalrts::icAllocBracket, 0, refalrts::ibCloseCall, 10},
    {refalrts::icAllocString, 0, 0, 11},
    {refalrts::icAllocBracket, 0, refalrts::ibCloseBracket, 13},
    {refalrts::icReinitChar, 0, 't', 0},
    {refalrts::icReinitChar, 0, ' ', 4},
    {refalrts::icReinitChar, 0, '(', 1},
    {refalrts::icLinkBrackets, 5, 13, 0},
    {refalrts::icPushStack, 0, 0, 10},
    {refalrts::icPushStack, 0, 0, 8},
    {refalrts::icSetResRightEdge, 0, 0, 0},
    {refalrts::icSpliceTile, 8, 13, 0},
    {refalrts::icSpliceTile, 0, 1, 0},
    {refalrts::icSpliceTile, 5, 7, 0},
    {refalrts::icReturnResult_NoTrash, 0, 0, 0},
    {refalrts::icEnd, 0, 0, 0}
  };
  int open_e_stack[1];
  refalrts::FnResult res = refalrts::interpret_array(
    raa, context, arg_begin, arg_end,
    functions, idents, numbers, strings, open_e_stack
  );
  return res;
#else
  // </0 & GenExtern/4 e.Name#1/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.Name#1 as range 2

  refalrts::reset_allocator();
  //TRASH: {REMOVED TILE}  {REMOVED TILE}  {REMOVED TILE} 
  //RESULT: Tile{ [[ } (/5"extern refalrts::FnResul"/6 Tile{ HalfReuse: 't'/0 HalfReuse: ' '/4 AsIs: e.Name#1/2 HalfReuse: '('/1 } </8 & FuncArguments/9 >/10");"/11 )/13 Tile{ ]] }
  if( ! refalrts::alloc_open_bracket( context[5] ) )
    return refalrts::cNoMemory;
  if( ! refalrts::alloc_chars( context[6], context[7], "extern refalrts::FnResul", 24 ) )
    return refalrts::cNoMemory;
  if( ! refalrts::alloc_open_call( context[8] ) )
    return refalrts::cNoMemory;
  if( ! refalrts::alloc_name( context[9], FuncArguments, "FuncArguments" ) )
    return refalrts::cNoMemory;
  if( ! refalrts::alloc_close_call( context[10] ) )
    return refalrts::cNoMemory;
  if( ! refalrts::alloc_chars( context[11], context[12], ");", 2 ) )
    return refalrts::cNoMemory;
  if( ! refalrts::alloc_close_bracket( context[13] ) )
    return refalrts::cNoMemory;
  refalrts::reinit_char( context[0], 't' );
  refalrts::reinit_char( context[4], ' ' );
  refalrts::reinit_char( context[1], '(' );
  refalrts::link_brackets( context[5], context[13] );
  refalrts::push_stack( context[10] );
  refalrts::push_stack( context[8] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = arg_end->next;
  res = refalrts::splice_evar( res, context[8], context[13] );
  res = refalrts::splice_evar( res, context[0], context[1] );
  res = refalrts::splice_evar( res, context[5], context[7] );
  refalrts::use( res );
  return refalrts::FnResult(refalrts::cSuccess | (__LINE__ << 8));
#endif
}

static refalrts::FnResult GenForward(refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  refalrts::this_is_generated_function();
  // issue here memory for vars with 14 elems
  refalrts::Iter context[14];
  refalrts::zeros( context, 14 );
#ifdef INTERPRET
  static const refalrts::RefalFunction functions[] = {
    { FuncArguments, "FuncArguments" }
  };
  using refalrts::idents;
  using refalrts::numbers;
  static const refalrts::StringItem strings[] = {
    {");", 2},
    {"static refalrts::FnResul", 24}
  };
  static const refalrts::RASLCommand raa[] = {
    // </0 & GenForward/4 e.Name#1/2 >/1
    {refalrts::icInitB0_Lite, 0, 0, 0},
    {refalrts::icCallSaveLeft, 0, 2, 0},
    // closed e.Name#1 as range 2
    {refalrts::icEmptyResult, 0, 0, 0},
    //TRASH: {REMOVED TILE}  {REMOVED TILE}  {REMOVED TILE} 
    //RESULT: Tile{ [[ } (/5"static refalrts::FnResul"/6 Tile{ HalfReuse: 't'/0 HalfReuse: ' '/4 AsIs: e.Name#1/2 HalfReuse: '('/1 } </8 & FuncArguments/9 >/10");"/11 )/13 Tile{ ]] }
    {refalrts::icAllocBracket, 0, refalrts::ibOpenBracket, 5},
    {refalrts::icAllocString, 0, 1, 6},
    {refalrts::icAllocBracket, 0, refalrts::ibOpenCall, 8},
    {refalrts::icAllocFunc, 0, 0, 9},
    {refalrts::icAllocBracket, 0, refalrts::ibCloseCall, 10},
    {refalrts::icAllocString, 0, 0, 11},
    {refalrts::icAllocBracket, 0, refalrts::ibCloseBracket, 13},
    {refalrts::icReinitChar, 0, 't', 0},
    {refalrts::icReinitChar, 0, ' ', 4},
    {refalrts::icReinitChar, 0, '(', 1},
    {refalrts::icLinkBrackets, 5, 13, 0},
    {refalrts::icPushStack, 0, 0, 10},
    {refalrts::icPushStack, 0, 0, 8},
    {refalrts::icSetResRightEdge, 0, 0, 0},
    {refalrts::icSpliceTile, 8, 13, 0},
    {refalrts::icSpliceTile, 0, 1, 0},
    {refalrts::icSpliceTile, 5, 7, 0},
    {refalrts::icReturnResult_NoTrash, 0, 0, 0},
    {refalrts::icEnd, 0, 0, 0}
  };
  int open_e_stack[1];
  refalrts::FnResult res = refalrts::interpret_array(
    raa, context, arg_begin, arg_end,
    functions, idents, numbers, strings, open_e_stack
  );
  return res;
#else
  // </0 & GenForward/4 e.Name#1/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.Name#1 as range 2

  refalrts::reset_allocator();
  //TRASH: {REMOVED TILE}  {REMOVED TILE}  {REMOVED TILE} 
  //RESULT: Tile{ [[ } (/5"static refalrts::FnResul"/6 Tile{ HalfReuse: 't'/0 HalfReuse: ' '/4 AsIs: e.Name#1/2 HalfReuse: '('/1 } </8 & FuncArguments/9 >/10");"/11 )/13 Tile{ ]] }
  if( ! refalrts::alloc_open_bracket( context[5] ) )
    return refalrts::cNoMemory;
  if( ! refalrts::alloc_chars( context[6], context[7], "static refalrts::FnResul", 24 ) )
    return refalrts::cNoMemory;
  if( ! refalrts::alloc_open_call( context[8] ) )
    return refalrts::cNoMemory;
  if( ! refalrts::alloc_name( context[9], FuncArguments, "FuncArguments" ) )
    return refalrts::cNoMemory;
  if( ! refalrts::alloc_close_call( context[10] ) )
    return refalrts::cNoMemory;
  if( ! refalrts::alloc_chars( context[11], context[12], ");", 2 ) )
    return refalrts::cNoMemory;
  if( ! refalrts::alloc_close_bracket( context[13] ) )
    return refalrts::cNoMemory;
  refalrts::reinit_char( context[0], 't' );
  refalrts::reinit_char( context[4], ' ' );
  refalrts::reinit_char( context[1], '(' );
  refalrts::link_brackets( context[5], context[13] );
  refalrts::push_stack( context[10] );
  refalrts::push_stack( context[8] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = arg_end->next;
  res = refalrts::splice_evar( res, context[8], context[13] );
  res = refalrts::splice_evar( res, context[0], context[1] );
  res = refalrts::splice_evar( res, context[5], context[7] );
  refalrts::use( res );
  return refalrts::FnResult(refalrts::cSuccess | (__LINE__ << 8));
#endif
}

static refalrts::FnResult GenReturn(refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  refalrts::this_is_generated_function();
  // issue here memory for vars with 10 elems
  refalrts::Iter context[10];
  refalrts::zeros( context, 10 );
#ifdef INTERPRET
  using refalrts::functions;
  static const refalrts::RefalIdentifier idents[] = {
    & ident_Fail<int>::name,
    & ident_Success<int>::name
  };
  using refalrts::numbers;
  static const refalrts::StringItem strings[] = {
    {"rn refalrts::FnResult(refalrts::cRecognitionImpossible | (__LINE__ << 8));", 74},
    {"rn refalrts::FnResult(refalrts::cSuccess | (__LINE__ << 8));", 60}
  };
  static const refalrts::RASLCommand raa[] = {
    //FAST GEN:S E 
    //GLOBAL GEN:S E 
    // </0 & GenReturn/4 s.idx#0/5 e.idxV#0/2 >/1
    {refalrts::icInitB0_Lite, 0, 0, 0},
    {refalrts::icCallSaveLeft, 0, 2, 0},
    {refalrts::icsVarLeft, 0, 5, 2},
    // closed e.idxV#0 as range 2
    {refalrts::icOnFailGoTo, +16, 0, 0},
    //#SuccessE 
    // </0 & GenReturn/4 # Success/5 e.Indent#1/2 >/1
    {refalrts::icIdentTerm, 0, 1, 5},
    // closed e.Indent#1 as range 2
    {refalrts::icEmptyResult, 0, 0, 0},
    //TRASH: {REMOVED TILE}  {REMOVED TILE}  {REMOVED TILE}  {REMOVED TILE} 
    //RESULT: Tile{ [[ } Tile{ HalfReuse: (/5 AsIs: e.Indent#1/2 HalfReuse: 'r'/1 } 'e'/6 Tile{ HalfReuse: 't'/0 HalfReuse: 'u'/4 }"rn refalrts::FnResult(refalrts::cSuccess | (__LINE__ << 8));"/7 )/9 Tile{ ]] }
    {refalrts::icAllocChar, 0, 'e', 6},
    {refalrts::icAllocString, 0, 1, 7},
    {refalrts::icAllocBracket, 0, refalrts::ibCloseBracket, 9},
    {refalrts::icReinitBracket, 0, refalrts::ibOpenBracket, 5},
    {refalrts::icReinitChar, 0, 'r', 1},
    {refalrts::icReinitChar, 0, 't', 0},
    {refalrts::icReinitChar, 0, 'u', 4},
    {refalrts::icLinkBrackets, 5, 9, 0},
    {refalrts::icSetResRightEdge, 0, 0, 0},
    {refalrts::icSpliceTile, 7, 9, 0},
    {refalrts::icSpliceTile, 0, 4, 0},
    {refalrts::icSpliceTile, 6, 6, 0},
    {refalrts::icSpliceTile, 5, 1, 0},
    {refalrts::icReturnResult_NoTrash, 0, 0, 0},
    //#FailE 
    // </0 & GenReturn/4 # Fail/5 e.Indent#1/2 >/1
    {refalrts::icIdentTerm, 0, 0, 5},
    // closed e.Indent#1 as range 2
    {refalrts::icEmptyResult, 0, 0, 0},
    //TRASH: {REMOVED TILE}  {REMOVED TILE}  {REMOVED TILE}  {REMOVED TILE} 
    //RESULT: Tile{ [[ } Tile{ HalfReuse: (/5 AsIs: e.Indent#1/2 HalfReuse: 'r'/1 } 'e'/6 Tile{ HalfReuse: 't'/0 HalfReuse: 'u'/4 }"rn refalrts::FnResult(refalrts::cRecognitionImpossible | (__LINE__ << 8));"/7 )/9 Tile{ ]] }
    {refalrts::icAllocChar, 0, 'e', 6},
    {refalrts::icAllocString, 0, 0, 7},
    {refalrts::icAllocBracket, 0, refalrts::ibCloseBracket, 9},
    {refalrts::icReinitBracket, 0, refalrts::ibOpenBracket, 5},
    {refalrts::icReinitChar, 0, 'r', 1},
    {refalrts::icReinitChar, 0, 't', 0},
    {refalrts::icReinitChar, 0, 'u', 4},
    {refalrts::icLinkBrackets, 5, 9, 0},
    {refalrts::icSetResRightEdge, 0, 0, 0},
    {refalrts::icSpliceTile, 7, 9, 0},
    {refalrts::icSpliceTile, 0, 4, 0},
    {refalrts::icSpliceTile, 6, 6, 0},
    {refalrts::icSpliceTile, 5, 1, 0},
    {refalrts::icReturnResult_NoTrash, 0, 0, 0},
    {refalrts::icEnd, 0, 0, 0}
  };
  int open_e_stack[1];
  refalrts::FnResult res = refalrts::interpret_array(
    raa, context, arg_begin, arg_end,
    functions, idents, numbers, strings, open_e_stack
  );
  return res;
#else
  //FAST GEN:S E 
  //GLOBAL GEN:S E 
  // </0 & GenReturn/4 s.idx#0/5 e.idxV#0/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  if( ! refalrts::svar_left( context[5], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  // closed e.idxV#0 as range 2
  do {
    refalrts::start_sentence();
    //#SuccessE 
    // </0 & GenReturn/4 # Success/5 e.Indent#1/2 >/1
    if( ! refalrts::ident_term(  & ident_Success<int>::name, context[5] ) )
      continue;
    // closed e.Indent#1 as range 2

    refalrts::reset_allocator();
    //TRASH: {REMOVED TILE}  {REMOVED TILE}  {REMOVED TILE}  {REMOVED TILE} 
    //RESULT: Tile{ [[ } Tile{ HalfReuse: (/5 AsIs: e.Indent#1/2 HalfReuse: 'r'/1 } 'e'/6 Tile{ HalfReuse: 't'/0 HalfReuse: 'u'/4 }"rn refalrts::FnResult(refalrts::cSuccess | (__LINE__ << 8));"/7 )/9 Tile{ ]] }
    if( ! refalrts::alloc_char( context[6], 'e' ) )
      return refalrts::cNoMemory;
    if( ! refalrts::alloc_chars( context[7], context[8], "rn refalrts::FnResult(refalrts::cSuccess | (__LINE__ << 8));", 60 ) )
      return refalrts::cNoMemory;
    if( ! refalrts::alloc_close_bracket( context[9] ) )
      return refalrts::cNoMemory;
    refalrts::reinit_open_bracket( context[5] );
    refalrts::reinit_char( context[1], 'r' );
    refalrts::reinit_char( context[0], 't' );
    refalrts::reinit_char( context[4], 'u' );
    refalrts::link_brackets( context[5], context[9] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = arg_end->next;
    res = refalrts::splice_evar( res, context[7], context[9] );
    res = refalrts::splice_evar( res, context[0], context[4] );
    res = refalrts::splice_evar( res, context[6], context[6] );
    res = refalrts::splice_evar( res, context[5], context[1] );
    refalrts::use( res );
    return refalrts::FnResult(refalrts::cSuccess | (__LINE__ << 8));
  } while ( 0 );

  //#FailE 
  // </0 & GenReturn/4 # Fail/5 e.Indent#1/2 >/1
  if( ! refalrts::ident_term(  & ident_Fail<int>::name, context[5] ) )
    return refalrts::cRecognitionImpossible;
  // closed e.Indent#1 as range 2

  refalrts::reset_allocator();
  //TRASH: {REMOVED TILE}  {REMOVED TILE}  {REMOVED TILE}  {REMOVED TILE} 
  //RESULT: Tile{ [[ } Tile{ HalfReuse: (/5 AsIs: e.Indent#1/2 HalfReuse: 'r'/1 } 'e'/6 Tile{ HalfReuse: 't'/0 HalfReuse: 'u'/4 }"rn refalrts::FnResult(refalrts::cRecognitionImpossible | (__LINE__ << 8));"/7 )/9 Tile{ ]] }
  if( ! refalrts::alloc_char( context[6], 'e' ) )
    return refalrts::cNoMemory;
  if( ! refalrts::alloc_chars( context[7], context[8], "rn refalrts::FnResult(refalrts::cRecognitionImpossible | (__LINE__ << 8));", 74 ) )
    return refalrts::cNoMemory;
  if( ! refalrts::alloc_close_bracket( context[9] ) )
    return refalrts::cNoMemory;
  refalrts::reinit_open_bracket( context[5] );
  refalrts::reinit_char( context[1], 'r' );
  refalrts::reinit_char( context[0], 't' );
  refalrts::reinit_char( context[4], 'u' );
  refalrts::link_brackets( context[5], context[9] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = arg_end->next;
  res = refalrts::splice_evar( res, context[7], context[9] );
  res = refalrts::splice_evar( res, context[0], context[4] );
  res = refalrts::splice_evar( res, context[6], context[6] );
  res = refalrts::splice_evar( res, context[5], context[1] );
  refalrts::use( res );
  return refalrts::FnResult(refalrts::cSuccess | (__LINE__ << 8));
#endif
}

static refalrts::FnResult GenSwap(refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  refalrts::this_is_generated_function();
  // issue here memory for vars with 83 elems
  refalrts::Iter context[83];
  refalrts::zeros( context, 83 );
#ifdef INTERPRET
  static const refalrts::RefalFunction functions[] = {
    { GenFnStart, "GenFnStart" },
    { GenReturn, "GenReturn" }
  };
  static const refalrts::RefalIdentifier idents[] = {
    & ident_Success<int>::name
  };
  using refalrts::numbers;
  static const refalrts::StringItem strings[] = {
    {"  ", 2},
    {"  refalrts::splice_to_freelist( arg_begin, arg_end );", 53},
    {"  refalrts::swap_save( s_head, info_b, info_e );", 48},
    {"  refalrts::splice_evar( arg_begin, saved_b, saved_e );", 55},
    {"  refalrts::swap_info_bounds( saved_b, saved_e, s_head );", 57},
    {"  refalrts::Iter saved_e;", 25},
    {"  refalrts::Iter saved_b;", 25},
    {"  static refalrts::Iter s_head = refalrts::initialize_swap_head( func_name );", 77},
    {"  refalrts::move_right( info_b, info_e );", 41},
    {"  refalrts::move_left( info_b, info_e );", 40},
    {"  refalrts::Iter info_e = arg_end;", 34},
    {"  refalrts::Iter info_b = func_name;", 36},
    {"  refalrts::move_left( func_name, arg_end );", 44},
    {"  refalrts::Iter func_name = arg_begin;", 39}
  };
  static const refalrts::RASLCommand raa[] = {
    // </0 & GenSwap/4 s.MemoryClass#1/5 e.Name#1/2 >/1
    {refalrts::icInitB0_Lite, 0, 0, 0},
    {refalrts::icCallSaveLeft, 0, 2, 0},
    {refalrts::icsVarLeft, 0, 5, 2},
    // closed e.Name#1 as range 2
    {refalrts::icEmptyResult, 0, 0, 0},
    //TRASH: {REMOVED TILE}  {REMOVED TILE} 
    //RESULT: Tile{ [[ AsIs: </0 Reuse: & GenFnStart/4 AsIs: s.MemoryClass#1/5 AsIs: e.Name#1/2 AsIs: >/1 } (/6"  refalrts::Iter func_name = arg_begin;"/7 )/9 (/10 )/11 (/12"  refalrts::move_left( func_name, arg_end );"/13 )/15 (/16 )/17 (/18"  refalrts::Iter info_b = func_name;"/19 )/21 (/22"  refalrts::Iter info_e = arg_end;"/23 )/25 (/26 )/27 (/28"  refalrts::move_left( info_b, info_e );"/29 )/31 (/32"  refalrts::move_right( info_b, info_e );"/33 )/35 (/36 )/37 (/38"  static refalrts::Iter s_head = refalrts::initialize_swap_head( func_name );"/39 )/41 (/42 )/43 (/44"  refalrts::Iter saved_b;"/45 )/47 (/48"  refalrts::Iter saved_e;"/49 )/51 (/52 )/53 (/54"  refalrts::swap_info_bounds( saved_b, saved_e, s_head );"/55 )/57 (/58"  refalrts::splice_evar( arg_begin, saved_b, saved_e );"/59 )/61 (/62"  refalrts::swap_save( s_head, info_b, info_e );"/63 )/65 (/66"  refalrts::splice_to_freelist( arg_begin, arg_end );"/67 )/69 (/70 )/71 </72 & GenReturn/73 # Success/74"  "/75 >/77 (/78 '}'/79 )/80 (/81 )/82 Tile{ ]] }
    {refalrts::icAllocBracket, 0, refalrts::ibOpenBracket, 6},
    {refalrts::icAllocString, 0, 13, 7},
    {refalrts::icAllocBracket, 0, refalrts::ibCloseBracket, 9},
    {refalrts::icAllocBracket, 0, refalrts::ibOpenBracket, 10},
    {refalrts::icAllocBracket, 0, refalrts::ibCloseBracket, 11},
    {refalrts::icAllocBracket, 0, refalrts::ibOpenBracket, 12},
    {refalrts::icAllocString, 0, 12, 13},
    {refalrts::icAllocBracket, 0, refalrts::ibCloseBracket, 15},
    {refalrts::icAllocBracket, 0, refalrts::ibOpenBracket, 16},
    {refalrts::icAllocBracket, 0, refalrts::ibCloseBracket, 17},
    {refalrts::icAllocBracket, 0, refalrts::ibOpenBracket, 18},
    {refalrts::icAllocString, 0, 11, 19},
    {refalrts::icAllocBracket, 0, refalrts::ibCloseBracket, 21},
    {refalrts::icAllocBracket, 0, refalrts::ibOpenBracket, 22},
    {refalrts::icAllocString, 0, 10, 23},
    {refalrts::icAllocBracket, 0, refalrts::ibCloseBracket, 25},
    {refalrts::icAllocBracket, 0, refalrts::ibOpenBracket, 26},
    {refalrts::icAllocBracket, 0, refalrts::ibCloseBracket, 27},
    {refalrts::icAllocBracket, 0, refalrts::ibOpenBracket, 28},
    {refalrts::icAllocString, 0, 9, 29},
    {refalrts::icAllocBracket, 0, refalrts::ibCloseBracket, 31},
    {refalrts::icAllocBracket, 0, refalrts::ibOpenBracket, 32},
    {refalrts::icAllocString, 0, 8, 33},
    {refalrts::icAllocBracket, 0, refalrts::ibCloseBracket, 35},
    {refalrts::icAllocBracket, 0, refalrts::ibOpenBracket, 36},
    {refalrts::icAllocBracket, 0, refalrts::ibCloseBracket, 37},
    {refalrts::icAllocBracket, 0, refalrts::ibOpenBracket, 38},
    {refalrts::icAllocString, 0, 7, 39},
    {refalrts::icAllocBracket, 0, refalrts::ibCloseBracket, 41},
    {refalrts::icAllocBracket, 0, refalrts::ibOpenBracket, 42},
    {refalrts::icAllocBracket, 0, refalrts::ibCloseBracket, 43},
    {refalrts::icAllocBracket, 0, refalrts::ibOpenBracket, 44},
    {refalrts::icAllocString, 0, 6, 45},
    {refalrts::icAllocBracket, 0, refalrts::ibCloseBracket, 47},
    {refalrts::icAllocBracket, 0, refalrts::ibOpenBracket, 48},
    {refalrts::icAllocString, 0, 5, 49},
    {refalrts::icAllocBracket, 0, refalrts::ibCloseBracket, 51},
    {refalrts::icAllocBracket, 0, refalrts::ibOpenBracket, 52},
    {refalrts::icAllocBracket, 0, refalrts::ibCloseBracket, 53},
    {refalrts::icAllocBracket, 0, refalrts::ibOpenBracket, 54},
    {refalrts::icAllocString, 0, 4, 55},
    {refalrts::icAllocBracket, 0, refalrts::ibCloseBracket, 57},
    {refalrts::icAllocBracket, 0, refalrts::ibOpenBracket, 58},
    {refalrts::icAllocString, 0, 3, 59},
    {refalrts::icAllocBracket, 0, refalrts::ibCloseBracket, 61},
    {refalrts::icAllocBracket, 0, refalrts::ibOpenBracket, 62},
    {refalrts::icAllocString, 0, 2, 63},
    {refalrts::icAllocBracket, 0, refalrts::ibCloseBracket, 65},
    {refalrts::icAllocBracket, 0, refalrts::ibOpenBracket, 66},
    {refalrts::icAllocString, 0, 1, 67},
    {refalrts::icAllocBracket, 0, refalrts::ibCloseBracket, 69},
    {refalrts::icAllocBracket, 0, refalrts::ibOpenBracket, 70},
    {refalrts::icAllocBracket, 0, refalrts::ibCloseBracket, 71},
    {refalrts::icAllocBracket, 0, refalrts::ibOpenCall, 72},
    {refalrts::icAllocFunc, 0, 1, 73},
    {refalrts::icAllocIdent, 0, 0, 74},
    {refalrts::icAllocString, 0, 0, 75},
    {refalrts::icAllocBracket, 0, refalrts::ibCloseCall, 77},
    {refalrts::icAllocBracket, 0, refalrts::ibOpenBracket, 78},
    {refalrts::icAllocChar, 0, '}', 79},
    {refalrts::icAllocBracket, 0, refalrts::ibCloseBracket, 80},
    {refalrts::icAllocBracket, 0, refalrts::ibOpenBracket, 81},
    {refalrts::icAllocBracket, 0, refalrts::ibCloseBracket, 82},
    {refalrts::icUpdateFunc, 0, 0, 4},
    {refalrts::icLinkBrackets, 81, 82, 0},
    {refalrts::icLinkBrackets, 78, 80, 0},
    {refalrts::icPushStack, 0, 0, 77},
    {refalrts::icPushStack, 0, 0, 72},
    {refalrts::icLinkBrackets, 70, 71, 0},
    {refalrts::icLinkBrackets, 66, 69, 0},
    {refalrts::icLinkBrackets, 62, 65, 0},
    {refalrts::icLinkBrackets, 58, 61, 0},
    {refalrts::icLinkBrackets, 54, 57, 0},
    {refalrts::icLinkBrackets, 52, 53, 0},
    {refalrts::icLinkBrackets, 48, 51, 0},
    {refalrts::icLinkBrackets, 44, 47, 0},
    {refalrts::icLinkBrackets, 42, 43, 0},
    {refalrts::icLinkBrackets, 38, 41, 0},
    {refalrts::icLinkBrackets, 36, 37, 0},
    {refalrts::icLinkBrackets, 32, 35, 0},
    {refalrts::icLinkBrackets, 28, 31, 0},
    {refalrts::icLinkBrackets, 26, 27, 0},
    {refalrts::icLinkBrackets, 22, 25, 0},
    {refalrts::icLinkBrackets, 18, 21, 0},
    {refalrts::icLinkBrackets, 16, 17, 0},
    {refalrts::icLinkBrackets, 12, 15, 0},
    {refalrts::icLinkBrackets, 10, 11, 0},
    {refalrts::icLinkBrackets, 6, 9, 0},
    {refalrts::icPushStack, 0, 0, 1},
    {refalrts::icPushStack, 0, 0, 0},
    {refalrts::icSetResRightEdge, 0, 0, 0},
    {refalrts::icSpliceTile, 6, 82, 0},
    {refalrts::icReturnResult_NoTrash, 0, 0, 0},
    {refalrts::icEnd, 0, 0, 0}
  };
  int open_e_stack[1];
  refalrts::FnResult res = refalrts::interpret_array(
    raa, context, arg_begin, arg_end,
    functions, idents, numbers, strings, open_e_stack
  );
  return res;
#else
  // </0 & GenSwap/4 s.MemoryClass#1/5 e.Name#1/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  if( ! refalrts::svar_left( context[5], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  // closed e.Name#1 as range 2

  refalrts::reset_allocator();
  //TRASH: {REMOVED TILE}  {REMOVED TILE} 
  //RESULT: Tile{ [[ AsIs: </0 Reuse: & GenFnStart/4 AsIs: s.MemoryClass#1/5 AsIs: e.Name#1/2 AsIs: >/1 } (/6"  refalrts::Iter func_name = arg_begin;"/7 )/9 (/10 )/11 (/12"  refalrts::move_left( func_name, arg_end );"/13 )/15 (/16 )/17 (/18"  refalrts::Iter info_b = func_name;"/19 )/21 (/22"  refalrts::Iter info_e = arg_end;"/23 )/25 (/26 )/27 (/28"  refalrts::move_left( info_b, info_e );"/29 )/31 (/32"  refalrts::move_right( info_b, info_e );"/33 )/35 (/36 )/37 (/38"  static refalrts::Iter s_head = refalrts::initialize_swap_head( func_name );"/39 )/41 (/42 )/43 (/44"  refalrts::Iter saved_b;"/45 )/47 (/48"  refalrts::Iter saved_e;"/49 )/51 (/52 )/53 (/54"  refalrts::swap_info_bounds( saved_b, saved_e, s_head );"/55 )/57 (/58"  refalrts::splice_evar( arg_begin, saved_b, saved_e );"/59 )/61 (/62"  refalrts::swap_save( s_head, info_b, info_e );"/63 )/65 (/66"  refalrts::splice_to_freelist( arg_begin, arg_end );"/67 )/69 (/70 )/71 </72 & GenReturn/73 # Success/74"  "/75 >/77 (/78 '}'/79 )/80 (/81 )/82 Tile{ ]] }
  if( ! refalrts::alloc_open_bracket( context[6] ) )
    return refalrts::cNoMemory;
  if( ! refalrts::alloc_chars( context[7], context[8], "  refalrts::Iter func_name = arg_begin;", 39 ) )
    return refalrts::cNoMemory;
  if( ! refalrts::alloc_close_bracket( context[9] ) )
    return refalrts::cNoMemory;
  if( ! refalrts::alloc_open_bracket( context[10] ) )
    return refalrts::cNoMemory;
  if( ! refalrts::alloc_close_bracket( context[11] ) )
    return refalrts::cNoMemory;
  if( ! refalrts::alloc_open_bracket( context[12] ) )
    return refalrts::cNoMemory;
  if( ! refalrts::alloc_chars( context[13], context[14], "  refalrts::move_left( func_name, arg_end );", 44 ) )
    return refalrts::cNoMemory;
  if( ! refalrts::alloc_close_bracket( context[15] ) )
    return refalrts::cNoMemory;
  if( ! refalrts::alloc_open_bracket( context[16] ) )
    return refalrts::cNoMemory;
  if( ! refalrts::alloc_close_bracket( context[17] ) )
    return refalrts::cNoMemory;
  if( ! refalrts::alloc_open_bracket( context[18] ) )
    return refalrts::cNoMemory;
  if( ! refalrts::alloc_chars( context[19], context[20], "  refalrts::Iter info_b = func_name;", 36 ) )
    return refalrts::cNoMemory;
  if( ! refalrts::alloc_close_bracket( context[21] ) )
    return refalrts::cNoMemory;
  if( ! refalrts::alloc_open_bracket( context[22] ) )
    return refalrts::cNoMemory;
  if( ! refalrts::alloc_chars( context[23], context[24], "  refalrts::Iter info_e = arg_end;", 34 ) )
    return refalrts::cNoMemory;
  if( ! refalrts::alloc_close_bracket( context[25] ) )
    return refalrts::cNoMemory;
  if( ! refalrts::alloc_open_bracket( context[26] ) )
    return refalrts::cNoMemory;
  if( ! refalrts::alloc_close_bracket( context[27] ) )
    return refalrts::cNoMemory;
  if( ! refalrts::alloc_open_bracket( context[28] ) )
    return refalrts::cNoMemory;
  if( ! refalrts::alloc_chars( context[29], context[30], "  refalrts::move_left( info_b, info_e );", 40 ) )
    return refalrts::cNoMemory;
  if( ! refalrts::alloc_close_bracket( context[31] ) )
    return refalrts::cNoMemory;
  if( ! refalrts::alloc_open_bracket( context[32] ) )
    return refalrts::cNoMemory;
  if( ! refalrts::alloc_chars( context[33], context[34], "  refalrts::move_right( info_b, info_e );", 41 ) )
    return refalrts::cNoMemory;
  if( ! refalrts::alloc_close_bracket( context[35] ) )
    return refalrts::cNoMemory;
  if( ! refalrts::alloc_open_bracket( context[36] ) )
    return refalrts::cNoMemory;
  if( ! refalrts::alloc_close_bracket( context[37] ) )
    return refalrts::cNoMemory;
  if( ! refalrts::alloc_open_bracket( context[38] ) )
    return refalrts::cNoMemory;
  if( ! refalrts::alloc_chars( context[39], context[40], "  static refalrts::Iter s_head = refalrts::initialize_swap_head( func_name );", 77 ) )
    return refalrts::cNoMemory;
  if( ! refalrts::alloc_close_bracket( context[41] ) )
    return refalrts::cNoMemory;
  if( ! refalrts::alloc_open_bracket( context[42] ) )
    return refalrts::cNoMemory;
  if( ! refalrts::alloc_close_bracket( context[43] ) )
    return refalrts::cNoMemory;
  if( ! refalrts::alloc_open_bracket( context[44] ) )
    return refalrts::cNoMemory;
  if( ! refalrts::alloc_chars( context[45], context[46], "  refalrts::Iter saved_b;", 25 ) )
    return refalrts::cNoMemory;
  if( ! refalrts::alloc_close_bracket( context[47] ) )
    return refalrts::cNoMemory;
  if( ! refalrts::alloc_open_bracket( context[48] ) )
    return refalrts::cNoMemory;
  if( ! refalrts::alloc_chars( context[49], context[50], "  refalrts::Iter saved_e;", 25 ) )
    return refalrts::cNoMemory;
  if( ! refalrts::alloc_close_bracket( context[51] ) )
    return refalrts::cNoMemory;
  if( ! refalrts::alloc_open_bracket( context[52] ) )
    return refalrts::cNoMemory;
  if( ! refalrts::alloc_close_bracket( context[53] ) )
    return refalrts::cNoMemory;
  if( ! refalrts::alloc_open_bracket( context[54] ) )
    return refalrts::cNoMemory;
  if( ! refalrts::alloc_chars( context[55], context[56], "  refalrts::swap_info_bounds( saved_b, saved_e, s_head );", 57 ) )
    return refalrts::cNoMemory;
  if( ! refalrts::alloc_close_bracket( context[57] ) )
    return refalrts::cNoMemory;
  if( ! refalrts::alloc_open_bracket( context[58] ) )
    return refalrts::cNoMemory;
  if( ! refalrts::alloc_chars( context[59], context[60], "  refalrts::splice_evar( arg_begin, saved_b, saved_e );", 55 ) )
    return refalrts::cNoMemory;
  if( ! refalrts::alloc_close_bracket( context[61] ) )
    return refalrts::cNoMemory;
  if( ! refalrts::alloc_open_bracket( context[62] ) )
    return refalrts::cNoMemory;
  if( ! refalrts::alloc_chars( context[63], context[64], "  refalrts::swap_save( s_head, info_b, info_e );", 48 ) )
    return refalrts::cNoMemory;
  if( ! refalrts::alloc_close_bracket( context[65] ) )
    return refalrts::cNoMemory;
  if( ! refalrts::alloc_open_bracket( context[66] ) )
    return refalrts::cNoMemory;
  if( ! refalrts::alloc_chars( context[67], context[68], "  refalrts::splice_to_freelist( arg_begin, arg_end );", 53 ) )
    return refalrts::cNoMemory;
  if( ! refalrts::alloc_close_bracket( context[69] ) )
    return refalrts::cNoMemory;
  if( ! refalrts::alloc_open_bracket( context[70] ) )
    return refalrts::cNoMemory;
  if( ! refalrts::alloc_close_bracket( context[71] ) )
    return refalrts::cNoMemory;
  if( ! refalrts::alloc_open_call( context[72] ) )
    return refalrts::cNoMemory;
  if( ! refalrts::alloc_name( context[73], GenReturn, "GenReturn" ) )
    return refalrts::cNoMemory;
  if( ! refalrts::alloc_ident( context[74], & ident_Success<int>::name ) )
    return refalrts::cNoMemory;
  if( ! refalrts::alloc_chars( context[75], context[76], "  ", 2 ) )
    return refalrts::cNoMemory;
  if( ! refalrts::alloc_close_call( context[77] ) )
    return refalrts::cNoMemory;
  if( ! refalrts::alloc_open_bracket( context[78] ) )
    return refalrts::cNoMemory;
  if( ! refalrts::alloc_char( context[79], '}' ) )
    return refalrts::cNoMemory;
  if( ! refalrts::alloc_close_bracket( context[80] ) )
    return refalrts::cNoMemory;
  if( ! refalrts::alloc_open_bracket( context[81] ) )
    return refalrts::cNoMemory;
  if( ! refalrts::alloc_close_bracket( context[82] ) )
    return refalrts::cNoMemory;
  refalrts::update_name( context[4], GenFnStart, "GenFnStart" );
  refalrts::link_brackets( context[81], context[82] );
  refalrts::link_brackets( context[78], context[80] );
  refalrts::push_stack( context[77] );
  refalrts::push_stack( context[72] );
  refalrts::link_brackets( context[70], context[71] );
  refalrts::link_brackets( context[66], context[69] );
  refalrts::link_brackets( context[62], context[65] );
  refalrts::link_brackets( context[58], context[61] );
  refalrts::link_brackets( context[54], context[57] );
  refalrts::link_brackets( context[52], context[53] );
  refalrts::link_brackets( context[48], context[51] );
  refalrts::link_brackets( context[44], context[47] );
  refalrts::link_brackets( context[42], context[43] );
  refalrts::link_brackets( context[38], context[41] );
  refalrts::link_brackets( context[36], context[37] );
  refalrts::link_brackets( context[32], context[35] );
  refalrts::link_brackets( context[28], context[31] );
  refalrts::link_brackets( context[26], context[27] );
  refalrts::link_brackets( context[22], context[25] );
  refalrts::link_brackets( context[18], context[21] );
  refalrts::link_brackets( context[16], context[17] );
  refalrts::link_brackets( context[12], context[15] );
  refalrts::link_brackets( context[10], context[11] );
  refalrts::link_brackets( context[6], context[9] );
  refalrts::push_stack( context[1] );
  refalrts::push_stack( context[0] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = arg_end->next;
  res = refalrts::splice_evar( res, context[6], context[82] );
  refalrts::use( res );
  return refalrts::FnResult(refalrts::cSuccess | (__LINE__ << 8));
#endif
}

static refalrts::FnResult GenIdent(refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  refalrts::this_is_generated_function();
  // issue here memory for vars with 42 elems
  refalrts::Iter context[42];
  refalrts::zeros( context, 42 );
#ifdef INTERPRET
  using refalrts::functions;
  using refalrts::idents;
  using refalrts::numbers;
  static const refalrts::StringItem strings[] = {
    {"};", 2},
    {"  }", 3},
    {"\";", 2},
    {"    return \"", 12},
    {"  static const char *name() {", 29},
    {" {", 2},
    {"struct ident_", 13},
    {"template <typename SREFAL_PARAM_INT>", 36},
    {"// identifier", 13}
  };
  static const refalrts::RASLCommand raa[] = {
    // </0 & GenIdent/4 e.Name#1/2 >/1
    {refalrts::icInitB0_Lite, 0, 0, 0},
    {refalrts::icCallSaveLeft, 0, 2, 0},
    // closed e.Name#1 as range 2
    {refalrts::icEmptyResult, 0, 0, 0},
    //TRASH: {REMOVED TILE}  {REMOVED TILE}  {REMOVED TILE} 
    //RESULT: Tile{ [[ } (/5"// identifier"/6 Tile{ HalfReuse: ' '/0 HalfReuse: '#'/4 AsIs: e.Name#1/2 HalfReuse: )/1 } (/8"template <typename SREFAL_PARAM_INT>"/9 )/11 (/12"struct ident_"/13 e.Name#1/2/15" {"/17 )/19 (/20"  static const char *name() {"/21 )/23 (/24"    return \""/25 e.Name#1/2/27"\";"/29 )/31 (/32"  }"/33 )/35 (/36"};"/37 )/39 (/40 )/41 Tile{ ]] }
    {refalrts::icAllocBracket, 0, refalrts::ibOpenBracket, 5},
    {refalrts::icAllocString, 0, 8, 6},
    {refalrts::icAllocBracket, 0, refalrts::ibOpenBracket, 8},
    {refalrts::icAllocString, 0, 7, 9},
    {refalrts::icAllocBracket, 0, refalrts::ibCloseBracket, 11},
    {refalrts::icAllocBracket, 0, refalrts::ibOpenBracket, 12},
    {refalrts::icAllocString, 0, 6, 13},
    {refalrts::icCopyEVar, 15, 2, 0},
    {refalrts::icAllocString, 0, 5, 17},
    {refalrts::icAllocBracket, 0, refalrts::ibCloseBracket, 19},
    {refalrts::icAllocBracket, 0, refalrts::ibOpenBracket, 20},
    {refalrts::icAllocString, 0, 4, 21},
    {refalrts::icAllocBracket, 0, refalrts::ibCloseBracket, 23},
    {refalrts::icAllocBracket, 0, refalrts::ibOpenBracket, 24},
    {refalrts::icAllocString, 0, 3, 25},
    {refalrts::icCopyEVar, 27, 2, 0},
    {refalrts::icAllocString, 0, 2, 29},
    {refalrts::icAllocBracket, 0, refalrts::ibCloseBracket, 31},
    {refalrts::icAllocBracket, 0, refalrts::ibOpenBracket, 32},
    {refalrts::icAllocString, 0, 1, 33},
    {refalrts::icAllocBracket, 0, refalrts::ibCloseBracket, 35},
    {refalrts::icAllocBracket, 0, refalrts::ibOpenBracket, 36},
    {refalrts::icAllocString, 0, 0, 37},
    {refalrts::icAllocBracket, 0, refalrts::ibCloseBracket, 39},
    {refalrts::icAllocBracket, 0, refalrts::ibOpenBracket, 40},
    {refalrts::icAllocBracket, 0, refalrts::ibCloseBracket, 41},
    {refalrts::icReinitChar, 0, ' ', 0},
    {refalrts::icReinitChar, 0, '#', 4},
    {refalrts::icReinitBracket, 0, refalrts::ibCloseBracket, 1},
    {refalrts::icLinkBrackets, 40, 41, 0},
    {refalrts::icLinkBrackets, 36, 39, 0},
    {refalrts::icLinkBrackets, 32, 35, 0},
    {refalrts::icLinkBrackets, 24, 31, 0},
    {refalrts::icLinkBrackets, 20, 23, 0},
    {refalrts::icLinkBrackets, 12, 19, 0},
    {refalrts::icLinkBrackets, 8, 11, 0},
    {refalrts::icLinkBrackets, 5, 1, 0},
    {refalrts::icSetResRightEdge, 0, 0, 0},
    {refalrts::icSpliceTile, 8, 41, 0},
    {refalrts::icSpliceTile, 0, 1, 0},
    {refalrts::icSpliceTile, 5, 7, 0},
    {refalrts::icReturnResult_NoTrash, 0, 0, 0},
    {refalrts::icEnd, 0, 0, 0}
  };
  int open_e_stack[1];
  refalrts::FnResult res = refalrts::interpret_array(
    raa, context, arg_begin, arg_end,
    functions, idents, numbers, strings, open_e_stack
  );
  return res;
#else
  // </0 & GenIdent/4 e.Name#1/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.Name#1 as range 2

  refalrts::reset_allocator();
  //TRASH: {REMOVED TILE}  {REMOVED TILE}  {REMOVED TILE} 
  //RESULT: Tile{ [[ } (/5"// identifier"/6 Tile{ HalfReuse: ' '/0 HalfReuse: '#'/4 AsIs: e.Name#1/2 HalfReuse: )/1 } (/8"template <typename SREFAL_PARAM_INT>"/9 )/11 (/12"struct ident_"/13 e.Name#1/2/15" {"/17 )/19 (/20"  static const char *name() {"/21 )/23 (/24"    return \""/25 e.Name#1/2/27"\";"/29 )/31 (/32"  }"/33 )/35 (/36"};"/37 )/39 (/40 )/41 Tile{ ]] }
  if( ! refalrts::alloc_open_bracket( context[5] ) )
    return refalrts::cNoMemory;
  if( ! refalrts::alloc_chars( context[6], context[7], "// identifier", 13 ) )
    return refalrts::cNoMemory;
  if( ! refalrts::alloc_open_bracket( context[8] ) )
    return refalrts::cNoMemory;
  if( ! refalrts::alloc_chars( context[9], context[10], "template <typename SREFAL_PARAM_INT>", 36 ) )
    return refalrts::cNoMemory;
  if( ! refalrts::alloc_close_bracket( context[11] ) )
    return refalrts::cNoMemory;
  if( ! refalrts::alloc_open_bracket( context[12] ) )
    return refalrts::cNoMemory;
  if( ! refalrts::alloc_chars( context[13], context[14], "struct ident_", 13 ) )
    return refalrts::cNoMemory;
  if (! refalrts::copy_evar(context[15], context[16], context[2], context[3]))
    return refalrts::cNoMemory;
  if( ! refalrts::alloc_chars( context[17], context[18], " {", 2 ) )
    return refalrts::cNoMemory;
  if( ! refalrts::alloc_close_bracket( context[19] ) )
    return refalrts::cNoMemory;
  if( ! refalrts::alloc_open_bracket( context[20] ) )
    return refalrts::cNoMemory;
  if( ! refalrts::alloc_chars( context[21], context[22], "  static const char *name() {", 29 ) )
    return refalrts::cNoMemory;
  if( ! refalrts::alloc_close_bracket( context[23] ) )
    return refalrts::cNoMemory;
  if( ! refalrts::alloc_open_bracket( context[24] ) )
    return refalrts::cNoMemory;
  if( ! refalrts::alloc_chars( context[25], context[26], "    return \"", 12 ) )
    return refalrts::cNoMemory;
  if (! refalrts::copy_evar(context[27], context[28], context[2], context[3]))
    return refalrts::cNoMemory;
  if( ! refalrts::alloc_chars( context[29], context[30], "\";", 2 ) )
    return refalrts::cNoMemory;
  if( ! refalrts::alloc_close_bracket( context[31] ) )
    return refalrts::cNoMemory;
  if( ! refalrts::alloc_open_bracket( context[32] ) )
    return refalrts::cNoMemory;
  if( ! refalrts::alloc_chars( context[33], context[34], "  }", 3 ) )
    return refalrts::cNoMemory;
  if( ! refalrts::alloc_close_bracket( context[35] ) )
    return refalrts::cNoMemory;
  if( ! refalrts::alloc_open_bracket( context[36] ) )
    return refalrts::cNoMemory;
  if( ! refalrts::alloc_chars( context[37], context[38], "};", 2 ) )
    return refalrts::cNoMemory;
  if( ! refalrts::alloc_close_bracket( context[39] ) )
    return refalrts::cNoMemory;
  if( ! refalrts::alloc_open_bracket( context[40] ) )
    return refalrts::cNoMemory;
  if( ! refalrts::alloc_close_bracket( context[41] ) )
    return refalrts::cNoMemory;
  refalrts::reinit_char( context[0], ' ' );
  refalrts::reinit_char( context[4], '#' );
  refalrts::reinit_close_bracket( context[1] );
  refalrts::link_brackets( context[40], context[41] );
  refalrts::link_brackets( context[36], context[39] );
  refalrts::link_brackets( context[32], context[35] );
  refalrts::link_brackets( context[24], context[31] );
  refalrts::link_brackets( context[20], context[23] );
  refalrts::link_brackets( context[12], context[19] );
  refalrts::link_brackets( context[8], context[11] );
  refalrts::link_brackets( context[5], context[1] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = arg_end->next;
  res = refalrts::splice_evar( res, context[8], context[41] );
  res = refalrts::splice_evar( res, context[0], context[1] );
  res = refalrts::splice_evar( res, context[5], context[7] );
  refalrts::use( res );
  return refalrts::FnResult(refalrts::cSuccess | (__LINE__ << 8));
#endif
}

static refalrts::FnResult GenCommonHeaders(refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  refalrts::this_is_generated_function();
  // issue here memory for vars with 16 elems
  refalrts::Iter context[16];
  refalrts::zeros( context, 16 );
#ifdef INTERPRET
  using refalrts::functions;
  using refalrts::idents;
  using refalrts::numbers;
  static const refalrts::StringItem strings[] = {
    {"#include \"refalrts.h\"", 21},
    {" Automatically generated file. Don\'t edit!", 42}
  };
  static const refalrts::RASLCommand raa[] = {
    // </0 & GenCommonHeaders/4 >/1
    {refalrts::icInitB0_Lite, 0, 0, 0},
    {refalrts::icCallSaveLeft, 0, 2, 0},
    {refalrts::icEmpty, 0, 0, 2},
    {refalrts::icEmptyResult, 0, 0, 0},
    //TRASH: {REMOVED TILE}  {REMOVED TILE} 
    //RESULT: Tile{ [[ HalfReuse: (/0 HalfReuse: '/'/4 HalfReuse: '/'/1 }" Automatically generated file. Don\'t edit!"/5 )/7 (/8"#include \"refalrts.h\""/9 )/11 (/12 )/13 (/14 )/15 Tile{ ]] }
    {refalrts::icAllocString, 0, 1, 5},
    {refalrts::icAllocBracket, 0, refalrts::ibCloseBracket, 7},
    {refalrts::icAllocBracket, 0, refalrts::ibOpenBracket, 8},
    {refalrts::icAllocString, 0, 0, 9},
    {refalrts::icAllocBracket, 0, refalrts::ibCloseBracket, 11},
    {refalrts::icAllocBracket, 0, refalrts::ibOpenBracket, 12},
    {refalrts::icAllocBracket, 0, refalrts::ibCloseBracket, 13},
    {refalrts::icAllocBracket, 0, refalrts::ibOpenBracket, 14},
    {refalrts::icAllocBracket, 0, refalrts::ibCloseBracket, 15},
    {refalrts::icReinitBracket, 0, refalrts::ibOpenBracket, 0},
    {refalrts::icReinitChar, 0, '/', 4},
    {refalrts::icReinitChar, 0, '/', 1},
    {refalrts::icLinkBrackets, 14, 15, 0},
    {refalrts::icLinkBrackets, 12, 13, 0},
    {refalrts::icLinkBrackets, 8, 11, 0},
    {refalrts::icLinkBrackets, 0, 7, 0},
    {refalrts::icSetResRightEdge, 0, 0, 0},
    {refalrts::icSpliceTile, 5, 15, 0},
    {refalrts::icReturnResult_NoTrash, 0, 0, 0},
    {refalrts::icEnd, 0, 0, 0}
  };
  int open_e_stack[1];
  refalrts::FnResult res = refalrts::interpret_array(
    raa, context, arg_begin, arg_end,
    functions, idents, numbers, strings, open_e_stack
  );
  return res;
#else
  // </0 & GenCommonHeaders/4 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  if( ! refalrts::empty_seq( context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;

  refalrts::reset_allocator();
  //TRASH: {REMOVED TILE}  {REMOVED TILE} 
  //RESULT: Tile{ [[ HalfReuse: (/0 HalfReuse: '/'/4 HalfReuse: '/'/1 }" Automatically generated file. Don\'t edit!"/5 )/7 (/8"#include \"refalrts.h\""/9 )/11 (/12 )/13 (/14 )/15 Tile{ ]] }
  if( ! refalrts::alloc_chars( context[5], context[6], " Automatically generated file. Don\'t edit!", 42 ) )
    return refalrts::cNoMemory;
  if( ! refalrts::alloc_close_bracket( context[7] ) )
    return refalrts::cNoMemory;
  if( ! refalrts::alloc_open_bracket( context[8] ) )
    return refalrts::cNoMemory;
  if( ! refalrts::alloc_chars( context[9], context[10], "#include \"refalrts.h\"", 21 ) )
    return refalrts::cNoMemory;
  if( ! refalrts::alloc_close_bracket( context[11] ) )
    return refalrts::cNoMemory;
  if( ! refalrts::alloc_open_bracket( context[12] ) )
    return refalrts::cNoMemory;
  if( ! refalrts::alloc_close_bracket( context[13] ) )
    return refalrts::cNoMemory;
  if( ! refalrts::alloc_open_bracket( context[14] ) )
    return refalrts::cNoMemory;
  if( ! refalrts::alloc_close_bracket( context[15] ) )
    return refalrts::cNoMemory;
  refalrts::reinit_open_bracket( context[0] );
  refalrts::reinit_char( context[4], '/' );
  refalrts::reinit_char( context[1], '/' );
  refalrts::link_brackets( context[14], context[15] );
  refalrts::link_brackets( context[12], context[13] );
  refalrts::link_brackets( context[8], context[11] );
  refalrts::link_brackets( context[0], context[7] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = arg_end->next;
  res = refalrts::splice_evar( res, context[5], context[15] );
  refalrts::use( res );
  return refalrts::FnResult(refalrts::cSuccess | (__LINE__ << 8));
#endif
}

static refalrts::FnResult GenCommonTailer(refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  refalrts::this_is_generated_function();
  // issue here memory for vars with 8 elems
  refalrts::Iter context[8];
  refalrts::zeros( context, 8 );
#ifdef INTERPRET
  using refalrts::functions;
  using refalrts::idents;
  using refalrts::numbers;
  static const refalrts::StringItem strings[] = {
    {"//End of file", 13}
  };
  static const refalrts::RASLCommand raa[] = {
    // </0 & GenCommonTailer/4 >/1
    {refalrts::icInitB0_Lite, 0, 0, 0},
    {refalrts::icCallSaveLeft, 0, 2, 0},
    {refalrts::icEmpty, 0, 0, 2},
    {refalrts::icEmptyResult, 0, 0, 0},
    //TRASH: {REMOVED TILE}  {REMOVED TILE} 
    //RESULT: Tile{ [[ HalfReuse: (/0 HalfReuse: )/4 HalfReuse: (/1 }"//End of file"/5 )/7 Tile{ ]] }
    {refalrts::icAllocString, 0, 0, 5},
    {refalrts::icAllocBracket, 0, refalrts::ibCloseBracket, 7},
    {refalrts::icReinitBracket, 0, refalrts::ibOpenBracket, 0},
    {refalrts::icReinitBracket, 0, refalrts::ibCloseBracket, 4},
    {refalrts::icReinitBracket, 0, refalrts::ibOpenBracket, 1},
    {refalrts::icLinkBrackets, 1, 7, 0},
    {refalrts::icLinkBrackets, 0, 4, 0},
    {refalrts::icSetResRightEdge, 0, 0, 0},
    {refalrts::icSpliceTile, 5, 7, 0},
    {refalrts::icReturnResult_NoTrash, 0, 0, 0},
    {refalrts::icEnd, 0, 0, 0}
  };
  int open_e_stack[1];
  refalrts::FnResult res = refalrts::interpret_array(
    raa, context, arg_begin, arg_end,
    functions, idents, numbers, strings, open_e_stack
  );
  return res;
#else
  // </0 & GenCommonTailer/4 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  if( ! refalrts::empty_seq( context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;

  refalrts::reset_allocator();
  //TRASH: {REMOVED TILE}  {REMOVED TILE} 
  //RESULT: Tile{ [[ HalfReuse: (/0 HalfReuse: )/4 HalfReuse: (/1 }"//End of file"/5 )/7 Tile{ ]] }
  if( ! refalrts::alloc_chars( context[5], context[6], "//End of file", 13 ) )
    return refalrts::cNoMemory;
  if( ! refalrts::alloc_close_bracket( context[7] ) )
    return refalrts::cNoMemory;
  refalrts::reinit_open_bracket( context[0] );
  refalrts::reinit_close_bracket( context[4] );
  refalrts::reinit_open_bracket( context[1] );
  refalrts::link_brackets( context[1], context[7] );
  refalrts::link_brackets( context[0], context[4] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = arg_end->next;
  res = refalrts::splice_evar( res, context[5], context[7] );
  refalrts::use( res );
  return refalrts::FnResult(refalrts::cSuccess | (__LINE__ << 8));
#endif
}

static refalrts::FnResult lambda_GenProgram_0(refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  refalrts::this_is_generated_function();
  // issue here memory for vars with 9 elems
  refalrts::Iter context[9];
  refalrts::zeros( context, 9 );
#ifdef INTERPRET
  using refalrts::functions;
  using refalrts::idents;
  using refalrts::numbers;
  using refalrts::strings;
  static const refalrts::RASLCommand raa[] = {
    // </0 & lambda_GenProgram_0/4 (/7 )/8 e.Generated#2/2 >/1
    {refalrts::icInitB0_Lite, 0, 0, 0},
    {refalrts::icCallSaveLeft, 0, 2, 0},
    {refalrts::icBracketLeftSave, 0, 5, 2},
    {refalrts::icEmpty, 0, 0, 5},
    // closed e.Generated#2 as range 2
    {refalrts::icEmptyResult, 0, 0, 0},
    //TRASH: {REMOVED TILE}  </0 & lambda_GenProgram_0/4 (/7 )/8 {REMOVED TILE}  >/1 {REMOVED TILE} 
    //RESULT: Tile{ [[ } Tile{ AsIs: e.Generated#2/2 } Tile{ ]] }
    {refalrts::icSetResRightEdge, 0, 0, 0},
    {refalrts::icSpliceEVar, 0, 0, 2},
    {refalrts::icTrashLeftEdge, 0, 0, 0},
    {refalrts::icReturnResult_NoTrash, 0, 0, 0},
    {refalrts::icEnd, 0, 0, 0}
  };
  int open_e_stack[1];
  refalrts::FnResult res = refalrts::interpret_array(
    raa, context, arg_begin, arg_end,
    functions, idents, numbers, strings, open_e_stack
  );
  return res;
#else
  // </0 & lambda_GenProgram_0/4 (/7 )/8 e.Generated#2/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  context[5] = 0;
  context[6] = 0;
  context[7] = refalrts::brackets_left( context[5], context[6], context[2], context[3] );
  if( ! context[7] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[7], context[8]);
  if( ! refalrts::empty_seq( context[5], context[6] ) )
    return refalrts::cRecognitionImpossible;
  // closed e.Generated#2 as range 2

  refalrts::reset_allocator();
  //TRASH: {REMOVED TILE}  </0 & lambda_GenProgram_0/4 (/7 )/8 {REMOVED TILE}  >/1 {REMOVED TILE} 
  //RESULT: Tile{ [[ } Tile{ AsIs: e.Generated#2/2 } Tile{ ]] }
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = arg_end->next;
  res = refalrts::splice_evar( res, context[2], context[3] );
  refalrts::use( res );
  refalrts::splice_to_freelist_open( trash_prev, res );
  return refalrts::FnResult(refalrts::cSuccess | (__LINE__ << 8));
#endif
}

refalrts::FnResult GenProgram(refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  refalrts::this_is_generated_function();
  // issue here memory for vars with 18 elems
  refalrts::Iter context[18];
  refalrts::zeros( context, 18 );
#ifdef INTERPRET
  static const refalrts::RefalFunction functions[] = {
    { GenCommonHeaders, "GenCommonHeaders" },
    { GenCommonTailer, "GenCommonTailer" },
    { lambda_GenProgram_0, "lambda_GenProgram_0" },
    { GenCommand, "GenCommand" },
    { MapReduce, "MapReduce" },
    { Fetch, "Fetch" }
  };
  using refalrts::idents;
  using refalrts::numbers;
  using refalrts::strings;
  static const refalrts::RASLCommand raa[] = {
    // </0 & GenProgram/4 e.Algorithm#1/2 >/1
    {refalrts::icInitB0_Lite, 0, 0, 0},
    {refalrts::icCallSaveLeft, 0, 2, 0},
    // closed e.Algorithm#1 as range 2
    {refalrts::icEmptyResult, 0, 0, 0},
    //TRASH: {REMOVED TILE}  {REMOVED TILE}  {REMOVED TILE} 
    //RESULT: Tile{ [[ AsIs: </0 Reuse: & GenCommonHeaders/4 } >/5 </6 & Fetch/7 </8 & MapReduce/9 & GenCommand/10 (/11 )/12 Tile{ AsIs: e.Algorithm#1/2 } >/13 & lambda_GenProgram_0/14 >/15 </16 & GenCommonTailer/17 Tile{ AsIs: >/1 ]] }
    {refalrts::icAllocBracket, 0, refalrts::ibCloseCall, 5},
    {refalrts::icAllocBracket, 0, refalrts::ibOpenCall, 6},
    {refalrts::icAllocFunc, 0, 5, 7},
    {refalrts::icAllocBracket, 0, refalrts::ibOpenCall, 8},
    {refalrts::icAllocFunc, 0, 4, 9},
    {refalrts::icAllocFunc, 0, 3, 10},
    {refalrts::icAllocBracket, 0, refalrts::ibOpenBracket, 11},
    {refalrts::icAllocBracket, 0, refalrts::ibCloseBracket, 12},
    {refalrts::icAllocBracket, 0, refalrts::ibCloseCall, 13},
    {refalrts::icAllocFunc, 0, 2, 14},
    {refalrts::icAllocBracket, 0, refalrts::ibCloseCall, 15},
    {refalrts::icAllocBracket, 0, refalrts::ibOpenCall, 16},
    {refalrts::icAllocFunc, 0, 1, 17},
    {refalrts::icUpdateFunc, 0, 0, 4},
    {refalrts::icPushStack, 0, 0, 1},
    {refalrts::icPushStack, 0, 0, 16},
    {refalrts::icPushStack, 0, 0, 15},
    {refalrts::icPushStack, 0, 0, 6},
    {refalrts::icPushStack, 0, 0, 13},
    {refalrts::icPushStack, 0, 0, 8},
    {refalrts::icLinkBrackets, 11, 12, 0},
    {refalrts::icPushStack, 0, 0, 5},
    {refalrts::icPushStack, 0, 0, 0},
    {refalrts::icSetRes, 0, 0, 1},
    {refalrts::icSpliceTile, 13, 17, 0},
    {refalrts::icSpliceEVar, 0, 0, 2},
    {refalrts::icSpliceTile, 5, 12, 0},
    {refalrts::icReturnResult_NoTrash, 0, 0, 0},
    {refalrts::icEnd, 0, 0, 0}
  };
  int open_e_stack[1];
  refalrts::FnResult res = refalrts::interpret_array(
    raa, context, arg_begin, arg_end,
    functions, idents, numbers, strings, open_e_stack
  );
  return res;
#else
  // </0 & GenProgram/4 e.Algorithm#1/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.Algorithm#1 as range 2

  refalrts::reset_allocator();
  //TRASH: {REMOVED TILE}  {REMOVED TILE}  {REMOVED TILE} 
  //RESULT: Tile{ [[ AsIs: </0 Reuse: & GenCommonHeaders/4 } >/5 </6 & Fetch/7 </8 & MapReduce/9 & GenCommand/10 (/11 )/12 Tile{ AsIs: e.Algorithm#1/2 } >/13 & lambda_GenProgram_0/14 >/15 </16 & GenCommonTailer/17 Tile{ AsIs: >/1 ]] }
  if( ! refalrts::alloc_close_call( context[5] ) )
    return refalrts::cNoMemory;
  if( ! refalrts::alloc_open_call( context[6] ) )
    return refalrts::cNoMemory;
  if( ! refalrts::alloc_name( context[7], Fetch, "Fetch" ) )
    return refalrts::cNoMemory;
  if( ! refalrts::alloc_open_call( context[8] ) )
    return refalrts::cNoMemory;
  if( ! refalrts::alloc_name( context[9], MapReduce, "MapReduce" ) )
    return refalrts::cNoMemory;
  if( ! refalrts::alloc_name( context[10], GenCommand, "GenCommand" ) )
    return refalrts::cNoMemory;
  if( ! refalrts::alloc_open_bracket( context[11] ) )
    return refalrts::cNoMemory;
  if( ! refalrts::alloc_close_bracket( context[12] ) )
    return refalrts::cNoMemory;
  if( ! refalrts::alloc_close_call( context[13] ) )
    return refalrts::cNoMemory;
  if( ! refalrts::alloc_name( context[14], lambda_GenProgram_0, "lambda_GenProgram_0" ) )
    return refalrts::cNoMemory;
  if( ! refalrts::alloc_close_call( context[15] ) )
    return refalrts::cNoMemory;
  if( ! refalrts::alloc_open_call( context[16] ) )
    return refalrts::cNoMemory;
  if( ! refalrts::alloc_name( context[17], GenCommonTailer, "GenCommonTailer" ) )
    return refalrts::cNoMemory;
  refalrts::update_name( context[4], GenCommonHeaders, "GenCommonHeaders" );
  refalrts::push_stack( context[1] );
  refalrts::push_stack( context[16] );
  refalrts::push_stack( context[15] );
  refalrts::push_stack( context[6] );
  refalrts::push_stack( context[13] );
  refalrts::push_stack( context[8] );
  refalrts::link_brackets( context[11], context[12] );
  refalrts::push_stack( context[5] );
  refalrts::push_stack( context[0] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[1];
  res = refalrts::splice_evar( res, context[13], context[17] );
  res = refalrts::splice_evar( res, context[2], context[3] );
  res = refalrts::splice_evar( res, context[5], context[12] );
  refalrts::use( res );
  return refalrts::FnResult(refalrts::cSuccess | (__LINE__ << 8));
#endif
}

static refalrts::FnResult ContextRange_B(refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  refalrts::this_is_generated_function();
  // issue here memory for vars with 9 elems
  refalrts::Iter context[9];
  refalrts::zeros( context, 9 );
#ifdef INTERPRET
  static const refalrts::RefalFunction functions[] = {
    { StrFromInt, "StrFromInt" }
  };
  using refalrts::idents;
  using refalrts::numbers;
  static const refalrts::StringItem strings[] = {
    {"context[", 8}
  };
  static const refalrts::RASLCommand raa[] = {
    // </0 & ContextRange_B/4 s.RangeOffset#1/5 >/1
    {refalrts::icInitB0_Lite, 0, 0, 0},
    {refalrts::icCallSaveLeft, 0, 2, 0},
    {refalrts::icsVarLeft, 0, 5, 2},
    {refalrts::icEmpty, 0, 0, 2},
    {refalrts::icEmptyResult, 0, 0, 0},
    //TRASH: {REMOVED TILE}  {REMOVED TILE}  {REMOVED TILE} 
    //RESULT: Tile{ [[ }"context["/6 Tile{ AsIs: </0 Reuse: & StrFromInt/4 AsIs: s.RangeOffset#1/5 AsIs: >/1 } ']'/8 Tile{ ]] }
    {refalrts::icAllocString, 0, 0, 6},
    {refalrts::icAllocChar, 0, ']', 8},
    {refalrts::icUpdateFunc, 0, 0, 4},
    {refalrts::icPushStack, 0, 0, 1},
    {refalrts::icPushStack, 0, 0, 0},
    {refalrts::icSetResRightEdge, 0, 0, 0},
    {refalrts::icSpliceTile, 8, 8, 0},
    {refalrts::icSpliceTile, 0, 1, 0},
    {refalrts::icSpliceTile, 6, 7, 0},
    {refalrts::icReturnResult_NoTrash, 0, 0, 0},
    {refalrts::icEnd, 0, 0, 0}
  };
  int open_e_stack[1];
  refalrts::FnResult res = refalrts::interpret_array(
    raa, context, arg_begin, arg_end,
    functions, idents, numbers, strings, open_e_stack
  );
  return res;
#else
  // </0 & ContextRange_B/4 s.RangeOffset#1/5 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  if( ! refalrts::svar_left( context[5], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  if( ! refalrts::empty_seq( context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;

  refalrts::reset_allocator();
  //TRASH: {REMOVED TILE}  {REMOVED TILE}  {REMOVED TILE} 
  //RESULT: Tile{ [[ }"context["/6 Tile{ AsIs: </0 Reuse: & StrFromInt/4 AsIs: s.RangeOffset#1/5 AsIs: >/1 } ']'/8 Tile{ ]] }
  if( ! refalrts::alloc_chars( context[6], context[7], "context[", 8 ) )
    return refalrts::cNoMemory;
  if( ! refalrts::alloc_char( context[8], ']' ) )
    return refalrts::cNoMemory;
  refalrts::update_name( context[4], StrFromInt, "StrFromInt" );
  refalrts::push_stack( context[1] );
  refalrts::push_stack( context[0] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = arg_end->next;
  res = refalrts::splice_evar( res, context[8], context[8] );
  res = refalrts::splice_evar( res, context[0], context[1] );
  res = refalrts::splice_evar( res, context[6], context[7] );
  refalrts::use( res );
  return refalrts::FnResult(refalrts::cSuccess | (__LINE__ << 8));
#endif
}

static refalrts::FnResult ContextRange_E(refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  refalrts::this_is_generated_function();
  // issue here memory for vars with 12 elems
  refalrts::Iter context[12];
  refalrts::zeros( context, 12 );
#ifdef INTERPRET
  static const refalrts::RefalFunction functions[] = {
    { Inc, "Inc" },
    { StrFromInt, "StrFromInt" }
  };
  using refalrts::idents;
  using refalrts::numbers;
  static const refalrts::StringItem strings[] = {
    {"context[", 8}
  };
  static const refalrts::RASLCommand raa[] = {
    // </0 & ContextRange_E/4 s.RangeOffset#1/5 >/1
    {refalrts::icInitB0_Lite, 0, 0, 0},
    {refalrts::icCallSaveLeft, 0, 2, 0},
    {refalrts::icsVarLeft, 0, 5, 2},
    {refalrts::icEmpty, 0, 0, 2},
    {refalrts::icEmptyResult, 0, 0, 0},
    //TRASH: {REMOVED TILE}  {REMOVED TILE}  {REMOVED TILE} 
    //RESULT: Tile{ [[ }"context["/6 </8 & StrFromInt/9 Tile{ AsIs: </0 Reuse: & Inc/4 AsIs: s.RangeOffset#1/5 AsIs: >/1 } >/10 ']'/11 Tile{ ]] }
    {refalrts::icAllocString, 0, 0, 6},
    {refalrts::icAllocBracket, 0, refalrts::ibOpenCall, 8},
    {refalrts::icAllocFunc, 0, 1, 9},
    {refalrts::icAllocBracket, 0, refalrts::ibCloseCall, 10},
    {refalrts::icAllocChar, 0, ']', 11},
    {refalrts::icUpdateFunc, 0, 0, 4},
    {refalrts::icPushStack, 0, 0, 10},
    {refalrts::icPushStack, 0, 0, 8},
    {refalrts::icPushStack, 0, 0, 1},
    {refalrts::icPushStack, 0, 0, 0},
    {refalrts::icSetResRightEdge, 0, 0, 0},
    {refalrts::icSpliceTile, 10, 11, 0},
    {refalrts::icSpliceTile, 0, 1, 0},
    {refalrts::icSpliceTile, 6, 9, 0},
    {refalrts::icReturnResult_NoTrash, 0, 0, 0},
    {refalrts::icEnd, 0, 0, 0}
  };
  int open_e_stack[1];
  refalrts::FnResult res = refalrts::interpret_array(
    raa, context, arg_begin, arg_end,
    functions, idents, numbers, strings, open_e_stack
  );
  return res;
#else
  // </0 & ContextRange_E/4 s.RangeOffset#1/5 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  if( ! refalrts::svar_left( context[5], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  if( ! refalrts::empty_seq( context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;

  refalrts::reset_allocator();
  //TRASH: {REMOVED TILE}  {REMOVED TILE}  {REMOVED TILE} 
  //RESULT: Tile{ [[ }"context["/6 </8 & StrFromInt/9 Tile{ AsIs: </0 Reuse: & Inc/4 AsIs: s.RangeOffset#1/5 AsIs: >/1 } >/10 ']'/11 Tile{ ]] }
  if( ! refalrts::alloc_chars( context[6], context[7], "context[", 8 ) )
    return refalrts::cNoMemory;
  if( ! refalrts::alloc_open_call( context[8] ) )
    return refalrts::cNoMemory;
  if( ! refalrts::alloc_name( context[9], StrFromInt, "StrFromInt" ) )
    return refalrts::cNoMemory;
  if( ! refalrts::alloc_close_call( context[10] ) )
    return refalrts::cNoMemory;
  if( ! refalrts::alloc_char( context[11], ']' ) )
    return refalrts::cNoMemory;
  refalrts::update_name( context[4], Inc, "Inc" );
  refalrts::push_stack( context[10] );
  refalrts::push_stack( context[8] );
  refalrts::push_stack( context[1] );
  refalrts::push_stack( context[0] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = arg_end->next;
  res = refalrts::splice_evar( res, context[10], context[11] );
  res = refalrts::splice_evar( res, context[0], context[1] );
  res = refalrts::splice_evar( res, context[6], context[9] );
  refalrts::use( res );
  return refalrts::FnResult(refalrts::cSuccess | (__LINE__ << 8));
#endif
}

static refalrts::FnResult ContextRange(refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  refalrts::this_is_generated_function();
  // issue here memory for vars with 12 elems
  refalrts::Iter context[12];
  refalrts::zeros( context, 12 );
#ifdef INTERPRET
  static const refalrts::RefalFunction functions[] = {
    { ContextRange_B, "ContextRange_B" },
    { ContextRange_E, "ContextRange_E" }
  };
  using refalrts::idents;
  using refalrts::numbers;
  static const refalrts::StringItem strings[] = {
    {", ", 2}
  };
  static const refalrts::RASLCommand raa[] = {
    // </0 & ContextRange/4 s.RangeOffset#1/5 >/1
    {refalrts::icInitB0_Lite, 0, 0, 0},
    {refalrts::icCallSaveLeft, 0, 2, 0},
    {refalrts::icsVarLeft, 0, 5, 2},
    {refalrts::icEmpty, 0, 0, 2},
    {refalrts::icEmptyResult, 0, 0, 0},
    //TRASH: {REMOVED TILE}  {REMOVED TILE} 
    //RESULT: Tile{ [[ AsIs: </0 Reuse: & ContextRange_B/4 AsIs: s.RangeOffset#1/5 AsIs: >/1 }", "/6 </8 & ContextRange_E/9 s.RangeOffset#1/5/10 >/11 Tile{ ]] }
    {refalrts::icAllocString, 0, 0, 6},
    {refalrts::icAllocBracket, 0, refalrts::ibOpenCall, 8},
    {refalrts::icAllocFunc, 0, 1, 9},
    {refalrts::icCopySTVar, 10, 5, 0},
    {refalrts::icAllocBracket, 0, refalrts::ibCloseCall, 11},
    {refalrts::icUpdateFunc, 0, 0, 4},
    {refalrts::icPushStack, 0, 0, 11},
    {refalrts::icPushStack, 0, 0, 8},
    {refalrts::icPushStack, 0, 0, 1},
    {refalrts::icPushStack, 0, 0, 0},
    {refalrts::icSetResRightEdge, 0, 0, 0},
    {refalrts::icSpliceTile, 6, 11, 0},
    {refalrts::icReturnResult_NoTrash, 0, 0, 0},
    {refalrts::icEnd, 0, 0, 0}
  };
  int open_e_stack[1];
  refalrts::FnResult res = refalrts::interpret_array(
    raa, context, arg_begin, arg_end,
    functions, idents, numbers, strings, open_e_stack
  );
  return res;
#else
  // </0 & ContextRange/4 s.RangeOffset#1/5 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  if( ! refalrts::svar_left( context[5], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  if( ! refalrts::empty_seq( context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;

  refalrts::reset_allocator();
  //TRASH: {REMOVED TILE}  {REMOVED TILE} 
  //RESULT: Tile{ [[ AsIs: </0 Reuse: & ContextRange_B/4 AsIs: s.RangeOffset#1/5 AsIs: >/1 }", "/6 </8 & ContextRange_E/9 s.RangeOffset#1/5/10 >/11 Tile{ ]] }
  if( ! refalrts::alloc_chars( context[6], context[7], ", ", 2 ) )
    return refalrts::cNoMemory;
  if( ! refalrts::alloc_open_call( context[8] ) )
    return refalrts::cNoMemory;
  if( ! refalrts::alloc_name( context[9], ContextRange_E, "ContextRange_E" ) )
    return refalrts::cNoMemory;
  if (! refalrts::copy_stvar(context[10], context[5]))
    return refalrts::cNoMemory;
  if( ! refalrts::alloc_close_call( context[11] ) )
    return refalrts::cNoMemory;
  refalrts::update_name( context[4], ContextRange_B, "ContextRange_B" );
  refalrts::push_stack( context[11] );
  refalrts::push_stack( context[8] );
  refalrts::push_stack( context[1] );
  refalrts::push_stack( context[0] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = arg_end->next;
  res = refalrts::splice_evar( res, context[6], context[11] );
  refalrts::use( res );
  return refalrts::FnResult(refalrts::cSuccess | (__LINE__ << 8));
#endif
}

static refalrts::FnResult ContextItem(refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  refalrts::this_is_generated_function();
  // issue here memory for vars with 9 elems
  refalrts::Iter context[9];
  refalrts::zeros( context, 9 );
#ifdef INTERPRET
  static const refalrts::RefalFunction functions[] = {
    { StrFromInt, "StrFromInt" }
  };
  using refalrts::idents;
  using refalrts::numbers;
  static const refalrts::StringItem strings[] = {
    {"context[", 8}
  };
  static const refalrts::RASLCommand raa[] = {
    // </0 & ContextItem/4 s.ItemNumber#1/5 >/1
    {refalrts::icInitB0_Lite, 0, 0, 0},
    {refalrts::icCallSaveLeft, 0, 2, 0},
    {refalrts::icsVarLeft, 0, 5, 2},
    {refalrts::icEmpty, 0, 0, 2},
    {refalrts::icEmptyResult, 0, 0, 0},
    //TRASH: {REMOVED TILE}  {REMOVED TILE}  {REMOVED TILE} 
    //RESULT: Tile{ [[ }"context["/6 Tile{ AsIs: </0 Reuse: & StrFromInt/4 AsIs: s.ItemNumber#1/5 AsIs: >/1 } ']'/8 Tile{ ]] }
    {refalrts::icAllocString, 0, 0, 6},
    {refalrts::icAllocChar, 0, ']', 8},
    {refalrts::icUpdateFunc, 0, 0, 4},
    {refalrts::icPushStack, 0, 0, 1},
    {refalrts::icPushStack, 0, 0, 0},
    {refalrts::icSetResRightEdge, 0, 0, 0},
    {refalrts::icSpliceTile, 8, 8, 0},
    {refalrts::icSpliceTile, 0, 1, 0},
    {refalrts::icSpliceTile, 6, 7, 0},
    {refalrts::icReturnResult_NoTrash, 0, 0, 0},
    {refalrts::icEnd, 0, 0, 0}
  };
  int open_e_stack[1];
  refalrts::FnResult res = refalrts::interpret_array(
    raa, context, arg_begin, arg_end,
    functions, idents, numbers, strings, open_e_stack
  );
  return res;
#else
  // </0 & ContextItem/4 s.ItemNumber#1/5 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  if( ! refalrts::svar_left( context[5], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  if( ! refalrts::empty_seq( context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;

  refalrts::reset_allocator();
  //TRASH: {REMOVED TILE}  {REMOVED TILE}  {REMOVED TILE} 
  //RESULT: Tile{ [[ }"context["/6 Tile{ AsIs: </0 Reuse: & StrFromInt/4 AsIs: s.ItemNumber#1/5 AsIs: >/1 } ']'/8 Tile{ ]] }
  if( ! refalrts::alloc_chars( context[6], context[7], "context[", 8 ) )
    return refalrts::cNoMemory;
  if( ! refalrts::alloc_char( context[8], ']' ) )
    return refalrts::cNoMemory;
  refalrts::update_name( context[4], StrFromInt, "StrFromInt" );
  refalrts::push_stack( context[1] );
  refalrts::push_stack( context[0] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = arg_end->next;
  res = refalrts::splice_evar( res, context[8], context[8] );
  res = refalrts::splice_evar( res, context[0], context[1] );
  res = refalrts::splice_evar( res, context[6], context[7] );
  refalrts::use( res );
  return refalrts::FnResult(refalrts::cSuccess | (__LINE__ << 8));
#endif
}

static refalrts::FnResult PrintName(refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  refalrts::this_is_generated_function();
  // issue here memory for vars with 10 elems
  refalrts::Iter context[10];
  refalrts::zeros( context, 10 );
#ifdef INTERPRET
  using refalrts::functions;
  static const refalrts::RefalIdentifier idents[] = {
    & ident_CreateClosure<int>::name
  };
  using refalrts::numbers;
  static const refalrts::StringItem strings[] = {
    {"lrts::create_closure", 20}
  };
  static const refalrts::RASLCommand raa[] = {
    //FAST GEN:E 
    //GLOBAL GEN:E 
    // </0 & PrintName/4 e.idx#0/2 >/1
    {refalrts::icInitB0_Lite, 0, 0, 0},
    {refalrts::icCallSaveLeft, 0, 2, 0},
    // closed e.idx#0 as range 2
    {refalrts::icOnFailGoTo, +12, 0, 0},
    //#CreateClosure
    // </0 & PrintName/4 # CreateClosure/5 >/1
    {refalrts::icSave, 0, 8, 2},
    {refalrts::icIdentLeftSave, 5, 0, 8},
    {refalrts::icEmpty, 0, 0, 8},
    {refalrts::icEmptyResult, 0, 0, 0},
    //TRASH: {REMOVED TILE}  {REMOVED TILE} 
    //RESULT: Tile{ [[ HalfReuse: 'r'/0 HalfReuse: 'e'/4 HalfReuse: 'f'/5 HalfReuse: 'a'/1 }"lrts::create_closure"/6 Tile{ ]] }
    {refalrts::icAllocString, 0, 0, 6},
    {refalrts::icReinitChar, 0, 'r', 0},
    {refalrts::icReinitChar, 0, 'e', 4},
    {refalrts::icReinitChar, 0, 'f', 5},
    {refalrts::icReinitChar, 0, 'a', 1},
    {refalrts::icSetResRightEdge, 0, 0, 0},
    {refalrts::icSpliceTile, 6, 7, 0},
    {refalrts::icReturnResult_NoTrash, 0, 0, 0},
    //E 
    // </0 & PrintName/4 e.Name#1/2 >/1
    // closed e.Name#1 as range 2
    {refalrts::icEmptyResult, 0, 0, 0},
    //TRASH: {REMOVED TILE}  </0 & PrintName/4 {REMOVED TILE}  >/1 {REMOVED TILE} 
    //RESULT: Tile{ [[ } Tile{ AsIs: e.Name#1/2 } Tile{ ]] }
    {refalrts::icSetResRightEdge, 0, 0, 0},
    {refalrts::icSpliceEVar, 0, 0, 2},
    {refalrts::icTrashLeftEdge, 0, 0, 0},
    {refalrts::icReturnResult_NoTrash, 0, 0, 0},
    {refalrts::icEnd, 0, 0, 0}
  };
  int open_e_stack[1];
  refalrts::FnResult res = refalrts::interpret_array(
    raa, context, arg_begin, arg_end,
    functions, idents, numbers, strings, open_e_stack
  );
  return res;
#else
  //FAST GEN:E 
  //GLOBAL GEN:E 
  // </0 & PrintName/4 e.idx#0/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.idx#0 as range 2
  do {
    refalrts::start_sentence();
    //#CreateClosure
    // </0 & PrintName/4 # CreateClosure/5 >/1
    context[8] = context[2];
    context[9] = context[3];
    context[5] = refalrts::ident_left(  & ident_CreateClosure<int>::name, context[8], context[9] );
    if( ! context[5] )
      continue;
    if( ! refalrts::empty_seq( context[8], context[9] ) )
      continue;

    refalrts::reset_allocator();
    //TRASH: {REMOVED TILE}  {REMOVED TILE} 
    //RESULT: Tile{ [[ HalfReuse: 'r'/0 HalfReuse: 'e'/4 HalfReuse: 'f'/5 HalfReuse: 'a'/1 }"lrts::create_closure"/6 Tile{ ]] }
    if( ! refalrts::alloc_chars( context[6], context[7], "lrts::create_closure", 20 ) )
      return refalrts::cNoMemory;
    refalrts::reinit_char( context[0], 'r' );
    refalrts::reinit_char( context[4], 'e' );
    refalrts::reinit_char( context[5], 'f' );
    refalrts::reinit_char( context[1], 'a' );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = arg_end->next;
    res = refalrts::splice_evar( res, context[6], context[7] );
    refalrts::use( res );
    return refalrts::FnResult(refalrts::cSuccess | (__LINE__ << 8));
  } while ( 0 );

  //E 
  // </0 & PrintName/4 e.Name#1/2 >/1
  // closed e.Name#1 as range 2

  refalrts::reset_allocator();
  //TRASH: {REMOVED TILE}  </0 & PrintName/4 {REMOVED TILE}  >/1 {REMOVED TILE} 
  //RESULT: Tile{ [[ } Tile{ AsIs: e.Name#1/2 } Tile{ ]] }
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = arg_end->next;
  res = refalrts::splice_evar( res, context[2], context[3] );
  refalrts::use( res );
  refalrts::splice_to_freelist_open( trash_prev, res );
  return refalrts::FnResult(refalrts::cSuccess | (__LINE__ << 8));
#endif
}

static refalrts::FnResult PrintBracketsVarInit(refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  refalrts::this_is_generated_function();
  // issue here memory for vars with 20 elems
  refalrts::Iter context[20];
  refalrts::zeros( context, 20 );
#ifdef INTERPRET
  static const refalrts::RefalFunction functions[] = {
    { ContextRange_B, "ContextRange_B" },
    { ContextRange_E, "ContextRange_E" }
  };
  using refalrts::idents;
  using refalrts::numbers;
  static const refalrts::StringItem strings[] = {
    {" = 0;", 5}
  };
  static const refalrts::RASLCommand raa[] = {
    // </0 & PrintBracketsVarInit/4 e.Indent#1/2 s.InnerBrackets#1/5 >/1
    {refalrts::icInitB0_Lite, 0, 0, 0},
    {refalrts::icCallSaveLeft, 0, 2, 0},
    {refalrts::icsVarRight, 0, 5, 2},
    // closed e.Indent#1 as range 2
    {refalrts::icEmptyResult, 0, 0, 0},
    //TRASH: {REMOVED TILE}  {REMOVED TILE}  {REMOVED TILE}  {REMOVED TILE}  {REMOVED TILE} 
    //RESULT: Tile{ [[ } (/6 Tile{ AsIs: e.Indent#1/2 } Tile{ AsIs: </0 Reuse: & ContextRange_B/4 } Tile{ AsIs: s.InnerBrackets#1/5 AsIs: >/1 }" = 0;"/7 )/9 (/10 e.Indent#1/2/11 </13 & ContextRange_E/14 s.InnerBrackets#1/5/15 >/16" = 0;"/17 )/19 Tile{ ]] }
    {refalrts::icAllocBracket, 0, refalrts::ibOpenBracket, 6},
    {refalrts::icAllocString, 0, 0, 7},
    {refalrts::icAllocBracket, 0, refalrts::ibCloseBracket, 9},
    {refalrts::icAllocBracket, 0, refalrts::ibOpenBracket, 10},
    {refalrts::icCopyEVar, 11, 2, 0},
    {refalrts::icAllocBracket, 0, refalrts::ibOpenCall, 13},
    {refalrts::icAllocFunc, 0, 1, 14},
    {refalrts::icCopySTVar, 15, 5, 0},
    {refalrts::icAllocBracket, 0, refalrts::ibCloseCall, 16},
    {refalrts::icAllocString, 0, 0, 17},
    {refalrts::icAllocBracket, 0, refalrts::ibCloseBracket, 19},
    {refalrts::icUpdateFunc, 0, 0, 4},
    {refalrts::icLinkBrackets, 10, 19, 0},
    {refalrts::icPushStack, 0, 0, 16},
    {refalrts::icPushStack, 0, 0, 13},
    {refalrts::icLinkBrackets, 6, 9, 0},
    {refalrts::icPushStack, 0, 0, 1},
    {refalrts::icPushStack, 0, 0, 0},
    {refalrts::icSetResRightEdge, 0, 0, 0},
    {refalrts::icSpliceTile, 7, 19, 0},
    {refalrts::icSpliceTile, 5, 1, 0},
    {refalrts::icSpliceTile, 0, 4, 0},
    {refalrts::icSpliceEVar, 0, 0, 2},
    {refalrts::icSpliceTile, 6, 6, 0},
    {refalrts::icReturnResult_NoTrash, 0, 0, 0},
    {refalrts::icEnd, 0, 0, 0}
  };
  int open_e_stack[1];
  refalrts::FnResult res = refalrts::interpret_array(
    raa, context, arg_begin, arg_end,
    functions, idents, numbers, strings, open_e_stack
  );
  return res;
#else
  // </0 & PrintBracketsVarInit/4 e.Indent#1/2 s.InnerBrackets#1/5 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  if( ! refalrts::svar_right( context[5], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  // closed e.Indent#1 as range 2

  refalrts::reset_allocator();
  //TRASH: {REMOVED TILE}  {REMOVED TILE}  {REMOVED TILE}  {REMOVED TILE}  {REMOVED TILE} 
  //RESULT: Tile{ [[ } (/6 Tile{ AsIs: e.Indent#1/2 } Tile{ AsIs: </0 Reuse: & ContextRange_B/4 } Tile{ AsIs: s.InnerBrackets#1/5 AsIs: >/1 }" = 0;"/7 )/9 (/10 e.Indent#1/2/11 </13 & ContextRange_E/14 s.InnerBrackets#1/5/15 >/16" = 0;"/17 )/19 Tile{ ]] }
  if( ! refalrts::alloc_open_bracket( context[6] ) )
    return refalrts::cNoMemory;
  if( ! refalrts::alloc_chars( context[7], context[8], " = 0;", 5 ) )
    return refalrts::cNoMemory;
  if( ! refalrts::alloc_close_bracket( context[9] ) )
    return refalrts::cNoMemory;
  if( ! refalrts::alloc_open_bracket( context[10] ) )
    return refalrts::cNoMemory;
  if (! refalrts::copy_evar(context[11], context[12], context[2], context[3]))
    return refalrts::cNoMemory;
  if( ! refalrts::alloc_open_call( context[13] ) )
    return refalrts::cNoMemory;
  if( ! refalrts::alloc_name( context[14], ContextRange_E, "ContextRange_E" ) )
    return refalrts::cNoMemory;
  if (! refalrts::copy_stvar(context[15], context[5]))
    return refalrts::cNoMemory;
  if( ! refalrts::alloc_close_call( context[16] ) )
    return refalrts::cNoMemory;
  if( ! refalrts::alloc_chars( context[17], context[18], " = 0;", 5 ) )
    return refalrts::cNoMemory;
  if( ! refalrts::alloc_close_bracket( context[19] ) )
    return refalrts::cNoMemory;
  refalrts::update_name( context[4], ContextRange_B, "ContextRange_B" );
  refalrts::link_brackets( context[10], context[19] );
  refalrts::push_stack( context[16] );
  refalrts::push_stack( context[13] );
  refalrts::link_brackets( context[6], context[9] );
  refalrts::push_stack( context[1] );
  refalrts::push_stack( context[0] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = arg_end->next;
  res = refalrts::splice_evar( res, context[7], context[19] );
  res = refalrts::splice_evar( res, context[5], context[1] );
  res = refalrts::splice_evar( res, context[0], context[4] );
  res = refalrts::splice_evar( res, context[2], context[3] );
  res = refalrts::splice_evar( res, context[6], context[6] );
  refalrts::use( res );
  return refalrts::FnResult(refalrts::cSuccess | (__LINE__ << 8));
#endif
}

static refalrts::FnResult PrintDirection(refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  refalrts::this_is_generated_function();
  // issue here memory for vars with 7 elems
  refalrts::Iter context[7];
  refalrts::zeros( context, 7 );
#ifdef INTERPRET
  using refalrts::functions;
  static const refalrts::RefalIdentifier idents[] = {
    & ident_AlgTerm<int>::name,
    & ident_AlgRight<int>::name,
    & ident_AlgLeft<int>::name
  };
  using refalrts::numbers;
  using refalrts::strings;
  static const refalrts::RASLCommand raa[] = {
    //FAST GEN:S 
    //GLOBAL GEN:S 
    // </0 & PrintDirection/4 s.idx#0/5 >/1
    {refalrts::icInitB0_Lite, 0, 0, 0},
    {refalrts::icCallSaveLeft, 0, 2, 0},
    {refalrts::icsVarLeft, 0, 5, 2},
    {refalrts::icEmpty, 0, 0, 2},
    {refalrts::icOnFailGoTo, +7, 0, 0},
    //#AlgLeft
    // </0 & PrintDirection/4 # AlgLeft/5 >/1
    {refalrts::icIdentTerm, 0, 2, 5},
    {refalrts::icEmptyResult, 0, 0, 0},
    //TRASH: {REMOVED TILE} 
    //RESULT: Tile{ [[ HalfReuse: 'L'/0 HalfReuse: 'e'/4 HalfReuse: 'f'/5 HalfReuse: 't'/1 ]] }
    {refalrts::icReinitChar, 0, 'L', 0},
    {refalrts::icReinitChar, 0, 'e', 4},
    {refalrts::icReinitChar, 0, 'f', 5},
    {refalrts::icReinitChar, 0, 't', 1},
    {refalrts::icReturnResult_NoTrash, 0, 0, 0},
    {refalrts::icOnFailGoTo, +10, 0, 0},
    //#AlgRight
    // </0 & PrintDirection/4 # AlgRight/5 >/1
    {refalrts::icIdentTerm, 0, 1, 5},
    {refalrts::icEmptyResult, 0, 0, 0},
    //TRASH: {REMOVED TILE}  {REMOVED TILE} 
    //RESULT: Tile{ [[ HalfReuse: 'R'/0 HalfReuse: 'i'/4 HalfReuse: 'g'/5 HalfReuse: 'h'/1 } 't'/6 Tile{ ]] }
    {refalrts::icAllocChar, 0, 't', 6},
    {refalrts::icReinitChar, 0, 'R', 0},
    {refalrts::icReinitChar, 0, 'i', 4},
    {refalrts::icReinitChar, 0, 'g', 5},
    {refalrts::icReinitChar, 0, 'h', 1},
    {refalrts::icSetResRightEdge, 0, 0, 0},
    {refalrts::icSpliceTile, 6, 6, 0},
    {refalrts::icReturnResult_NoTrash, 0, 0, 0},
    //#AlgTerm
    // </0 & PrintDirection/4 # AlgTerm/5 >/1
    {refalrts::icIdentTerm, 0, 0, 5},
    {refalrts::icEmptyResult, 0, 0, 0},
    //TRASH: {REMOVED TILE} 
    //RESULT: Tile{ [[ HalfReuse: 'T'/0 HalfReuse: 'e'/4 HalfReuse: 'r'/5 HalfReuse: 'm'/1 ]] }
    {refalrts::icReinitChar, 0, 'T', 0},
    {refalrts::icReinitChar, 0, 'e', 4},
    {refalrts::icReinitChar, 0, 'r', 5},
    {refalrts::icReinitChar, 0, 'm', 1},
    {refalrts::icReturnResult_NoTrash, 0, 0, 0},
    {refalrts::icEnd, 0, 0, 0}
  };
  int open_e_stack[2];
  refalrts::FnResult res = refalrts::interpret_array(
    raa, context, arg_begin, arg_end,
    functions, idents, numbers, strings, open_e_stack
  );
  return res;
#else
  //FAST GEN:S 
  //GLOBAL GEN:S 
  // </0 & PrintDirection/4 s.idx#0/5 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  if( ! refalrts::svar_left( context[5], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  if( ! refalrts::empty_seq( context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  do {
    refalrts::start_sentence();
    //#AlgLeft
    // </0 & PrintDirection/4 # AlgLeft/5 >/1
    if( ! refalrts::ident_term(  & ident_AlgLeft<int>::name, context[5] ) )
      continue;

    refalrts::reset_allocator();
    //TRASH: {REMOVED TILE} 
    //RESULT: Tile{ [[ HalfReuse: 'L'/0 HalfReuse: 'e'/4 HalfReuse: 'f'/5 HalfReuse: 't'/1 ]] }
    refalrts::reinit_char( context[0], 'L' );
    refalrts::reinit_char( context[4], 'e' );
    refalrts::reinit_char( context[5], 'f' );
    refalrts::reinit_char( context[1], 't' );
    return refalrts::FnResult(refalrts::cSuccess | (__LINE__ << 8));
  } while ( 0 );

  do {
    refalrts::start_sentence();
    //#AlgRight
    // </0 & PrintDirection/4 # AlgRight/5 >/1
    if( ! refalrts::ident_term(  & ident_AlgRight<int>::name, context[5] ) )
      continue;

    refalrts::reset_allocator();
    //TRASH: {REMOVED TILE}  {REMOVED TILE} 
    //RESULT: Tile{ [[ HalfReuse: 'R'/0 HalfReuse: 'i'/4 HalfReuse: 'g'/5 HalfReuse: 'h'/1 } 't'/6 Tile{ ]] }
    if( ! refalrts::alloc_char( context[6], 't' ) )
      return refalrts::cNoMemory;
    refalrts::reinit_char( context[0], 'R' );
    refalrts::reinit_char( context[4], 'i' );
    refalrts::reinit_char( context[5], 'g' );
    refalrts::reinit_char( context[1], 'h' );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = arg_end->next;
    res = refalrts::splice_evar( res, context[6], context[6] );
    refalrts::use( res );
    return refalrts::FnResult(refalrts::cSuccess | (__LINE__ << 8));
  } while ( 0 );

  //#AlgTerm
  // </0 & PrintDirection/4 # AlgTerm/5 >/1
  if( ! refalrts::ident_term(  & ident_AlgTerm<int>::name, context[5] ) )
    return refalrts::cRecognitionImpossible;

  refalrts::reset_allocator();
  //TRASH: {REMOVED TILE} 
  //RESULT: Tile{ [[ HalfReuse: 'T'/0 HalfReuse: 'e'/4 HalfReuse: 'r'/5 HalfReuse: 'm'/1 ]] }
  refalrts::reinit_char( context[0], 'T' );
  refalrts::reinit_char( context[4], 'e' );
  refalrts::reinit_char( context[5], 'r' );
  refalrts::reinit_char( context[1], 'm' );
  return refalrts::FnResult(refalrts::cSuccess | (__LINE__ << 8));
#endif
}

static refalrts::FnResult lambda_GenCommand_0(refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  refalrts::this_is_generated_function();
  // issue here memory for vars with 14 elems
  refalrts::Iter context[14];
  refalrts::zeros( context, 14 );
#ifdef INTERPRET
  static const refalrts::RefalFunction functions[] = {
    { ContextItem, "ContextItem" }
  };
  static const refalrts::RefalIdentifier idents[] = {
    & ident_RIGHT_EDGE<int>::name
  };
  using refalrts::numbers;
  static const refalrts::StringItem strings[] = {
    {"efalrts::Iter res = ", 20},
    {"ts::Iter res = arg_end->next;", 29}
  };
  static const refalrts::RASLCommand raa[] = {
    //FAST GEN:(E )S 
    //GLOBAL GEN:(E )S 
    // </0 & lambda_GenCommand_0/4 (/7 e.idxB#0/5 )/8 s.idxT#0/9 >/1
    {refalrts::icInitB0_Lite, 0, 0, 0},
    {refalrts::icCallSaveLeft, 0, 2, 0},
    {refalrts::icBracketLeftSave, 0, 5, 2},
    // closed e.idxB#0 as range 5
    {refalrts::icsVarLeft, 0, 9, 2},
    {refalrts::icEmpty, 0, 0, 2},
    {refalrts::icOnFailGoTo, +17, 0, 0},
    //(E )#RIGHT_EDGE
    // </0 & lambda_GenCommand_0/4 (/7 e.Indent#1/5 )/8 # RIGHT_EDGE/9 >/1
    {refalrts::icIdentTerm, 0, 0, 9},
    // closed e.Indent#1 as range 5
    {refalrts::icEmptyResult, 0, 0, 0},
    //TRASH: {REMOVED TILE}  {REMOVED TILE}  {REMOVED TILE}  {REMOVED TILE} 
    //RESULT: Tile{ [[ } Tile{ AsIs: (/7 AsIs: e.Indent#1/5 HalfReuse: 'r'/8 HalfReuse: 'e'/9 HalfReuse: 'f'/1 } 'a'/10 Tile{ HalfReuse: 'l'/0 HalfReuse: 'r'/4 }"ts::Iter res = arg_end->next;"/11 )/13 Tile{ ]] }
    {refalrts::icAllocChar, 0, 'a', 10},
    {refalrts::icAllocString, 0, 1, 11},
    {refalrts::icAllocBracket, 0, refalrts::ibCloseBracket, 13},
    {refalrts::icReinitChar, 0, 'r', 8},
    {refalrts::icReinitChar, 0, 'e', 9},
    {refalrts::icReinitChar, 0, 'f', 1},
    {refalrts::icReinitChar, 0, 'l', 0},
    {refalrts::icReinitChar, 0, 'r', 4},
    {refalrts::icLinkBrackets, 7, 13, 0},
    {refalrts::icSetResRightEdge, 0, 0, 0},
    {refalrts::icSpliceTile, 11, 13, 0},
    {refalrts::icSpliceTile, 0, 4, 0},
    {refalrts::icSpliceTile, 10, 10, 0},
    {refalrts::icSpliceTile, 7, 1, 0},
    {refalrts::icReturnResult_NoTrash, 0, 0, 0},
    //(E )S 
    // </0 & lambda_GenCommand_0/4 (/7 e.Indent#1/5 )/8 s.Offset#2/9 >/1
    // closed e.Indent#1 as range 5
    {refalrts::icEmptyResult, 0, 0, 0},
    //TRASH: {REMOVED TILE}  {REMOVED TILE}  {REMOVED TILE}  {REMOVED TILE}  {REMOVED TILE} 
    //RESULT: Tile{ [[ } Tile{ AsIs: (/7 AsIs: e.Indent#1/5 HalfReuse: 'r'/8 }"efalrts::Iter res = "/10 Tile{ AsIs: </0 Reuse: & ContextItem/4 } Tile{ AsIs: s.Offset#2/9 AsIs: >/1 } ';'/12 )/13 Tile{ ]] }
    {refalrts::icAllocString, 0, 0, 10},
    {refalrts::icAllocChar, 0, ';', 12},
    {refalrts::icAllocBracket, 0, refalrts::ibCloseBracket, 13},
    {refalrts::icReinitChar, 0, 'r', 8},
    {refalrts::icUpdateFunc, 0, 0, 4},
    {refalrts::icLinkBrackets, 7, 13, 0},
    {refalrts::icPushStack, 0, 0, 1},
    {refalrts::icPushStack, 0, 0, 0},
    {refalrts::icSetResRightEdge, 0, 0, 0},
    {refalrts::icSpliceTile, 12, 13, 0},
    {refalrts::icSpliceTile, 9, 1, 0},
    {refalrts::icSpliceTile, 0, 4, 0},
    {refalrts::icSpliceTile, 10, 11, 0},
    {refalrts::icSpliceTile, 7, 8, 0},
    {refalrts::icReturnResult_NoTrash, 0, 0, 0},
    {refalrts::icEnd, 0, 0, 0}
  };
  int open_e_stack[1];
  refalrts::FnResult res = refalrts::interpret_array(
    raa, context, arg_begin, arg_end,
    functions, idents, numbers, strings, open_e_stack
  );
  return res;
#else
  //FAST GEN:(E )S 
  //GLOBAL GEN:(E )S 
  // </0 & lambda_GenCommand_0/4 (/7 e.idxB#0/5 )/8 s.idxT#0/9 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  context[5] = 0;
  context[6] = 0;
  context[7] = refalrts::brackets_left( context[5], context[6], context[2], context[3] );
  if( ! context[7] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[7], context[8]);
  // closed e.idxB#0 as range 5
  if( ! refalrts::svar_left( context[9], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  if( ! refalrts::empty_seq( context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  do {
    refalrts::start_sentence();
    //(E )#RIGHT_EDGE
    // </0 & lambda_GenCommand_0/4 (/7 e.Indent#1/5 )/8 # RIGHT_EDGE/9 >/1
    if( ! refalrts::ident_term(  & ident_RIGHT_EDGE<int>::name, context[9] ) )
      continue;
    // closed e.Indent#1 as range 5

    refalrts::reset_allocator();
    //TRASH: {REMOVED TILE}  {REMOVED TILE}  {REMOVED TILE}  {REMOVED TILE} 
    //RESULT: Tile{ [[ } Tile{ AsIs: (/7 AsIs: e.Indent#1/5 HalfReuse: 'r'/8 HalfReuse: 'e'/9 HalfReuse: 'f'/1 } 'a'/10 Tile{ HalfReuse: 'l'/0 HalfReuse: 'r'/4 }"ts::Iter res = arg_end->next;"/11 )/13 Tile{ ]] }
    if( ! refalrts::alloc_char( context[10], 'a' ) )
      return refalrts::cNoMemory;
    if( ! refalrts::alloc_chars( context[11], context[12], "ts::Iter res = arg_end->next;", 29 ) )
      return refalrts::cNoMemory;
    if( ! refalrts::alloc_close_bracket( context[13] ) )
      return refalrts::cNoMemory;
    refalrts::reinit_char( context[8], 'r' );
    refalrts::reinit_char( context[9], 'e' );
    refalrts::reinit_char( context[1], 'f' );
    refalrts::reinit_char( context[0], 'l' );
    refalrts::reinit_char( context[4], 'r' );
    refalrts::link_brackets( context[7], context[13] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = arg_end->next;
    res = refalrts::splice_evar( res, context[11], context[13] );
    res = refalrts::splice_evar( res, context[0], context[4] );
    res = refalrts::splice_evar( res, context[10], context[10] );
    res = refalrts::splice_evar( res, context[7], context[1] );
    refalrts::use( res );
    return refalrts::FnResult(refalrts::cSuccess | (__LINE__ << 8));
  } while ( 0 );

  //(E )S 
  // </0 & lambda_GenCommand_0/4 (/7 e.Indent#1/5 )/8 s.Offset#2/9 >/1
  // closed e.Indent#1 as range 5

  refalrts::reset_allocator();
  //TRASH: {REMOVED TILE}  {REMOVED TILE}  {REMOVED TILE}  {REMOVED TILE}  {REMOVED TILE} 
  //RESULT: Tile{ [[ } Tile{ AsIs: (/7 AsIs: e.Indent#1/5 HalfReuse: 'r'/8 }"efalrts::Iter res = "/10 Tile{ AsIs: </0 Reuse: & ContextItem/4 } Tile{ AsIs: s.Offset#2/9 AsIs: >/1 } ';'/12 )/13 Tile{ ]] }
  if( ! refalrts::alloc_chars( context[10], context[11], "efalrts::Iter res = ", 20 ) )
    return refalrts::cNoMemory;
  if( ! refalrts::alloc_char( context[12], ';' ) )
    return refalrts::cNoMemory;
  if( ! refalrts::alloc_close_bracket( context[13] ) )
    return refalrts::cNoMemory;
  refalrts::reinit_char( context[8], 'r' );
  refalrts::update_name( context[4], ContextItem, "ContextItem" );
  refalrts::link_brackets( context[7], context[13] );
  refalrts::push_stack( context[1] );
  refalrts::push_stack( context[0] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = arg_end->next;
  res = refalrts::splice_evar( res, context[12], context[13] );
  res = refalrts::splice_evar( res, context[9], context[1] );
  res = refalrts::splice_evar( res, context[0], context[4] );
  res = refalrts::splice_evar( res, context[10], context[11] );
  res = refalrts::splice_evar( res, context[7], context[8] );
  refalrts::use( res );
  return refalrts::FnResult(refalrts::cSuccess | (__LINE__ << 8));
#endif
}

static refalrts::FnResult lambda_GenCommand_1(refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  refalrts::this_is_generated_function();
  // issue here memory for vars with 15 elems
  refalrts::Iter context[15];
  refalrts::zeros( context, 15 );
#ifdef INTERPRET
  static const refalrts::RefalFunction functions[] = {
    { ContextItem, "ContextItem" }
  };
  static const refalrts::RefalIdentifier idents[] = {
    & ident_LEFT_EDGE<int>::name
  };
  using refalrts::numbers;
  static const refalrts::StringItem strings[] = {
    {", res );", 8},
    {"efalrts::splice_to_freelist_open( ", 34},
    {"ts::splice_to_freelist_open( trash_prev, res );", 47}
  };
  static const refalrts::RASLCommand raa[] = {
    //FAST GEN:(E )S 
    //GLOBAL GEN:(E )S 
    // </0 & lambda_GenCommand_1/4 (/7 e.idxB#0/5 )/8 s.idxT#0/9 >/1
    {refalrts::icInitB0_Lite, 0, 0, 0},
    {refalrts::icCallSaveLeft, 0, 2, 0},
    {refalrts::icBracketLeftSave, 0, 5, 2},
    // closed e.idxB#0 as range 5
    {refalrts::icsVarLeft, 0, 9, 2},
    {refalrts::icEmpty, 0, 0, 2},
    {refalrts::icOnFailGoTo, +17, 0, 0},
    //(E )#LEFT_EDGE
    // </0 & lambda_GenCommand_1/4 (/7 e.Indent#1/5 )/8 # LEFT_EDGE/9 >/1
    {refalrts::icIdentTerm, 0, 0, 9},
    // closed e.Indent#1 as range 5
    {refalrts::icEmptyResult, 0, 0, 0},
    //TRASH: {REMOVED TILE}  {REMOVED TILE}  {REMOVED TILE}  {REMOVED TILE} 
    //RESULT: Tile{ [[ } Tile{ AsIs: (/7 AsIs: e.Indent#1/5 HalfReuse: 'r'/8 HalfReuse: 'e'/9 HalfReuse: 'f'/1 } 'a'/10 Tile{ HalfReuse: 'l'/0 HalfReuse: 'r'/4 }"ts::splice_to_freelist_open( trash_prev, res );"/11 )/13 Tile{ ]] }
    {refalrts::icAllocChar, 0, 'a', 10},
    {refalrts::icAllocString, 0, 2, 11},
    {refalrts::icAllocBracket, 0, refalrts::ibCloseBracket, 13},
    {refalrts::icReinitChar, 0, 'r', 8},
    {refalrts::icReinitChar, 0, 'e', 9},
    {refalrts::icReinitChar, 0, 'f', 1},
    {refalrts::icReinitChar, 0, 'l', 0},
    {refalrts::icReinitChar, 0, 'r', 4},
    {refalrts::icLinkBrackets, 7, 13, 0},
    {refalrts::icSetResRightEdge, 0, 0, 0},
    {refalrts::icSpliceTile, 11, 13, 0},
    {refalrts::icSpliceTile, 0, 4, 0},
    {refalrts::icSpliceTile, 10, 10, 0},
    {refalrts::icSpliceTile, 7, 1, 0},
    {refalrts::icReturnResult_NoTrash, 0, 0, 0},
    //(E )S 
    // </0 & lambda_GenCommand_1/4 (/7 e.Indent#1/5 )/8 s.Offset#2/9 >/1
    // closed e.Indent#1 as range 5
    {refalrts::icEmptyResult, 0, 0, 0},
    //TRASH: {REMOVED TILE}  {REMOVED TILE}  {REMOVED TILE}  {REMOVED TILE}  {REMOVED TILE} 
    //RESULT: Tile{ [[ } Tile{ AsIs: (/7 AsIs: e.Indent#1/5 HalfReuse: 'r'/8 }"efalrts::splice_to_freelist_open( "/10 Tile{ AsIs: </0 Reuse: & ContextItem/4 } Tile{ AsIs: s.Offset#2/9 AsIs: >/1 }", res );"/12 )/14 Tile{ ]] }
    {refalrts::icAllocString, 0, 1, 10},
    {refalrts::icAllocString, 0, 0, 12},
    {refalrts::icAllocBracket, 0, refalrts::ibCloseBracket, 14},
    {refalrts::icReinitChar, 0, 'r', 8},
    {refalrts::icUpdateFunc, 0, 0, 4},
    {refalrts::icLinkBrackets, 7, 14, 0},
    {refalrts::icPushStack, 0, 0, 1},
    {refalrts::icPushStack, 0, 0, 0},
    {refalrts::icSetResRightEdge, 0, 0, 0},
    {refalrts::icSpliceTile, 12, 14, 0},
    {refalrts::icSpliceTile, 9, 1, 0},
    {refalrts::icSpliceTile, 0, 4, 0},
    {refalrts::icSpliceTile, 10, 11, 0},
    {refalrts::icSpliceTile, 7, 8, 0},
    {refalrts::icReturnResult_NoTrash, 0, 0, 0},
    {refalrts::icEnd, 0, 0, 0}
  };
  int open_e_stack[1];
  refalrts::FnResult res = refalrts::interpret_array(
    raa, context, arg_begin, arg_end,
    functions, idents, numbers, strings, open_e_stack
  );
  return res;
#else
  //FAST GEN:(E )S 
  //GLOBAL GEN:(E )S 
  // </0 & lambda_GenCommand_1/4 (/7 e.idxB#0/5 )/8 s.idxT#0/9 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  context[5] = 0;
  context[6] = 0;
  context[7] = refalrts::brackets_left( context[5], context[6], context[2], context[3] );
  if( ! context[7] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[7], context[8]);
  // closed e.idxB#0 as range 5
  if( ! refalrts::svar_left( context[9], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  if( ! refalrts::empty_seq( context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  do {
    refalrts::start_sentence();
    //(E )#LEFT_EDGE
    // </0 & lambda_GenCommand_1/4 (/7 e.Indent#1/5 )/8 # LEFT_EDGE/9 >/1
    if( ! refalrts::ident_term(  & ident_LEFT_EDGE<int>::name, context[9] ) )
      continue;
    // closed e.Indent#1 as range 5

    refalrts::reset_allocator();
    //TRASH: {REMOVED TILE}  {REMOVED TILE}  {REMOVED TILE}  {REMOVED TILE} 
    //RESULT: Tile{ [[ } Tile{ AsIs: (/7 AsIs: e.Indent#1/5 HalfReuse: 'r'/8 HalfReuse: 'e'/9 HalfReuse: 'f'/1 } 'a'/10 Tile{ HalfReuse: 'l'/0 HalfReuse: 'r'/4 }"ts::splice_to_freelist_open( trash_prev, res );"/11 )/13 Tile{ ]] }
    if( ! refalrts::alloc_char( context[10], 'a' ) )
      return refalrts::cNoMemory;
    if( ! refalrts::alloc_chars( context[11], context[12], "ts::splice_to_freelist_open( trash_prev, res );", 47 ) )
      return refalrts::cNoMemory;
    if( ! refalrts::alloc_close_bracket( context[13] ) )
      return refalrts::cNoMemory;
    refalrts::reinit_char( context[8], 'r' );
    refalrts::reinit_char( context[9], 'e' );
    refalrts::reinit_char( context[1], 'f' );
    refalrts::reinit_char( context[0], 'l' );
    refalrts::reinit_char( context[4], 'r' );
    refalrts::link_brackets( context[7], context[13] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = arg_end->next;
    res = refalrts::splice_evar( res, context[11], context[13] );
    res = refalrts::splice_evar( res, context[0], context[4] );
    res = refalrts::splice_evar( res, context[10], context[10] );
    res = refalrts::splice_evar( res, context[7], context[1] );
    refalrts::use( res );
    return refalrts::FnResult(refalrts::cSuccess | (__LINE__ << 8));
  } while ( 0 );

  //(E )S 
  // </0 & lambda_GenCommand_1/4 (/7 e.Indent#1/5 )/8 s.Offset#2/9 >/1
  // closed e.Indent#1 as range 5

  refalrts::reset_allocator();
  //TRASH: {REMOVED TILE}  {REMOVED TILE}  {REMOVED TILE}  {REMOVED TILE}  {REMOVED TILE} 
  //RESULT: Tile{ [[ } Tile{ AsIs: (/7 AsIs: e.Indent#1/5 HalfReuse: 'r'/8 }"efalrts::splice_to_freelist_open( "/10 Tile{ AsIs: </0 Reuse: & ContextItem/4 } Tile{ AsIs: s.Offset#2/9 AsIs: >/1 }", res );"/12 )/14 Tile{ ]] }
  if( ! refalrts::alloc_chars( context[10], context[11], "efalrts::splice_to_freelist_open( ", 34 ) )
    return refalrts::cNoMemory;
  if( ! refalrts::alloc_chars( context[12], context[13], ", res );", 8 ) )
    return refalrts::cNoMemory;
  if( ! refalrts::alloc_close_bracket( context[14] ) )
    return refalrts::cNoMemory;
  refalrts::reinit_char( context[8], 'r' );
  refalrts::update_name( context[4], ContextItem, "ContextItem" );
  refalrts::link_brackets( context[7], context[14] );
  refalrts::push_stack( context[1] );
  refalrts::push_stack( context[0] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = arg_end->next;
  res = refalrts::splice_evar( res, context[12], context[14] );
  res = refalrts::splice_evar( res, context[9], context[1] );
  res = refalrts::splice_evar( res, context[0], context[4] );
  res = refalrts::splice_evar( res, context[10], context[11] );
  res = refalrts::splice_evar( res, context[7], context[8] );
  refalrts::use( res );
  return refalrts::FnResult(refalrts::cSuccess | (__LINE__ << 8));
#endif
}

static refalrts::FnResult lambda_GenCommand_2(refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  refalrts::this_is_generated_function();
  // issue here memory for vars with 25 elems
  refalrts::Iter context[25];
  refalrts::zeros( context, 25 );
#ifdef INTERPRET
  static const refalrts::RefalFunction functions[] = {
    { PrintName, "PrintName" }
  };
  using refalrts::idents;
  using refalrts::numbers;
  static const refalrts::StringItem strings[] = {
    {"\" }", 3},
    {", \"", 3},
    {"{ ", 2}
  };
  static const refalrts::RASLCommand raa[] = {
    // </0 & lambda_GenCommand_2/4 (/7 e.Indent#1/5 )/8 (/11 e.Name#2/9 )/12 >/1
    {refalrts::icInitB0_Lite, 0, 0, 0},
    {refalrts::icCallSaveLeft, 0, 2, 0},
    {refalrts::icBracketLeftSave, 0, 5, 2},
    {refalrts::icBracketLeftSave, 0, 9, 2},
    {refalrts::icEmpty, 0, 0, 2},
    // closed e.Indent#1 as range 5
    // closed e.Name#2 as range 9
    {refalrts::icEmptyResult, 0, 0, 0},
    //TRASH: {REMOVED TILE}  {REMOVED TILE}  {REMOVED TILE}  {REMOVED TILE}  {REMOVED TILE} 
    //RESULT: Tile{ [[ } Tile{ AsIs: (/7 AsIs: e.Indent#1/5 HalfReuse: ' '/8 HalfReuse: ' '/11 }"{ "/13 Tile{ AsIs: </0 Reuse: & PrintName/4 } Tile{ AsIs: e.Name#2/9 } >/15", \""/16 </18 & PrintName/19 e.Name#2/9/20 >/22"\" }"/23 Tile{ HalfReuse: ','/12 HalfReuse: )/1 ]] }
    {refalrts::icAllocString, 0, 2, 13},
    {refalrts::icAllocBracket, 0, refalrts::ibCloseCall, 15},
    {refalrts::icAllocString, 0, 1, 16},
    {refalrts::icAllocBracket, 0, refalrts::ibOpenCall, 18},
    {refalrts::icAllocFunc, 0, 0, 19},
    {refalrts::icCopyEVar, 20, 9, 0},
    {refalrts::icAllocBracket, 0, refalrts::ibCloseCall, 22},
    {refalrts::icAllocString, 0, 0, 23},
    {refalrts::icReinitChar, 0, ' ', 8},
    {refalrts::icReinitChar, 0, ' ', 11},
    {refalrts::icUpdateFunc, 0, 0, 4},
    {refalrts::icReinitChar, 0, ',', 12},
    {refalrts::icReinitBracket, 0, refalrts::ibCloseBracket, 1},
    {refalrts::icLinkBrackets, 7, 1, 0},
    {refalrts::icPushStack, 0, 0, 22},
    {refalrts::icPushStack, 0, 0, 18},
    {refalrts::icPushStack, 0, 0, 15},
    {refalrts::icPushStack, 0, 0, 0},
    {refalrts::icSetRes, 0, 0, 12},
    {refalrts::icSpliceTile, 15, 24, 0},
    {refalrts::icSpliceEVar, 0, 0, 9},
    {refalrts::icSpliceTile, 0, 4, 0},
    {refalrts::icSpliceTile, 13, 14, 0},
    {refalrts::icSpliceTile, 7, 11, 0},
    {refalrts::icReturnResult_NoTrash, 0, 0, 0},
    {refalrts::icEnd, 0, 0, 0}
  };
  int open_e_stack[1];
  refalrts::FnResult res = refalrts::interpret_array(
    raa, context, arg_begin, arg_end,
    functions, idents, numbers, strings, open_e_stack
  );
  return res;
#else
  // </0 & lambda_GenCommand_2/4 (/7 e.Indent#1/5 )/8 (/11 e.Name#2/9 )/12 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  context[5] = 0;
  context[6] = 0;
  context[7] = refalrts::brackets_left( context[5], context[6], context[2], context[3] );
  if( ! context[7] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[7], context[8]);
  context[9] = 0;
  context[10] = 0;
  context[11] = refalrts::brackets_left( context[9], context[10], context[2], context[3] );
  if( ! context[11] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[11], context[12]);
  if( ! refalrts::empty_seq( context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  // closed e.Indent#1 as range 5
  // closed e.Name#2 as range 9

  refalrts::reset_allocator();
  //TRASH: {REMOVED TILE}  {REMOVED TILE}  {REMOVED TILE}  {REMOVED TILE}  {REMOVED TILE} 
  //RESULT: Tile{ [[ } Tile{ AsIs: (/7 AsIs: e.Indent#1/5 HalfReuse: ' '/8 HalfReuse: ' '/11 }"{ "/13 Tile{ AsIs: </0 Reuse: & PrintName/4 } Tile{ AsIs: e.Name#2/9 } >/15", \""/16 </18 & PrintName/19 e.Name#2/9/20 >/22"\" }"/23 Tile{ HalfReuse: ','/12 HalfReuse: )/1 ]] }
  if( ! refalrts::alloc_chars( context[13], context[14], "{ ", 2 ) )
    return refalrts::cNoMemory;
  if( ! refalrts::alloc_close_call( context[15] ) )
    return refalrts::cNoMemory;
  if( ! refalrts::alloc_chars( context[16], context[17], ", \"", 3 ) )
    return refalrts::cNoMemory;
  if( ! refalrts::alloc_open_call( context[18] ) )
    return refalrts::cNoMemory;
  if( ! refalrts::alloc_name( context[19], PrintName, "PrintName" ) )
    return refalrts::cNoMemory;
  if (! refalrts::copy_evar(context[20], context[21], context[9], context[10]))
    return refalrts::cNoMemory;
  if( ! refalrts::alloc_close_call( context[22] ) )
    return refalrts::cNoMemory;
  if( ! refalrts::alloc_chars( context[23], context[24], "\" }", 3 ) )
    return refalrts::cNoMemory;
  refalrts::reinit_char( context[8], ' ' );
  refalrts::reinit_char( context[11], ' ' );
  refalrts::update_name( context[4], PrintName, "PrintName" );
  refalrts::reinit_char( context[12], ',' );
  refalrts::reinit_close_bracket( context[1] );
  refalrts::link_brackets( context[7], context[1] );
  refalrts::push_stack( context[22] );
  refalrts::push_stack( context[18] );
  refalrts::push_stack( context[15] );
  refalrts::push_stack( context[0] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[12];
  res = refalrts::splice_evar( res, context[15], context[24] );
  res = refalrts::splice_evar( res, context[9], context[10] );
  res = refalrts::splice_evar( res, context[0], context[4] );
  res = refalrts::splice_evar( res, context[13], context[14] );
  res = refalrts::splice_evar( res, context[7], context[11] );
  refalrts::use( res );
  return refalrts::FnResult(refalrts::cSuccess | (__LINE__ << 8));
#endif
}

static refalrts::FnResult lambda_GenCommand_3(refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  refalrts::this_is_generated_function();
  // issue here memory for vars with 19 elems
  refalrts::Iter context[19];
  refalrts::zeros( context, 19 );
#ifdef INTERPRET
  using refalrts::functions;
  using refalrts::idents;
  using refalrts::numbers;
  static const refalrts::StringItem strings[] = {
    {"<int>::name", 11},
    {"ent_", 4},
    {"& ", 2}
  };
  static const refalrts::RASLCommand raa[] = {
    // </0 & lambda_GenCommand_3/4 (/7 e.Indent#1/5 )/8 (/11 e.Name#2/9 )/12 >/1
    {refalrts::icInitB0_Lite, 0, 0, 0},
    {refalrts::icCallSaveLeft, 0, 2, 0},
    {refalrts::icBracketLeftSave, 0, 5, 2},
    {refalrts::icBracketLeftSave, 0, 9, 2},
    {refalrts::icEmpty, 0, 0, 2},
    // closed e.Indent#1 as range 5
    // closed e.Name#2 as range 9
    {refalrts::icEmptyResult, 0, 0, 0},
    //TRASH: {REMOVED TILE}  {REMOVED TILE}  {REMOVED TILE}  {REMOVED TILE}  {REMOVED TILE} 
    //RESULT: Tile{ [[ } Tile{ AsIs: (/7 AsIs: e.Indent#1/5 HalfReuse: ' '/8 HalfReuse: ' '/11 }"& "/13 Tile{ HalfReuse: 'i'/0 HalfReuse: 'd'/4 }"ent_"/15 Tile{ AsIs: e.Name#2/9 }"<int>::name"/17 Tile{ HalfReuse: ','/12 HalfReuse: )/1 ]] }
    {refalrts::icAllocString, 0, 2, 13},
    {refalrts::icAllocString, 0, 1, 15},
    {refalrts::icAllocString, 0, 0, 17},
    {refalrts::icReinitChar, 0, ' ', 8},
    {refalrts::icReinitChar, 0, ' ', 11},
    {refalrts::icReinitChar, 0, 'i', 0},
    {refalrts::icReinitChar, 0, 'd', 4},
    {refalrts::icReinitChar, 0, ',', 12},
    {refalrts::icReinitBracket, 0, refalrts::ibCloseBracket, 1},
    {refalrts::icLinkBrackets, 7, 1, 0},
    {refalrts::icSetRes, 0, 0, 12},
    {refalrts::icSpliceTile, 17, 18, 0},
    {refalrts::icSpliceEVar, 0, 0, 9},
    {refalrts::icSpliceTile, 15, 16, 0},
    {refalrts::icSpliceTile, 0, 4, 0},
    {refalrts::icSpliceTile, 13, 14, 0},
    {refalrts::icSpliceTile, 7, 11, 0},
    {refalrts::icReturnResult_NoTrash, 0, 0, 0},
    {refalrts::icEnd, 0, 0, 0}
  };
  int open_e_stack[1];
  refalrts::FnResult res = refalrts::interpret_array(
    raa, context, arg_begin, arg_end,
    functions, idents, numbers, strings, open_e_stack
  );
  return res;
#else
  // </0 & lambda_GenCommand_3/4 (/7 e.Indent#1/5 )/8 (/11 e.Name#2/9 )/12 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  context[5] = 0;
  context[6] = 0;
  context[7] = refalrts::brackets_left( context[5], context[6], context[2], context[3] );
  if( ! context[7] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[7], context[8]);
  context[9] = 0;
  context[10] = 0;
  context[11] = refalrts::brackets_left( context[9], context[10], context[2], context[3] );
  if( ! context[11] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[11], context[12]);
  if( ! refalrts::empty_seq( context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  // closed e.Indent#1 as range 5
  // closed e.Name#2 as range 9

  refalrts::reset_allocator();
  //TRASH: {REMOVED TILE}  {REMOVED TILE}  {REMOVED TILE}  {REMOVED TILE}  {REMOVED TILE} 
  //RESULT: Tile{ [[ } Tile{ AsIs: (/7 AsIs: e.Indent#1/5 HalfReuse: ' '/8 HalfReuse: ' '/11 }"& "/13 Tile{ HalfReuse: 'i'/0 HalfReuse: 'd'/4 }"ent_"/15 Tile{ AsIs: e.Name#2/9 }"<int>::name"/17 Tile{ HalfReuse: ','/12 HalfReuse: )/1 ]] }
  if( ! refalrts::alloc_chars( context[13], context[14], "& ", 2 ) )
    return refalrts::cNoMemory;
  if( ! refalrts::alloc_chars( context[15], context[16], "ent_", 4 ) )
    return refalrts::cNoMemory;
  if( ! refalrts::alloc_chars( context[17], context[18], "<int>::name", 11 ) )
    return refalrts::cNoMemory;
  refalrts::reinit_char( context[8], ' ' );
  refalrts::reinit_char( context[11], ' ' );
  refalrts::reinit_char( context[0], 'i' );
  refalrts::reinit_char( context[4], 'd' );
  refalrts::reinit_char( context[12], ',' );
  refalrts::reinit_close_bracket( context[1] );
  refalrts::link_brackets( context[7], context[1] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[12];
  res = refalrts::splice_evar( res, context[17], context[18] );
  res = refalrts::splice_evar( res, context[9], context[10] );
  res = refalrts::splice_evar( res, context[15], context[16] );
  res = refalrts::splice_evar( res, context[0], context[4] );
  res = refalrts::splice_evar( res, context[13], context[14] );
  res = refalrts::splice_evar( res, context[7], context[11] );
  refalrts::use( res );
  return refalrts::FnResult(refalrts::cSuccess | (__LINE__ << 8));
#endif
}

static refalrts::FnResult lambda_GenCommand_4(refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  refalrts::this_is_generated_function();
  // issue here memory for vars with 14 elems
  refalrts::Iter context[14];
  refalrts::zeros( context, 14 );
#ifdef INTERPRET
  static const refalrts::RefalFunction functions[] = {
    { StrFromInt, "StrFromInt" }
  };
  using refalrts::idents;
  using refalrts::numbers;
  static const refalrts::StringItem strings[] = {
    {"UL,", 3}
  };
  static const refalrts::RASLCommand raa[] = {
    // </0 & lambda_GenCommand_4/4 (/7 e.Indent#1/5 )/8 s.Number#2/9 >/1
    {refalrts::icInitB0_Lite, 0, 0, 0},
    {refalrts::icCallSaveLeft, 0, 2, 0},
    {refalrts::icBracketLeftSave, 0, 5, 2},
    // closed e.Indent#1 as range 5
    {refalrts::icsVarLeft, 0, 9, 2},
    {refalrts::icEmpty, 0, 0, 2},
    {refalrts::icEmptyResult, 0, 0, 0},
    //TRASH: {REMOVED TILE}  {REMOVED TILE}  {REMOVED TILE}  {REMOVED TILE}  {REMOVED TILE} 
    //RESULT: Tile{ [[ } Tile{ AsIs: (/7 AsIs: e.Indent#1/5 HalfReuse: ' '/8 } ' '/10 Tile{ AsIs: </0 Reuse: & StrFromInt/4 } Tile{ AsIs: s.Number#2/9 AsIs: >/1 }"UL,"/11 )/13 Tile{ ]] }
    {refalrts::icAllocChar, 0, ' ', 10},
    {refalrts::icAllocString, 0, 0, 11},
    {refalrts::icAllocBracket, 0, refalrts::ibCloseBracket, 13},
    {refalrts::icReinitChar, 0, ' ', 8},
    {refalrts::icUpdateFunc, 0, 0, 4},
    {refalrts::icLinkBrackets, 7, 13, 0},
    {refalrts::icPushStack, 0, 0, 1},
    {refalrts::icPushStack, 0, 0, 0},
    {refalrts::icSetResRightEdge, 0, 0, 0},
    {refalrts::icSpliceTile, 11, 13, 0},
    {refalrts::icSpliceTile, 9, 1, 0},
    {refalrts::icSpliceTile, 0, 4, 0},
    {refalrts::icSpliceTile, 10, 10, 0},
    {refalrts::icSpliceTile, 7, 8, 0},
    {refalrts::icReturnResult_NoTrash, 0, 0, 0},
    {refalrts::icEnd, 0, 0, 0}
  };
  int open_e_stack[1];
  refalrts::FnResult res = refalrts::interpret_array(
    raa, context, arg_begin, arg_end,
    functions, idents, numbers, strings, open_e_stack
  );
  return res;
#else
  // </0 & lambda_GenCommand_4/4 (/7 e.Indent#1/5 )/8 s.Number#2/9 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  context[5] = 0;
  context[6] = 0;
  context[7] = refalrts::brackets_left( context[5], context[6], context[2], context[3] );
  if( ! context[7] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[7], context[8]);
  // closed e.Indent#1 as range 5
  if( ! refalrts::svar_left( context[9], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  if( ! refalrts::empty_seq( context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;

  refalrts::reset_allocator();
  //TRASH: {REMOVED TILE}  {REMOVED TILE}  {REMOVED TILE}  {REMOVED TILE}  {REMOVED TILE} 
  //RESULT: Tile{ [[ } Tile{ AsIs: (/7 AsIs: e.Indent#1/5 HalfReuse: ' '/8 } ' '/10 Tile{ AsIs: </0 Reuse: & StrFromInt/4 } Tile{ AsIs: s.Number#2/9 AsIs: >/1 }"UL,"/11 )/13 Tile{ ]] }
  if( ! refalrts::alloc_char( context[10], ' ' ) )
    return refalrts::cNoMemory;
  if( ! refalrts::alloc_chars( context[11], context[12], "UL,", 3 ) )
    return refalrts::cNoMemory;
  if( ! refalrts::alloc_close_bracket( context[13] ) )
    return refalrts::cNoMemory;
  refalrts::reinit_char( context[8], ' ' );
  refalrts::update_name( context[4], StrFromInt, "StrFromInt" );
  refalrts::link_brackets( context[7], context[13] );
  refalrts::push_stack( context[1] );
  refalrts::push_stack( context[0] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = arg_end->next;
  res = refalrts::splice_evar( res, context[11], context[13] );
  res = refalrts::splice_evar( res, context[9], context[1] );
  res = refalrts::splice_evar( res, context[0], context[4] );
  res = refalrts::splice_evar( res, context[10], context[10] );
  res = refalrts::splice_evar( res, context[7], context[8] );
  refalrts::use( res );
  return refalrts::FnResult(refalrts::cSuccess | (__LINE__ << 8));
#endif
}

static refalrts::FnResult lambda_GenCommand_5(refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  refalrts::this_is_generated_function();
  // issue here memory for vars with 16 elems
  refalrts::Iter context[16];
  refalrts::zeros( context, 16 );
#ifdef INTERPRET
  static const refalrts::RefalFunction functions[] = {
    { PrintString, "PrintString" }
  };
  using refalrts::idents;
  using refalrts::numbers;
  using refalrts::strings;
  static const refalrts::RASLCommand raa[] = {
    // </0 & lambda_GenCommand_5/4 (/7 e.Indent#1/5 )/8 (/11 e.String#2/9 )/12 >/1
    {refalrts::icInitB0_Lite, 0, 0, 0},
    {refalrts::icCallSaveLeft, 0, 2, 0},
    {refalrts::icBracketLeftSave, 0, 5, 2},
    {refalrts::icBracketLeftSave, 0, 9, 2},
    {refalrts::icEmpty, 0, 0, 2},
    // closed e.Indent#1 as range 5
    // closed e.String#2 as range 9
    {refalrts::icEmptyResult, 0, 0, 0},
    //TRASH: {REMOVED TILE}  {REMOVED TILE}  {REMOVED TILE}  {REMOVED TILE}  {REMOVED TILE} 
    //RESULT: Tile{ [[ } Tile{ AsIs: (/7 AsIs: e.Indent#1/5 HalfReuse: ' '/8 HalfReuse: ' '/11 } '{'/13 Tile{ AsIs: </0 Reuse: & PrintString/4 } Tile{ AsIs: e.String#2/9 } >/14 '}'/15 Tile{ HalfReuse: ','/12 HalfReuse: )/1 ]] }
    {refalrts::icAllocChar, 0, '{', 13},
    {refalrts::icAllocBracket, 0, refalrts::ibCloseCall, 14},
    {refalrts::icAllocChar, 0, '}', 15},
    {refalrts::icReinitChar, 0, ' ', 8},
    {refalrts::icReinitChar, 0, ' ', 11},
    {refalrts::icUpdateFunc, 0, 0, 4},
    {refalrts::icReinitChar, 0, ',', 12},
    {refalrts::icReinitBracket, 0, refalrts::ibCloseBracket, 1},
    {refalrts::icLinkBrackets, 7, 1, 0},
    {refalrts::icPushStack, 0, 0, 14},
    {refalrts::icPushStack, 0, 0, 0},
    {refalrts::icSetRes, 0, 0, 12},
    {refalrts::icSpliceTile, 14, 15, 0},
    {refalrts::icSpliceEVar, 0, 0, 9},
    {refalrts::icSpliceTile, 0, 4, 0},
    {refalrts::icSpliceTile, 13, 13, 0},
    {refalrts::icSpliceTile, 7, 11, 0},
    {refalrts::icReturnResult_NoTrash, 0, 0, 0},
    {refalrts::icEnd, 0, 0, 0}
  };
  int open_e_stack[1];
  refalrts::FnResult res = refalrts::interpret_array(
    raa, context, arg_begin, arg_end,
    functions, idents, numbers, strings, open_e_stack
  );
  return res;
#else
  // </0 & lambda_GenCommand_5/4 (/7 e.Indent#1/5 )/8 (/11 e.String#2/9 )/12 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  context[5] = 0;
  context[6] = 0;
  context[7] = refalrts::brackets_left( context[5], context[6], context[2], context[3] );
  if( ! context[7] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[7], context[8]);
  context[9] = 0;
  context[10] = 0;
  context[11] = refalrts::brackets_left( context[9], context[10], context[2], context[3] );
  if( ! context[11] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[11], context[12]);
  if( ! refalrts::empty_seq( context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  // closed e.Indent#1 as range 5
  // closed e.String#2 as range 9

  refalrts::reset_allocator();
  //TRASH: {REMOVED TILE}  {REMOVED TILE}  {REMOVED TILE}  {REMOVED TILE}  {REMOVED TILE} 
  //RESULT: Tile{ [[ } Tile{ AsIs: (/7 AsIs: e.Indent#1/5 HalfReuse: ' '/8 HalfReuse: ' '/11 } '{'/13 Tile{ AsIs: </0 Reuse: & PrintString/4 } Tile{ AsIs: e.String#2/9 } >/14 '}'/15 Tile{ HalfReuse: ','/12 HalfReuse: )/1 ]] }
  if( ! refalrts::alloc_char( context[13], '{' ) )
    return refalrts::cNoMemory;
  if( ! refalrts::alloc_close_call( context[14] ) )
    return refalrts::cNoMemory;
  if( ! refalrts::alloc_char( context[15], '}' ) )
    return refalrts::cNoMemory;
  refalrts::reinit_char( context[8], ' ' );
  refalrts::reinit_char( context[11], ' ' );
  refalrts::update_name( context[4], PrintString, "PrintString" );
  refalrts::reinit_char( context[12], ',' );
  refalrts::reinit_close_bracket( context[1] );
  refalrts::link_brackets( context[7], context[1] );
  refalrts::push_stack( context[14] );
  refalrts::push_stack( context[0] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[12];
  res = refalrts::splice_evar( res, context[14], context[15] );
  res = refalrts::splice_evar( res, context[9], context[10] );
  res = refalrts::splice_evar( res, context[0], context[4] );
  res = refalrts::splice_evar( res, context[13], context[13] );
  res = refalrts::splice_evar( res, context[7], context[11] );
  refalrts::use( res );
  return refalrts::FnResult(refalrts::cSuccess | (__LINE__ << 8));
#endif
}

static refalrts::FnResult lambda_GenCommand_6(refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  refalrts::this_is_generated_function();
  // issue here memory for vars with 15 elems
  refalrts::Iter context[15];
  refalrts::zeros( context, 15 );
#ifdef INTERPRET
  static const refalrts::RefalFunction functions[] = {
    { StrFromInt, "StrFromInt" }
  };
  static const refalrts::RefalIdentifier idents[] = {
    & ident_RIGHT_EDGE<int>::name
  };
  using refalrts::numbers;
  static const refalrts::StringItem strings[] = {
    {"},", 2},
    {"refalrts::icSetRes, 0, 0, ", 26},
    {"rts::icSetResRightEdge, 0, 0, 0},", 33}
  };
  static const refalrts::RASLCommand raa[] = {
    //FAST GEN:(E )S 
    //GLOBAL GEN:(E )S 
    // </0 & lambda_GenCommand_6/4 (/7 e.idxB#0/5 )/8 s.idxT#0/9 >/1
    {refalrts::icInitB0_Lite, 0, 0, 0},
    {refalrts::icCallSaveLeft, 0, 2, 0},
    {refalrts::icBracketLeftSave, 0, 5, 2},
    // closed e.idxB#0 as range 5
    {refalrts::icsVarLeft, 0, 9, 2},
    {refalrts::icEmpty, 0, 0, 2},
    {refalrts::icOnFailGoTo, +17, 0, 0},
    //(E )#RIGHT_EDGE
    // </0 & lambda_GenCommand_6/4 (/7 e.Indent#1/5 )/8 # RIGHT_EDGE/9 >/1
    {refalrts::icIdentTerm, 0, 0, 9},
    // closed e.Indent#1 as range 5
    {refalrts::icEmptyResult, 0, 0, 0},
    //TRASH: {REMOVED TILE}  {REMOVED TILE}  {REMOVED TILE}  {REMOVED TILE} 
    //RESULT: Tile{ [[ } Tile{ AsIs: (/7 AsIs: e.Indent#1/5 HalfReuse: '{'/8 HalfReuse: 'r'/9 HalfReuse: 'e'/1 } 'f'/10 Tile{ HalfReuse: 'a'/0 HalfReuse: 'l'/4 }"rts::icSetResRightEdge, 0, 0, 0},"/11 )/13 Tile{ ]] }
    {refalrts::icAllocChar, 0, 'f', 10},
    {refalrts::icAllocString, 0, 2, 11},
    {refalrts::icAllocBracket, 0, refalrts::ibCloseBracket, 13},
    {refalrts::icReinitChar, 0, '{', 8},
    {refalrts::icReinitChar, 0, 'r', 9},
    {refalrts::icReinitChar, 0, 'e', 1},
    {refalrts::icReinitChar, 0, 'a', 0},
    {refalrts::icReinitChar, 0, 'l', 4},
    {refalrts::icLinkBrackets, 7, 13, 0},
    {refalrts::icSetResRightEdge, 0, 0, 0},
    {refalrts::icSpliceTile, 11, 13, 0},
    {refalrts::icSpliceTile, 0, 4, 0},
    {refalrts::icSpliceTile, 10, 10, 0},
    {refalrts::icSpliceTile, 7, 1, 0},
    {refalrts::icReturnResult_NoTrash, 0, 0, 0},
    //(E )S 
    // </0 & lambda_GenCommand_6/4 (/7 e.Indent#1/5 )/8 s.Offset#2/9 >/1
    // closed e.Indent#1 as range 5
    {refalrts::icEmptyResult, 0, 0, 0},
    //TRASH: {REMOVED TILE}  {REMOVED TILE}  {REMOVED TILE}  {REMOVED TILE}  {REMOVED TILE} 
    //RESULT: Tile{ [[ } Tile{ AsIs: (/7 AsIs: e.Indent#1/5 HalfReuse: '{'/8 }"refalrts::icSetRes, 0, 0, "/10 Tile{ AsIs: </0 Reuse: & StrFromInt/4 } Tile{ AsIs: s.Offset#2/9 AsIs: >/1 }"},"/12 )/14 Tile{ ]] }
    {refalrts::icAllocString, 0, 1, 10},
    {refalrts::icAllocString, 0, 0, 12},
    {refalrts::icAllocBracket, 0, refalrts::ibCloseBracket, 14},
    {refalrts::icReinitChar, 0, '{', 8},
    {refalrts::icUpdateFunc, 0, 0, 4},
    {refalrts::icLinkBrackets, 7, 14, 0},
    {refalrts::icPushStack, 0, 0, 1},
    {refalrts::icPushStack, 0, 0, 0},
    {refalrts::icSetResRightEdge, 0, 0, 0},
    {refalrts::icSpliceTile, 12, 14, 0},
    {refalrts::icSpliceTile, 9, 1, 0},
    {refalrts::icSpliceTile, 0, 4, 0},
    {refalrts::icSpliceTile, 10, 11, 0},
    {refalrts::icSpliceTile, 7, 8, 0},
    {refalrts::icReturnResult_NoTrash, 0, 0, 0},
    {refalrts::icEnd, 0, 0, 0}
  };
  int open_e_stack[1];
  refalrts::FnResult res = refalrts::interpret_array(
    raa, context, arg_begin, arg_end,
    functions, idents, numbers, strings, open_e_stack
  );
  return res;
#else
  //FAST GEN:(E )S 
  //GLOBAL GEN:(E )S 
  // </0 & lambda_GenCommand_6/4 (/7 e.idxB#0/5 )/8 s.idxT#0/9 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  context[5] = 0;
  context[6] = 0;
  context[7] = refalrts::brackets_left( context[5], context[6], context[2], context[3] );
  if( ! context[7] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[7], context[8]);
  // closed e.idxB#0 as range 5
  if( ! refalrts::svar_left( context[9], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  if( ! refalrts::empty_seq( context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  do {
    refalrts::start_sentence();
    //(E )#RIGHT_EDGE
    // </0 & lambda_GenCommand_6/4 (/7 e.Indent#1/5 )/8 # RIGHT_EDGE/9 >/1
    if( ! refalrts::ident_term(  & ident_RIGHT_EDGE<int>::name, context[9] ) )
      continue;
    // closed e.Indent#1 as range 5

    refalrts::reset_allocator();
    //TRASH: {REMOVED TILE}  {REMOVED TILE}  {REMOVED TILE}  {REMOVED TILE} 
    //RESULT: Tile{ [[ } Tile{ AsIs: (/7 AsIs: e.Indent#1/5 HalfReuse: '{'/8 HalfReuse: 'r'/9 HalfReuse: 'e'/1 } 'f'/10 Tile{ HalfReuse: 'a'/0 HalfReuse: 'l'/4 }"rts::icSetResRightEdge, 0, 0, 0},"/11 )/13 Tile{ ]] }
    if( ! refalrts::alloc_char( context[10], 'f' ) )
      return refalrts::cNoMemory;
    if( ! refalrts::alloc_chars( context[11], context[12], "rts::icSetResRightEdge, 0, 0, 0},", 33 ) )
      return refalrts::cNoMemory;
    if( ! refalrts::alloc_close_bracket( context[13] ) )
      return refalrts::cNoMemory;
    refalrts::reinit_char( context[8], '{' );
    refalrts::reinit_char( context[9], 'r' );
    refalrts::reinit_char( context[1], 'e' );
    refalrts::reinit_char( context[0], 'a' );
    refalrts::reinit_char( context[4], 'l' );
    refalrts::link_brackets( context[7], context[13] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = arg_end->next;
    res = refalrts::splice_evar( res, context[11], context[13] );
    res = refalrts::splice_evar( res, context[0], context[4] );
    res = refalrts::splice_evar( res, context[10], context[10] );
    res = refalrts::splice_evar( res, context[7], context[1] );
    refalrts::use( res );
    return refalrts::FnResult(refalrts::cSuccess | (__LINE__ << 8));
  } while ( 0 );

  //(E )S 
  // </0 & lambda_GenCommand_6/4 (/7 e.Indent#1/5 )/8 s.Offset#2/9 >/1
  // closed e.Indent#1 as range 5

  refalrts::reset_allocator();
  //TRASH: {REMOVED TILE}  {REMOVED TILE}  {REMOVED TILE}  {REMOVED TILE}  {REMOVED TILE} 
  //RESULT: Tile{ [[ } Tile{ AsIs: (/7 AsIs: e.Indent#1/5 HalfReuse: '{'/8 }"refalrts::icSetRes, 0, 0, "/10 Tile{ AsIs: </0 Reuse: & StrFromInt/4 } Tile{ AsIs: s.Offset#2/9 AsIs: >/1 }"},"/12 )/14 Tile{ ]] }
  if( ! refalrts::alloc_chars( context[10], context[11], "refalrts::icSetRes, 0, 0, ", 26 ) )
    return refalrts::cNoMemory;
  if( ! refalrts::alloc_chars( context[12], context[13], "},", 2 ) )
    return refalrts::cNoMemory;
  if( ! refalrts::alloc_close_bracket( context[14] ) )
    return refalrts::cNoMemory;
  refalrts::reinit_char( context[8], '{' );
  refalrts::update_name( context[4], StrFromInt, "StrFromInt" );
  refalrts::link_brackets( context[7], context[14] );
  refalrts::push_stack( context[1] );
  refalrts::push_stack( context[0] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = arg_end->next;
  res = refalrts::splice_evar( res, context[12], context[14] );
  res = refalrts::splice_evar( res, context[9], context[1] );
  res = refalrts::splice_evar( res, context[0], context[4] );
  res = refalrts::splice_evar( res, context[10], context[11] );
  res = refalrts::splice_evar( res, context[7], context[8] );
  refalrts::use( res );
  return refalrts::FnResult(refalrts::cSuccess | (__LINE__ << 8));
#endif
}

static refalrts::FnResult lambda_GenCommand_7(refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  refalrts::this_is_generated_function();
  // issue here memory for vars with 15 elems
  refalrts::Iter context[15];
  refalrts::zeros( context, 15 );
#ifdef INTERPRET
  static const refalrts::RefalFunction functions[] = {
    { StrFromInt, "StrFromInt" }
  };
  static const refalrts::RefalIdentifier idents[] = {
    & ident_LEFT_EDGE<int>::name
  };
  using refalrts::numbers;
  static const refalrts::StringItem strings[] = {
    {"},", 2},
    {"refalrts::icTrash, 0, 0, ", 25},
    {"rts::icTrashLeftEdge, 0, 0, 0},", 31}
  };
  static const refalrts::RASLCommand raa[] = {
    //FAST GEN:(E )S 
    //GLOBAL GEN:(E )S 
    // </0 & lambda_GenCommand_7/4 (/7 e.idxB#0/5 )/8 s.idxT#0/9 >/1
    {refalrts::icInitB0_Lite, 0, 0, 0},
    {refalrts::icCallSaveLeft, 0, 2, 0},
    {refalrts::icBracketLeftSave, 0, 5, 2},
    // closed e.idxB#0 as range 5
    {refalrts::icsVarLeft, 0, 9, 2},
    {refalrts::icEmpty, 0, 0, 2},
    {refalrts::icOnFailGoTo, +17, 0, 0},
    //(E )#LEFT_EDGE
    // </0 & lambda_GenCommand_7/4 (/7 e.Indent#1/5 )/8 # LEFT_EDGE/9 >/1
    {refalrts::icIdentTerm, 0, 0, 9},
    // closed e.Indent#1 as range 5
    {refalrts::icEmptyResult, 0, 0, 0},
    //TRASH: {REMOVED TILE}  {REMOVED TILE}  {REMOVED TILE}  {REMOVED TILE} 
    //RESULT: Tile{ [[ } Tile{ AsIs: (/7 AsIs: e.Indent#1/5 HalfReuse: '{'/8 HalfReuse: 'r'/9 HalfReuse: 'e'/1 } 'f'/10 Tile{ HalfReuse: 'a'/0 HalfReuse: 'l'/4 }"rts::icTrashLeftEdge, 0, 0, 0},"/11 )/13 Tile{ ]] }
    {refalrts::icAllocChar, 0, 'f', 10},
    {refalrts::icAllocString, 0, 2, 11},
    {refalrts::icAllocBracket, 0, refalrts::ibCloseBracket, 13},
    {refalrts::icReinitChar, 0, '{', 8},
    {refalrts::icReinitChar, 0, 'r', 9},
    {refalrts::icReinitChar, 0, 'e', 1},
    {refalrts::icReinitChar, 0, 'a', 0},
    {refalrts::icReinitChar, 0, 'l', 4},
    {refalrts::icLinkBrackets, 7, 13, 0},
    {refalrts::icSetResRightEdge, 0, 0, 0},
    {refalrts::icSpliceTile, 11, 13, 0},
    {refalrts::icSpliceTile, 0, 4, 0},
    {refalrts::icSpliceTile, 10, 10, 0},
    {refalrts::icSpliceTile, 7, 1, 0},
    {refalrts::icReturnResult_NoTrash, 0, 0, 0},
    //(E )S 
    // </0 & lambda_GenCommand_7/4 (/7 e.Indent#1/5 )/8 s.Offset#2/9 >/1
    // closed e.Indent#1 as range 5
    {refalrts::icEmptyResult, 0, 0, 0},
    //TRASH: {REMOVED TILE}  {REMOVED TILE}  {REMOVED TILE}  {REMOVED TILE}  {REMOVED TILE} 
    //RESULT: Tile{ [[ } Tile{ AsIs: (/7 AsIs: e.Indent#1/5 HalfReuse: '{'/8 }"refalrts::icTrash, 0, 0, "/10 Tile{ AsIs: </0 Reuse: & StrFromInt/4 } Tile{ AsIs: s.Offset#2/9 AsIs: >/1 }"},"/12 )/14 Tile{ ]] }
    {refalrts::icAllocString, 0, 1, 10},
    {refalrts::icAllocString, 0, 0, 12},
    {refalrts::icAllocBracket, 0, refalrts::ibCloseBracket, 14},
    {refalrts::icReinitChar, 0, '{', 8},
    {refalrts::icUpdateFunc, 0, 0, 4},
    {refalrts::icLinkBrackets, 7, 14, 0},
    {refalrts::icPushStack, 0, 0, 1},
    {refalrts::icPushStack, 0, 0, 0},
    {refalrts::icSetResRightEdge, 0, 0, 0},
    {refalrts::icSpliceTile, 12, 14, 0},
    {refalrts::icSpliceTile, 9, 1, 0},
    {refalrts::icSpliceTile, 0, 4, 0},
    {refalrts::icSpliceTile, 10, 11, 0},
    {refalrts::icSpliceTile, 7, 8, 0},
    {refalrts::icReturnResult_NoTrash, 0, 0, 0},
    {refalrts::icEnd, 0, 0, 0}
  };
  int open_e_stack[1];
  refalrts::FnResult res = refalrts::interpret_array(
    raa, context, arg_begin, arg_end,
    functions, idents, numbers, strings, open_e_stack
  );
  return res;
#else
  //FAST GEN:(E )S 
  //GLOBAL GEN:(E )S 
  // </0 & lambda_GenCommand_7/4 (/7 e.idxB#0/5 )/8 s.idxT#0/9 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  context[5] = 0;
  context[6] = 0;
  context[7] = refalrts::brackets_left( context[5], context[6], context[2], context[3] );
  if( ! context[7] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[7], context[8]);
  // closed e.idxB#0 as range 5
  if( ! refalrts::svar_left( context[9], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  if( ! refalrts::empty_seq( context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  do {
    refalrts::start_sentence();
    //(E )#LEFT_EDGE
    // </0 & lambda_GenCommand_7/4 (/7 e.Indent#1/5 )/8 # LEFT_EDGE/9 >/1
    if( ! refalrts::ident_term(  & ident_LEFT_EDGE<int>::name, context[9] ) )
      continue;
    // closed e.Indent#1 as range 5

    refalrts::reset_allocator();
    //TRASH: {REMOVED TILE}  {REMOVED TILE}  {REMOVED TILE}  {REMOVED TILE} 
    //RESULT: Tile{ [[ } Tile{ AsIs: (/7 AsIs: e.Indent#1/5 HalfReuse: '{'/8 HalfReuse: 'r'/9 HalfReuse: 'e'/1 } 'f'/10 Tile{ HalfReuse: 'a'/0 HalfReuse: 'l'/4 }"rts::icTrashLeftEdge, 0, 0, 0},"/11 )/13 Tile{ ]] }
    if( ! refalrts::alloc_char( context[10], 'f' ) )
      return refalrts::cNoMemory;
    if( ! refalrts::alloc_chars( context[11], context[12], "rts::icTrashLeftEdge, 0, 0, 0},", 31 ) )
      return refalrts::cNoMemory;
    if( ! refalrts::alloc_close_bracket( context[13] ) )
      return refalrts::cNoMemory;
    refalrts::reinit_char( context[8], '{' );
    refalrts::reinit_char( context[9], 'r' );
    refalrts::reinit_char( context[1], 'e' );
    refalrts::reinit_char( context[0], 'a' );
    refalrts::reinit_char( context[4], 'l' );
    refalrts::link_brackets( context[7], context[13] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = arg_end->next;
    res = refalrts::splice_evar( res, context[11], context[13] );
    res = refalrts::splice_evar( res, context[0], context[4] );
    res = refalrts::splice_evar( res, context[10], context[10] );
    res = refalrts::splice_evar( res, context[7], context[1] );
    refalrts::use( res );
    return refalrts::FnResult(refalrts::cSuccess | (__LINE__ << 8));
  } while ( 0 );

  //(E )S 
  // </0 & lambda_GenCommand_7/4 (/7 e.Indent#1/5 )/8 s.Offset#2/9 >/1
  // closed e.Indent#1 as range 5

  refalrts::reset_allocator();
  //TRASH: {REMOVED TILE}  {REMOVED TILE}  {REMOVED TILE}  {REMOVED TILE}  {REMOVED TILE} 
  //RESULT: Tile{ [[ } Tile{ AsIs: (/7 AsIs: e.Indent#1/5 HalfReuse: '{'/8 }"refalrts::icTrash, 0, 0, "/10 Tile{ AsIs: </0 Reuse: & StrFromInt/4 } Tile{ AsIs: s.Offset#2/9 AsIs: >/1 }"},"/12 )/14 Tile{ ]] }
  if( ! refalrts::alloc_chars( context[10], context[11], "refalrts::icTrash, 0, 0, ", 25 ) )
    return refalrts::cNoMemory;
  if( ! refalrts::alloc_chars( context[12], context[13], "},", 2 ) )
    return refalrts::cNoMemory;
  if( ! refalrts::alloc_close_bracket( context[14] ) )
    return refalrts::cNoMemory;
  refalrts::reinit_char( context[8], '{' );
  refalrts::update_name( context[4], StrFromInt, "StrFromInt" );
  refalrts::link_brackets( context[7], context[14] );
  refalrts::push_stack( context[1] );
  refalrts::push_stack( context[0] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = arg_end->next;
  res = refalrts::splice_evar( res, context[12], context[14] );
  res = refalrts::splice_evar( res, context[9], context[1] );
  res = refalrts::splice_evar( res, context[0], context[4] );
  res = refalrts::splice_evar( res, context[10], context[11] );
  res = refalrts::splice_evar( res, context[7], context[8] );
  refalrts::use( res );
  return refalrts::FnResult(refalrts::cSuccess | (__LINE__ << 8));
#endif
}

static refalrts::FnResult GenCommand(refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  refalrts::this_is_generated_function();
  // issue here memory for vars with 70 elems
  refalrts::Iter context[70];
  refalrts::zeros( context, 70 );
#ifdef INTERPRET
  static const refalrts::RefalFunction functions[] = {
    { lambda_GenCommand_7, "lambda_GenCommand_7" },
    { refalrts::create_closure, "refalrts::create_closure" },
    { Fetch, "Fetch" },
    { StrFromInt, "StrFromInt" },
    { PrintInterpretCreateElem, "PrintInterpretCreateElem" },
    { lambda_GenCommand_6, "lambda_GenCommand_6" },
    { PrintDirection, "PrintDirection" },
    { Escape, "Escape" },
    { PrintString, "PrintString" },
    { lambda_GenCommand_5, "lambda_GenCommand_5" },
    { Map, "Map" },
    { lambda_GenCommand_4, "lambda_GenCommand_4" },
    { lambda_GenCommand_3, "lambda_GenCommand_3" },
    { PrintName, "PrintName" },
    { lambda_GenCommand_2, "lambda_GenCommand_2" },
    { GenReturn, "GenReturn" },
    { lambda_GenCommand_1, "lambda_GenCommand_1" },
    { ContextItem, "ContextItem" },
    { Inc, "Inc" },
    { ContextRange, "ContextRange" },
    { PrintCreateElem, "PrintCreateElem" },
    { lambda_GenCommand_0, "lambda_GenCommand_0" },
    { ContextRange_B, "ContextRange_B" },
    { ContextRange_E, "ContextRange_E" },
    { PrintMatchRepeatedSave, "PrintMatchRepeatedSave" },
    { PrintMatchRepeated, "PrintMatchRepeated" },
    { PrintMatchSTVarSave, "PrintMatchSTVarSave" },
    { PrintMatchSTVar, "PrintMatchSTVar" },
    { PrintMatchEmpty, "PrintMatchEmpty" },
    { PrintBracketsVarInit, "PrintBracketsVarInit" },
    { StrFromDirection, "StrFromDirection" },
    { Add, "Add" },
    { PrintMatchADTSave, "PrintMatchADTSave" },
    { PrintMatchADT, "PrintMatchADT" },
    { PrintMatchBracketsSave, "PrintMatchBracketsSave" },
    { PrintMatchBrackets, "PrintMatchBrackets" },
    { PrintMatchIdentSave, "PrintMatchIdentSave" },
    { PrintMatchIdent, "PrintMatchIdent" },
    { PrintMatchNameSave, "PrintMatchNameSave" },
    { PrintMatchName, "PrintMatchName" },
    { PrintMatchNumberSave, "PrintMatchNumberSave" },
    { PrintMatchNumber, "PrintMatchNumber" },
    { PrintMatchCharSave, "PrintMatchCharSave" },
    { PrintMatchChar, "PrintMatchChar" },
    { GenFnStart, "GenFnStart" },
    { GenIdent, "GenIdent" },
    { GenForward, "GenForward" },
    { GenExtern, "GenExtern" },
    { GenSwap, "GenSwap" },
    { SwGenFnStart, "SwGenFnStart" },
    { NakedArguments, "NakedArguments" }
  };
  static const refalrts::RefalIdentifier idents[] = {
    & ident_CmdiFail<int>::name,
    & ident_CmdiTrash<int>::name,
    & ident_CmdiReturnResult_NoTrash<int>::name,
    & ident_CmdiReturnResult<int>::name,
    & ident_CmdiInsertTile<int>::name,
    & ident_CmdiInsertRange<int>::name,
    & ident_CmdiInsertVar<int>::name,
    & ident_CmdiInsertElem<int>::name,
    & ident_CmdiPushStack<int>::name,
    & ident_CmdiLinkBrackets<int>::name,
    & ident_CmdiCreateElem<int>::name,
    & ident_CmdiReinitSVar<int>::name,
    & ident_CmdiCopyVar<int>::name,
    & ident_CmdiSetRes<int>::name,
    & ident_CmdiEmptyResult<int>::name,
    & ident_CmdiSave<int>::name,
    & ident_CmdiEStart<int>::name,
    & ident_CmdiEPrepare<int>::name,
    & ident_CmdiRepeatedSave<int>::name,
    & ident_CmdiRepeat<int>::name,
    & ident_CmdiVarSave<int>::name,
    & ident_CmdiVar<int>::name,
    & ident_CmdiEmpty<int>::name,
    & ident_CmdiCallSave<int>::name,
    & ident_CmdiADTSave<int>::name,
    & ident_CmdiADT<int>::name,
    & ident_CmdiBracketsSave<int>::name,
    & ident_CmdiBracket<int>::name,
    & ident_CmdiIdentSave<int>::name,
    & ident_CmdiIdent<int>::name,
    & ident_CmdiNameSave<int>::name,
    & ident_CmdiName<int>::name,
    & ident_CmdiHugeNumSave<int>::name,
    & ident_CmdiHugeNum<int>::name,
    & ident_CmdiNumSave<int>::name,
    & ident_CmdiNum<int>::name,
    & ident_CmdiCharSave<int>::name,
    & ident_CmdiChar<int>::name,
    & ident_CmdiInitB0_Lite<int>::name,
    & ident_CmdiInitB0<int>::name,
    & ident_CmdiOnFailGoTo<int>::name,
    & ident_CmdiRunInterpret<int>::name,
    & ident_CmdiReserveStack<int>::name,
    & ident_CmdFinRAA<int>::name,
    & ident_CmdInitRAA<int>::name,
    & ident_CmdiStringArray<int>::name,
    & ident_CmdiNumberArray<int>::name,
    & ident_CmdiLabelArray<int>::name,
    & ident_CmdiFuncArray<int>::name,
    & ident_Fail<int>::name,
    & ident_CmdFail<int>::name,
    & ident_CmdTrash<int>::name,
    & ident_Success<int>::name,
    & ident_CmdReturnResult_NoTrash<int>::name,
    & ident_CmdUseRes<int>::name,
    & ident_CmdReturnResult<int>::name,
    & ident_CmdInsertTile<int>::name,
    & ident_CmdInsertRange<int>::name,
    & ident_CmdInsertVar<int>::name,
    & ident_CmdInsertElem<int>::name,
    & ident_CmdPushStack<int>::name,
    & ident_CmdLinkBrackets<int>::name,
    & ident_CmdUpdateElem<int>::name,
    & ident_CmdReinitElem<int>::name,
    & ident_CmdAllocateElem<int>::name,
    & ident_ElString<int>::name,
    & ident_CmdReinitSVar<int>::name,
    & ident_CmdCopyVar<int>::name,
    & ident_CmdSetRes<int>::name,
    & ident_CmdResetAllocator<int>::name,
    & ident_CmdEmptyResult<int>::name,
    & ident_CmdSave<int>::name,
    & ident_AlgLeft<int>::name,
    & ident_CmdOpenedE_End<int>::name,
    & ident_CmdOpenedE_Start<int>::name,
    & ident_CmdRepeatedSave<int>::name,
    & ident_CmdRepeated<int>::name,
    & ident_CmdVarSave<int>::name,
    & ident_CmdVar<int>::name,
    & ident_CmdEmpty<int>::name,
    & ident_CmdCallSave<int>::name,
    & ident_CmdADTSave<int>::name,
    & ident_CmdADT<int>::name,
    & ident_CmdBracketsSave<int>::name,
    & ident_CmdBrackets<int>::name,
    & ident_CmdIdentSave<int>::name,
    & ident_CmdIdent<int>::name,
    & ident_CmdNameSave<int>::name,
    & ident_CmdName<int>::name,
    & ident_CmdNumberSave<int>::name,
    & ident_CmdNumber<int>::name,
    & ident_CmdCharSave<int>::name,
    & ident_CmdChar<int>::name,
    & ident_CmdInitB0_Lite<int>::name,
    & ident_CmdInitB0<int>::name,
    & ident_CmdEndSentence<int>::name,
    & ident_CmdStartSentence<int>::name,
    & ident_CmdEndIf<int>::name,
    & ident_CmdElse<int>::name,
    & ident_CmdIfDef<int>::name,
    & ident_CmdIssueMem<int>::name,
    & ident_CmdFnEnd<int>::name,
    & ident_CmdSeparator<int>::name,
    & ident_CmdFnStart<int>::name,
    & ident_CmdDefineIdent<int>::name,
    & ident_GN_Local<int>::name,
    & ident_CmdDeclaration<int>::name,
    & ident_GN_Entry<int>::name,
    & ident_CmdSwap<int>::name,
    & ident_CmdEnum<int>::name,
    & ident_CmdComment<int>::name
  };
  using refalrts::numbers;
  static const refalrts::StringItem strings[] = {
    {"efalrts::icFail, 0, 0, 0", 24},
    {"efalrts::icReturnResult_NoTrash, 0, 0, 0", 40},
    {"efalrts::icReturnResult, 0, 0, 0", 32},
    {" 0},", 4},
    {", ", 2},
    {"alrts::icSpliceTile, ", 21},
    {"{re", 3},
    {"refalrts::icSpliceRange, 0, 0, ", 31},
    {"alrts::icSpliceSTVar, 0, 0, ", 28},
    {"falrts::icSpliceEVar, 0, 0, ", 28},
    {"refalrts::icSpliceElem, 0, 0, ", 30},
    {"refalrts::icPushStack, 0, 0, ", 29},
    {"alrts::icLinkBrackets, ", 23},
    {"},", 2},
    {"{refalrts::icReinitSVar, 0, ", 28},
    {"lrts::icCopySTVar, ", 19},
    {"{ref", 4},
    {"{refalrts::icCopyEVar, ", 23},
    {"efalrts::icEmptyResult, 0, 0, 0", 31},
    {"{refalrts::icSave, 0, ", 22},
    {"{refalrts::icEStart, 0, ", 24},
    {"{refalrts::icEPrepare, 0, ", 26},
    {"Save, ", 6},
    {"lrts::ictRepeat", 15},
    {"Repeat", 6},
    {"ts::ic", 6},
    {"{refal", 6},
    {"Save, 0, ", 9},
    {"Var", 3},
    {"rts::ic", 7},
    {"{refa", 5},
    {", 0, ", 5},
    {"refalrts::icEmpty, 0, 0, ", 25},
    {"lrts::icCallSave", 16},
    {"rts::icADT", 10},
    {"refalrts::icADT", 15},
    {"lrts::icBracket", 15},
    {"rts::icIdent", 12},
    {"lrts::icIdent", 13},
    {"rts::icFunc", 11},
    {"lrts::icFunc", 12},
    {"rts::icHugeNum", 14},
    {"lrts::icHugeNum", 15},
    {"rts::icNum", 10},
    {"lrts::icNum", 11},
    {"), ", 3},
    {", static_cast<unsigned char>(\'", 30},
    {"rts::icChar", 11},
    {", 0, static_cast<unsigned char>(\'", 33},
    {"lrts::icChar", 12},
    {"efalrts::icInitB0_Lite, 0, 0, 0", 31},
    {"efalrts::icInitB0, 0, 0, 0", 26},
    {" 0, 0},", 7},
    {"alrts::icOnFailGoTo, +", 22},
    {"return res;", 11},
    {");", 2},
    {"  functions, idents, numbers, strings, open_e_stack", 51},
    {", context, arg_begin, arg_end,", 30},
    {"refalrts::FnResult res = refalrts::interpret_array", 50},
    {"nt open_e_stack[", 16},
    {"en_e_stack[1];", 14},
    {"};", 2},
    {"lrts::icEnd, 0, 0, 0}", 21},
    {"c const refalrts::RASLCommand raa[] = {", 39},
    {"  {", 3},
    {"tatic const refalrts::StringItem strings[] = {", 46},
    {"ing refalrts::string", 20},
    {"  ", 2},
    {"tatic const refalrts::RefalNumber numbers[] = {", 47},
    {"ing refalrts::number", 20},
    {"t>::name", 8},
    {"  & ident", 9},
    {"tatic const refalrts::RefalIdentifier idents[] = {", 50},
    {"ing refalrts::ident", 19},
    {"\" }", 3},
    {"  { ", 4},
    {"tatic const refalrts::RefalFunction functions[] = {", 51},
    {"ing refalrts::function", 22},
    {"falrts::use( res ", 17},
    {"rts::splice_to_freelist( arg_begin, arg_end );", 46},
    {"refalrts::use( res )", 20},
    {"= refalrts::splice_evar( res, ", 30},
    {"res", 3},
    {" );", 3},
    {"res = refalrts::splice_evar( res, ", 34},
    {"= refalrts::splice_stvar( res, ", 31},
    {" = refalrts::splice_evar( res, ", 31},
    {"es = refalrts::splice_elem( res, ", 33},
    {"efalrts::push_stack( ", 21},
    {"lrts::link_brackets( ", 21},
    {"ref", 3},
    {"pdate", 5},
    {"einit", 5},
    {"lloc", 4},
    {"  return refalrts::cNoMemory;", 29},
    {") )", 3},
    {"if( ! refalrts::alloc_chars( ", 29},
    {"lrts::reinit_svar( ", 19},
    {" refalrts::copy_stvar(", 22},
    {"if (", 4},
    {"turn refalrts::cNoMemory;", 25},
    {"if (! refalrts::copy_evar(", 26},
    {"refalrts::use(trash_prev);", 26},
    {"refalrts::Iter trash_prev = arg_begin->prev;", 44},
    {"alrts::reset_allocator();", 25},
    {"refalrts::Iter res = arg_begin;", 31},
    {" = ", 3},
    {"= ", 2},
    {" ) );", 5},
    {"e ( refalrts::open_evar_advance( ", 33},
    {"do {", 4},
    {"refalrts::start_e_loop();", 25},
    {"= 0;", 4},
    {" = 0;", 5},
    {"( ", 2},
    {" = refalrts::call_", 18},
    {"= arg_end;", 10},
    {" = arg_begin", 12},
    {"refalrts::move_right( ", 22},
    {"refalrts::move_left( ", 21},
    {" ( 0 );", 7},
    {"  refalrts::start_sentence();", 29},
    {"f ", 2},
    {"refalrts::zeros( context, ", 26},
    {"];", 2},
    {"refalrts::Iter context[", 23},
    {"elems", 5},
    {"// issue here memory for vars with ", 35}
  };
  static const refalrts::RASLCommand raa[] = {
    //FAST GEN:(E )(E )
    //GLOBAL GEN:(E )(S E )
    // </0 & GenCommand/4 (/7 e.idxB#0/5 )/8 (/11 s.idxTB#0/13 e.idxTBV#0/9 )/12 >/1
    {refalrts::icInitB0_Lite, 0, 0, 0},
    {refalrts::icCallSaveLeft, 0, 2, 0},
    {refalrts::icBracketLeftSave, 0, 5, 2},
    {refalrts::icBracketLeftSave, 0, 9, 2},
    {refalrts::icEmpty, 0, 0, 2},
    // closed e.idxB#0 as range 5
    {refalrts::icsVarLeft, 0, 13, 9},
    // closed e.idxTBV#0 as range 9
    {refalrts::icOnFailGoTo, +14, 0, 0},
    //(E )(#CmdCommentE )
    // </0 & GenCommand/4 (/7 e.Indent#1/5 )/8 (/11 # CmdComment/13 e.Text#1/9 )/12 >/1
    {refalrts::icIdentTerm, 0, 110, 13},
    // closed e.Indent#1 as range 5
    // closed e.Text#1 as range 9
    {refalrts::icEmptyResult, 0, 0, 0},
    //TRASH: {REMOVED TILE}  </0 & GenCommand/4 {REMOVED TILE}  {REMOVED TILE}  {REMOVED TILE}  {REMOVED TILE} 
    //RESULT: Tile{ [[ } Tile{ AsIs: (/7 AsIs: e.Indent#1/5 AsIs: )/8 AsIs: (/11 } e.Indent#1/5/14 Tile{ HalfReuse: '/'/1 } Tile{ HalfReuse: '/'/13 AsIs: e.Text#1/9 AsIs: )/12 } Tile{ ]] }
    {refalrts::icCopyEVar, 14, 5, 0},
    {refalrts::icReinitChar, 0, '/', 1},
    {refalrts::icReinitChar, 0, '/', 13},
    {refalrts::icLinkBrackets, 11, 12, 0},
    {refalrts::icLinkBrackets, 7, 8, 0},
    {refalrts::icSetResRightEdge, 0, 0, 0},
    {refalrts::icSpliceTile, 13, 12, 0},
    {refalrts::icSpliceTile, 1, 1, 0},
    {refalrts::icSpliceTile, 14, 15, 0},
    {refalrts::icSpliceTile, 7, 11, 0},
    {refalrts::icTrashLeftEdge, 0, 0, 0},
    {refalrts::icReturnResult_NoTrash, 0, 0, 0},
    {refalrts::icOnFailGoTo, +32, 0, 0},
    //(E )(#CmdEnumS E )
    // </0 & GenCommand/4 (/7 e.Indent#1/5 )/8 (/11 # CmdEnum/13 s.MemoryClass#1/14 e.Name#1/9 )/12 >/1
    {refalrts::icIdentTerm, 0, 109, 13},
    // closed e.Indent#1 as range 5
    {refalrts::icSave, 0, 66, 9},
    {refalrts::icsVarLeft, 0, 14, 66},
    // closed e.Name#1 as range 66(9)
    {refalrts::icEmptyResult, 0, 0, 0},
    //TRASH: {REMOVED TILE}  {REMOVED TILE}  {REMOVED TILE}  {REMOVED TILE}  {REMOVED TILE} 
    //RESULT: Tile{ [[ } Tile{ AsIs: (/7 AsIs: e.Indent#1/5 AsIs: )/8 HalfReuse: </11 HalfReuse: & SwGenFnStart/13 AsIs: s.MemoryClass#1/14 } & NakedArguments/15 Tile{ AsIs: e.Name#1/66(9) } >/16 Tile{ AsIs: </0 Reuse: & GenReturn/4 } # Fail/17"  "/18 >/20 (/21 '}'/22 )/23 Tile{ HalfReuse: (/12 HalfReuse: )/1 ]] }
    {refalrts::icAllocFunc, 0, 50, 15},
    {refalrts::icAllocBracket, 0, refalrts::ibCloseCall, 16},
    {refalrts::icAllocIdent, 0, 49, 17},
    {refalrts::icAllocString, 0, 67, 18},
    {refalrts::icAllocBracket, 0, refalrts::ibCloseCall, 20},
    {refalrts::icAllocBracket, 0, refalrts::ibOpenBracket, 21},
    {refalrts::icAllocChar, 0, '}', 22},
    {refalrts::icAllocBracket, 0, refalrts::ibCloseBracket, 23},
    {refalrts::icReinitBracket, 0, refalrts::ibOpenCall, 11},
    {refalrts::icReinitFunc, 0, 49, 13},
    {refalrts::icUpdateFunc, 0, 15, 4},
    {refalrts::icReinitBracket, 0, refalrts::ibOpenBracket, 12},
    {refalrts::icReinitBracket, 0, refalrts::ibCloseBracket, 1},
    {refalrts::icLinkBrackets, 12, 1, 0},
    {refalrts::icLinkBrackets, 21, 23, 0},
    {refalrts::icPushStack, 0, 0, 20},
    {refalrts::icPushStack, 0, 0, 0},
    {refalrts::icPushStack, 0, 0, 16},
    {refalrts::icPushStack, 0, 0, 11},
    {refalrts::icLinkBrackets, 7, 8, 0},
    {refalrts::icSetRes, 0, 0, 12},
    {refalrts::icSpliceTile, 17, 23, 0},
    {refalrts::icSpliceTile, 0, 4, 0},
    {refalrts::icSpliceTile, 16, 16, 0},
    {refalrts::icSpliceEVar, 0, 0, 66},
    {refalrts::icSpliceTile, 15, 15, 0},
    {refalrts::icSpliceTile, 7, 14, 0},
    {refalrts::icReturnResult_NoTrash, 0, 0, 0},
    {refalrts::icOnFailGoTo, +14, 0, 0},
    //(E )(#CmdSwapS E )
    // </0 & GenCommand/4 (/7 e.Indent#1/5 )/8 (/11 # CmdSwap/13 s.MemoryClass#1/14 e.Name#1/9 )/12 >/1
    {refalrts::icIdentTerm, 0, 108, 13},
    // closed e.Indent#1 as range 5
    {refalrts::icSave, 0, 66, 9},
    {refalrts::icsVarLeft, 0, 14, 66},
    // closed e.Name#1 as range 66(9)
    {refalrts::icEmptyResult, 0, 0, 0},
    //TRASH: {REMOVED TILE}  </0 & GenCommand/4 {REMOVED TILE}  >/1 {REMOVED TILE} 
    //RESULT: Tile{ [[ } Tile{ AsIs: (/7 AsIs: e.Indent#1/5 AsIs: )/8 HalfReuse: </11 HalfReuse: & GenSwap/13 AsIs: s.MemoryClass#1/14 AsIs: e.Name#1/66(9) HalfReuse: >/12 } Tile{ ]] }
    {refalrts::icReinitBracket, 0, refalrts::ibOpenCall, 11},
    {refalrts::icReinitFunc, 0, 48, 13},
    {refalrts::icReinitBracket, 0, refalrts::ibCloseCall, 12},
    {refalrts::icPushStack, 0, 0, 12},
    {refalrts::icPushStack, 0, 0, 11},
    {refalrts::icLinkBrackets, 7, 8, 0},
    {refalrts::icSetResRightEdge, 0, 0, 0},
    {refalrts::icSpliceTile, 7, 12, 0},
    {refalrts::icTrashLeftEdge, 0, 0, 0},
    {refalrts::icReturnResult_NoTrash, 0, 0, 0},
    {refalrts::icOnFailGoTo, +14, 0, 0},
    //(E )(#CmdDeclaration#GN_EntryE )
    // </0 & GenCommand/4 (/7 e.Indent#1/5 )/8 (/11 # CmdDeclaration/13 # GN_Entry/14 e.Name#1/9 )/12 >/1
    {refalrts::icIdentTerm, 0, 106, 13},
    {refalrts::icSave, 0, 66, 9},
    {refalrts::icIdentLeftSave, 14, 107, 66},
    // closed e.Indent#1 as range 5
    // closed e.Name#1 as range 66(9)
    {refalrts::icEmptyResult, 0, 0, 0},
    //TRASH: {REMOVED TILE}  </0 & GenCommand/4 {REMOVED TILE}  # GN_Entry/14 {REMOVED TILE}  )/12 {REMOVED TILE} 
    //RESULT: Tile{ [[ } Tile{ AsIs: (/7 AsIs: e.Indent#1/5 AsIs: )/8 HalfReuse: </11 HalfReuse: & GenExtern/13 } Tile{ AsIs: e.Name#1/66(9) } Tile{ AsIs: >/1 ]] }
    {refalrts::icReinitBracket, 0, refalrts::ibOpenCall, 11},
    {refalrts::icReinitFunc, 0, 47, 13},
    {refalrts::icPushStack, 0, 0, 1},
    {refalrts::icPushStack, 0, 0, 11},
    {refalrts::icLinkBrackets, 7, 8, 0},
    {refalrts::icSetRes, 0, 0, 1},
    {refalrts::icSpliceEVar, 0, 0, 66},
    {refalrts::icSpliceTile, 7, 13, 0},
    {refalrts::icTrashLeftEdge, 0, 0, 0},
    {refalrts::icReturnResult_NoTrash, 0, 0, 0},
    {refalrts::icOnFailGoTo, +14, 0, 0},
    //(E )(#CmdDeclaration#GN_LocalE )
    // </0 & GenCommand/4 (/7 e.Indent#1/5 )/8 (/11 # CmdDeclaration/13 # GN_Local/14 e.Name#1/9 )/12 >/1
    {refalrts::icIdentTerm, 0, 106, 13},
    {refalrts::icSave, 0, 66, 9},
    {refalrts::icIdentLeftSave, 14, 105, 66},
    // closed e.Indent#1 as range 5
    // closed e.Name#1 as range 66(9)
    {refalrts::icEmptyResult, 0, 0, 0},
    //TRASH: {REMOVED TILE}  </0 & GenCommand/4 {REMOVED TILE}  # GN_Local/14 {REMOVED TILE}  )/12 {REMOVED TILE} 
    //RESULT: Tile{ [[ } Tile{ AsIs: (/7 AsIs: e.Indent#1/5 AsIs: )/8 HalfReuse: </11 HalfReuse: & GenForward/13 } Tile{ AsIs: e.Name#1/66(9) } Tile{ AsIs: >/1 ]] }
    {refalrts::icReinitBracket, 0, refalrts::ibOpenCall, 11},
    {refalrts::icReinitFunc, 0, 46, 13},
    {refalrts::icPushStack, 0, 0, 1},
    {refalrts::icPushStack, 0, 0, 11},
    {refalrts::icLinkBrackets, 7, 8, 0},
    {refalrts::icSetRes, 0, 0, 1},
    {refalrts::icSpliceEVar, 0, 0, 66},
    {refalrts::icSpliceTile, 7, 13, 0},
    {refalrts::icTrashLeftEdge, 0, 0, 0},
    {refalrts::icReturnResult_NoTrash, 0, 0, 0},
    {refalrts::icOnFailGoTo, +12, 0, 0},
    //(E )(#CmdDefineIdentE )
    // </0 & GenCommand/4 (/7 e.Indent#1/5 )/8 (/11 # CmdDefineIdent/13 e.Name#1/9 )/12 >/1
    {refalrts::icIdentTerm, 0, 104, 13},
    // closed e.Indent#1 as range 5
    // closed e.Name#1 as range 9
    {refalrts::icEmptyResult, 0, 0, 0},
    //TRASH: {REMOVED TILE}  </0 & GenCommand/4 {REMOVED TILE}  >/1 {REMOVED TILE} 
    //RESULT: Tile{ [[ } Tile{ AsIs: (/7 AsIs: e.Indent#1/5 AsIs: )/8 HalfReuse: </11 HalfReuse: & GenIdent/13 AsIs: e.Name#1/9 HalfReuse: >/12 } Tile{ ]] }
    {refalrts::icReinitBracket, 0, refalrts::ibOpenCall, 11},
    {refalrts::icReinitFunc, 0, 45, 13},
    {refalrts::icReinitBracket, 0, refalrts::ibCloseCall, 12},
    {refalrts::icPushStack, 0, 0, 12},
    {refalrts::icPushStack, 0, 0, 11},
    {refalrts::icLinkBrackets, 7, 8, 0},
    {refalrts::icSetResRightEdge, 0, 0, 0},
    {refalrts::icSpliceTile, 7, 12, 0},
    {refalrts::icTrashLeftEdge, 0, 0, 0},
    {refalrts::icReturnResult_NoTrash, 0, 0, 0},
    {refalrts::icOnFailGoTo, +19, 0, 0},
    //(E )(#CmdFnStartS E )
    // </0 & GenCommand/4 (/7 e.Indent#1/5 )/8 (/11 # CmdFnStart/13 s.MemoryClass#1/14 e.Name#1/9 )/12 >/1
    {refalrts::icIdentTerm, 0, 103, 13},
    // closed e.Indent#1 as range 5
    {refalrts::icSave, 0, 66, 9},
    {refalrts::icsVarLeft, 0, 14, 66},
    // closed e.Name#1 as range 66(9)
    {refalrts::icEmptyResult, 0, 0, 0},
    //TRASH: {REMOVED TILE}  {REMOVED TILE}  {REMOVED TILE}  {REMOVED TILE}  >/1 {REMOVED TILE} 
    //RESULT: Tile{ [[ HalfReuse: (/0 } Tile{ AsIs: e.Indent#1/5 } Tile{ HalfReuse: ' '/4 HalfReuse: ' '/7 } Tile{ AsIs: )/8 HalfReuse: </11 HalfReuse: & GenFnStart/13 AsIs: s.MemoryClass#1/14 AsIs: e.Name#1/66(9) HalfReuse: >/12 } Tile{ ]] }
    {refalrts::icReinitBracket, 0, refalrts::ibOpenBracket, 0},
    {refalrts::icReinitChar, 0, ' ', 4},
    {refalrts::icReinitChar, 0, ' ', 7},
    {refalrts::icReinitBracket, 0, refalrts::ibOpenCall, 11},
    {refalrts::icReinitFunc, 0, 44, 13},
    {refalrts::icReinitBracket, 0, refalrts::ibCloseCall, 12},
    {refalrts::icPushStack, 0, 0, 12},
    {refalrts::icPushStack, 0, 0, 11},
    {refalrts::icLinkBrackets, 0, 8, 0},
    {refalrts::icSetResRightEdge, 0, 0, 0},
    {refalrts::icSpliceTile, 8, 12, 0},
    {refalrts::icSpliceTile, 4, 7, 0},
    {refalrts::icSpliceEVar, 0, 0, 5},
    {refalrts::icTrash, 0, 0, 0},
    {refalrts::icReturnResult_NoTrash, 0, 0, 0},
    {refalrts::icOnFailGoTo, +13, 0, 0},
    //(E )(#CmdSeparator)
    // </0 & GenCommand/4 (/7 e.Indent#1/5 )/8 (/11 # CmdSeparator/13 )/12 >/1
    {refalrts::icIdentTerm, 0, 102, 13},
    {refalrts::icSave, 0, 66, 9},
    {refalrts::icEmpty, 0, 0, 66},
    // closed e.Indent#1 as range 5
    {refalrts::icEmptyResult, 0, 0, 0},
    //TRASH: {REMOVED TILE}  </0 & GenCommand/4 {REMOVED TILE}  # CmdSeparator/13 )/12 {REMOVED TILE} 
    //RESULT: Tile{ [[ } Tile{ AsIs: (/7 AsIs: e.Indent#1/5 AsIs: )/8 AsIs: (/11 } e.Indent#1/5/14 Tile{ HalfReuse: )/1 ]] }
    {refalrts::icCopyEVar, 14, 5, 0},
    {refalrts::icReinitBracket, 0, refalrts::ibCloseBracket, 1},
    {refalrts::icLinkBrackets, 11, 1, 0},
    {refalrts::icLinkBrackets, 7, 8, 0},
    {refalrts::icSetRes, 0, 0, 1},
    {refalrts::icSpliceTile, 14, 15, 0},
    {refalrts::icSpliceTile, 7, 11, 0},
    {refalrts::icTrashLeftEdge, 0, 0, 0},
    {refalrts::icReturnResult_NoTrash, 0, 0, 0},
    {refalrts::icOnFailGoTo, +19, 0, 0},
    //(E ' '' ')(#CmdFnEnd)
    // </0 & GenCommand/4 (/7 e.Indent#1/5 ' '/15 ' '/14 )/8 (/11 # CmdFnEnd/13 )/12 >/1
    {refalrts::icIdentTerm, 0, 101, 13},
    {refalrts::icSave, 0, 66, 5},
    {refalrts::icCharRightSave, 14, static_cast<unsigned char>(' '), 66},
    {refalrts::icCharRightSave, 15, static_cast<unsigned char>(' '), 66},
    {refalrts::icSave, 0, 68, 9},
    {refalrts::icEmpty, 0, 0, 68},
    // closed e.Indent#1 as range 66(5)
    {refalrts::icEmptyResult, 0, 0, 0},
    //TRASH: {REMOVED TILE}  </0 & GenCommand/4 {REMOVED TILE}  >/1 {REMOVED TILE} 
    //RESULT: Tile{ [[ } Tile{ AsIs: (/7 AsIs: e.Indent#1/66(5) HalfReuse: )/15 HalfReuse: (/14 HalfReuse: '}'/8 HalfReuse: )/11 HalfReuse: (/13 AsIs: )/12 } Tile{ ]] }
    {refalrts::icReinitBracket, 0, refalrts::ibCloseBracket, 15},
    {refalrts::icReinitBracket, 0, refalrts::ibOpenBracket, 14},
    {refalrts::icReinitChar, 0, '}', 8},
    {refalrts::icReinitBracket, 0, refalrts::ibCloseBracket, 11},
    {refalrts::icReinitBracket, 0, refalrts::ibOpenBracket, 13},
    {refalrts::icLinkBrackets, 13, 12, 0},
    {refalrts::icLinkBrackets, 14, 11, 0},
    {refalrts::icLinkBrackets, 7, 15, 0},
    {refalrts::icSetResRightEdge, 0, 0, 0},
    {refalrts::icSpliceTile, 7, 12, 0},
    {refalrts::icTrashLeftEdge, 0, 0, 0},
    {refalrts::icReturnResult_NoTrash, 0, 0, 0},
    {refalrts::icOnFailGoTo, +49, 0, 0},
    //(E )(#CmdIssueMemS )
    // </0 & GenCommand/4 (/7 e.Indent#1/5 )/8 (/11 # CmdIssueMem/13 s.Number#1/14 )/12 >/1
    {refalrts::icIdentTerm, 0, 100, 13},
    // closed e.Indent#1 as range 5
    {refalrts::icSave, 0, 66, 9},
    {refalrts::icsVarLeft, 0, 14, 66},
    {refalrts::icEmpty, 0, 0, 66},
    {refalrts::icEmptyResult, 0, 0, 0},
    //TRASH: {REMOVED TILE}  {REMOVED TILE}  {REMOVED TILE}  {REMOVED TILE}  {REMOVED TILE} 
    //RESULT: Tile{ [[ } Tile{ AsIs: (/7 AsIs: e.Indent#1/5 AsIs: )/8 AsIs: (/11 } e.Indent#1/5/15"// issue here memory for vars with "/17 </19 Tile{ HalfReuse: & StrFromInt/13 AsIs: s.Number#1/14 HalfReuse: >/12 HalfReuse: ' '/1 }"elems"/20 )/22 (/23 e.Indent#1/5/24"refalrts::Iter context["/26 Tile{ AsIs: </0 Reuse: & StrFromInt/4 } s.Number#1/14/28 >/29"];"/30 )/32 (/33 e.Indent#1/5/34"refalrts::zeros( context, "/36 </38 & StrFromInt/39 s.Number#1/14/40 >/41" );"/42 )/44 Tile{ ]] }
    {refalrts::icCopyEVar, 15, 5, 0},
    {refalrts::icAllocString, 0, 127, 17},
    {refalrts::icAllocBracket, 0, refalrts::ibOpenCall, 19},
    {refalrts::icAllocString, 0, 126, 20},
    {refalrts::icAllocBracket, 0, refalrts::ibCloseBracket, 22},
    {refalrts::icAllocBracket, 0, refalrts::ibOpenBracket, 23},
    {refalrts::icCopyEVar, 24, 5, 0},
    {refalrts::icAllocString, 0, 125, 26},
    {refalrts::icCopySTVar, 28, 14, 0},
    {refalrts::icAllocBracket, 0, refalrts::ibCloseCall, 29},
    {refalrts::icAllocString, 0, 124, 30},
    {refalrts::icAllocBracket, 0, refalrts::ibCloseBracket, 32},
    {refalrts::icAllocBracket, 0, refalrts::ibOpenBracket, 33},
    {refalrts::icCopyEVar, 34, 5, 0},
    {refalrts::icAllocString, 0, 123, 36},
    {refalrts::icAllocBracket, 0, refalrts::ibOpenCall, 38},
    {refalrts::icAllocFunc, 0, 3, 39},
    {refalrts::icCopySTVar, 40, 14, 0},
    {refalrts::icAllocBracket, 0, refalrts::ibCloseCall, 41},
    {refalrts::icAllocString, 0, 83, 42},
    {refalrts::icAllocBracket, 0, refalrts::ibCloseBracket, 44},
    {refalrts::icReinitFunc, 0, 3, 13},
    {refalrts::icReinitBracket, 0, refalrts::ibCloseCall, 12},
    {refalrts::icReinitChar, 0, ' ', 1},
    {refalrts::icUpdateFunc, 0, 3, 4},
    {refalrts::icLinkBrackets, 33, 44, 0},
    {refalrts::icPushStack, 0, 0, 41},
    {refalrts::icPushStack, 0, 0, 38},
    {refalrts::icLinkBrackets, 23, 32, 0},
    {refalrts::icPushStack, 0, 0, 29},
    {refalrts::icPushStack, 0, 0, 0},
    {refalrts::icLinkBrackets, 11, 22, 0},
    {refalrts::icPushStack, 0, 0, 12},
    {refalrts::icPushStack, 0, 0, 19},
    {refalrts::icLinkBrackets, 7, 8, 0},
    {refalrts::icSetResRightEdge, 0, 0, 0},
    {refalrts::icSpliceTile, 28, 44, 0},
    {refalrts::icSpliceTile, 0, 4, 0},
    {refalrts::icSpliceTile, 20, 27, 0},
    {refalrts::icSpliceTile, 13, 1, 0},
    {refalrts::icSpliceTile, 17, 19, 0},
    {refalrts::icSpliceTile, 15, 16, 0},
    {refalrts::icSpliceTile, 7, 11, 0},
    {refalrts::icReturnResult_NoTrash, 0, 0, 0},
    {refalrts::icOnFailGoTo, +19, 0, 0},
    //(E )(#CmdIfDefE )
    // </0 & GenCommand/4 (/7 e.Indent#1/5 )/8 (/11 # CmdIfDef/13 e.Macros#1/9 )/12 >/1
    {refalrts::icIdentTerm, 0, 99, 13},
    // closed e.Indent#1 as range 5
    // closed e.Macros#1 as range 9
    {refalrts::icEmptyResult, 0, 0, 0},
    //TRASH: {REMOVED TILE}  {REMOVED TILE}  {REMOVED TILE}  {REMOVED TILE}  {REMOVED TILE}  {REMOVED TILE} 
    //RESULT: Tile{ [[ } Tile{ AsIs: (/7 AsIs: e.Indent#1/5 AsIs: )/8 AsIs: (/11 HalfReuse: '#'/13 } Tile{ HalfReuse: 'i'/0 HalfReuse: 'f'/4 } 'd'/14 Tile{ HalfReuse: 'e'/12 }"f "/15 Tile{ AsIs: e.Macros#1/9 } Tile{ HalfReuse: )/1 ]] }
    {refalrts::icAllocChar, 0, 'd', 14},
    {refalrts::icAllocString, 0, 122, 15},
    {refalrts::icReinitChar, 0, '#', 13},
    {refalrts::icReinitChar, 0, 'i', 0},
    {refalrts::icReinitChar, 0, 'f', 4},
    {refalrts::icReinitChar, 0, 'e', 12},
    {refalrts::icReinitBracket, 0, refalrts::ibCloseBracket, 1},
    {refalrts::icLinkBrackets, 11, 1, 0},
    {refalrts::icLinkBrackets, 7, 8, 0},
    {refalrts::icSetRes, 0, 0, 1},
    {refalrts::icSpliceEVar, 0, 0, 9},
    {refalrts::icSpliceTile, 15, 16, 0},
    {refalrts::icSpliceTile, 12, 12, 0},
    {refalrts::icSpliceTile, 14, 14, 0},
    {refalrts::icSpliceTile, 0, 4, 0},
    {refalrts::icSpliceTile, 7, 13, 0},
    {refalrts::icReturnResult_NoTrash, 0, 0, 0},
    {refalrts::icOnFailGoTo, +17, 0, 0},
    //(E )(#CmdElse)
    // </0 & GenCommand/4 (/7 e.Indent#1/5 )/8 (/11 # CmdElse/13 )/12 >/1
    {refalrts::icIdentTerm, 0, 98, 13},
    {refalrts::icSave, 0, 66, 9},
    {refalrts::icEmpty, 0, 0, 66},
    // closed e.Indent#1 as range 5
    {refalrts::icEmptyResult, 0, 0, 0},
    //TRASH: {REMOVED TILE}  {REMOVED TILE}  {REMOVED TILE}  {REMOVED TILE} 
    //RESULT: Tile{ [[ } Tile{ AsIs: (/7 AsIs: e.Indent#1/5 AsIs: )/8 AsIs: (/11 HalfReuse: '#'/13 HalfReuse: 'e'/12 HalfReuse: 'l'/1 } Tile{ HalfReuse: 's'/0 HalfReuse: 'e'/4 } )/14 Tile{ ]] }
    {refalrts::icAllocBracket, 0, refalrts::ibCloseBracket, 14},
    {refalrts::icReinitChar, 0, '#', 13},
    {refalrts::icReinitChar, 0, 'e', 12},
    {refalrts::icReinitChar, 0, 'l', 1},
    {refalrts::icReinitChar, 0, 's', 0},
    {refalrts::icReinitChar, 0, 'e', 4},
    {refalrts::icLinkBrackets, 11, 14, 0},
    {refalrts::icLinkBrackets, 7, 8, 0},
    {refalrts::icSetResRightEdge, 0, 0, 0},
    {refalrts::icSpliceTile, 14, 14, 0},
    {refalrts::icSpliceTile, 0, 4, 0},
    {refalrts::icSpliceTile, 7, 1, 0},
    {refalrts::icReturnResult_NoTrash, 0, 0, 0},
    {refalrts::icOnFailGoTo, +18, 0, 0},
    //(E )(#CmdEndIf)
    // </0 & GenCommand/4 (/7 e.Indent#1/5 )/8 (/11 # CmdEndIf/13 )/12 >/1
    {refalrts::icIdentTerm, 0, 97, 13},
    {refalrts::icSave, 0, 66, 9},
    {refalrts::icEmpty, 0, 0, 66},
    // closed e.Indent#1 as range 5
    {refalrts::icEmptyResult, 0, 0, 0},
    //TRASH: {REMOVED TILE}  {REMOVED TILE}  {REMOVED TILE}  {REMOVED TILE} 
    //RESULT: Tile{ [[ } Tile{ AsIs: (/7 AsIs: e.Indent#1/5 AsIs: )/8 AsIs: (/11 HalfReuse: '#'/13 HalfReuse: 'e'/12 HalfReuse: 'n'/1 } Tile{ HalfReuse: 'd'/0 HalfReuse: 'i'/4 } 'f'/14 )/15 Tile{ ]] }
    {refalrts::icAllocChar, 0, 'f', 14},
    {refalrts::icAllocBracket, 0, refalrts::ibCloseBracket, 15},
    {refalrts::icReinitChar, 0, '#', 13},
    {refalrts::icReinitChar, 0, 'e', 12},
    {refalrts::icReinitChar, 0, 'n', 1},
    {refalrts::icReinitChar, 0, 'd', 0},
    {refalrts::icReinitChar, 0, 'i', 4},
    {refalrts::icLinkBrackets, 11, 15, 0},
    {refalrts::icLinkBrackets, 7, 8, 0},
    {refalrts::icSetResRightEdge, 0, 0, 0},
    {refalrts::icSpliceTile, 14, 15, 0},
    {refalrts::icSpliceTile, 0, 4, 0},
    {refalrts::icSpliceTile, 7, 1, 0},
    {refalrts::icReturnResult_NoTrash, 0, 0, 0},
    {refalrts::icOnFailGoTo, +26, 0, 0},
    //(E )(#CmdStartSentence)
    // </0 & GenCommand/4 (/7 e.Indent#1/5 )/8 (/11 # CmdStartSentence/13 )/12 >/1
    {refalrts::icIdentTerm, 0, 96, 13},
    {refalrts::icSave, 0, 66, 9},
    {refalrts::icEmpty, 0, 0, 66},
    // closed e.Indent#1 as range 5
    {refalrts::icEmptyResult, 0, 0, 0},
    //TRASH: {REMOVED TILE}  {REMOVED TILE}  {REMOVED TILE} 
    //RESULT: Tile{ [[ } (/14 e.Indent#1/5/15 ' '/17 Tile{ HalfReuse: ' '/0 HalfReuse: )/4 AsIs: (/7 AsIs: e.Indent#1/5 HalfReuse: 'd'/8 HalfReuse: 'o'/11 HalfReuse: ' '/13 HalfReuse: '{'/12 HalfReuse: )/1 } (/18 e.Indent#1/5/19"  refalrts::start_sentence();"/21 )/23 Tile{ ]] }
    {refalrts::icAllocBracket, 0, refalrts::ibOpenBracket, 14},
    {refalrts::icCopyEVar, 15, 5, 0},
    {refalrts::icAllocChar, 0, ' ', 17},
    {refalrts::icAllocBracket, 0, refalrts::ibOpenBracket, 18},
    {refalrts::icCopyEVar, 19, 5, 0},
    {refalrts::icAllocString, 0, 121, 21},
    {refalrts::icAllocBracket, 0, refalrts::ibCloseBracket, 23},
    {refalrts::icReinitChar, 0, ' ', 0},
    {refalrts::icReinitBracket, 0, refalrts::ibCloseBracket, 4},
    {refalrts::icReinitChar, 0, 'd', 8},
    {refalrts::icReinitChar, 0, 'o', 11},
    {refalrts::icReinitChar, 0, ' ', 13},
    {refalrts::icReinitChar, 0, '{', 12},
    {refalrts::icReinitBracket, 0, refalrts::ibCloseBracket, 1},
    {refalrts::icLinkBrackets, 18, 23, 0},
    {refalrts::icLinkBrackets, 7, 1, 0},
    {refalrts::icLinkBrackets, 14, 4, 0},
    {refalrts::icSetResRightEdge, 0, 0, 0},
    {refalrts::icSpliceTile, 18, 23, 0},
    {refalrts::icSpliceTile, 0, 1, 0},
    {refalrts::icSpliceTile, 14, 17, 0},
    {refalrts::icReturnResult_NoTrash, 0, 0, 0},
    {refalrts::icOnFailGoTo, +28, 0, 0},
    //(E ' '' ')(#CmdEndSentence)
    // </0 & GenCommand/4 (/7 e.Indent#1/5 ' '/15 ' '/14 )/8 (/11 # CmdEndSentence/13 )/12 >/1
    {refalrts::icIdentTerm, 0, 95, 13},
    {refalrts::icSave, 0, 66, 5},
    {refalrts::icCharRightSave, 14, static_cast<unsigned char>(' '), 66},
    {refalrts::icCharRightSave, 15, static_cast<unsigned char>(' '), 66},
    {refalrts::icSave, 0, 68, 9},
    {refalrts::icEmpty, 0, 0, 68},
    // closed e.Indent#1 as range 66(5)
    {refalrts::icEmptyResult, 0, 0, 0},
    //TRASH: {REMOVED TILE}  {REMOVED TILE}  {REMOVED TILE} 
    //RESULT: Tile{ [[ HalfReuse: (/0 } e.Indent#1/66(5)/16 Tile{ HalfReuse: )/4 AsIs: (/7 AsIs: e.Indent#1/66(5) Reuse: '}'/15 AsIs: ' '/14 HalfReuse: 'w'/8 HalfReuse: 'h'/11 HalfReuse: 'i'/13 HalfReuse: 'l'/12 HalfReuse: 'e'/1 }" ( 0 );"/18 )/20 (/21 )/22 Tile{ ]] }
    {refalrts::icCopyEVar, 16, 66, 0},
    {refalrts::icAllocString, 0, 120, 18},
    {refalrts::icAllocBracket, 0, refalrts::ibCloseBracket, 20},
    {refalrts::icAllocBracket, 0, refalrts::ibOpenBracket, 21},
    {refalrts::icAllocBracket, 0, refalrts::ibCloseBracket, 22},
    {refalrts::icReinitBracket, 0, refalrts::ibOpenBracket, 0},
    {refalrts::icReinitBracket, 0, refalrts::ibCloseBracket, 4},
    {refalrts::icUpdateChar, 0, '}', 15},
    {refalrts::icReinitChar, 0, 'w', 8},
    {refalrts::icReinitChar, 0, 'h', 11},
    {refalrts::icReinitChar, 0, 'i', 13},
    {refalrts::icReinitChar, 0, 'l', 12},
    {refalrts::icReinitChar, 0, 'e', 1},
    {refalrts::icLinkBrackets, 21, 22, 0},
    {refalrts::icLinkBrackets, 7, 20, 0},
    {refalrts::icLinkBrackets, 0, 4, 0},
    {refalrts::icSetResRightEdge, 0, 0, 0},
    {refalrts::icSpliceTile, 18, 22, 0},
    {refalrts::icSpliceTile, 4, 1, 0},
    {refalrts::icSpliceTile, 16, 17, 0},
    {refalrts::icReturnResult_NoTrash, 0, 0, 0},
    {refalrts::icOnFailGoTo, +71, 0, 0},
    //(E )(#CmdInitB0)
    // </0 & GenCommand/4 (/7 e.Indent#1/5 )/8 (/11 # CmdInitB0/13 )/12 >/1
    {refalrts::icIdentTerm, 0, 94, 13},
    {refalrts::icSave, 0, 66, 9},
    {refalrts::icEmpty, 0, 0, 66},
    // closed e.Indent#1 as range 5
    {refalrts::icEmptyResult, 0, 0, 0},
    //TRASH: {REMOVED TILE}  {REMOVED TILE}  {REMOVED TILE} 
    //RESULT: Tile{ [[ } (/14 e.Indent#1/5/15 )/17 (/18 e.Indent#1/5/19 </21 & ContextRange_B/22 0/23 >/24" = arg_begin"/25 Tile{ HalfReuse: ';'/0 HalfReuse: )/4 AsIs: (/7 AsIs: e.Indent#1/5 HalfReuse: </8 HalfReuse: & ContextRange_E/11 HalfReuse: 0/13 HalfReuse: >/12 HalfReuse: ' '/1 }"= arg_end;"/27 )/29 (/30 e.Indent#1/5/31"refalrts::move_left( "/33 </35 & ContextRange/36 0/37 >/38" );"/39 )/41 (/42 e.Indent#1/5/43"refalrts::move_left( "/45 </47 & ContextRange/48 0/49 >/50" );"/51 )/53 (/54 e.Indent#1/5/55"refalrts::move_right( "/57 </59 & ContextRange/60 0/61 >/62" );"/63 )/65 Tile{ ]] }
    {refalrts::icAllocBracket, 0, refalrts::ibOpenBracket, 14},
    {refalrts::icCopyEVar, 15, 5, 0},
    {refalrts::icAllocBracket, 0, refalrts::ibCloseBracket, 17},
    {refalrts::icAllocBracket, 0, refalrts::ibOpenBracket, 18},
    {refalrts::icCopyEVar, 19, 5, 0},
    {refalrts::icAllocBracket, 0, refalrts::ibOpenCall, 21},
    {refalrts::icAllocFunc, 0, 22, 22},
    {refalrts::icAllocInt, 0, 0, 23},
    {refalrts::icAllocBracket, 0, refalrts::ibCloseCall, 24},
    {refalrts::icAllocString, 0, 117, 25},
    {refalrts::icAllocString, 0, 116, 27},
    {refalrts::icAllocBracket, 0, refalrts::ibCloseBracket, 29},
    {refalrts::icAllocBracket, 0, refalrts::ibOpenBracket, 30},
    {refalrts::icCopyEVar, 31, 5, 0},
    {refalrts::icAllocString, 0, 119, 33},
    {refalrts::icAllocBracket, 0, refalrts::ibOpenCall, 35},
    {refalrts::icAllocFunc, 0, 19, 36},
    {refalrts::icAllocInt, 0, 0, 37},
    {refalrts::icAllocBracket, 0, refalrts::ibCloseCall, 38},
    {refalrts::icAllocString, 0, 83, 39},
    {refalrts::icAllocBracket, 0, refalrts::ibCloseBracket, 41},
    {refalrts::icAllocBracket, 0, refalrts::ibOpenBracket, 42},
    {refalrts::icCopyEVar, 43, 5, 0},
    {refalrts::icAllocString, 0, 119, 45},
    {refalrts::icAllocBracket, 0, refalrts::ibOpenCall, 47},
    {refalrts::icAllocFunc, 0, 19, 48},
    {refalrts::icAllocInt, 0, 0, 49},
    {refalrts::icAllocBracket, 0, refalrts::ibCloseCall, 50},
    {refalrts::icAllocString, 0, 83, 51},
    {refalrts::icAllocBracket, 0, refalrts::ibCloseBracket, 53},
    {refalrts::icAllocBracket, 0, refalrts::ibOpenBracket, 54},
    {refalrts::icCopyEVar, 55, 5, 0},
    {refalrts::icAllocString, 0, 118, 57},
    {refalrts::icAllocBracket, 0, refalrts::ibOpenCall, 59},
    {refalrts::icAllocFunc, 0, 19, 60},
    {refalrts::icAllocInt, 0, 0, 61},
    {refalrts::icAllocBracket, 0, refalrts::ibCloseCall, 62},
    {refalrts::icAllocString, 0, 83, 63},
    {refalrts::icAllocBracket, 0, refalrts::ibCloseBracket, 65},
    {refalrts::icReinitChar, 0, ';', 0},
    {refalrts::icReinitBracket, 0, refalrts::ibCloseBracket, 4},
    {refalrts::icReinitBracket, 0, refalrts::ibOpenCall, 8},
    {refalrts::icReinitFunc, 0, 23, 11},
    {refalrts::icReinitInt, 0, 0, 13},
    {refalrts::icReinitBracket, 0, refalrts::ibCloseCall, 12},
    {refalrts::icReinitChar, 0, ' ', 1},
    {refalrts::icLinkBrackets, 54, 65, 0},
    {refalrts::icPushStack, 0, 0, 62},
    {refalrts::icPushStack, 0, 0, 59},
    {refalrts::icLinkBrackets, 42, 53, 0},
    {refalrts::icPushStack, 0, 0, 50},
    {refalrts::icPushStack, 0, 0, 47},
    {refalrts::icLinkBrackets, 30, 41, 0},
    {refalrts::icPushStack, 0, 0, 38},
    {refalrts::icPushStack, 0, 0, 35},
    {refalrts::icLinkBrackets, 7, 29, 0},
    {refalrts::icPushStack, 0, 0, 12},
    {refalrts::icPushStack, 0, 0, 8},
    {refalrts::icLinkBrackets, 18, 4, 0},
    {refalrts::icPushStack, 0, 0, 24},
    {refalrts::icPushStack, 0, 0, 21},
    {refalrts::icLinkBrackets, 14, 17, 0},
    {refalrts::icSetResRightEdge, 0, 0, 0},
    {refalrts::icSpliceTile, 27, 65, 0},
    {refalrts::icSpliceTile, 0, 1, 0},
    {refalrts::icSpliceTile, 14, 26, 0},
    {refalrts::icReturnResult_NoTrash, 0, 0, 0},
    {refalrts::icOnFailGoTo, +35, 0, 0},
    //(E )(#CmdInitB0_Lite)
    // </0 & GenCommand/4 (/7 e.Indent#1/5 )/8 (/11 # CmdInitB0_Lite/13 )/12 >/1
    {refalrts::icIdentTerm, 0, 93, 13},
    {refalrts::icSave, 0, 66, 9},
    {refalrts::icEmpty, 0, 0, 66},
    // closed e.Indent#1 as range 5
    {refalrts::icEmptyResult, 0, 0, 0},
    //TRASH: {REMOVED TILE}  {REMOVED TILE}  {REMOVED TILE} 
    //RESULT: Tile{ [[ } (/14 e.Indent#1/5/15 )/17 (/18 e.Indent#1/5/19 </21 & ContextRange_B/22 0/23 >/24" = arg_begin"/25 Tile{ HalfReuse: ';'/0 HalfReuse: )/4 AsIs: (/7 AsIs: e.Indent#1/5 HalfReuse: </8 HalfReuse: & ContextRange_E/11 HalfReuse: 0/13 HalfReuse: >/12 HalfReuse: ' '/1 }"= arg_end;"/27 )/29 Tile{ ]] }
    {refalrts::icAllocBracket, 0, refalrts::ibOpenBracket, 14},
    {refalrts::icCopyEVar, 15, 5, 0},
    {refalrts::icAllocBracket, 0, refalrts::ibCloseBracket, 17},
    {refalrts::icAllocBracket, 0, refalrts::ibOpenBracket, 18},
    {refalrts::icCopyEVar, 19, 5, 0},
    {refalrts::icAllocBracket, 0, refalrts::ibOpenCall, 21},
    {refalrts::icAllocFunc, 0, 22, 22},
    {refalrts::icAllocInt, 0, 0, 23},
    {refalrts::icAllocBracket, 0, refalrts::ibCloseCall, 24},
    {refalrts::icAllocString, 0, 117, 25},
    {refalrts::icAllocString, 0, 116, 27},
    {refalrts::icAllocBracket, 0, refalrts::ibCloseBracket, 29},
    {refalrts::icReinitChar, 0, ';', 0},
    {refalrts::icReinitBracket, 0, refalrts::ibCloseBracket, 4},
    {refalrts::icReinitBracket, 0, refalrts::ibOpenCall, 8},
    {refalrts::icReinitFunc, 0, 23, 11},
    {refalrts::icReinitInt, 0, 0, 13},
    {refalrts::icReinitBracket, 0, refalrts::ibCloseCall, 12},
    {refalrts::icReinitChar, 0, ' ', 1},
    {refalrts::icLinkBrackets, 7, 29, 0},
    {refalrts::icPushStack, 0, 0, 12},
    {refalrts::icPushStack, 0, 0, 8},
    {refalrts::icLinkBrackets, 18, 4, 0},
    {refalrts::icPushStack, 0, 0, 24},
    {refalrts::icPushStack, 0, 0, 21},
    {refalrts::icLinkBrackets, 14, 17, 0},
    {refalrts::icSetResRightEdge, 0, 0, 0},
    {refalrts::icSpliceTile, 27, 29, 0},
    {refalrts::icSpliceTile, 0, 1, 0},
    {refalrts::icSpliceTile, 14, 26, 0},
    {refalrts::icReturnResult_NoTrash, 0, 0, 0},
    {refalrts::icOnFailGoTo, +23, 0, 0},
    //(E )(#CmdCharS S S )
    // </0 & GenCommand/4 (/7 e.Indent#1/5 )/8 (/11 # CmdChar/13 s.Direction#1/14 s.BracketNumber#1/15 s.Char#1/16 )/12 >/1
    {refalrts::icIdentTerm, 0, 92, 13},
    // closed e.Indent#1 as range 5
    {refalrts::icSave, 0, 66, 9},
    {refalrts::icsVarLeft, 0, 14, 66},
    {refalrts::icsVarLeft, 0, 15, 66},
    {refalrts::icsVarLeft, 0, 16, 66},
    {refalrts::icEmpty, 0, 0, 66},
    {refalrts::icEmptyResult, 0, 0, 0},
    //TRASH: {REMOVED TILE}  {REMOVED TILE}  s.Direction#1/14 s.BracketNumber#1/15 s.Char#1/16 {REMOVED TILE} 
    //RESULT: Tile{ [[ } (/17 e.Indent#1/5/18 )/20 Tile{ AsIs: </0 Reuse: & PrintMatchChar/4 AsIs: (/7 AsIs: e.Indent#1/5 AsIs: )/8 HalfReuse: s.Direction1 #14/11 HalfReuse: s.BracketNumber1 #15/13 } Tile{ HalfReuse: s.Char1 #16/12 AsIs: >/1 ]] }
    {refalrts::icAllocBracket, 0, refalrts::ibOpenBracket, 17},
    {refalrts::icCopyEVar, 18, 5, 0},
    {refalrts::icAllocBracket, 0, refalrts::ibCloseBracket, 20},
    {refalrts::icUpdateFunc, 0, 43, 4},
    {refalrts::icReinitSVar, 0, 14, 11},
    {refalrts::icReinitSVar, 0, 15, 13},
    {refalrts::icReinitSVar, 0, 16, 12},
    {refalrts::icPushStack, 0, 0, 1},
    {refalrts::icPushStack, 0, 0, 0},
    {refalrts::icLinkBrackets, 7, 8, 0},
    {refalrts::icLinkBrackets, 17, 20, 0},
    {refalrts::icSetRes, 0, 0, 12},
    {refalrts::icSpliceTile, 0, 13, 0},
    {refalrts::icSpliceTile, 17, 20, 0},
    {refalrts::icTrashLeftEdge, 0, 0, 0},
    {refalrts::icReturnResult_NoTrash, 0, 0, 0},
    {refalrts::icOnFailGoTo, +25, 0, 0},
    //(E )(#CmdCharSaveS S S S )
    // </0 & GenCommand/4 (/7 e.Indent#1/5 )/8 (/11 # CmdCharSave/13 s.Direction#1/14 s.BracketNumber#1/15 s.Offset#1/16 s.Char#1/17 )/12 >/1
    {refalrts::icIdentTerm, 0, 91, 13},
    // closed e.Indent#1 as range 5
    {refalrts::icSave, 0, 66, 9},
    {refalrts::icsVarLeft, 0, 14, 66},
    {refalrts::icsVarLeft, 0, 15, 66},
    {refalrts::icsVarLeft, 0, 16, 66},
    {refalrts::icsVarLeft, 0, 17, 66},
    {refalrts::icEmpty, 0, 0, 66},
    {refalrts::icEmptyResult, 0, 0, 0},
    //TRASH: {REMOVED TILE}  {REMOVED TILE}  s.Direction#1/14 {REMOVED TILE}  s.Offset#1/16 s.Char#1/17 {REMOVED TILE} 
    //RESULT: Tile{ [[ } (/18 e.Indent#1/5/19 )/21 Tile{ AsIs: </0 Reuse: & PrintMatchCharSave/4 AsIs: (/7 AsIs: e.Indent#1/5 AsIs: )/8 HalfReuse: s.Offset1 #16/11 HalfReuse: s.Direction1 #14/13 } Tile{ AsIs: s.BracketNumber#1/15 } Tile{ HalfReuse: s.Char1 #17/12 AsIs: >/1 ]] }
    {refalrts::icAllocBracket, 0, refalrts::ibOpenBracket, 18},
    {refalrts::icCopyEVar, 19, 5, 0},
    {refalrts::icAllocBracket, 0, refalrts::ibCloseBracket, 21},
    {refalrts::icUpdateFunc, 0, 42, 4},
    {refalrts::icReinitSVar, 0, 16, 11},
    {refalrts::icReinitSVar, 0, 14, 13},
    {refalrts::icReinitSVar, 0, 17, 12},
    {refalrts::icPushStack, 0, 0, 1},
    {refalrts::icPushStack, 0, 0, 0},
    {refalrts::icLinkBrackets, 7, 8, 0},
    {refalrts::icLinkBrackets, 18, 21, 0},
    {refalrts::icSetRes, 0, 0, 12},
    {refalrts::icSpliceTile, 15, 15, 0},
    {refalrts::icSpliceTile, 0, 13, 0},
    {refalrts::icSpliceTile, 18, 21, 0},
    {refalrts::icTrashLeftEdge, 0, 0, 0},
    {refalrts::icReturnResult_NoTrash, 0, 0, 0},
    {refalrts::icOnFailGoTo, +23, 0, 0},
    //(E )(#CmdNumberS S S )
    // </0 & GenCommand/4 (/7 e.Indent#1/5 )/8 (/11 # CmdNumber/13 s.Direction#1/14 s.BracketNumber#1/15 s.Number#1/16 )/12 >/1
    {refalrts::icIdentTerm, 0, 90, 13},
    // closed e.Indent#1 as range 5
    {refalrts::icSave, 0, 66, 9},
    {refalrts::icsVarLeft, 0, 14, 66},
    {refalrts::icsVarLeft, 0, 15, 66},
    {refalrts::icsVarLeft, 0, 16, 66},
    {refalrts::icEmpty, 0, 0, 66},
    {refalrts::icEmptyResult, 0, 0, 0},
    //TRASH: {REMOVED TILE}  {REMOVED TILE}  s.Direction#1/14 s.BracketNumber#1/15 s.Number#1/16 {REMOVED TILE} 
    //RESULT: Tile{ [[ } (/17 e.Indent#1/5/18 )/20 Tile{ AsIs: </0 Reuse: & PrintMatchNumber/4 AsIs: (/7 AsIs: e.Indent#1/5 AsIs: )/8 HalfReuse: s.Direction1 #14/11 HalfReuse: s.BracketNumber1 #15/13 } Tile{ HalfReuse: s.Number1 #16/12 AsIs: >/1 ]] }
    {refalrts::icAllocBracket, 0, refalrts::ibOpenBracket, 17},
    {refalrts::icCopyEVar, 18, 5, 0},
    {refalrts::icAllocBracket, 0, refalrts::ibCloseBracket, 20},
    {refalrts::icUpdateFunc, 0, 41, 4},
    {refalrts::icReinitSVar, 0, 14, 11},
    {refalrts::icReinitSVar, 0, 15, 13},
    {refalrts::icReinitSVar, 0, 16, 12},
    {refalrts::icPushStack, 0, 0, 1},
    {refalrts::icPushStack, 0, 0, 0},
    {refalrts::icLinkBrackets, 7, 8, 0},
    {refalrts::icLinkBrackets, 17, 20, 0},
    {refalrts::icSetRes, 0, 0, 12},
    {refalrts::icSpliceTile, 0, 13, 0},
    {refalrts::icSpliceTile, 17, 20, 0},
    {refalrts::icTrashLeftEdge, 0, 0, 0},
    {refalrts::icReturnResult_NoTrash, 0, 0, 0},
    {refalrts::icOnFailGoTo, +25, 0, 0},
    //(E )(#CmdNumberSaveS S S S )
    // </0 & GenCommand/4 (/7 e.Indent#1/5 )/8 (/11 # CmdNumberSave/13 s.Direction#1/14 s.BracketNumber#1/15 s.Offset#1/16 s.Number#1/17 )/12 >/1
    {refalrts::icIdentTerm, 0, 89, 13},
    // closed e.Indent#1 as range 5
    {refalrts::icSave, 0, 66, 9},
    {refalrts::icsVarLeft, 0, 14, 66},
    {refalrts::icsVarLeft, 0, 15, 66},
    {refalrts::icsVarLeft, 0, 16, 66},
    {refalrts::icsVarLeft, 0, 17, 66},
    {refalrts::icEmpty, 0, 0, 66},
    {refalrts::icEmptyResult, 0, 0, 0},
    //TRASH: {REMOVED TILE}  {REMOVED TILE}  s.Direction#1/14 {REMOVED TILE}  s.Offset#1/16 s.Number#1/17 {REMOVED TILE} 
    //RESULT: Tile{ [[ } (/18 e.Indent#1/5/19 )/21 Tile{ AsIs: </0 Reuse: & PrintMatchNumberSave/4 AsIs: (/7 AsIs: e.Indent#1/5 AsIs: )/8 HalfReuse: s.Offset1 #16/11 HalfReuse: s.Direction1 #14/13 } Tile{ AsIs: s.BracketNumber#1/15 } Tile{ HalfReuse: s.Number1 #17/12 AsIs: >/1 ]] }
    {refalrts::icAllocBracket, 0, refalrts::ibOpenBracket, 18},
    {refalrts::icCopyEVar, 19, 5, 0},
    {refalrts::icAllocBracket, 0, refalrts::ibCloseBracket, 21},
    {refalrts::icUpdateFunc, 0, 40, 4},
    {refalrts::icReinitSVar, 0, 16, 11},
    {refalrts::icReinitSVar, 0, 14, 13},
    {refalrts::icReinitSVar, 0, 17, 12},
    {refalrts::icPushStack, 0, 0, 1},
    {refalrts::icPushStack, 0, 0, 0},
    {refalrts::icLinkBrackets, 7, 8, 0},
    {refalrts::icLinkBrackets, 18, 21, 0},
    {refalrts::icSetRes, 0, 0, 12},
    {refalrts::icSpliceTile, 15, 15, 0},
    {refalrts::icSpliceTile, 0, 13, 0},
    {refalrts::icSpliceTile, 18, 21, 0},
    {refalrts::icTrashLeftEdge, 0, 0, 0},
    {refalrts::icReturnResult_NoTrash, 0, 0, 0},
    {refalrts::icOnFailGoTo, +22, 0, 0},
    //(E )(#CmdNameS S E )
    // </0 & GenCommand/4 (/7 e.Indent#1/5 )/8 (/11 # CmdName/13 s.Direction#1/14 s.BracketNumber#1/15 e.Name#1/9 )/12 >/1
    {refalrts::icIdentTerm, 0, 88, 13},
    // closed e.Indent#1 as range 5
    {refalrts::icSave, 0, 66, 9},
    {refalrts::icsVarLeft, 0, 14, 66},
    {refalrts::icsVarLeft, 0, 15, 66},
    // closed e.Name#1 as range 66(9)
    {refalrts::icEmptyResult, 0, 0, 0},
    //TRASH: {REMOVED TILE}  {REMOVED TILE}  s.Direction#1/14 s.BracketNumber#1/15 {REMOVED TILE}  {REMOVED TILE}  {REMOVED TILE} 
    //RESULT: Tile{ [[ } (/16 e.Indent#1/5/17 Tile{ AsIs: )/12 } Tile{ AsIs: </0 Reuse: & PrintMatchName/4 AsIs: (/7 AsIs: e.Indent#1/5 AsIs: )/8 HalfReuse: s.Direction1 #14/11 HalfReuse: s.BracketNumber1 #15/13 } Tile{ AsIs: e.Name#1/66(9) } Tile{ AsIs: >/1 ]] }
    {refalrts::icAllocBracket, 0, refalrts::ibOpenBracket, 16},
    {refalrts::icCopyEVar, 17, 5, 0},
    {refalrts::icUpdateFunc, 0, 39, 4},
    {refalrts::icReinitSVar, 0, 14, 11},
    {refalrts::icReinitSVar, 0, 15, 13},
    {refalrts::icPushStack, 0, 0, 1},
    {refalrts::icPushStack, 0, 0, 0},
    {refalrts::icLinkBrackets, 7, 8, 0},
    {refalrts::icLinkBrackets, 16, 12, 0},
    {refalrts::icSetRes, 0, 0, 1},
    {refalrts::icSpliceEVar, 0, 0, 66},
    {refalrts::icSpliceTile, 0, 13, 0},
    {refalrts::icSpliceTile, 12, 12, 0},
    {refalrts::icSpliceTile, 17, 18, 0},
    {refalrts::icSpliceTile, 16, 16, 0},
    {refalrts::icTrashLeftEdge, 0, 0, 0},
    {refalrts::icReturnResult_NoTrash, 0, 0, 0},
    {refalrts::icOnFailGoTo, +24, 0, 0},
    //(E )(#CmdNameSaveS S S E )
    // </0 & GenCommand/4 (/7 e.Indent#1/5 )/8 (/11 # CmdNameSave/13 s.Direction#1/14 s.BracketNumber#1/15 s.Offset#1/16 e.Name#1/9 )/12 >/1
    {refalrts::icIdentTerm, 0, 87, 13},
    // closed e.Indent#1 as range 5
    {refalrts::icSave, 0, 66, 9},
    {refalrts::icsVarLeft, 0, 14, 66},
    {refalrts::icsVarLeft, 0, 15, 66},
    {refalrts::icsVarLeft, 0, 16, 66},
    // closed e.Name#1 as range 66(9)
    {refalrts::icEmptyResult, 0, 0, 0},
    //TRASH: {REMOVED TILE}  {REMOVED TILE}  s.Direction#1/14 {REMOVED TILE}  s.Offset#1/16 {REMOVED TILE}  {REMOVED TILE}  {REMOVED TILE} 
    //RESULT: Tile{ [[ } (/17 e.Indent#1/5/18 Tile{ AsIs: )/12 } Tile{ AsIs: </0 Reuse: & PrintMatchNameSave/4 AsIs: (/7 AsIs: e.Indent#1/5 AsIs: )/8 HalfReuse: s.Offset1 #16/11 HalfReuse: s.Direction1 #14/13 } Tile{ AsIs: s.BracketNumber#1/15 } Tile{ AsIs: e.Name#1/66(9) } Tile{ AsIs: >/1 ]] }
    {refalrts::icAllocBracket, 0, refalrts::ibOpenBracket, 17},
    {refalrts::icCopyEVar, 18, 5, 0},
    {refalrts::icUpdateFunc, 0, 38, 4},
    {refalrts::icReinitSVar, 0, 16, 11},
    {refalrts::icReinitSVar, 0, 14, 13},
    {refalrts::icPushStack, 0, 0, 1},
    {refalrts::icPushStack, 0, 0, 0},
    {refalrts::icLinkBrackets, 7, 8, 0},
    {refalrts::icLinkBrackets, 17, 12, 0},
    {refalrts::icSetRes, 0, 0, 1},
    {refalrts::icSpliceEVar, 0, 0, 66},
    {refalrts::icSpliceTile, 15, 15, 0},
    {refalrts::icSpliceTile, 0, 13, 0},
    {refalrts::icSpliceTile, 12, 12, 0},
    {refalrts::icSpliceTile, 18, 19, 0},
    {refalrts::icSpliceTile, 17, 17, 0},
    {refalrts::icTrashLeftEdge, 0, 0, 0},
    {refalrts::icReturnResult_NoTrash, 0, 0, 0},
    {refalrts::icOnFailGoTo, +22, 0, 0},
    //(E )(#CmdIdentS S E )
    // </0 & GenCommand/4 (/7 e.Indent#1/5 )/8 (/11 # CmdIdent/13 s.Direction#1/14 s.BracketNumber#1/15 e.Name#1/9 )/12 >/1
    {refalrts::icIdentTerm, 0, 86, 13},
    // closed e.Indent#1 as range 5
    {refalrts::icSave, 0, 66, 9},
    {refalrts::icsVarLeft, 0, 14, 66},
    {refalrts::icsVarLeft, 0, 15, 66},
    // closed e.Name#1 as range 66(9)
    {refalrts::icEmptyResult, 0, 0, 0},
    //TRASH: {REMOVED TILE}  {REMOVED TILE}  s.Direction#1/14 s.BracketNumber#1/15 {REMOVED TILE}  {REMOVED TILE}  {REMOVED TILE} 
    //RESULT: Tile{ [[ } (/16 e.Indent#1/5/17 Tile{ AsIs: )/12 } Tile{ AsIs: </0 Reuse: & PrintMatchIdent/4 AsIs: (/7 AsIs: e.Indent#1/5 AsIs: )/8 HalfReuse: s.Direction1 #14/11 HalfReuse: s.BracketNumber1 #15/13 } Tile{ AsIs: e.Name#1/66(9) } Tile{ AsIs: >/1 ]] }
    {refalrts::icAllocBracket, 0, refalrts::ibOpenBracket, 16},
    {refalrts::icCopyEVar, 17, 5, 0},
    {refalrts::icUpdateFunc, 0, 37, 4},
    {refalrts::icReinitSVar, 0, 14, 11},
    {refalrts::icReinitSVar, 0, 15, 13},
    {refalrts::icPushStack, 0, 0, 1},
    {refalrts::icPushStack, 0, 0, 0},
    {refalrts::icLinkBrackets, 7, 8, 0},
    {refalrts::icLinkBrackets, 16, 12, 0},
    {refalrts::icSetRes, 0, 0, 1},
    {refalrts::icSpliceEVar, 0, 0, 66},
    {refalrts::icSpliceTile, 0, 13, 0},
    {refalrts::icSpliceTile, 12, 12, 0},
    {refalrts::icSpliceTile, 17, 18, 0},
    {refalrts::icSpliceTile, 16, 16, 0},
    {refalrts::icTrashLeftEdge, 0, 0, 0},
    {refalrts::icReturnResult_NoTrash, 0, 0, 0},
    {refalrts::icOnFailGoTo, +24, 0, 0},
    //(E )(#CmdIdentSaveS S S E )
    // </0 & GenCommand/4 (/7 e.Indent#1/5 )/8 (/11 # CmdIdentSave/13 s.Direction#1/14 s.BracketNumber#1/15 s.Offset#1/16 e.Name#1/9 )/12 >/1
    {refalrts::icIdentTerm, 0, 85, 13},
    // closed e.Indent#1 as range 5
    {refalrts::icSave, 0, 66, 9},
    {refalrts::icsVarLeft, 0, 14, 66},
    {refalrts::icsVarLeft, 0, 15, 66},
    {refalrts::icsVarLeft, 0, 16, 66},
    // closed e.Name#1 as range 66(9)
    {refalrts::icEmptyResult, 0, 0, 0},
    //TRASH: {REMOVED TILE}  {REMOVED TILE}  s.Direction#1/14 {REMOVED TILE}  s.Offset#1/16 {REMOVED TILE}  {REMOVED TILE}  {REMOVED TILE} 
    //RESULT: Tile{ [[ } (/17 e.Indent#1/5/18 Tile{ AsIs: )/12 } Tile{ AsIs: </0 Reuse: & PrintMatchIdentSave/4 AsIs: (/7 AsIs: e.Indent#1/5 AsIs: )/8 HalfReuse: s.Offset1 #16/11 HalfReuse: s.Direction1 #14/13 } Tile{ AsIs: s.BracketNumber#1/15 } Tile{ AsIs: e.Name#1/66(9) } Tile{ AsIs: >/1 ]] }
    {refalrts::icAllocBracket, 0, refalrts::ibOpenBracket, 17},
    {refalrts::icCopyEVar, 18, 5, 0},
    {refalrts::icUpdateFunc, 0, 36, 4},
    {refalrts::icReinitSVar, 0, 16, 11},
    {refalrts::icReinitSVar, 0, 14, 13},
    {refalrts::icPushStack, 0, 0, 1},
    {refalrts::icPushStack, 0, 0, 0},
    {refalrts::icLinkBrackets, 7, 8, 0},
    {refalrts::icLinkBrackets, 17, 12, 0},
    {refalrts::icSetRes, 0, 0, 1},
    {refalrts::icSpliceEVar, 0, 0, 66},
    {refalrts::icSpliceTile, 15, 15, 0},
    {refalrts::icSpliceTile, 0, 13, 0},
    {refalrts::icSpliceTile, 12, 12, 0},
    {refalrts::icSpliceTile, 18, 19, 0},
    {refalrts::icSpliceTile, 17, 17, 0},
    {refalrts::icTrashLeftEdge, 0, 0, 0},
    {refalrts::icReturnResult_NoTrash, 0, 0, 0},
    {refalrts::icOnFailGoTo, +32, 0, 0},
    //(E )(#CmdBracketsS S S )
    // </0 & GenCommand/4 (/7 e.Indent#1/5 )/8 (/11 # CmdBrackets/13 s.Direction#1/14 s.BracketNumber#1/15 s.InnerBrackets#1/16 )/12 >/1
    {refalrts::icIdentTerm, 0, 84, 13},
    // closed e.Indent#1 as range 5
    {refalrts::icSave, 0, 66, 9},
    {refalrts::icsVarLeft, 0, 14, 66},
    {refalrts::icsVarLeft, 0, 15, 66},
    {refalrts::icsVarLeft, 0, 16, 66},
    {refalrts::icEmpty, 0, 0, 66},
    {refalrts::icEmptyResult, 0, 0, 0},
    //TRASH: {REMOVED TILE}  {REMOVED TILE}  s.Direction#1/14 s.BracketNumber#1/15 {REMOVED TILE}  {REMOVED TILE} 
    //RESULT: Tile{ [[ } (/17 e.Indent#1/5/18 )/20 </21 & PrintBracketsVarInit/22 e.Indent#1/5/23 Tile{ AsIs: s.InnerBrackets#1/16 } >/25 Tile{ AsIs: </0 Reuse: & PrintMatchBrackets/4 AsIs: (/7 AsIs: e.Indent#1/5 AsIs: )/8 HalfReuse: s.Direction1 #14/11 HalfReuse: s.BracketNumber1 #15/13 } Tile{ HalfReuse: s.InnerBrackets1 #16/12 AsIs: >/1 ]] }
    {refalrts::icAllocBracket, 0, refalrts::ibOpenBracket, 17},
    {refalrts::icCopyEVar, 18, 5, 0},
    {refalrts::icAllocBracket, 0, refalrts::ibCloseBracket, 20},
    {refalrts::icAllocBracket, 0, refalrts::ibOpenCall, 21},
    {refalrts::icAllocFunc, 0, 29, 22},
    {refalrts::icCopyEVar, 23, 5, 0},
    {refalrts::icAllocBracket, 0, refalrts::ibCloseCall, 25},
    {refalrts::icUpdateFunc, 0, 35, 4},
    {refalrts::icReinitSVar, 0, 14, 11},
    {refalrts::icReinitSVar, 0, 15, 13},
    {refalrts::icReinitSVar, 0, 16, 12},
    {refalrts::icPushStack, 0, 0, 1},
    {refalrts::icPushStack, 0, 0, 0},
    {refalrts::icLinkBrackets, 7, 8, 0},
    {refalrts::icPushStack, 0, 0, 25},
    {refalrts::icPushStack, 0, 0, 21},
    {refalrts::icLinkBrackets, 17, 20, 0},
    {refalrts::icSetRes, 0, 0, 12},
    {refalrts::icSpliceTile, 0, 13, 0},
    {refalrts::icSpliceTile, 25, 25, 0},
    {refalrts::icSpliceTile, 16, 16, 0},
    {refalrts::icSpliceTile, 23, 24, 0},
    {refalrts::icSpliceTile, 17, 22, 0},
    {refalrts::icTrashLeftEdge, 0, 0, 0},
    {refalrts::icReturnResult_NoTrash, 0, 0, 0},
    {refalrts::icOnFailGoTo, +32, 0, 0},
    //(E )(#CmdBracketsSaveS S S )
    // </0 & GenCommand/4 (/7 e.Indent#1/5 )/8 (/11 # CmdBracketsSave/13 s.Direction#1/14 s.BracketNumber#1/15 s.InnerBrackets#1/16 )/12 >/1
    {refalrts::icIdentTerm, 0, 83, 13},
    // closed e.Indent#1 as range 5
    {refalrts::icSave, 0, 66, 9},
    {refalrts::icsVarLeft, 0, 14, 66},
    {refalrts::icsVarLeft, 0, 15, 66},
    {refalrts::icsVarLeft, 0, 16, 66},
    {refalrts::icEmpty, 0, 0, 66},
    {refalrts::icEmptyResult, 0, 0, 0},
    //TRASH: {REMOVED TILE}  {REMOVED TILE}  s.Direction#1/14 s.BracketNumber#1/15 {REMOVED TILE}  {REMOVED TILE} 
    //RESULT: Tile{ [[ } (/17 e.Indent#1/5/18 )/20 </21 & PrintBracketsVarInit/22 e.Indent#1/5/23 Tile{ AsIs: s.InnerBrackets#1/16 } >/25 Tile{ AsIs: </0 Reuse: & PrintMatchBracketsSave/4 AsIs: (/7 AsIs: e.Indent#1/5 AsIs: )/8 HalfReuse: s.Direction1 #14/11 HalfReuse: s.BracketNumber1 #15/13 } Tile{ HalfReuse: s.InnerBrackets1 #16/12 AsIs: >/1 ]] }
    {refalrts::icAllocBracket, 0, refalrts::ibOpenBracket, 17},
    {refalrts::icCopyEVar, 18, 5, 0},
    {refalrts::icAllocBracket, 0, refalrts::ibCloseBracket, 20},
    {refalrts::icAllocBracket, 0, refalrts::ibOpenCall, 21},
    {refalrts::icAllocFunc, 0, 29, 22},
    {refalrts::icCopyEVar, 23, 5, 0},
    {refalrts::icAllocBracket, 0, refalrts::ibCloseCall, 25},
    {refalrts::icUpdateFunc, 0, 34, 4},
    {refalrts::icReinitSVar, 0, 14, 11},
    {refalrts::icReinitSVar, 0, 15, 13},
    {refalrts::icReinitSVar, 0, 16, 12},
    {refalrts::icPushStack, 0, 0, 1},
    {refalrts::icPushStack, 0, 0, 0},
    {refalrts::icLinkBrackets, 7, 8, 0},
    {refalrts::icPushStack, 0, 0, 25},
    {refalrts::icPushStack, 0, 0, 21},
    {refalrts::icLinkBrackets, 17, 20, 0},
    {refalrts::icSetRes, 0, 0, 12},
    {refalrts::icSpliceTile, 0, 13, 0},
    {refalrts::icSpliceTile, 25, 25, 0},
    {refalrts::icSpliceTile, 16, 16, 0},
    {refalrts::icSpliceTile, 23, 24, 0},
    {refalrts::icSpliceTile, 17, 22, 0},
    {refalrts::icTrashLeftEdge, 0, 0, 0},
    {refalrts::icReturnResult_NoTrash, 0, 0, 0},
    {refalrts::icOnFailGoTo, +30, 0, 0},
    //(E )(#CmdADTS S S E )
    // </0 & GenCommand/4 (/7 e.Indent#1/5 )/8 (/11 # CmdADT/13 s.Direction#1/14 s.BracketNumber#1/15 s.InnerBrackets#1/16 e.Name#1/9 )/12 >/1
    {refalrts::icIdentTerm, 0, 82, 13},
    // closed e.Indent#1 as range 5
    {refalrts::icSave, 0, 66, 9},
    {refalrts::icsVarLeft, 0, 14, 66},
    {refalrts::icsVarLeft, 0, 15, 66},
    {refalrts::icsVarLeft, 0, 16, 66},
    // closed e.Name#1 as range 66(9)
    {refalrts::icEmptyResult, 0, 0, 0},
    //TRASH: {REMOVED TILE}  {REMOVED TILE}  s.Direction#1/14 s.BracketNumber#1/15 {REMOVED TILE}  {REMOVED TILE}  {REMOVED TILE} 
    //RESULT: Tile{ [[ } (/17 e.Indent#1/5/18 )/20 </21 & PrintBracketsVarInit/22 e.Indent#1/5/23 s.InnerBrackets#1/16/25 Tile{ AsIs: >/1 } Tile{ AsIs: </0 Reuse: & PrintMatchADT/4 AsIs: (/7 AsIs: e.Indent#1/5 AsIs: )/8 HalfReuse: s.Direction1 #14/11 HalfReuse: s.BracketNumber1 #15/13 } Tile{ AsIs: s.InnerBrackets#1/16 AsIs: e.Name#1/66(9) HalfReuse: >/12 } Tile{ ]] }
    {refalrts::icAllocBracket, 0, refalrts::ibOpenBracket, 17},
    {refalrts::icCopyEVar, 18, 5, 0},
    {refalrts::icAllocBracket, 0, refalrts::ibCloseBracket, 20},
    {refalrts::icAllocBracket, 0, refalrts::ibOpenCall, 21},
    {refalrts::icAllocFunc, 0, 29, 22},
    {refalrts::icCopyEVar, 23, 5, 0},
    {refalrts::icCopySTVar, 25, 16, 0},
    {refalrts::icUpdateFunc, 0, 33, 4},
    {refalrts::icReinitSVar, 0, 14, 11},
    {refalrts::icReinitSVar, 0, 15, 13},
    {refalrts::icReinitBracket, 0, refalrts::ibCloseCall, 12},
    {refalrts::icPushStack, 0, 0, 12},
    {refalrts::icPushStack, 0, 0, 0},
    {refalrts::icLinkBrackets, 7, 8, 0},
    {refalrts::icPushStack, 0, 0, 1},
    {refalrts::icPushStack, 0, 0, 21},
    {refalrts::icLinkBrackets, 17, 20, 0},
    {refalrts::icSetResRightEdge, 0, 0, 0},
    {refalrts::icSpliceTile, 16, 12, 0},
    {refalrts::icSpliceTile, 0, 13, 0},
    {refalrts::icSpliceTile, 1, 1, 0},
    {refalrts::icSpliceTile, 17, 25, 0},
    {refalrts::icTrashLeftEdge, 0, 0, 0},
    {refalrts::icReturnResult_NoTrash, 0, 0, 0},
    {refalrts::icOnFailGoTo, +30, 0, 0},
    //(E )(#CmdADTSaveS S S E )
    // </0 & GenCommand/4 (/7 e.Indent#1/5 )/8 (/11 # CmdADTSave/13 s.Direction#1/14 s.BracketNumber#1/15 s.InnerBrackets#1/16 e.Name#1/9 )/12 >/1
    {refalrts::icIdentTerm, 0, 81, 13},
    // closed e.Indent#1 as range 5
    {refalrts::icSave, 0, 66, 9},
    {refalrts::icsVarLeft, 0, 14, 66},
    {refalrts::icsVarLeft, 0, 15, 66},
    {refalrts::icsVarLeft, 0, 16, 66},
    // closed e.Name#1 as range 66(9)
    {refalrts::icEmptyResult, 0, 0, 0},
    //TRASH: {REMOVED TILE}  {REMOVED TILE}  s.Direction#1/14 s.BracketNumber#1/15 {REMOVED TILE}  {REMOVED TILE}  {REMOVED TILE} 
    //RESULT: Tile{ [[ } (/17 e.Indent#1/5/18 )/20 </21 & PrintBracketsVarInit/22 e.Indent#1/5/23 s.InnerBrackets#1/16/25 Tile{ AsIs: >/1 } Tile{ AsIs: </0 Reuse: & PrintMatchADTSave/4 AsIs: (/7 AsIs: e.Indent#1/5 AsIs: )/8 HalfReuse: s.Direction1 #14/11 HalfReuse: s.BracketNumber1 #15/13 } Tile{ AsIs: s.InnerBrackets#1/16 AsIs: e.Name#1/66(9) HalfReuse: >/12 } Tile{ ]] }
    {refalrts::icAllocBracket, 0, refalrts::ibOpenBracket, 17},
    {refalrts::icCopyEVar, 18, 5, 0},
    {refalrts::icAllocBracket, 0, refalrts::ibCloseBracket, 20},
    {refalrts::icAllocBracket, 0, refalrts::ibOpenCall, 21},
    {refalrts::icAllocFunc, 0, 29, 22},
    {refalrts::icCopyEVar, 23, 5, 0},
    {refalrts::icCopySTVar, 25, 16, 0},
    {refalrts::icUpdateFunc, 0, 32, 4},
    {refalrts::icReinitSVar, 0, 14, 11},
    {refalrts::icReinitSVar, 0, 15, 13},
    {refalrts::icReinitBracket, 0, refalrts::ibCloseCall, 12},
    {refalrts::icPushStack, 0, 0, 12},
    {refalrts::icPushStack, 0, 0, 0},
    {refalrts::icLinkBrackets, 7, 8, 0},
    {refalrts::icPushStack, 0, 0, 1},
    {refalrts::icPushStack, 0, 0, 21},
    {refalrts::icLinkBrackets, 17, 20, 0},
    {refalrts::icSetResRightEdge, 0, 0, 0},
    {refalrts::icSpliceTile, 16, 12, 0},
    {refalrts::icSpliceTile, 0, 13, 0},
    {refalrts::icSpliceTile, 1, 1, 0},
    {refalrts::icSpliceTile, 17, 25, 0},
    {refalrts::icTrashLeftEdge, 0, 0, 0},
    {refalrts::icReturnResult_NoTrash, 0, 0, 0},
    {refalrts::icOnFailGoTo, +62, 0, 0},
    //(E )(#CmdCallSaveS S S )
    // </0 & GenCommand/4 (/7 e.Indent#1/5 )/8 (/11 # CmdCallSave/13 s.Direction#1/14 s.BracketNumber#1/15 s.InnerBrackets#1/16 )/12 >/1
    {refalrts::icIdentTerm, 0, 80, 13},
    // closed e.Indent#1 as range 5
    {refalrts::icSave, 0, 66, 9},
    {refalrts::icsVarLeft, 0, 14, 66},
    {refalrts::icsVarLeft, 0, 15, 66},
    {refalrts::icsVarLeft, 0, 16, 66},
    {refalrts::icEmpty, 0, 0, 66},
    {refalrts::icEmptyResult, 0, 0, 0},
    //TRASH: {REMOVED TILE}  {REMOVED TILE}  {REMOVED TILE}  {REMOVED TILE}  {REMOVED TILE}  {REMOVED TILE}  {REMOVED TILE} 
    //RESULT: Tile{ [[ } Tile{ AsIs: (/7 AsIs: e.Indent#1/5 AsIs: )/8 HalfReuse: </11 HalfReuse: & PrintBracketsVarInit/13 } e.Indent#1/5/17 s.InnerBrackets#1/16/19 >/20 (/21 e.Indent#1/5/22 Tile{ AsIs: </0 Reuse: & ContextItem/4 } </24 & Add/25 2/26 Tile{ AsIs: s.InnerBrackets#1/16 HalfReuse: >/12 AsIs: >/1 }" = refalrts::call_"/27 </29 & StrFromDirection/30 Tile{ AsIs: s.Direction#1/14 } >/31"( "/32 </34 & ContextRange/35 s.InnerBrackets#1/16/36 >/37", "/38 </40 & ContextRange/41 Tile{ AsIs: s.BracketNumber#1/15 } >/42" );"/43 )/45 Tile{ ]] }
    {refalrts::icCopyEVar, 17, 5, 0},
    {refalrts::icCopySTVar, 19, 16, 0},
    {refalrts::icAllocBracket, 0, refalrts::ibCloseCall, 20},
    {refalrts::icAllocBracket, 0, refalrts::ibOpenBracket, 21},
    {refalrts::icCopyEVar, 22, 5, 0},
    {refalrts::icAllocBracket, 0, refalrts::ibOpenCall, 24},
    {refalrts::icAllocFunc, 0, 31, 25},
    {refalrts::icAllocInt, 0, 2, 26},
    {refalrts::icAllocString, 0, 115, 27},
    {refalrts::icAllocBracket, 0, refalrts::ibOpenCall, 29},
    {refalrts::icAllocFunc, 0, 30, 30},
    {refalrts::icAllocBracket, 0, refalrts::ibCloseCall, 31},
    {refalrts::icAllocString, 0, 114, 32},
    {refalrts::icAllocBracket, 0, refalrts::ibOpenCall, 34},
    {refalrts::icAllocFunc, 0, 19, 35},
    {refalrts::icCopySTVar, 36, 16, 0},
    {refalrts::icAllocBracket, 0, refalrts::ibCloseCall, 37},
    {refalrts::icAllocString, 0, 4, 38},
    {refalrts::icAllocBracket, 0, refalrts::ibOpenCall, 40},
    {refalrts::icAllocFunc, 0, 19, 41},
    {refalrts::icAllocBracket, 0, refalrts::ibCloseCall, 42},
    {refalrts::icAllocString, 0, 83, 43},
    {refalrts::icAllocBracket, 0, refalrts::ibCloseBracket, 45},
    {refalrts::icReinitBracket, 0, refalrts::ibOpenCall, 11},
    {refalrts::icReinitFunc, 0, 29, 13},
    {refalrts::icUpdateFunc, 0, 17, 4},
    {refalrts::icReinitBracket, 0, refalrts::ibCloseCall, 12},
    {refalrts::icLinkBrackets, 21, 45, 0},
    {refalrts::icPushStack, 0, 0, 42},
    {refalrts::icPushStack, 0, 0, 40},
    {refalrts::icPushStack, 0, 0, 37},
    {refalrts::icPushStack, 0, 0, 34},
    {refalrts::icPushStack, 0, 0, 31},
    {refalrts::icPushStack, 0, 0, 29},
    {refalrts::icPushStack, 0, 0, 1},
    {refalrts::icPushStack, 0, 0, 0},
    {refalrts::icPushStack, 0, 0, 12},
    {refalrts::icPushStack, 0, 0, 24},
    {refalrts::icPushStack, 0, 0, 20},
    {refalrts::icPushStack, 0, 0, 11},
    {refalrts::icLinkBrackets, 7, 8, 0},
    {refalrts::icSetResRightEdge, 0, 0, 0},
    {refalrts::icSpliceTile, 42, 45, 0},
    {refalrts::icSpliceTile, 15, 15, 0},
    {refalrts::icSpliceTile, 31, 41, 0},
    {refalrts::icSpliceTile, 14, 14, 0},
    {refalrts::icSpliceTile, 27, 30, 0},
    {refalrts::icSpliceTile, 16, 1, 0},
    {refalrts::icSpliceTile, 24, 26, 0},
    {refalrts::icSpliceTile, 0, 4, 0},
    {refalrts::icSpliceTile, 22, 23, 0},
    {refalrts::icSpliceTile, 19, 21, 0},
    {refalrts::icSpliceTile, 17, 18, 0},
    {refalrts::icSpliceTile, 7, 13, 0},
    {refalrts::icReturnResult_NoTrash, 0, 0, 0},
    {refalrts::icOnFailGoTo, +22, 0, 0},
    //(E )(#CmdEmptyS S )
    // </0 & GenCommand/4 (/7 e.Indent#1/5 )/8 (/11 # CmdEmpty/13 s.Direction#1/14 s.BracketNumber#1/15 )/12 >/1
    {refalrts::icIdentTerm, 0, 79, 13},
    // closed e.Indent#1 as range 5
    {refalrts::icSave, 0, 66, 9},
    {refalrts::icsVarLeft, 0, 14, 66},
    {refalrts::icsVarLeft, 0, 15, 66},
    {refalrts::icEmpty, 0, 0, 66},
    {refalrts::icEmptyResult, 0, 0, 0},
    //TRASH: {REMOVED TILE}  {REMOVED TILE}  s.Direction#1/14 s.BracketNumber#1/15 {REMOVED TILE}  {REMOVED TILE}  {REMOVED TILE} 
    //RESULT: Tile{ [[ } Tile{ HalfReuse: (/1 } e.Indent#1/5/16 Tile{ AsIs: )/12 } Tile{ AsIs: </0 Reuse: & PrintMatchEmpty/4 AsIs: (/7 AsIs: e.Indent#1/5 AsIs: )/8 HalfReuse: s.BracketNumber1 #15/11 HalfReuse: >/13 } Tile{ ]] }
    {refalrts::icCopyEVar, 16, 5, 0},
    {refalrts::icReinitBracket, 0, refalrts::ibOpenBracket, 1},
    {refalrts::icUpdateFunc, 0, 28, 4},
    {refalrts::icReinitSVar, 0, 15, 11},
    {refalrts::icReinitBracket, 0, refalrts::ibCloseCall, 13},
    {refalrts::icPushStack, 0, 0, 13},
    {refalrts::icPushStack, 0, 0, 0},
    {refalrts::icLinkBrackets, 7, 8, 0},
    {refalrts::icLinkBrackets, 1, 12, 0},
    {refalrts::icSetResRightEdge, 0, 0, 0},
    {refalrts::icSpliceTile, 0, 13, 0},
    {refalrts::icSpliceTile, 12, 12, 0},
    {refalrts::icSpliceTile, 16, 17, 0},
    {refalrts::icSpliceTile, 1, 1, 0},
    {refalrts::icTrashLeftEdge, 0, 0, 0},
    {refalrts::icReturnResult_NoTrash, 0, 0, 0},
    {refalrts::icOnFailGoTo, +25, 0, 0},
    //(E )(#CmdVarS S S S )
    // </0 & GenCommand/4 (/7 e.Indent#1/5 )/8 (/11 # CmdVar/13 s.Direction#1/14 s.BracketNumber#1/15 s.Mode#1/16 s.VarNumber#1/17 )/12 >/1
    {refalrts::icIdentTerm, 0, 78, 13},
    // closed e.Indent#1 as range 5
    {refalrts::icSave, 0, 66, 9},
    {refalrts::icsVarLeft, 0, 14, 66},
    {refalrts::icsVarLeft, 0, 15, 66},
    {refalrts::icsVarLeft, 0, 16, 66},
    {refalrts::icsVarLeft, 0, 17, 66},
    {refalrts::icEmpty, 0, 0, 66},
    {refalrts::icEmptyResult, 0, 0, 0},
    //TRASH: {REMOVED TILE}  {REMOVED TILE}  s.Direction#1/14 s.BracketNumber#1/15 {REMOVED TILE}  s.VarNumber#1/17 {REMOVED TILE} 
    //RESULT: Tile{ [[ } (/18 e.Indent#1/5/19 )/21 Tile{ AsIs: </0 Reuse: & PrintMatchSTVar/4 AsIs: (/7 AsIs: e.Indent#1/5 AsIs: )/8 HalfReuse: s.Direction1 #14/11 HalfReuse: s.BracketNumber1 #15/13 } Tile{ AsIs: s.Mode#1/16 } Tile{ HalfReuse: s.VarNumber1 #17/12 AsIs: >/1 ]] }
    {refalrts::icAllocBracket, 0, refalrts::ibOpenBracket, 18},
    {refalrts::icCopyEVar, 19, 5, 0},
    {refalrts::icAllocBracket, 0, refalrts::ibCloseBracket, 21},
    {refalrts::icUpdateFunc, 0, 27, 4},
    {refalrts::icReinitSVar, 0, 14, 11},
    {refalrts::icReinitSVar, 0, 15, 13},
    {refalrts::icReinitSVar, 0, 17, 12},
    {refalrts::icPushStack, 0, 0, 1},
    {refalrts::icPushStack, 0, 0, 0},
    {refalrts::icLinkBrackets, 7, 8, 0},
    {refalrts::icLinkBrackets, 18, 21, 0},
    {refalrts::icSetRes, 0, 0, 12},
    {refalrts::icSpliceTile, 16, 16, 0},
    {refalrts::icSpliceTile, 0, 13, 0},
    {refalrts::icSpliceTile, 18, 21, 0},
    {refalrts::icTrashLeftEdge, 0, 0, 0},
    {refalrts::icReturnResult_NoTrash, 0, 0, 0},
    {refalrts::icOnFailGoTo, +25, 0, 0},
    //(E )(#CmdVarSaveS S S S )
    // </0 & GenCommand/4 (/7 e.Indent#1/5 )/8 (/11 # CmdVarSave/13 s.Direction#1/14 s.BracketNumber#1/15 s.Mode#1/16 s.VarNumber#1/17 )/12 >/1
    {refalrts::icIdentTerm, 0, 77, 13},
    // closed e.Indent#1 as range 5
    {refalrts::icSave, 0, 66, 9},
    {refalrts::icsVarLeft, 0, 14, 66},
    {refalrts::icsVarLeft, 0, 15, 66},
    {refalrts::icsVarLeft, 0, 16, 66},
    {refalrts::icsVarLeft, 0, 17, 66},
    {refalrts::icEmpty, 0, 0, 66},
    {refalrts::icEmptyResult, 0, 0, 0},
    //TRASH: {REMOVED TILE}  {REMOVED TILE}  s.Direction#1/14 s.BracketNumber#1/15 {REMOVED TILE}  s.VarNumber#1/17 {REMOVED TILE} 
    //RESULT: Tile{ [[ } (/18 e.Indent#1/5/19 )/21 Tile{ AsIs: </0 Reuse: & PrintMatchSTVarSave/4 AsIs: (/7 AsIs: e.Indent#1/5 AsIs: )/8 HalfReuse: s.Direction1 #14/11 HalfReuse: s.BracketNumber1 #15/13 } Tile{ AsIs: s.Mode#1/16 } Tile{ HalfReuse: s.VarNumber1 #17/12 AsIs: >/1 ]] }
    {refalrts::icAllocBracket, 0, refalrts::ibOpenBracket, 18},
    {refalrts::icCopyEVar, 19, 5, 0},
    {refalrts::icAllocBracket, 0, refalrts::ibCloseBracket, 21},
    {refalrts::icUpdateFunc, 0, 26, 4},
    {refalrts::icReinitSVar, 0, 14, 11},
    {refalrts::icReinitSVar, 0, 15, 13},
    {refalrts::icReinitSVar, 0, 17, 12},
    {refalrts::icPushStack, 0, 0, 1},
    {refalrts::icPushStack, 0, 0, 0},
    {refalrts::icLinkBrackets, 7, 8, 0},
    {refalrts::icLinkBrackets, 18, 21, 0},
    {refalrts::icSetRes, 0, 0, 12},
    {refalrts::icSpliceTile, 16, 16, 0},
    {refalrts::icSpliceTile, 0, 13, 0},
    {refalrts::icSpliceTile, 18, 21, 0},
    {refalrts::icTrashLeftEdge, 0, 0, 0},
    {refalrts::icReturnResult_NoTrash, 0, 0, 0},
    {refalrts::icOnFailGoTo, +27, 0, 0},
    //(E )(#CmdRepeatedS S S S S )
    // </0 & GenCommand/4 (/7 e.Indent#1/5 )/8 (/11 # CmdRepeated/13 s.Direction#1/14 s.BracketNumber#1/15 s.Mode#1/16 s.Var#1/17 s.Sample#1/18 )/12 >/1
    {refalrts::icIdentTerm, 0, 76, 13},
    // closed e.Indent#1 as range 5
    {refalrts::icSave, 0, 66, 9},
    {refalrts::icsVarLeft, 0, 14, 66},
    {refalrts::icsVarLeft, 0, 15, 66},
    {refalrts::icsVarLeft, 0, 16, 66},
    {refalrts::icsVarLeft, 0, 17, 66},
    {refalrts::icsVarLeft, 0, 18, 66},
    {refalrts::icEmpty, 0, 0, 66},
    {refalrts::icEmptyResult, 0, 0, 0},
    //TRASH: {REMOVED TILE}  </0 {REMOVED TILE}  {REMOVED TILE}  {REMOVED TILE}  {REMOVED TILE}  {REMOVED TILE} 
    //RESULT: Tile{ [[ } Tile{ AsIs: (/7 AsIs: e.Indent#1/5 AsIs: )/8 HalfReuse: </11 } Tile{ Reuse: & PrintMatchRepeated/4 } Tile{ HalfReuse: (/1 } e.Indent#1/5/19 Tile{ HalfReuse: )/13 AsIs: s.Direction#1/14 AsIs: s.BracketNumber#1/15 AsIs: s.Mode#1/16 AsIs: s.Var#1/17 AsIs: s.Sample#1/18 HalfReuse: >/12 } Tile{ ]] }
    {refalrts::icCopyEVar, 19, 5, 0},
    {refalrts::icReinitBracket, 0, refalrts::ibOpenCall, 11},
    {refalrts::icUpdateFunc, 0, 25, 4},
    {refalrts::icReinitBracket, 0, refalrts::ibOpenBracket, 1},
    {refalrts::icReinitBracket, 0, refalrts::ibCloseBracket, 13},
    {refalrts::icReinitBracket, 0, refalrts::ibCloseCall, 12},
    {refalrts::icPushStack, 0, 0, 12},
    {refalrts::icPushStack, 0, 0, 11},
    {refalrts::icLinkBrackets, 1, 13, 0},
    {refalrts::icLinkBrackets, 7, 8, 0},
    {refalrts::icSetResRightEdge, 0, 0, 0},
    {refalrts::icSpliceTile, 13, 12, 0},
    {refalrts::icSpliceTile, 19, 20, 0},
    {refalrts::icSpliceTile, 1, 1, 0},
    {refalrts::icSpliceTile, 4, 4, 0},
    {refalrts::icSpliceTile, 7, 11, 0},
    {refalrts::icTrashLeftEdge, 0, 0, 0},
    {refalrts::icReturnResult_NoTrash, 0, 0, 0},
    {refalrts::icOnFailGoTo, +27, 0, 0},
    //(E )(#CmdRepeatedSaveS S S S S )
    // </0 & GenCommand/4 (/7 e.Indent#1/5 )/8 (/11 # CmdRepeatedSave/13 s.Direction#1/14 s.BracketNumber#1/15 s.Mode#1/16 s.Var#1/17 s.Sample#1/18 )/12 >/1
    {refalrts::icIdentTerm, 0, 75, 13},
    // closed e.Indent#1 as range 5
    {refalrts::icSave, 0, 66, 9},
    {refalrts::icsVarLeft, 0, 14, 66},
    {refalrts::icsVarLeft, 0, 15, 66},
    {refalrts::icsVarLeft, 0, 16, 66},
    {refalrts::icsVarLeft, 0, 17, 66},
    {refalrts::icsVarLeft, 0, 18, 66},
    {refalrts::icEmpty, 0, 0, 66},
    {refalrts::icEmptyResult, 0, 0, 0},
    //TRASH: {REMOVED TILE}  </0 {REMOVED TILE}  {REMOVED TILE}  {REMOVED TILE}  {REMOVED TILE}  {REMOVED TILE} 
    //RESULT: Tile{ [[ } Tile{ AsIs: (/7 AsIs: e.Indent#1/5 AsIs: )/8 HalfReuse: </11 } Tile{ Reuse: & PrintMatchRepeatedSave/4 } Tile{ HalfReuse: (/1 } e.Indent#1/5/19 Tile{ HalfReuse: )/13 AsIs: s.Direction#1/14 AsIs: s.BracketNumber#1/15 AsIs: s.Mode#1/16 AsIs: s.Var#1/17 AsIs: s.Sample#1/18 HalfReuse: >/12 } Tile{ ]] }
    {refalrts::icCopyEVar, 19, 5, 0},
    {refalrts::icReinitBracket, 0, refalrts::ibOpenCall, 11},
    {refalrts::icUpdateFunc, 0, 24, 4},
    {refalrts::icReinitBracket, 0, refalrts::ibOpenBracket, 1},
    {refalrts::icReinitBracket, 0, refalrts::ibCloseBracket, 13},
    {refalrts::icReinitBracket, 0, refalrts::ibCloseCall, 12},
    {refalrts::icPushStack, 0, 0, 12},
    {refalrts::icPushStack, 0, 0, 11},
    {refalrts::icLinkBrackets, 1, 13, 0},
    {refalrts::icLinkBrackets, 7, 8, 0},
    {refalrts::icSetResRightEdge, 0, 0, 0},
    {refalrts::icSpliceTile, 13, 12, 0},
    {refalrts::icSpliceTile, 19, 20, 0},
    {refalrts::icSpliceTile, 1, 1, 0},
    {refalrts::icSpliceTile, 4, 4, 0},
    {refalrts::icSpliceTile, 7, 11, 0},
    {refalrts::icTrashLeftEdge, 0, 0, 0},
    {refalrts::icReturnResult_NoTrash, 0, 0, 0},
    {refalrts::icOnFailGoTo, +51, 0, 0},
    //(E )(#CmdOpenedE_Start#AlgLeftS S )
    // </0 & GenCommand/4 (/7 e.Indent#1/5 )/8 (/11 # CmdOpenedE_Start/13 # AlgLeft/14 s.BracketNumber#1/15 s.VarNumber#1/16 )/12 >/1
    {refalrts::icIdentTerm, 0, 74, 13},
    {refalrts::icSave, 0, 66, 9},
    {refalrts::icIdentLeftSave, 14, 72, 66},
    // closed e.Indent#1 as range 5
    {refalrts::icsVarLeft, 0, 15, 66},
    {refalrts::icsVarLeft, 0, 16, 66},
    {refalrts::icEmpty, 0, 0, 66},
    {refalrts::icEmptyResult, 0, 0, 0},
    //TRASH: {REMOVED TILE}  {REMOVED TILE}  s.BracketNumber#1/15 {REMOVED TILE}  {REMOVED TILE} 
    //RESULT: Tile{ [[ } (/17 e.Indent#1/5/18 ' '/20 Tile{ HalfReuse: ' '/0 HalfReuse: )/4 AsIs: (/7 AsIs: e.Indent#1/5 HalfReuse: </8 HalfReuse: & ContextRange_B/11 HalfReuse: s.VarNumber1 #16/13 HalfReuse: >/14 }" = 0;"/21 )/23 (/24 e.Indent#1/5/25 </27 & ContextRange_E/28 Tile{ AsIs: s.VarNumber#1/16 HalfReuse: >/12 HalfReuse: ' '/1 }"= 0;"/29 )/31 (/32 e.Indent#1/5/33"refalrts::start_e_loop();"/35 )/37 (/38 e.Indent#1/5/39"do {"/41 )/43 Tile{ ]] }
    {refalrts::icAllocBracket, 0, refalrts::ibOpenBracket, 17},
    {refalrts::icCopyEVar, 18, 5, 0},
    {refalrts::icAllocChar, 0, ' ', 20},
    {refalrts::icAllocString, 0, 113, 21},
    {refalrts::icAllocBracket, 0, refalrts::ibCloseBracket, 23},
    {refalrts::icAllocBracket, 0, refalrts::ibOpenBracket, 24},
    {refalrts::icCopyEVar, 25, 5, 0},
    {refalrts::icAllocBracket, 0, refalrts::ibOpenCall, 27},
    {refalrts::icAllocFunc, 0, 23, 28},
    {refalrts::icAllocString, 0, 112, 29},
    {refalrts::icAllocBracket, 0, refalrts::ibCloseBracket, 31},
    {refalrts::icAllocBracket, 0, refalrts::ibOpenBracket, 32},
    {refalrts::icCopyEVar, 33, 5, 0},
    {refalrts::icAllocString, 0, 111, 35},
    {refalrts::icAllocBracket, 0, refalrts::ibCloseBracket, 37},
    {refalrts::icAllocBracket, 0, refalrts::ibOpenBracket, 38},
    {refalrts::icCopyEVar, 39, 5, 0},
    {refalrts::icAllocString, 0, 110, 41},
    {refalrts::icAllocBracket, 0, refalrts::ibCloseBracket, 43},
    {refalrts::icReinitChar, 0, ' ', 0},
    {refalrts::icReinitBracket, 0, refalrts::ibCloseBracket, 4},
    {refalrts::icReinitBracket, 0, refalrts::ibOpenCall, 8},
    {refalrts::icReinitFunc, 0, 22, 11},
    {refalrts::icReinitSVar, 0, 16, 13},
    {refalrts::icReinitBracket, 0, refalrts::ibCloseCall, 14},
    {refalrts::icReinitBracket, 0, refalrts::ibCloseCall, 12},
    {refalrts::icReinitChar, 0, ' ', 1},
    {refalrts::icLinkBrackets, 38, 43, 0},
    {refalrts::icLinkBrackets, 32, 37, 0},
    {refalrts::icLinkBrackets, 24, 31, 0},
    {refalrts::icPushStack, 0, 0, 12},
    {refalrts::icPushStack, 0, 0, 27},
    {refalrts::icLinkBrackets, 7, 23, 0},
    {refalrts::icPushStack, 0, 0, 14},
    {refalrts::icPushStack, 0, 0, 8},
    {refalrts::icLinkBrackets, 17, 4, 0},
    {refalrts::icSetResRightEdge, 0, 0, 0},
    {refalrts::icSpliceTile, 29, 43, 0},
    {refalrts::icSpliceTile, 16, 1, 0},
    {refalrts::icSpliceTile, 21, 28, 0},
    {refalrts::icSpliceTile, 0, 14, 0},
    {refalrts::icSpliceTile, 17, 20, 0},
    {refalrts::icTrashLeftEdge, 0, 0, 0},
    {refalrts::icReturnResult_NoTrash, 0, 0, 0},
    {refalrts::icOnFailGoTo, +44, 0, 0},
    //(E ' '' ')(#CmdOpenedE_End#AlgLeftS S )
    // </0 & GenCommand/4 (/7 e.Indent#1/5 ' '/16 ' '/15 )/8 (/11 # CmdOpenedE_End/13 # AlgLeft/14 s.BracketNumber#1/17 s.VarNumber#1/18 )/12 >/1
    {refalrts::icIdentTerm, 0, 73, 13},
    {refalrts::icSave, 0, 66, 9},
    {refalrts::icIdentLeftSave, 14, 72, 66},
    {refalrts::icSave, 0, 68, 5},
    {refalrts::icCharRightSave, 15, static_cast<unsigned char>(' '), 68},
    {refalrts::icCharRightSave, 16, static_cast<unsigned char>(' '), 68},
    // closed e.Indent#1 as range 68(5)
    {refalrts::icsVarLeft, 0, 17, 66},
    {refalrts::icsVarLeft, 0, 18, 66},
    {refalrts::icEmpty, 0, 0, 66},
    {refalrts::icEmptyResult, 0, 0, 0},
    //TRASH: {REMOVED TILE}  {REMOVED TILE}  {REMOVED TILE}  {REMOVED TILE}  {REMOVED TILE} 
    //RESULT: Tile{ [[ HalfReuse: (/0 } e.Indent#1/68(5)/19 Tile{ HalfReuse: )/4 AsIs: (/7 AsIs: e.Indent#1/68(5) Reuse: '}'/16 AsIs: ' '/15 HalfReuse: 'w'/8 HalfReuse: 'h'/11 HalfReuse: 'i'/13 HalfReuse: 'l'/14 }"e ( refalrts::open_evar_advance( "/21 </23 & ContextRange/24 Tile{ AsIs: s.VarNumber#1/18 HalfReuse: >/12 HalfReuse: ','/1 } ' '/25 </26 & ContextRange/27 Tile{ AsIs: s.BracketNumber#1/17 } >/28" ) );"/29 )/31 Tile{ ]] }
    {refalrts::icCopyEVar, 19, 68, 0},
    {refalrts::icAllocString, 0, 109, 21},
    {refalrts::icAllocBracket, 0, refalrts::ibOpenCall, 23},
    {refalrts::icAllocFunc, 0, 19, 24},
    {refalrts::icAllocChar, 0, ' ', 25},
    {refalrts::icAllocBracket, 0, refalrts::ibOpenCall, 26},
    {refalrts::icAllocFunc, 0, 19, 27},
    {refalrts::icAllocBracket, 0, refalrts::ibCloseCall, 28},
    {refalrts::icAllocString, 0, 108, 29},
    {refalrts::icAllocBracket, 0, refalrts::ibCloseBracket, 31},
    {refalrts::icReinitBracket, 0, refalrts::ibOpenBracket, 0},
    {refalrts::icReinitBracket, 0, refalrts::ibCloseBracket, 4},
    {refalrts::icUpdateChar, 0, '}', 16},
    {refalrts::icReinitChar, 0, 'w', 8},
    {refalrts::icReinitChar, 0, 'h', 11},
    {refalrts::icReinitChar, 0, 'i', 13},
    {refalrts::icReinitChar, 0, 'l', 14},
    {refalrts::icReinitBracket, 0, refalrts::ibCloseCall, 12},
    {refalrts::icReinitChar, 0, ',', 1},
    {refalrts::icLinkBrackets, 7, 31, 0},
    {refalrts::icPushStack, 0, 0, 28},
    {refalrts::icPushStack, 0, 0, 26},
    {refalrts::icPushStack, 0, 0, 12},
    {refalrts::icPushStack, 0, 0, 23},
    {refalrts::icLinkBrackets, 0, 4, 0},
    {refalrts::icSetResRightEdge, 0, 0, 0},
    {refalrts::icSpliceTile, 28, 31, 0},
    {refalrts::icSpliceTile, 17, 17, 0},
    {refalrts::icSpliceTile, 25, 27, 0},
    {refalrts::icSpliceTile, 18, 1, 0},
    {refalrts::icSpliceTile, 21, 24, 0},
    {refalrts::icSpliceTile, 4, 14, 0},
    {refalrts::icSpliceTile, 19, 20, 0},
    {refalrts::icReturnResult_NoTrash, 0, 0, 0},
    {refalrts::icOnFailGoTo, +49, 0, 0},
    //(E )(#CmdSaveS S )
    // </0 & GenCommand/4 (/7 e.Indent#1/5 )/8 (/11 # CmdSave/13 s.OldBracketNumber#1/14 s.NewBracketNumber#1/15 )/12 >/1
    {refalrts::icIdentTerm, 0, 71, 13},
    // closed e.Indent#1 as range 5
    {refalrts::icSave, 0, 66, 9},
    {refalrts::icsVarLeft, 0, 14, 66},
    {refalrts::icsVarLeft, 0, 15, 66},
    {refalrts::icEmpty, 0, 0, 66},
    {refalrts::icEmptyResult, 0, 0, 0},
    //TRASH: {REMOVED TILE}  {REMOVED TILE}  {REMOVED TILE}  {REMOVED TILE}  {REMOVED TILE}  {REMOVED TILE} 
    //RESULT: Tile{ [[ } Tile{ AsIs: (/7 AsIs: e.Indent#1/5 AsIs: )/8 AsIs: (/11 } e.Indent#1/5/16 Tile{ AsIs: </0 Reuse: & ContextRange_B/4 } Tile{ AsIs: s.NewBracketNumber#1/15 HalfReuse: >/12 HalfReuse: ' '/1 }"= "/18 </20 Tile{ HalfReuse: & ContextRange_B/13 AsIs: s.OldBracketNumber#1/14 } >/21 ';'/22 )/23 (/24 e.Indent#1/5/25 </27 & ContextRange_E/28 s.NewBracketNumber#1/15/29 >/30" = "/31 </33 & ContextRange_E/34 s.OldBracketNumber#1/14/35 >/36 ';'/37 )/38 Tile{ ]] }
    {refalrts::icCopyEVar, 16, 5, 0},
    {refalrts::icAllocString, 0, 107, 18},
    {refalrts::icAllocBracket, 0, refalrts::ibOpenCall, 20},
    {refalrts::icAllocBracket, 0, refalrts::ibCloseCall, 21},
    {refalrts::icAllocChar, 0, ';', 22},
    {refalrts::icAllocBracket, 0, refalrts::ibCloseBracket, 23},
    {refalrts::icAllocBracket, 0, refalrts::ibOpenBracket, 24},
    {refalrts::icCopyEVar, 25, 5, 0},
    {refalrts::icAllocBracket, 0, refalrts::ibOpenCall, 27},
    {refalrts::icAllocFunc, 0, 23, 28},
    {refalrts::icCopySTVar, 29, 15, 0},
    {refalrts::icAllocBracket, 0, refalrts::ibCloseCall, 30},
    {refalrts::icAllocString, 0, 106, 31},
    {refalrts::icAllocBracket, 0, refalrts::ibOpenCall, 33},
    {refalrts::icAllocFunc, 0, 23, 34},
    {refalrts::icCopySTVar, 35, 14, 0},
    {refalrts::icAllocBracket, 0, refalrts::ibCloseCall, 36},
    {refalrts::icAllocChar, 0, ';', 37},
    {refalrts::icAllocBracket, 0, refalrts::ibCloseBracket, 38},
    {refalrts::icUpdateFunc, 0, 22, 4},
    {refalrts::icReinitBracket, 0, refalrts::ibCloseCall, 12},
    {refalrts::icReinitChar, 0, ' ', 1},
    {refalrts::icReinitFunc, 0, 22, 13},
    {refalrts::icLinkBrackets, 24, 38, 0},
    {refalrts::icPushStack, 0, 0, 36},
    {refalrts::icPushStack, 0, 0, 33},
    {refalrts::icPushStack, 0, 0, 30},
    {refalrts::icPushStack, 0, 0, 27},
    {refalrts::icLinkBrackets, 11, 23, 0},
    {refalrts::icPushStack, 0, 0, 21},
    {refalrts::icPushStack, 0, 0, 20},
    {refalrts::icPushStack, 0, 0, 12},
    {refalrts::icPushStack, 0, 0, 0},
    {refalrts::icLinkBrackets, 7, 8, 0},
    {refalrts::icSetResRightEdge, 0, 0, 0},
    {refalrts::icSpliceTile, 21, 38, 0},
    {refalrts::icSpliceTile, 13, 14, 0},
    {refalrts::icSpliceTile, 18, 20, 0},
    {refalrts::icSpliceTile, 15, 1, 0},
    {refalrts::icSpliceTile, 0, 4, 0},
    {refalrts::icSpliceTile, 16, 17, 0},
    {refalrts::icSpliceTile, 7, 11, 0},
    {refalrts::icReturnResult_NoTrash, 0, 0, 0},
    {refalrts::icOnFailGoTo, +27, 0, 0},
    //(E )(#CmdEmptyResult)
    // </0 & GenCommand/4 (/7 e.Indent#1/5 )/8 (/11 # CmdEmptyResult/13 )/12 >/1
    {refalrts::icIdentTerm, 0, 70, 13},
    {refalrts::icSave, 0, 66, 9},
    {refalrts::icEmpty, 0, 0, 66},
    // closed e.Indent#1 as range 5
    {refalrts::icEmptyResult, 0, 0, 0},
    //TRASH: {REMOVED TILE}  {REMOVED TILE}  {REMOVED TILE}  {REMOVED TILE} 
    //RESULT: Tile{ [[ } Tile{ AsIs: (/7 AsIs: e.Indent#1/5 AsIs: )/8 AsIs: (/11 HalfReuse: )/13 HalfReuse: (/12 } e.Indent#1/5/14 'r'/16 Tile{ HalfReuse: 'e'/0 HalfReuse: 'f'/4 }"alrts::reset_allocator();"/17 )/19 (/20 e.Indent#1/5/21"refalrts::Iter res = arg_begin;"/23 Tile{ HalfReuse: )/1 ]] }
    {refalrts::icCopyEVar, 14, 5, 0},
    {refalrts::icAllocChar, 0, 'r', 16},
    {refalrts::icAllocString, 0, 104, 17},
    {refalrts::icAllocBracket, 0, refalrts::ibCloseBracket, 19},
    {refalrts::icAllocBracket, 0, refalrts::ibOpenBracket, 20},
    {refalrts::icCopyEVar, 21, 5, 0},
    {refalrts::icAllocString, 0, 105, 23},
    {refalrts::icReinitBracket, 0, refalrts::ibCloseBracket, 13},
    {refalrts::icReinitBracket, 0, refalrts::ibOpenBracket, 12},
    {refalrts::icReinitChar, 0, 'e', 0},
    {refalrts::icReinitChar, 0, 'f', 4},
    {refalrts::icReinitBracket, 0, refalrts::ibCloseBracket, 1},
    {refalrts::icLinkBrackets, 20, 1, 0},
    {refalrts::icLinkBrackets, 12, 19, 0},
    {refalrts::icLinkBrackets, 11, 13, 0},
    {refalrts::icLinkBrackets, 7, 8, 0},
    {refalrts::icSetRes, 0, 0, 1},
    {refalrts::icSpliceTile, 17, 24, 0},
    {refalrts::icSpliceTile, 0, 4, 0},
    {refalrts::icSpliceTile, 16, 16, 0},
    {refalrts::icSpliceTile, 14, 15, 0},
    {refalrts::icSpliceTile, 7, 12, 0},
    {refalrts::icReturnResult_NoTrash, 0, 0, 0},
    {refalrts::icOnFailGoTo, +22, 0, 0},
    //(E )(#CmdResetAllocator)
    // </0 & GenCommand/4 (/7 e.Indent#1/5 )/8 (/11 # CmdResetAllocator/13 )/12 >/1
    {refalrts::icIdentTerm, 0, 69, 13},
    {refalrts::icSave, 0, 66, 9},
    {refalrts::icEmpty, 0, 0, 66},
    // closed e.Indent#1 as range 5
    {refalrts::icEmptyResult, 0, 0, 0},
    //TRASH: {REMOVED TILE}  {REMOVED TILE}  {REMOVED TILE}  {REMOVED TILE} 
    //RESULT: Tile{ [[ } Tile{ AsIs: (/7 AsIs: e.Indent#1/5 AsIs: )/8 AsIs: (/11 HalfReuse: )/13 HalfReuse: (/12 } e.Indent#1/5/14 'r'/16 Tile{ HalfReuse: 'e'/0 HalfReuse: 'f'/4 }"alrts::reset_allocator();"/17 Tile{ HalfReuse: )/1 ]] }
    {refalrts::icCopyEVar, 14, 5, 0},
    {refalrts::icAllocChar, 0, 'r', 16},
    {refalrts::icAllocString, 0, 104, 17},
    {refalrts::icReinitBracket, 0, refalrts::ibCloseBracket, 13},
    {refalrts::icReinitBracket, 0, refalrts::ibOpenBracket, 12},
    {refalrts::icReinitChar, 0, 'e', 0},
    {refalrts::icReinitChar, 0, 'f', 4},
    {refalrts::icReinitBracket, 0, refalrts::ibCloseBracket, 1},
    {refalrts::icLinkBrackets, 12, 1, 0},
    {refalrts::icLinkBrackets, 11, 13, 0},
    {refalrts::icLinkBrackets, 7, 8, 0},
    {refalrts::icSetRes, 0, 0, 1},
    {refalrts::icSpliceTile, 17, 18, 0},
    {refalrts::icSpliceTile, 0, 4, 0},
    {refalrts::icSpliceTile, 16, 16, 0},
    {refalrts::icSpliceTile, 14, 15, 0},
    {refalrts::icSpliceTile, 7, 12, 0},
    {refalrts::icReturnResult_NoTrash, 0, 0, 0},
    {refalrts::icOnFailGoTo, +40, 0, 0},
    //(E )(#CmdSetResS )
    // </0 & GenCommand/4 (/7 e.Indent#1/5 )/8 (/11 # CmdSetRes/13 s.Offset#1/14 )/12 >/1
    {refalrts::icIdentTerm, 0, 68, 13},
    // closed e.Indent#1 as range 5
    {refalrts::icSave, 0, 66, 9},
    {refalrts::icsVarLeft, 0, 14, 66},
    {refalrts::icEmpty, 0, 0, 66},
    {refalrts::icEmptyResult, 0, 0, 0},
    //TRASH: {REMOVED TILE}  {REMOVED TILE}  {REMOVED TILE}  {REMOVED TILE}  {REMOVED TILE} 
    //RESULT: Tile{ [[ } (/15 e.Indent#1/5/16 Tile{ AsIs: )/12 HalfReuse: (/1 } e.Indent#1/5/18"refalrts::Iter trash_prev = arg_begin->prev;"/20 )/22 (/23 e.Indent#1/5/24"refalrts::use(trash_prev);"/26 )/28 </29 & Fetch/30 Tile{ AsIs: s.Offset#1/14 } </31 Tile{ HalfReuse: & CreateClosure /0 Reuse: & lambda_GenCommand_0/4 AsIs: (/7 AsIs: e.Indent#1/5 AsIs: )/8 HalfReuse: >/11 HalfReuse: >/13 } Tile{ ]] }
    {refalrts::icAllocBracket, 0, refalrts::ibOpenBracket, 15},
    {refalrts::icCopyEVar, 16, 5, 0},
    {refalrts::icCopyEVar, 18, 5, 0},
    {refalrts::icAllocString, 0, 103, 20},
    {refalrts::icAllocBracket, 0, refalrts::ibCloseBracket, 22},
    {refalrts::icAllocBracket, 0, refalrts::ibOpenBracket, 23},
    {refalrts::icCopyEVar, 24, 5, 0},
    {refalrts::icAllocString, 0, 102, 26},
    {refalrts::icAllocBracket, 0, refalrts::ibCloseBracket, 28},
    {refalrts::icAllocBracket, 0, refalrts::ibOpenCall, 29},
    {refalrts::icAllocFunc, 0, 2, 30},
    {refalrts::icAllocBracket, 0, refalrts::ibOpenCall, 31},
    {refalrts::icReinitBracket, 0, refalrts::ibOpenBracket, 1},
    {refalrts::icReinitFunc, 0, 1, 0},
    {refalrts::icUpdateFunc, 0, 21, 4},
    {refalrts::icReinitBracket, 0, refalrts::ibCloseCall, 11},
    {refalrts::icReinitBracket, 0, refalrts::ibCloseCall, 13},
    {refalrts::icPushStack, 0, 0, 13},
    {refalrts::icPushStack, 0, 0, 29},
    {refalrts::icPushStack, 0, 0, 11},
    {refalrts::icPushStack, 0, 0, 31},
    {refalrts::icLinkBrackets, 7, 8, 0},
    {refalrts::icLinkBrackets, 23, 28, 0},
    {refalrts::icLinkBrackets, 1, 22, 0},
    {refalrts::icLinkBrackets, 15, 12, 0},
    {refalrts::icSetResRightEdge, 0, 0, 0},
    {refalrts::icSpliceTile, 0, 13, 0},
    {refalrts::icSpliceTile, 31, 31, 0},
    {refalrts::icSpliceTile, 14, 14, 0},
    {refalrts::icSpliceTile, 20, 30, 0},
    {refalrts::icSpliceTile, 18, 19, 0},
    {refalrts::icSpliceTile, 12, 1, 0},
    {refalrts::icSpliceTile, 16, 17, 0},
    {refalrts::icSpliceTile, 15, 15, 0},
    {refalrts::icReturnResult_NoTrash, 0, 0, 0},
    {refalrts::icOnFailGoTo, +43, 0, 0},
    //(E )(#CmdCopyVar'e'S S )
    // </0 & GenCommand/4 (/7 e.Indent#1/5 )/8 (/11 # CmdCopyVar/13 'e'/14 s.Target#1/15 s.Sample#1/16 )/12 >/1
    {refalrts::icIdentTerm, 0, 67, 13},
    {refalrts::icSave, 0, 66, 9},
    {refalrts::icCharLeftSave, 14, static_cast<unsigned char>('e'), 66},
    // closed e.Indent#1 as range 5
    {refalrts::icsVarLeft, 0, 15, 66},
    {refalrts::icsVarLeft, 0, 16, 66},
    {refalrts::icEmpty, 0, 0, 66},
    {refalrts::icEmptyResult, 0, 0, 0},
    //TRASH: {REMOVED TILE}  {REMOVED TILE}  {REMOVED TILE}  {REMOVED TILE}  {REMOVED TILE} 
    //RESULT: Tile{ [[ } (/17 e.Indent#1/5/18 )/20 (/21 e.Indent#1/5/22"if (! refalrts::copy_evar("/24 </26 & ContextRange/27 Tile{ AsIs: s.Target#1/15 } >/28", "/29 </31 & ContextRange/32 Tile{ AsIs: s.Sample#1/16 HalfReuse: >/12 HalfReuse: ')'/1 } Tile{ HalfReuse: ')'/0 HalfReuse: )/4 AsIs: (/7 AsIs: e.Indent#1/5 HalfReuse: ' '/8 HalfReuse: ' '/11 HalfReuse: 'r'/13 AsIs: 'e'/14 }"turn refalrts::cNoMemory;"/33 )/35 Tile{ ]] }
    {refalrts::icAllocBracket, 0, refalrts::ibOpenBracket, 17},
    {refalrts::icCopyEVar, 18, 5, 0},
    {refalrts::icAllocBracket, 0, refalrts::ibCloseBracket, 20},
    {refalrts::icAllocBracket, 0, refalrts::ibOpenBracket, 21},
    {refalrts::icCopyEVar, 22, 5, 0},
    {refalrts::icAllocString, 0, 101, 24},
    {refalrts::icAllocBracket, 0, refalrts::ibOpenCall, 26},
    {refalrts::icAllocFunc, 0, 19, 27},
    {refalrts::icAllocBracket, 0, refalrts::ibCloseCall, 28},
    {refalrts::icAllocString, 0, 4, 29},
    {refalrts::icAllocBracket, 0, refalrts::ibOpenCall, 31},
    {refalrts::icAllocFunc, 0, 19, 32},
    {refalrts::icAllocString, 0, 100, 33},
    {refalrts::icAllocBracket, 0, refalrts::ibCloseBracket, 35},
    {refalrts::icReinitBracket, 0, refalrts::ibCloseCall, 12},
    {refalrts::icReinitChar, 0, ')', 1},
    {refalrts::icReinitChar, 0, ')', 0},
    {refalrts::icReinitBracket, 0, refalrts::ibCloseBracket, 4},
    {refalrts::icReinitChar, 0, ' ', 8},
    {refalrts::icReinitChar, 0, ' ', 11},
    {refalrts::icReinitChar, 0, 'r', 13},
    {refalrts::icLinkBrackets, 7, 35, 0},
    {refalrts::icLinkBrackets, 21, 4, 0},
    {refalrts::icPushStack, 0, 0, 12},
    {refalrts::icPushStack, 0, 0, 31},
    {refalrts::icPushStack, 0, 0, 28},
    {refalrts::icPushStack, 0, 0, 26},
    {refalrts::icLinkBrackets, 17, 20, 0},
    {refalrts::icSetResRightEdge, 0, 0, 0},
    {refalrts::icSpliceTile, 33, 35, 0},
    {refalrts::icSpliceTile, 0, 14, 0},
    {refalrts::icSpliceTile, 16, 1, 0},
    {refalrts::icSpliceTile, 28, 32, 0},
    {refalrts::icSpliceTile, 15, 15, 0},
    {refalrts::icSpliceTile, 17, 27, 0},
    {refalrts::icReturnResult_NoTrash, 0, 0, 0},
    {refalrts::icOnFailGoTo, +44, 0, 0},
    //(E )(#CmdCopyVarS S S )
    // </0 & GenCommand/4 (/7 e.Indent#1/5 )/8 (/11 # CmdCopyVar/13 s.Mode#1/14 s.Target#1/15 s.Sample#1/16 )/12 >/1
    {refalrts::icIdentTerm, 0, 67, 13},
    // closed e.Indent#1 as range 5
    {refalrts::icSave, 0, 66, 9},
    {refalrts::icsVarLeft, 0, 14, 66},
    {refalrts::icsVarLeft, 0, 15, 66},
    {refalrts::icsVarLeft, 0, 16, 66},
    {refalrts::icEmpty, 0, 0, 66},
    {refalrts::icEmptyResult, 0, 0, 0},
    //TRASH: {REMOVED TILE}  {REMOVED TILE}  {REMOVED TILE}  {REMOVED TILE}  s.Mode#1/14 {REMOVED TILE}  {REMOVED TILE}  {REMOVED TILE} 
    //RESULT: Tile{ [[ } Tile{ AsIs: (/7 AsIs: e.Indent#1/5 AsIs: )/8 AsIs: (/11 } e.Indent#1/5/17"if ("/19 Tile{ HalfReuse: '!'/13 }" refalrts::copy_stvar("/21 Tile{ AsIs: </0 Reuse: & ContextItem/4 } Tile{ AsIs: s.Target#1/15 } >/23", "/24 </26 & ContextItem/27 Tile{ AsIs: s.Sample#1/16 HalfReuse: >/12 HalfReuse: ')'/1 } ')'/28 )/29 (/30 e.Indent#1/5/31"  return refalrts::cNoMemory;"/33 )/35 Tile{ ]] }
    {refalrts::icCopyEVar, 17, 5, 0},
    {refalrts::icAllocString, 0, 99, 19},
    {refalrts::icAllocString, 0, 98, 21},
    {refalrts::icAllocBracket, 0, refalrts::ibCloseCall, 23},
    {refalrts::icAllocString, 0, 4, 24},
    {refalrts::icAllocBracket, 0, refalrts::ibOpenCall, 26},
    {refalrts::icAllocFunc, 0, 17, 27},
    {refalrts::icAllocChar, 0, ')', 28},
    {refalrts::icAllocBracket, 0, refalrts::ibCloseBracket, 29},
    {refalrts::icAllocBracket, 0, refalrts::ibOpenBracket, 30},
    {refalrts::icCopyEVar, 31, 5, 0},
    {refalrts::icAllocString, 0, 94, 33},
    {refalrts::icAllocBracket, 0, refalrts::ibCloseBracket, 35},
    {refalrts::icReinitChar, 0, '!', 13},
    {refalrts::icUpdateFunc, 0, 17, 4},
    {refalrts::icReinitBracket, 0, refalrts::ibCloseCall, 12},
    {refalrts::icReinitChar, 0, ')', 1},
    {refalrts::icLinkBrackets, 30, 35, 0},
    {refalrts::icLinkBrackets, 11, 29, 0},
    {refalrts::icPushStack, 0, 0, 12},
    {refalrts::icPushStack, 0, 0, 26},
    {refalrts::icPushStack, 0, 0, 23},
    {refalrts::icPushStack, 0, 0, 0},
    {refalrts::icLinkBrackets, 7, 8, 0},
    {refalrts::icSetResRightEdge, 0, 0, 0},
    {refalrts::icSpliceTile, 28, 35, 0},
    {refalrts::icSpliceTile, 16, 1, 0},
    {refalrts::icSpliceTile, 23, 27, 0},
    {refalrts::icSpliceTile, 15, 15, 0},
    {refalrts::icSpliceTile, 0, 4, 0},
    {refalrts::icSpliceTile, 21, 22, 0},
    {refalrts::icSpliceTile, 13, 13, 0},
    {refalrts::icSpliceTile, 19, 20, 0},
    {refalrts::icSpliceTile, 17, 18, 0},
    {refalrts::icSpliceTile, 7, 11, 0},
    {refalrts::icTrashLeftEdge, 0, 0, 0},
    {refalrts::icReturnResult_NoTrash, 0, 0, 0},
    {refalrts::icOnFailGoTo, +37, 0, 0},
    //(E )(#CmdReinitSVarS S )
    // </0 & GenCommand/4 (/7 e.Indent#1/5 )/8 (/11 # CmdReinitSVar/13 s.Offset#1/14 s.Sample#1/15 )/12 >/1
    {refalrts::icIdentTerm, 0, 66, 13},
    // closed e.Indent#1 as range 5
    {refalrts::icSave, 0, 66, 9},
    {refalrts::icsVarLeft, 0, 14, 66},
    {refalrts::icsVarLeft, 0, 15, 66},
    {refalrts::icEmpty, 0, 0, 66},
    {refalrts::icEmptyResult, 0, 0, 0},
    //TRASH: {REMOVED TILE}  {REMOVED TILE}  {REMOVED TILE}  {REMOVED TILE}  {REMOVED TILE}  {REMOVED TILE}  {REMOVED TILE} 
    //RESULT: Tile{ [[ } Tile{ AsIs: (/7 AsIs: e.Indent#1/5 AsIs: )/8 AsIs: (/11 } e.Indent#1/5/16"ref"/18 Tile{ HalfReuse: 'a'/13 }"lrts::reinit_svar( "/20 Tile{ AsIs: </0 Reuse: & ContextItem/4 } Tile{ AsIs: s.Offset#1/14 } >/22", "/23 </25 & ContextItem/26 Tile{ AsIs: s.Sample#1/15 HalfReuse: >/12 HalfReuse: ' '/1 }");"/27 )/29 Tile{ ]] }
    {refalrts::icCopyEVar, 16, 5, 0},
    {refalrts::icAllocString, 0, 90, 18},
    {refalrts::icAllocString, 0, 97, 20},
    {refalrts::icAllocBracket, 0, refalrts::ibCloseCall, 22},
    {refalrts::icAllocString, 0, 4, 23},
    {refalrts::icAllocBracket, 0, refalrts::ibOpenCall, 25},
    {refalrts::icAllocFunc, 0, 17, 26},
    {refalrts::icAllocString, 0, 55, 27},
    {refalrts::icAllocBracket, 0, refalrts::ibCloseBracket, 29},
    {refalrts::icReinitChar, 0, 'a', 13},
    {refalrts::icUpdateFunc, 0, 17, 4},
    {refalrts::icReinitBracket, 0, refalrts::ibCloseCall, 12},
    {refalrts::icReinitChar, 0, ' ', 1},
    {refalrts::icLinkBrackets, 11, 29, 0},
    {refalrts::icPushStack, 0, 0, 12},
    {refalrts::icPushStack, 0, 0, 25},
    {refalrts::icPushStack, 0, 0, 22},
    {refalrts::icPushStack, 0, 0, 0},
    {refalrts::icLinkBrackets, 7, 8, 0},
    {refalrts::icSetResRightEdge, 0, 0, 0},
    {refalrts::icSpliceTile, 27, 29, 0},
    {refalrts::icSpliceTile, 15, 1, 0},
    {refalrts::icSpliceTile, 22, 26, 0},
    {refalrts::icSpliceTile, 14, 14, 0},
    {refalrts::icSpliceTile, 0, 4, 0},
    {refalrts::icSpliceTile, 20, 21, 0},
    {refalrts::icSpliceTile, 13, 13, 0},
    {refalrts::icSpliceTile, 18, 19, 0},
    {refalrts::icSpliceTile, 16, 17, 0},
    {refalrts::icSpliceTile, 7, 11, 0},
    {refalrts::icReturnResult_NoTrash, 0, 0, 0},
    {refalrts::icOnFailGoTo, +50, 0, 0},
    //(E )(#CmdAllocateElemS #ElStringE )
    // </0 & GenCommand/4 (/7 e.Indent#1/5 )/8 (/11 # CmdAllocateElem/13 s.ElemNumber#1/14 # ElString/15 e.String#1/9 )/12 >/1
    {refalrts::icIdentTerm, 0, 64, 13},
    // closed e.Indent#1 as range 5
    {refalrts::icSave, 0, 66, 9},
    {refalrts::icsVarLeft, 0, 14, 66},
    {refalrts::icIdentLeftSave, 15, 65, 66},
    // closed e.String#1 as range 66(9)
    {refalrts::icEmptyResult, 0, 0, 0},
    //TRASH: {REMOVED TILE}  {REMOVED TILE}  {REMOVED TILE}  {REMOVED TILE}  {REMOVED TILE}  {REMOVED TILE} 
    //RESULT: Tile{ [[ } Tile{ AsIs: (/7 AsIs: e.Indent#1/5 AsIs: )/8 AsIs: (/11 } e.Indent#1/5/16"if( ! refalrts::alloc_chars( "/18 Tile{ AsIs: </0 Reuse: & ContextItem/4 } s.ElemNumber#1/14/20 >/21", "/22 </24 & ContextItem/25 </26 Tile{ HalfReuse: & Inc/13 AsIs: s.ElemNumber#1/14 } >/27 >/28", "/29 </31 Tile{ HalfReuse: & PrintString/15 AsIs: e.String#1/66(9) HalfReuse: >/12 HalfReuse: ' '/1 }") )"/32 )/34 (/35 e.Indent#1/5/36"  return refalrts::cNoMemory;"/38 )/40 Tile{ ]] }
    {refalrts::icCopyEVar, 16, 5, 0},
    {refalrts::icAllocString, 0, 96, 18},
    {refalrts::icCopySTVar, 20, 14, 0},
    {refalrts::icAllocBracket, 0, refalrts::ibCloseCall, 21},
    {refalrts::icAllocString, 0, 4, 22},
    {refalrts::icAllocBracket, 0, refalrts::ibOpenCall, 24},
    {refalrts::icAllocFunc, 0, 17, 25},
    {refalrts::icAllocBracket, 0, refalrts::ibOpenCall, 26},
    {refalrts::icAllocBracket, 0, refalrts::ibCloseCall, 27},
    {refalrts::icAllocBracket, 0, refalrts::ibCloseCall, 28},
    {refalrts::icAllocString, 0, 4, 29},
    {refalrts::icAllocBracket, 0, refalrts::ibOpenCall, 31},
    {refalrts::icAllocString, 0, 95, 32},
    {refalrts::icAllocBracket, 0, refalrts::ibCloseBracket, 34},
    {refalrts::icAllocBracket, 0, refalrts::ibOpenBracket, 35},
    {refalrts::icCopyEVar, 36, 5, 0},
    {refalrts::icAllocString, 0, 94, 38},
    {refalrts::icAllocBracket, 0, refalrts::ibCloseBracket, 40},
    {refalrts::icUpdateFunc, 0, 17, 4},
    {refalrts::icReinitFunc, 0, 18, 13},
    {refalrts::icReinitFunc, 0, 8, 15},
    {refalrts::icReinitBracket, 0, refalrts::ibCloseCall, 12},
    {refalrts::icReinitChar, 0, ' ', 1},
    {refalrts::icLinkBrackets, 35, 40, 0},
    {refalrts::icLinkBrackets, 11, 34, 0},
    {refalrts::icPushStack, 0, 0, 12},
    {refalrts::icPushStack, 0, 0, 31},
    {refalrts::icPushStack, 0, 0, 28},
    {refalrts::icPushStack, 0, 0, 24},
    {refalrts::icPushStack, 0, 0, 27},
    {refalrts::icPushStack, 0, 0, 26},
    {refalrts::icPushStack, 0, 0, 21},
    {refalrts::icPushStack, 0, 0, 0},
    {refalrts::icLinkBrackets, 7, 8, 0},
    {refalrts::icSetResRightEdge, 0, 0, 0},
    {refalrts::icSpliceTile, 32, 40, 0},
    {refalrts::icSpliceTile, 15, 1, 0},
    {refalrts::icSpliceTile, 27, 31, 0},
    {refalrts::icSpliceTile, 13, 14, 0},
    {refalrts::icSpliceTile, 20, 26, 0},
    {refalrts::icSpliceTile, 0, 4, 0},
    {refalrts::icSpliceTile, 18, 19, 0},
    {refalrts::icSpliceTile, 16, 17, 0},
    {refalrts::icSpliceTile, 7, 11, 0},
    {refalrts::icReturnResult_NoTrash, 0, 0, 0},
    {refalrts::icOnFailGoTo, +25, 0, 0},
    //(E )(#CmdAllocateElemS E )
    // </0 & GenCommand/4 (/7 e.Indent#1/5 )/8 (/11 # CmdAllocateElem/13 s.ElemNumber#1/14 e.ElemInfo#1/9 )/12 >/1
    {refalrts::icIdentTerm, 0, 64, 13},
    // closed e.Indent#1 as range 5
    {refalrts::icSave, 0, 66, 9},
    {refalrts::icsVarLeft, 0, 14, 66},
    // closed e.ElemInfo#1 as range 66(9)
    {refalrts::icEmptyResult, 0, 0, 0},
    //TRASH: {REMOVED TILE}  {REMOVED TILE}  {REMOVED TILE}  {REMOVED TILE}  {REMOVED TILE} 
    //RESULT: Tile{ [[ } (/15 e.Indent#1/5/16 Tile{ HalfReuse: )/1 } Tile{ AsIs: </0 Reuse: & PrintCreateElem/4 AsIs: (/7 AsIs: e.Indent#1/5 AsIs: )/8 AsIs: (/11 HalfReuse: 'a'/13 }"lloc"/18 )/20 Tile{ AsIs: s.ElemNumber#1/14 AsIs: e.ElemInfo#1/66(9) HalfReuse: >/12 } Tile{ ]] }
    {refalrts::icAllocBracket, 0, refalrts::ibOpenBracket, 15},
    {refalrts::icCopyEVar, 16, 5, 0},
    {refalrts::icAllocString, 0, 93, 18},
    {refalrts::icAllocBracket, 0, refalrts::ibCloseBracket, 20},
    {refalrts::icReinitBracket, 0, refalrts::ibCloseBracket, 1},
    {refalrts::icUpdateFunc, 0, 20, 4},
    {refalrts::icReinitChar, 0, 'a', 13},
    {refalrts::icReinitBracket, 0, refalrts::ibCloseCall, 12},
    {refalrts::icPushStack, 0, 0, 12},
    {refalrts::icPushStack, 0, 0, 0},
    {refalrts::icLinkBrackets, 11, 20, 0},
    {refalrts::icLinkBrackets, 7, 8, 0},
    {refalrts::icLinkBrackets, 15, 1, 0},
    {refalrts::icSetResRightEdge, 0, 0, 0},
    {refalrts::icSpliceTile, 14, 12, 0},
    {refalrts::icSpliceTile, 18, 20, 0},
    {refalrts::icSpliceTile, 0, 13, 0},
    {refalrts::icSpliceTile, 1, 1, 0},
    {refalrts::icSpliceTile, 16, 17, 0},
    {refalrts::icSpliceTile, 15, 15, 0},
    {refalrts::icReturnResult_NoTrash, 0, 0, 0},
    {refalrts::icOnFailGoTo, +25, 0, 0},
    //(E )(#CmdReinitElemS E )
    // </0 & GenCommand/4 (/7 e.Indent#1/5 )/8 (/11 # CmdReinitElem/13 s.ElemNumber#1/14 e.ElemInfo#1/9 )/12 >/1
    {refalrts::icIdentTerm, 0, 63, 13},
    // closed e.Indent#1 as range 5
    {refalrts::icSave, 0, 66, 9},
    {refalrts::icsVarLeft, 0, 14, 66},
    // closed e.ElemInfo#1 as range 66(9)
    {refalrts::icEmptyResult, 0, 0, 0},
    //TRASH: {REMOVED TILE}  {REMOVED TILE}  {REMOVED TILE}  {REMOVED TILE}  {REMOVED TILE} 
    //RESULT: Tile{ [[ } (/15 e.Indent#1/5/16 Tile{ HalfReuse: )/1 } Tile{ AsIs: </0 Reuse: & PrintCreateElem/4 AsIs: (/7 AsIs: e.Indent#1/5 AsIs: )/8 AsIs: (/11 HalfReuse: 'r'/13 }"einit"/18 )/20 Tile{ AsIs: s.ElemNumber#1/14 AsIs: e.ElemInfo#1/66(9) HalfReuse: >/12 } Tile{ ]] }
    {refalrts::icAllocBracket, 0, refalrts::ibOpenBracket, 15},
    {refalrts::icCopyEVar, 16, 5, 0},
    {refalrts::icAllocString, 0, 92, 18},
    {refalrts::icAllocBracket, 0, refalrts::ibCloseBracket, 20},
    {refalrts::icReinitBracket, 0, refalrts::ibCloseBracket, 1},
    {refalrts::icUpdateFunc, 0, 20, 4},
    {refalrts::icReinitChar, 0, 'r', 13},
    {refalrts::icReinitBracket, 0, refalrts::ibCloseCall, 12},
    {refalrts::icPushStack, 0, 0, 12},
    {refalrts::icPushStack, 0, 0, 0},
    {refalrts::icLinkBrackets, 11, 20, 0},
    {refalrts::icLinkBrackets, 7, 8, 0},
    {refalrts::icLinkBrackets, 15, 1, 0},
    {refalrts::icSetResRightEdge, 0, 0, 0},
    {refalrts::icSpliceTile, 14, 12, 0},
    {refalrts::icSpliceTile, 18, 20, 0},
    {refalrts::icSpliceTile, 0, 13, 0},
    {refalrts::icSpliceTile, 1, 1, 0},
    {refalrts::icSpliceTile, 16, 17, 0},
    {refalrts::icSpliceTile, 15, 15, 0},
    {refalrts::icReturnResult_NoTrash, 0, 0, 0},
    {refalrts::icOnFailGoTo, +25, 0, 0},
    //(E )(#CmdUpdateElemS E )
    // </0 & GenCommand/4 (/7 e.Indent#1/5 )/8 (/11 # CmdUpdateElem/13 s.ElemNumber#1/14 e.ElemInfo#1/9 )/12 >/1
    {refalrts::icIdentTerm, 0, 62, 13},
    // closed e.Indent#1 as range 5
    {refalrts::icSave, 0, 66, 9},
    {refalrts::icsVarLeft, 0, 14, 66},
    // closed e.ElemInfo#1 as range 66(9)
    {refalrts::icEmptyResult, 0, 0, 0},
    //TRASH: {REMOVED TILE}  {REMOVED TILE}  {REMOVED TILE}  {REMOVED TILE}  {REMOVED TILE} 
    //RESULT: Tile{ [[ } (/15 e.Indent#1/5/16 Tile{ HalfReuse: )/1 } Tile{ AsIs: </0 Reuse: & PrintCreateElem/4 AsIs: (/7 AsIs: e.Indent#1/5 AsIs: )/8 AsIs: (/11 HalfReuse: 'u'/13 }"pdate"/18 )/20 Tile{ AsIs: s.ElemNumber#1/14 AsIs: e.ElemInfo#1/66(9) HalfReuse: >/12 } Tile{ ]] }
    {refalrts::icAllocBracket, 0, refalrts::ibOpenBracket, 15},
    {refalrts::icCopyEVar, 16, 5, 0},
    {refalrts::icAllocString, 0, 91, 18},
    {refalrts::icAllocBracket, 0, refalrts::ibCloseBracket, 20},
    {refalrts::icReinitBracket, 0, refalrts::ibCloseBracket, 1},
    {refalrts::icUpdateFunc, 0, 20, 4},
    {refalrts::icReinitChar, 0, 'u', 13},
    {refalrts::icReinitBracket, 0, refalrts::ibCloseCall, 12},
    {refalrts::icPushStack, 0, 0, 12},
    {refalrts::icPushStack, 0, 0, 0},
    {refalrts::icLinkBrackets, 11, 20, 0},
    {refalrts::icLinkBrackets, 7, 8, 0},
    {refalrts::icLinkBrackets, 15, 1, 0},
    {refalrts::icSetResRightEdge, 0, 0, 0},
    {refalrts::icSpliceTile, 14, 12, 0},
    {refalrts::icSpliceTile, 18, 20, 0},
    {refalrts::icSpliceTile, 0, 13, 0},
    {refalrts::icSpliceTile, 1, 1, 0},
    {refalrts::icSpliceTile, 16, 17, 0},
    {refalrts::icSpliceTile, 15, 15, 0},
    {refalrts::icReturnResult_NoTrash, 0, 0, 0},
    {refalrts::icOnFailGoTo, +37, 0, 0},
    //(E )(#CmdLinkBracketsS S )
    // </0 & GenCommand/4 (/7 e.Indent#1/5 )/8 (/11 # CmdLinkBrackets/13 s.Left#1/14 s.Right#1/15 )/12 >/1
    {refalrts::icIdentTerm, 0, 61, 13},
    // closed e.Indent#1 as range 5
    {refalrts::icSave, 0, 66, 9},
    {refalrts::icsVarLeft, 0, 14, 66},
    {refalrts::icsVarLeft, 0, 15, 66},
    {refalrts::icEmpty, 0, 0, 66},
    {refalrts::icEmptyResult, 0, 0, 0},
    //TRASH: {REMOVED TILE}  {REMOVED TILE}  {REMOVED TILE}  {REMOVED TILE}  {REMOVED TILE}  {REMOVED TILE}  {REMOVED TILE} 
    //RESULT: Tile{ [[ } Tile{ AsIs: (/7 AsIs: e.Indent#1/5 AsIs: )/8 AsIs: (/11 } e.Indent#1/5/16"ref"/18 Tile{ HalfReuse: 'a'/13 }"lrts::link_brackets( "/20 Tile{ AsIs: </0 Reuse: & ContextItem/4 } Tile{ AsIs: s.Left#1/14 } >/22", "/23 </25 & ContextItem/26 Tile{ AsIs: s.Right#1/15 HalfReuse: >/12 HalfReuse: ' '/1 }");"/27 )/29 Tile{ ]] }
    {refalrts::icCopyEVar, 16, 5, 0},
    {refalrts::icAllocString, 0, 90, 18},
    {refalrts::icAllocString, 0, 89, 20},
    {refalrts::icAllocBracket, 0, refalrts::ibCloseCall, 22},
    {refalrts::icAllocString, 0, 4, 23},
    {refalrts::icAllocBracket, 0, refalrts::ibOpenCall, 25},
    {refalrts::icAllocFunc, 0, 17, 26},
    {refalrts::icAllocString, 0, 55, 27},
    {refalrts::icAllocBracket, 0, refalrts::ibCloseBracket, 29},
    {refalrts::icReinitChar, 0, 'a', 13},
    {refalrts::icUpdateFunc, 0, 17, 4},
    {refalrts::icReinitBracket, 0, refalrts::ibCloseCall, 12},
    {refalrts::icReinitChar, 0, ' ', 1},
    {refalrts::icLinkBrackets, 11, 29, 0},
    {refalrts::icPushStack, 0, 0, 12},
    {refalrts::icPushStack, 0, 0, 25},
    {refalrts::icPushStack, 0, 0, 22},
    {refalrts::icPushStack, 0, 0, 0},
    {refalrts::icLinkBrackets, 7, 8, 0},
    {refalrts::icSetResRightEdge, 0, 0, 0},
    {refalrts::icSpliceTile, 27, 29, 0},
    {refalrts::icSpliceTile, 15, 1, 0},
    {refalrts::icSpliceTile, 22, 26, 0},
    {refalrts::icSpliceTile, 14, 14, 0},
    {refalrts::icSpliceTile, 0, 4, 0},
    {refalrts::icSpliceTile, 20, 21, 0},
    {refalrts::icSpliceTile, 13, 13, 0},
    {refalrts::icSpliceTile, 18, 19, 0},
    {refalrts::icSpliceTile, 16, 17, 0},
    {refalrts::icSpliceTile, 7, 11, 0},
    {refalrts::icReturnResult_NoTrash, 0, 0, 0},
    {refalrts::icOnFailGoTo, +26, 0, 0},
    //(E )(#CmdPushStackS )
    // </0 & GenCommand/4 (/7 e.Indent#1/5 )/8 (/11 # CmdPushStack/13 s.ElemNumber#1/14 )/12 >/1
    {refalrts::icIdentTerm, 0, 60, 13},
    // closed e.Indent#1 as range 5
    {refalrts::icSave, 0, 66, 9},
    {refalrts::icsVarLeft, 0, 14, 66},
    {refalrts::icEmpty, 0, 0, 66},
    {refalrts::icEmptyResult, 0, 0, 0},
    //TRASH: {REMOVED TILE}  {REMOVED TILE}  {REMOVED TILE}  {REMOVED TILE}  {REMOVED TILE}  {REMOVED TILE} 
    //RESULT: Tile{ [[ } Tile{ AsIs: (/7 AsIs: e.Indent#1/5 AsIs: )/8 AsIs: (/11 } e.Indent#1/5/15 Tile{ HalfReuse: 'r'/4 }"efalrts::push_stack( "/17 Tile{ AsIs: </0 } Tile{ HalfReuse: & ContextItem/13 AsIs: s.ElemNumber#1/14 HalfReuse: >/12 HalfReuse: ' '/1 }");"/19 )/21 Tile{ ]] }
    {refalrts::icCopyEVar, 15, 5, 0},
    {refalrts::icAllocString, 0, 88, 17},
    {refalrts::icAllocString, 0, 55, 19},
    {refalrts::icAllocBracket, 0, refalrts::ibCloseBracket, 21},
    {refalrts::icReinitChar, 0, 'r', 4},
    {refalrts::icReinitFunc, 0, 17, 13},
    {refalrts::icReinitBracket, 0, refalrts::ibCloseCall, 12},
    {refalrts::icReinitChar, 0, ' ', 1},
    {refalrts::icLinkBrackets, 11, 21, 0},
    {refalrts::icPushStack, 0, 0, 12},
    {refalrts::icPushStack, 0, 0, 0},
    {refalrts::icLinkBrackets, 7, 8, 0},
    {refalrts::icSetResRightEdge, 0, 0, 0},
    {refalrts::icSpliceTile, 19, 21, 0},
    {refalrts::icSpliceTile, 13, 1, 0},
    {refalrts::icSpliceTile, 0, 0, 0},
    {refalrts::icSpliceTile, 17, 18, 0},
    {refalrts::icSpliceTile, 4, 4, 0},
    {refalrts::icSpliceTile, 15, 16, 0},
    {refalrts::icSpliceTile, 7, 11, 0},
    {refalrts::icReturnResult_NoTrash, 0, 0, 0},
    {refalrts::icOnFailGoTo, +26, 0, 0},
    //(E )(#CmdInsertElemS )
    // </0 & GenCommand/4 (/7 e.Indent#1/5 )/8 (/11 # CmdInsertElem/13 s.ElemNumber#1/14 )/12 >/1
    {refalrts::icIdentTerm, 0, 59, 13},
    // closed e.Indent#1 as range 5
    {refalrts::icSave, 0, 66, 9},
    {refalrts::icsVarLeft, 0, 14, 66},
    {refalrts::icEmpty, 0, 0, 66},
    {refalrts::icEmptyResult, 0, 0, 0},
    //TRASH: {REMOVED TILE}  {REMOVED TILE}  {REMOVED TILE}  {REMOVED TILE}  {REMOVED TILE}  {REMOVED TILE} 
    //RESULT: Tile{ [[ } Tile{ AsIs: (/7 AsIs: e.Indent#1/5 AsIs: )/8 AsIs: (/11 } e.Indent#1/5/15 Tile{ HalfReuse: 'r'/4 }"es = refalrts::splice_elem( res, "/17 Tile{ AsIs: </0 } Tile{ HalfReuse: & ContextItem/13 AsIs: s.ElemNumber#1/14 HalfReuse: >/12 HalfReuse: ' '/1 }");"/19 )/21 Tile{ ]] }
    {refalrts::icCopyEVar, 15, 5, 0},
    {refalrts::icAllocString, 0, 87, 17},
    {refalrts::icAllocString, 0, 55, 19},
    {refalrts::icAllocBracket, 0, refalrts::ibCloseBracket, 21},
    {refalrts::icReinitChar, 0, 'r', 4},
    {refalrts::icReinitFunc, 0, 17, 13},
    {refalrts::icReinitBracket, 0, refalrts::ibCloseCall, 12},
    {refalrts::icReinitChar, 0, ' ', 1},
    {refalrts::icLinkBrackets, 11, 21, 0},
    {refalrts::icPushStack, 0, 0, 12},
    {refalrts::icPushStack, 0, 0, 0},
    {refalrts::icLinkBrackets, 7, 8, 0},
    {refalrts::icSetResRightEdge, 0, 0, 0},
    {refalrts::icSpliceTile, 19, 21, 0},
    {refalrts::icSpliceTile, 13, 1, 0},
    {refalrts::icSpliceTile, 0, 0, 0},
    {refalrts::icSpliceTile, 17, 18, 0},
    {refalrts::icSpliceTile, 4, 4, 0},
    {refalrts::icSpliceTile, 15, 16, 0},
    {refalrts::icSpliceTile, 7, 11, 0},
    {refalrts::icReturnResult_NoTrash, 0, 0, 0},
    {refalrts::icOnFailGoTo, +30, 0, 0},
    //(E )(#CmdInsertVar'e'S )
    // </0 & GenCommand/4 (/7 e.Indent#1/5 )/8 (/11 # CmdInsertVar/13 'e'/14 s.Number#1/15 )/12 >/1
    {refalrts::icIdentTerm, 0, 58, 13},
    {refalrts::icSave, 0, 66, 9},
    {refalrts::icCharLeftSave, 14, static_cast<unsigned char>('e'), 66},
    // closed e.Indent#1 as range 5
    {refalrts::icsVarLeft, 0, 15, 66},
    {refalrts::icEmpty, 0, 0, 66},
    {refalrts::icEmptyResult, 0, 0, 0},
    //TRASH: {REMOVED TILE}  {REMOVED TILE}  {REMOVED TILE}  {REMOVED TILE}  {REMOVED TILE} 
    //RESULT: Tile{ [[ } Tile{ AsIs: (/7 AsIs: e.Indent#1/5 AsIs: )/8 AsIs: (/11 } e.Indent#1/5/16 'r'/18 Tile{ HalfReuse: 'e'/0 HalfReuse: 's'/4 }" = refalrts::splice_evar( res, "/19 Tile{ HalfReuse: </13 HalfReuse: & ContextRange/14 AsIs: s.Number#1/15 HalfReuse: >/12 HalfReuse: ' '/1 }");"/21 )/23 Tile{ ]] }
    {refalrts::icCopyEVar, 16, 5, 0},
    {refalrts::icAllocChar, 0, 'r', 18},
    {refalrts::icAllocString, 0, 86, 19},
    {refalrts::icAllocString, 0, 55, 21},
    {refalrts::icAllocBracket, 0, refalrts::ibCloseBracket, 23},
    {refalrts::icReinitChar, 0, 'e', 0},
    {refalrts::icReinitChar, 0, 's', 4},
    {refalrts::icReinitBracket, 0, refalrts::ibOpenCall, 13},
    {refalrts::icReinitFunc, 0, 19, 14},
    {refalrts::icReinitBracket, 0, refalrts::ibCloseCall, 12},
    {refalrts::icReinitChar, 0, ' ', 1},
    {refalrts::icLinkBrackets, 11, 23, 0},
    {refalrts::icPushStack, 0, 0, 12},
    {refalrts::icPushStack, 0, 0, 13},
    {refalrts::icLinkBrackets, 7, 8, 0},
    {refalrts::icSetResRightEdge, 0, 0, 0},
    {refalrts::icSpliceTile, 21, 23, 0},
    {refalrts::icSpliceTile, 13, 1, 0},
    {refalrts::icSpliceTile, 19, 20, 0},
    {refalrts::icSpliceTile, 0, 4, 0},
    {refalrts::icSpliceTile, 18, 18, 0},
    {refalrts::icSpliceTile, 16, 17, 0},
    {refalrts::icSpliceTile, 7, 11, 0},
    {refalrts::icReturnResult_NoTrash, 0, 0, 0},
    {refalrts::icOnFailGoTo, +30, 0, 0},
    //(E )(#CmdInsertVarS S )
    // </0 & GenCommand/4 (/7 e.Indent#1/5 )/8 (/11 # CmdInsertVar/13 s.Mode#1/14 s.Number#1/15 )/12 >/1
    {refalrts::icIdentTerm, 0, 58, 13},
    // closed e.Indent#1 as range 5
    {refalrts::icSave, 0, 66, 9},
    {refalrts::icsVarLeft, 0, 14, 66},
    {refalrts::icsVarLeft, 0, 15, 66},
    {refalrts::icEmpty, 0, 0, 66},
    {refalrts::icEmptyResult, 0, 0, 0},
    //TRASH: {REMOVED TILE}  {REMOVED TILE}  {REMOVED TILE}  {REMOVED TILE}  s.Mode#1/14 {REMOVED TILE}  {REMOVED TILE} 
    //RESULT: Tile{ [[ } Tile{ AsIs: (/7 AsIs: e.Indent#1/5 AsIs: )/8 AsIs: (/11 } e.Indent#1/5/16"res"/18 Tile{ HalfReuse: ' '/13 }"= refalrts::splice_stvar( res, "/20 Tile{ AsIs: </0 Reuse: & ContextItem/4 } Tile{ AsIs: s.Number#1/15 HalfReuse: >/12 HalfReuse: ' '/1 }");"/22 )/24 Tile{ ]] }
    {refalrts::icCopyEVar, 16, 5, 0},
    {refalrts::icAllocString, 0, 82, 18},
    {refalrts::icAllocString, 0, 85, 20},
    {refalrts::icAllocString, 0, 55, 22},
    {refalrts::icAllocBracket, 0, refalrts::ibCloseBracket, 24},
    {refalrts::icReinitChar, 0, ' ', 13},
    {refalrts::icUpdateFunc, 0, 17, 4},
    {refalrts::icReinitBracket, 0, refalrts::ibCloseCall, 12},
    {refalrts::icReinitChar, 0, ' ', 1},
    {refalrts::icLinkBrackets, 11, 24, 0},
    {refalrts::icPushStack, 0, 0, 12},
    {refalrts::icPushStack, 0, 0, 0},
    {refalrts::icLinkBrackets, 7, 8, 0},
    {refalrts::icSetResRightEdge, 0, 0, 0},
    {refalrts::icSpliceTile, 22, 24, 0},
    {refalrts::icSpliceTile, 15, 1, 0},
    {refalrts::icSpliceTile, 0, 4, 0},
    {refalrts::icSpliceTile, 20, 21, 0},
    {refalrts::icSpliceTile, 13, 13, 0},
    {refalrts::icSpliceTile, 18, 19, 0},
    {refalrts::icSpliceTile, 16, 17, 0},
    {refalrts::icSpliceTile, 7, 11, 0},
    {refalrts::icTrashLeftEdge, 0, 0, 0},
    {refalrts::icReturnResult_NoTrash, 0, 0, 0},
    {refalrts::icOnFailGoTo, +35, 0, 0},
    //(E )(#CmdInsertRangeS )
    // </0 & GenCommand/4 (/7 e.Indent#1/5 )/8 (/11 # CmdInsertRange/13 s.Number#1/14 )/12 >/1
    {refalrts::icIdentTerm, 0, 57, 13},
    // closed e.Indent#1 as range 5
    {refalrts::icSave, 0, 66, 9},
    {refalrts::icsVarLeft, 0, 14, 66},
    {refalrts::icEmpty, 0, 0, 66},
    {refalrts::icEmptyResult, 0, 0, 0},
    //TRASH: {REMOVED TILE}  {REMOVED TILE}  {REMOVED TILE}  {REMOVED TILE}  {REMOVED TILE} 
    //RESULT: Tile{ [[ } Tile{ AsIs: (/7 AsIs: e.Indent#1/5 AsIs: )/8 AsIs: (/11 } e.Indent#1/5/15"res = refalrts::splice_evar( res, "/17 Tile{ AsIs: </0 Reuse: & ContextItem/4 } s.Number#1/14/19 >/20", "/21 </23 & ContextItem/24 </25 Tile{ HalfReuse: & Inc/13 AsIs: s.Number#1/14 HalfReuse: >/12 AsIs: >/1 }" );"/26 )/28 Tile{ ]] }
    {refalrts::icCopyEVar, 15, 5, 0},
    {refalrts::icAllocString, 0, 84, 17},
    {refalrts::icCopySTVar, 19, 14, 0},
    {refalrts::icAllocBracket, 0, refalrts::ibCloseCall, 20},
    {refalrts::icAllocString, 0, 4, 21},
    {refalrts::icAllocBracket, 0, refalrts::ibOpenCall, 23},
    {refalrts::icAllocFunc, 0, 17, 24},
    {refalrts::icAllocBracket, 0, refalrts::ibOpenCall, 25},
    {refalrts::icAllocString, 0, 83, 26},
    {refalrts::icAllocBracket, 0, refalrts::ibCloseBracket, 28},
    {refalrts::icUpdateFunc, 0, 17, 4},
    {refalrts::icReinitFunc, 0, 18, 13},
    {refalrts::icReinitBracket, 0, refalrts::ibCloseCall, 12},
    {refalrts::icLinkBrackets, 11, 28, 0},
    {refalrts::icPushStack, 0, 0, 1},
    {refalrts::icPushStack, 0, 0, 23},
    {refalrts::icPushStack, 0, 0, 12},
    {refalrts::icPushStack, 0, 0, 25},
    {refalrts::icPushStack, 0, 0, 20},
    {refalrts::icPushStack, 0, 0, 0},
    {refalrts::icLinkBrackets, 7, 8, 0},
    {refalrts::icSetResRightEdge, 0, 0, 0},
    {refalrts::icSpliceTile, 26, 28, 0},
    {refalrts::icSpliceTile, 13, 1, 0},
    {refalrts::icSpliceTile, 19, 25, 0},
    {refalrts::icSpliceTile, 0, 4, 0},
    {refalrts::icSpliceTile, 17, 18, 0},
    {refalrts::icSpliceTile, 15, 16, 0},
    {refalrts::icSpliceTile, 7, 11, 0},
    {refalrts::icReturnResult_NoTrash, 0, 0, 0},
    {refalrts::icOnFailGoTo, +37, 0, 0},
    //(E )(#CmdInsertTileS S )
    // </0 & GenCommand/4 (/7 e.Indent#1/5 )/8 (/11 # CmdInsertTile/13 s.BeginOffset#1/14 s.EndOffset#1/15 )/12 >/1
    {refalrts::icIdentTerm, 0, 56, 13},
    // closed e.Indent#1 as range 5
    {refalrts::icSave, 0, 66, 9},
    {refalrts::icsVarLeft, 0, 14, 66},
    {refalrts::icsVarLeft, 0, 15, 66},
    {refalrts::icEmpty, 0, 0, 66},
    {refalrts::icEmptyResult, 0, 0, 0},
    //TRASH: {REMOVED TILE}  {REMOVED TILE}  {REMOVED TILE}  {REMOVED TILE}  {REMOVED TILE}  {REMOVED TILE}  {REMOVED TILE} 
    //RESULT: Tile{ [[ } Tile{ AsIs: (/7 AsIs: e.Indent#1/5 AsIs: )/8 AsIs: (/11 } e.Indent#1/5/16"res"/18 Tile{ HalfReuse: ' '/13 }"= refalrts::splice_evar( res, "/20 Tile{ AsIs: </0 Reuse: & ContextItem/4 } Tile{ AsIs: s.BeginOffset#1/14 } >/22", "/23 </25 & ContextItem/26 Tile{ AsIs: s.EndOffset#1/15 HalfReuse: >/12 HalfReuse: ' '/1 }");"/27 )/29 Tile{ ]] }
    {refalrts::icCopyEVar, 16, 5, 0},
    {refalrts::icAllocString, 0, 82, 18},
    {refalrts::icAllocString, 0, 81, 20},
    {refalrts::icAllocBracket, 0, refalrts::ibCloseCall, 22},
    {refalrts::icAllocString, 0, 4, 23},
    {refalrts::icAllocBracket, 0, refalrts::ibOpenCall, 25},
    {refalrts::icAllocFunc, 0, 17, 26},
    {refalrts::icAllocString, 0, 55, 27},
    {refalrts::icAllocBracket, 0, refalrts::ibCloseBracket, 29},
    {refalrts::icReinitChar, 0, ' ', 13},
    {refalrts::icUpdateFunc, 0, 17, 4},
    {refalrts::icReinitBracket, 0, refalrts::ibCloseCall, 12},
    {refalrts::icReinitChar, 0, ' ', 1},
    {refalrts::icLinkBrackets, 11, 29, 0},
    {refalrts::icPushStack, 0, 0, 12},
    {refalrts::icPushStack, 0, 0, 25},
    {refalrts::icPushStack, 0, 0, 22},
    {refalrts::icPushStack, 0, 0, 0},
    {refalrts::icLinkBrackets, 7, 8, 0},
    {refalrts::icSetResRightEdge, 0, 0, 0},
    {refalrts::icSpliceTile, 27, 29, 0},
    {refalrts::icSpliceTile, 15, 1, 0},
    {refalrts::icSpliceTile, 22, 26, 0},
    {refalrts::icSpliceTile, 14, 14, 0},
    {refalrts::icSpliceTile, 0, 4, 0},
    {refalrts::icSpliceTile, 20, 21, 0},
    {refalrts::icSpliceTile, 13, 13, 0},
    {refalrts::icSpliceTile, 18, 19, 0},
    {refalrts::icSpliceTile, 16, 17, 0},
    {refalrts::icSpliceTile, 7, 11, 0},
    {refalrts::icReturnResult_NoTrash, 0, 0, 0},
    {refalrts::icOnFailGoTo, +34, 0, 0},
    //(E )(#CmdReturnResult)
    // </0 & GenCommand/4 (/7 e.Indent#1/5 )/8 (/11 # CmdReturnResult/13 )/12 >/1
    {refalrts::icIdentTerm, 0, 55, 13},
    {refalrts::icSave, 0, 66, 9},
    {refalrts::icEmpty, 0, 0, 66},
    // closed e.Indent#1 as range 5
    {refalrts::icEmptyResult, 0, 0, 0},
    //TRASH: {REMOVED TILE}  {REMOVED TILE}  {REMOVED TILE} 
    //RESULT: Tile{ [[ } (/14 e.Indent#1/5/15 )/17 (/18 e.Indent#1/5/19"refalrts::use( res )"/21 Tile{ HalfReuse: ';'/0 HalfReuse: )/4 AsIs: (/7 AsIs: e.Indent#1/5 HalfReuse: 'r'/8 HalfReuse: 'e'/11 HalfReuse: 'f'/13 HalfReuse: 'a'/12 HalfReuse: 'l'/1 }"rts::splice_to_freelist( arg_begin, arg_end );"/23 )/25 </26 & GenReturn/27 # Success/28 e.Indent#1/5/29 >/31 Tile{ ]] }
    {refalrts::icAllocBracket, 0, refalrts::ibOpenBracket, 14},
    {refalrts::icCopyEVar, 15, 5, 0},
    {refalrts::icAllocBracket, 0, refalrts::ibCloseBracket, 17},
    {refalrts::icAllocBracket, 0, refalrts::ibOpenBracket, 18},
    {refalrts::icCopyEVar, 19, 5, 0},
    {refalrts::icAllocString, 0, 80, 21},
    {refalrts::icAllocString, 0, 79, 23},
    {refalrts::icAllocBracket, 0, refalrts::ibCloseBracket, 25},
    {refalrts::icAllocBracket, 0, refalrts::ibOpenCall, 26},
    {refalrts::icAllocFunc, 0, 15, 27},
    {refalrts::icAllocIdent, 0, 52, 28},
    {refalrts::icCopyEVar, 29, 5, 0},
    {refalrts::icAllocBracket, 0, refalrts::ibCloseCall, 31},
    {refalrts::icReinitChar, 0, ';', 0},
    {refalrts::icReinitBracket, 0, refalrts::ibCloseBracket, 4},
    {refalrts::icReinitChar, 0, 'r', 8},
    {refalrts::icReinitChar, 0, 'e', 11},
    {refalrts::icReinitChar, 0, 'f', 13},
    {refalrts::icReinitChar, 0, 'a', 12},
    {refalrts::icReinitChar, 0, 'l', 1},
    {refalrts::icPushStack, 0, 0, 31},
    {refalrts::icPushStack, 0, 0, 26},
    {refalrts::icLinkBrackets, 7, 25, 0},
    {refalrts::icLinkBrackets, 18, 4, 0},
    {refalrts::icLinkBrackets, 14, 17, 0},
    {refalrts::icSetResRightEdge, 0, 0, 0},
    {refalrts::icSpliceTile, 23, 31, 0},
    {refalrts::icSpliceTile, 0, 1, 0},
    {refalrts::icSpliceTile, 14, 22, 0},
    {refalrts::icReturnResult_NoTrash, 0, 0, 0},
    {refalrts::icOnFailGoTo, +19, 0, 0},
    //(E )(#CmdUseRes)
    // </0 & GenCommand/4 (/7 e.Indent#1/5 )/8 (/11 # CmdUseRes/13 )/12 >/1
    {refalrts::icIdentTerm, 0, 54, 13},
    {refalrts::icSave, 0, 66, 9},
    {refalrts::icEmpty, 0, 0, 66},
    // closed e.Indent#1 as range 5
    {refalrts::icEmptyResult, 0, 0, 0},
    //TRASH: {REMOVED TILE}  {REMOVED TILE}  {REMOVED TILE}  {REMOVED TILE} 
    //RESULT: Tile{ [[ } Tile{ AsIs: (/7 AsIs: e.Indent#1/5 AsIs: )/8 AsIs: (/11 } e.Indent#1/5/14 Tile{ HalfReuse: 'r'/0 HalfReuse: 'e'/4 }"falrts::use( res "/16 Tile{ HalfReuse: ')'/13 HalfReuse: ';'/12 HalfReuse: )/1 ]] }
    {refalrts::icCopyEVar, 14, 5, 0},
    {refalrts::icAllocString, 0, 78, 16},
    {refalrts::icReinitChar, 0, 'r', 0},
    {refalrts::icReinitChar, 0, 'e', 4},
    {refalrts::icReinitChar, 0, ')', 13},
    {refalrts::icReinitChar, 0, ';', 12},
    {refalrts::icReinitBracket, 0, refalrts::ibCloseBracket, 1},
    {refalrts::icLinkBrackets, 11, 1, 0},
    {refalrts::icLinkBrackets, 7, 8, 0},
    {refalrts::icSetRes, 0, 0, 13},
    {refalrts::icSpliceTile, 16, 17, 0},
    {refalrts::icSpliceTile, 0, 4, 0},
    {refalrts::icSpliceTile, 14, 15, 0},
    {refalrts::icSpliceTile, 7, 11, 0},
    {refalrts::icReturnResult_NoTrash, 0, 0, 0},
    {refalrts::icOnFailGoTo, +16, 0, 0},
    //(E )(#CmdReturnResult_NoTrash)
    // </0 & GenCommand/4 (/7 e.Indent#1/5 )/8 (/11 # CmdReturnResult_NoTrash/13 )/12 >/1
    {refalrts::icIdentTerm, 0, 53, 13},
    {refalrts::icSave, 0, 66, 9},
    {refalrts::icEmpty, 0, 0, 66},
    // closed e.Indent#1 as range 5
    {refalrts::icEmptyResult, 0, 0, 0},
    //TRASH: {REMOVED TILE}  </0 & GenCommand/4 {REMOVED TILE}  {REMOVED TILE} 
    //RESULT: Tile{ [[ } Tile{ AsIs: (/7 AsIs: e.Indent#1/5 AsIs: )/8 HalfReuse: </11 HalfReuse: & GenReturn/13 HalfReuse: # Success/12 } e.Indent#1/5/14 Tile{ AsIs: >/1 ]] }
    {refalrts::icCopyEVar, 14, 5, 0},
    {refalrts::icReinitBracket, 0, refalrts::ibOpenCall, 11},
    {refalrts::icReinitFunc, 0, 15, 13},
    {refalrts::icReinitIdent, 0, 52, 12},
    {refalrts::icPushStack, 0, 0, 1},
    {refalrts::icPushStack, 0, 0, 11},
    {refalrts::icLinkBrackets, 7, 8, 0},
    {refalrts::icSetRes, 0, 0, 1},
    {refalrts::icSpliceTile, 14, 15, 0},
    {refalrts::icSpliceTile, 7, 12, 0},
    {refalrts::icTrashLeftEdge, 0, 0, 0},
    {refalrts::icReturnResult_NoTrash, 0, 0, 0},
    {refalrts::icOnFailGoTo, +28, 0, 0},
    //(E )(#CmdTrashS )
    // </0 & GenCommand/4 (/7 e.Indent#1/5 )/8 (/11 # CmdTrash/13 s.Offset#1/14 )/12 >/1
    {refalrts::icIdentTerm, 0, 51, 13},
    // closed e.Indent#1 as range 5
    {refalrts::icSave, 0, 66, 9},
    {refalrts::icsVarLeft, 0, 14, 66},
    {refalrts::icEmpty, 0, 0, 66},
    {refalrts::icEmptyResult, 0, 0, 0},
    //TRASH: {REMOVED TILE}  {REMOVED TILE}  {REMOVED TILE}  {REMOVED TILE}  {REMOVED TILE} 
    //RESULT: Tile{ [[ } Tile{ AsIs: (/7 AsIs: e.Indent#1/5 AsIs: )/8 HalfReuse: </11 HalfReuse: & Fetch/13 AsIs: s.Offset#1/14 HalfReuse: </12 HalfReuse: & CreateClosure /1 } Tile{ Reuse: & lambda_GenCommand_1/4 } Tile{ HalfReuse: (/0 } e.Indent#1/5/15 )/17 >/18 >/19 Tile{ ]] }
    {refalrts::icCopyEVar, 15, 5, 0},
    {refalrts::icAllocBracket, 0, refalrts::ibCloseBracket, 17},
    {refalrts::icAllocBracket, 0, refalrts::ibCloseCall, 18},
    {refalrts::icAllocBracket, 0, refalrts::ibCloseCall, 19},
    {refalrts::icReinitBracket, 0, refalrts::ibOpenCall, 11},
    {refalrts::icReinitFunc, 0, 2, 13},
    {refalrts::icReinitBracket, 0, refalrts::ibOpenCall, 12},
    {refalrts::icReinitFunc, 0, 1, 1},
    {refalrts::icUpdateFunc, 0, 16, 4},
    {refalrts::icReinitBracket, 0, refalrts::ibOpenBracket, 0},
    {refalrts::icPushStack, 0, 0, 19},
    {refalrts::icPushStack, 0, 0, 11},
    {refalrts::icPushStack, 0, 0, 18},
    {refalrts::icPushStack, 0, 0, 12},
    {refalrts::icLinkBrackets, 0, 17, 0},
    {refalrts::icLinkBrackets, 7, 8, 0},
    {refalrts::icSetResRightEdge, 0, 0, 0},
    {refalrts::icSpliceTile, 17, 19, 0},
    {refalrts::icSpliceTile, 15, 16, 0},
    {refalrts::icSpliceTile, 0, 0, 0},
    {refalrts::icSpliceTile, 4, 4, 0},
    {refalrts::icSpliceTile, 7, 1, 0},
    {refalrts::icReturnResult_NoTrash, 0, 0, 0},
    {refalrts::icOnFailGoTo, +16, 0, 0},
    //(E )(#CmdFail)
    // </0 & GenCommand/4 (/7 e.Indent#1/5 )/8 (/11 # CmdFail/13 )/12 >/1
    {refalrts::icIdentTerm, 0, 50, 13},
    {refalrts::icSave, 0, 66, 9},
    {refalrts::icEmpty, 0, 0, 66},
    // closed e.Indent#1 as range 5
    {refalrts::icEmptyResult, 0, 0, 0},
    //TRASH: {REMOVED TILE}  </0 & GenCommand/4 {REMOVED TILE}  {REMOVED TILE} 
    //RESULT: Tile{ [[ } Tile{ AsIs: (/7 AsIs: e.Indent#1/5 AsIs: )/8 HalfReuse: </11 HalfReuse: & GenReturn/13 HalfReuse: # Fail/12 } e.Indent#1/5/14 Tile{ AsIs: >/1 ]] }
    {refalrts::icCopyEVar, 14, 5, 0},
    {refalrts::icReinitBracket, 0, refalrts::ibOpenCall, 11},
    {refalrts::icReinitFunc, 0, 15, 13},
    {refalrts::icReinitIdent, 0, 49, 12},
    {refalrts::icPushStack, 0, 0, 1},
    {refalrts::icPushStack, 0, 0, 11},
    {refalrts::icLinkBrackets, 7, 8, 0},
    {refalrts::icSetRes, 0, 0, 1},
    {refalrts::icSpliceTile, 14, 15, 0},
    {refalrts::icSpliceTile, 7, 12, 0},
    {refalrts::icTrashLeftEdge, 0, 0, 0},
    {refalrts::icReturnResult_NoTrash, 0, 0, 0},
    {refalrts::icOnFailGoTo, +19, 0, 0},
    //(E )(#CmdiFuncArray)
    // </0 & GenCommand/4 (/7 e.Indent#1/5 )/8 (/11 # CmdiFuncArray/13 )/12 >/1
    {refalrts::icIdentTerm, 0, 48, 13},
    {refalrts::icSave, 0, 66, 9},
    {refalrts::icEmpty, 0, 0, 66},
    // closed e.Indent#1 as range 5
    {refalrts::icEmptyResult, 0, 0, 0},
    //TRASH: {REMOVED TILE}  {REMOVED TILE}  {REMOVED TILE}  {REMOVED TILE} 
    //RESULT: Tile{ [[ } Tile{ AsIs: (/7 AsIs: e.Indent#1/5 AsIs: )/8 AsIs: (/11 } e.Indent#1/5/14 Tile{ HalfReuse: 'u'/0 HalfReuse: 's'/4 }"ing refalrts::function"/16 Tile{ HalfReuse: 's'/13 HalfReuse: ';'/12 HalfReuse: )/1 ]] }
    {refalrts::icCopyEVar, 14, 5, 0},
    {refalrts::icAllocString, 0, 77, 16},
    {refalrts::icReinitChar, 0, 'u', 0},
    {refalrts::icReinitChar, 0, 's', 4},
    {refalrts::icReinitChar, 0, 's', 13},
    {refalrts::icReinitChar, 0, ';', 12},
    {refalrts::icReinitBracket, 0, refalrts::ibCloseBracket, 1},
    {refalrts::icLinkBrackets, 11, 1, 0},
    {refalrts::icLinkBrackets, 7, 8, 0},
    {refalrts::icSetRes, 0, 0, 13},
    {refalrts::icSpliceTile, 16, 17, 0},
    {refalrts::icSpliceTile, 0, 4, 0},
    {refalrts::icSpliceTile, 14, 15, 0},
    {refalrts::icSpliceTile, 7, 11, 0},
    {refalrts::icReturnResult_NoTrash, 0, 0, 0},
    {refalrts::icOnFailGoTo, +62, 0, 0},
    //(E )(#CmdiFuncArrayE (E ))
    // </0 & GenCommand/4 (/7 e.Indent#1/5 )/8 (/11 # CmdiFuncArray/13 e.FuncNames#1/9 (/16 e.LastName#1/14 )/17 )/12 >/1
    {refalrts::icIdentTerm, 0, 48, 13},
    {refalrts::icSave, 0, 66, 9},
    {refalrts::icBracketRightSave, 0, 14, 66},
    // closed e.Indent#1 as range 5
    // closed e.FuncNames#1 as range 66(9)
    // closed e.LastName#1 as range 14
    {refalrts::icEmptyResult, 0, 0, 0},
    //TRASH: {REMOVED TILE}  {REMOVED TILE}  {REMOVED TILE}  {REMOVED TILE}  {REMOVED TILE}  {REMOVED TILE} 
    //RESULT: Tile{ [[ } (/18 e.Indent#1/5/19 )/21 (/22 e.Indent#1/5/23 Tile{ HalfReuse: 's'/13 }"tatic const refalrts::RefalFunction functions[] = {"/25 )/27 </28 & Map/29 </30 Tile{ HalfReuse: & CreateClosure /0 Reuse: & lambda_GenCommand_2/4 AsIs: (/7 AsIs: e.Indent#1/5 AsIs: )/8 HalfReuse: >/11 } Tile{ AsIs: e.FuncNames#1/66(9) } >/31 (/32 e.Indent#1/5/33"  { "/35 </37 Tile{ HalfReuse: & PrintName/16 AsIs: e.LastName#1/14 HalfReuse: >/17 HalfReuse: ','/12 HalfReuse: ' '/1 } '\"'/38 </39 & PrintName/40 e.LastName#1/14/41 >/43"\" }"/44 )/46 (/47 e.Indent#1/5/48"};"/50 )/52 Tile{ ]] }
    {refalrts::icAllocBracket, 0, refalrts::ibOpenBracket, 18},
    {refalrts::icCopyEVar, 19, 5, 0},
    {refalrts::icAllocBracket, 0, refalrts::ibCloseBracket, 21},
    {refalrts::icAllocBracket, 0, refalrts::ibOpenBracket, 22},
    {refalrts::icCopyEVar, 23, 5, 0},
    {refalrts::icAllocString, 0, 76, 25},
    {refalrts::icAllocBracket, 0, refalrts::ibCloseBracket, 27},
    {refalrts::icAllocBracket, 0, refalrts::ibOpenCall, 28},
    {refalrts::icAllocFunc, 0, 10, 29},
    {refalrts::icAllocBracket, 0, refalrts::ibOpenCall, 30},
    {refalrts::icAllocBracket, 0, refalrts::ibCloseCall, 31},
    {refalrts::icAllocBracket, 0, refalrts::ibOpenBracket, 32},
    {refalrts::icCopyEVar, 33, 5, 0},
    {refalrts::icAllocString, 0, 75, 35},
    {refalrts::icAllocBracket, 0, refalrts::ibOpenCall, 37},
    {refalrts::icAllocChar, 0, '\"', 38},
    {refalrts::icAllocBracket, 0, refalrts::ibOpenCall, 39},
    {refalrts::icAllocFunc, 0, 13, 40},
    {refalrts::icCopyEVar, 41, 14, 0},
    {refalrts::icAllocBracket, 0, refalrts::ibCloseCall, 43},
    {refalrts::icAllocString, 0, 74, 44},
    {refalrts::icAllocBracket, 0, refalrts::ibCloseBracket, 46},
    {refalrts::icAllocBracket, 0, refalrts::ibOpenBracket, 47},
    {refalrts::icCopyEVar, 48, 5, 0},
    {refalrts::icAllocString, 0, 61, 50},
    {refalrts::icAllocBracket, 0, refalrts::ibCloseBracket, 52},
    {refalrts::icReinitChar, 0, 's', 13},
    {refalrts::icReinitFunc, 0, 1, 0},
    {refalrts::icUpdateFunc, 0, 14, 4},
    {refalrts::icReinitBracket, 0, refalrts::ibCloseCall, 11},
    {refalrts::icReinitFunc, 0, 13, 16},
    {refalrts::icReinitBracket, 0, refalrts::ibCloseCall, 17},
    {refalrts::icReinitChar, 0, ',', 12},
    {refalrts::icReinitChar, 0, ' ', 1},
    {refalrts::icLinkBrackets, 47, 52, 0},
    {refalrts::icLinkBrackets, 32, 46, 0},
    {refalrts::icPushStack, 0, 0, 43},
    {refalrts::icPushStack, 0, 0, 39},
    {refalrts::icPushStack, 0, 0, 17},
    {refalrts::icPushStack, 0, 0, 37},
    {refalrts::icPushStack, 0, 0, 31},
    {refalrts::icPushStack, 0, 0, 28},
    {refalrts::icPushStack, 0, 0, 11},
    {refalrts::icPushStack, 0, 0, 30},
    {refalrts::icLinkBrackets, 7, 8, 0},
    {refalrts::icLinkBrackets, 22, 27, 0},
    {refalrts::icLinkBrackets, 18, 21, 0},
    {refalrts::icSetResRightEdge, 0, 0, 0},
    {refalrts::icSpliceTile, 38, 52, 0},
    {refalrts::icSpliceTile, 16, 1, 0},
    {refalrts::icSpliceTile, 31, 37, 0},
    {refalrts::icSpliceEVar, 0, 0, 66},
    {refalrts::icSpliceTile, 0, 11, 0},
    {refalrts::icSpliceTile, 25, 30, 0},
    {refalrts::icSpliceTile, 13, 13, 0},
    {refalrts::icSpliceTile, 23, 24, 0},
    {refalrts::icSpliceTile, 18, 22, 0},
    {refalrts::icReturnResult_NoTrash, 0, 0, 0},
    {refalrts::icOnFailGoTo, +19, 0, 0},
    //(E )(#CmdiLabelArray)
    // </0 & GenCommand/4 (/7 e.Indent#1/5 )/8 (/11 # CmdiLabelArray/13 )/12 >/1
    {refalrts::icIdentTerm, 0, 47, 13},
    {refalrts::icSave, 0, 66, 9},
    {refalrts::icEmpty, 0, 0, 66},
    // closed e.Indent#1 as range 5
    {refalrts::icEmptyResult, 0, 0, 0},
    //TRASH: {REMOVED TILE}  {REMOVED TILE}  {REMOVED TILE}  {REMOVED TILE} 
    //RESULT: Tile{ [[ } Tile{ AsIs: (/7 AsIs: e.Indent#1/5 AsIs: )/8 AsIs: (/11 } e.Indent#1/5/14 Tile{ HalfReuse: 'u'/0 HalfReuse: 's'/4 }"ing refalrts::ident"/16 Tile{ HalfReuse: 's'/13 HalfReuse: ';'/12 HalfReuse: )/1 ]] }
    {refalrts::icCopyEVar, 14, 5, 0},
    {refalrts::icAllocString, 0, 73, 16},
    {refalrts::icReinitChar, 0, 'u', 0},
    {refalrts::icReinitChar, 0, 's', 4},
    {refalrts::icReinitChar, 0, 's', 13},
    {refalrts::icReinitChar, 0, ';', 12},
    {refalrts::icReinitBracket, 0, refalrts::ibCloseBracket, 1},
    {refalrts::icLinkBrackets, 11, 1, 0},
    {refalrts::icLinkBrackets, 7, 8, 0},
    {refalrts::icSetRes, 0, 0, 13},
    {refalrts::icSpliceTile, 16, 17, 0},
    {refalrts::icSpliceTile, 0, 4, 0},
    {refalrts::icSpliceTile, 14, 15, 0},
    {refalrts::icSpliceTile, 7, 11, 0},
    {refalrts::icReturnResult_NoTrash, 0, 0, 0},
    {refalrts::icOnFailGoTo, +52, 0, 0},
    //(E )(#CmdiLabelArrayE (E ))
    // </0 & GenCommand/4 (/7 e.Indent#1/5 )/8 (/11 # CmdiLabelArray/13 e.LabelNames#1/9 (/16 e.LastName#1/14 )/17 )/12 >/1
    {refalrts::icIdentTerm, 0, 47, 13},
    {refalrts::icSave, 0, 66, 9},
    {refalrts::icBracketRightSave, 0, 14, 66},
    // closed e.Indent#1 as range 5
    // closed e.LabelNames#1 as range 66(9)
    // closed e.LastName#1 as range 14
    {refalrts::icEmptyResult, 0, 0, 0},
    //TRASH: {REMOVED TILE}  {REMOVED TILE}  {REMOVED TILE}  {REMOVED TILE}  {REMOVED TILE}  {REMOVED TILE} 
    //RESULT: Tile{ [[ } (/18 e.Indent#1/5/19 )/21 (/22 e.Indent#1/5/23 Tile{ HalfReuse: 's'/13 }"tatic const refalrts::RefalIdentifier idents[] = {"/25 )/27 </28 & Map/29 </30 Tile{ HalfReuse: & CreateClosure /0 Reuse: & lambda_GenCommand_3/4 AsIs: (/7 AsIs: e.Indent#1/5 AsIs: )/8 HalfReuse: >/11 } Tile{ AsIs: e.LabelNames#1/66(9) } >/31 (/32 e.Indent#1/5/33"  & ident"/35 Tile{ HalfReuse: '_'/16 AsIs: e.LastName#1/14 HalfReuse: '<'/17 HalfReuse: 'i'/12 HalfReuse: 'n'/1 }"t>::name"/37 )/39 (/40 e.Indent#1/5/41"};"/43 )/45 Tile{ ]] }
    {refalrts::icAllocBracket, 0, refalrts::ibOpenBracket, 18},
    {refalrts::icCopyEVar, 19, 5, 0},
    {refalrts::icAllocBracket, 0, refalrts::ibCloseBracket, 21},
    {refalrts::icAllocBracket, 0, refalrts::ibOpenBracket, 22},
    {refalrts::icCopyEVar, 23, 5, 0},
    {refalrts::icAllocString, 0, 72, 25},
    {refalrts::icAllocBracket, 0, refalrts::ibCloseBracket, 27},
    {refalrts::icAllocBracket, 0, refalrts::ibOpenCall, 28},
    {refalrts::icAllocFunc, 0, 10, 29},
    {refalrts::icAllocBracket, 0, refalrts::ibOpenCall, 30},
    {refalrts::icAllocBracket, 0, refalrts::ibCloseCall, 31},
    {refalrts::icAllocBracket, 0, refalrts::ibOpenBracket, 32},
    {refalrts::icCopyEVar, 33, 5, 0},
    {refalrts::icAllocString, 0, 71, 35},
    {refalrts::icAllocString, 0, 70, 37},
    {refalrts::icAllocBracket, 0, refalrts::ibCloseBracket, 39},
    {refalrts::icAllocBracket, 0, refalrts::ibOpenBracket, 40},
    {refalrts::icCopyEVar, 41, 5, 0},
    {refalrts::icAllocString, 0, 61, 43},
    {refalrts::icAllocBracket, 0, refalrts::ibCloseBracket, 45},
    {refalrts::icReinitChar, 0, 's', 13},
    {refalrts::icReinitFunc, 0, 1, 0},
    {refalrts::icUpdateFunc, 0, 12, 4},
    {refalrts::icReinitBracket, 0, refalrts::ibCloseCall, 11},
    {refalrts::icReinitChar, 0, '_', 16},
    {refalrts::icReinitChar, 0, '<', 17},
    {refalrts::icReinitChar, 0, 'i', 12},
    {refalrts::icReinitChar, 0, 'n', 1},
    {refalrts::icLinkBrackets, 40, 45, 0},
    {refalrts::icLinkBrackets, 32, 39, 0},
    {refalrts::icPushStack, 0, 0, 31},
    {refalrts::icPushStack, 0, 0, 28},
    {refalrts::icPushStack, 0, 0, 11},
    {refalrts::icPushStack, 0, 0, 30},
    {refalrts::icLinkBrackets, 7, 8, 0},
    {refalrts::icLinkBrackets, 22, 27, 0},
    {refalrts::icLinkBrackets, 18, 21, 0},
    {refalrts::icSetResRightEdge, 0, 0, 0},
    {refalrts::icSpliceTile, 37, 45, 0},
    {refalrts::icSpliceTile, 16, 1, 0},
    {refalrts::icSpliceTile, 31, 36, 0},
    {refalrts::icSpliceEVar, 0, 0, 66},
    {refalrts::icSpliceTile, 0, 11, 0},
    {refalrts::icSpliceTile, 25, 30, 0},
    {refalrts::icSpliceTile, 13, 13, 0},
    {refalrts::icSpliceTile, 23, 24, 0},
    {refalrts::icSpliceTile, 18, 22, 0},
    {refalrts::icReturnResult_NoTrash, 0, 0, 0},
    {refalrts::icOnFailGoTo, +19, 0, 0},
    //(E )(#CmdiNumberArray)
    // </0 & GenCommand/4 (/7 e.Indent#1/5 )/8 (/11 # CmdiNumberArray/13 )/12 >/1
    {refalrts::icIdentTerm, 0, 46, 13},
    {refalrts::icSave, 0, 66, 9},
    {refalrts::icEmpty, 0, 0, 66},
    // closed e.Indent#1 as range 5
    {refalrts::icEmptyResult, 0, 0, 0},
    //TRASH: {REMOVED TILE}  {REMOVED TILE}  {REMOVED TILE}  {REMOVED TILE} 
    //RESULT: Tile{ [[ } Tile{ AsIs: (/7 AsIs: e.Indent#1/5 AsIs: )/8 AsIs: (/11 } e.Indent#1/5/14 Tile{ HalfReuse: 'u'/0 HalfReuse: 's'/4 }"ing refalrts::number"/16 Tile{ HalfReuse: 's'/13 HalfReuse: ';'/12 HalfReuse: )/1 ]] }
    {refalrts::icCopyEVar, 14, 5, 0},
    {refalrts::icAllocString, 0, 69, 16},
    {refalrts::icReinitChar, 0, 'u', 0},
    {refalrts::icReinitChar, 0, 's', 4},
    {refalrts::icReinitChar, 0, 's', 13},
    {refalrts::icReinitChar, 0, ';', 12},
    {refalrts::icReinitBracket, 0, refalrts::ibCloseBracket, 1},
    {refalrts::icLinkBrackets, 11, 1, 0},
    {refalrts::icLinkBrackets, 7, 8, 0},
    {refalrts::icSetRes, 0, 0, 13},
    {refalrts::icSpliceTile, 16, 17, 0},
    {refalrts::icSpliceTile, 0, 4, 0},
    {refalrts::icSpliceTile, 14, 15, 0},
    {refalrts::icSpliceTile, 7, 11, 0},
    {refalrts::icReturnResult_NoTrash, 0, 0, 0},
    {refalrts::icOnFailGoTo, +54, 0, 0},
    //(E )(#CmdiNumberArrayE S )
    // </0 & GenCommand/4 (/7 e.Indent#1/5 )/8 (/11 # CmdiNumberArray/13 e.Numbers#1/9 s.LastNumber#1/14 )/12 >/1
    {refalrts::icIdentTerm, 0, 46, 13},
    // closed e.Indent#1 as range 5
    {refalrts::icSave, 0, 66, 9},
    {refalrts::icsVarRight, 0, 14, 66},
    // closed e.Numbers#1 as range 66(9)
    {refalrts::icEmptyResult, 0, 0, 0},
    //TRASH: {REMOVED TILE}  {REMOVED TILE}  {REMOVED TILE}  {REMOVED TILE}  {REMOVED TILE}  {REMOVED TILE} 
    //RESULT: Tile{ [[ } (/15 e.Indent#1/5/16 )/18 (/19 e.Indent#1/5/20 Tile{ HalfReuse: 's'/13 }"tatic const refalrts::RefalNumber numbers[] = {"/22 )/24 </25 & Map/26 </27 Tile{ HalfReuse: & CreateClosure /0 Reuse: & lambda_GenCommand_4/4 AsIs: (/7 AsIs: e.Indent#1/5 AsIs: )/8 HalfReuse: >/11 } Tile{ AsIs: e.Numbers#1/66(9) } >/28 (/29 e.Indent#1/5/30"  "/32 </34 & StrFromInt/35 Tile{ AsIs: s.LastNumber#1/14 HalfReuse: >/12 HalfReuse: 'U'/1 } 'L'/36 )/37 (/38 e.Indent#1/5/39"};"/41 )/43 Tile{ ]] }
    {refalrts::icAllocBracket, 0, refalrts::ibOpenBracket, 15},
    {refalrts::icCopyEVar, 16, 5, 0},
    {refalrts::icAllocBracket, 0, refalrts::ibCloseBracket, 18},
    {refalrts::icAllocBracket, 0, refalrts::ibOpenBracket, 19},
    {refalrts::icCopyEVar, 20, 5, 0},
    {refalrts::icAllocString, 0, 68, 22},
    {refalrts::icAllocBracket, 0, refalrts::ibCloseBracket, 24},
    {refalrts::icAllocBracket, 0, refalrts::ibOpenCall, 25},
    {refalrts::icAllocFunc, 0, 10, 26},
    {refalrts::icAllocBracket, 0, refalrts::ibOpenCall, 27},
    {refalrts::icAllocBracket, 0, refalrts::ibCloseCall, 28},
    {refalrts::icAllocBracket, 0, refalrts::ibOpenBracket, 29},
    {refalrts::icCopyEVar, 30, 5, 0},
    {refalrts::icAllocString, 0, 67, 32},
    {refalrts::icAllocBracket, 0, refalrts::ibOpenCall, 34},
    {refalrts::icAllocFunc, 0, 3, 35},
    {refalrts::icAllocChar, 0, 'L', 36},
    {refalrts::icAllocBracket, 0, refalrts::ibCloseBracket, 37},
    {refalrts::icAllocBracket, 0, refalrts::ibOpenBracket, 38},
    {refalrts::icCopyEVar, 39, 5, 0},
    {refalrts::icAllocString, 0, 61, 41},
    {refalrts::icAllocBracket, 0, refalrts::ibCloseBracket, 43},
    {refalrts::icReinitChar, 0, 's', 13},
    {refalrts::icReinitFunc, 0, 1, 0},
    {refalrts::icUpdateFunc, 0, 11, 4},
    {refalrts::icReinitBracket, 0, refalrts::ibCloseCall, 11},
    {refalrts::icReinitBracket, 0, refalrts::ibCloseCall, 12},
    {refalrts::icReinitChar, 0, 'U', 1},
    {refalrts::icLinkBrackets, 38, 43, 0},
    {refalrts::icLinkBrackets, 29, 37, 0},
    {refalrts::icPushStack, 0, 0, 12},
    {refalrts::icPushStack, 0, 0, 34},
    {refalrts::icPushStack, 0, 0, 28},
    {refalrts::icPushStack, 0, 0, 25},
    {refalrts::icPushStack, 0, 0, 11},
    {refalrts::icPushStack, 0, 0, 27},
    {refalrts::icLinkBrackets, 7, 8, 0},
    {refalrts::icLinkBrackets, 19, 24, 0},
    {refalrts::icLinkBrackets, 15, 18, 0},
    {refalrts::icSetResRightEdge, 0, 0, 0},
    {refalrts::icSpliceTile, 36, 43, 0},
    {refalrts::icSpliceTile, 14, 1, 0},
    {refalrts::icSpliceTile, 28, 35, 0},
    {refalrts::icSpliceEVar, 0, 0, 66},
    {refalrts::icSpliceTile, 0, 11, 0},
    {refalrts::icSpliceTile, 22, 27, 0},
    {refalrts::icSpliceTile, 13, 13, 0},
    {refalrts::icSpliceTile, 20, 21, 0},
    {refalrts::icSpliceTile, 15, 19, 0},
    {refalrts::icReturnResult_NoTrash, 0, 0, 0},
    {refalrts::icOnFailGoTo, +19, 0, 0},
    //(E )(#CmdiStringArray)
    // </0 & GenCommand/4 (/7 e.Indent#1/5 )/8 (/11 # CmdiStringArray/13 )/12 >/1
    {refalrts::icIdentTerm, 0, 45, 13},
    {refalrts::icSave, 0, 66, 9},
    {refalrts::icEmpty, 0, 0, 66},
    // closed e.Indent#1 as range 5
    {refalrts::icEmptyResult, 0, 0, 0},
    //TRASH: {REMOVED TILE}  {REMOVED TILE}  {REMOVED TILE}  {REMOVED TILE} 
    //RESULT: Tile{ [[ } Tile{ AsIs: (/7 AsIs: e.Indent#1/5 AsIs: )/8 AsIs: (/11 } e.Indent#1/5/14 Tile{ HalfReuse: 'u'/0 HalfReuse: 's'/4 }"ing refalrts::string"/16 Tile{ HalfReuse: 's'/13 HalfReuse: ';'/12 HalfReuse: )/1 ]] }
    {refalrts::icCopyEVar, 14, 5, 0},
    {refalrts::icAllocString, 0, 66, 16},
    {refalrts::icReinitChar, 0, 'u', 0},
    {refalrts::icReinitChar, 0, 's', 4},
    {refalrts::icReinitChar, 0, 's', 13},
    {refalrts::icReinitChar, 0, ';', 12},
    {refalrts::icReinitBracket, 0, refalrts::ibCloseBracket, 1},
    {refalrts::icLinkBrackets, 11, 1, 0},
    {refalrts::icLinkBrackets, 7, 8, 0},
    {refalrts::icSetRes, 0, 0, 13},
    {refalrts::icSpliceTile, 16, 17, 0},
    {refalrts::icSpliceTile, 0, 4, 0},
    {refalrts::icSpliceTile, 14, 15, 0},
    {refalrts::icSpliceTile, 7, 11, 0},
    {refalrts::icReturnResult_NoTrash, 0, 0, 0},
    {refalrts::icOnFailGoTo, +53, 0, 0},
    //(E )(#CmdiStringArrayE (E ))
    // </0 & GenCommand/4 (/7 e.Indent#1/5 )/8 (/11 # CmdiStringArray/13 e.Strings#1/9 (/16 e.LastString#1/14 )/17 )/12 >/1
    {refalrts::icIdentTerm, 0, 45, 13},
    {refalrts::icSave, 0, 66, 9},
    {refalrts::icBracketRightSave, 0, 14, 66},
    // closed e.Indent#1 as range 5
    // closed e.Strings#1 as range 66(9)
    // closed e.LastString#1 as range 14
    {refalrts::icEmptyResult, 0, 0, 0},
    //TRASH: {REMOVED TILE}  {REMOVED TILE}  {REMOVED TILE}  {REMOVED TILE}  {REMOVED TILE}  {REMOVED TILE} 
    //RESULT: Tile{ [[ } (/18 e.Indent#1/5/19 )/21 (/22 e.Indent#1/5/23 Tile{ HalfReuse: 's'/13 }"tatic const refalrts::StringItem strings[] = {"/25 )/27 </28 & Map/29 </30 Tile{ HalfReuse: & CreateClosure /0 Reuse: & lambda_GenCommand_5/4 AsIs: (/7 AsIs: e.Indent#1/5 AsIs: )/8 HalfReuse: >/11 } Tile{ AsIs: e.Strings#1/66(9) } >/31 (/32 e.Indent#1/5/33"  {"/35 </37 Tile{ HalfReuse: & PrintString/16 AsIs: e.LastString#1/14 HalfReuse: >/17 HalfReuse: '}'/12 HalfReuse: )/1 } (/38 e.Indent#1/5/39"};"/41 )/43 Tile{ ]] }
    {refalrts::icAllocBracket, 0, refalrts::ibOpenBracket, 18},
    {refalrts::icCopyEVar, 19, 5, 0},
    {refalrts::icAllocBracket, 0, refalrts::ibCloseBracket, 21},
    {refalrts::icAllocBracket, 0, refalrts::ibOpenBracket, 22},
    {refalrts::icCopyEVar, 23, 5, 0},
    {refalrts::icAllocString, 0, 65, 25},
    {refalrts::icAllocBracket, 0, refalrts::ibCloseBracket, 27},
    {refalrts::icAllocBracket, 0, refalrts::ibOpenCall, 28},
    {refalrts::icAllocFunc, 0, 10, 29},
    {refalrts::icAllocBracket, 0, refalrts::ibOpenCall, 30},
    {refalrts::icAllocBracket, 0, refalrts::ibCloseCall, 31},
    {refalrts::icAllocBracket, 0, refalrts::ibOpenBracket, 32},
    {refalrts::icCopyEVar, 33, 5, 0},
    {refalrts::icAllocString, 0, 64, 35},
    {refalrts::icAllocBracket, 0, refalrts::ibOpenCall, 37},
    {refalrts::icAllocBracket, 0, refalrts::ibOpenBracket, 38},
    {refalrts::icCopyEVar, 39, 5, 0},
    {refalrts::icAllocString, 0, 61, 41},
    {refalrts::icAllocBracket, 0, refalrts::ibCloseBracket, 43},
    {refalrts::icReinitChar, 0, 's', 13},
    {refalrts::icReinitFunc, 0, 1, 0},
    {refalrts::icUpdateFunc, 0, 9, 4},
    {refalrts::icReinitBracket, 0, refalrts::ibCloseCall, 11},
    {refalrts::icReinitFunc, 0, 8, 16},
    {refalrts::icReinitBracket, 0, refalrts::ibCloseCall, 17},
    {refalrts::icReinitChar, 0, '}', 12},
    {refalrts::icReinitBracket, 0, refalrts::ibCloseBracket, 1},
    {refalrts::icLinkBrackets, 38, 43, 0},
    {refalrts::icLinkBrackets, 32, 1, 0},
    {refalrts::icPushStack, 0, 0, 17},
    {refalrts::icPushStack, 0, 0, 37},
    {refalrts::icPushStack, 0, 0, 31},
    {refalrts::icPushStack, 0, 0, 28},
    {refalrts::icPushStack, 0, 0, 11},
    {refalrts::icPushStack, 0, 0, 30},
    {refalrts::icLinkBrackets, 7, 8, 0},
    {refalrts::icLinkBrackets, 22, 27, 0},
    {refalrts::icLinkBrackets, 18, 21, 0},
    {refalrts::icSetResRightEdge, 0, 0, 0},
    {refalrts::icSpliceTile, 38, 43, 0},
    {refalrts::icSpliceTile, 16, 1, 0},
    {refalrts::icSpliceTile, 31, 37, 0},
    {refalrts::icSpliceEVar, 0, 0, 66},
    {refalrts::icSpliceTile, 0, 11, 0},
    {refalrts::icSpliceTile, 25, 30, 0},
    {refalrts::icSpliceTile, 13, 13, 0},
    {refalrts::icSpliceTile, 23, 24, 0},
    {refalrts::icSpliceTile, 18, 22, 0},
    {refalrts::icReturnResult_NoTrash, 0, 0, 0},
    {refalrts::icOnFailGoTo, +23, 0, 0},
    //(E )(#CmdInitRAA)
    // </0 & GenCommand/4 (/7 e.Indent#1/5 )/8 (/11 # CmdInitRAA/13 )/12 >/1
    {refalrts::icIdentTerm, 0, 44, 13},
    {refalrts::icSave, 0, 66, 9},
    {refalrts::icEmpty, 0, 0, 66},
    // closed e.Indent#1 as range 5
    {refalrts::icEmptyResult, 0, 0, 0},
    //TRASH: {REMOVED TILE}  {REMOVED TILE}  {REMOVED TILE} 
    //RESULT: Tile{ [[ } (/14 e.Indent#1/5/15 ' '/17 Tile{ HalfReuse: ' '/0 HalfReuse: )/4 AsIs: (/7 AsIs: e.Indent#1/5 HalfReuse: 's'/8 HalfReuse: 't'/11 HalfReuse: 'a'/13 HalfReuse: 't'/12 HalfReuse: 'i'/1 }"c const refalrts::RASLCommand raa[] = {"/18 )/20 Tile{ ]] }
    {refalrts::icAllocBracket, 0, refalrts::ibOpenBracket, 14},
    {refalrts::icCopyEVar, 15, 5, 0},
    {refalrts::icAllocChar, 0, ' ', 17},
    {refalrts::icAllocString, 0, 63, 18},
    {refalrts::icAllocBracket, 0, refalrts::ibCloseBracket, 20},
    {refalrts::icReinitChar, 0, ' ', 0},
    {refalrts::icReinitBracket, 0, refalrts::ibCloseBracket, 4},
    {refalrts::icReinitChar, 0, 's', 8},
    {refalrts::icReinitChar, 0, 't', 11},
    {refalrts::icReinitChar, 0, 'a', 13},
    {refalrts::icReinitChar, 0, 't', 12},
    {refalrts::icReinitChar, 0, 'i', 1},
    {refalrts::icLinkBrackets, 7, 20, 0},
    {refalrts::icLinkBrackets, 14, 4, 0},
    {refalrts::icSetResRightEdge, 0, 0, 0},
    {refalrts::icSpliceTile, 18, 20, 0},
    {refalrts::icSpliceTile, 0, 1, 0},
    {refalrts::icSpliceTile, 14, 17, 0},
    {refalrts::icReturnResult_NoTrash, 0, 0, 0},
    {refalrts::icOnFailGoTo, +29, 0, 0},
    //(E ' '' ')(#CmdFinRAA)
    // </0 & GenCommand/4 (/7 e.Indent#1/5 ' '/15 ' '/14 )/8 (/11 # CmdFinRAA/13 )/12 >/1
    {refalrts::icIdentTerm, 0, 43, 13},
    {refalrts::icSave, 0, 66, 5},
    {refalrts::icCharRightSave, 14, static_cast<unsigned char>(' '), 66},
    {refalrts::icCharRightSave, 15, static_cast<unsigned char>(' '), 66},
    {refalrts::icSave, 0, 68, 9},
    {refalrts::icEmpty, 0, 0, 68},
    // closed e.Indent#1 as range 66(5)
    {refalrts::icEmptyResult, 0, 0, 0},
    //TRASH: {REMOVED TILE}  {REMOVED TILE}  {REMOVED TILE} 
    //RESULT: Tile{ [[ HalfReuse: (/0 } e.Indent#1/66(5)/16 Tile{ HalfReuse: )/4 AsIs: (/7 AsIs: e.Indent#1/66(5) AsIs: ' '/15 AsIs: ' '/14 HalfReuse: '{'/8 HalfReuse: 'r'/11 HalfReuse: 'e'/13 HalfReuse: 'f'/12 HalfReuse: 'a'/1 }"lrts::icEnd, 0, 0, 0}"/18 )/20 (/21 e.Indent#1/66(5)/22"};"/24 )/26 Tile{ ]] }
    {refalrts::icCopyEVar, 16, 66, 0},
    {refalrts::icAllocString, 0, 62, 18},
    {refalrts::icAllocBracket, 0, refalrts::ibCloseBracket, 20},
    {refalrts::icAllocBracket, 0, refalrts::ibOpenBracket, 21},
    {refalrts::icCopyEVar, 22, 66, 0},
    {refalrts::icAllocString, 0, 61, 24},
    {refalrts::icAllocBracket, 0, refalrts::ibCloseBracket, 26},
    {refalrts::icReinitBracket, 0, refalrts::ibOpenBracket, 0},
    {refalrts::icReinitBracket, 0, refalrts::ibCloseBracket, 4},
    {refalrts::icReinitChar, 0, '{', 8},
    {refalrts::icReinitChar, 0, 'r', 11},
    {refalrts::icReinitChar, 0, 'e', 13},
    {refalrts::icReinitChar, 0, 'f', 12},
    {refalrts::icReinitChar, 0, 'a', 1},
    {refalrts::icLinkBrackets, 21, 26, 0},
    {refalrts::icLinkBrackets, 7, 20, 0},
    {refalrts::icLinkBrackets, 0, 4, 0},
    {refalrts::icSetResRightEdge, 0, 0, 0},
    {refalrts::icSpliceTile, 18, 26, 0},
    {refalrts::icSpliceTile, 4, 1, 0},
    {refalrts::icSpliceTile, 16, 17, 0},
    {refalrts::icReturnResult_NoTrash, 0, 0, 0},
    {refalrts::icOnFailGoTo, +23, 0, 0},
    //(E )(#CmdiReserveStack0 )
    // </0 & GenCommand/4 (/7 e.Indent#1/5 )/8 (/11 # CmdiReserveStack/13 0/14 )/12 >/1
    {refalrts::icIdentTerm, 0, 42, 13},
    {refalrts::icSave, 0, 66, 9},
    {refalrts::icNumLeftSave, 14, 0, 66},
    {refalrts::icEmpty, 0, 0, 66},
    // closed e.Indent#1 as range 5
    {refalrts::icEmptyResult, 0, 0, 0},
    //TRASH: {REMOVED TILE}  {REMOVED TILE}  {REMOVED TILE} 
    //RESULT: Tile{ [[ HalfReuse: (/0 } e.Indent#1/5/15 Tile{ HalfReuse: )/4 AsIs: (/7 AsIs: e.Indent#1/5 HalfReuse: 'i'/8 HalfReuse: 'n'/11 HalfReuse: 't'/13 HalfReuse: ' '/14 HalfReuse: 'o'/12 HalfReuse: 'p'/1 }"en_e_stack[1];"/17 )/19 Tile{ ]] }
    {refalrts::icCopyEVar, 15, 5, 0},
    {refalrts::icAllocString, 0, 60, 17},
    {refalrts::icAllocBracket, 0, refalrts::ibCloseBracket, 19},
    {refalrts::icReinitBracket, 0, refalrts::ibOpenBracket, 0},
    {refalrts::icReinitBracket, 0, refalrts::ibCloseBracket, 4},
    {refalrts::icReinitChar, 0, 'i', 8},
    {refalrts::icReinitChar, 0, 'n', 11},
    {refalrts::icReinitChar, 0, 't', 13},
    {refalrts::icReinitChar, 0, ' ', 14},
    {refalrts::icReinitChar, 0, 'o', 12},
    {refalrts::icReinitChar, 0, 'p', 1},
    {refalrts::icLinkBrackets, 7, 19, 0},
    {refalrts::icLinkBrackets, 0, 4, 0},
    {refalrts::icSetResRightEdge, 0, 0, 0},
    {refalrts::icSpliceTile, 17, 19, 0},
    {refalrts::icSpliceTile, 4, 1, 0},
    {refalrts::icSpliceTile, 15, 16, 0},
    {refalrts::icReturnResult_NoTrash, 0, 0, 0},
    {refalrts::icOnFailGoTo, +26, 0, 0},
    //(E )(#CmdiReserveStackS )
    // </0 & GenCommand/4 (/7 e.Indent#1/5 )/8 (/11 # CmdiReserveStack/13 s.Depth#1/14 )/12 >/1
    {refalrts::icIdentTerm, 0, 42, 13},
    // closed e.Indent#1 as range 5
    {refalrts::icSave, 0, 66, 9},
    {refalrts::icsVarLeft, 0, 14, 66},
    {refalrts::icEmpty, 0, 0, 66},
    {refalrts::icEmptyResult, 0, 0, 0},
    //TRASH: {REMOVED TILE}  {REMOVED TILE}  {REMOVED TILE}  {REMOVED TILE}  {REMOVED TILE}  {REMOVED TILE} 
    //RESULT: Tile{ [[ } Tile{ AsIs: (/7 AsIs: e.Indent#1/5 AsIs: )/8 AsIs: (/11 } e.Indent#1/5/15 Tile{ HalfReuse: 'i'/4 }"nt open_e_stack["/17 Tile{ AsIs: </0 } Tile{ HalfReuse: & StrFromInt/13 AsIs: s.Depth#1/14 HalfReuse: >/12 HalfReuse: ']'/1 } ';'/19 )/20 Tile{ ]] }
    {refalrts::icCopyEVar, 15, 5, 0},
    {refalrts::icAllocString, 0, 59, 17},
    {refalrts::icAllocChar, 0, ';', 19},
    {refalrts::icAllocBracket, 0, refalrts::ibCloseBracket, 20},
    {refalrts::icReinitChar, 0, 'i', 4},
    {refalrts::icReinitFunc, 0, 3, 13},
    {refalrts::icReinitBracket, 0, refalrts::ibCloseCall, 12},
    {refalrts::icReinitChar, 0, ']', 1},
    {refalrts::icLinkBrackets, 11, 20, 0},
    {refalrts::icPushStack, 0, 0, 12},
    {refalrts::icPushStack, 0, 0, 0},
    {refalrts::icLinkBrackets, 7, 8, 0},
    {refalrts::icSetResRightEdge, 0, 0, 0},
    {refalrts::icSpliceTile, 19, 20, 0},
    {refalrts::icSpliceTile, 13, 1, 0},
    {refalrts::icSpliceTile, 0, 0, 0},
    {refalrts::icSpliceTile, 17, 18, 0},
    {refalrts::icSpliceTile, 4, 4, 0},
    {refalrts::icSpliceTile, 15, 16, 0},
    {refalrts::icSpliceTile, 7, 11, 0},
    {refalrts::icReturnResult_NoTrash, 0, 0, 0},
    {refalrts::icOnFailGoTo, +42, 0, 0},
    //(E )(#CmdiRunInterpret)
    // </0 & GenCommand/4 (/7 e.Indent#1/5 )/8 (/11 # CmdiRunInterpret/13 )/12 >/1
    {refalrts::icIdentTerm, 0, 41, 13},
    {refalrts::icSave, 0, 66, 9},
    {refalrts::icEmpty, 0, 0, 66},
    // closed e.Indent#1 as range 5
    {refalrts::icEmptyResult, 0, 0, 0},
    //TRASH: {REMOVED TILE}  {REMOVED TILE}  {REMOVED TILE} 
    //RESULT: Tile{ [[ } (/14 e.Indent#1/5/15 )/17 (/18 e.Indent#1/5/19"refalrts::FnResult res = refalrts::interpret_array"/21 Tile{ HalfReuse: '('/0 HalfReuse: )/4 AsIs: (/7 AsIs: e.Indent#1/5 HalfReuse: ' '/8 HalfReuse: ' '/11 HalfReuse: 'r'/13 HalfReuse: 'a'/12 HalfReuse: 'a'/1 }", context, arg_begin, arg_end,"/23 )/25 (/26 e.Indent#1/5/27"  functions, idents, numbers, strings, open_e_stack"/29 )/31 (/32 e.Indent#1/5/33");"/35 )/37 (/38 e.Indent#1/5/39"return res;"/41 )/43 Tile{ ]] }
    {refalrts::icAllocBracket, 0, refalrts::ibOpenBracket, 14},
    {refalrts::icCopyEVar, 15, 5, 0},
    {refalrts::icAllocBracket, 0, refalrts::ibCloseBracket, 17},
    {refalrts::icAllocBracket, 0, refalrts::ibOpenBracket, 18},
    {refalrts::icCopyEVar, 19, 5, 0},
    {refalrts::icAllocString, 0, 58, 21},
    {refalrts::icAllocString, 0, 57, 23},
    {refalrts::icAllocBracket, 0, refalrts::ibCloseBracket, 25},
    {refalrts::icAllocBracket, 0, refalrts::ibOpenBracket, 26},
    {refalrts::icCopyEVar, 27, 5, 0},
    {refalrts::icAllocString, 0, 56, 29},
    {refalrts::icAllocBracket, 0, refalrts::ibCloseBracket, 31},
    {refalrts::icAllocBracket, 0, refalrts::ibOpenBracket, 32},
    {refalrts::icCopyEVar, 33, 5, 0},
    {refalrts::icAllocString, 0, 55, 35},
    {refalrts::icAllocBracket, 0, refalrts::ibCloseBracket, 37},
    {refalrts::icAllocBracket, 0, refalrts::ibOpenBracket, 38},
    {refalrts::icCopyEVar, 39, 5, 0},
    {refalrts::icAllocString, 0, 54, 41},
    {refalrts::icAllocBracket, 0, refalrts::ibCloseBracket, 43},
    {refalrts::icReinitChar, 0, '(', 0},
    {refalrts::icReinitBracket, 0, refalrts::ibCloseBracket, 4},
    {refalrts::icReinitChar, 0, ' ', 8},
    {refalrts::icReinitChar, 0, ' ', 11},
    {refalrts::icReinitChar, 0, 'r', 13},
    {refalrts::icReinitChar, 0, 'a', 12},
    {refalrts::icReinitChar, 0, 'a', 1},
    {refalrts::icLinkBrackets, 38, 43, 0},
    {refalrts::icLinkBrackets, 32, 37, 0},
    {refalrts::icLinkBrackets, 26, 31, 0},
    {refalrts::icLinkBrackets, 7, 25, 0},
    {refalrts::icLinkBrackets, 18, 4, 0},
    {refalrts::icLinkBrackets, 14, 17, 0},
    {refalrts::icSetResRightEdge, 0, 0, 0},
    {refalrts::icSpliceTile, 23, 43, 0},
    {refalrts::icSpliceTile, 0, 1, 0},
    {refalrts::icSpliceTile, 14, 22, 0},
    {refalrts::icReturnResult_NoTrash, 0, 0, 0},
    {refalrts::icOnFailGoTo, +28, 0, 0},
    //(E )(#CmdiOnFailGoToS )
    // </0 & GenCommand/4 (/7 e.Indent#1/5 )/8 (/11 # CmdiOnFailGoTo/13 s.Offset#1/14 )/12 >/1
    {refalrts::icIdentTerm, 0, 40, 13},
    // closed e.Indent#1 as range 5
    {refalrts::icSave, 0, 66, 9},
    {refalrts::icsVarLeft, 0, 14, 66},
    {refalrts::icEmpty, 0, 0, 66},
    {refalrts::icEmptyResult, 0, 0, 0},
    //TRASH: {REMOVED TILE}  {REMOVED TILE}  {REMOVED TILE}  {REMOVED TILE}  {REMOVED TILE}  {REMOVED TILE} 
    //RESULT: Tile{ [[ } Tile{ AsIs: (/7 AsIs: e.Indent#1/5 AsIs: )/8 AsIs: (/11 } e.Indent#1/5/15"{re"/17 Tile{ HalfReuse: 'f'/4 }"alrts::icOnFailGoTo, +"/19 Tile{ AsIs: </0 } Tile{ HalfReuse: & StrFromInt/13 AsIs: s.Offset#1/14 HalfReuse: >/12 HalfReuse: ','/1 }" 0, 0},"/21 )/23 Tile{ ]] }
    {refalrts::icCopyEVar, 15, 5, 0},
    {refalrts::icAllocString, 0, 6, 17},
    {refalrts::icAllocString, 0, 53, 19},
    {refalrts::icAllocString, 0, 52, 21},
    {refalrts::icAllocBracket, 0, refalrts::ibCloseBracket, 23},
    {refalrts::icReinitChar, 0, 'f', 4},
    {refalrts::icReinitFunc, 0, 3, 13},
    {refalrts::icReinitBracket, 0, refalrts::ibCloseCall, 12},
    {refalrts::icReinitChar, 0, ',', 1},
    {refalrts::icLinkBrackets, 11, 23, 0},
    {refalrts::icPushStack, 0, 0, 12},
    {refalrts::icPushStack, 0, 0, 0},
    {refalrts::icLinkBrackets, 7, 8, 0},
    {refalrts::icSetResRightEdge, 0, 0, 0},
    {refalrts::icSpliceTile, 21, 23, 0},
    {refalrts::icSpliceTile, 13, 1, 0},
    {refalrts::icSpliceTile, 0, 0, 0},
    {refalrts::icSpliceTile, 19, 20, 0},
    {refalrts::icSpliceTile, 4, 4, 0},
    {refalrts::icSpliceTile, 17, 18, 0},
    {refalrts::icSpliceTile, 15, 16, 0},
    {refalrts::icSpliceTile, 7, 11, 0},
    {refalrts::icReturnResult_NoTrash, 0, 0, 0},
    {refalrts::icOnFailGoTo, +19, 0, 0},
    //(E )(#CmdiInitB0)
    // </0 & GenCommand/4 (/7 e.Indent#1/5 )/8 (/11 # CmdiInitB0/13 )/12 >/1
    {refalrts::icIdentTerm, 0, 39, 13},
    {refalrts::icSave, 0, 66, 9},
    {refalrts::icEmpty, 0, 0, 66},
    // closed e.Indent#1 as range 5
    {refalrts::icEmptyResult, 0, 0, 0},
    //TRASH: {REMOVED TILE}  {REMOVED TILE}  {REMOVED TILE}  {REMOVED TILE} 
    //RESULT: Tile{ [[ } Tile{ AsIs: (/7 AsIs: e.Indent#1/5 AsIs: )/8 AsIs: (/11 } e.Indent#1/5/14 Tile{ HalfReuse: '{'/0 HalfReuse: 'r'/4 }"efalrts::icInitB0, 0, 0, 0"/16 Tile{ HalfReuse: '}'/13 HalfReuse: ','/12 HalfReuse: )/1 ]] }
    {refalrts::icCopyEVar, 14, 5, 0},
    {refalrts::icAllocString, 0, 51, 16},
    {refalrts::icReinitChar, 0, '{', 0},
    {refalrts::icReinitChar, 0, 'r', 4},
    {refalrts::icReinitChar, 0, '}', 13},
    {refalrts::icReinitChar, 0, ',', 12},
    {refalrts::icReinitBracket, 0, refalrts::ibCloseBracket, 1},
    {refalrts::icLinkBrackets, 11, 1, 0},
    {refalrts::icLinkBrackets, 7, 8, 0},
    {refalrts::icSetRes, 0, 0, 13},
    {refalrts::icSpliceTile, 16, 17, 0},
    {refalrts::icSpliceTile, 0, 4, 0},
    {refalrts::icSpliceTile, 14, 15, 0},
    {refalrts::icSpliceTile, 7, 11, 0},
    {refalrts::icReturnResult_NoTrash, 0, 0, 0},
    {refalrts::icOnFailGoTo, +19, 0, 0},
    //(E )(#CmdiInitB0_Lite)
    // </0 & GenCommand/4 (/7 e.Indent#1/5 )/8 (/11 # CmdiInitB0_Lite/13 )/12 >/1
    {refalrts::icIdentTerm, 0, 38, 13},
    {refalrts::icSave, 0, 66, 9},
    {refalrts::icEmpty, 0, 0, 66},
    // closed e.Indent#1 as range 5
    {refalrts::icEmptyResult, 0, 0, 0},
    //TRASH: {REMOVED TILE}  {REMOVED TILE}  {REMOVED TILE}  {REMOVED TILE} 
    //RESULT: Tile{ [[ } Tile{ AsIs: (/7 AsIs: e.Indent#1/5 AsIs: )/8 AsIs: (/11 } e.Indent#1/5/14 Tile{ HalfReuse: '{'/0 HalfReuse: 'r'/4 }"efalrts::icInitB0_Lite, 0, 0, 0"/16 Tile{ HalfReuse: '}'/13 HalfReuse: ','/12 HalfReuse: )/1 ]] }
    {refalrts::icCopyEVar, 14, 5, 0},
    {refalrts::icAllocString, 0, 50, 16},
    {refalrts::icReinitChar, 0, '{', 0},
    {refalrts::icReinitChar, 0, 'r', 4},
    {refalrts::icReinitChar, 0, '}', 13},
    {refalrts::icReinitChar, 0, ',', 12},
    {refalrts::icReinitBracket, 0, refalrts::ibCloseBracket, 1},
    {refalrts::icLinkBrackets, 11, 1, 0},
    {refalrts::icLinkBrackets, 7, 8, 0},
    {refalrts::icSetRes, 0, 0, 13},
    {refalrts::icSpliceTile, 16, 17, 0},
    {refalrts::icSpliceTile, 0, 4, 0},
    {refalrts::icSpliceTile, 14, 15, 0},
    {refalrts::icSpliceTile, 7, 11, 0},
    {refalrts::icReturnResult_NoTrash, 0, 0, 0},
    {refalrts::icOnFailGoTo, +46, 0, 0},
    //(E )(#CmdiCharS S S )
    // </0 & GenCommand/4 (/7 e.Indent#1/5 )/8 (/11 # CmdiChar/13 s.Direction#1/14 s.BracketNumber#1/15 s.Char#1/16 )/12 >/1
    {refalrts::icIdentTerm, 0, 37, 13},
    // closed e.Indent#1 as range 5
    {refalrts::icSave, 0, 66, 9},
    {refalrts::icsVarLeft, 0, 14, 66},
    {refalrts::icsVarLeft, 0, 15, 66},
    {refalrts::icsVarLeft, 0, 16, 66},
    {refalrts::icEmpty, 0, 0, 66},
    {refalrts::icEmptyResult, 0, 0, 0},
    //TRASH: {REMOVED TILE}  {REMOVED TILE}  {REMOVED TILE}  {REMOVED TILE}  {REMOVED TILE}  {REMOVED TILE}  {REMOVED TILE}  {REMOVED TILE} 
    //RESULT: Tile{ [[ } Tile{ AsIs: (/7 AsIs: e.Indent#1/5 AsIs: )/8 AsIs: (/11 } e.Indent#1/5/17"{ref"/19 Tile{ HalfReuse: 'a'/13 }"lrts::icChar"/21 Tile{ AsIs: </0 Reuse: & PrintDirection/4 } Tile{ AsIs: s.Direction#1/14 } >/23", 0, static_cast<unsigned char>(\'"/24 </26 & Escape/27 Tile{ AsIs: s.Char#1/16 HalfReuse: >/12 HalfReuse: '\''/1 }"), "/28 </30 & StrFromInt/31 Tile{ AsIs: s.BracketNumber#1/15 } >/32"},"/33 )/35 Tile{ ]] }
    {refalrts::icCopyEVar, 17, 5, 0},
    {refalrts::icAllocString, 0, 16, 19},
    {refalrts::icAllocString, 0, 49, 21},
    {refalrts::icAllocBracket, 0, refalrts::ibCloseCall, 23},
    {refalrts::icAllocString, 0, 48, 24},
    {refalrts::icAllocBracket, 0, refalrts::ibOpenCall, 26},
    {refalrts::icAllocFunc, 0, 7, 27},
    {refalrts::icAllocString, 0, 45, 28},
    {refalrts::icAllocBracket, 0, refalrts::ibOpenCall, 30},
    {refalrts::icAllocFunc, 0, 3, 31},
    {refalrts::icAllocBracket, 0, refalrts::ibCloseCall, 32},
    {refalrts::icAllocString, 0, 13, 33},
    {refalrts::icAllocBracket, 0, refalrts::ibCloseBracket, 35},
    {refalrts::icReinitChar, 0, 'a', 13},
    {refalrts::icUpdateFunc, 0, 6, 4},
    {refalrts::icReinitBracket, 0, refalrts::ibCloseCall, 12},
    {refalrts::icReinitChar, 0, '\'', 1},
    {refalrts::icLinkBrackets, 11, 35, 0},
    {refalrts::icPushStack, 0, 0, 32},
    {refalrts::icPushStack, 0, 0, 30},
    {refalrts::icPushStack, 0, 0, 12},
    {refalrts::icPushStack, 0, 0, 26},
    {refalrts::icPushStack, 0, 0, 23},
    {refalrts::icPushStack, 0, 0, 0},
    {refalrts::icLinkBrackets, 7, 8, 0},
    {refalrts::icSetResRightEdge, 0, 0, 0},
    {refalrts::icSpliceTile, 32, 35, 0},
    {refalrts::icSpliceTile, 15, 15, 0},
    {refalrts::icSpliceTile, 28, 31, 0},
    {refalrts::icSpliceTile, 16, 1, 0},
    {refalrts::icSpliceTile, 23, 27, 0},
    {refalrts::icSpliceTile, 14, 14, 0},
    {refalrts::icSpliceTile, 0, 4, 0},
    {refalrts::icSpliceTile, 21, 22, 0},
    {refalrts::icSpliceTile, 13, 13, 0},
    {refalrts::icSpliceTile, 19, 20, 0},
    {refalrts::icSpliceTile, 17, 18, 0},
    {refalrts::icSpliceTile, 7, 11, 0},
    {refalrts::icReturnResult_NoTrash, 0, 0, 0},
    {refalrts::icOnFailGoTo, +55, 0, 0},
    //(E )(#CmdiCharSaveS S S S )
    // </0 & GenCommand/4 (/7 e.Indent#1/5 )/8 (/11 # CmdiCharSave/13 s.Direction#1/14 s.BracketNumber#1/15 s.SaveOffset#1/16 s.Char#1/17 )/12 >/1
    {refalrts::icIdentTerm, 0, 36, 13},
    // closed e.Indent#1 as range 5
    {refalrts::icSave, 0, 66, 9},
    {refalrts::icsVarLeft, 0, 14, 66},
    {refalrts::icsVarLeft, 0, 15, 66},
    {refalrts::icsVarLeft, 0, 16, 66},
    {refalrts::icsVarLeft, 0, 17, 66},
    {refalrts::icEmpty, 0, 0, 66},
    {refalrts::icEmptyResult, 0, 0, 0},
    //TRASH: {REMOVED TILE}  {REMOVED TILE}  {REMOVED TILE}  {REMOVED TILE}  {REMOVED TILE}  {REMOVED TILE}  {REMOVED TILE}  {REMOVED TILE}  {REMOVED TILE} 
    //RESULT: Tile{ [[ } Tile{ AsIs: (/7 AsIs: e.Indent#1/5 AsIs: )/8 AsIs: (/11 } e.Indent#1/5/18"{refa"/20 Tile{ HalfReuse: 'l'/13 }"rts::icChar"/22 Tile{ AsIs: </0 Reuse: & PrintDirection/4 } Tile{ AsIs: s.Direction#1/14 } >/24"Save, "/25 </27 & StrFromInt/28 Tile{ AsIs: s.SaveOffset#1/16 } >/29", static_cast<unsigned char>(\'"/30 </32 & Escape/33 Tile{ AsIs: s.Char#1/17 HalfReuse: >/12 HalfReuse: '\''/1 }"), "/34 </36 & StrFromInt/37 Tile{ AsIs: s.BracketNumber#1/15 } >/38"},"/39 )/41 Tile{ ]] }
    {refalrts::icCopyEVar, 18, 5, 0},
    {refalrts::icAllocString, 0, 30, 20},
    {refalrts::icAllocString, 0, 47, 22},
    {refalrts::icAllocBracket, 0, refalrts::ibCloseCall, 24},
    {refalrts::icAllocString, 0, 22, 25},
    {refalrts::icAllocBracket, 0, refalrts::ibOpenCall, 27},
    {refalrts::icAllocFunc, 0, 3, 28},
    {refalrts::icAllocBracket, 0, refalrts::ibCloseCall, 29},
    {refalrts::icAllocString, 0, 46, 30},
    {refalrts::icAllocBracket, 0, refalrts::ibOpenCall, 32},
    {refalrts::icAllocFunc, 0, 7, 33},
    {refalrts::icAllocString, 0, 45, 34},
    {refalrts::icAllocBracket, 0, refalrts::ibOpenCall, 36},
    {refalrts::icAllocFunc, 0, 3, 37},
    {refalrts::icAllocBracket, 0, refalrts::ibCloseCall, 38},
    {refalrts::icAllocString, 0, 13, 39},
    {refalrts::icAllocBracket, 0, refalrts::ibCloseBracket, 41},
    {refalrts::icReinitChar, 0, 'l', 13},
    {refalrts::icUpdateFunc, 0, 6, 4},
    {refalrts::icReinitBracket, 0, refalrts::ibCloseCall, 12},
    {refalrts::icReinitChar, 0, '\'', 1},
    {refalrts::icLinkBrackets, 11, 41, 0},
    {refalrts::icPushStack, 0, 0, 38},
    {refalrts::icPushStack, 0, 0, 36},
    {refalrts::icPushStack, 0, 0, 12},
    {refalrts::icPushStack, 0, 0, 32},
    {refalrts::icPushStack, 0, 0, 29},
    {refalrts::icPushStack, 0, 0, 27},
    {refalrts::icPushStack, 0, 0, 24},
    {refalrts::icPushStack, 0, 0, 0},
    {refalrts::icLinkBrackets, 7, 8, 0},
    {refalrts::icSetResRightEdge, 0, 0, 0},
    {refalrts::icSpliceTile, 38, 41, 0},
    {refalrts::icSpliceTile, 15, 15, 0},
    {refalrts::icSpliceTile, 34, 37, 0},
    {refalrts::icSpliceTile, 17, 1, 0},
    {refalrts::icSpliceTile, 29, 33, 0},
    {refalrts::icSpliceTile, 16, 16, 0},
    {refalrts::icSpliceTile, 24, 28, 0},
    {refalrts::icSpliceTile, 14, 14, 0},
    {refalrts::icSpliceTile, 0, 4, 0},
    {refalrts::icSpliceTile, 22, 23, 0},
    {refalrts::icSpliceTile, 13, 13, 0},
    {refalrts::icSpliceTile, 20, 21, 0},
    {refalrts::icSpliceTile, 18, 19, 0},
    {refalrts::icSpliceTile, 7, 11, 0},
    {refalrts::icReturnResult_NoTrash, 0, 0, 0},
    {refalrts::icOnFailGoTo, +46, 0, 0},
    //(E )(#CmdiNumS S S )
    // </0 & GenCommand/4 (/7 e.Indent#1/5 )/8 (/11 # CmdiNum/13 s.Direction#1/14 s.BracketNumber#1/15 s.Number#1/16 )/12 >/1
    {refalrts::icIdentTerm, 0, 35, 13},
    // closed e.Indent#1 as range 5
    {refalrts::icSave, 0, 66, 9},
    {refalrts::icsVarLeft, 0, 14, 66},
    {refalrts::icsVarLeft, 0, 15, 66},
    {refalrts::icsVarLeft, 0, 16, 66},
    {refalrts::icEmpty, 0, 0, 66},
    {refalrts::icEmptyResult, 0, 0, 0},
    //TRASH: {REMOVED TILE}  {REMOVED TILE}  {REMOVED TILE}  {REMOVED TILE}  {REMOVED TILE}  {REMOVED TILE}  {REMOVED TILE}  {REMOVED TILE} 
    //RESULT: Tile{ [[ } Tile{ AsIs: (/7 AsIs: e.Indent#1/5 AsIs: )/8 AsIs: (/11 } e.Indent#1/5/17"{ref"/19 Tile{ HalfReuse: 'a'/13 }"lrts::icNum"/21 Tile{ AsIs: </0 Reuse: & PrintDirection/4 } Tile{ AsIs: s.Direction#1/14 } >/23", 0, "/24 </26 & StrFromInt/27 Tile{ AsIs: s.Number#1/16 HalfReuse: >/12 HalfReuse: ','/1 } ' '/28 </29 & StrFromInt/30 Tile{ AsIs: s.BracketNumber#1/15 } >/31"},"/32 )/34 Tile{ ]] }
    {refalrts::icCopyEVar, 17, 5, 0},
    {refalrts::icAllocString, 0, 16, 19},
    {refalrts::icAllocString, 0, 44, 21},
    {refalrts::icAllocBracket, 0, refalrts::ibCloseCall, 23},
    {refalrts::icAllocString, 0, 31, 24},
    {refalrts::icAllocBracket, 0, refalrts::ibOpenCall, 26},
    {refalrts::icAllocFunc, 0, 3, 27},
    {refalrts::icAllocChar, 0, ' ', 28},
    {refalrts::icAllocBracket, 0, refalrts::ibOpenCall, 29},
    {refalrts::icAllocFunc, 0, 3, 30},
    {refalrts::icAllocBracket, 0, refalrts::ibCloseCall, 31},
    {refalrts::icAllocString, 0, 13, 32},
    {refalrts::icAllocBracket, 0, refalrts::ibCloseBracket, 34},
    {refalrts::icReinitChar, 0, 'a', 13},
    {refalrts::icUpdateFunc, 0, 6, 4},
    {refalrts::icReinitBracket, 0, refalrts::ibCloseCall, 12},
    {refalrts::icReinitChar, 0, ',', 1},
    {refalrts::icLinkBrackets, 11, 34, 0},
    {refalrts::icPushStack, 0, 0, 31},
    {refalrts::icPushStack, 0, 0, 29},
    {refalrts::icPushStack, 0, 0, 12},
    {refalrts::icPushStack, 0, 0, 26},
    {refalrts::icPushStack, 0, 0, 23},
    {refalrts::icPushStack, 0, 0, 0},
    {refalrts::icLinkBrackets, 7, 8, 0},
    {refalrts::icSetResRightEdge, 0, 0, 0},
    {refalrts::icSpliceTile, 31, 34, 0},
    {refalrts::icSpliceTile, 15, 15, 0},
    {refalrts::icSpliceTile, 28, 30, 0},
    {refalrts::icSpliceTile, 16, 1, 0},
    {refalrts::icSpliceTile, 23, 27, 0},
    {refalrts::icSpliceTile, 14, 14, 0},
    {refalrts::icSpliceTile, 0, 4, 0},
    {refalrts::icSpliceTile, 21, 22, 0},
    {refalrts::icSpliceTile, 13, 13, 0},
    {refalrts::icSpliceTile, 19, 20, 0},
    {refalrts::icSpliceTile, 17, 18, 0},
    {refalrts::icSpliceTile, 7, 11, 0},
    {refalrts::icReturnResult_NoTrash, 0, 0, 0},
    {refalrts::icOnFailGoTo, +55, 0, 0},
    //(E )(#CmdiNumSaveS S S S )
    // </0 & GenCommand/4 (/7 e.Indent#1/5 )/8 (/11 # CmdiNumSave/13 s.Direction#1/14 s.BracketNumber#1/15 s.SaveOffset#1/16 s.Number#1/17 )/12 >/1
    {refalrts::icIdentTerm, 0, 34, 13},
    // closed e.Indent#1 as range 5
    {refalrts::icSave, 0, 66, 9},
    {refalrts::icsVarLeft, 0, 14, 66},
    {refalrts::icsVarLeft, 0, 15, 66},
    {refalrts::icsVarLeft, 0, 16, 66},
    {refalrts::icsVarLeft, 0, 17, 66},
    {refalrts::icEmpty, 0, 0, 66},
    {refalrts::icEmptyResult, 0, 0, 0},
    //TRASH: {REMOVED TILE}  {REMOVED TILE}  {REMOVED TILE}  {REMOVED TILE}  {REMOVED TILE}  {REMOVED TILE}  {REMOVED TILE}  {REMOVED TILE}  {REMOVED TILE} 
    //RESULT: Tile{ [[ } Tile{ AsIs: (/7 AsIs: e.Indent#1/5 AsIs: )/8 AsIs: (/11 } e.Indent#1/5/18"{refa"/20 Tile{ HalfReuse: 'l'/13 }"rts::icNum"/22 Tile{ AsIs: </0 Reuse: & PrintDirection/4 } Tile{ AsIs: s.Direction#1/14 } >/24"Save, "/25 </27 & StrFromInt/28 Tile{ AsIs: s.SaveOffset#1/16 } >/29", "/30 </32 & StrFromInt/33 Tile{ AsIs: s.Number#1/17 HalfReuse: >/12 HalfReuse: ','/1 } ' '/34 </35 & StrFromInt/36 Tile{ AsIs: s.BracketNumber#1/15 } >/37"},"/38 )/40 Tile{ ]] }
    {refalrts::icCopyEVar, 18, 5, 0},
    {refalrts::icAllocString, 0, 30, 20},
    {refalrts::icAllocString, 0, 43, 22},
    {refalrts::icAllocBracket, 0, refalrts::ibCloseCall, 24},
    {refalrts::icAllocString, 0, 22, 25},
    {refalrts::icAllocBracket, 0, refalrts::ibOpenCall, 27},
    {refalrts::icAllocFunc, 0, 3, 28},
    {refalrts::icAllocBracket, 0, refalrts::ibCloseCall, 29},
    {refalrts::icAllocString, 0, 4, 30},
    {refalrts::icAllocBracket, 0, refalrts::ibOpenCall, 32},
    {refalrts::icAllocFunc, 0, 3, 33},
    {refalrts::icAllocChar, 0, ' ', 34},
    {refalrts::icAllocBracket, 0, refalrts::ibOpenCall, 35},
    {refalrts::icAllocFunc, 0, 3, 36},
    {refalrts::icAllocBracket, 0, refalrts::ibCloseCall, 37},
    {refalrts::icAllocString, 0, 13, 38},
    {refalrts::icAllocBracket, 0, refalrts::ibCloseBracket, 40},
    {refalrts::icReinitChar, 0, 'l', 13},
    {refalrts::icUpdateFunc, 0, 6, 4},
    {refalrts::icReinitBracket, 0, refalrts::ibCloseCall, 12},
    {refalrts::icReinitChar, 0, ',', 1},
    {refalrts::icLinkBrackets, 11, 40, 0},
    {refalrts::icPushStack, 0, 0, 37},
    {refalrts::icPushStack, 0, 0, 35},
    {refalrts::icPushStack, 0, 0, 12},
    {refalrts::icPushStack, 0, 0, 32},
    {refalrts::icPushStack, 0, 0, 29},
    {refalrts::icPushStack, 0, 0, 27},
    {refalrts::icPushStack, 0, 0, 24},
    {refalrts::icPushStack, 0, 0, 0},
    {refalrts::icLinkBrackets, 7, 8, 0},
    {refalrts::icSetResRightEdge, 0, 0, 0},
    {refalrts::icSpliceTile, 37, 40, 0},
    {refalrts::icSpliceTile, 15, 15, 0},
    {refalrts::icSpliceTile, 34, 36, 0},
    {refalrts::icSpliceTile, 17, 1, 0},
    {refalrts::icSpliceTile, 29, 33, 0},
    {refalrts::icSpliceTile, 16, 16, 0},
    {refalrts::icSpliceTile, 24, 28, 0},
    {refalrts::icSpliceTile, 14, 14, 0},
    {refalrts::icSpliceTile, 0, 4, 0},
    {refalrts::icSpliceTile, 22, 23, 0},
    {refalrts::icSpliceTile, 13, 13, 0},
    {refalrts::icSpliceTile, 20, 21, 0},
    {refalrts::icSpliceTile, 18, 19, 0},
    {refalrts::icSpliceTile, 7, 11, 0},
    {refalrts::icReturnResult_NoTrash, 0, 0, 0},
    {refalrts::icOnFailGoTo, +46, 0, 0},
    //(E )(#CmdiHugeNumS S S )
    // </0 & GenCommand/4 (/7 e.Indent#1/5 )/8 (/11 # CmdiHugeNum/13 s.Direction#1/14 s.BracketNumber#1/15 s.Number#1/16 )/12 >/1
    {refalrts::icIdentTerm, 0, 33, 13},
    // closed e.Indent#1 as range 5
    {refalrts::icSave, 0, 66, 9},
    {refalrts::icsVarLeft, 0, 14, 66},
    {refalrts::icsVarLeft, 0, 15, 66},
    {refalrts::icsVarLeft, 0, 16, 66},
    {refalrts::icEmpty, 0, 0, 66},
    {refalrts::icEmptyResult, 0, 0, 0},
    //TRASH: {REMOVED TILE}  {REMOVED TILE}  {REMOVED TILE}  {REMOVED TILE}  {REMOVED TILE}  {REMOVED TILE}  {REMOVED TILE}  {REMOVED TILE} 
    //RESULT: Tile{ [[ } Tile{ AsIs: (/7 AsIs: e.Indent#1/5 AsIs: )/8 AsIs: (/11 } e.Indent#1/5/17"{ref"/19 Tile{ HalfReuse: 'a'/13 }"lrts::icHugeNum"/21 Tile{ AsIs: </0 Reuse: & PrintDirection/4 } Tile{ AsIs: s.Direction#1/14 } >/23", 0, "/24 </26 & StrFromInt/27 Tile{ AsIs: s.Number#1/16 HalfReuse: >/12 HalfReuse: ','/1 } ' '/28 </29 & StrFromInt/30 Tile{ AsIs: s.BracketNumber#1/15 } >/31"},"/32 )/34 Tile{ ]] }
    {refalrts::icCopyEVar, 17, 5, 0},
    {refalrts::icAllocString, 0, 16, 19},
    {refalrts::icAllocString, 0, 42, 21},
    {refalrts::icAllocBracket, 0, refalrts::ibCloseCall, 23},
    {refalrts::icAllocString, 0, 31, 24},
    {refalrts::icAllocBracket, 0, refalrts::ibOpenCall, 26},
    {refalrts::icAllocFunc, 0, 3, 27},
    {refalrts::icAllocChar, 0, ' ', 28},
    {refalrts::icAllocBracket, 0, refalrts::ibOpenCall, 29},
    {refalrts::icAllocFunc, 0, 3, 30},
    {refalrts::icAllocBracket, 0, refalrts::ibCloseCall, 31},
    {refalrts::icAllocString, 0, 13, 32},
    {refalrts::icAllocBracket, 0, refalrts::ibCloseBracket, 34},
    {refalrts::icReinitChar, 0, 'a', 13},
    {refalrts::icUpdateFunc, 0, 6, 4},
    {refalrts::icReinitBracket, 0, refalrts::ibCloseCall, 12},
    {refalrts::icReinitChar, 0, ',', 1},
    {refalrts::icLinkBrackets, 11, 34, 0},
    {refalrts::icPushStack, 0, 0, 31},
    {refalrts::icPushStack, 0, 0, 29},
    {refalrts::icPushStack, 0, 0, 12},
    {refalrts::icPushStack, 0, 0, 26},
    {refalrts::icPushStack, 0, 0, 23},
    {refalrts::icPushStack, 0, 0, 0},
    {refalrts::icLinkBrackets, 7, 8, 0},
    {refalrts::icSetResRightEdge, 0, 0, 0},
    {refalrts::icSpliceTile, 31, 34, 0},
    {refalrts::icSpliceTile, 15, 15, 0},
    {refalrts::icSpliceTile, 28, 30, 0},
    {refalrts::icSpliceTile, 16, 1, 0},
    {refalrts::icSpliceTile, 23, 27, 0},
    {refalrts::icSpliceTile, 14, 14, 0},
    {refalrts::icSpliceTile, 0, 4, 0},
    {refalrts::icSpliceTile, 21, 22, 0},
    {refalrts::icSpliceTile, 13, 13, 0},
    {refalrts::icSpliceTile, 19, 20, 0},
    {refalrts::icSpliceTile, 17, 18, 0},
    {refalrts::icSpliceTile, 7, 11, 0},
    {refalrts::icReturnResult_NoTrash, 0, 0, 0},
    {refalrts::icOnFailGoTo, +55, 0, 0},
    //(E )(#CmdiHugeNumSaveS S S S )
    // </0 & GenCommand/4 (/7 e.Indent#1/5 )/8 (/11 # CmdiHugeNumSave/13 s.Direction#1/14 s.BracketNumber#1/15 s.SaveOffset#1/16 s.Number#1/17 )/12 >/1
    {refalrts::icIdentTerm, 0, 32, 13},
    // closed e.Indent#1 as range 5
    {refalrts::icSave, 0, 66, 9},
    {refalrts::icsVarLeft, 0, 14, 66},
    {refalrts::icsVarLeft, 0, 15, 66},
    {refalrts::icsVarLeft, 0, 16, 66},
    {refalrts::icsVarLeft, 0, 17, 66},
    {refalrts::icEmpty, 0, 0, 66},
    {refalrts::icEmptyResult, 0, 0, 0},
    //TRASH: {REMOVED TILE}  {REMOVED TILE}  {REMOVED TILE}  {REMOVED TILE}  {REMOVED TILE}  {REMOVED TILE}  {REMOVED TILE}  {REMOVED TILE}  {REMOVED TILE} 
    //RESULT: Tile{ [[ } Tile{ AsIs: (/7 AsIs: e.Indent#1/5 AsIs: )/8 AsIs: (/11 } e.Indent#1/5/18"{refa"/20 Tile{ HalfReuse: 'l'/13 }"rts::icHugeNum"/22 Tile{ AsIs: </0 Reuse: & PrintDirection/4 } Tile{ AsIs: s.Direction#1/14 } >/24"Save, "/25 </27 & StrFromInt/28 Tile{ AsIs: s.SaveOffset#1/16 } >/29", "/30 </32 & StrFromInt/33 Tile{ AsIs: s.Number#1/17 HalfReuse: >/12 HalfReuse: ','/1 } ' '/34 </35 & StrFromInt/36 Tile{ AsIs: s.BracketNumber#1/15 } >/37"},"/38 )/40 Tile{ ]] }
    {refalrts::icCopyEVar, 18, 5, 0},
    {refalrts::icAllocString, 0, 30, 20},
    {refalrts::icAllocString, 0, 41, 22},
    {refalrts::icAllocBracket, 0, refalrts::ibCloseCall, 24},
    {refalrts::icAllocString, 0, 22, 25},
    {refalrts::icAllocBracket, 0, refalrts::ibOpenCall, 27},
    {refalrts::icAllocFunc, 0, 3, 28},
    {refalrts::icAllocBracket, 0, refalrts::ibCloseCall, 29},
    {refalrts::icAllocString, 0, 4, 30},
    {refalrts::icAllocBracket, 0, refalrts::ibOpenCall, 32},
    {refalrts::icAllocFunc, 0, 3, 33},
    {refalrts::icAllocChar, 0, ' ', 34},
    {refalrts::icAllocBracket, 0, refalrts::ibOpenCall, 35},
    {refalrts::icAllocFunc, 0, 3, 36},
    {refalrts::icAllocBracket, 0, refalrts::ibCloseCall, 37},
    {refalrts::icAllocString, 0, 13, 38},
    {refalrts::icAllocBracket, 0, refalrts::ibCloseBracket, 40},
    {refalrts::icReinitChar, 0, 'l', 13},
    {refalrts::icUpdateFunc, 0, 6, 4},
    {refalrts::icReinitBracket, 0, refalrts::ibCloseCall, 12},
    {refalrts::icReinitChar, 0, ',', 1},
    {refalrts::icLinkBrackets, 11, 40, 0},
    {refalrts::icPushStack, 0, 0, 37},
    {refalrts::icPushStack, 0, 0, 35},
    {refalrts::icPushStack, 0, 0, 12},
    {refalrts::icPushStack, 0, 0, 32},
    {refalrts::icPushStack, 0, 0, 29},
    {refalrts::icPushStack, 0, 0, 27},
    {refalrts::icPushStack, 0, 0, 24},
    {refalrts::icPushStack, 0, 0, 0},
    {refalrts::icLinkBrackets, 7, 8, 0},
    {refalrts::icSetResRightEdge, 0, 0, 0},
    {refalrts::icSpliceTile, 37, 40, 0},
    {refalrts::icSpliceTile, 15, 15, 0},
    {refalrts::icSpliceTile, 34, 36, 0},
    {refalrts::icSpliceTile, 17, 1, 0},
    {refalrts::icSpliceTile, 29, 33, 0},
    {refalrts::icSpliceTile, 16, 16, 0},
    {refalrts::icSpliceTile, 24, 28, 0},
    {refalrts::icSpliceTile, 14, 14, 0},
    {refalrts::icSpliceTile, 0, 4, 0},
    {refalrts::icSpliceTile, 22, 23, 0},
    {refalrts::icSpliceTile, 13, 13, 0},
    {refalrts::icSpliceTile, 20, 21, 0},
    {refalrts::icSpliceTile, 18, 19, 0},
    {refalrts::icSpliceTile, 7, 11, 0},
    {refalrts::icReturnResult_NoTrash, 0, 0, 0},
    {refalrts::icOnFailGoTo, +46, 0, 0},
    //(E )(#CmdiNameS S S )
    // </0 & GenCommand/4 (/7 e.Indent#1/5 )/8 (/11 # CmdiName/13 s.Direction#1/14 s.BracketNumber#1/15 s.NameId#1/16 )/12 >/1
    {refalrts::icIdentTerm, 0, 31, 13},
    // closed e.Indent#1 as range 5
    {refalrts::icSave, 0, 66, 9},
    {refalrts::icsVarLeft, 0, 14, 66},
    {refalrts::icsVarLeft, 0, 15, 66},
    {refalrts::icsVarLeft, 0, 16, 66},
    {refalrts::icEmpty, 0, 0, 66},
    {refalrts::icEmptyResult, 0, 0, 0},
    //TRASH: {REMOVED TILE}  {REMOVED TILE}  {REMOVED TILE}  {REMOVED TILE}  {REMOVED TILE}  {REMOVED TILE}  {REMOVED TILE}  {REMOVED TILE} 
    //RESULT: Tile{ [[ } Tile{ AsIs: (/7 AsIs: e.Indent#1/5 AsIs: )/8 AsIs: (/11 } e.Indent#1/5/17"{ref"/19 Tile{ HalfReuse: 'a'/13 }"lrts::icFunc"/21 Tile{ AsIs: </0 Reuse: & PrintDirection/4 } Tile{ AsIs: s.Direction#1/14 } >/23", 0, "/24 </26 & StrFromInt/27 Tile{ AsIs: s.NameId#1/16 HalfReuse: >/12 HalfReuse: ','/1 } ' '/28 </29 & StrFromInt/30 Tile{ AsIs: s.BracketNumber#1/15 } >/31"},"/32 )/34 Tile{ ]] }
    {refalrts::icCopyEVar, 17, 5, 0},
    {refalrts::icAllocString, 0, 16, 19},
    {refalrts::icAllocString, 0, 40, 21},
    {refalrts::icAllocBracket, 0, refalrts::ibCloseCall, 23},
    {refalrts::icAllocString, 0, 31, 24},
    {refalrts::icAllocBracket, 0, refalrts::ibOpenCall, 26},
    {refalrts::icAllocFunc, 0, 3, 27},
    {refalrts::icAllocChar, 0, ' ', 28},
    {refalrts::icAllocBracket, 0, refalrts::ibOpenCall, 29},
    {refalrts::icAllocFunc, 0, 3, 30},
    {refalrts::icAllocBracket, 0, refalrts::ibCloseCall, 31},
    {refalrts::icAllocString, 0, 13, 32},
    {refalrts::icAllocBracket, 0, refalrts::ibCloseBracket, 34},
    {refalrts::icReinitChar, 0, 'a', 13},
    {refalrts::icUpdateFunc, 0, 6, 4},
    {refalrts::icReinitBracket, 0, refalrts::ibCloseCall, 12},
    {refalrts::icReinitChar, 0, ',', 1},
    {refalrts::icLinkBrackets, 11, 34, 0},
    {refalrts::icPushStack, 0, 0, 31},
    {refalrts::icPushStack, 0, 0, 29},
    {refalrts::icPushStack, 0, 0, 12},
    {refalrts::icPushStack, 0, 0, 26},
    {refalrts::icPushStack, 0, 0, 23},
    {refalrts::icPushStack, 0, 0, 0},
    {refalrts::icLinkBrackets, 7, 8, 0},
    {refalrts::icSetResRightEdge, 0, 0, 0},
    {refalrts::icSpliceTile, 31, 34, 0},
    {refalrts::icSpliceTile, 15, 15, 0},
    {refalrts::icSpliceTile, 28, 30, 0},
    {refalrts::icSpliceTile, 16, 1, 0},
    {refalrts::icSpliceTile, 23, 27, 0},
    {refalrts::icSpliceTile, 14, 14, 0},
    {refalrts::icSpliceTile, 0, 4, 0},
    {refalrts::icSpliceTile, 21, 22, 0},
    {refalrts::icSpliceTile, 13, 13, 0},
    {refalrts::icSpliceTile, 19, 20, 0},
    {refalrts::icSpliceTile, 17, 18, 0},
    {refalrts::icSpliceTile, 7, 11, 0},
    {refalrts::icReturnResult_NoTrash, 0, 0, 0},
    {refalrts::icOnFailGoTo, +55, 0, 0},
    //(E )(#CmdiNameSaveS S S S )
    // </0 & GenCommand/4 (/7 e.Indent#1/5 )/8 (/11 # CmdiNameSave/13 s.Direction#1/14 s.BracketNumber#1/15 s.SaveOffset#1/16 s.NameId#1/17 )/12 >/1
    {refalrts::icIdentTerm, 0, 30, 13},
    // closed e.Indent#1 as range 5
    {refalrts::icSave, 0, 66, 9},
    {refalrts::icsVarLeft, 0, 14, 66},
    {refalrts::icsVarLeft, 0, 15, 66},
    {refalrts::icsVarLeft, 0, 16, 66},
    {refalrts::icsVarLeft, 0, 17, 66},
    {refalrts::icEmpty, 0, 0, 66},
    {refalrts::icEmptyResult, 0, 0, 0},
    //TRASH: {REMOVED TILE}  {REMOVED TILE}  {REMOVED TILE}  {REMOVED TILE}  {REMOVED TILE}  {REMOVED TILE}  {REMOVED TILE}  {REMOVED TILE}  {REMOVED TILE} 
    //RESULT: Tile{ [[ } Tile{ AsIs: (/7 AsIs: e.Indent#1/5 AsIs: )/8 AsIs: (/11 } e.Indent#1/5/18"{refa"/20 Tile{ HalfReuse: 'l'/13 }"rts::icFunc"/22 Tile{ AsIs: </0 Reuse: & PrintDirection/4 } Tile{ AsIs: s.Direction#1/14 } >/24"Save, "/25 </27 & StrFromInt/28 Tile{ AsIs: s.SaveOffset#1/16 } >/29", "/30 </32 & StrFromInt/33 Tile{ AsIs: s.NameId#1/17 HalfReuse: >/12 HalfReuse: ','/1 } ' '/34 </35 & StrFromInt/36 Tile{ AsIs: s.BracketNumber#1/15 } >/37"},"/38 )/40 Tile{ ]] }
    {refalrts::icCopyEVar, 18, 5, 0},
    {refalrts::icAllocString, 0, 30, 20},
    {refalrts::icAllocString, 0, 39, 22},
    {refalrts::icAllocBracket, 0, refalrts::ibCloseCall, 24},
    {refalrts::icAllocString, 0, 22, 25},
    {refalrts::icAllocBracket, 0, refalrts::ibOpenCall, 27},
    {refalrts::icAllocFunc, 0, 3, 28},
    {refalrts::icAllocBracket, 0, refalrts::ibCloseCall, 29},
    {refalrts::icAllocString, 0, 4, 30},
    {refalrts::icAllocBracket, 0, refalrts::ibOpenCall, 32},
    {refalrts::icAllocFunc, 0, 3, 33},
    {refalrts::icAllocChar, 0, ' ', 34},
    {refalrts::icAllocBracket, 0, refalrts::ibOpenCall, 35},
    {refalrts::icAllocFunc, 0, 3, 36},
    {refalrts::icAllocBracket, 0, refalrts::ibCloseCall, 37},
    {refalrts::icAllocString, 0, 13, 38},
    {refalrts::icAllocBracket, 0, refalrts::ibCloseBracket, 40},
    {refalrts::icReinitChar, 0, 'l', 13},
    {refalrts::icUpdateFunc, 0, 6, 4},
    {refalrts::icReinitBracket, 0, refalrts::ibCloseCall, 12},
    {refalrts::icReinitChar, 0, ',', 1},
    {refalrts::icLinkBrackets, 11, 40, 0},
    {refalrts::icPushStack, 0, 0, 37},
    {refalrts::icPushStack, 0, 0, 35},
    {refalrts::icPushStack, 0, 0, 12},
    {refalrts::icPushStack, 0, 0, 32},
    {refalrts::icPushStack, 0, 0, 29},
    {refalrts::icPushStack, 0, 0, 27},
    {refalrts::icPushStack, 0, 0, 24},
    {refalrts::icPushStack, 0, 0, 0},
    {refalrts::icLinkBrackets, 7, 8, 0},
    {refalrts::icSetResRightEdge, 0, 0, 0},
    {refalrts::icSpliceTile, 37, 40, 0},
    {refalrts::icSpliceTile, 15, 15, 0},
    {refalrts::icSpliceTile, 34, 36, 0},
    {refalrts::icSpliceTile, 17, 1, 0},
    {refalrts::icSpliceTile, 29, 33, 0},
    {refalrts::icSpliceTile, 16, 16, 0},
    {refalrts::icSpliceTile, 24, 28, 0},
    {refalrts::icSpliceTile, 14, 14, 0},
    {refalrts::icSpliceTile, 0, 4, 0},
    {refalrts::icSpliceTile, 22, 23, 0},
    {refalrts::icSpliceTile, 13, 13, 0},
    {refalrts::icSpliceTile, 20, 21, 0},
    {refalrts::icSpliceTile, 18, 19, 0},
    {refalrts::icSpliceTile, 7, 11, 0},
    {refalrts::icReturnResult_NoTrash, 0, 0, 0},
    {refalrts::icOnFailGoTo, +46, 0, 0},
    //(E )(#CmdiIdentS S S )
    // </0 & GenCommand/4 (/7 e.Indent#1/5 )/8 (/11 # CmdiIdent/13 s.Direction#1/14 s.BracketNumber#1/15 s.NameId#1/16 )/12 >/1
    {refalrts::icIdentTerm, 0, 29, 13},
    // closed e.Indent#1 as range 5
    {refalrts::icSave, 0, 66, 9},
    {refalrts::icsVarLeft, 0, 14, 66},
    {refalrts::icsVarLeft, 0, 15, 66},
    {refalrts::icsVarLeft, 0, 16, 66},
    {refalrts::icEmpty, 0, 0, 66},
    {refalrts::icEmptyResult, 0, 0, 0},
    //TRASH: {REMOVED TILE}  {REMOVED TILE}  {REMOVED TILE}  {REMOVED TILE}  {REMOVED TILE}  {REMOVED TILE}  {REMOVED TILE}  {REMOVED TILE} 
    //RESULT: Tile{ [[ } Tile{ AsIs: (/7 AsIs: e.Indent#1/5 AsIs: )/8 AsIs: (/11 } e.Indent#1/5/17"{ref"/19 Tile{ HalfReuse: 'a'/13 }"lrts::icIdent"/21 Tile{ AsIs: </0 Reuse: & PrintDirection/4 } Tile{ AsIs: s.Direction#1/14 } >/23", 0, "/24 </26 & StrFromInt/27 Tile{ AsIs: s.NameId#1/16 HalfReuse: >/12 HalfReuse: ','/1 } ' '/28 </29 & StrFromInt/30 Tile{ AsIs: s.BracketNumber#1/15 } >/31"},"/32 )/34 Tile{ ]] }
    {refalrts::icCopyEVar, 17, 5, 0},
    {refalrts::icAllocString, 0, 16, 19},
    {refalrts::icAllocString, 0, 38, 21},
    {refalrts::icAllocBracket, 0, refalrts::ibCloseCall, 23},
    {refalrts::icAllocString, 0, 31, 24},
    {refalrts::icAllocBracket, 0, refalrts::ibOpenCall, 26},
    {refalrts::icAllocFunc, 0, 3, 27},
    {refalrts::icAllocChar, 0, ' ', 28},
    {refalrts::icAllocBracket, 0, refalrts::ibOpenCall, 29},
    {refalrts::icAllocFunc, 0, 3, 30},
    {refalrts::icAllocBracket, 0, refalrts::ibCloseCall, 31},
    {refalrts::icAllocString, 0, 13, 32},
    {refalrts::icAllocBracket, 0, refalrts::ibCloseBracket, 34},
    {refalrts::icReinitChar, 0, 'a', 13},
    {refalrts::icUpdateFunc, 0, 6, 4},
    {refalrts::icReinitBracket, 0, refalrts::ibCloseCall, 12},
    {refalrts::icReinitChar, 0, ',', 1},
    {refalrts::icLinkBrackets, 11, 34, 0},
    {refalrts::icPushStack, 0, 0, 31},
    {refalrts::icPushStack, 0, 0, 29},
    {refalrts::icPushStack, 0, 0, 12},
    {refalrts::icPushStack, 0, 0, 26},
    {refalrts::icPushStack, 0, 0, 23},
    {refalrts::icPushStack, 0, 0, 0},
    {refalrts::icLinkBrackets, 7, 8, 0},
    {refalrts::icSetResRightEdge, 0, 0, 0},
    {refalrts::icSpliceTile, 31, 34, 0},
    {refalrts::icSpliceTile, 15, 15, 0},
    {refalrts::icSpliceTile, 28, 30, 0},
    {refalrts::icSpliceTile, 16, 1, 0},
    {refalrts::icSpliceTile, 23, 27, 0},
    {refalrts::icSpliceTile, 14, 14, 0},
    {refalrts::icSpliceTile, 0, 4, 0},
    {refalrts::icSpliceTile, 21, 22, 0},
    {refalrts::icSpliceTile, 13, 13, 0},
    {refalrts::icSpliceTile, 19, 20, 0},
    {refalrts::icSpliceTile, 17, 18, 0},
    {refalrts::icSpliceTile, 7, 11, 0},
    {refalrts::icReturnResult_NoTrash, 0, 0, 0},
    {refalrts::icOnFailGoTo, +55, 0, 0},
    //(E )(#CmdiIdentSaveS S S S )
    // </0 & GenCommand/4 (/7 e.Indent#1/5 )/8 (/11 # CmdiIdentSave/13 s.Direction#1/14 s.BracketNumber#1/15 s.SaveOffset#1/16 s.NameId#1/17 )/12 >/1
    {refalrts::icIdentTerm, 0, 28, 13},
    // closed e.Indent#1 as range 5
    {refalrts::icSave, 0, 66, 9},
    {refalrts::icsVarLeft, 0, 14, 66},
    {refalrts::icsVarLeft, 0, 15, 66},
    {refalrts::icsVarLeft, 0, 16, 66},
    {refalrts::icsVarLeft, 0, 17, 66},
    {refalrts::icEmpty, 0, 0, 66},
    {refalrts::icEmptyResult, 0, 0, 0},
    //TRASH: {REMOVED TILE}  {REMOVED TILE}  {REMOVED TILE}  {REMOVED TILE}  {REMOVED TILE}  {REMOVED TILE}  {REMOVED TILE}  {REMOVED TILE}  {REMOVED TILE} 
    //RESULT: Tile{ [[ } Tile{ AsIs: (/7 AsIs: e.Indent#1/5 AsIs: )/8 AsIs: (/11 } e.Indent#1/5/18"{refa"/20 Tile{ HalfReuse: 'l'/13 }"rts::icIdent"/22 Tile{ AsIs: </0 Reuse: & PrintDirection/4 } Tile{ AsIs: s.Direction#1/14 } >/24"Save, "/25 </27 & StrFromInt/28 Tile{ AsIs: s.SaveOffset#1/16 } >/29", "/30 </32 & StrFromInt/33 Tile{ AsIs: s.NameId#1/17 HalfReuse: >/12 HalfReuse: ','/1 } ' '/34 </35 & StrFromInt/36 Tile{ AsIs: s.BracketNumber#1/15 } >/37"},"/38 )/40 Tile{ ]] }
    {refalrts::icCopyEVar, 18, 5, 0},
    {refalrts::icAllocString, 0, 30, 20},
    {refalrts::icAllocString, 0, 37, 22},
    {refalrts::icAllocBracket, 0, refalrts::ibCloseCall, 24},
    {refalrts::icAllocString, 0, 22, 25},
    {refalrts::icAllocBracket, 0, refalrts::ibOpenCall, 27},
    {refalrts::icAllocFunc, 0, 3, 28},
    {refalrts::icAllocBracket, 0, refalrts::ibCloseCall, 29},
    {refalrts::icAllocString, 0, 4, 30},
    {refalrts::icAllocBracket, 0, refalrts::ibOpenCall, 32},
    {refalrts::icAllocFunc, 0, 3, 33},
    {refalrts::icAllocChar, 0, ' ', 34},
    {refalrts::icAllocBracket, 0, refalrts::ibOpenCall, 35},
    {refalrts::icAllocFunc, 0, 3, 36},
    {refalrts::icAllocBracket, 0, refalrts::ibCloseCall, 37},
    {refalrts::icAllocString, 0, 13, 38},
    {refalrts::icAllocBracket, 0, refalrts::ibCloseBracket, 40},
    {refalrts::icReinitChar, 0, 'l', 13},
    {refalrts::icUpdateFunc, 0, 6, 4},
    {refalrts::icReinitBracket, 0, refalrts::ibCloseCall, 12},
    {refalrts::icReinitChar, 0, ',', 1},
    {refalrts::icLinkBrackets, 11, 40, 0},
    {refalrts::icPushStack, 0, 0, 37},
    {refalrts::icPushStack, 0, 0, 35},
    {refalrts::icPushStack, 0, 0, 12},
    {refalrts::icPushStack, 0, 0, 32},
    {refalrts::icPushStack, 0, 0, 29},
    {refalrts::icPushStack, 0, 0, 27},
    {refalrts::icPushStack, 0, 0, 24},
    {refalrts::icPushStack, 0, 0, 0},
    {refalrts::icLinkBrackets, 7, 8, 0},
    {refalrts::icSetResRightEdge, 0, 0, 0},
    {refalrts::icSpliceTile, 37, 40, 0},
    {refalrts::icSpliceTile, 15, 15, 0},
    {refalrts::icSpliceTile, 34, 36, 0},
    {refalrts::icSpliceTile, 17, 1, 0},
    {refalrts::icSpliceTile, 29, 33, 0},
    {refalrts::icSpliceTile, 16, 16, 0},
    {refalrts::icSpliceTile, 24, 28, 0},
    {refalrts::icSpliceTile, 14, 14, 0},
    {refalrts::icSpliceTile, 0, 4, 0},
    {refalrts::icSpliceTile, 22, 23, 0},
    {refalrts::icSpliceTile, 13, 13, 0},
    {refalrts::icSpliceTile, 20, 21, 0},
    {refalrts::icSpliceTile, 18, 19, 0},
    {refalrts::icSpliceTile, 7, 11, 0},
    {refalrts::icReturnResult_NoTrash, 0, 0, 0},
    {refalrts::icOnFailGoTo, +46, 0, 0},
    //(E )(#CmdiBracketS S S )
    // </0 & GenCommand/4 (/7 e.Indent#1/5 )/8 (/11 # CmdiBracket/13 s.Direction#1/14 s.Num#1/15 s.NumRanges#1/16 )/12 >/1
    {refalrts::icIdentTerm, 0, 27, 13},
    // closed e.Indent#1 as range 5
    {refalrts::icSave, 0, 66, 9},
    {refalrts::icsVarLeft, 0, 14, 66},
    {refalrts::icsVarLeft, 0, 15, 66},
    {refalrts::icsVarLeft, 0, 16, 66},
    {refalrts::icEmpty, 0, 0, 66},
    {refalrts::icEmptyResult, 0, 0, 0},
    //TRASH: {REMOVED TILE}  {REMOVED TILE}  {REMOVED TILE}  {REMOVED TILE}  {REMOVED TILE}  {REMOVED TILE}  {REMOVED TILE}  {REMOVED TILE} 
    //RESULT: Tile{ [[ } Tile{ AsIs: (/7 AsIs: e.Indent#1/5 AsIs: )/8 AsIs: (/11 } e.Indent#1/5/17"{ref"/19 Tile{ HalfReuse: 'a'/13 }"lrts::icBracket"/21 Tile{ AsIs: </0 Reuse: & PrintDirection/4 } Tile{ AsIs: s.Direction#1/14 } >/23", 0, "/24 </26 & StrFromInt/27 Tile{ AsIs: s.NumRanges#1/16 HalfReuse: >/12 HalfReuse: ','/1 } ' '/28 </29 & StrFromInt/30 Tile{ AsIs: s.Num#1/15 } >/31"},"/32 )/34 Tile{ ]] }
    {refalrts::icCopyEVar, 17, 5, 0},
    {refalrts::icAllocString, 0, 16, 19},
    {refalrts::icAllocString, 0, 36, 21},
    {refalrts::icAllocBracket, 0, refalrts::ibCloseCall, 23},
    {refalrts::icAllocString, 0, 31, 24},
    {refalrts::icAllocBracket, 0, refalrts::ibOpenCall, 26},
    {refalrts::icAllocFunc, 0, 3, 27},
    {refalrts::icAllocChar, 0, ' ', 28},
    {refalrts::icAllocBracket, 0, refalrts::ibOpenCall, 29},
    {refalrts::icAllocFunc, 0, 3, 30},
    {refalrts::icAllocBracket, 0, refalrts::ibCloseCall, 31},
    {refalrts::icAllocString, 0, 13, 32},
    {refalrts::icAllocBracket, 0, refalrts::ibCloseBracket, 34},
    {refalrts::icReinitChar, 0, 'a', 13},
    {refalrts::icUpdateFunc, 0, 6, 4},
    {refalrts::icReinitBracket, 0, refalrts::ibCloseCall, 12},
    {refalrts::icReinitChar, 0, ',', 1},
    {refalrts::icLinkBrackets, 11, 34, 0},
    {refalrts::icPushStack, 0, 0, 31},
    {refalrts::icPushStack, 0, 0, 29},
    {refalrts::icPushStack, 0, 0, 12},
    {refalrts::icPushStack, 0, 0, 26},
    {refalrts::icPushStack, 0, 0, 23},
    {refalrts::icPushStack, 0, 0, 0},
    {refalrts::icLinkBrackets, 7, 8, 0},
    {refalrts::icSetResRightEdge, 0, 0, 0},
    {refalrts::icSpliceTile, 31, 34, 0},
    {refalrts::icSpliceTile, 15, 15, 0},
    {refalrts::icSpliceTile, 28, 30, 0},
    {refalrts::icSpliceTile, 16, 1, 0},
    {refalrts::icSpliceTile, 23, 27, 0},
    {refalrts::icSpliceTile, 14, 14, 0},
    {refalrts::icSpliceTile, 0, 4, 0},
    {refalrts::icSpliceTile, 21, 22, 0},
    {refalrts::icSpliceTile, 13, 13, 0},
    {refalrts::icSpliceTile, 19, 20, 0},
    {refalrts::icSpliceTile, 17, 18, 0},
    {refalrts::icSpliceTile, 7, 11, 0},
    {refalrts::icReturnResult_NoTrash, 0, 0, 0},
    {refalrts::icOnFailGoTo, +46, 0, 0},
    //(E )(#CmdiBracketsSaveS S S )
    // </0 & GenCommand/4 (/7 e.Indent#1/5 )/8 (/11 # CmdiBracketsSave/13 s.Direction#1/14 s.Num#1/15 s.NumRanges#1/16 )/12 >/1
    {refalrts::icIdentTerm, 0, 26, 13},
    // closed e.Indent#1 as range 5
    {refalrts::icSave, 0, 66, 9},
    {refalrts::icsVarLeft, 0, 14, 66},
    {refalrts::icsVarLeft, 0, 15, 66},
    {refalrts::icsVarLeft, 0, 16, 66},
    {refalrts::icEmpty, 0, 0, 66},
    {refalrts::icEmptyResult, 0, 0, 0},
    //TRASH: {REMOVED TILE}  {REMOVED TILE}  {REMOVED TILE}  {REMOVED TILE}  {REMOVED TILE}  {REMOVED TILE}  {REMOVED TILE}  {REMOVED TILE} 
    //RESULT: Tile{ [[ } Tile{ AsIs: (/7 AsIs: e.Indent#1/5 AsIs: )/8 AsIs: (/11 } e.Indent#1/5/17"{ref"/19 Tile{ HalfReuse: 'a'/13 }"lrts::icBracket"/21 Tile{ AsIs: </0 Reuse: & PrintDirection/4 } Tile{ AsIs: s.Direction#1/14 } >/23"Save, 0, "/24 </26 & StrFromInt/27 Tile{ AsIs: s.NumRanges#1/16 HalfReuse: >/12 HalfReuse: ','/1 } ' '/28 </29 & StrFromInt/30 Tile{ AsIs: s.Num#1/15 } >/31"},"/32 )/34 Tile{ ]] }
    {refalrts::icCopyEVar, 17, 5, 0},
    {refalrts::icAllocString, 0, 16, 19},
    {refalrts::icAllocString, 0, 36, 21},
    {refalrts::icAllocBracket, 0, refalrts::ibCloseCall, 23},
    {refalrts::icAllocString, 0, 27, 24},
    {refalrts::icAllocBracket, 0, refalrts::ibOpenCall, 26},
    {refalrts::icAllocFunc, 0, 3, 27},
    {refalrts::icAllocChar, 0, ' ', 28},
    {refalrts::icAllocBracket, 0, refalrts::ibOpenCall, 29},
    {refalrts::icAllocFunc, 0, 3, 30},
    {refalrts::icAllocBracket, 0, refalrts::ibCloseCall, 31},
    {refalrts::icAllocString, 0, 13, 32},
    {refalrts::icAllocBracket, 0, refalrts::ibCloseBracket, 34},
    {refalrts::icReinitChar, 0, 'a', 13},
    {refalrts::icUpdateFunc, 0, 6, 4},
    {refalrts::icReinitBracket, 0, refalrts::ibCloseCall, 12},
    {refalrts::icReinitChar, 0, ',', 1},
    {refalrts::icLinkBrackets, 11, 34, 0},
    {refalrts::icPushStack, 0, 0, 31},
    {refalrts::icPushStack, 0, 0, 29},
    {refalrts::icPushStack, 0, 0, 12},
    {refalrts::icPushStack, 0, 0, 26},
    {refalrts::icPushStack, 0, 0, 23},
    {refalrts::icPushStack, 0, 0, 0},
    {refalrts::icLinkBrackets, 7, 8, 0},
    {refalrts::icSetResRightEdge, 0, 0, 0},
    {refalrts::icSpliceTile, 31, 34, 0},
    {refalrts::icSpliceTile, 15, 15, 0},
    {refalrts::icSpliceTile, 28, 30, 0},
    {refalrts::icSpliceTile, 16, 1, 0},
    {refalrts::icSpliceTile, 23, 27, 0},
    {refalrts::icSpliceTile, 14, 14, 0},
    {refalrts::icSpliceTile, 0, 4, 0},
    {refalrts::icSpliceTile, 21, 22, 0},
    {refalrts::icSpliceTile, 13, 13, 0},
    {refalrts::icSpliceTile, 19, 20, 0},
    {refalrts::icSpliceTile, 17, 18, 0},
    {refalrts::icSpliceTile, 7, 11, 0},
    {refalrts::icReturnResult_NoTrash, 0, 0, 0},
    {refalrts::icOnFailGoTo, +53, 0, 0},
    //(E )(#CmdiADTS S S S )
    // </0 & GenCommand/4 (/7 e.Indent#1/5 )/8 (/11 # CmdiADT/13 s.Direction#1/14 s.BracketNumber#1/15 s.InnerBrackets#1/16 s.NameId#1/17 )/12 >/1
    {refalrts::icIdentTerm, 0, 25, 13},
    // closed e.Indent#1 as range 5
    {refalrts::icSave, 0, 66, 9},
    {refalrts::icsVarLeft, 0, 14, 66},
    {refalrts::icsVarLeft, 0, 15, 66},
    {refalrts::icsVarLeft, 0, 16, 66},
    {refalrts::icsVarLeft, 0, 17, 66},
    {refalrts::icEmpty, 0, 0, 66},
    {refalrts::icEmptyResult, 0, 0, 0},
    //TRASH: {REMOVED TILE}  {REMOVED TILE}  {REMOVED TILE}  {REMOVED TILE}  {REMOVED TILE}  {REMOVED TILE}  {REMOVED TILE}  {REMOVED TILE}  {REMOVED TILE} 
    //RESULT: Tile{ [[ } Tile{ AsIs: (/7 AsIs: e.Indent#1/5 AsIs: )/8 AsIs: (/11 } e.Indent#1/5/18 Tile{ HalfReuse: '{'/13 }"refalrts::icADT"/20 Tile{ AsIs: </0 Reuse: & PrintDirection/4 } Tile{ AsIs: s.Direction#1/14 } >/22", "/23 </25 & StrFromInt/26 Tile{ AsIs: s.NameId#1/17 HalfReuse: >/12 HalfReuse: ','/1 } ' '/27 </28 & StrFromInt/29 Tile{ AsIs: s.InnerBrackets#1/16 } >/30", "/31 </33 & StrFromInt/34 Tile{ AsIs: s.BracketNumber#1/15 } >/35"},"/36 )/38 Tile{ ]] }
    {refalrts::icCopyEVar, 18, 5, 0},
    {refalrts::icAllocString, 0, 35, 20},
    {refalrts::icAllocBracket, 0, refalrts::ibCloseCall, 22},
    {refalrts::icAllocString, 0, 4, 23},
    {refalrts::icAllocBracket, 0, refalrts::ibOpenCall, 25},
    {refalrts::icAllocFunc, 0, 3, 26},
    {refalrts::icAllocChar, 0, ' ', 27},
    {refalrts::icAllocBracket, 0, refalrts::ibOpenCall, 28},
    {refalrts::icAllocFunc, 0, 3, 29},
    {refalrts::icAllocBracket, 0, refalrts::ibCloseCall, 30},
    {refalrts::icAllocString, 0, 4, 31},
    {refalrts::icAllocBracket, 0, refalrts::ibOpenCall, 33},
    {refalrts::icAllocFunc, 0, 3, 34},
    {refalrts::icAllocBracket, 0, refalrts::ibCloseCall, 35},
    {refalrts::icAllocString, 0, 13, 36},
    {refalrts::icAllocBracket, 0, refalrts::ibCloseBracket, 38},
    {refalrts::icReinitChar, 0, '{', 13},
    {refalrts::icUpdateFunc, 0, 6, 4},
    {refalrts::icReinitBracket, 0, refalrts::ibCloseCall, 12},
    {refalrts::icReinitChar, 0, ',', 1},
    {refalrts::icLinkBrackets, 11, 38, 0},
    {refalrts::icPushStack, 0, 0, 35},
    {refalrts::icPushStack, 0, 0, 33},
    {refalrts::icPushStack, 0, 0, 30},
    {refalrts::icPushStack, 0, 0, 28},
    {refalrts::icPushStack, 0, 0, 12},
    {refalrts::icPushStack, 0, 0, 25},
    {refalrts::icPushStack, 0, 0, 22},
    {refalrts::icPushStack, 0, 0, 0},
    {refalrts::icLinkBrackets, 7, 8, 0},
    {refalrts::icSetResRightEdge, 0, 0, 0},
    {refalrts::icSpliceTile, 35, 38, 0},
    {refalrts::icSpliceTile, 15, 15, 0},
    {refalrts::icSpliceTile, 30, 34, 0},
    {refalrts::icSpliceTile, 16, 16, 0},
    {refalrts::icSpliceTile, 27, 29, 0},
    {refalrts::icSpliceTile, 17, 1, 0},
    {refalrts::icSpliceTile, 22, 26, 0},
    {refalrts::icSpliceTile, 14, 14, 0},
    {refalrts::icSpliceTile, 0, 4, 0},
    {refalrts::icSpliceTile, 20, 21, 0},
    {refalrts::icSpliceTile, 13, 13, 0},
    {refalrts::icSpliceTile, 18, 19, 0},
    {refalrts::icSpliceTile, 7, 11, 0},
    {refalrts::icReturnResult_NoTrash, 0, 0, 0},
    {refalrts::icOnFailGoTo, +55, 0, 0},
    //(E )(#CmdiADTSaveS S S S )
    // </0 & GenCommand/4 (/7 e.Indent#1/5 )/8 (/11 # CmdiADTSave/13 s.Direction#1/14 s.BracketNumber#1/15 s.InnerBrackets#1/16 s.NameId#1/17 )/12 >/1
    {refalrts::icIdentTerm, 0, 24, 13},
    // closed e.Indent#1 as range 5
    {refalrts::icSave, 0, 66, 9},
    {refalrts::icsVarLeft, 0, 14, 66},
    {refalrts::icsVarLeft, 0, 15, 66},
    {refalrts::icsVarLeft, 0, 16, 66},
    {refalrts::icsVarLeft, 0, 17, 66},
    {refalrts::icEmpty, 0, 0, 66},
    {refalrts::icEmptyResult, 0, 0, 0},
    //TRASH: {REMOVED TILE}  {REMOVED TILE}  {REMOVED TILE}  {REMOVED TILE}  {REMOVED TILE}  {REMOVED TILE}  {REMOVED TILE}  {REMOVED TILE}  {REMOVED TILE} 
    //RESULT: Tile{ [[ } Tile{ AsIs: (/7 AsIs: e.Indent#1/5 AsIs: )/8 AsIs: (/11 } e.Indent#1/5/18"{refa"/20 Tile{ HalfReuse: 'l'/13 }"rts::icADT"/22 Tile{ AsIs: </0 Reuse: & PrintDirection/4 } Tile{ AsIs: s.Direction#1/14 } >/24"Save, "/25 </27 & StrFromInt/28 Tile{ AsIs: s.NameId#1/17 HalfReuse: >/12 HalfReuse: ','/1 } ' '/29 </30 & StrFromInt/31 Tile{ AsIs: s.InnerBrackets#1/16 } >/32", "/33 </35 & StrFromInt/36 Tile{ AsIs: s.BracketNumber#1/15 } >/37"},"/38 )/40 Tile{ ]] }
    {refalrts::icCopyEVar, 18, 5, 0},
    {refalrts::icAllocString, 0, 30, 20},
    {refalrts::icAllocString, 0, 34, 22},
    {refalrts::icAllocBracket, 0, refalrts::ibCloseCall, 24},
    {refalrts::icAllocString, 0, 22, 25},
    {refalrts::icAllocBracket, 0, refalrts::ibOpenCall, 27},
    {refalrts::icAllocFunc, 0, 3, 28},
    {refalrts::icAllocChar, 0, ' ', 29},
    {refalrts::icAllocBracket, 0, refalrts::ibOpenCall, 30},
    {refalrts::icAllocFunc, 0, 3, 31},
    {refalrts::icAllocBracket, 0, refalrts::ibCloseCall, 32},
    {refalrts::icAllocString, 0, 4, 33},
    {refalrts::icAllocBracket, 0, refalrts::ibOpenCall, 35},
    {refalrts::icAllocFunc, 0, 3, 36},
    {refalrts::icAllocBracket, 0, refalrts::ibCloseCall, 37},
    {refalrts::icAllocString, 0, 13, 38},
    {refalrts::icAllocBracket, 0, refalrts::ibCloseBracket, 40},
    {refalrts::icReinitChar, 0, 'l', 13},
    {refalrts::icUpdateFunc, 0, 6, 4},
    {refalrts::icReinitBracket, 0, refalrts::ibCloseCall, 12},
    {refalrts::icReinitChar, 0, ',', 1},
    {refalrts::icLinkBrackets, 11, 40, 0},
    {refalrts::icPushStack, 0, 0, 37},
    {refalrts::icPushStack, 0, 0, 35},
    {refalrts::icPushStack, 0, 0, 32},
    {refalrts::icPushStack, 0, 0, 30},
    {refalrts::icPushStack, 0, 0, 12},
    {refalrts::icPushStack, 0, 0, 27},
    {refalrts::icPushStack, 0, 0, 24},
    {refalrts::icPushStack, 0, 0, 0},
    {refalrts::icLinkBrackets, 7, 8, 0},
    {refalrts::icSetResRightEdge, 0, 0, 0},
    {refalrts::icSpliceTile, 37, 40, 0},
    {refalrts::icSpliceTile, 15, 15, 0},
    {refalrts::icSpliceTile, 32, 36, 0},
    {refalrts::icSpliceTile, 16, 16, 0},
    {refalrts::icSpliceTile, 29, 31, 0},
    {refalrts::icSpliceTile, 17, 1, 0},
    {refalrts::icSpliceTile, 24, 28, 0},
    {refalrts::icSpliceTile, 14, 14, 0},
    {refalrts::icSpliceTile, 0, 4, 0},
    {refalrts::icSpliceTile, 22, 23, 0},
    {refalrts::icSpliceTile, 13, 13, 0},
    {refalrts::icSpliceTile, 20, 21, 0},
    {refalrts::icSpliceTile, 18, 19, 0},
    {refalrts::icSpliceTile, 7, 11, 0},
    {refalrts::icReturnResult_NoTrash, 0, 0, 0},
    {refalrts::icOnFailGoTo, +46, 0, 0},
    //(E )(#CmdiCallSaveS S S )
    // </0 & GenCommand/4 (/7 e.Indent#1/5 )/8 (/11 # CmdiCallSave/13 s.Direction#1/14 s.BracketNumber#1/15 s.InnerBrackets#1/16 )/12 >/1
    {refalrts::icIdentTerm, 0, 23, 13},
    // closed e.Indent#1 as range 5
    {refalrts::icSave, 0, 66, 9},
    {refalrts::icsVarLeft, 0, 14, 66},
    {refalrts::icsVarLeft, 0, 15, 66},
    {refalrts::icsVarLeft, 0, 16, 66},
    {refalrts::icEmpty, 0, 0, 66},
    {refalrts::icEmptyResult, 0, 0, 0},
    //TRASH: {REMOVED TILE}  {REMOVED TILE}  {REMOVED TILE}  {REMOVED TILE}  {REMOVED TILE}  {REMOVED TILE}  {REMOVED TILE}  {REMOVED TILE} 
    //RESULT: Tile{ [[ } Tile{ AsIs: (/7 AsIs: e.Indent#1/5 AsIs: )/8 AsIs: (/11 } e.Indent#1/5/17"{ref"/19 Tile{ HalfReuse: 'a'/13 }"lrts::icCallSave"/21 Tile{ AsIs: </0 Reuse: & PrintDirection/4 } Tile{ AsIs: s.Direction#1/14 } >/23", 0, "/24 </26 & StrFromInt/27 Tile{ AsIs: s.InnerBrackets#1/16 HalfReuse: >/12 HalfReuse: ','/1 } ' '/28 </29 & StrFromInt/30 Tile{ AsIs: s.BracketNumber#1/15 } >/31"},"/32 )/34 Tile{ ]] }
    {refalrts::icCopyEVar, 17, 5, 0},
    {refalrts::icAllocString, 0, 16, 19},
    {refalrts::icAllocString, 0, 33, 21},
    {refalrts::icAllocBracket, 0, refalrts::ibCloseCall, 23},
    {refalrts::icAllocString, 0, 31, 24},
    {refalrts::icAllocBracket, 0, refalrts::ibOpenCall, 26},
    {refalrts::icAllocFunc, 0, 3, 27},
    {refalrts::icAllocChar, 0, ' ', 28},
    {refalrts::icAllocBracket, 0, refalrts::ibOpenCall, 29},
    {refalrts::icAllocFunc, 0, 3, 30},
    {refalrts::icAllocBracket, 0, refalrts::ibCloseCall, 31},
    {refalrts::icAllocString, 0, 13, 32},
    {refalrts::icAllocBracket, 0, refalrts::ibCloseBracket, 34},
    {refalrts::icReinitChar, 0, 'a', 13},
    {refalrts::icUpdateFunc, 0, 6, 4},
    {refalrts::icReinitBracket, 0, refalrts::ibCloseCall, 12},
    {refalrts::icReinitChar, 0, ',', 1},
    {refalrts::icLinkBrackets, 11, 34, 0},
    {refalrts::icPushStack, 0, 0, 31},
    {refalrts::icPushStack, 0, 0, 29},
    {refalrts::icPushStack, 0, 0, 12},
    {refalrts::icPushStack, 0, 0, 26},
    {refalrts::icPushStack, 0, 0, 23},
    {refalrts::icPushStack, 0, 0, 0},
    {refalrts::icLinkBrackets, 7, 8, 0},
    {refalrts::icSetResRightEdge, 0, 0, 0},
    {refalrts::icSpliceTile, 31, 34, 0},
    {refalrts::icSpliceTile, 15, 15, 0},
    {refalrts::icSpliceTile, 28, 30, 0},
    {refalrts::icSpliceTile, 16, 1, 0},
    {refalrts::icSpliceTile, 23, 27, 0},
    {refalrts::icSpliceTile, 14, 14, 0},
    {refalrts::icSpliceTile, 0, 4, 0},
    {refalrts::icSpliceTile, 21, 22, 0},
    {refalrts::icSpliceTile, 13, 13, 0},
    {refalrts::icSpliceTile, 19, 20, 0},
    {refalrts::icSpliceTile, 17, 18, 0},
    {refalrts::icSpliceTile, 7, 11, 0},
    {refalrts::icReturnResult_NoTrash, 0, 0, 0},
    {refalrts::icOnFailGoTo, +26, 0, 0},
    //(E )(#CmdiEmptyS )
    // </0 & GenCommand/4 (/7 e.Indent#1/5 )/8 (/11 # CmdiEmpty/13 s.Num#1/14 )/12 >/1
    {refalrts::icIdentTerm, 0, 22, 13},
    // closed e.Indent#1 as range 5
    {refalrts::icSave, 0, 66, 9},
    {refalrts::icsVarLeft, 0, 14, 66},
    {refalrts::icEmpty, 0, 0, 66},
    {refalrts::icEmptyResult, 0, 0, 0},
    //TRASH: {REMOVED TILE}  {REMOVED TILE}  {REMOVED TILE}  {REMOVED TILE}  {REMOVED TILE}  {REMOVED TILE} 
    //RESULT: Tile{ [[ } Tile{ AsIs: (/7 AsIs: e.Indent#1/5 AsIs: )/8 AsIs: (/11 } e.Indent#1/5/15 Tile{ HalfReuse: '{'/4 }"refalrts::icEmpty, 0, 0, "/17 Tile{ AsIs: </0 } Tile{ HalfReuse: & StrFromInt/13 AsIs: s.Num#1/14 HalfReuse: >/12 HalfReuse: '}'/1 } ','/19 )/20 Tile{ ]] }
    {refalrts::icCopyEVar, 15, 5, 0},
    {refalrts::icAllocString, 0, 32, 17},
    {refalrts::icAllocChar, 0, ',', 19},
    {refalrts::icAllocBracket, 0, refalrts::ibCloseBracket, 20},
    {refalrts::icReinitChar, 0, '{', 4},
    {refalrts::icReinitFunc, 0, 3, 13},
    {refalrts::icReinitBracket, 0, refalrts::ibCloseCall, 12},
    {refalrts::icReinitChar, 0, '}', 1},
    {refalrts::icLinkBrackets, 11, 20, 0},
    {refalrts::icPushStack, 0, 0, 12},
    {refalrts::icPushStack, 0, 0, 0},
    {refalrts::icLinkBrackets, 7, 8, 0},
    {refalrts::icSetResRightEdge, 0, 0, 0},
    {refalrts::icSpliceTile, 19, 20, 0},
    {refalrts::icSpliceTile, 13, 1, 0},
    {refalrts::icSpliceTile, 0, 0, 0},
    {refalrts::icSpliceTile, 17, 18, 0},
    {refalrts::icSpliceTile, 4, 4, 0},
    {refalrts::icSpliceTile, 15, 16, 0},
    {refalrts::icSpliceTile, 7, 11, 0},
    {refalrts::icReturnResult_NoTrash, 0, 0, 0},
    {refalrts::icOnFailGoTo, +50, 0, 0},
    //(E )(#CmdiVarS S S S )
    // </0 & GenCommand/4 (/7 e.Indent#1/5 )/8 (/11 # CmdiVar/13 s.Direction#1/14 s.BracketNumber#1/15 s.Mode#1/16 s.VarNumber#1/17 )/12 >/1
    {refalrts::icIdentTerm, 0, 21, 13},
    // closed e.Indent#1 as range 5
    {refalrts::icSave, 0, 66, 9},
    {refalrts::icsVarLeft, 0, 14, 66},
    {refalrts::icsVarLeft, 0, 15, 66},
    {refalrts::icsVarLeft, 0, 16, 66},
    {refalrts::icsVarLeft, 0, 17, 66},
    {refalrts::icEmpty, 0, 0, 66},
    {refalrts::icEmptyResult, 0, 0, 0},
    //TRASH: {REMOVED TILE}  {REMOVED TILE}  {REMOVED TILE}  {REMOVED TILE}  {REMOVED TILE}  {REMOVED TILE}  {REMOVED TILE}  {REMOVED TILE}  {REMOVED TILE} 
    //RESULT: Tile{ [[ } Tile{ AsIs: (/7 AsIs: e.Indent#1/5 AsIs: )/8 AsIs: (/11 } e.Indent#1/5/18"{refa"/20 Tile{ HalfReuse: 'l'/13 }"rts::ic"/22 Tile{ AsIs: s.Mode#1/16 }"Var"/24 Tile{ AsIs: </0 Reuse: & PrintDirection/4 } Tile{ AsIs: s.Direction#1/14 } >/26", 0, "/27 </29 & StrFromInt/30 Tile{ AsIs: s.VarNumber#1/17 HalfReuse: >/12 HalfReuse: ','/1 } ' '/31 </32 & StrFromInt/33 Tile{ AsIs: s.BracketNumber#1/15 } >/34"},"/35 )/37 Tile{ ]] }
    {refalrts::icCopyEVar, 18, 5, 0},
    {refalrts::icAllocString, 0, 30, 20},
    {refalrts::icAllocString, 0, 29, 22},
    {refalrts::icAllocString, 0, 28, 24},
    {refalrts::icAllocBracket, 0, refalrts::ibCloseCall, 26},
    {refalrts::icAllocString, 0, 31, 27},
    {refalrts::icAllocBracket, 0, refalrts::ibOpenCall, 29},
    {refalrts::icAllocFunc, 0, 3, 30},
    {refalrts::icAllocChar, 0, ' ', 31},
    {refalrts::icAllocBracket, 0, refalrts::ibOpenCall, 32},
    {refalrts::icAllocFunc, 0, 3, 33},
    {refalrts::icAllocBracket, 0, refalrts::ibCloseCall, 34},
    {refalrts::icAllocString, 0, 13, 35},
    {refalrts::icAllocBracket, 0, refalrts::ibCloseBracket, 37},
    {refalrts::icReinitChar, 0, 'l', 13},
    {refalrts::icUpdateFunc, 0, 6, 4},
    {refalrts::icReinitBracket, 0, refalrts::ibCloseCall, 12},
    {refalrts::icReinitChar, 0, ',', 1},
    {refalrts::icLinkBrackets, 11, 37, 0},
    {refalrts::icPushStack, 0, 0, 34},
    {refalrts::icPushStack, 0, 0, 32},
    {refalrts::icPushStack, 0, 0, 12},
    {refalrts::icPushStack, 0, 0, 29},
    {refalrts::icPushStack, 0, 0, 26},
    {refalrts::icPushStack, 0, 0, 0},
    {refalrts::icLinkBrackets, 7, 8, 0},
    {refalrts::icSetResRightEdge, 0, 0, 0},
    {refalrts::icSpliceTile, 34, 37, 0},
    {refalrts::icSpliceTile, 15, 15, 0},
    {refalrts::icSpliceTile, 31, 33, 0},
    {refalrts::icSpliceTile, 17, 1, 0},
    {refalrts::icSpliceTile, 26, 30, 0},
    {refalrts::icSpliceTile, 14, 14, 0},
    {refalrts::icSpliceTile, 0, 4, 0},
    {refalrts::icSpliceTile, 24, 25, 0},
    {refalrts::icSpliceTile, 16, 16, 0},
    {refalrts::icSpliceTile, 22, 23, 0},
    {refalrts::icSpliceTile, 13, 13, 0},
    {refalrts::icSpliceTile, 20, 21, 0},
    {refalrts::icSpliceTile, 18, 19, 0},
    {refalrts::icSpliceTile, 7, 11, 0},
    {refalrts::icReturnResult_NoTrash, 0, 0, 0},
    {refalrts::icOnFailGoTo, +50, 0, 0},
    //(E )(#CmdiVarSaveS S S S )
    // </0 & GenCommand/4 (/7 e.Indent#1/5 )/8 (/11 # CmdiVarSave/13 s.Direction#1/14 s.BracketNumber#1/15 s.Mode#1/16 s.VarNumber#1/17 )/12 >/1
    {refalrts::icIdentTerm, 0, 20, 13},
    // closed e.Indent#1 as range 5
    {refalrts::icSave, 0, 66, 9},
    {refalrts::icsVarLeft, 0, 14, 66},
    {refalrts::icsVarLeft, 0, 15, 66},
    {refalrts::icsVarLeft, 0, 16, 66},
    {refalrts::icsVarLeft, 0, 17, 66},
    {refalrts::icEmpty, 0, 0, 66},
    {refalrts::icEmptyResult, 0, 0, 0},
    //TRASH: {REMOVED TILE}  {REMOVED TILE}  {REMOVED TILE}  {REMOVED TILE}  {REMOVED TILE}  {REMOVED TILE}  {REMOVED TILE}  {REMOVED TILE}  {REMOVED TILE} 
    //RESULT: Tile{ [[ } Tile{ AsIs: (/7 AsIs: e.Indent#1/5 AsIs: )/8 AsIs: (/11 } e.Indent#1/5/18"{refa"/20 Tile{ HalfReuse: 'l'/13 }"rts::ic"/22 Tile{ AsIs: s.Mode#1/16 }"Var"/24 Tile{ AsIs: </0 Reuse: & PrintDirection/4 } Tile{ AsIs: s.Direction#1/14 } >/26"Save, 0, "/27 </29 & StrFromInt/30 Tile{ AsIs: s.VarNumber#1/17 HalfReuse: >/12 HalfReuse: ','/1 } ' '/31 </32 & StrFromInt/33 Tile{ AsIs: s.BracketNumber#1/15 } >/34"},"/35 )/37 Tile{ ]] }
    {refalrts::icCopyEVar, 18, 5, 0},
    {refalrts::icAllocString, 0, 30, 20},
    {refalrts::icAllocString, 0, 29, 22},
    {refalrts::icAllocString, 0, 28, 24},
    {refalrts::icAllocBracket, 0, refalrts::ibCloseCall, 26},
    {refalrts::icAllocString, 0, 27, 27},
    {refalrts::icAllocBracket, 0, refalrts::ibOpenCall, 29},
    {refalrts::icAllocFunc, 0, 3, 30},
    {refalrts::icAllocChar, 0, ' ', 31},
    {refalrts::icAllocBracket, 0, refalrts::ibOpenCall, 32},
    {refalrts::icAllocFunc, 0, 3, 33},
    {refalrts::icAllocBracket, 0, refalrts::ibCloseCall, 34},
    {refalrts::icAllocString, 0, 13, 35},
    {refalrts::icAllocBracket, 0, refalrts::ibCloseBracket, 37},
    {refalrts::icReinitChar, 0, 'l', 13},
    {refalrts::icUpdateFunc, 0, 6, 4},
    {refalrts::icReinitBracket, 0, refalrts::ibCloseCall, 12},
    {refalrts::icReinitChar, 0, ',', 1},
    {refalrts::icLinkBrackets, 11, 37, 0},
    {refalrts::icPushStack, 0, 0, 34},
    {refalrts::icPushStack, 0, 0, 32},
    {refalrts::icPushStack, 0, 0, 12},
    {refalrts::icPushStack, 0, 0, 29},
    {refalrts::icPushStack, 0, 0, 26},
    {refalrts::icPushStack, 0, 0, 0},
    {refalrts::icLinkBrackets, 7, 8, 0},
    {refalrts::icSetResRightEdge, 0, 0, 0},
    {refalrts::icSpliceTile, 34, 37, 0},
    {refalrts::icSpliceTile, 15, 15, 0},
    {refalrts::icSpliceTile, 31, 33, 0},
    {refalrts::icSpliceTile, 17, 1, 0},
    {refalrts::icSpliceTile, 26, 30, 0},
    {refalrts::icSpliceTile, 14, 14, 0},
    {refalrts::icSpliceTile, 0, 4, 0},
    {refalrts::icSpliceTile, 24, 25, 0},
    {refalrts::icSpliceTile, 16, 16, 0},
    {refalrts::icSpliceTile, 22, 23, 0},
    {refalrts::icSpliceTile, 13, 13, 0},
    {refalrts::icSpliceTile, 20, 21, 0},
    {refalrts::icSpliceTile, 18, 19, 0},
    {refalrts::icSpliceTile, 7, 11, 0},
    {refalrts::icReturnResult_NoTrash, 0, 0, 0},
    {refalrts::icOnFailGoTo, +59, 0, 0},
    //(E )(#CmdiRepeatS S S S S )
    // </0 & GenCommand/4 (/7 e.Indent#1/5 )/8 (/11 # CmdiRepeat/13 s.Direction#1/14 s.BracketNumber#1/15 s.Mode#1/16 s.VarNumber#1/17 s.SampleNumber#1/18 )/12 >/1
    {refalrts::icIdentTerm, 0, 19, 13},
    // closed e.Indent#1 as range 5
    {refalrts::icSave, 0, 66, 9},
    {refalrts::icsVarLeft, 0, 14, 66},
    {refalrts::icsVarLeft, 0, 15, 66},
    {refalrts::icsVarLeft, 0, 16, 66},
    {refalrts::icsVarLeft, 0, 17, 66},
    {refalrts::icsVarLeft, 0, 18, 66},
    {refalrts::icEmpty, 0, 0, 66},
    {refalrts::icEmptyResult, 0, 0, 0},
    //TRASH: {REMOVED TILE}  {REMOVED TILE}  {REMOVED TILE}  {REMOVED TILE}  {REMOVED TILE}  {REMOVED TILE}  {REMOVED TILE}  {REMOVED TILE}  {REMOVED TILE}  {REMOVED TILE} 
    //RESULT: Tile{ [[ } Tile{ AsIs: (/7 AsIs: e.Indent#1/5 AsIs: )/8 AsIs: (/11 } e.Indent#1/5/19"{refal"/21 Tile{ HalfReuse: 'r'/13 }"ts::ic"/23 Tile{ AsIs: s.Mode#1/16 }"Repeat"/25 Tile{ AsIs: </0 Reuse: & PrintDirection/4 } Tile{ AsIs: s.Direction#1/14 } >/27", "/28 </30 & StrFromInt/31 Tile{ AsIs: s.VarNumber#1/17 } >/32", "/33 </35 & StrFromInt/36 Tile{ AsIs: s.SampleNumber#1/18 HalfReuse: >/12 HalfReuse: ','/1 } ' '/37 </38 & StrFromInt/39 Tile{ AsIs: s.BracketNumber#1/15 } >/40"},"/41 )/43 Tile{ ]] }
    {refalrts::icCopyEVar, 19, 5, 0},
    {refalrts::icAllocString, 0, 26, 21},
    {refalrts::icAllocString, 0, 25, 23},
    {refalrts::icAllocString, 0, 24, 25},
    {refalrts::icAllocBracket, 0, refalrts::ibCloseCall, 27},
    {refalrts::icAllocString, 0, 4, 28},
    {refalrts::icAllocBracket, 0, refalrts::ibOpenCall, 30},
    {refalrts::icAllocFunc, 0, 3, 31},
    {refalrts::icAllocBracket, 0, refalrts::ibCloseCall, 32},
    {refalrts::icAllocString, 0, 4, 33},
    {refalrts::icAllocBracket, 0, refalrts::ibOpenCall, 35},
    {refalrts::icAllocFunc, 0, 3, 36},
    {refalrts::icAllocChar, 0, ' ', 37},
    {refalrts::icAllocBracket, 0, refalrts::ibOpenCall, 38},
    {refalrts::icAllocFunc, 0, 3, 39},
    {refalrts::icAllocBracket, 0, refalrts::ibCloseCall, 40},
    {refalrts::icAllocString, 0, 13, 41},
    {refalrts::icAllocBracket, 0, refalrts::ibCloseBracket, 43},
    {refalrts::icReinitChar, 0, 'r', 13},
    {refalrts::icUpdateFunc, 0, 6, 4},
    {refalrts::icReinitBracket, 0, refalrts::ibCloseCall, 12},
    {refalrts::icReinitChar, 0, ',', 1},
    {refalrts::icLinkBrackets, 11, 43, 0},
    {refalrts::icPushStack, 0, 0, 40},
    {refalrts::icPushStack, 0, 0, 38},
    {refalrts::icPushStack, 0, 0, 12},
    {refalrts::icPushStack, 0, 0, 35},
    {refalrts::icPushStack, 0, 0, 32},
    {refalrts::icPushStack, 0, 0, 30},
    {refalrts::icPushStack, 0, 0, 27},
    {refalrts::icPushStack, 0, 0, 0},
    {refalrts::icLinkBrackets, 7, 8, 0},
    {refalrts::icSetResRightEdge, 0, 0, 0},
    {refalrts::icSpliceTile, 40, 43, 0},
    {refalrts::icSpliceTile, 15, 15, 0},
    {refalrts::icSpliceTile, 37, 39, 0},
    {refalrts::icSpliceTile, 18, 1, 0},
    {refalrts::icSpliceTile, 32, 36, 0},
    {refalrts::icSpliceTile, 17, 17, 0},
    {refalrts::icSpliceTile, 27, 31, 0},
    {refalrts::icSpliceTile, 14, 14, 0},
    {refalrts::icSpliceTile, 0, 4, 0},
    {refalrts::icSpliceTile, 25, 26, 0},
    {refalrts::icSpliceTile, 16, 16, 0},
    {refalrts::icSpliceTile, 23, 24, 0},
    {refalrts::icSpliceTile, 13, 13, 0},
    {refalrts::icSpliceTile, 21, 22, 0},
    {refalrts::icSpliceTile, 19, 20, 0},
    {refalrts::icSpliceTile, 7, 11, 0},
    {refalrts::icReturnResult_NoTrash, 0, 0, 0},
    {refalrts::icOnFailGoTo, +56, 0, 0},
    //(E )(#CmdiRepeatedSaveS S 't'S S )
    // </0 & GenCommand/4 (/7 e.Indent#1/5 )/8 (/11 # CmdiRepeatedSave/13 s.Direction#1/14 s.BracketNumber#1/15 't'/16 s.VarNumber#1/17 s.SampleNumber#1/18 )/12 >/1
    {refalrts::icIdentTerm, 0, 18, 13},
    // closed e.Indent#1 as range 5
    {refalrts::icSave, 0, 66, 9},
    {refalrts::icsVarLeft, 0, 14, 66},
    {refalrts::icsVarLeft, 0, 15, 66},
    {refalrts::icCharLeftSave, 16, static_cast<unsigned char>('t'), 66},
    {refalrts::icsVarLeft, 0, 17, 66},
    {refalrts::icsVarLeft, 0, 18, 66},
    {refalrts::icEmpty, 0, 0, 66},
    {refalrts::icEmptyResult, 0, 0, 0},
    //TRASH: {REMOVED TILE}  {REMOVED TILE}  {REMOVED TILE}  {REMOVED TILE}  {REMOVED TILE}  {REMOVED TILE}  {REMOVED TILE}  {REMOVED TILE}  {REMOVED TILE} 
    //RESULT: Tile{ [[ } Tile{ AsIs: (/7 AsIs: e.Indent#1/5 AsIs: )/8 AsIs: (/11 } e.Indent#1/5/19"{ref"/21 Tile{ HalfReuse: 'a'/13 }"lrts::ictRepeat"/23 Tile{ AsIs: </0 Reuse: & PrintDirection/4 } Tile{ AsIs: s.Direction#1/14 } >/25"Save, "/26 </28 Tile{ HalfReuse: & StrFromInt/16 AsIs: s.VarNumber#1/17 } >/29", "/30 </32 & StrFromInt/33 Tile{ AsIs: s.SampleNumber#1/18 HalfReuse: >/12 HalfReuse: ','/1 } ' '/34 </35 & StrFromInt/36 Tile{ AsIs: s.BracketNumber#1/15 } >/37"},"/38 )/40 Tile{ ]] }
    {refalrts::icCopyEVar, 19, 5, 0},
    {refalrts::icAllocString, 0, 16, 21},
    {refalrts::icAllocString, 0, 23, 23},
    {refalrts::icAllocBracket, 0, refalrts::ibCloseCall, 25},
    {refalrts::icAllocString, 0, 22, 26},
    {refalrts::icAllocBracket, 0, refalrts::ibOpenCall, 28},
    {refalrts::icAllocBracket, 0, refalrts::ibCloseCall, 29},
    {refalrts::icAllocString, 0, 4, 30},
    {refalrts::icAllocBracket, 0, refalrts::ibOpenCall, 32},
    {refalrts::icAllocFunc, 0, 3, 33},
    {refalrts::icAllocChar, 0, ' ', 34},
    {refalrts::icAllocBracket, 0, refalrts::ibOpenCall, 35},
    {refalrts::icAllocFunc, 0, 3, 36},
    {refalrts::icAllocBracket, 0, refalrts::ibCloseCall, 37},
    {refalrts::icAllocString, 0, 13, 38},
    {refalrts::icAllocBracket, 0, refalrts::ibCloseBracket, 40},
    {refalrts::icReinitChar, 0, 'a', 13},
    {refalrts::icUpdateFunc, 0, 6, 4},
    {refalrts::icReinitFunc, 0, 3, 16},
    {refalrts::icReinitBracket, 0, refalrts::ibCloseCall, 12},
    {refalrts::icReinitChar, 0, ',', 1},
    {refalrts::icLinkBrackets, 11, 40, 0},
    {refalrts::icPushStack, 0, 0, 37},
    {refalrts::icPushStack, 0, 0, 35},
    {refalrts::icPushStack, 0, 0, 12},
    {refalrts::icPushStack, 0, 0, 32},
    {refalrts::icPushStack, 0, 0, 29},
    {refalrts::icPushStack, 0, 0, 28},
    {refalrts::icPushStack, 0, 0, 25},
    {refalrts::icPushStack, 0, 0, 0},
    {refalrts::icLinkBrackets, 7, 8, 0},
    {refalrts::icSetResRightEdge, 0, 0, 0},
    {refalrts::icSpliceTile, 37, 40, 0},
    {refalrts::icSpliceTile, 15, 15, 0},
    {refalrts::icSpliceTile, 34, 36, 0},
    {refalrts::icSpliceTile, 18, 1, 0},
    {refalrts::icSpliceTile, 29, 33, 0},
    {refalrts::icSpliceTile, 16, 17, 0},
    {refalrts::icSpliceTile, 25, 28, 0},
    {refalrts::icSpliceTile, 14, 14, 0},
    {refalrts::icSpliceTile, 0, 4, 0},
    {refalrts::icSpliceTile, 23, 24, 0},
    {refalrts::icSpliceTile, 13, 13, 0},
    {refalrts::icSpliceTile, 21, 22, 0},
    {refalrts::icSpliceTile, 19, 20, 0},
    {refalrts::icSpliceTile, 7, 11, 0},
    {refalrts::icReturnResult_NoTrash, 0, 0, 0},
    {refalrts::icOnFailGoTo, +33, 0, 0},
    //(E )(#CmdiEPrepareS S )
    // </0 & GenCommand/4 (/7 e.Indent#1/5 )/8 (/11 # CmdiEPrepare/13 s.BracketNumber#1/14 s.VarNumber#1/15 )/12 >/1
    {refalrts::icIdentTerm, 0, 17, 13},
    // closed e.Indent#1 as range 5
    {refalrts::icSave, 0, 66, 9},
    {refalrts::icsVarLeft, 0, 14, 66},
    {refalrts::icsVarLeft, 0, 15, 66},
    {refalrts::icEmpty, 0, 0, 66},
    {refalrts::icEmptyResult, 0, 0, 0},
    //TRASH: {REMOVED TILE}  {REMOVED TILE}  {REMOVED TILE}  {REMOVED TILE}  {REMOVED TILE}  {REMOVED TILE} 
    //RESULT: Tile{ [[ } Tile{ AsIs: (/7 AsIs: e.Indent#1/5 AsIs: )/8 AsIs: (/11 } e.Indent#1/5/16"{refalrts::icEPrepare, 0, "/18 Tile{ AsIs: </0 Reuse: & StrFromInt/4 } Tile{ AsIs: s.VarNumber#1/15 HalfReuse: >/12 HalfReuse: ','/1 } ' '/20 </21 Tile{ HalfReuse: & StrFromInt/13 AsIs: s.BracketNumber#1/14 } >/22"},"/23 )/25 Tile{ ]] }
    {refalrts::icCopyEVar, 16, 5, 0},
    {refalrts::icAllocString, 0, 21, 18},
    {refalrts::icAllocChar, 0, ' ', 20},
    {refalrts::icAllocBracket, 0, refalrts::ibOpenCall, 21},
    {refalrts::icAllocBracket, 0, refalrts::ibCloseCall, 22},
    {refalrts::icAllocString, 0, 13, 23},
    {refalrts::icAllocBracket, 0, refalrts::ibCloseBracket, 25},
    {refalrts::icUpdateFunc, 0, 3, 4},
    {refalrts::icReinitBracket, 0, refalrts::ibCloseCall, 12},
    {refalrts::icReinitChar, 0, ',', 1},
    {refalrts::icReinitFunc, 0, 3, 13},
    {refalrts::icLinkBrackets, 11, 25, 0},
    {refalrts::icPushStack, 0, 0, 22},
    {refalrts::icPushStack, 0, 0, 21},
    {refalrts::icPushStack, 0, 0, 12},
    {refalrts::icPushStack, 0, 0, 0},
    {refalrts::icLinkBrackets, 7, 8, 0},
    {refalrts::icSetResRightEdge, 0, 0, 0},
    {refalrts::icSpliceTile, 22, 25, 0},
    {refalrts::icSpliceTile, 13, 14, 0},
    {refalrts::icSpliceTile, 20, 21, 0},
    {refalrts::icSpliceTile, 15, 1, 0},
    {refalrts::icSpliceTile, 0, 4, 0},
    {refalrts::icSpliceTile, 18, 19, 0},
    {refalrts::icSpliceTile, 16, 17, 0},
    {refalrts::icSpliceTile, 7, 11, 0},
    {refalrts::icReturnResult_NoTrash, 0, 0, 0},
    {refalrts::icOnFailGoTo, +33, 0, 0},
    //(E )(#CmdiEStartS S )
    // </0 & GenCommand/4 (/7 e.Indent#1/5 )/8 (/11 # CmdiEStart/13 s.BracketNumber#1/14 s.VarNumber#1/15 )/12 >/1
    {refalrts::icIdentTerm, 0, 16, 13},
    // closed e.Indent#1 as range 5
    {refalrts::icSave, 0, 66, 9},
    {refalrts::icsVarLeft, 0, 14, 66},
    {refalrts::icsVarLeft, 0, 15, 66},
    {refalrts::icEmpty, 0, 0, 66},
    {refalrts::icEmptyResult, 0, 0, 0},
    //TRASH: {REMOVED TILE}  {REMOVED TILE}  {REMOVED TILE}  {REMOVED TILE}  {REMOVED TILE}  {REMOVED TILE} 
    //RESULT: Tile{ [[ } Tile{ AsIs: (/7 AsIs: e.Indent#1/5 AsIs: )/8 AsIs: (/11 } e.Indent#1/5/16"{refalrts::icEStart, 0, "/18 Tile{ AsIs: </0 Reuse: & StrFromInt/4 } Tile{ AsIs: s.VarNumber#1/15 HalfReuse: >/12 HalfReuse: ','/1 } ' '/20 </21 Tile{ HalfReuse: & StrFromInt/13 AsIs: s.BracketNumber#1/14 } >/22"},"/23 )/25 Tile{ ]] }
    {refalrts::icCopyEVar, 16, 5, 0},
    {refalrts::icAllocString, 0, 20, 18},
    {refalrts::icAllocChar, 0, ' ', 20},
    {refalrts::icAllocBracket, 0, refalrts::ibOpenCall, 21},
    {refalrts::icAllocBracket, 0, refalrts::ibCloseCall, 22},
    {refalrts::icAllocString, 0, 13, 23},
    {refalrts::icAllocBracket, 0, refalrts::ibCloseBracket, 25},
    {refalrts::icUpdateFunc, 0, 3, 4},
    {refalrts::icReinitBracket, 0, refalrts::ibCloseCall, 12},
    {refalrts::icReinitChar, 0, ',', 1},
    {refalrts::icReinitFunc, 0, 3, 13},
    {refalrts::icLinkBrackets, 11, 25, 0},
    {refalrts::icPushStack, 0, 0, 22},
    {refalrts::icPushStack, 0, 0, 21},
    {refalrts::icPushStack, 0, 0, 12},
    {refalrts::icPushStack, 0, 0, 0},
    {refalrts::icLinkBrackets, 7, 8, 0},
    {refalrts::icSetResRightEdge, 0, 0, 0},
    {refalrts::icSpliceTile, 22, 25, 0},
    {refalrts::icSpliceTile, 13, 14, 0},
    {refalrts::icSpliceTile, 20, 21, 0},
    {refalrts::icSpliceTile, 15, 1, 0},
    {refalrts::icSpliceTile, 0, 4, 0},
    {refalrts::icSpliceTile, 18, 19, 0},
    {refalrts::icSpliceTile, 16, 17, 0},
    {refalrts::icSpliceTile, 7, 11, 0},
    {refalrts::icReturnResult_NoTrash, 0, 0, 0},
    {refalrts::icOnFailGoTo, +33, 0, 0},
    //(E )(#CmdiSaveS S )
    // </0 & GenCommand/4 (/7 e.Indent#1/5 )/8 (/11 # CmdiSave/13 s.OldBracketNumber#1/14 s.NewBracketNumber#1/15 )/12 >/1
    {refalrts::icIdentTerm, 0, 15, 13},
    // closed e.Indent#1 as range 5
    {refalrts::icSave, 0, 66, 9},
    {refalrts::icsVarLeft, 0, 14, 66},
    {refalrts::icsVarLeft, 0, 15, 66},
    {refalrts::icEmpty, 0, 0, 66},
    {refalrts::icEmptyResult, 0, 0, 0},
    //TRASH: {REMOVED TILE}  {REMOVED TILE}  {REMOVED TILE}  {REMOVED TILE}  {REMOVED TILE}  {REMOVED TILE} 
    //RESULT: Tile{ [[ } Tile{ AsIs: (/7 AsIs: e.Indent#1/5 AsIs: )/8 AsIs: (/11 } e.Indent#1/5/16"{refalrts::icSave, 0, "/18 Tile{ AsIs: </0 Reuse: & StrFromInt/4 } Tile{ AsIs: s.NewBracketNumber#1/15 HalfReuse: >/12 HalfReuse: ','/1 } ' '/20 </21 Tile{ HalfReuse: & StrFromInt/13 AsIs: s.OldBracketNumber#1/14 } >/22"},"/23 )/25 Tile{ ]] }
    {refalrts::icCopyEVar, 16, 5, 0},
    {refalrts::icAllocString, 0, 19, 18},
    {refalrts::icAllocChar, 0, ' ', 20},
    {refalrts::icAllocBracket, 0, refalrts::ibOpenCall, 21},
    {refalrts::icAllocBracket, 0, refalrts::ibCloseCall, 22},
    {refalrts::icAllocString, 0, 13, 23},
    {refalrts::icAllocBracket, 0, refalrts::ibCloseBracket, 25},
    {refalrts::icUpdateFunc, 0, 3, 4},
    {refalrts::icReinitBracket, 0, refalrts::ibCloseCall, 12},
    {refalrts::icReinitChar, 0, ',', 1},
    {refalrts::icReinitFunc, 0, 3, 13},
    {refalrts::icLinkBrackets, 11, 25, 0},
    {refalrts::icPushStack, 0, 0, 22},
    {refalrts::icPushStack, 0, 0, 21},
    {refalrts::icPushStack, 0, 0, 12},
    {refalrts::icPushStack, 0, 0, 0},
    {refalrts::icLinkBrackets, 7, 8, 0},
    {refalrts::icSetResRightEdge, 0, 0, 0},
    {refalrts::icSpliceTile, 22, 25, 0},
    {refalrts::icSpliceTile, 13, 14, 0},
    {refalrts::icSpliceTile, 20, 21, 0},
    {refalrts::icSpliceTile, 15, 1, 0},
    {refalrts::icSpliceTile, 0, 4, 0},
    {refalrts::icSpliceTile, 18, 19, 0},
    {refalrts::icSpliceTile, 16, 17, 0},
    {refalrts::icSpliceTile, 7, 11, 0},
    {refalrts::icReturnResult_NoTrash, 0, 0, 0},
    {refalrts::icOnFailGoTo, +19, 0, 0},
    //(E )(#CmdiEmptyResult)
    // </0 & GenCommand/4 (/7 e.Indent#1/5 )/8 (/11 # CmdiEmptyResult/13 )/12 >/1
    {refalrts::icIdentTerm, 0, 14, 13},
    {refalrts::icSave, 0, 66, 9},
    {refalrts::icEmpty, 0, 0, 66},
    // closed e.Indent#1 as range 5
    {refalrts::icEmptyResult, 0, 0, 0},
    //TRASH: {REMOVED TILE}  {REMOVED TILE}  {REMOVED TILE}  {REMOVED TILE} 
    //RESULT: Tile{ [[ } Tile{ AsIs: (/7 AsIs: e.Indent#1/5 AsIs: )/8 AsIs: (/11 } e.Indent#1/5/14 Tile{ HalfReuse: '{'/0 HalfReuse: 'r'/4 }"efalrts::icEmptyResult, 0, 0, 0"/16 Tile{ HalfReuse: '}'/13 HalfReuse: ','/12 HalfReuse: )/1 ]] }
    {refalrts::icCopyEVar, 14, 5, 0},
    {refalrts::icAllocString, 0, 18, 16},
    {refalrts::icReinitChar, 0, '{', 0},
    {refalrts::icReinitChar, 0, 'r', 4},
    {refalrts::icReinitChar, 0, '}', 13},
    {refalrts::icReinitChar, 0, ',', 12},
    {refalrts::icReinitBracket, 0, refalrts::ibCloseBracket, 1},
    {refalrts::icLinkBrackets, 11, 1, 0},
    {refalrts::icLinkBrackets, 7, 8, 0},
    {refalrts::icSetRes, 0, 0, 13},
    {refalrts::icSpliceTile, 16, 17, 0},
    {refalrts::icSpliceTile, 0, 4, 0},
    {refalrts::icSpliceTile, 14, 15, 0},
    {refalrts::icSpliceTile, 7, 11, 0},
    {refalrts::icReturnResult_NoTrash, 0, 0, 0},
    {refalrts::icOnFailGoTo, +28, 0, 0},
    //(E )(#CmdiSetResS )
    // </0 & GenCommand/4 (/7 e.Indent#1/5 )/8 (/11 # CmdiSetRes/13 s.Offset#1/14 )/12 >/1
    {refalrts::icIdentTerm, 0, 13, 13},
    // closed e.Indent#1 as range 5
    {refalrts::icSave, 0, 66, 9},
    {refalrts::icsVarLeft, 0, 14, 66},
    {refalrts::icEmpty, 0, 0, 66},
    {refalrts::icEmptyResult, 0, 0, 0},
    //TRASH: {REMOVED TILE}  {REMOVED TILE}  {REMOVED TILE}  {REMOVED TILE}  {REMOVED TILE} 
    //RESULT: Tile{ [[ } Tile{ AsIs: (/7 AsIs: e.Indent#1/5 AsIs: )/8 HalfReuse: </11 HalfReuse: & Fetch/13 AsIs: s.Offset#1/14 HalfReuse: </12 HalfReuse: & CreateClosure /1 } Tile{ Reuse: & lambda_GenCommand_6/4 } Tile{ HalfReuse: (/0 } e.Indent#1/5/15 )/17 >/18 >/19 Tile{ ]] }
    {refalrts::icCopyEVar, 15, 5, 0},
    {refalrts::icAllocBracket, 0, refalrts::ibCloseBracket, 17},
    {refalrts::icAllocBracket, 0, refalrts::ibCloseCall, 18},
    {refalrts::icAllocBracket, 0, refalrts::ibCloseCall, 19},
    {refalrts::icReinitBracket, 0, refalrts::ibOpenCall, 11},
    {refalrts::icReinitFunc, 0, 2, 13},
    {refalrts::icReinitBracket, 0, refalrts::ibOpenCall, 12},
    {refalrts::icReinitFunc, 0, 1, 1},
    {refalrts::icUpdateFunc, 0, 5, 4},
    {refalrts::icReinitBracket, 0, refalrts::ibOpenBracket, 0},
    {refalrts::icPushStack, 0, 0, 19},
    {refalrts::icPushStack, 0, 0, 11},
    {refalrts::icPushStack, 0, 0, 18},
    {refalrts::icPushStack, 0, 0, 12},
    {refalrts::icLinkBrackets, 0, 17, 0},
    {refalrts::icLinkBrackets, 7, 8, 0},
    {refalrts::icSetResRightEdge, 0, 0, 0},
    {refalrts::icSpliceTile, 17, 19, 0},
    {refalrts::icSpliceTile, 15, 16, 0},
    {refalrts::icSpliceTile, 0, 0, 0},
    {refalrts::icSpliceTile, 4, 4, 0},
    {refalrts::icSpliceTile, 7, 1, 0},
    {refalrts::icReturnResult_NoTrash, 0, 0, 0},
    {refalrts::icOnFailGoTo, +34, 0, 0},
    //(E )(#CmdiCopyVar'e'S S )
    // </0 & GenCommand/4 (/7 e.Indent#1/5 )/8 (/11 # CmdiCopyVar/13 'e'/14 s.Target#1/15 s.Sample#1/16 )/12 >/1
    {refalrts::icIdentTerm, 0, 12, 13},
    {refalrts::icSave, 0, 66, 9},
    {refalrts::icCharLeftSave, 14, static_cast<unsigned char>('e'), 66},
    // closed e.Indent#1 as range 5
    {refalrts::icsVarLeft, 0, 15, 66},
    {refalrts::icsVarLeft, 0, 16, 66},
    {refalrts::icEmpty, 0, 0, 66},
    {refalrts::icEmptyResult, 0, 0, 0},
    //TRASH: {REMOVED TILE}  {REMOVED TILE}  {REMOVED TILE}  {REMOVED TILE}  {REMOVED TILE}  {REMOVED TILE} 
    //RESULT: Tile{ [[ } Tile{ AsIs: (/7 AsIs: e.Indent#1/5 AsIs: )/8 AsIs: (/11 } e.Indent#1/5/17"{refalrts::icCopyEVar, "/19 Tile{ HalfReuse: </13 HalfReuse: & StrFromInt/14 AsIs: s.Target#1/15 } >/21", "/22 Tile{ AsIs: </0 Reuse: & StrFromInt/4 } Tile{ AsIs: s.Sample#1/16 HalfReuse: >/12 HalfReuse: ','/1 }" 0},"/24 )/26 Tile{ ]] }
    {refalrts::icCopyEVar, 17, 5, 0},
    {refalrts::icAllocString, 0, 17, 19},
    {refalrts::icAllocBracket, 0, refalrts::ibCloseCall, 21},
    {refalrts::icAllocString, 0, 4, 22},
    {refalrts::icAllocString, 0, 3, 24},
    {refalrts::icAllocBracket, 0, refalrts::ibCloseBracket, 26},
    {refalrts::icReinitBracket, 0, refalrts::ibOpenCall, 13},
    {refalrts::icReinitFunc, 0, 3, 14},
    {refalrts::icUpdateFunc, 0, 3, 4},
    {refalrts::icReinitBracket, 0, refalrts::ibCloseCall, 12},
    {refalrts::icReinitChar, 0, ',', 1},
    {refalrts::icLinkBrackets, 11, 26, 0},
    {refalrts::icPushStack, 0, 0, 12},
    {refalrts::icPushStack, 0, 0, 0},
    {refalrts::icPushStack, 0, 0, 21},
    {refalrts::icPushStack, 0, 0, 13},
    {refalrts::icLinkBrackets, 7, 8, 0},
    {refalrts::icSetResRightEdge, 0, 0, 0},
    {refalrts::icSpliceTile, 24, 26, 0},
    {refalrts::icSpliceTile, 16, 1, 0},
    {refalrts::icSpliceTile, 0, 4, 0},
    {refalrts::icSpliceTile, 21, 23, 0},
    {refalrts::icSpliceTile, 13, 15, 0},
    {refalrts::icSpliceTile, 19, 20, 0},
    {refalrts::icSpliceTile, 17, 18, 0},
    {refalrts::icSpliceTile, 7, 11, 0},
    {refalrts::icReturnResult_NoTrash, 0, 0, 0},
    {refalrts::icOnFailGoTo, +39, 0, 0},
    //(E )(#CmdiCopyVarS S S )
    // </0 & GenCommand/4 (/7 e.Indent#1/5 )/8 (/11 # CmdiCopyVar/13 s.Mode#1/14 s.Target#1/15 s.Sample#1/16 )/12 >/1
    {refalrts::icIdentTerm, 0, 12, 13},
    // closed e.Indent#1 as range 5
    {refalrts::icSave, 0, 66, 9},
    {refalrts::icsVarLeft, 0, 14, 66},
    {refalrts::icsVarLeft, 0, 15, 66},
    {refalrts::icsVarLeft, 0, 16, 66},
    {refalrts::icEmpty, 0, 0, 66},
    {refalrts::icEmptyResult, 0, 0, 0},
    //TRASH: {REMOVED TILE}  {REMOVED TILE}  {REMOVED TILE}  {REMOVED TILE}  s.Mode#1/14 {REMOVED TILE}  {REMOVED TILE}  {REMOVED TILE} 
    //RESULT: Tile{ [[ } Tile{ AsIs: (/7 AsIs: e.Indent#1/5 AsIs: )/8 AsIs: (/11 } e.Indent#1/5/17"{ref"/19 Tile{ HalfReuse: 'a'/13 }"lrts::icCopySTVar, "/21 Tile{ AsIs: </0 Reuse: & StrFromInt/4 } Tile{ AsIs: s.Target#1/15 } >/23", "/24 </26 & StrFromInt/27 Tile{ AsIs: s.Sample#1/16 HalfReuse: >/12 HalfReuse: ','/1 }" 0},"/28 )/30 Tile{ ]] }
    {refalrts::icCopyEVar, 17, 5, 0},
    {refalrts::icAllocString, 0, 16, 19},
    {refalrts::icAllocString, 0, 15, 21},
    {refalrts::icAllocBracket, 0, refalrts::ibCloseCall, 23},
    {refalrts::icAllocString, 0, 4, 24},
    {refalrts::icAllocBracket, 0, refalrts::ibOpenCall, 26},
    {refalrts::icAllocFunc, 0, 3, 27},
    {refalrts::icAllocString, 0, 3, 28},
    {refalrts::icAllocBracket, 0, refalrts::ibCloseBracket, 30},
    {refalrts::icReinitChar, 0, 'a', 13},
    {refalrts::icUpdateFunc, 0, 3, 4},
    {refalrts::icReinitBracket, 0, refalrts::ibCloseCall, 12},
    {refalrts::icReinitChar, 0, ',', 1},
    {refalrts::icLinkBrackets, 11, 30, 0},
    {refalrts::icPushStack, 0, 0, 12},
    {refalrts::icPushStack, 0, 0, 26},
    {refalrts::icPushStack, 0, 0, 23},
    {refalrts::icPushStack, 0, 0, 0},
    {refalrts::icLinkBrackets, 7, 8, 0},
    {refalrts::icSetResRightEdge, 0, 0, 0},
    {refalrts::icSpliceTile, 28, 30, 0},
    {refalrts::icSpliceTile, 16, 1, 0},
    {refalrts::icSpliceTile, 23, 27, 0},
    {refalrts::icSpliceTile, 15, 15, 0},
    {refalrts::icSpliceTile, 0, 4, 0},
    {refalrts::icSpliceTile, 21, 22, 0},
    {refalrts::icSpliceTile, 13, 13, 0},
    {refalrts::icSpliceTile, 19, 20, 0},
    {refalrts::icSpliceTile, 17, 18, 0},
    {refalrts::icSpliceTile, 7, 11, 0},
    {refalrts::icTrashLeftEdge, 0, 0, 0},
    {refalrts::icReturnResult_NoTrash, 0, 0, 0},
    {refalrts::icOnFailGoTo, +33, 0, 0},
    //(E )(#CmdiReinitSVarS S )
    // </0 & GenCommand/4 (/7 e.Indent#1/5 )/8 (/11 # CmdiReinitSVar/13 s.Offset#1/14 s.Sample#1/15 )/12 >/1
    {refalrts::icIdentTerm, 0, 11, 13},
    // closed e.Indent#1 as range 5
    {refalrts::icSave, 0, 66, 9},
    {refalrts::icsVarLeft, 0, 14, 66},
    {refalrts::icsVarLeft, 0, 15, 66},
    {refalrts::icEmpty, 0, 0, 66},
    {refalrts::icEmptyResult, 0, 0, 0},
    //TRASH: {REMOVED TILE}  {REMOVED TILE}  {REMOVED TILE}  {REMOVED TILE}  {REMOVED TILE}  {REMOVED TILE} 
    //RESULT: Tile{ [[ } Tile{ AsIs: (/7 AsIs: e.Indent#1/5 AsIs: )/8 AsIs: (/11 } e.Indent#1/5/16"{refalrts::icReinitSVar, 0, "/18 Tile{ AsIs: </0 Reuse: & StrFromInt/4 } Tile{ AsIs: s.Sample#1/15 HalfReuse: >/12 HalfReuse: ','/1 } ' '/20 </21 Tile{ HalfReuse: & StrFromInt/13 AsIs: s.Offset#1/14 } >/22"},"/23 )/25 Tile{ ]] }
    {refalrts::icCopyEVar, 16, 5, 0},
    {refalrts::icAllocString, 0, 14, 18},
    {refalrts::icAllocChar, 0, ' ', 20},
    {refalrts::icAllocBracket, 0, refalrts::ibOpenCall, 21},
    {refalrts::icAllocBracket, 0, refalrts::ibCloseCall, 22},
    {refalrts::icAllocString, 0, 13, 23},
    {refalrts::icAllocBracket, 0, refalrts::ibCloseBracket, 25},
    {refalrts::icUpdateFunc, 0, 3, 4},
    {refalrts::icReinitBracket, 0, refalrts::ibCloseCall, 12},
    {refalrts::icReinitChar, 0, ',', 1},
    {refalrts::icReinitFunc, 0, 3, 13},
    {refalrts::icLinkBrackets, 11, 25, 0},
    {refalrts::icPushStack, 0, 0, 22},
    {refalrts::icPushStack, 0, 0, 21},
    {refalrts::icPushStack, 0, 0, 12},
    {refalrts::icPushStack, 0, 0, 0},
    {refalrts::icLinkBrackets, 7, 8, 0},
    {refalrts::icSetResRightEdge, 0, 0, 0},
    {refalrts::icSpliceTile, 22, 25, 0},
    {refalrts::icSpliceTile, 13, 14, 0},
    {refalrts::icSpliceTile, 20, 21, 0},
    {refalrts::icSpliceTile, 15, 1, 0},
    {refalrts::icSpliceTile, 0, 4, 0},
    {refalrts::icSpliceTile, 18, 19, 0},
    {refalrts::icSpliceTile, 16, 17, 0},
    {refalrts::icSpliceTile, 7, 11, 0},
    {refalrts::icReturnResult_NoTrash, 0, 0, 0},
    {refalrts::icOnFailGoTo, +25, 0, 0},
    //(E )(#CmdiCreateElemS S S E )
    // </0 & GenCommand/4 (/7 e.Indent#1/5 )/8 (/11 # CmdiCreateElem/13 s.CreateMode#1/14 s.ElemNumber#1/15 s.Type#1/16 e.Info#1/9 )/12 >/1
    {refalrts::icIdentTerm, 0, 10, 13},
    // closed e.Indent#1 as range 5
    {refalrts::icSave, 0, 66, 9},
    {refalrts::icsVarLeft, 0, 14, 66},
    {refalrts::icsVarLeft, 0, 15, 66},
    {refalrts::icsVarLeft, 0, 16, 66},
    // closed e.Info#1 as range 66(9)
    {refalrts::icEmptyResult, 0, 0, 0},
    //TRASH: {REMOVED TILE}  {REMOVED TILE}  s.CreateMode#1/14 s.ElemNumber#1/15 {REMOVED TILE}  {REMOVED TILE}  {REMOVED TILE} 
    //RESULT: Tile{ [[ } (/17 e.Indent#1/5/18 Tile{ HalfReuse: )/1 } Tile{ AsIs: </0 Reuse: & PrintInterpretCreateElem/4 AsIs: (/7 AsIs: e.Indent#1/5 AsIs: )/8 HalfReuse: s.CreateMode1 #14/11 HalfReuse: s.ElemNumber1 #15/13 } Tile{ AsIs: s.Type#1/16 AsIs: e.Info#1/66(9) HalfReuse: >/12 } Tile{ ]] }
    {refalrts::icAllocBracket, 0, refalrts::ibOpenBracket, 17},
    {refalrts::icCopyEVar, 18, 5, 0},
    {refalrts::icReinitBracket, 0, refalrts::ibCloseBracket, 1},
    {refalrts::icUpdateFunc, 0, 4, 4},
    {refalrts::icReinitSVar, 0, 14, 11},
    {refalrts::icReinitSVar, 0, 15, 13},
    {refalrts::icReinitBracket, 0, refalrts::ibCloseCall, 12},
    {refalrts::icPushStack, 0, 0, 12},
    {refalrts::icPushStack, 0, 0, 0},
    {refalrts::icLinkBrackets, 7, 8, 0},
    {refalrts::icLinkBrackets, 17, 1, 0},
    {refalrts::icSetResRightEdge, 0, 0, 0},
    {refalrts::icSpliceTile, 16, 12, 0},
    {refalrts::icSpliceTile, 0, 13, 0},
    {refalrts::icSpliceTile, 1, 1, 0},
    {refalrts::icSpliceTile, 18, 19, 0},
    {refalrts::icSpliceTile, 17, 17, 0},
    {refalrts::icTrashLeftEdge, 0, 0, 0},
    {refalrts::icReturnResult_NoTrash, 0, 0, 0},
    {refalrts::icOnFailGoTo, +37, 0, 0},
    //(E )(#CmdiLinkBracketsS S )
    // </0 & GenCommand/4 (/7 e.Indent#1/5 )/8 (/11 # CmdiLinkBrackets/13 s.Left#1/14 s.Right#1/15 )/12 >/1
    {refalrts::icIdentTerm, 0, 9, 13},
    // closed e.Indent#1 as range 5
    {refalrts::icSave, 0, 66, 9},
    {refalrts::icsVarLeft, 0, 14, 66},
    {refalrts::icsVarLeft, 0, 15, 66},
    {refalrts::icEmpty, 0, 0, 66},
    {refalrts::icEmptyResult, 0, 0, 0},
    //TRASH: {REMOVED TILE}  {REMOVED TILE}  {REMOVED TILE}  {REMOVED TILE}  {REMOVED TILE}  {REMOVED TILE}  {REMOVED TILE} 
    //RESULT: Tile{ [[ } Tile{ AsIs: (/7 AsIs: e.Indent#1/5 AsIs: )/8 AsIs: (/11 } e.Indent#1/5/16"{re"/18 Tile{ HalfReuse: 'f'/13 }"alrts::icLinkBrackets, "/20 Tile{ AsIs: </0 Reuse: & StrFromInt/4 } Tile{ AsIs: s.Left#1/14 } >/22", "/23 </25 & StrFromInt/26 Tile{ AsIs: s.Right#1/15 HalfReuse: >/12 HalfReuse: ','/1 }" 0},"/27 )/29 Tile{ ]] }
    {refalrts::icCopyEVar, 16, 5, 0},
    {refalrts::icAllocString, 0, 6, 18},
    {refalrts::icAllocString, 0, 12, 20},
    {refalrts::icAllocBracket, 0, refalrts::ibCloseCall, 22},
    {refalrts::icAllocString, 0, 4, 23},
    {refalrts::icAllocBracket, 0, refalrts::ibOpenCall, 25},
    {refalrts::icAllocFunc, 0, 3, 26},
    {refalrts::icAllocString, 0, 3, 27},
    {refalrts::icAllocBracket, 0, refalrts::ibCloseBracket, 29},
    {refalrts::icReinitChar, 0, 'f', 13},
    {refalrts::icUpdateFunc, 0, 3, 4},
    {refalrts::icReinitBracket, 0, refalrts::ibCloseCall, 12},
    {refalrts::icReinitChar, 0, ',', 1},
    {refalrts::icLinkBrackets, 11, 29, 0},
    {refalrts::icPushStack, 0, 0, 12},
    {refalrts::icPushStack, 0, 0, 25},
    {refalrts::icPushStack, 0, 0, 22},
    {refalrts::icPushStack, 0, 0, 0},
    {refalrts::icLinkBrackets, 7, 8, 0},
    {refalrts::icSetResRightEdge, 0, 0, 0},
    {refalrts::icSpliceTile, 27, 29, 0},
    {refalrts::icSpliceTile, 15, 1, 0},
    {refalrts::icSpliceTile, 22, 26, 0},
    {refalrts::icSpliceTile, 14, 14, 0},
    {refalrts::icSpliceTile, 0, 4, 0},
    {refalrts::icSpliceTile, 20, 21, 0},
    {refalrts::icSpliceTile, 13, 13, 0},
    {refalrts::icSpliceTile, 18, 19, 0},
    {refalrts::icSpliceTile, 16, 17, 0},
    {refalrts::icSpliceTile, 7, 11, 0},
    {refalrts::icReturnResult_NoTrash, 0, 0, 0},
    {refalrts::icOnFailGoTo, +26, 0, 0},
    //(E )(#CmdiPushStackS )
    // </0 & GenCommand/4 (/7 e.Indent#1/5 )/8 (/11 # CmdiPushStack/13 s.ElemNumber#1/14 )/12 >/1
    {refalrts::icIdentTerm, 0, 8, 13},
    // closed e.Indent#1 as range 5
    {refalrts::icSave, 0, 66, 9},
    {refalrts::icsVarLeft, 0, 14, 66},
    {refalrts::icEmpty, 0, 0, 66},
    {refalrts::icEmptyResult, 0, 0, 0},
    //TRASH: {REMOVED TILE}  {REMOVED TILE}  {REMOVED TILE}  {REMOVED TILE}  {REMOVED TILE}  {REMOVED TILE} 
    //RESULT: Tile{ [[ } Tile{ AsIs: (/7 AsIs: e.Indent#1/5 AsIs: )/8 AsIs: (/11 } e.Indent#1/5/15 Tile{ HalfReuse: '{'/4 }"refalrts::icPushStack, 0, 0, "/17 Tile{ AsIs: </0 } Tile{ HalfReuse: & StrFromInt/13 AsIs: s.ElemNumber#1/14 HalfReuse: >/12 HalfReuse: '}'/1 } ','/19 )/20 Tile{ ]] }
    {refalrts::icCopyEVar, 15, 5, 0},
    {refalrts::icAllocString, 0, 11, 17},
    {refalrts::icAllocChar, 0, ',', 19},
    {refalrts::icAllocBracket, 0, refalrts::ibCloseBracket, 20},
    {refalrts::icReinitChar, 0, '{', 4},
    {refalrts::icReinitFunc, 0, 3, 13},
    {refalrts::icReinitBracket, 0, refalrts::ibCloseCall, 12},
    {refalrts::icReinitChar, 0, '}', 1},
    {refalrts::icLinkBrackets, 11, 20, 0},
    {refalrts::icPushStack, 0, 0, 12},
    {refalrts::icPushStack, 0, 0, 0},
    {refalrts::icLinkBrackets, 7, 8, 0},
    {refalrts::icSetResRightEdge, 0, 0, 0},
    {refalrts::icSpliceTile, 19, 20, 0},
    {refalrts::icSpliceTile, 13, 1, 0},
    {refalrts::icSpliceTile, 0, 0, 0},
    {refalrts::icSpliceTile, 17, 18, 0},
    {refalrts::icSpliceTile, 4, 4, 0},
    {refalrts::icSpliceTile, 15, 16, 0},
    {refalrts::icSpliceTile, 7, 11, 0},
    {refalrts::icReturnResult_NoTrash, 0, 0, 0},
    {refalrts::icOnFailGoTo, +26, 0, 0},
    //(E )(#CmdiInsertElemS )
    // </0 & GenCommand/4 (/7 e.Indent#1/5 )/8 (/11 # CmdiInsertElem/13 s.ElemNumber#1/14 )/12 >/1
    {refalrts::icIdentTerm, 0, 7, 13},
    // closed e.Indent#1 as range 5
    {refalrts::icSave, 0, 66, 9},
    {refalrts::icsVarLeft, 0, 14, 66},
    {refalrts::icEmpty, 0, 0, 66},
    {refalrts::icEmptyResult, 0, 0, 0},
    //TRASH: {REMOVED TILE}  {REMOVED TILE}  {REMOVED TILE}  {REMOVED TILE}  {REMOVED TILE}  {REMOVED TILE} 
    //RESULT: Tile{ [[ } Tile{ AsIs: (/7 AsIs: e.Indent#1/5 AsIs: )/8 AsIs: (/11 } e.Indent#1/5/15 Tile{ HalfReuse: '{'/4 }"refalrts::icSpliceElem, 0, 0, "/17 Tile{ AsIs: </0 } Tile{ HalfReuse: & StrFromInt/13 AsIs: s.ElemNumber#1/14 HalfReuse: >/12 HalfReuse: '}'/1 } ','/19 )/20 Tile{ ]] }
    {refalrts::icCopyEVar, 15, 5, 0},
    {refalrts::icAllocString, 0, 10, 17},
    {refalrts::icAllocChar, 0, ',', 19},
    {refalrts::icAllocBracket, 0, refalrts::ibCloseBracket, 20},
    {refalrts::icReinitChar, 0, '{', 4},
    {refalrts::icReinitFunc, 0, 3, 13},
    {refalrts::icReinitBracket, 0, refalrts::ibCloseCall, 12},
    {refalrts::icReinitChar, 0, '}', 1},
    {refalrts::icLinkBrackets, 11, 20, 0},
    {refalrts::icPushStack, 0, 0, 12},
    {refalrts::icPushStack, 0, 0, 0},
    {refalrts::icLinkBrackets, 7, 8, 0},
    {refalrts::icSetResRightEdge, 0, 0, 0},
    {refalrts::icSpliceTile, 19, 20, 0},
    {refalrts::icSpliceTile, 13, 1, 0},
    {refalrts::icSpliceTile, 0, 0, 0},
    {refalrts::icSpliceTile, 17, 18, 0},
    {refalrts::icSpliceTile, 4, 4, 0},
    {refalrts::icSpliceTile, 15, 16, 0},
    {refalrts::icSpliceTile, 7, 11, 0},
    {refalrts::icReturnResult_NoTrash, 0, 0, 0},
    {refalrts::icOnFailGoTo, +30, 0, 0},
    //(E )(#CmdiInsertVar'e'S )
    // </0 & GenCommand/4 (/7 e.Indent#1/5 )/8 (/11 # CmdiInsertVar/13 'e'/14 s.Offset#1/15 )/12 >/1
    {refalrts::icIdentTerm, 0, 6, 13},
    {refalrts::icSave, 0, 66, 9},
    {refalrts::icCharLeftSave, 14, static_cast<unsigned char>('e'), 66},
    // closed e.Indent#1 as range 5
    {refalrts::icsVarLeft, 0, 15, 66},
    {refalrts::icEmpty, 0, 0, 66},
    {refalrts::icEmptyResult, 0, 0, 0},
    //TRASH: {REMOVED TILE}  {REMOVED TILE}  {REMOVED TILE}  {REMOVED TILE}  {REMOVED TILE} 
    //RESULT: Tile{ [[ } Tile{ AsIs: (/7 AsIs: e.Indent#1/5 AsIs: )/8 AsIs: (/11 } e.Indent#1/5/16 '{'/18 Tile{ HalfReuse: 'r'/0 HalfReuse: 'e'/4 }"falrts::icSpliceEVar, 0, 0, "/19 Tile{ HalfReuse: </13 HalfReuse: & StrFromInt/14 AsIs: s.Offset#1/15 HalfReuse: >/12 HalfReuse: '}'/1 } ','/21 )/22 Tile{ ]] }
    {refalrts::icCopyEVar, 16, 5, 0},
    {refalrts::icAllocChar, 0, '{', 18},
    {refalrts::icAllocString, 0, 9, 19},
    {refalrts::icAllocChar, 0, ',', 21},
    {refalrts::icAllocBracket, 0, refalrts::ibCloseBracket, 22},
    {refalrts::icReinitChar, 0, 'r', 0},
    {refalrts::icReinitChar, 0, 'e', 4},
    {refalrts::icReinitBracket, 0, refalrts::ibOpenCall, 13},
    {refalrts::icReinitFunc, 0, 3, 14},
    {refalrts::icReinitBracket, 0, refalrts::ibCloseCall, 12},
    {refalrts::icReinitChar, 0, '}', 1},
    {refalrts::icLinkBrackets, 11, 22, 0},
    {refalrts::icPushStack, 0, 0, 12},
    {refalrts::icPushStack, 0, 0, 13},
    {refalrts::icLinkBrackets, 7, 8, 0},
    {refalrts::icSetResRightEdge, 0, 0, 0},
    {refalrts::icSpliceTile, 21, 22, 0},
    {refalrts::icSpliceTile, 13, 1, 0},
    {refalrts::icSpliceTile, 19, 20, 0},
    {refalrts::icSpliceTile, 0, 4, 0},
    {refalrts::icSpliceTile, 18, 18, 0},
    {refalrts::icSpliceTile, 16, 17, 0},
    {refalrts::icSpliceTile, 7, 11, 0},
    {refalrts::icReturnResult_NoTrash, 0, 0, 0},
    {refalrts::icOnFailGoTo, +30, 0, 0},
    //(E )(#CmdiInsertVarS S )
    // </0 & GenCommand/4 (/7 e.Indent#1/5 )/8 (/11 # CmdiInsertVar/13 s.Mode#1/14 s.Offset#1/15 )/12 >/1
    {refalrts::icIdentTerm, 0, 6, 13},
    // closed e.Indent#1 as range 5
    {refalrts::icSave, 0, 66, 9},
    {refalrts::icsVarLeft, 0, 14, 66},
    {refalrts::icsVarLeft, 0, 15, 66},
    {refalrts::icEmpty, 0, 0, 66},
    {refalrts::icEmptyResult, 0, 0, 0},
    //TRASH: {REMOVED TILE}  {REMOVED TILE}  {REMOVED TILE}  {REMOVED TILE}  s.Mode#1/14 {REMOVED TILE}  {REMOVED TILE} 
    //RESULT: Tile{ [[ } Tile{ AsIs: (/7 AsIs: e.Indent#1/5 AsIs: )/8 AsIs: (/11 } e.Indent#1/5/16"{re"/18 Tile{ HalfReuse: 'f'/13 }"alrts::icSpliceSTVar, 0, 0, "/20 Tile{ AsIs: </0 Reuse: & StrFromInt/4 } Tile{ AsIs: s.Offset#1/15 HalfReuse: >/12 HalfReuse: '}'/1 } ','/22 )/23 Tile{ ]] }
    {refalrts::icCopyEVar, 16, 5, 0},
    {refalrts::icAllocString, 0, 6, 18},
    {refalrts::icAllocString, 0, 8, 20},
    {refalrts::icAllocChar, 0, ',', 22},
    {refalrts::icAllocBracket, 0, refalrts::ibCloseBracket, 23},
    {refalrts::icReinitChar, 0, 'f', 13},
    {refalrts::icUpdateFunc, 0, 3, 4},
    {refalrts::icReinitBracket, 0, refalrts::ibCloseCall, 12},
    {refalrts::icReinitChar, 0, '}', 1},
    {refalrts::icLinkBrackets, 11, 23, 0},
    {refalrts::icPushStack, 0, 0, 12},
    {refalrts::icPushStack, 0, 0, 0},
    {refalrts::icLinkBrackets, 7, 8, 0},
    {refalrts::icSetResRightEdge, 0, 0, 0},
    {refalrts::icSpliceTile, 22, 23, 0},
    {refalrts::icSpliceTile, 15, 1, 0},
    {refalrts::icSpliceTile, 0, 4, 0},
    {refalrts::icSpliceTile, 20, 21, 0},
    {refalrts::icSpliceTile, 13, 13, 0},
    {refalrts::icSpliceTile, 18, 19, 0},
    {refalrts::icSpliceTile, 16, 17, 0},
    {refalrts::icSpliceTile, 7, 11, 0},
    {refalrts::icTrashLeftEdge, 0, 0, 0},
    {refalrts::icReturnResult_NoTrash, 0, 0, 0},
    {refalrts::icOnFailGoTo, +26, 0, 0},
    //(E )(#CmdiInsertRangeS )
    // </0 & GenCommand/4 (/7 e.Indent#1/5 )/8 (/11 # CmdiInsertRange/13 s.ElemNumber#1/14 )/12 >/1
    {refalrts::icIdentTerm, 0, 5, 13},
    // closed e.Indent#1 as range 5
    {refalrts::icSave, 0, 66, 9},
    {refalrts::icsVarLeft, 0, 14, 66},
    {refalrts::icEmpty, 0, 0, 66},
    {refalrts::icEmptyResult, 0, 0, 0},
    //TRASH: {REMOVED TILE}  {REMOVED TILE}  {REMOVED TILE}  {REMOVED TILE}  {REMOVED TILE}  {REMOVED TILE} 
    //RESULT: Tile{ [[ } Tile{ AsIs: (/7 AsIs: e.Indent#1/5 AsIs: )/8 AsIs: (/11 } e.Indent#1/5/15 Tile{ HalfReuse: '{'/4 }"refalrts::icSpliceRange, 0, 0, "/17 Tile{ AsIs: </0 } Tile{ HalfReuse: & StrFromInt/13 AsIs: s.ElemNumber#1/14 HalfReuse: >/12 HalfReuse: '}'/1 } ','/19 )/20 Tile{ ]] }
    {refalrts::icCopyEVar, 15, 5, 0},
    {refalrts::icAllocString, 0, 7, 17},
    {refalrts::icAllocChar, 0, ',', 19},
    {refalrts::icAllocBracket, 0, refalrts::ibCloseBracket, 20},
    {refalrts::icReinitChar, 0, '{', 4},
    {refalrts::icReinitFunc, 0, 3, 13},
    {refalrts::icReinitBracket, 0, refalrts::ibCloseCall, 12},
    {refalrts::icReinitChar, 0, '}', 1},
    {refalrts::icLinkBrackets, 11, 20, 0},
    {refalrts::icPushStack, 0, 0, 12},
    {refalrts::icPushStack, 0, 0, 0},
    {refalrts::icLinkBrackets, 7, 8, 0},
    {refalrts::icSetResRightEdge, 0, 0, 0},
    {refalrts::icSpliceTile, 19, 20, 0},
    {refalrts::icSpliceTile, 13, 1, 0},
    {refalrts::icSpliceTile, 0, 0, 0},
    {refalrts::icSpliceTile, 17, 18, 0},
    {refalrts::icSpliceTile, 4, 4, 0},
    {refalrts::icSpliceTile, 15, 16, 0},
    {refalrts::icSpliceTile, 7, 11, 0},
    {refalrts::icReturnResult_NoTrash, 0, 0, 0},
    {refalrts::icOnFailGoTo, +37, 0, 0},
    //(E )(#CmdiInsertTileS S )
    // </0 & GenCommand/4 (/7 e.Indent#1/5 )/8 (/11 # CmdiInsertTile/13 s.BeginOffset#1/14 s.EndOffset#1/15 )/12 >/1
    {refalrts::icIdentTerm, 0, 4, 13},
    // closed e.Indent#1 as range 5
    {refalrts::icSave, 0, 66, 9},
    {refalrts::icsVarLeft, 0, 14, 66},
    {refalrts::icsVarLeft, 0, 15, 66},
    {refalrts::icEmpty, 0, 0, 66},
    {refalrts::icEmptyResult, 0, 0, 0},
    //TRASH: {REMOVED TILE}  {REMOVED TILE}  {REMOVED TILE}  {REMOVED TILE}  {REMOVED TILE}  {REMOVED TILE}  {REMOVED TILE} 
    //RESULT: Tile{ [[ } Tile{ AsIs: (/7 AsIs: e.Indent#1/5 AsIs: )/8 AsIs: (/11 } e.Indent#1/5/16"{re"/18 Tile{ HalfReuse: 'f'/13 }"alrts::icSpliceTile, "/20 Tile{ AsIs: </0 Reuse: & StrFromInt/4 } Tile{ AsIs: s.BeginOffset#1/14 } >/22", "/23 </25 & StrFromInt/26 Tile{ AsIs: s.EndOffset#1/15 HalfReuse: >/12 HalfReuse: ','/1 }" 0},"/27 )/29 Tile{ ]] }
    {refalrts::icCopyEVar, 16, 5, 0},
    {refalrts::icAllocString, 0, 6, 18},
    {refalrts::icAllocString, 0, 5, 20},
    {refalrts::icAllocBracket, 0, refalrts::ibCloseCall, 22},
    {refalrts::icAllocString, 0, 4, 23},
    {refalrts::icAllocBracket, 0, refalrts::ibOpenCall, 25},
    {refalrts::icAllocFunc, 0, 3, 26},
    {refalrts::icAllocString, 0, 3, 27},
    {refalrts::icAllocBracket, 0, refalrts::ibCloseBracket, 29},
    {refalrts::icReinitChar, 0, 'f', 13},
    {refalrts::icUpdateFunc, 0, 3, 4},
    {refalrts::icReinitBracket, 0, refalrts::ibCloseCall, 12},
    {refalrts::icReinitChar, 0, ',', 1},
    {refalrts::icLinkBrackets, 11, 29, 0},
    {refalrts::icPushStack, 0, 0, 12},
    {refalrts::icPushStack, 0, 0, 25},
    {refalrts::icPushStack, 0, 0, 22},
    {refalrts::icPushStack, 0, 0, 0},
    {refalrts::icLinkBrackets, 7, 8, 0},
    {refalrts::icSetResRightEdge, 0, 0, 0},
    {refalrts::icSpliceTile, 27, 29, 0},
    {refalrts::icSpliceTile, 15, 1, 0},
    {refalrts::icSpliceTile, 22, 26, 0},
    {refalrts::icSpliceTile, 14, 14, 0},
    {refalrts::icSpliceTile, 0, 4, 0},
    {refalrts::icSpliceTile, 20, 21, 0},
    {refalrts::icSpliceTile, 13, 13, 0},
    {refalrts::icSpliceTile, 18, 19, 0},
    {refalrts::icSpliceTile, 16, 17, 0},
    {refalrts::icSpliceTile, 7, 11, 0},
    {refalrts::icReturnResult_NoTrash, 0, 0, 0},
    {refalrts::icOnFailGoTo, +19, 0, 0},
    //(E )(#CmdiReturnResult)
    // </0 & GenCommand/4 (/7 e.Indent#1/5 )/8 (/11 # CmdiReturnResult/13 )/12 >/1
    {refalrts::icIdentTerm, 0, 3, 13},
    {refalrts::icSave, 0, 66, 9},
    {refalrts::icEmpty, 0, 0, 66},
    // closed e.Indent#1 as range 5
    {refalrts::icEmptyResult, 0, 0, 0},
    //TRASH: {REMOVED TILE}  {REMOVED TILE}  {REMOVED TILE}  {REMOVED TILE} 
    //RESULT: Tile{ [[ } Tile{ AsIs: (/7 AsIs: e.Indent#1/5 AsIs: )/8 AsIs: (/11 } e.Indent#1/5/14 Tile{ HalfReuse: '{'/0 HalfReuse: 'r'/4 }"efalrts::icReturnResult, 0, 0, 0"/16 Tile{ HalfReuse: '}'/13 HalfReuse: ','/12 HalfReuse: )/1 ]] }
    {refalrts::icCopyEVar, 14, 5, 0},
    {refalrts::icAllocString, 0, 2, 16},
    {refalrts::icReinitChar, 0, '{', 0},
    {refalrts::icReinitChar, 0, 'r', 4},
    {refalrts::icReinitChar, 0, '}', 13},
    {refalrts::icReinitChar, 0, ',', 12},
    {refalrts::icReinitBracket, 0, refalrts::ibCloseBracket, 1},
    {refalrts::icLinkBrackets, 11, 1, 0},
    {refalrts::icLinkBrackets, 7, 8, 0},
    {refalrts::icSetRes, 0, 0, 13},
    {refalrts::icSpliceTile, 16, 17, 0},
    {refalrts::icSpliceTile, 0, 4, 0},
    {refalrts::icSpliceTile, 14, 15, 0},
    {refalrts::icSpliceTile, 7, 11, 0},
    {refalrts::icReturnResult_NoTrash, 0, 0, 0},
    {refalrts::icOnFailGoTo, +19, 0, 0},
    //(E )(#CmdiReturnResult_NoTrash)
    // </0 & GenCommand/4 (/7 e.Indent#1/5 )/8 (/11 # CmdiReturnResult_NoTrash/13 )/12 >/1
    {refalrts::icIdentTerm, 0, 2, 13},
    {refalrts::icSave, 0, 66, 9},
    {refalrts::icEmpty, 0, 0, 66},
    // closed e.Indent#1 as range 5
    {refalrts::icEmptyResult, 0, 0, 0},
    //TRASH: {REMOVED TILE}  {REMOVED TILE}  {REMOVED TILE}  {REMOVED TILE} 
    //RESULT: Tile{ [[ } Tile{ AsIs: (/7 AsIs: e.Indent#1/5 AsIs: )/8 AsIs: (/11 } e.Indent#1/5/14 Tile{ HalfReuse: '{'/0 HalfReuse: 'r'/4 }"efalrts::icReturnResult_NoTrash, 0, 0, 0"/16 Tile{ HalfReuse: '}'/13 HalfReuse: ','/12 HalfReuse: )/1 ]] }
    {refalrts::icCopyEVar, 14, 5, 0},
    {refalrts::icAllocString, 0, 1, 16},
    {refalrts::icReinitChar, 0, '{', 0},
    {refalrts::icReinitChar, 0, 'r', 4},
    {refalrts::icReinitChar, 0, '}', 13},
    {refalrts::icReinitChar, 0, ',', 12},
    {refalrts::icReinitBracket, 0, refalrts::ibCloseBracket, 1},
    {refalrts::icLinkBrackets, 11, 1, 0},
    {refalrts::icLinkBrackets, 7, 8, 0},
    {refalrts::icSetRes, 0, 0, 13},
    {refalrts::icSpliceTile, 16, 17, 0},
    {refalrts::icSpliceTile, 0, 4, 0},
    {refalrts::icSpliceTile, 14, 15, 0},
    {refalrts::icSpliceTile, 7, 11, 0},
    {refalrts::icReturnResult_NoTrash, 0, 0, 0},
    {refalrts::icOnFailGoTo, +28, 0, 0},
    //(E )(#CmdiTrashS )
    // </0 & GenCommand/4 (/7 e.Indent#1/5 )/8 (/11 # CmdiTrash/13 s.Offset#1/14 )/12 >/1
    {refalrts::icIdentTerm, 0, 1, 13},
    // closed e.Indent#1 as range 5
    {refalrts::icSave, 0, 66, 9},
    {refalrts::icsVarLeft, 0, 14, 66},
    {refalrts::icEmpty, 0, 0, 66},
    {refalrts::icEmptyResult, 0, 0, 0},
    //TRASH: {REMOVED TILE}  {REMOVED TILE}  {REMOVED TILE}  {REMOVED TILE}  {REMOVED TILE} 
    //RESULT: Tile{ [[ } Tile{ AsIs: (/7 AsIs: e.Indent#1/5 AsIs: )/8 HalfReuse: </11 HalfReuse: & Fetch/13 AsIs: s.Offset#1/14 HalfReuse: </12 HalfReuse: & CreateClosure /1 } Tile{ Reuse: & lambda_GenCommand_7/4 } Tile{ HalfReuse: (/0 } e.Indent#1/5/15 )/17 >/18 >/19 Tile{ ]] }
    {refalrts::icCopyEVar, 15, 5, 0},
    {refalrts::icAllocBracket, 0, refalrts::ibCloseBracket, 17},
    {refalrts::icAllocBracket, 0, refalrts::ibCloseCall, 18},
    {refalrts::icAllocBracket, 0, refalrts::ibCloseCall, 19},
    {refalrts::icReinitBracket, 0, refalrts::ibOpenCall, 11},
    {refalrts::icReinitFunc, 0, 2, 13},
    {refalrts::icReinitBracket, 0, refalrts::ibOpenCall, 12},
    {refalrts::icReinitFunc, 0, 1, 1},
    {refalrts::icUpdateFunc, 0, 0, 4},
    {refalrts::icReinitBracket, 0, refalrts::ibOpenBracket, 0},
    {refalrts::icPushStack, 0, 0, 19},
    {refalrts::icPushStack, 0, 0, 11},
    {refalrts::icPushStack, 0, 0, 18},
    {refalrts::icPushStack, 0, 0, 12},
    {refalrts::icLinkBrackets, 0, 17, 0},
    {refalrts::icLinkBrackets, 7, 8, 0},
    {refalrts::icSetResRightEdge, 0, 0, 0},
    {refalrts::icSpliceTile, 17, 19, 0},
    {refalrts::icSpliceTile, 15, 16, 0},
    {refalrts::icSpliceTile, 0, 0, 0},
    {refalrts::icSpliceTile, 4, 4, 0},
    {refalrts::icSpliceTile, 7, 1, 0},
    {refalrts::icReturnResult_NoTrash, 0, 0, 0},
    //(E )(#CmdiFail)
    // </0 & GenCommand/4 (/7 e.Indent#1/5 )/8 (/11 # CmdiFail/13 )/12 >/1
    {refalrts::icIdentTerm, 0, 0, 13},
    {refalrts::icEmpty, 0, 0, 9},
    // closed e.Indent#1 as range 5
    {refalrts::icEmptyResult, 0, 0, 0},
    //TRASH: {REMOVED TILE}  {REMOVED TILE}  {REMOVED TILE}  {REMOVED TILE} 
    //RESULT: Tile{ [[ } Tile{ AsIs: (/7 AsIs: e.Indent#1/5 AsIs: )/8 AsIs: (/11 } e.Indent#1/5/14 Tile{ HalfReuse: '{'/0 HalfReuse: 'r'/4 }"efalrts::icFail, 0, 0, 0"/16 Tile{ HalfReuse: '}'/13 HalfReuse: ','/12 HalfReuse: )/1 ]] }
    {refalrts::icCopyEVar, 14, 5, 0},
    {refalrts::icAllocString, 0, 0, 16},
    {refalrts::icReinitChar, 0, '{', 0},
    {refalrts::icReinitChar, 0, 'r', 4},
    {refalrts::icReinitChar, 0, '}', 13},
    {refalrts::icReinitChar, 0, ',', 12},
    {refalrts::icReinitBracket, 0, refalrts::ibCloseBracket, 1},
    {refalrts::icLinkBrackets, 11, 1, 0},
    {refalrts::icLinkBrackets, 7, 8, 0},
    {refalrts::icSetRes, 0, 0, 13},
    {refalrts::icSpliceTile, 16, 17, 0},
    {refalrts::icSpliceTile, 0, 4, 0},
    {refalrts::icSpliceTile, 14, 15, 0},
    {refalrts::icSpliceTile, 7, 11, 0},
    {refalrts::icReturnResult_NoTrash, 0, 0, 0},
    {refalrts::icEnd, 0, 0, 0}
  };
  int open_e_stack[115];
  refalrts::FnResult res = refalrts::interpret_array(
    raa, context, arg_begin, arg_end,
    functions, idents, numbers, strings, open_e_stack
  );
  return res;
#else
  //FAST GEN:(E )(E )
  //GLOBAL GEN:(E )(S E )
  // </0 & GenCommand/4 (/7 e.idxB#0/5 )/8 (/11 s.idxTB#0/13 e.idxTBV#0/9 )/12 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  context[5] = 0;
  context[6] = 0;
  context[7] = refalrts::brackets_left( context[5], context[6], context[2], context[3] );
  if( ! context[7] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[7], context[8]);
  context[9] = 0;
  context[10] = 0;
  context[11] = refalrts::brackets_left( context[9], context[10], context[2], context[3] );
  if( ! context[11] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[11], context[12]);
  if( ! refalrts::empty_seq( context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  // closed e.idxB#0 as range 5
  if( ! refalrts::svar_left( context[13], context[9], context[10] ) )
    return refalrts::cRecognitionImpossible;
  // closed e.idxTBV#0 as range 9
  do {
    refalrts::start_sentence();
    //(E )(#CmdCommentE )
    // </0 & GenCommand/4 (/7 e.Indent#1/5 )/8 (/11 # CmdComment/13 e.Text#1/9 )/12 >/1
    if( ! refalrts::ident_term(  & ident_CmdComment<int>::name, context[13] ) )
      continue;
    // closed e.Indent#1 as range 5
    // closed e.Text#1 as range 9

    refalrts::reset_allocator();
    //TRASH: {REMOVED TILE}  </0 & GenCommand/4 {REMOVED TILE}  {REMOVED TILE}  {REMOVED TILE}  {REMOVED TILE} 
    //RESULT: Tile{ [[ } Tile{ AsIs: (/7 AsIs: e.Indent#1/5 AsIs: )/8 AsIs: (/11 } e.Indent#1/5/14 Tile{ HalfReuse: '/'/1 } Tile{ HalfReuse: '/'/13 AsIs: e.Text#1/9 AsIs: )/12 } Tile{ ]] }
    if (! refalrts::copy_evar(context[14], context[15], context[5], context[6]))
      return refalrts::cNoMemory;
    refalrts::reinit_char( context[1], '/' );
    refalrts::reinit_char( context[13], '/' );
    refalrts::link_brackets( context[11], context[12] );
    refalrts::link_brackets( context[7], context[8] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = arg_end->next;
    res = refalrts::splice_evar( res, context[13], context[12] );
    res = refalrts::splice_evar( res, context[1], context[1] );
    res = refalrts::splice_evar( res, context[14], context[15] );
    res = refalrts::splice_evar( res, context[7], context[11] );
    refalrts::use( res );
    refalrts::splice_to_freelist_open( trash_prev, res );
    return refalrts::FnResult(refalrts::cSuccess | (__LINE__ << 8));
  } while ( 0 );

  do {
    refalrts::start_sentence();
    //(E )(#CmdEnumS E )
    // </0 & GenCommand/4 (/7 e.Indent#1/5 )/8 (/11 # CmdEnum/13 s.MemoryClass#1/14 e.Name#1/9 )/12 >/1
    if( ! refalrts::ident_term(  & ident_CmdEnum<int>::name, context[13] ) )
      continue;
    // closed e.Indent#1 as range 5
    context[66] = context[9];
    context[67] = context[10];
    if( ! refalrts::svar_left( context[14], context[66], context[67] ) )
      continue;
    // closed e.Name#1 as range 66(9)

    refalrts::reset_allocator();
    //TRASH: {REMOVED TILE}  {REMOVED TILE}  {REMOVED TILE}  {REMOVED TILE}  {REMOVED TILE} 
    //RESULT: Tile{ [[ } Tile{ AsIs: (/7 AsIs: e.Indent#1/5 AsIs: )/8 HalfReuse: </11 HalfReuse: & SwGenFnStart/13 AsIs: s.MemoryClass#1/14 } & NakedArguments/15 Tile{ AsIs: e.Name#1/66(9) } >/16 Tile{ AsIs: </0 Reuse: & GenReturn/4 } # Fail/17"  "/18 >/20 (/21 '}'/22 )/23 Tile{ HalfReuse: (/12 HalfReuse: )/1 ]] }
    if( ! refalrts::alloc_name( context[15], NakedArguments, "NakedArguments" ) )
      return refalrts::cNoMemory;
    if( ! refalrts::alloc_close_call( context[16] ) )
      return refalrts::cNoMemory;
    if( ! refalrts::alloc_ident( context[17], & ident_Fail<int>::name ) )
      return refalrts::cNoMemory;
    if( ! refalrts::alloc_chars( context[18], context[19], "  ", 2 ) )
      return refalrts::cNoMemory;
    if( ! refalrts::alloc_close_call( context[20] ) )
      return refalrts::cNoMemory;
    if( ! refalrts::alloc_open_bracket( context[21] ) )
      return refalrts::cNoMemory;
    if( ! refalrts::alloc_char( context[22], '}' ) )
      return refalrts::cNoMemory;
    if( ! refalrts::alloc_close_bracket( context[23] ) )
      return refalrts::cNoMemory;
    refalrts::reinit_open_call( context[11] );
    refalrts::reinit_name( context[13], SwGenFnStart, "SwGenFnStart" );
    refalrts::update_name( context[4], GenReturn, "GenReturn" );
    refalrts::reinit_open_bracket( context[12] );
    refalrts::reinit_close_bracket( context[1] );
    refalrts::link_brackets( context[12], context[1] );
    refalrts::link_brackets( context[21], context[23] );
    refalrts::push_stack( context[20] );
    refalrts::push_stack( context[0] );
    refalrts::push_stack( context[16] );
    refalrts::push_stack( context[11] );
    refalrts::link_brackets( context[7], context[8] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[12];
    res = refalrts::splice_evar( res, context[17], context[23] );
    res = refalrts::splice_evar( res, context[0], context[4] );
    res = refalrts::splice_evar( res, context[16], context[16] );
    res = refalrts::splice_evar( res, context[66], context[67] );
    res = refalrts::splice_evar( res, context[15], context[15] );
    res = refalrts::splice_evar( res, context[7], context[14] );
    refalrts::use( res );
    return refalrts::FnResult(refalrts::cSuccess | (__LINE__ << 8));
  } while ( 0 );

  do {
    refalrts::start_sentence();
    //(E )(#CmdSwapS E )
    // </0 & GenCommand/4 (/7 e.Indent#1/5 )/8 (/11 # CmdSwap/13 s.MemoryClass#1/14 e.Name#1/9 )/12 >/1
    if( ! refalrts::ident_term(  & ident_CmdSwap<int>::name, context[13] ) )
      continue;
    // closed e.Indent#1 as range 5
    context[66] = context[9];
    context[67] = context[10];
    if( ! refalrts::svar_left( context[14], context[66], context[67] ) )
      continue;
    // closed e.Name#1 as range 66(9)

    refalrts::reset_allocator();
    //TRASH: {REMOVED TILE}  </0 & GenCommand/4 {REMOVED TILE}  >/1 {REMOVED TILE} 
    //RESULT: Tile{ [[ } Tile{ AsIs: (/7 AsIs: e.Indent#1/5 AsIs: )/8 HalfReuse: </11 HalfReuse: & GenSwap/13 AsIs: s.MemoryClass#1/14 AsIs: e.Name#1/66(9) HalfReuse: >/12 } Tile{ ]] }
    refalrts::reinit_open_call( context[11] );
    refalrts::reinit_name( context[13], GenSwap, "GenSwap" );
    refalrts::reinit_close_call( context[12] );
    refalrts::push_stack( context[12] );
    refalrts::push_stack( context[11] );
    refalrts::link_brackets( context[7], context[8] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = arg_end->next;
    res = refalrts::splice_evar( res, context[7], context[12] );
    refalrts::use( res );
    refalrts::splice_to_freelist_open( trash_prev, res );
    return refalrts::FnResult(refalrts::cSuccess | (__LINE__ << 8));
  } while ( 0 );

  do {
    refalrts::start_sentence();
    //(E )(#CmdDeclaration#GN_EntryE )
    // </0 & GenCommand/4 (/7 e.Indent#1/5 )/8 (/11 # CmdDeclaration/13 # GN_Entry/14 e.Name#1/9 )/12 >/1
    if( ! refalrts::ident_term(  & ident_CmdDeclaration<int>::name, context[13] ) )
      continue;
    context[66] = context[9];
    context[67] = context[10];
    context[14] = refalrts::ident_left(  & ident_GN_Entry<int>::name, context[66], context[67] );
    if( ! context[14] )
      continue;
    // closed e.Indent#1 as range 5
    // closed e.Name#1 as range 66(9)

    refalrts::reset_allocator();
    //TRASH: {REMOVED TILE}  </0 & GenCommand/4 {REMOVED TILE}  # GN_Entry/14 {REMOVED TILE}  )/12 {REMOVED TILE} 
    //RESULT: Tile{ [[ } Tile{ AsIs: (/7 AsIs: e.Indent#1/5 AsIs: )/8 HalfReuse: </11 HalfReuse: & GenExtern/13 } Tile{ AsIs: e.Name#1/66(9) } Tile{ AsIs: >/1 ]] }
    refalrts::reinit_open_call( context[11] );
    refalrts::reinit_name( context[13], GenExtern, "GenExtern" );
    refalrts::push_stack( context[1] );
    refalrts::push_stack( context[11] );
    refalrts::link_brackets( context[7], context[8] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    res = refalrts::splice_evar( res, context[66], context[67] );
    res = refalrts::splice_evar( res, context[7], context[13] );
    refalrts::use( res );
    refalrts::splice_to_freelist_open( trash_prev, res );
    return refalrts::FnResult(refalrts::cSuccess | (__LINE__ << 8));
  } while ( 0 );

  do {
    refalrts::start_sentence();
    //(E )(#CmdDeclaration#GN_LocalE )
    // </0 & GenCommand/4 (/7 e.Indent#1/5 )/8 (/11 # CmdDeclaration/13 # GN_Local/14 e.Name#1/9 )/12 >/1
    if( ! refalrts::ident_term(  & ident_CmdDeclaration<int>::name, context[13] ) )
      continue;
    context[66] = context[9];
    context[67] = context[10];
    context[14] = refalrts::ident_left(  & ident_GN_Local<int>::name, context[66], context[67] );
    if( ! context[14] )
      continue;
    // closed e.Indent#1 as range 5
    // closed e.Name#1 as range 66(9)

    refalrts::reset_allocator();
    //TRASH: {REMOVED TILE}  </0 & GenCommand/4 {REMOVED TILE}  # GN_Local/14 {REMOVED TILE}  )/12 {REMOVED TILE} 
    //RESULT: Tile{ [[ } Tile{ AsIs: (/7 AsIs: e.Indent#1/5 AsIs: )/8 HalfReuse: </11 HalfReuse: & GenForward/13 } Tile{ AsIs: e.Name#1/66(9) } Tile{ AsIs: >/1 ]] }
    refalrts::reinit_open_call( context[11] );
    refalrts::reinit_name( context[13], GenForward, "GenForward" );
    refalrts::push_stack( context[1] );
    refalrts::push_stack( context[11] );
    refalrts::link_brackets( context[7], context[8] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    res = refalrts::splice_evar( res, context[66], context[67] );
    res = refalrts::splice_evar( res, context[7], context[13] );
    refalrts::use( res );
    refalrts::splice_to_freelist_open( trash_prev, res );
    return refalrts::FnResult(refalrts::cSuccess | (__LINE__ << 8));
  } while ( 0 );

  do {
    refalrts::start_sentence();
    //(E )(#CmdDefineIdentE )
    // </0 & GenCommand/4 (/7 e.Indent#1/5 )/8 (/11 # CmdDefineIdent/13 e.Name#1/9 )/12 >/1
    if( ! refalrts::ident_term(  & ident_CmdDefineIdent<int>::name, context[13] ) )
      continue;
    // closed e.Indent#1 as range 5
    // closed e.Name#1 as range 9

    refalrts::reset_allocator();
    //TRASH: {REMOVED TILE}  </0 & GenCommand/4 {REMOVED TILE}  >/1 {REMOVED TILE} 
    //RESULT: Tile{ [[ } Tile{ AsIs: (/7 AsIs: e.Indent#1/5 AsIs: )/8 HalfReuse: </11 HalfReuse: & GenIdent/13 AsIs: e.Name#1/9 HalfReuse: >/12 } Tile{ ]] }
    refalrts::reinit_open_call( context[11] );
    refalrts::reinit_name( context[13], GenIdent, "GenIdent" );
    refalrts::reinit_close_call( context[12] );
    refalrts::push_stack( context[12] );
    refalrts::push_stack( context[11] );
    refalrts::link_brackets( context[7], context[8] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = arg_end->next;
    res = refalrts::splice_evar( res, context[7], context[12] );
    refalrts::use( res );
    refalrts::splice_to_freelist_open( trash_prev, res );
    return refalrts::FnResult(refalrts::cSuccess | (__LINE__ << 8));
  } while ( 0 );

  do {
    refalrts::start_sentence();
    //(E )(#CmdFnStartS E )
    // </0 & GenCommand/4 (/7 e.Indent#1/5 )/8 (/11 # CmdFnStart/13 s.MemoryClass#1/14 e.Name#1/9 )/12 >/1
    if( ! refalrts::ident_term(  & ident_CmdFnStart<int>::name, context[13] ) )
      continue;
    // closed e.Indent#1 as range 5
    context[66] = context[9];
    context[67] = context[10];
    if( ! refalrts::svar_left( context[14], context[66], context[67] ) )
      continue;
    // closed e.Name#1 as range 66(9)

    refalrts::reset_allocator();
    //TRASH: {REMOVED TILE}  {REMOVED TILE}  {REMOVED TILE}  {REMOVED TILE}  >/1 {REMOVED TILE} 
    //RESULT: Tile{ [[ HalfReuse: (/0 } Tile{ AsIs: e.Indent#1/5 } Tile{ HalfReuse: ' '/4 HalfReuse: ' '/7 } Tile{ AsIs: )/8 HalfReuse: </11 HalfReuse: & GenFnStart/13 AsIs: s.MemoryClass#1/14 AsIs: e.Name#1/66(9) HalfReuse: >/12 } Tile{ ]] }
    refalrts::reinit_open_bracket( context[0] );
    refalrts::reinit_char( context[4], ' ' );
    refalrts::reinit_char( context[7], ' ' );
    refalrts::reinit_open_call( context[11] );
    refalrts::reinit_name( context[13], GenFnStart, "GenFnStart" );
    refalrts::reinit_close_call( context[12] );
    refalrts::push_stack( context[12] );
    refalrts::push_stack( context[11] );
    refalrts::link_brackets( context[0], context[8] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = arg_end->next;
    res = refalrts::splice_evar( res, context[8], context[12] );
    res = refalrts::splice_evar( res, context[4], context[7] );
    res = refalrts::splice_evar( res, context[5], context[6] );
    refalrts::use( res );
    refalrts::splice_to_freelist_open( context[0], res );
    return refalrts::FnResult(refalrts::cSuccess | (__LINE__ << 8));
  } while ( 0 );

  do {
    refalrts::start_sentence();
    //(E )(#CmdSeparator)
    // </0 & GenCommand/4 (/7 e.Indent#1/5 )/8 (/11 # CmdSeparator/13 )/12 >/1
    if( ! refalrts::ident_term(  & ident_CmdSeparator<int>::name, context[13] ) )
      continue;
    context[66] = context[9];
    context[67] = context[10];
    if( ! refalrts::empty_seq( context[66], context[67] ) )
      continue;
    // closed e.Indent#1 as range 5

    refalrts::reset_allocator();
    //TRASH: {REMOVED TILE}  </0 & GenCommand/4 {REMOVED TILE}  # CmdSeparator/13 )/12 {REMOVED TILE} 
    //RESULT: Tile{ [[ } Tile{ AsIs: (/7 AsIs: e.Indent#1/5 AsIs: )/8 AsIs: (/11 } e.Indent#1/5/14 Tile{ HalfReuse: )/1 ]] }
    if (! refalrts::copy_evar(context[14], context[15], context[5], context[6]))
      return refalrts::cNoMemory;
    refalrts::reinit_close_bracket( context[1] );
    refalrts::link_brackets( context[11], context[1] );
    refalrts::link_brackets( context[7], context[8] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    res = refalrts::splice_evar( res, context[14], context[15] );
    res = refalrts::splice_evar( res, context[7], context[11] );
    refalrts::use( res );
    refalrts::splice_to_freelist_open( trash_prev, res );
    return refalrts::FnResult(refalrts::cSuccess | (__LINE__ << 8));
  } while ( 0 );

  do {
    refalrts::start_sentence();
    //(E ' '' ')(#CmdFnEnd)
    // </0 & GenCommand/4 (/7 e.Indent#1/5 ' '/15 ' '/14 )/8 (/11 # CmdFnEnd/13 )/12 >/1
    if( ! refalrts::ident_term(  & ident_CmdFnEnd<int>::name, context[13] ) )
      continue;
    context[66] = context[5];
    context[67] = context[6];
    context[14] = refalrts::char_right( ' ', context[66], context[67] );
    if( ! context[14] )
      continue;
    context[15] = refalrts::char_right( ' ', context[66], context[67] );
    if( ! context[15] )
      continue;
    context[68] = context[9];
    context[69] = context[10];
    if( ! refalrts::empty_seq( context[68], context[69] ) )
      continue;
    // closed e.Indent#1 as range 66(5)

    refalrts::reset_allocator();
    //TRASH: {REMOVED TILE}  </0 & GenCommand/4 {REMOVED TILE}  >/1 {REMOVED TILE} 
    //RESULT: Tile{ [[ } Tile{ AsIs: (/7 AsIs: e.Indent#1/66(5) HalfReuse: )/15 HalfReuse: (/14 HalfReuse: '}'/8 HalfReuse: )/11 HalfReuse: (/13 AsIs: )/12 } Tile{ ]] }
    refalrts::reinit_close_bracket( context[15] );
    refalrts::reinit_open_bracket( context[14] );
    refalrts::reinit_char( context[8], '}' );
    refalrts::reinit_close_bracket( context[11] );
    refalrts::reinit_open_bracket( context[13] );
    refalrts::link_brackets( context[13], context[12] );
    refalrts::link_brackets( context[14], context[11] );
    refalrts::link_brackets( context[7], context[15] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = arg_end->next;
    res = refalrts::splice_evar( res, context[7], context[12] );
    refalrts::use( res );
    refalrts::splice_to_freelist_open( trash_prev, res );
    return refalrts::FnResult(refalrts::cSuccess | (__LINE__ << 8));
  } while ( 0 );

  do {
    refalrts::start_sentence();
    //(E )(#CmdIssueMemS )
    // </0 & GenCommand/4 (/7 e.Indent#1/5 )/8 (/11 # CmdIssueMem/13 s.Number#1/14 )/12 >/1
    if( ! refalrts::ident_term(  & ident_CmdIssueMem<int>::name, context[13] ) )
      continue;
    // closed e.Indent#1 as range 5
    context[66] = context[9];
    context[67] = context[10];
    if( ! refalrts::svar_left( context[14], context[66], context[67] ) )
      continue;
    if( ! refalrts::empty_seq( context[66], context[67] ) )
      continue;

    refalrts::reset_allocator();
    //TRASH: {REMOVED TILE}  {REMOVED TILE}  {REMOVED TILE}  {REMOVED TILE}  {REMOVED TILE} 
    //RESULT: Tile{ [[ } Tile{ AsIs: (/7 AsIs: e.Indent#1/5 AsIs: )/8 AsIs: (/11 } e.Indent#1/5/15"// issue here memory for vars with "/17 </19 Tile{ HalfReuse: & StrFromInt/13 AsIs: s.Number#1/14 HalfReuse: >/12 HalfReuse: ' '/1 }"elems"/20 )/22 (/23 e.Indent#1/5/24"refalrts::Iter context["/26 Tile{ AsIs: </0 Reuse: & StrFromInt/4 } s.Number#1/14/28 >/29"];"/30 )/32 (/33 e.Indent#1/5/34"refalrts::zeros( context, "/36 </38 & StrFromInt/39 s.Number#1/14/40 >/41" );"/42 )/44 Tile{ ]] }
    if (! refalrts::copy_evar(context[15], context[16], context[5], context[6]))
      return refalrts::cNoMemory;
    if( ! refalrts::alloc_chars( context[17], context[18], "// issue here memory for vars with ", 35 ) )
      return refalrts::cNoMemory;
    if( ! refalrts::alloc_open_call( context[19] ) )
      return refalrts::cNoMemory;
    if( ! refalrts::alloc_chars( context[20], context[21], "elems", 5 ) )
      return refalrts::cNoMemory;
    if( ! refalrts::alloc_close_bracket( context[22] ) )
      return refalrts::cNoMemory;
    if( ! refalrts::alloc_open_bracket( context[23] ) )
      return refalrts::cNoMemory;
    if (! refalrts::copy_evar(context[24], context[25], context[5], context[6]))
      return refalrts::cNoMemory;
    if( ! refalrts::alloc_chars( context[26], context[27], "refalrts::Iter context[", 23 ) )
      return refalrts::cNoMemory;
    if (! refalrts::copy_stvar(context[28], context[14]))
      return refalrts::cNoMemory;
    if( ! refalrts::alloc_close_call( context[29] ) )
      return refalrts::cNoMemory;
    if( ! refalrts::alloc_chars( context[30], context[31], "];", 2 ) )
      return refalrts::cNoMemory;
    if( ! refalrts::alloc_close_bracket( context[32] ) )
      return refalrts::cNoMemory;
    if( ! refalrts::alloc_open_bracket( context[33] ) )
      return refalrts::cNoMemory;
    if (! refalrts::copy_evar(context[34], context[35], context[5], context[6]))
      return refalrts::cNoMemory;
    if( ! refalrts::alloc_chars( context[36], context[37], "refalrts::zeros( context, ", 26 ) )
      return refalrts::cNoMemory;
    if( ! refalrts::alloc_open_call( context[38] ) )
      return refalrts::cNoMemory;
    if( ! refalrts::alloc_name( context[39], StrFromInt, "StrFromInt" ) )
      return refalrts::cNoMemory;
    if (! refalrts::copy_stvar(context[40], context[14]))
      return refalrts::cNoMemory;
    if( ! refalrts::alloc_close_call( context[41] ) )
      return refalrts::cNoMemory;
    if( ! refalrts::alloc_chars( context[42], context[43], " );", 3 ) )
      return refalrts::cNoMemory;
    if( ! refalrts::alloc_close_bracket( context[44] ) )
      return refalrts::cNoMemory;
    refalrts::reinit_name( context[13], StrFromInt, "StrFromInt" );
    refalrts::reinit_close_call( context[12] );
    refalrts::reinit_char( context[1], ' ' );
    refalrts::update_name( context[4], StrFromInt, "StrFromInt" );
    refalrts::link_brackets( context[33], context[44] );
    refalrts::push_stack( context[41] );
    refalrts::push_stack( context[38] );
    refalrts::link_brackets( context[23], context[32] );
    refalrts::push_stack( context[29] );
    refalrts::push_stack( context[0] );
    refalrts::link_brackets( context[11], context[22] );
    refalrts::push_stack( context[12] );
    refalrts::push_stack( context[19] );
    refalrts::link_brackets( context[7], context[8] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = arg_end->next;
    res = refalrts::splice_evar( res, context[28], context[44] );
    res = refalrts::splice_evar( res, context[0], context[4] );
    res = refalrts::splice_evar( res, context[20], context[27] );
    res = refalrts::splice_evar( res, context[13], context[1] );
    res = refalrts::splice_evar( res, context[17], context[19] );
    res = refalrts::splice_evar( res, context[15], context[16] );
    res = refalrts::splice_evar( res, context[7], context[11] );
    refalrts::use( res );
    return refalrts::FnResult(refalrts::cSuccess | (__LINE__ << 8));
  } while ( 0 );

  do {
    refalrts::start_sentence();
    //(E )(#CmdIfDefE )
    // </0 & GenCommand/4 (/7 e.Indent#1/5 )/8 (/11 # CmdIfDef/13 e.Macros#1/9 )/12 >/1
    if( ! refalrts::ident_term(  & ident_CmdIfDef<int>::name, context[13] ) )
      continue;
    // closed e.Indent#1 as range 5
    // closed e.Macros#1 as range 9

    refalrts::reset_allocator();
    //TRASH: {REMOVED TILE}  {REMOVED TILE}  {REMOVED TILE}  {REMOVED TILE}  {REMOVED TILE}  {REMOVED TILE} 
    //RESULT: Tile{ [[ } Tile{ AsIs: (/7 AsIs: e.Indent#1/5 AsIs: )/8 AsIs: (/11 HalfReuse: '#'/13 } Tile{ HalfReuse: 'i'/0 HalfReuse: 'f'/4 } 'd'/14 Tile{ HalfReuse: 'e'/12 }"f "/15 Tile{ AsIs: e.Macros#1/9 } Tile{ HalfReuse: )/1 ]] }
    if( ! refalrts::alloc_char( context[14], 'd' ) )
      return refalrts::cNoMemory;
    if( ! refalrts::alloc_chars( context[15], context[16], "f ", 2 ) )
      return refalrts::cNoMemory;
    refalrts::reinit_char( context[13], '#' );
    refalrts::reinit_char( context[0], 'i' );
    refalrts::reinit_char( context[4], 'f' );
    refalrts::reinit_char( context[12], 'e' );
    refalrts::reinit_close_bracket( context[1] );
    refalrts::link_brackets( context[11], context[1] );
    refalrts::link_brackets( context[7], context[8] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    res = refalrts::splice_evar( res, context[9], context[10] );
    res = refalrts::splice_evar( res, context[15], context[16] );
    res = refalrts::splice_evar( res, context[12], context[12] );
    res = refalrts::splice_evar( res, context[14], context[14] );
    res = refalrts::splice_evar( res, context[0], context[4] );
    res = refalrts::splice_evar( res, context[7], context[13] );
    refalrts::use( res );
    return refalrts::FnResult(refalrts::cSuccess | (__LINE__ << 8));
  } while ( 0 );

  do {
    refalrts::start_sentence();
    //(E )(#CmdElse)
    // </0 & GenCommand/4 (/7 e.Indent#1/5 )/8 (/11 # CmdElse/13 )/12 >/1
    if( ! refalrts::ident_term(  & ident_CmdElse<int>::name, context[13] ) )
      continue;
    context[66] = context[9];
    context[67] = context[10];
    if( ! refalrts::empty_seq( context[66], context[67] ) )
      continue;
    // closed e.Indent#1 as range 5

    refalrts::reset_allocator();
    //TRASH: {REMOVED TILE}  {REMOVED TILE}  {REMOVED TILE}  {REMOVED TILE} 
    //RESULT: Tile{ [[ } Tile{ AsIs: (/7 AsIs: e.Indent#1/5 AsIs: )/8 AsIs: (/11 HalfReuse: '#'/13 HalfReuse: 'e'/12 HalfReuse: 'l'/1 } Tile{ HalfReuse: 's'/0 HalfReuse: 'e'/4 } )/14 Tile{ ]] }
    if( ! refalrts::alloc_close_bracket( context[14] ) )
      return refalrts::cNoMemory;
    refalrts::reinit_char( context[13], '#' );
    refalrts::reinit_char( context[12], 'e' );
    refalrts::reinit_char( context[1], 'l' );
    refalrts::reinit_char( context[0], 's' );
    refalrts::reinit_char( context[4], 'e' );
    refalrts::link_brackets( context[11], context[14] );
    refalrts::link_brackets( context[7], context[8] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = arg_end->next;
    res = refalrts::splice_evar( res, context[14], context[14] );
    res = refalrts::splice_evar( res, context[0], context[4] );
    res = refalrts::splice_evar( res, context[7], context[1] );
    refalrts::use( res );
    return refalrts::FnResult(refalrts::cSuccess | (__LINE__ << 8));
  } while ( 0 );

  do {
    refalrts::start_sentence();
    //(E )(#CmdEndIf)
    // </0 & GenCommand/4 (/7 e.Indent#1/5 )/8 (/11 # CmdEndIf/13 )/12 >/1
    if( ! refalrts::ident_term(  & ident_CmdEndIf<int>::name, context[13] ) )
      continue;
    context[66] = context[9];
    context[67] = context[10];
    if( ! refalrts::empty_seq( context[66], context[67] ) )
      continue;
    // closed e.Indent#1 as range 5

    refalrts::reset_allocator();
    //TRASH: {REMOVED TILE}  {REMOVED TILE}  {REMOVED TILE}  {REMOVED TILE} 
    //RESULT: Tile{ [[ } Tile{ AsIs: (/7 AsIs: e.Indent#1/5 AsIs: )/8 AsIs: (/11 HalfReuse: '#'/13 HalfReuse: 'e'/12 HalfReuse: 'n'/1 } Tile{ HalfReuse: 'd'/0 HalfReuse: 'i'/4 } 'f'/14 )/15 Tile{ ]] }
    if( ! refalrts::alloc_char( context[14], 'f' ) )
      return refalrts::cNoMemory;
    if( ! refalrts::alloc_close_bracket( context[15] ) )
      return refalrts::cNoMemory;
    refalrts::reinit_char( context[13], '#' );
    refalrts::reinit_char( context[12], 'e' );
    refalrts::reinit_char( context[1], 'n' );
    refalrts::reinit_char( context[0], 'd' );
    refalrts::reinit_char( context[4], 'i' );
    refalrts::link_brackets( context[11], context[15] );
    refalrts::link_brackets( context[7], context[8] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = arg_end->next;
    res = refalrts::splice_evar( res, context[14], context[15] );
    res = refalrts::splice_evar( res, context[0], context[4] );
    res = refalrts::splice_evar( res, context[7], context[1] );
    refalrts::use( res );
    return refalrts::FnResult(refalrts::cSuccess | (__LINE__ << 8));
  } while ( 0 );

  do {
    refalrts::start_sentence();
    //(E )(#CmdStartSentence)
    // </0 & GenCommand/4 (/7 e.Indent#1/5 )/8 (/11 # CmdStartSentence/13 )/12 >/1
    if( ! refalrts::ident_term(  & ident_CmdStartSentence<int>::name, context[13] ) )
      continue;
    context[66] = context[9];
    context[67] = context[10];
    if( ! refalrts::empty_seq( context[66], context[67] ) )
      continue;
    // closed e.Indent#1 as range 5

    refalrts::reset_allocator();
    //TRASH: {REMOVED TILE}  {REMOVED TILE}  {REMOVED TILE} 
    //RESULT: Tile{ [[ } (/14 e.Indent#1/5/15 ' '/17 Tile{ HalfReuse: ' '/0 HalfReuse: )/4 AsIs: (/7 AsIs: e.Indent#1/5 HalfReuse: 'd'/8 HalfReuse: 'o'/11 HalfReuse: ' '/13 HalfReuse: '{'/12 HalfReuse: )/1 } (/18 e.Indent#1/5/19"  refalrts::start_sentence();"/21 )/23 Tile{ ]] }
    if( ! refalrts::alloc_open_bracket( context[14] ) )
      return refalrts::cNoMemory;
    if (! refalrts::copy_evar(context[15], context[16], context[5], context[6]))
      return refalrts::cNoMemory;
    if( ! refalrts::alloc_char( context[17], ' ' ) )
      return refalrts::cNoMemory;
    if( ! refalrts::alloc_open_bracket( context[18] ) )
      return refalrts::cNoMemory;
    if (! refalrts::copy_evar(context[19], context[20], context[5], context[6]))
      return refalrts::cNoMemory;
    if( ! refalrts::alloc_chars( context[21], context[22], "  refalrts::start_sentence();", 29 ) )
      return refalrts::cNoMemory;
    if( ! refalrts::alloc_close_bracket( context[23] ) )
      return refalrts::cNoMemory;
    refalrts::reinit_char( context[0], ' ' );
    refalrts::reinit_close_bracket( context[4] );
    refalrts::reinit_char( context[8], 'd' );
    refalrts::reinit_char( context[11], 'o' );
    refalrts::reinit_char( context[13], ' ' );
    refalrts::reinit_char( context[12], '{' );
    refalrts::reinit_close_bracket( context[1] );
    refalrts::link_brackets( context[18], context[23] );
    refalrts::link_brackets( context[7], context[1] );
    refalrts::link_brackets( context[14], context[4] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = arg_end->next;
    res = refalrts::splice_evar( res, context[18], context[23] );
    res = refalrts::splice_evar( res, context[0], context[1] );
    res = refalrts::splice_evar( res, context[14], context[17] );
    refalrts::use( res );
    return refalrts::FnResult(refalrts::cSuccess | (__LINE__ << 8));
  } while ( 0 );

  do {
    refalrts::start_sentence();
    //(E ' '' ')(#CmdEndSentence)
    // </0 & GenCommand/4 (/7 e.Indent#1/5 ' '/15 ' '/14 )/8 (/11 # CmdEndSentence/13 )/12 >/1
    if( ! refalrts::ident_term(  & ident_CmdEndSentence<int>::name, context[13] ) )
      continue;
    context[66] = context[5];
    context[67] = context[6];
    context[14] = refalrts::char_right( ' ', context[66], context[67] );
    if( ! context[14] )
      continue;
    context[15] = refalrts::char_right( ' ', context[66], context[67] );
    if( ! context[15] )
      continue;
    context[68] = context[9];
    context[69] = context[10];
    if( ! refalrts::empty_seq( context[68], context[69] ) )
      continue;
    // closed e.Indent#1 as range 66(5)

    refalrts::reset_allocator();
    //TRASH: {REMOVED TILE}  {REMOVED TILE}  {REMOVED TILE} 
    //RESULT: Tile{ [[ HalfReuse: (/0 } e.Indent#1/66(5)/16 Tile{ HalfReuse: )/4 AsIs: (/7 AsIs: e.Indent#1/66(5) Reuse: '}'/15 AsIs: ' '/14 HalfReuse: 'w'/8 HalfReuse: 'h'/11 HalfReuse: 'i'/13 HalfReuse: 'l'/12 HalfReuse: 'e'/1 }" ( 0 );"/18 )/20 (/21 )/22 Tile{ ]] }
    if (! refalrts::copy_evar(context[16], context[17], context[66], context[67]))
      return refalrts::cNoMemory;
    if( ! refalrts::alloc_chars( context[18], context[19], " ( 0 );", 7 ) )
      return refalrts::cNoMemory;
    if( ! refalrts::alloc_close_bracket( context[20] ) )
      return refalrts::cNoMemory;
    if( ! refalrts::alloc_open_bracket( context[21] ) )
      return refalrts::cNoMemory;
    if( ! refalrts::alloc_close_bracket( context[22] ) )
      return refalrts::cNoMemory;
    refalrts::reinit_open_bracket( context[0] );
    refalrts::reinit_close_bracket( context[4] );
    refalrts::update_char( context[15], '}' );
    refalrts::reinit_char( context[8], 'w' );
    refalrts::reinit_char( context[11], 'h' );
    refalrts::reinit_char( context[13], 'i' );
    refalrts::reinit_char( context[12], 'l' );
    refalrts::reinit_char( context[1], 'e' );
    refalrts::link_brackets( context[21], context[22] );
    refalrts::link_brackets( context[7], context[20] );
    refalrts::link_brackets( context[0], context[4] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = arg_end->next;
    res = refalrts::splice_evar( res, context[18], context[22] );
    res = refalrts::splice_evar( res, context[4], context[1] );
    res = refalrts::splice_evar( res, context[16], context[17] );
    refalrts::use( res );
    return refalrts::FnResult(refalrts::cSuccess | (__LINE__ << 8));
  } while ( 0 );

  do {
    refalrts::start_sentence();
    //(E )(#CmdInitB0)
    // </0 & GenCommand/4 (/7 e.Indent#1/5 )/8 (/11 # CmdInitB0/13 )/12 >/1
    if( ! refalrts::ident_term(  & ident_CmdInitB0<int>::name, context[13] ) )
      continue;
    context[66] = context[9];
    context[67] = context[10];
    if( ! refalrts::empty_seq( context[66], context[67] ) )
      continue;
    // closed e.Indent#1 as range 5

    refalrts::reset_allocator();
    //TRASH: {REMOVED TILE}  {REMOVED TILE}  {REMOVED TILE} 
    //RESULT: Tile{ [[ } (/14 e.Indent#1/5/15 )/17 (/18 e.Indent#1/5/19 </21 & ContextRange_B/22 0/23 >/24" = arg_begin"/25 Tile{ HalfReuse: ';'/0 HalfReuse: )/4 AsIs: (/7 AsIs: e.Indent#1/5 HalfReuse: </8 HalfReuse: & ContextRange_E/11 HalfReuse: 0/13 HalfReuse: >/12 HalfReuse: ' '/1 }"= arg_end;"/27 )/29 (/30 e.Indent#1/5/31"refalrts::move_left( "/33 </35 & ContextRange/36 0/37 >/38" );"/39 )/41 (/42 e.Indent#1/5/43"refalrts::move_left( "/45 </47 & ContextRange/48 0/49 >/50" );"/51 )/53 (/54 e.Indent#1/5/55"refalrts::move_right( "/57 </59 & ContextRange/60 0/61 >/62" );"/63 )/65 Tile{ ]] }
    if( ! refalrts::alloc_open_bracket( context[14] ) )
      return refalrts::cNoMemory;
    if (! refalrts::copy_evar(context[15], context[16], context[5], context[6]))
      return refalrts::cNoMemory;
    if( ! refalrts::alloc_close_bracket( context[17] ) )
      return refalrts::cNoMemory;
    if( ! refalrts::alloc_open_bracket( context[18] ) )
      return refalrts::cNoMemory;
    if (! refalrts::copy_evar(context[19], context[20], context[5], context[6]))
      return refalrts::cNoMemory;
    if( ! refalrts::alloc_open_call( context[21] ) )
      return refalrts::cNoMemory;
    if( ! refalrts::alloc_name( context[22], ContextRange_B, "ContextRange_B" ) )
      return refalrts::cNoMemory;
    if( ! refalrts::alloc_number( context[23], 0UL ) )
      return refalrts::cNoMemory;
    if( ! refalrts::alloc_close_call( context[24] ) )
      return refalrts::cNoMemory;
    if( ! refalrts::alloc_chars( context[25], context[26], " = arg_begin", 12 ) )
      return refalrts::cNoMemory;
    if( ! refalrts::alloc_chars( context[27], context[28], "= arg_end;", 10 ) )
      return refalrts::cNoMemory;
    if( ! refalrts::alloc_close_bracket( context[29] ) )
      return refalrts::cNoMemory;
    if( ! refalrts::alloc_open_bracket( context[30] ) )
      return refalrts::cNoMemory;
    if (! refalrts::copy_evar(context[31], context[32], context[5], context[6]))
      return refalrts::cNoMemory;
    if( ! refalrts::alloc_chars( context[33], context[34], "refalrts::move_left( ", 21 ) )
      return refalrts::cNoMemory;
    if( ! refalrts::alloc_open_call( context[35] ) )
      return refalrts::cNoMemory;
    if( ! refalrts::alloc_name( context[36], ContextRange, "ContextRange" ) )
      return refalrts::cNoMemory;
    if( ! refalrts::alloc_number( context[37], 0UL ) )
      return refalrts::cNoMemory;
    if( ! refalrts::alloc_close_call( context[38] ) )
      return refalrts::cNoMemory;
    if( ! refalrts::alloc_chars( context[39], context[40], " );", 3 ) )
      return refalrts::cNoMemory;
    if( ! refalrts::alloc_close_bracket( context[41] ) )
      return refalrts::cNoMemory;
    if( ! refalrts::alloc_open_bracket( context[42] ) )
      return refalrts::cNoMemory;
    if (! refalrts::copy_evar(context[43], context[44], context[5], context[6]))
      return refalrts::cNoMemory;
    if( ! refalrts::alloc_chars( context[45], context[46], "refalrts::move_left( ", 21 ) )
      return refalrts::cNoMemory;
    if( ! refalrts::alloc_open_call( context[47] ) )
      return refalrts::cNoMemory;
    if( ! refalrts::alloc_name( context[48], ContextRange, "ContextRange" ) )
      return refalrts::cNoMemory;
    if( ! refalrts::alloc_number( context[49], 0UL ) )
      return refalrts::cNoMemory;
    if( ! refalrts::alloc_close_call( context[50] ) )
      return refalrts::cNoMemory;
    if( ! refalrts::alloc_chars( context[51], context[52], " );", 3 ) )
      return refalrts::cNoMemory;
    if( ! refalrts::alloc_close_bracket( context[53] ) )
      return refalrts::cNoMemory;
    if( ! refalrts::alloc_open_bracket( context[54] ) )
      return refalrts::cNoMemory;
    if (! refalrts::copy_evar(context[55], context[56], context[5], context[6]))
      return refalrts::cNoMemory;
    if( ! refalrts::alloc_chars( context[57], context[58], "refalrts::move_right( ", 22 ) )
      return refalrts::cNoMemory;
    if( ! refalrts::alloc_open_call( context[59] ) )
      return refalrts::cNoMemory;
    if( ! refalrts::alloc_name( context[60], ContextRange, "ContextRange" ) )
      return refalrts::cNoMemory;
    if( ! refalrts::alloc_number( context[61], 0UL ) )
      return refalrts::cNoMemory;
    if( ! refalrts::alloc_close_call( context[62] ) )
      return refalrts::cNoMemory;
    if( ! refalrts::alloc_chars( context[63], context[64], " );", 3 ) )
      return refalrts::cNoMemory;
    if( ! refalrts::alloc_close_bracket( context[65] ) )
      return refalrts::cNoMemory;
    refalrts::reinit_char( context[0], ';' );
    refalrts::reinit_close_bracket( context[4] );
    refalrts::reinit_open_call( context[8] );
    refalrts::reinit_name( context[11], ContextRange_E, "ContextRange_E" );
    refalrts::reinit_number( context[13], 0UL );
    refalrts::reinit_close_call( context[12] );
    refalrts::reinit_char( context[1], ' ' );
    refalrts::link_brackets( context[54], context[65] );
    refalrts::push_stack( context[62] );
    refalrts::push_stack( context[59] );
    refalrts::link_brackets( context[42], context[53] );
    refalrts::push_stack( context[50] );
    refalrts::push_stack( context[47] );
    refalrts::link_brackets( context[30], context[41] );
    refalrts::push_stack( context[38] );
    refalrts::push_stack( context[35] );
    refalrts::link_brackets( context[7], context[29] );
    refalrts::push_stack( context[12] );
    refalrts::push_stack( context[8] );
    refalrts::link_brackets( context[18], context[4] );
    refalrts::push_stack( context[24] );
    refalrts::push_stack( context[21] );
    refalrts::link_brackets( context[14], context[17] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = arg_end->next;
    res = refalrts::splice_evar( res, context[27], context[65] );
    res = refalrts::splice_evar( res, context[0], context[1] );
    res = refalrts::splice_evar( res, context[14], context[26] );
    refalrts::use( res );
    return refalrts::FnResult(refalrts::cSuccess | (__LINE__ << 8));
  } while ( 0 );

  do {
    refalrts::start_sentence();
    //(E )(#CmdInitB0_Lite)
    // </0 & GenCommand/4 (/7 e.Indent#1/5 )/8 (/11 # CmdInitB0_Lite/13 )/12 >/1
    if( ! refalrts::ident_term(  & ident_CmdInitB0_Lite<int>::name, context[13] ) )
      continue;
    context[66] = context[9];
    context[67] = context[10];
    if( ! refalrts::empty_seq( context[66], context[67] ) )
      continue;
    // closed e.Indent#1 as range 5

    refalrts::reset_allocator();
    //TRASH: {REMOVED TILE}  {REMOVED TILE}  {REMOVED TILE} 
    //RESULT: Tile{ [[ } (/14 e.Indent#1/5/15 )/17 (/18 e.Indent#1/5/19 </21 & ContextRange_B/22 0/23 >/24" = arg_begin"/25 Tile{ HalfReuse: ';'/0 HalfReuse: )/4 AsIs: (/7 AsIs: e.Indent#1/5 HalfReuse: </8 HalfReuse: & ContextRange_E/11 HalfReuse: 0/13 HalfReuse: >/12 HalfReuse: ' '/1 }"= arg_end;"/27 )/29 Tile{ ]] }
    if( ! refalrts::alloc_open_bracket( context[14] ) )
      return refalrts::cNoMemory;
    if (! refalrts::copy_evar(context[15], context[16], context[5], context[6]))
      return refalrts::cNoMemory;
    if( ! refalrts::alloc_close_bracket( context[17] ) )
      return refalrts::cNoMemory;
    if( ! refalrts::alloc_open_bracket( context[18] ) )
      return refalrts::cNoMemory;
    if (! refalrts::copy_evar(context[19], context[20], context[5], context[6]))
      return refalrts::cNoMemory;
    if( ! refalrts::alloc_open_call( context[21] ) )
      return refalrts::cNoMemory;
    if( ! refalrts::alloc_name( context[22], ContextRange_B, "ContextRange_B" ) )
      return refalrts::cNoMemory;
    if( ! refalrts::alloc_number( context[23], 0UL ) )
      return refalrts::cNoMemory;
    if( ! refalrts::alloc_close_call( context[24] ) )
      return refalrts::cNoMemory;
    if( ! refalrts::alloc_chars( context[25], context[26], " = arg_begin", 12 ) )
      return refalrts::cNoMemory;
    if( ! refalrts::alloc_chars( context[27], context[28], "= arg_end;", 10 ) )
      return refalrts::cNoMemory;
    if( ! refalrts::alloc_close_bracket( context[29] ) )
      return refalrts::cNoMemory;
    refalrts::reinit_char( context[0], ';' );
    refalrts::reinit_close_bracket( context[4] );
    refalrts::reinit_open_call( context[8] );
    refalrts::reinit_name( context[11], ContextRange_E, "ContextRange_E" );
    refalrts::reinit_number( context[13], 0UL );
    refalrts::reinit_close_call( context[12] );
    refalrts::reinit_char( context[1], ' ' );
    refalrts::link_brackets( context[7], context[29] );
    refalrts::push_stack( context[12] );
    refalrts::push_stack( context[8] );
    refalrts::link_brackets( context[18], context[4] );
    refalrts::push_stack( context[24] );
    refalrts::push_stack( context[21] );
    refalrts::link_brackets( context[14], context[17] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = arg_end->next;
    res = refalrts::splice_evar( res, context[27], context[29] );
    res = refalrts::splice_evar( res, context[0], context[1] );
    res = refalrts::splice_evar( res, context[14], context[26] );
    refalrts::use( res );
    return refalrts::FnResult(refalrts::cSuccess | (__LINE__ << 8));
  } while ( 0 );

  do {
    refalrts::start_sentence();
    //(E )(#CmdCharS S S )
    // </0 & GenCommand/4 (/7 e.Indent#1/5 )/8 (/11 # CmdChar/13 s.Direction#1/14 s.BracketNumber#1/15 s.Char#1/16 )/12 >/1
    if( ! refalrts::ident_term(  & ident_CmdChar<int>::name, context[13] ) )
      continue;
    // closed e.Indent#1 as range 5
    context[66] = context[9];
    context[67] = context[10];
    if( ! refalrts::svar_left( context[14], context[66], context[67] ) )
      continue;
    if( ! refalrts::svar_left( context[15], context[66], context[67] ) )
      continue;
    if( ! refalrts::svar_left( context[16], context[66], context[67] ) )
      continue;
    if( ! refalrts::empty_seq( context[66], context[67] ) )
      continue;

    refalrts::reset_allocator();
    //TRASH: {REMOVED TILE}  {REMOVED TILE}  s.Direction#1/14 s.BracketNumber#1/15 s.Char#1/16 {REMOVED TILE} 
    //RESULT: Tile{ [[ } (/17 e.Indent#1/5/18 )/20 Tile{ AsIs: </0 Reuse: & PrintMatchChar/4 AsIs: (/7 AsIs: e.Indent#1/5 AsIs: )/8 HalfReuse: s.Direction1 #14/11 HalfReuse: s.BracketNumber1 #15/13 } Tile{ HalfReuse: s.Char1 #16/12 AsIs: >/1 ]] }
    if( ! refalrts::alloc_open_bracket( context[17] ) )
      return refalrts::cNoMemory;
    if (! refalrts::copy_evar(context[18], context[19], context[5], context[6]))
      return refalrts::cNoMemory;
    if( ! refalrts::alloc_close_bracket( context[20] ) )
      return refalrts::cNoMemory;
    refalrts::update_name( context[4], PrintMatchChar, "PrintMatchChar" );
    refalrts::reinit_svar( context[11], context[14] );
    refalrts::reinit_svar( context[13], context[15] );
    refalrts::reinit_svar( context[12], context[16] );
    refalrts::push_stack( context[1] );
    refalrts::push_stack( context[0] );
    refalrts::link_brackets( context[7], context[8] );
    refalrts::link_brackets( context[17], context[20] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[12];
    res = refalrts::splice_evar( res, context[0], context[13] );
    res = refalrts::splice_evar( res, context[17], context[20] );
    refalrts::use( res );
    refalrts::splice_to_freelist_open( trash_prev, res );
    return refalrts::FnResult(refalrts::cSuccess | (__LINE__ << 8));
  } while ( 0 );

  do {
    refalrts::start_sentence();
    //(E )(#CmdCharSaveS S S S )
    // </0 & GenCommand/4 (/7 e.Indent#1/5 )/8 (/11 # CmdCharSave/13 s.Direction#1/14 s.BracketNumber#1/15 s.Offset#1/16 s.Char#1/17 )/12 >/1
    if( ! refalrts::ident_term(  & ident_CmdCharSave<int>::name, context[13] ) )
      continue;
    // closed e.Indent#1 as range 5
    context[66] = context[9];
    context[67] = context[10];
    if( ! refalrts::svar_left( context[14], context[66], context[67] ) )
      continue;
    if( ! refalrts::svar_left( context[15], context[66], context[67] ) )
      continue;
    if( ! refalrts::svar_left( context[16], context[66], context[67] ) )
      continue;
    if( ! refalrts::svar_left( context[17], context[66], context[67] ) )
      continue;
    if( ! refalrts::empty_seq( context[66], context[67] ) )
      continue;

    refalrts::reset_allocator();
    //TRASH: {REMOVED TILE}  {REMOVED TILE}  s.Direction#1/14 {REMOVED TILE}  s.Offset#1/16 s.Char#1/17 {REMOVED TILE} 
    //RESULT: Tile{ [[ } (/18 e.Indent#1/5/19 )/21 Tile{ AsIs: </0 Reuse: & PrintMatchCharSave/4 AsIs: (/7 AsIs: e.Indent#1/5 AsIs: )/8 HalfReuse: s.Offset1 #16/11 HalfReuse: s.Direction1 #14/13 } Tile{ AsIs: s.BracketNumber#1/15 } Tile{ HalfReuse: s.Char1 #17/12 AsIs: >/1 ]] }
    if( ! refalrts::alloc_open_bracket( context[18] ) )
      return refalrts::cNoMemory;
    if (! refalrts::copy_evar(context[19], context[20], context[5], context[6]))
      return refalrts::cNoMemory;
    if( ! refalrts::alloc_close_bracket( context[21] ) )
      return refalrts::cNoMemory;
    refalrts::update_name( context[4], PrintMatchCharSave, "PrintMatchCharSave" );
    refalrts::reinit_svar( context[11], context[16] );
    refalrts::reinit_svar( context[13], context[14] );
    refalrts::reinit_svar( context[12], context[17] );
    refalrts::push_stack( context[1] );
    refalrts::push_stack( context[0] );
    refalrts::link_brackets( context[7], context[8] );
    refalrts::link_brackets( context[18], context[21] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[12];
    res = refalrts::splice_evar( res, context[15], context[15] );
    res = refalrts::splice_evar( res, context[0], context[13] );
    res = refalrts::splice_evar( res, context[18], context[21] );
    refalrts::use( res );
    refalrts::splice_to_freelist_open( trash_prev, res );
    return refalrts::FnResult(refalrts::cSuccess | (__LINE__ << 8));
  } while ( 0 );

  do {
    refalrts::start_sentence();
    //(E )(#CmdNumberS S S )
    // </0 & GenCommand/4 (/7 e.Indent#1/5 )/8 (/11 # CmdNumber/13 s.Direction#1/14 s.BracketNumber#1/15 s.Number#1/16 )/12 >/1
    if( ! refalrts::ident_term(  & ident_CmdNumber<int>::name, context[13] ) )
      continue;
    // closed e.Indent#1 as range 5
    context[66] = context[9];
    context[67] = context[10];
    if( ! refalrts::svar_left( context[14], context[66], context[67] ) )
      continue;
    if( ! refalrts::svar_left( context[15], context[66], context[67] ) )
      continue;
    if( ! refalrts::svar_left( context[16], context[66], context[67] ) )
      continue;
    if( ! refalrts::empty_seq( context[66], context[67] ) )
      continue;

    refalrts::reset_allocator();
    //TRASH: {REMOVED TILE}  {REMOVED TILE}  s.Direction#1/14 s.BracketNumber#1/15 s.Number#1/16 {REMOVED TILE} 
    //RESULT: Tile{ [[ } (/17 e.Indent#1/5/18 )/20 Tile{ AsIs: </0 Reuse: & PrintMatchNumber/4 AsIs: (/7 AsIs: e.Indent#1/5 AsIs: )/8 HalfReuse: s.Direction1 #14/11 HalfReuse: s.BracketNumber1 #15/13 } Tile{ HalfReuse: s.Number1 #16/12 AsIs: >/1 ]] }
    if( ! refalrts::alloc_open_bracket( context[17] ) )
      return refalrts::cNoMemory;
    if (! refalrts::copy_evar(context[18], context[19], context[5], context[6]))
      return refalrts::cNoMemory;
    if( ! refalrts::alloc_close_bracket( context[20] ) )
      return refalrts::cNoMemory;
    refalrts::update_name( context[4], PrintMatchNumber, "PrintMatchNumber" );
    refalrts::reinit_svar( context[11], context[14] );
    refalrts::reinit_svar( context[13], context[15] );
    refalrts::reinit_svar( context[12], context[16] );
    refalrts::push_stack( context[1] );
    refalrts::push_stack( context[0] );
    refalrts::link_brackets( context[7], context[8] );
    refalrts::link_brackets( context[17], context[20] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[12];
    res = refalrts::splice_evar( res, context[0], context[13] );
    res = refalrts::splice_evar( res, context[17], context[20] );
    refalrts::use( res );
    refalrts::splice_to_freelist_open( trash_prev, res );
    return refalrts::FnResult(refalrts::cSuccess | (__LINE__ << 8));
  } while ( 0 );

  do {
    refalrts::start_sentence();
    //(E )(#CmdNumberSaveS S S S )
    // </0 & GenCommand/4 (/7 e.Indent#1/5 )/8 (/11 # CmdNumberSave/13 s.Direction#1/14 s.BracketNumber#1/15 s.Offset#1/16 s.Number#1/17 )/12 >/1
    if( ! refalrts::ident_term(  & ident_CmdNumberSave<int>::name, context[13] ) )
      continue;
    // closed e.Indent#1 as range 5
    context[66] = context[9];
    context[67] = context[10];
    if( ! refalrts::svar_left( context[14], context[66], context[67] ) )
      continue;
    if( ! refalrts::svar_left( context[15], context[66], context[67] ) )
      continue;
    if( ! refalrts::svar_left( context[16], context[66], context[67] ) )
      continue;
    if( ! refalrts::svar_left( context[17], context[66], context[67] ) )
      continue;
    if( ! refalrts::empty_seq( context[66], context[67] ) )
      continue;

    refalrts::reset_allocator();
    //TRASH: {REMOVED TILE}  {REMOVED TILE}  s.Direction#1/14 {REMOVED TILE}  s.Offset#1/16 s.Number#1/17 {REMOVED TILE} 
    //RESULT: Tile{ [[ } (/18 e.Indent#1/5/19 )/21 Tile{ AsIs: </0 Reuse: & PrintMatchNumberSave/4 AsIs: (/7 AsIs: e.Indent#1/5 AsIs: )/8 HalfReuse: s.Offset1 #16/11 HalfReuse: s.Direction1 #14/13 } Tile{ AsIs: s.BracketNumber#1/15 } Tile{ HalfReuse: s.Number1 #17/12 AsIs: >/1 ]] }
    if( ! refalrts::alloc_open_bracket( context[18] ) )
      return refalrts::cNoMemory;
    if (! refalrts::copy_evar(context[19], context[20], context[5], context[6]))
      return refalrts::cNoMemory;
    if( ! refalrts::alloc_close_bracket( context[21] ) )
      return refalrts::cNoMemory;
    refalrts::update_name( context[4], PrintMatchNumberSave, "PrintMatchNumberSave" );
    refalrts::reinit_svar( context[11], context[16] );
    refalrts::reinit_svar( context[13], context[14] );
    refalrts::reinit_svar( context[12], context[17] );
    refalrts::push_stack( context[1] );
    refalrts::push_stack( context[0] );
    refalrts::link_brackets( context[7], context[8] );
    refalrts::link_brackets( context[18], context[21] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[12];
    res = refalrts::splice_evar( res, context[15], context[15] );
    res = refalrts::splice_evar( res, context[0], context[13] );
    res = refalrts::splice_evar( res, context[18], context[21] );
    refalrts::use( res );
    refalrts::splice_to_freelist_open( trash_prev, res );
    return refalrts::FnResult(refalrts::cSuccess | (__LINE__ << 8));
  } while ( 0 );

  do {
    refalrts::start_sentence();
    //(E )(#CmdNameS S E )
    // </0 & GenCommand/4 (/7 e.Indent#1/5 )/8 (/11 # CmdName/13 s.Direction#1/14 s.BracketNumber#1/15 e.Name#1/9 )/12 >/1
    if( ! refalrts::ident_term(  & ident_CmdName<int>::name, context[13] ) )
      continue;
    // closed e.Indent#1 as range 5
    context[66] = context[9];
    context[67] = context[10];
    if( ! refalrts::svar_left( context[14], context[66], context[67] ) )
      continue;
    if( ! refalrts::svar_left( context[15], context[66], context[67] ) )
      continue;
    // closed e.Name#1 as range 66(9)

    refalrts::reset_allocator();
    //TRASH: {REMOVED TILE}  {REMOVED TILE}  s.Direction#1/14 s.BracketNumber#1/15 {REMOVED TILE}  {REMOVED TILE}  {REMOVED TILE} 
    //RESULT: Tile{ [[ } (/16 e.Indent#1/5/17 Tile{ AsIs: )/12 } Tile{ AsIs: </0 Reuse: & PrintMatchName/4 AsIs: (/7 AsIs: e.Indent#1/5 AsIs: )/8 HalfReuse: s.Direction1 #14/11 HalfReuse: s.BracketNumber1 #15/13 } Tile{ AsIs: e.Name#1/66(9) } Tile{ AsIs: >/1 ]] }
    if( ! refalrts::alloc_open_bracket( context[16] ) )
      return refalrts::cNoMemory;
    if (! refalrts::copy_evar(context[17], context[18], context[5], context[6]))
      return refalrts::cNoMemory;
    refalrts::update_name( context[4], PrintMatchName, "PrintMatchName" );
    refalrts::reinit_svar( context[11], context[14] );
    refalrts::reinit_svar( context[13], context[15] );
    refalrts::push_stack( context[1] );
    refalrts::push_stack( context[0] );
    refalrts::link_brackets( context[7], context[8] );
    refalrts::link_brackets( context[16], context[12] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    res = refalrts::splice_evar( res, context[66], context[67] );
    res = refalrts::splice_evar( res, context[0], context[13] );
    res = refalrts::splice_evar( res, context[12], context[12] );
    res = refalrts::splice_evar( res, context[17], context[18] );
    res = refalrts::splice_evar( res, context[16], context[16] );
    refalrts::use( res );
    refalrts::splice_to_freelist_open( trash_prev, res );
    return refalrts::FnResult(refalrts::cSuccess | (__LINE__ << 8));
  } while ( 0 );

  do {
    refalrts::start_sentence();
    //(E )(#CmdNameSaveS S S E )
    // </0 & GenCommand/4 (/7 e.Indent#1/5 )/8 (/11 # CmdNameSave/13 s.Direction#1/14 s.BracketNumber#1/15 s.Offset#1/16 e.Name#1/9 )/12 >/1
    if( ! refalrts::ident_term(  & ident_CmdNameSave<int>::name, context[13] ) )
      continue;
    // closed e.Indent#1 as range 5
    context[66] = context[9];
    context[67] = context[10];
    if( ! refalrts::svar_left( context[14], context[66], context[67] ) )
      continue;
    if( ! refalrts::svar_left( context[15], context[66], context[67] ) )
      continue;
    if( ! refalrts::svar_left( context[16], context[66], context[67] ) )
      continue;
    // closed e.Name#1 as range 66(9)

    refalrts::reset_allocator();
    //TRASH: {REMOVED TILE}  {REMOVED TILE}  s.Direction#1/14 {REMOVED TILE}  s.Offset#1/16 {REMOVED TILE}  {REMOVED TILE}  {REMOVED TILE} 
    //RESULT: Tile{ [[ } (/17 e.Indent#1/5/18 Tile{ AsIs: )/12 } Tile{ AsIs: </0 Reuse: & PrintMatchNameSave/4 AsIs: (/7 AsIs: e.Indent#1/5 AsIs: )/8 HalfReuse: s.Offset1 #16/11 HalfReuse: s.Direction1 #14/13 } Tile{ AsIs: s.BracketNumber#1/15 } Tile{ AsIs: e.Name#1/66(9) } Tile{ AsIs: >/1 ]] }
    if( ! refalrts::alloc_open_bracket( context[17] ) )
      return refalrts::cNoMemory;
    if (! refalrts::copy_evar(context[18], context[19], context[5], context[6]))
      return refalrts::cNoMemory;
    refalrts::update_name( context[4], PrintMatchNameSave, "PrintMatchNameSave" );
    refalrts::reinit_svar( context[11], context[16] );
    refalrts::reinit_svar( context[13], context[14] );
    refalrts::push_stack( context[1] );
    refalrts::push_stack( context[0] );
    refalrts::link_brackets( context[7], context[8] );
    refalrts::link_brackets( context[17], context[12] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    res = refalrts::splice_evar( res, context[66], context[67] );
    res = refalrts::splice_evar( res, context[15], context[15] );
    res = refalrts::splice_evar( res, context[0], context[13] );
    res = refalrts::splice_evar( res, context[12], context[12] );
    res = refalrts::splice_evar( res, context[18], context[19] );
    res = refalrts::splice_evar( res, context[17], context[17] );
    refalrts::use( res );
    refalrts::splice_to_freelist_open( trash_prev, res );
    return refalrts::FnResult(refalrts::cSuccess | (__LINE__ << 8));
  } while ( 0 );

  do {
    refalrts::start_sentence();
    //(E )(#CmdIdentS S E )
    // </0 & GenCommand/4 (/7 e.Indent#1/5 )/8 (/11 # CmdIdent/13 s.Direction#1/14 s.BracketNumber#1/15 e.Name#1/9 )/12 >/1
    if( ! refalrts::ident_term(  & ident_CmdIdent<int>::name, context[13] ) )
      continue;
    // closed e.Indent#1 as range 5
    context[66] = context[9];
    context[67] = context[10];
    if( ! refalrts::svar_left( context[14], context[66], context[67] ) )
      continue;
    if( ! refalrts::svar_left( context[15], context[66], context[67] ) )
      continue;
    // closed e.Name#1 as range 66(9)

    refalrts::reset_allocator();
    //TRASH: {REMOVED TILE}  {REMOVED TILE}  s.Direction#1/14 s.BracketNumber#1/15 {REMOVED TILE}  {REMOVED TILE}  {REMOVED TILE} 
    //RESULT: Tile{ [[ } (/16 e.Indent#1/5/17 Tile{ AsIs: )/12 } Tile{ AsIs: </0 Reuse: & PrintMatchIdent/4 AsIs: (/7 AsIs: e.Indent#1/5 AsIs: )/8 HalfReuse: s.Direction1 #14/11 HalfReuse: s.BracketNumber1 #15/13 } Tile{ AsIs: e.Name#1/66(9) } Tile{ AsIs: >/1 ]] }
    if( ! refalrts::alloc_open_bracket( context[16] ) )
      return refalrts::cNoMemory;
    if (! refalrts::copy_evar(context[17], context[18], context[5], context[6]))
      return refalrts::cNoMemory;
    refalrts::update_name( context[4], PrintMatchIdent, "PrintMatchIdent" );
    refalrts::reinit_svar( context[11], context[14] );
    refalrts::reinit_svar( context[13], context[15] );
    refalrts::push_stack( context[1] );
    refalrts::push_stack( context[0] );
    refalrts::link_brackets( context[7], context[8] );
    refalrts::link_brackets( context[16], context[12] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    res = refalrts::splice_evar( res, context[66], context[67] );
    res = refalrts::splice_evar( res, context[0], context[13] );
    res = refalrts::splice_evar( res, context[12], context[12] );
    res = refalrts::splice_evar( res, context[17], context[18] );
    res = refalrts::splice_evar( res, context[16], context[16] );
    refalrts::use( res );
    refalrts::splice_to_freelist_open( trash_prev, res );
    return refalrts::FnResult(refalrts::cSuccess | (__LINE__ << 8));
  } while ( 0 );

  do {
    refalrts::start_sentence();
    //(E )(#CmdIdentSaveS S S E )
    // </0 & GenCommand/4 (/7 e.Indent#1/5 )/8 (/11 # CmdIdentSave/13 s.Direction#1/14 s.BracketNumber#1/15 s.Offset#1/16 e.Name#1/9 )/12 >/1
    if( ! refalrts::ident_term(  & ident_CmdIdentSave<int>::name, context[13] ) )
      continue;
    // closed e.Indent#1 as range 5
    context[66] = context[9];
    context[67] = context[10];
    if( ! refalrts::svar_left( context[14], context[66], context[67] ) )
      continue;
    if( ! refalrts::svar_left( context[15], context[66], context[67] ) )
      continue;
    if( ! refalrts::svar_left( context[16], context[66], context[67] ) )
      continue;
    // closed e.Name#1 as range 66(9)

    refalrts::reset_allocator();
    //TRASH: {REMOVED TILE}  {REMOVED TILE}  s.Direction#1/14 {REMOVED TILE}  s.Offset#1/16 {REMOVED TILE}  {REMOVED TILE}  {REMOVED TILE} 
    //RESULT: Tile{ [[ } (/17 e.Indent#1/5/18 Tile{ AsIs: )/12 } Tile{ AsIs: </0 Reuse: & PrintMatchIdentSave/4 AsIs: (/7 AsIs: e.Indent#1/5 AsIs: )/8 HalfReuse: s.Offset1 #16/11 HalfReuse: s.Direction1 #14/13 } Tile{ AsIs: s.BracketNumber#1/15 } Tile{ AsIs: e.Name#1/66(9) } Tile{ AsIs: >/1 ]] }
    if( ! refalrts::alloc_open_bracket( context[17] ) )
      return refalrts::cNoMemory;
    if (! refalrts::copy_evar(context[18], context[19], context[5], context[6]))
      return refalrts::cNoMemory;
    refalrts::update_name( context[4], PrintMatchIdentSave, "PrintMatchIdentSave" );
    refalrts::reinit_svar( context[11], context[16] );
    refalrts::reinit_svar( context[13], context[14] );
    refalrts::push_stack( context[1] );
    refalrts::push_stack( context[0] );
    refalrts::link_brackets( context[7], context[8] );
    refalrts::link_brackets( context[17], context[12] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    res = refalrts::splice_evar( res, context[66], context[67] );
    res = refalrts::splice_evar( res, context[15], context[15] );
    res = refalrts::splice_evar( res, context[0], context[13] );
    res = refalrts::splice_evar( res, context[12], context[12] );
    res = refalrts::splice_evar( res, context[18], context[19] );
    res = refalrts::splice_evar( res, context[17], context[17] );
    refalrts::use( res );
    refalrts::splice_to_freelist_open( trash_prev, res );
    return refalrts::FnResult(refalrts::cSuccess | (__LINE__ << 8));
  } while ( 0 );

  do {
    refalrts::start_sentence();
    //(E )(#CmdBracketsS S S )
    // </0 & GenCommand/4 (/7 e.Indent#1/5 )/8 (/11 # CmdBrackets/13 s.Direction#1/14 s.BracketNumber#1/15 s.InnerBrackets#1/16 )/12 >/1
    if( ! refalrts::ident_term(  & ident_CmdBrackets<int>::name, context[13] ) )
      continue;
    // closed e.Indent#1 as range 5
    context[66] = context[9];
    context[67] = context[10];
    if( ! refalrts::svar_left( context[14], context[66], context[67] ) )
      continue;
    if( ! refalrts::svar_left( context[15], context[66], context[67] ) )
      continue;
    if( ! refalrts::svar_left( context[16], context[66], context[67] ) )
      continue;
    if( ! refalrts::empty_seq( context[66], context[67] ) )
      continue;

    refalrts::reset_allocator();
    //TRASH: {REMOVED TILE}  {REMOVED TILE}  s.Direction#1/14 s.BracketNumber#1/15 {REMOVED TILE}  {REMOVED TILE} 
    //RESULT: Tile{ [[ } (/17 e.Indent#1/5/18 )/20 </21 & PrintBracketsVarInit/22 e.Indent#1/5/23 Tile{ AsIs: s.InnerBrackets#1/16 } >/25 Tile{ AsIs: </0 Reuse: & PrintMatchBrackets/4 AsIs: (/7 AsIs: e.Indent#1/5 AsIs: )/8 HalfReuse: s.Direction1 #14/11 HalfReuse: s.BracketNumber1 #15/13 } Tile{ HalfReuse: s.InnerBrackets1 #16/12 AsIs: >/1 ]] }
    if( ! refalrts::alloc_open_bracket( context[17] ) )
      return refalrts::cNoMemory;
    if (! refalrts::copy_evar(context[18], context[19], context[5], context[6]))
      return refalrts::cNoMemory;
    if( ! refalrts::alloc_close_bracket( context[20] ) )
      return refalrts::cNoMemory;
    if( ! refalrts::alloc_open_call( context[21] ) )
      return refalrts::cNoMemory;
    if( ! refalrts::alloc_name( context[22], PrintBracketsVarInit, "PrintBracketsVarInit" ) )
      return refalrts::cNoMemory;
    if (! refalrts::copy_evar(context[23], context[24], context[5], context[6]))
      return refalrts::cNoMemory;
    if( ! refalrts::alloc_close_call( context[25] ) )
      return refalrts::cNoMemory;
    refalrts::update_name( context[4], PrintMatchBrackets, "PrintMatchBrackets" );
    refalrts::reinit_svar( context[11], context[14] );
    refalrts::reinit_svar( context[13], context[15] );
    refalrts::reinit_svar( context[12], context[16] );
    refalrts::push_stack( context[1] );
    refalrts::push_stack( context[0] );
    refalrts::link_brackets( context[7], context[8] );
    refalrts::push_stack( context[25] );
    refalrts::push_stack( context[21] );
    refalrts::link_brackets( context[17], context[20] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[12];
    res = refalrts::splice_evar( res, context[0], context[13] );
    res = refalrts::splice_evar( res, context[25], context[25] );
    res = refalrts::splice_evar( res, context[16], context[16] );
    res = refalrts::splice_evar( res, context[23], context[24] );
    res = refalrts::splice_evar( res, context[17], context[22] );
    refalrts::use( res );
    refalrts::splice_to_freelist_open( trash_prev, res );
    return refalrts::FnResult(refalrts::cSuccess | (__LINE__ << 8));
  } while ( 0 );

  do {
    refalrts::start_sentence();
    //(E )(#CmdBracketsSaveS S S )
    // </0 & GenCommand/4 (/7 e.Indent#1/5 )/8 (/11 # CmdBracketsSave/13 s.Direction#1/14 s.BracketNumber#1/15 s.InnerBrackets#1/16 )/12 >/1
    if( ! refalrts::ident_term(  & ident_CmdBracketsSave<int>::name, context[13] ) )
      continue;
    // closed e.Indent#1 as range 5
    context[66] = context[9];
    context[67] = context[10];
    if( ! refalrts::svar_left( context[14], context[66], context[67] ) )
      continue;
    if( ! refalrts::svar_left( context[15], context[66], context[67] ) )
      continue;
    if( ! refalrts::svar_left( context[16], context[66], context[67] ) )
      continue;
    if( ! refalrts::empty_seq( context[66], context[67] ) )
      continue;

    refalrts::reset_allocator();
    //TRASH: {REMOVED TILE}  {REMOVED TILE}  s.Direction#1/14 s.BracketNumber#1/15 {REMOVED TILE}  {REMOVED TILE} 
    //RESULT: Tile{ [[ } (/17 e.Indent#1/5/18 )/20 </21 & PrintBracketsVarInit/22 e.Indent#1/5/23 Tile{ AsIs: s.InnerBrackets#1/16 } >/25 Tile{ AsIs: </0 Reuse: & PrintMatchBracketsSave/4 AsIs: (/7 AsIs: e.Indent#1/5 AsIs: )/8 HalfReuse: s.Direction1 #14/11 HalfReuse: s.BracketNumber1 #15/13 } Tile{ HalfReuse: s.InnerBrackets1 #16/12 AsIs: >/1 ]] }
    if( ! refalrts::alloc_open_bracket( context[17] ) )
      return refalrts::cNoMemory;
    if (! refalrts::copy_evar(context[18], context[19], context[5], context[6]))
      return refalrts::cNoMemory;
    if( ! refalrts::alloc_close_bracket( context[20] ) )
      return refalrts::cNoMemory;
    if( ! refalrts::alloc_open_call( context[21] ) )
      return refalrts::cNoMemory;
    if( ! refalrts::alloc_name( context[22], PrintBracketsVarInit, "PrintBracketsVarInit" ) )
      return refalrts::cNoMemory;
    if (! refalrts::copy_evar(context[23], context[24], context[5], context[6]))
      return refalrts::cNoMemory;
    if( ! refalrts::alloc_close_call( context[25] ) )
      return refalrts::cNoMemory;
    refalrts::update_name( context[4], PrintMatchBracketsSave, "PrintMatchBracketsSave" );
    refalrts::reinit_svar( context[11], context[14] );
    refalrts::reinit_svar( context[13], context[15] );
    refalrts::reinit_svar( context[12], context[16] );
    refalrts::push_stack( context[1] );
    refalrts::push_stack( context[0] );
    refalrts::link_brackets( context[7], context[8] );
    refalrts::push_stack( context[25] );
    refalrts::push_stack( context[21] );
    refalrts::link_brackets( context[17], context[20] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[12];
    res = refalrts::splice_evar( res, context[0], context[13] );
    res = refalrts::splice_evar( res, context[25], context[25] );
    res = refalrts::splice_evar( res, context[16], context[16] );
    res = refalrts::splice_evar( res, context[23], context[24] );
    res = refalrts::splice_evar( res, context[17], context[22] );
    refalrts::use( res );
    refalrts::splice_to_freelist_open( trash_prev, res );
    return refalrts::FnResult(refalrts::cSuccess | (__LINE__ << 8));
  } while ( 0 );

  do {
    refalrts::start_sentence();
    //(E )(#CmdADTS S S E )
    // </0 & GenCommand/4 (/7 e.Indent#1/5 )/8 (/11 # CmdADT/13 s.Direction#1/14 s.BracketNumber#1/15 s.InnerBrackets#1/16 e.Name#1/9 )/12 >/1
    if( ! refalrts::ident_term(  & ident_CmdADT<int>::name, context[13] ) )
      continue;
    // closed e.Indent#1 as range 5
    context[66] = context[9];
    context[67] = context[10];
    if( ! refalrts::svar_left( context[14], context[66], context[67] ) )
      continue;
    if( ! refalrts::svar_left( context[15], context[66], context[67] ) )
      continue;
    if( ! refalrts::svar_left( context[16], context[66], context[67] ) )
      continue;
    // closed e.Name#1 as range 66(9)

    refalrts::reset_allocator();
    //TRASH: {REMOVED TILE}  {REMOVED TILE}  s.Direction#1/14 s.BracketNumber#1/15 {REMOVED TILE}  {REMOVED TILE}  {REMOVED TILE} 
    //RESULT: Tile{ [[ } (/17 e.Indent#1/5/18 )/20 </21 & PrintBracketsVarInit/22 e.Indent#1/5/23 s.InnerBrackets#1/16/25 Tile{ AsIs: >/1 } Tile{ AsIs: </0 Reuse: & PrintMatchADT/4 AsIs: (/7 AsIs: e.Indent#1/5 AsIs: )/8 HalfReuse: s.Direction1 #14/11 HalfReuse: s.BracketNumber1 #15/13 } Tile{ AsIs: s.InnerBrackets#1/16 AsIs: e.Name#1/66(9) HalfReuse: >/12 } Tile{ ]] }
    if( ! refalrts::alloc_open_bracket( context[17] ) )
      return refalrts::cNoMemory;
    if (! refalrts::copy_evar(context[18], context[19], context[5], context[6]))
      return refalrts::cNoMemory;
    if( ! refalrts::alloc_close_bracket( context[20] ) )
      return refalrts::cNoMemory;
    if( ! refalrts::alloc_open_call( context[21] ) )
      return refalrts::cNoMemory;
    if( ! refalrts::alloc_name( context[22], PrintBracketsVarInit, "PrintBracketsVarInit" ) )
      return refalrts::cNoMemory;
    if (! refalrts::copy_evar(context[23], context[24], context[5], context[6]))
      return refalrts::cNoMemory;
    if (! refalrts::copy_stvar(context[25], context[16]))
      return refalrts::cNoMemory;
    refalrts::update_name( context[4], PrintMatchADT, "PrintMatchADT" );
    refalrts::reinit_svar( context[11], context[14] );
    refalrts::reinit_svar( context[13], context[15] );
    refalrts::reinit_close_call( context[12] );
    refalrts::push_stack( context[12] );
    refalrts::push_stack( context[0] );
    refalrts::link_brackets( context[7], context[8] );
    refalrts::push_stack( context[1] );
    refalrts::push_stack( context[21] );
    refalrts::link_brackets( context[17], context[20] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = arg_end->next;
    res = refalrts::splice_evar( res, context[16], context[12] );
    res = refalrts::splice_evar( res, context[0], context[13] );
    res = refalrts::splice_evar( res, context[1], context[1] );
    res = refalrts::splice_evar( res, context[17], context[25] );
    refalrts::use( res );
    refalrts::splice_to_freelist_open( trash_prev, res );
    return refalrts::FnResult(refalrts::cSuccess | (__LINE__ << 8));
  } while ( 0 );

  do {
    refalrts::start_sentence();
    //(E )(#CmdADTSaveS S S E )
    // </0 & GenCommand/4 (/7 e.Indent#1/5 )/8 (/11 # CmdADTSave/13 s.Direction#1/14 s.BracketNumber#1/15 s.InnerBrackets#1/16 e.Name#1/9 )/12 >/1
    if( ! refalrts::ident_term(  & ident_CmdADTSave<int>::name, context[13] ) )
      continue;
    // closed e.Indent#1 as range 5
    context[66] = context[9];
    context[67] = context[10];
    if( ! refalrts::svar_left( context[14], context[66], context[67] ) )
      continue;
    if( ! refalrts::svar_left( context[15], context[66], context[67] ) )
      continue;
    if( ! refalrts::svar_left( context[16], context[66], context[67] ) )
      continue;
    // closed e.Name#1 as range 66(9)

    refalrts::reset_allocator();
    //TRASH: {REMOVED TILE}  {REMOVED TILE}  s.Direction#1/14 s.BracketNumber#1/15 {REMOVED TILE}  {REMOVED TILE}  {REMOVED TILE} 
    //RESULT: Tile{ [[ } (/17 e.Indent#1/5/18 )/20 </21 & PrintBracketsVarInit/22 e.Indent#1/5/23 s.InnerBrackets#1/16/25 Tile{ AsIs: >/1 } Tile{ AsIs: </0 Reuse: & PrintMatchADTSave/4 AsIs: (/7 AsIs: e.Indent#1/5 AsIs: )/8 HalfReuse: s.Direction1 #14/11 HalfReuse: s.BracketNumber1 #15/13 } Tile{ AsIs: s.InnerBrackets#1/16 AsIs: e.Name#1/66(9) HalfReuse: >/12 } Tile{ ]] }
    if( ! refalrts::alloc_open_bracket( context[17] ) )
      return refalrts::cNoMemory;
    if (! refalrts::copy_evar(context[18], context[19], context[5], context[6]))
      return refalrts::cNoMemory;
    if( ! refalrts::alloc_close_bracket( context[20] ) )
      return refalrts::cNoMemory;
    if( ! refalrts::alloc_open_call( context[21] ) )
      return refalrts::cNoMemory;
    if( ! refalrts::alloc_name( context[22], PrintBracketsVarInit, "PrintBracketsVarInit" ) )
      return refalrts::cNoMemory;
    if (! refalrts::copy_evar(context[23], context[24], context[5], context[6]))
      return refalrts::cNoMemory;
    if (! refalrts::copy_stvar(context[25], context[16]))
      return refalrts::cNoMemory;
    refalrts::update_name( context[4], PrintMatchADTSave, "PrintMatchADTSave" );
    refalrts::reinit_svar( context[11], context[14] );
    refalrts::reinit_svar( context[13], context[15] );
    refalrts::reinit_close_call( context[12] );
    refalrts::push_stack( context[12] );
    refalrts::push_stack( context[0] );
    refalrts::link_brackets( context[7], context[8] );
    refalrts::push_stack( context[1] );
    refalrts::push_stack( context[21] );
    refalrts::link_brackets( context[17], context[20] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = arg_end->next;
    res = refalrts::splice_evar( res, context[16], context[12] );
    res = refalrts::splice_evar( res, context[0], context[13] );
    res = refalrts::splice_evar( res, context[1], context[1] );
    res = refalrts::splice_evar( res, context[17], context[25] );
    refalrts::use( res );
    refalrts::splice_to_freelist_open( trash_prev, res );
    return refalrts::FnResult(refalrts::cSuccess | (__LINE__ << 8));
  } while ( 0 );

  do {
    refalrts::start_sentence();
    //(E )(#CmdCallSaveS S S )
    // </0 & GenCommand/4 (/7 e.Indent#1/5 )/8 (/11 # CmdCallSave/13 s.Direction#1/14 s.BracketNumber#1/15 s.InnerBrackets#1/16 )/12 >/1
    if( ! refalrts::ident_term(  & ident_CmdCallSave<int>::name, context[13] ) )
      continue;
    // closed e.Indent#1 as range 5
    context[66] = context[9];
    context[67] = context[10];
    if( ! refalrts::svar_left( context[14], context[66], context[67] ) )
      continue;
    if( ! refalrts::svar_left( context[15], context[66], context[67] ) )
      continue;
    if( ! refalrts::svar_left( context[16], context[66], context[67] ) )
      continue;
    if( ! refalrts::empty_seq( context[66], context[67] ) )
      continue;

    refalrts::reset_allocator();
    //TRASH: {REMOVED TILE}  {REMOVED TILE}  {REMOVED TILE}  {REMOVED TILE}  {REMOVED TILE}  {REMOVED TILE}  {REMOVED TILE} 
    //RESULT: Tile{ [[ } Tile{ AsIs: (/7 AsIs: e.Indent#1/5 AsIs: )/8 HalfReuse: </11 HalfReuse: & PrintBracketsVarInit/13 } e.Indent#1/5/17 s.InnerBrackets#1/16/19 >/20 (/21 e.Indent#1/5/22 Tile{ AsIs: </0 Reuse: & ContextItem/4 } </24 & Add/25 2/26 Tile{ AsIs: s.InnerBrackets#1/16 HalfReuse: >/12 AsIs: >/1 }" = refalrts::call_"/27 </29 & StrFromDirection/30 Tile{ AsIs: s.Direction#1/14 } >/31"( "/32 </34 & ContextRange/35 s.InnerBrackets#1/16/36 >/37", "/38 </40 & ContextRange/41 Tile{ AsIs: s.BracketNumber#1/15 } >/42" );"/43 )/45 Tile{ ]] }
    if (! refalrts::copy_evar(context[17], context[18], context[5], context[6]))
      return refalrts::cNoMemory;
    if (! refalrts::copy_stvar(context[19], context[16]))
      return refalrts::cNoMemory;
    if( ! refalrts::alloc_close_call( context[20] ) )
      return refalrts::cNoMemory;
    if( ! refalrts::alloc_open_bracket( context[21] ) )
      return refalrts::cNoMemory;
    if (! refalrts::copy_evar(context[22], context[23], context[5], context[6]))
      return refalrts::cNoMemory;
    if( ! refalrts::alloc_open_call( context[24] ) )
      return refalrts::cNoMemory;
    if( ! refalrts::alloc_name( context[25], Add, "Add" ) )
      return refalrts::cNoMemory;
    if( ! refalrts::alloc_number( context[26], 2UL ) )
      return refalrts::cNoMemory;
    if( ! refalrts::alloc_chars( context[27], context[28], " = refalrts::call_", 18 ) )
      return refalrts::cNoMemory;
    if( ! refalrts::alloc_open_call( context[29] ) )
      return refalrts::cNoMemory;
    if( ! refalrts::alloc_name( context[30], StrFromDirection, "StrFromDirection" ) )
      return refalrts::cNoMemory;
    if( ! refalrts::alloc_close_call( context[31] ) )
      return refalrts::cNoMemory;
    if( ! refalrts::alloc_chars( context[32], context[33], "( ", 2 ) )
      return refalrts::cNoMemory;
    if( ! refalrts::alloc_open_call( context[34] ) )
      return refalrts::cNoMemory;
    if( ! refalrts::alloc_name( context[35], ContextRange, "ContextRange" ) )
      return refalrts::cNoMemory;
    if (! refalrts::copy_stvar(context[36], context[16]))
      return refalrts::cNoMemory;
    if( ! refalrts::alloc_close_call( context[37] ) )
      return refalrts::cNoMemory;
    if( ! refalrts::alloc_chars( context[38], context[39], ", ", 2 ) )
      return refalrts::cNoMemory;
    if( ! refalrts::alloc_open_call( context[40] ) )
      return refalrts::cNoMemory;
    if( ! refalrts::alloc_name( context[41], ContextRange, "ContextRange" ) )
      return refalrts::cNoMemory;
    if( ! refalrts::alloc_close_call( context[42] ) )
      return refalrts::cNoMemory;
    if( ! refalrts::alloc_chars( context[43], context[44], " );", 3 ) )
      return refalrts::cNoMemory;
    if( ! refalrts::alloc_close_bracket( context[45] ) )
      return refalrts::cNoMemory;
    refalrts::reinit_open_call( context[11] );
    refalrts::reinit_name( context[13], PrintBracketsVarInit, "PrintBracketsVarInit" );
    refalrts::update_name( context[4], ContextItem, "ContextItem" );
    refalrts::reinit_close_call( context[12] );
    refalrts::link_brackets( context[21], context[45] );
    refalrts::push_stack( context[42] );
    refalrts::push_stack( context[40] );
    refalrts::push_stack( context[37] );
    refalrts::push_stack( context[34] );
    refalrts::push_stack( context[31] );
    refalrts::push_stack( context[29] );
    refalrts::push_stack( context[1] );
    refalrts::push_stack( context[0] );
    refalrts::push_stack( context[12] );
    refalrts::push_stack( context[24] );
    refalrts::push_stack( context[20] );
    refalrts::push_stack( context[11] );
    refalrts::link_brackets( context[7], context[8] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = arg_end->next;
    res = refalrts::splice_evar( res, context[42], context[45] );
    res = refalrts::splice_evar( res, context[15], context[15] );
    res = refalrts::splice_evar( res, context[31], context[41] );
    res = refalrts::splice_evar( res, context[14], context[14] );
    res = refalrts::splice_evar( res, context[27], context[30] );
    res = refalrts::splice_evar( res, context[16], context[1] );
    res = refalrts::splice_evar( res, context[24], context[26] );
    res = refalrts::splice_evar( res, context[0], context[4] );
    res = refalrts::splice_evar( res, context[22], context[23] );
    res = refalrts::splice_evar( res, context[19], context[21] );
    res = refalrts::splice_evar( res, context[17], context[18] );
    res = refalrts::splice_evar( res, context[7], context[13] );
    refalrts::use( res );
    return refalrts::FnResult(refalrts::cSuccess | (__LINE__ << 8));
  } while ( 0 );

  do {
    refalrts::start_sentence();
    //(E )(#CmdEmptyS S )
    // </0 & GenCommand/4 (/7 e.Indent#1/5 )/8 (/11 # CmdEmpty/13 s.Direction#1/14 s.BracketNumber#1/15 )/12 >/1
    if( ! refalrts::ident_term(  & ident_CmdEmpty<int>::name, context[13] ) )
      continue;
    // closed e.Indent#1 as range 5
    context[66] = context[9];
    context[67] = context[10];
    if( ! refalrts::svar_left( context[14], context[66], context[67] ) )
      continue;
    if( ! refalrts::svar_left( context[15], context[66], context[67] ) )
      continue;
    if( ! refalrts::empty_seq( context[66], context[67] ) )
      continue;

    refalrts::reset_allocator();
    //TRASH: {REMOVED TILE}  {REMOVED TILE}  s.Direction#1/14 s.BracketNumber#1/15 {REMOVED TILE}  {REMOVED TILE}  {REMOVED TILE} 
    //RESULT: Tile{ [[ } Tile{ HalfReuse: (/1 } e.Indent#1/5/16 Tile{ AsIs: )/12 } Tile{ AsIs: </0 Reuse: & PrintMatchEmpty/4 AsIs: (/7 AsIs: e.Indent#1/5 AsIs: )/8 HalfReuse: s.BracketNumber1 #15/11 HalfReuse: >/13 } Tile{ ]] }
    if (! refalrts::copy_evar(context[16], context[17], context[5], context[6]))
      return refalrts::cNoMemory;
    refalrts::reinit_open_bracket( context[1] );
    refalrts::update_name( context[4], PrintMatchEmpty, "PrintMatchEmpty" );
    refalrts::reinit_svar( context[11], context[15] );
    refalrts::reinit_close_call( context[13] );
    refalrts::push_stack( context[13] );
    refalrts::push_stack( context[0] );
    refalrts::link_brackets( context[7], context[8] );
    refalrts::link_brackets( context[1], context[12] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = arg_end->next;
    res = refalrts::splice_evar( res, context[0], context[13] );
    res = refalrts::splice_evar( res, context[12], context[12] );
    res = refalrts::splice_evar( res, context[16], context[17] );
    res = refalrts::splice_evar( res, context[1], context[1] );
    refalrts::use( res );
    refalrts::splice_to_freelist_open( trash_prev, res );
    return refalrts::FnResult(refalrts::cSuccess | (__LINE__ << 8));
  } while ( 0 );

  do {
    refalrts::start_sentence();
    //(E )(#CmdVarS S S S )
    // </0 & GenCommand/4 (/7 e.Indent#1/5 )/8 (/11 # CmdVar/13 s.Direction#1/14 s.BracketNumber#1/15 s.Mode#1/16 s.VarNumber#1/17 )/12 >/1
    if( ! refalrts::ident_term(  & ident_CmdVar<int>::name, context[13] ) )
      continue;
    // closed e.Indent#1 as range 5
    context[66] = context[9];
    context[67] = context[10];
    if( ! refalrts::svar_left( context[14], context[66], context[67] ) )
      continue;
    if( ! refalrts::svar_left( context[15], context[66], context[67] ) )
      continue;
    if( ! refalrts::svar_left( context[16], context[66], context[67] ) )
      continue;
    if( ! refalrts::svar_left( context[17], context[66], context[67] ) )
      continue;
    if( ! refalrts::empty_seq( context[66], context[67] ) )
      continue;

    refalrts::reset_allocator();
    //TRASH: {REMOVED TILE}  {REMOVED TILE}  s.Direction#1/14 s.BracketNumber#1/15 {REMOVED TILE}  s.VarNumber#1/17 {REMOVED TILE} 
    //RESULT: Tile{ [[ } (/18 e.Indent#1/5/19 )/21 Tile{ AsIs: </0 Reuse: & PrintMatchSTVar/4 AsIs: (/7 AsIs: e.Indent#1/5 AsIs: )/8 HalfReuse: s.Direction1 #14/11 HalfReuse: s.BracketNumber1 #15/13 } Tile{ AsIs: s.Mode#1/16 } Tile{ HalfReuse: s.VarNumber1 #17/12 AsIs: >/1 ]] }
    if( ! refalrts::alloc_open_bracket( context[18] ) )
      return refalrts::cNoMemory;
    if (! refalrts::copy_evar(context[19], context[20], context[5], context[6]))
      return refalrts::cNoMemory;
    if( ! refalrts::alloc_close_bracket( context[21] ) )
      return refalrts::cNoMemory;
    refalrts::update_name( context[4], PrintMatchSTVar, "PrintMatchSTVar" );
    refalrts::reinit_svar( context[11], context[14] );
    refalrts::reinit_svar( context[13], context[15] );
    refalrts::reinit_svar( context[12], context[17] );
    refalrts::push_stack( context[1] );
    refalrts::push_stack( context[0] );
    refalrts::link_brackets( context[7], context[8] );
    refalrts::link_brackets( context[18], context[21] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[12];
    res = refalrts::splice_evar( res, context[16], context[16] );
    res = refalrts::splice_evar( res, context[0], context[13] );
    res = refalrts::splice_evar( res, context[18], context[21] );
    refalrts::use( res );
    refalrts::splice_to_freelist_open( trash_prev, res );
    return refalrts::FnResult(refalrts::cSuccess | (__LINE__ << 8));
  } while ( 0 );

  do {
    refalrts::start_sentence();
    //(E )(#CmdVarSaveS S S S )
    // </0 & GenCommand/4 (/7 e.Indent#1/5 )/8 (/11 # CmdVarSave/13 s.Direction#1/14 s.BracketNumber#1/15 s.Mode#1/16 s.VarNumber#1/17 )/12 >/1
    if( ! refalrts::ident_term(  & ident_CmdVarSave<int>::name, context[13] ) )
      continue;
    // closed e.Indent#1 as range 5
    context[66] = context[9];
    context[67] = context[10];
    if( ! refalrts::svar_left( context[14], context[66], context[67] ) )
      continue;
    if( ! refalrts::svar_left( context[15], context[66], context[67] ) )
      continue;
    if( ! refalrts::svar_left( context[16], context[66], context[67] ) )
      continue;
    if( ! refalrts::svar_left( context[17], context[66], context[67] ) )
      continue;
    if( ! refalrts::empty_seq( context[66], context[67] ) )
      continue;

    refalrts::reset_allocator();
    //TRASH: {REMOVED TILE}  {REMOVED TILE}  s.Direction#1/14 s.BracketNumber#1/15 {REMOVED TILE}  s.VarNumber#1/17 {REMOVED TILE} 
    //RESULT: Tile{ [[ } (/18 e.Indent#1/5/19 )/21 Tile{ AsIs: </0 Reuse: & PrintMatchSTVarSave/4 AsIs: (/7 AsIs: e.Indent#1/5 AsIs: )/8 HalfReuse: s.Direction1 #14/11 HalfReuse: s.BracketNumber1 #15/13 } Tile{ AsIs: s.Mode#1/16 } Tile{ HalfReuse: s.VarNumber1 #17/12 AsIs: >/1 ]] }
    if( ! refalrts::alloc_open_bracket( context[18] ) )
      return refalrts::cNoMemory;
    if (! refalrts::copy_evar(context[19], context[20], context[5], context[6]))
      return refalrts::cNoMemory;
    if( ! refalrts::alloc_close_bracket( context[21] ) )
      return refalrts::cNoMemory;
    refalrts::update_name( context[4], PrintMatchSTVarSave, "PrintMatchSTVarSave" );
    refalrts::reinit_svar( context[11], context[14] );
    refalrts::reinit_svar( context[13], context[15] );
    refalrts::reinit_svar( context[12], context[17] );
    refalrts::push_stack( context[1] );
    refalrts::push_stack( context[0] );
    refalrts::link_brackets( context[7], context[8] );
    refalrts::link_brackets( context[18], context[21] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[12];
    res = refalrts::splice_evar( res, context[16], context[16] );
    res = refalrts::splice_evar( res, context[0], context[13] );
    res = refalrts::splice_evar( res, context[18], context[21] );
    refalrts::use( res );
    refalrts::splice_to_freelist_open( trash_prev, res );
    return refalrts::FnResult(refalrts::cSuccess | (__LINE__ << 8));
  } while ( 0 );

  do {
    refalrts::start_sentence();
    //(E )(#CmdRepeatedS S S S S )
    // </0 & GenCommand/4 (/7 e.Indent#1/5 )/8 (/11 # CmdRepeated/13 s.Direction#1/14 s.BracketNumber#1/15 s.Mode#1/16 s.Var#1/17 s.Sample#1/18 )/12 >/1
    if( ! refalrts::ident_term(  & ident_CmdRepeated<int>::name, context[13] ) )
      continue;
    // closed e.Indent#1 as range 5
    context[66] = context[9];
    context[67] = context[10];
    if( ! refalrts::svar_left( context[14], context[66], context[67] ) )
      continue;
    if( ! refalrts::svar_left( context[15], context[66], context[67] ) )
      continue;
    if( ! refalrts::svar_left( context[16], context[66], context[67] ) )
      continue;
    if( ! refalrts::svar_left( context[17], context[66], context[67] ) )
      continue;
    if( ! refalrts::svar_left( context[18], context[66], context[67] ) )
      continue;
    if( ! refalrts::empty_seq( context[66], context[67] ) )
      continue;

    refalrts::reset_allocator();
    //TRASH: {REMOVED TILE}  </0 {REMOVED TILE}  {REMOVED TILE}  {REMOVED TILE}  {REMOVED TILE}  {REMOVED TILE} 
    //RESULT: Tile{ [[ } Tile{ AsIs: (/7 AsIs: e.Indent#1/5 AsIs: )/8 HalfReuse: </11 } Tile{ Reuse: & PrintMatchRepeated/4 } Tile{ HalfReuse: (/1 } e.Indent#1/5/19 Tile{ HalfReuse: )/13 AsIs: s.Direction#1/14 AsIs: s.BracketNumber#1/15 AsIs: s.Mode#1/16 AsIs: s.Var#1/17 AsIs: s.Sample#1/18 HalfReuse: >/12 } Tile{ ]] }
    if (! refalrts::copy_evar(context[19], context[20], context[5], context[6]))
      return refalrts::cNoMemory;
    refalrts::reinit_open_call( context[11] );
    refalrts::update_name( context[4], PrintMatchRepeated, "PrintMatchRepeated" );
    refalrts::reinit_open_bracket( context[1] );
    refalrts::reinit_close_bracket( context[13] );
    refalrts::reinit_close_call( context[12] );
    refalrts::push_stack( context[12] );
    refalrts::push_stack( context[11] );
    refalrts::link_brackets( context[1], context[13] );
    refalrts::link_brackets( context[7], context[8] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = arg_end->next;
    res = refalrts::splice_evar( res, context[13], context[12] );
    res = refalrts::splice_evar( res, context[19], context[20] );
    res = refalrts::splice_evar( res, context[1], context[1] );
    res = refalrts::splice_evar( res, context[4], context[4] );
    res = refalrts::splice_evar( res, context[7], context[11] );
    refalrts::use( res );
    refalrts::splice_to_freelist_open( trash_prev, res );
    return refalrts::FnResult(refalrts::cSuccess | (__LINE__ << 8));
  } while ( 0 );

  do {
    refalrts::start_sentence();
    //(E )(#CmdRepeatedSaveS S S S S )
    // </0 & GenCommand/4 (/7 e.Indent#1/5 )/8 (/11 # CmdRepeatedSave/13 s.Direction#1/14 s.BracketNumber#1/15 s.Mode#1/16 s.Var#1/17 s.Sample#1/18 )/12 >/1
    if( ! refalrts::ident_term(  & ident_CmdRepeatedSave<int>::name, context[13] ) )
      continue;
    // closed e.Indent#1 as range 5
    context[66] = context[9];
    context[67] = context[10];
    if( ! refalrts::svar_left( context[14], context[66], context[67] ) )
      continue;
    if( ! refalrts::svar_left( context[15], context[66], context[67] ) )
      continue;
    if( ! refalrts::svar_left( context[16], context[66], context[67] ) )
      continue;
    if( ! refalrts::svar_left( context[17], context[66], context[67] ) )
      continue;
    if( ! refalrts::svar_left( context[18], context[66], context[67] ) )
      continue;
    if( ! refalrts::empty_seq( context[66], context[67] ) )
      continue;

    refalrts::reset_allocator();
    //TRASH: {REMOVED TILE}  </0 {REMOVED TILE}  {REMOVED TILE}  {REMOVED TILE}  {REMOVED TILE}  {REMOVED TILE} 
    //RESULT: Tile{ [[ } Tile{ AsIs: (/7 AsIs: e.Indent#1/5 AsIs: )/8 HalfReuse: </11 } Tile{ Reuse: & PrintMatchRepeatedSave/4 } Tile{ HalfReuse: (/1 } e.Indent#1/5/19 Tile{ HalfReuse: )/13 AsIs: s.Direction#1/14 AsIs: s.BracketNumber#1/15 AsIs: s.Mode#1/16 AsIs: s.Var#1/17 AsIs: s.Sample#1/18 HalfReuse: >/12 } Tile{ ]] }
    if (! refalrts::copy_evar(context[19], context[20], context[5], context[6]))
      return refalrts::cNoMemory;
    refalrts::reinit_open_call( context[11] );
    refalrts::update_name( context[4], PrintMatchRepeatedSave, "PrintMatchRepeatedSave" );
    refalrts::reinit_open_bracket( context[1] );
    refalrts::reinit_close_bracket( context[13] );
    refalrts::reinit_close_call( context[12] );
    refalrts::push_stack( context[12] );
    refalrts::push_stack( context[11] );
    refalrts::link_brackets( context[1], context[13] );
    refalrts::link_brackets( context[7], context[8] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = arg_end->next;
    res = refalrts::splice_evar( res, context[13], context[12] );
    res = refalrts::splice_evar( res, context[19], context[20] );
    res = refalrts::splice_evar( res, context[1], context[1] );
    res = refalrts::splice_evar( res, context[4], context[4] );
    res = refalrts::splice_evar( res, context[7], context[11] );
    refalrts::use( res );
    refalrts::splice_to_freelist_open( trash_prev, res );
    return refalrts::FnResult(refalrts::cSuccess | (__LINE__ << 8));
  } while ( 0 );

  do {
    refalrts::start_sentence();
    //(E )(#CmdOpenedE_Start#AlgLeftS S )
    // </0 & GenCommand/4 (/7 e.Indent#1/5 )/8 (/11 # CmdOpenedE_Start/13 # AlgLeft/14 s.BracketNumber#1/15 s.VarNumber#1/16 )/12 >/1
    if( ! refalrts::ident_term(  & ident_CmdOpenedE_Start<int>::name, context[13] ) )
      continue;
    context[66] = context[9];
    context[67] = context[10];
    context[14] = refalrts::ident_left(  & ident_AlgLeft<int>::name, context[66], context[67] );
    if( ! context[14] )
      continue;
    // closed e.Indent#1 as range 5
    if( ! refalrts::svar_left( context[15], context[66], context[67] ) )
      continue;
    if( ! refalrts::svar_left( context[16], context[66], context[67] ) )
      continue;
    if( ! refalrts::empty_seq( context[66], context[67] ) )
      continue;

    refalrts::reset_allocator();
    //TRASH: {REMOVED TILE}  {REMOVED TILE}  s.BracketNumber#1/15 {REMOVED TILE}  {REMOVED TILE} 
    //RESULT: Tile{ [[ } (/17 e.Indent#1/5/18 ' '/20 Tile{ HalfReuse: ' '/0 HalfReuse: )/4 AsIs: (/7 AsIs: e.Indent#1/5 HalfReuse: </8 HalfReuse: & ContextRange_B/11 HalfReuse: s.VarNumber1 #16/13 HalfReuse: >/14 }" = 0;"/21 )/23 (/24 e.Indent#1/5/25 </27 & ContextRange_E/28 Tile{ AsIs: s.VarNumber#1/16 HalfReuse: >/12 HalfReuse: ' '/1 }"= 0;"/29 )/31 (/32 e.Indent#1/5/33"refalrts::start_e_loop();"/35 )/37 (/38 e.Indent#1/5/39"do {"/41 )/43 Tile{ ]] }
    if( ! refalrts::alloc_open_bracket( context[17] ) )
      return refalrts::cNoMemory;
    if (! refalrts::copy_evar(context[18], context[19], context[5], context[6]))
      return refalrts::cNoMemory;
    if( ! refalrts::alloc_char( context[20], ' ' ) )
      return refalrts::cNoMemory;
    if( ! refalrts::alloc_chars( context[21], context[22], " = 0;", 5 ) )
      return refalrts::cNoMemory;
    if( ! refalrts::alloc_close_bracket( context[23] ) )
      return refalrts::cNoMemory;
    if( ! refalrts::alloc_open_bracket( context[24] ) )
      return refalrts::cNoMemory;
    if (! refalrts::copy_evar(context[25], context[26], context[5], context[6]))
      return refalrts::cNoMemory;
    if( ! refalrts::alloc_open_call( context[27] ) )
      return refalrts::cNoMemory;
    if( ! refalrts::alloc_name( context[28], ContextRange_E, "ContextRange_E" ) )
      return refalrts::cNoMemory;
    if( ! refalrts::alloc_chars( context[29], context[30], "= 0;", 4 ) )
      return refalrts::cNoMemory;
    if( ! refalrts::alloc_close_bracket( context[31] ) )
      return refalrts::cNoMemory;
    if( ! refalrts::alloc_open_bracket( context[32] ) )
      return refalrts::cNoMemory;
    if (! refalrts::copy_evar(context[33], context[34], context[5], context[6]))
      return refalrts::cNoMemory;
    if( ! refalrts::alloc_chars( context[35], context[36], "refalrts::start_e_loop();", 25 ) )
      return refalrts::cNoMemory;
    if( ! refalrts::alloc_close_bracket( context[37] ) )
      return refalrts::cNoMemory;
    if( ! refalrts::alloc_open_bracket( context[38] ) )
      return refalrts::cNoMemory;
    if (! refalrts::copy_evar(context[39], context[40], context[5], context[6]))
      return refalrts::cNoMemory;
    if( ! refalrts::alloc_chars( context[41], context[42], "do {", 4 ) )
      return refalrts::cNoMemory;
    if( ! refalrts::alloc_close_bracket( context[43] ) )
      return refalrts::cNoMemory;
    refalrts::reinit_char( context[0], ' ' );
    refalrts::reinit_close_bracket( context[4] );
    refalrts::reinit_open_call( context[8] );
    refalrts::reinit_name( context[11], ContextRange_B, "ContextRange_B" );
    refalrts::reinit_svar( context[13], context[16] );
    refalrts::reinit_close_call( context[14] );
    refalrts::reinit_close_call( context[12] );
    refalrts::reinit_char( context[1], ' ' );
    refalrts::link_brackets( context[38], context[43] );
    refalrts::link_brackets( context[32], context[37] );
    refalrts::link_brackets( context[24], context[31] );
    refalrts::push_stack( context[12] );
    refalrts::push_stack( context[27] );
    refalrts::link_brackets( context[7], context[23] );
    refalrts::push_stack( context[14] );
    refalrts::push_stack( context[8] );
    refalrts::link_brackets( context[17], context[4] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = arg_end->next;
    res = refalrts::splice_evar( res, context[29], context[43] );
    res = refalrts::splice_evar( res, context[16], context[1] );
    res = refalrts::splice_evar( res, context[21], context[28] );
    res = refalrts::splice_evar( res, context[0], context[14] );
    res = refalrts::splice_evar( res, context[17], context[20] );
    refalrts::use( res );
    refalrts::splice_to_freelist_open( trash_prev, res );
    return refalrts::FnResult(refalrts::cSuccess | (__LINE__ << 8));
  } while ( 0 );

  do {
    refalrts::start_sentence();
    //(E ' '' ')(#CmdOpenedE_End#AlgLeftS S )
    // </0 & GenCommand/4 (/7 e.Indent#1/5 ' '/16 ' '/15 )/8 (/11 # CmdOpenedE_End/13 # AlgLeft/14 s.BracketNumber#1/17 s.VarNumber#1/18 )/12 >/1
    if( ! refalrts::ident_term(  & ident_CmdOpenedE_End<int>::name, context[13] ) )
      continue;
    context[66] = context[9];
    context[67] = context[10];
    context[14] = refalrts::ident_left(  & ident_AlgLeft<int>::name, context[66], context[67] );
    if( ! context[14] )
      continue;
    context[68] = context[5];
    context[69] = context[6];
    context[15] = refalrts::char_right( ' ', context[68], context[69] );
    if( ! context[15] )
      continue;
    context[16] = refalrts::char_right( ' ', context[68], context[69] );
    if( ! context[16] )
      continue;
    // closed e.Indent#1 as range 68(5)
    if( ! refalrts::svar_left( context[17], context[66], context[67] ) )
      continue;
    if( ! refalrts::svar_left( context[18], context[66], context[67] ) )
      continue;
    if( ! refalrts::empty_seq( context[66], context[67] ) )
      continue;

    refalrts::reset_allocator();
    //TRASH: {REMOVED TILE}  {REMOVED TILE}  {REMOVED TILE}  {REMOVED TILE}  {REMOVED TILE} 
    //RESULT: Tile{ [[ HalfReuse: (/0 } e.Indent#1/68(5)/19 Tile{ HalfReuse: )/4 AsIs: (/7 AsIs: e.Indent#1/68(5) Reuse: '}'/16 AsIs: ' '/15 HalfReuse: 'w'/8 HalfReuse: 'h'/11 HalfReuse: 'i'/13 HalfReuse: 'l'/14 }"e ( refalrts::open_evar_advance( "/21 </23 & ContextRange/24 Tile{ AsIs: s.VarNumber#1/18 HalfReuse: >/12 HalfReuse: ','/1 } ' '/25 </26 & ContextRange/27 Tile{ AsIs: s.BracketNumber#1/17 } >/28" ) );"/29 )/31 Tile{ ]] }
    if (! refalrts::copy_evar(context[19], context[20], context[68], context[69]))
      return refalrts::cNoMemory;
    if( ! refalrts::alloc_chars( context[21], context[22], "e ( refalrts::open_evar_advance( ", 33 ) )
      return refalrts::cNoMemory;
    if( ! refalrts::alloc_open_call( context[23] ) )
      return refalrts::cNoMemory;
    if( ! refalrts::alloc_name( context[24], ContextRange, "ContextRange" ) )
      return refalrts::cNoMemory;
    if( ! refalrts::alloc_char( context[25], ' ' ) )
      return refalrts::cNoMemory;
    if( ! refalrts::alloc_open_call( context[26] ) )
      return refalrts::cNoMemory;
    if( ! refalrts::alloc_name( context[27], ContextRange, "ContextRange" ) )
      return refalrts::cNoMemory;
    if( ! refalrts::alloc_close_call( context[28] ) )
      return refalrts::cNoMemory;
    if( ! refalrts::alloc_chars( context[29], context[30], " ) );", 5 ) )
      return refalrts::cNoMemory;
    if( ! refalrts::alloc_close_bracket( context[31] ) )
      return refalrts::cNoMemory;
    refalrts::reinit_open_bracket( context[0] );
    refalrts::reinit_close_bracket( context[4] );
    refalrts::update_char( context[16], '}' );
    refalrts::reinit_char( context[8], 'w' );
    refalrts::reinit_char( context[11], 'h' );
    refalrts::reinit_char( context[13], 'i' );
    refalrts::reinit_char( context[14], 'l' );
    refalrts::reinit_close_call( context[12] );
    refalrts::reinit_char( context[1], ',' );
    refalrts::link_brackets( context[7], context[31] );
    refalrts::push_stack( context[28] );
    refalrts::push_stack( context[26] );
    refalrts::push_stack( context[12] );
    refalrts::push_stack( context[23] );
    refalrts::link_brackets( context[0], context[4] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = arg_end->next;
    res = refalrts::splice_evar( res, context[28], context[31] );
    res = refalrts::splice_evar( res, context[17], context[17] );
    res = refalrts::splice_evar( res, context[25], context[27] );
    res = refalrts::splice_evar( res, context[18], context[1] );
    res = refalrts::splice_evar( res, context[21], context[24] );
    res = refalrts::splice_evar( res, context[4], context[14] );
    res = refalrts::splice_evar( res, context[19], context[20] );
    refalrts::use( res );
    return refalrts::FnResult(refalrts::cSuccess | (__LINE__ << 8));
  } while ( 0 );

  do {
    refalrts::start_sentence();
    //(E )(#CmdSaveS S )
    // </0 & GenCommand/4 (/7 e.Indent#1/5 )/8 (/11 # CmdSave/13 s.OldBracketNumber#1/14 s.NewBracketNumber#1/15 )/12 >/1
    if( ! refalrts::ident_term(  & ident_CmdSave<int>::name, context[13] ) )
      continue;
    // closed e.Indent#1 as range 5
    context[66] = context[9];
    context[67] = context[10];
    if( ! refalrts::svar_left( context[14], context[66], context[67] ) )
      continue;
    if( ! refalrts::svar_left( context[15], context[66], context[67] ) )
      continue;
    if( ! refalrts::empty_seq( context[66], context[67] ) )
      continue;

    refalrts::reset_allocator();
    //TRASH: {REMOVED TILE}  {REMOVED TILE}  {REMOVED TILE}  {REMOVED TILE}  {REMOVED TILE}  {REMOVED TILE} 
    //RESULT: Tile{ [[ } Tile{ AsIs: (/7 AsIs: e.Indent#1/5 AsIs: )/8 AsIs: (/11 } e.Indent#1/5/16 Tile{ AsIs: </0 Reuse: & ContextRange_B/4 } Tile{ AsIs: s.NewBracketNumber#1/15 HalfReuse: >/12 HalfReuse: ' '/1 }"= "/18 </20 Tile{ HalfReuse: & ContextRange_B/13 AsIs: s.OldBracketNumber#1/14 } >/21 ';'/22 )/23 (/24 e.Indent#1/5/25 </27 & ContextRange_E/28 s.NewBracketNumber#1/15/29 >/30" = "/31 </33 & ContextRange_E/34 s.OldBracketNumber#1/14/35 >/36 ';'/37 )/38 Tile{ ]] }
    if (! refalrts::copy_evar(context[16], context[17], context[5], context[6]))
      return refalrts::cNoMemory;
    if( ! refalrts::alloc_chars( context[18], context[19], "= ", 2 ) )
      return refalrts::cNoMemory;
    if( ! refalrts::alloc_open_call( context[20] ) )
      return refalrts::cNoMemory;
    if( ! refalrts::alloc_close_call( context[21] ) )
      return refalrts::cNoMemory;
    if( ! refalrts::alloc_char( context[22], ';' ) )
      return refalrts::cNoMemory;
    if( ! refalrts::alloc_close_bracket( context[23] ) )
      return refalrts::cNoMemory;
    if( ! refalrts::alloc_open_bracket( context[24] ) )
      return refalrts::cNoMemory;
    if (! refalrts::copy_evar(context[25], context[26], context[5], context[6]))
      return refalrts::cNoMemory;
    if( ! refalrts::alloc_open_call( context[27] ) )
      return refalrts::cNoMemory;
    if( ! refalrts::alloc_name( context[28], ContextRange_E, "ContextRange_E" ) )
      return refalrts::cNoMemory;
    if (! refalrts::copy_stvar(context[29], context[15]))
      return refalrts::cNoMemory;
    if( ! refalrts::alloc_close_call( context[30] ) )
      return refalrts::cNoMemory;
    if( ! refalrts::alloc_chars( context[31], context[32], " = ", 3 ) )
      return refalrts::cNoMemory;
    if( ! refalrts::alloc_open_call( context[33] ) )
      return refalrts::cNoMemory;
    if( ! refalrts::alloc_name( context[34], ContextRange_E, "ContextRange_E" ) )
      return refalrts::cNoMemory;
    if (! refalrts::copy_stvar(context[35], context[14]))
      return refalrts::cNoMemory;
    if( ! refalrts::alloc_close_call( context[36] ) )
      return refalrts::cNoMemory;
    if( ! refalrts::alloc_char( context[37], ';' ) )
      return refalrts::cNoMemory;
    if( ! refalrts::alloc_close_bracket( context[38] ) )
      return refalrts::cNoMemory;
    refalrts::update_name( context[4], ContextRange_B, "ContextRange_B" );
    refalrts::reinit_close_call( context[12] );
    refalrts::reinit_char( context[1], ' ' );
    refalrts::reinit_name( context[13], ContextRange_B, "ContextRange_B" );
    refalrts::link_brackets( context[24], context[38] );
    refalrts::push_stack( context[36] );
    refalrts::push_stack( context[33] );
    refalrts::push_stack( context[30] );
    refalrts::push_stack( context[27] );
    refalrts::link_brackets( context[11], context[23] );
    refalrts::push_stack( context[21] );
    refalrts::push_stack( context[20] );
    refalrts::push_stack( context[12] );
    refalrts::push_stack( context[0] );
    refalrts::link_brackets( context[7], context[8] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = arg_end->next;
    res = refalrts::splice_evar( res, context[21], context[38] );
    res = refalrts::splice_evar( res, context[13], context[14] );
    res = refalrts::splice_evar( res, context[18], context[20] );
    res = refalrts::splice_evar( res, context[15], context[1] );
    res = refalrts::splice_evar( res, context[0], context[4] );
    res = refalrts::splice_evar( res, context[16], context[17] );
    res = refalrts::splice_evar( res, context[7], context[11] );
    refalrts::use( res );
    return refalrts::FnResult(refalrts::cSuccess | (__LINE__ << 8));
  } while ( 0 );

  do {
    refalrts::start_sentence();
    //(E )(#CmdEmptyResult)
    // </0 & GenCommand/4 (/7 e.Indent#1/5 )/8 (/11 # CmdEmptyResult/13 )/12 >/1
    if( ! refalrts::ident_term(  & ident_CmdEmptyResult<int>::name, context[13] ) )
      continue;
    context[66] = context[9];
    context[67] = context[10];
    if( ! refalrts::empty_seq( context[66], context[67] ) )
      continue;
    // closed e.Indent#1 as range 5

    refalrts::reset_allocator();
    //TRASH: {REMOVED TILE}  {REMOVED TILE}  {REMOVED TILE}  {REMOVED TILE} 
    //RESULT: Tile{ [[ } Tile{ AsIs: (/7 AsIs: e.Indent#1/5 AsIs: )/8 AsIs: (/11 HalfReuse: )/13 HalfReuse: (/12 } e.Indent#1/5/14 'r'/16 Tile{ HalfReuse: 'e'/0 HalfReuse: 'f'/4 }"alrts::reset_allocator();"/17 )/19 (/20 e.Indent#1/5/21"refalrts::Iter res = arg_begin;"/23 Tile{ HalfReuse: )/1 ]] }
    if (! refalrts::copy_evar(context[14], context[15], context[5], context[6]))
      return refalrts::cNoMemory;
    if( ! refalrts::alloc_char( context[16], 'r' ) )
      return refalrts::cNoMemory;
    if( ! refalrts::alloc_chars( context[17], context[18], "alrts::reset_allocator();", 25 ) )
      return refalrts::cNoMemory;
    if( ! refalrts::alloc_close_bracket( context[19] ) )
      return refalrts::cNoMemory;
    if( ! refalrts::alloc_open_bracket( context[20] ) )
      return refalrts::cNoMemory;
    if (! refalrts::copy_evar(context[21], context[22], context[5], context[6]))
      return refalrts::cNoMemory;
    if( ! refalrts::alloc_chars( context[23], context[24], "refalrts::Iter res = arg_begin;", 31 ) )
      return refalrts::cNoMemory;
    refalrts::reinit_close_bracket( context[13] );
    refalrts::reinit_open_bracket( context[12] );
    refalrts::reinit_char( context[0], 'e' );
    refalrts::reinit_char( context[4], 'f' );
    refalrts::reinit_close_bracket( context[1] );
    refalrts::link_brackets( context[20], context[1] );
    refalrts::link_brackets( context[12], context[19] );
    refalrts::link_brackets( context[11], context[13] );
    refalrts::link_brackets( context[7], context[8] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    res = refalrts::splice_evar( res, context[17], context[24] );
    res = refalrts::splice_evar( res, context[0], context[4] );
    res = refalrts::splice_evar( res, context[16], context[16] );
    res = refalrts::splice_evar( res, context[14], context[15] );
    res = refalrts::splice_evar( res, context[7], context[12] );
    refalrts::use( res );
    return refalrts::FnResult(refalrts::cSuccess | (__LINE__ << 8));
  } while ( 0 );

  do {
    refalrts::start_sentence();
    //(E )(#CmdResetAllocator)
    // </0 & GenCommand/4 (/7 e.Indent#1/5 )/8 (/11 # CmdResetAllocator/13 )/12 >/1
    if( ! refalrts::ident_term(  & ident_CmdResetAllocator<int>::name, context[13] ) )
      continue;
    context[66] = context[9];
    context[67] = context[10];
    if( ! refalrts::empty_seq( context[66], context[67] ) )
      continue;
    // closed e.Indent#1 as range 5

    refalrts::reset_allocator();
    //TRASH: {REMOVED TILE}  {REMOVED TILE}  {REMOVED TILE}  {REMOVED TILE} 
    //RESULT: Tile{ [[ } Tile{ AsIs: (/7 AsIs: e.Indent#1/5 AsIs: )/8 AsIs: (/11 HalfReuse: )/13 HalfReuse: (/12 } e.Indent#1/5/14 'r'/16 Tile{ HalfReuse: 'e'/0 HalfReuse: 'f'/4 }"alrts::reset_allocator();"/17 Tile{ HalfReuse: )/1 ]] }
    if (! refalrts::copy_evar(context[14], context[15], context[5], context[6]))
      return refalrts::cNoMemory;
    if( ! refalrts::alloc_char( context[16], 'r' ) )
      return refalrts::cNoMemory;
    if( ! refalrts::alloc_chars( context[17], context[18], "alrts::reset_allocator();", 25 ) )
      return refalrts::cNoMemory;
    refalrts::reinit_close_bracket( context[13] );
    refalrts::reinit_open_bracket( context[12] );
    refalrts::reinit_char( context[0], 'e' );
    refalrts::reinit_char( context[4], 'f' );
    refalrts::reinit_close_bracket( context[1] );
    refalrts::link_brackets( context[12], context[1] );
    refalrts::link_brackets( context[11], context[13] );
    refalrts::link_brackets( context[7], context[8] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    res = refalrts::splice_evar( res, context[17], context[18] );
    res = refalrts::splice_evar( res, context[0], context[4] );
    res = refalrts::splice_evar( res, context[16], context[16] );
    res = refalrts::splice_evar( res, context[14], context[15] );
    res = refalrts::splice_evar( res, context[7], context[12] );
    refalrts::use( res );
    return refalrts::FnResult(refalrts::cSuccess | (__LINE__ << 8));
  } while ( 0 );

  do {
    refalrts::start_sentence();
    //(E )(#CmdSetResS )
    // </0 & GenCommand/4 (/7 e.Indent#1/5 )/8 (/11 # CmdSetRes/13 s.Offset#1/14 )/12 >/1
    if( ! refalrts::ident_term(  & ident_CmdSetRes<int>::name, context[13] ) )
      continue;
    // closed e.Indent#1 as range 5
    context[66] = context[9];
    context[67] = context[10];
    if( ! refalrts::svar_left( context[14], context[66], context[67] ) )
      continue;
    if( ! refalrts::empty_seq( context[66], context[67] ) )
      continue;

    refalrts::reset_allocator();
    //TRASH: {REMOVED TILE}  {REMOVED TILE}  {REMOVED TILE}  {REMOVED TILE}  {REMOVED TILE} 
    //RESULT: Tile{ [[ } (/15 e.Indent#1/5/16 Tile{ AsIs: )/12 HalfReuse: (/1 } e.Indent#1/5/18"refalrts::Iter trash_prev = arg_begin->prev;"/20 )/22 (/23 e.Indent#1/5/24"refalrts::use(trash_prev);"/26 )/28 </29 & Fetch/30 Tile{ AsIs: s.Offset#1/14 } </31 Tile{ HalfReuse: & CreateClosure /0 Reuse: & lambda_GenCommand_0/4 AsIs: (/7 AsIs: e.Indent#1/5 AsIs: )/8 HalfReuse: >/11 HalfReuse: >/13 } Tile{ ]] }
    if( ! refalrts::alloc_open_bracket( context[15] ) )
      return refalrts::cNoMemory;
    if (! refalrts::copy_evar(context[16], context[17], context[5], context[6]))
      return refalrts::cNoMemory;
    if (! refalrts::copy_evar(context[18], context[19], context[5], context[6]))
      return refalrts::cNoMemory;
    if( ! refalrts::alloc_chars( context[20], context[21], "refalrts::Iter trash_prev = arg_begin->prev;", 44 ) )
      return refalrts::cNoMemory;
    if( ! refalrts::alloc_close_bracket( context[22] ) )
      return refalrts::cNoMemory;
    if( ! refalrts::alloc_open_bracket( context[23] ) )
      return refalrts::cNoMemory;
    if (! refalrts::copy_evar(context[24], context[25], context[5], context[6]))
      return refalrts::cNoMemory;
    if( ! refalrts::alloc_chars( context[26], context[27], "refalrts::use(trash_prev);", 26 ) )
      return refalrts::cNoMemory;
    if( ! refalrts::alloc_close_bracket( context[28] ) )
      return refalrts::cNoMemory;
    if( ! refalrts::alloc_open_call( context[29] ) )
      return refalrts::cNoMemory;
    if( ! refalrts::alloc_name( context[30], Fetch, "Fetch" ) )
      return refalrts::cNoMemory;
    if( ! refalrts::alloc_open_call( context[31] ) )
      return refalrts::cNoMemory;
    refalrts::reinit_open_bracket( context[1] );
    refalrts::reinit_name( context[0], refalrts::create_closure, "refalrts::create_closure" );
    refalrts::update_name( context[4], lambda_GenCommand_0, "lambda_GenCommand_0" );
    refalrts::reinit_close_call( context[11] );
    refalrts::reinit_close_call( context[13] );
    refalrts::push_stack( context[13] );
    refalrts::push_stack( context[29] );
    refalrts::push_stack( context[11] );
    refalrts::push_stack( context[31] );
    refalrts::link_brackets( context[7], context[8] );
    refalrts::link_brackets( context[23], context[28] );
    refalrts::link_brackets( context[1], context[22] );
    refalrts::link_brackets( context[15], context[12] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = arg_end->next;
    res = refalrts::splice_evar( res, context[0], context[13] );
    res = refalrts::splice_evar( res, context[31], context[31] );
    res = refalrts::splice_evar( res, context[14], context[14] );
    res = refalrts::splice_evar( res, context[20], context[30] );
    res = refalrts::splice_evar( res, context[18], context[19] );
    res = refalrts::splice_evar( res, context[12], context[1] );
    res = refalrts::splice_evar( res, context[16], context[17] );
    res = refalrts::splice_evar( res, context[15], context[15] );
    refalrts::use( res );
    return refalrts::FnResult(refalrts::cSuccess | (__LINE__ << 8));
  } while ( 0 );

  do {
    refalrts::start_sentence();
    //(E )(#CmdCopyVar'e'S S )
    // </0 & GenCommand/4 (/7 e.Indent#1/5 )/8 (/11 # CmdCopyVar/13 'e'/14 s.Target#1/15 s.Sample#1/16 )/12 >/1
    if( ! refalrts::ident_term(  & ident_CmdCopyVar<int>::name, context[13] ) )
      continue;
    context[66] = context[9];
    context[67] = context[10];
    context[14] = refalrts::char_left( 'e', context[66], context[67] );
    if( ! context[14] )
      continue;
    // closed e.Indent#1 as range 5
    if( ! refalrts::svar_left( context[15], context[66], context[67] ) )
      continue;
    if( ! refalrts::svar_left( context[16], context[66], context[67] ) )
      continue;
    if( ! refalrts::empty_seq( context[66], context[67] ) )
      continue;

    refalrts::reset_allocator();
    //TRASH: {REMOVED TILE}  {REMOVED TILE}  {REMOVED TILE}  {REMOVED TILE}  {REMOVED TILE} 
    //RESULT: Tile{ [[ } (/17 e.Indent#1/5/18 )/20 (/21 e.Indent#1/5/22"if (! refalrts::copy_evar("/24 </26 & ContextRange/27 Tile{ AsIs: s.Target#1/15 } >/28", "/29 </31 & ContextRange/32 Tile{ AsIs: s.Sample#1/16 HalfReuse: >/12 HalfReuse: ')'/1 } Tile{ HalfReuse: ')'/0 HalfReuse: )/4 AsIs: (/7 AsIs: e.Indent#1/5 HalfReuse: ' '/8 HalfReuse: ' '/11 HalfReuse: 'r'/13 AsIs: 'e'/14 }"turn refalrts::cNoMemory;"/33 )/35 Tile{ ]] }
    if( ! refalrts::alloc_open_bracket( context[17] ) )
      return refalrts::cNoMemory;
    if (! refalrts::copy_evar(context[18], context[19], context[5], context[6]))
      return refalrts::cNoMemory;
    if( ! refalrts::alloc_close_bracket( context[20] ) )
      return refalrts::cNoMemory;
    if( ! refalrts::alloc_open_bracket( context[21] ) )
      return refalrts::cNoMemory;
    if (! refalrts::copy_evar(context[22], context[23], context[5], context[6]))
      return refalrts::cNoMemory;
    if( ! refalrts::alloc_chars( context[24], context[25], "if (! refalrts::copy_evar(", 26 ) )
      return refalrts::cNoMemory;
    if( ! refalrts::alloc_open_call( context[26] ) )
      return refalrts::cNoMemory;
    if( ! refalrts::alloc_name( context[27], ContextRange, "ContextRange" ) )
      return refalrts::cNoMemory;
    if( ! refalrts::alloc_close_call( context[28] ) )
      return refalrts::cNoMemory;
    if( ! refalrts::alloc_chars( context[29], context[30], ", ", 2 ) )
      return refalrts::cNoMemory;
    if( ! refalrts::alloc_open_call( context[31] ) )
      return refalrts::cNoMemory;
    if( ! refalrts::alloc_name( context[32], ContextRange, "ContextRange" ) )
      return refalrts::cNoMemory;
    if( ! refalrts::alloc_chars( context[33], context[34], "turn refalrts::cNoMemory;", 25 ) )
      return refalrts::cNoMemory;
    if( ! refalrts::alloc_close_bracket( context[35] ) )
      return refalrts::cNoMemory;
    refalrts::reinit_close_call( context[12] );
    refalrts::reinit_char( context[1], ')' );
    refalrts::reinit_char( context[0], ')' );
    refalrts::reinit_close_bracket( context[4] );
    refalrts::reinit_char( context[8], ' ' );
    refalrts::reinit_char( context[11], ' ' );
    refalrts::reinit_char( context[13], 'r' );
    refalrts::link_brackets( context[7], context[35] );
    refalrts::link_brackets( context[21], context[4] );
    refalrts::push_stack( context[12] );
    refalrts::push_stack( context[31] );
    refalrts::push_stack( context[28] );
    refalrts::push_stack( context[26] );
    refalrts::link_brackets( context[17], context[20] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = arg_end->next;
    res = refalrts::splice_evar( res, context[33], context[35] );
    res = refalrts::splice_evar( res, context[0], context[14] );
    res = refalrts::splice_evar( res, context[16], context[1] );
    res = refalrts::splice_evar( res, context[28], context[32] );
    res = refalrts::splice_evar( res, context[15], context[15] );
    res = refalrts::splice_evar( res, context[17], context[27] );
    refalrts::use( res );
    return refalrts::FnResult(refalrts::cSuccess | (__LINE__ << 8));
  } while ( 0 );

  do {
    refalrts::start_sentence();
    //(E )(#CmdCopyVarS S S )
    // </0 & GenCommand/4 (/7 e.Indent#1/5 )/8 (/11 # CmdCopyVar/13 s.Mode#1/14 s.Target#1/15 s.Sample#1/16 )/12 >/1
    if( ! refalrts::ident_term(  & ident_CmdCopyVar<int>::name, context[13] ) )
      continue;
    // closed e.Indent#1 as range 5
    context[66] = context[9];
    context[67] = context[10];
    if( ! refalrts::svar_left( context[14], context[66], context[67] ) )
      continue;
    if( ! refalrts::svar_left( context[15], context[66], context[67] ) )
      continue;
    if( ! refalrts::svar_left( context[16], context[66], context[67] ) )
      continue;
    if( ! refalrts::empty_seq( context[66], context[67] ) )
      continue;

    refalrts::reset_allocator();
    //TRASH: {REMOVED TILE}  {REMOVED TILE}  {REMOVED TILE}  {REMOVED TILE}  s.Mode#1/14 {REMOVED TILE}  {REMOVED TILE}  {REMOVED TILE} 
    //RESULT: Tile{ [[ } Tile{ AsIs: (/7 AsIs: e.Indent#1/5 AsIs: )/8 AsIs: (/11 } e.Indent#1/5/17"if ("/19 Tile{ HalfReuse: '!'/13 }" refalrts::copy_stvar("/21 Tile{ AsIs: </0 Reuse: & ContextItem/4 } Tile{ AsIs: s.Target#1/15 } >/23", "/24 </26 & ContextItem/27 Tile{ AsIs: s.Sample#1/16 HalfReuse: >/12 HalfReuse: ')'/1 } ')'/28 )/29 (/30 e.Indent#1/5/31"  return refalrts::cNoMemory;"/33 )/35 Tile{ ]] }
    if (! refalrts::copy_evar(context[17], context[18], context[5], context[6]))
      return refalrts::cNoMemory;
    if( ! refalrts::alloc_chars( context[19], context[20], "if (", 4 ) )
      return refalrts::cNoMemory;
    if( ! refalrts::alloc_chars( context[21], context[22], " refalrts::copy_stvar(", 22 ) )
      return refalrts::cNoMemory;
    if( ! refalrts::alloc_close_call( context[23] ) )
      return refalrts::cNoMemory;
    if( ! refalrts::alloc_chars( context[24], context[25], ", ", 2 ) )
      return refalrts::cNoMemory;
    if( ! refalrts::alloc_open_call( context[26] ) )
      return refalrts::cNoMemory;
    if( ! refalrts::alloc_name( context[27], ContextItem, "ContextItem" ) )
      return refalrts::cNoMemory;
    if( ! refalrts::alloc_char( context[28], ')' ) )
      return refalrts::cNoMemory;
    if( ! refalrts::alloc_close_bracket( context[29] ) )
      return refalrts::cNoMemory;
    if( ! refalrts::alloc_open_bracket( context[30] ) )
      return refalrts::cNoMemory;
    if (! refalrts::copy_evar(context[31], context[32], context[5], context[6]))
      return refalrts::cNoMemory;
    if( ! refalrts::alloc_chars( context[33], context[34], "  return refalrts::cNoMemory;", 29 ) )
      return refalrts::cNoMemory;
    if( ! refalrts::alloc_close_bracket( context[35] ) )
      return refalrts::cNoMemory;
    refalrts::reinit_char( context[13], '!' );
    refalrts::update_name( context[4], ContextItem, "ContextItem" );
    refalrts::reinit_close_call( context[12] );
    refalrts::reinit_char( context[1], ')' );
    refalrts::link_brackets( context[30], context[35] );
    refalrts::link_brackets( context[11], context[29] );
    refalrts::push_stack( context[12] );
    refalrts::push_stack( context[26] );
    refalrts::push_stack( context[23] );
    refalrts::push_stack( context[0] );
    refalrts::link_brackets( context[7], context[8] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = arg_end->next;
    res = refalrts::splice_evar( res, context[28], context[35] );
    res = refalrts::splice_evar( res, context[16], context[1] );
    res = refalrts::splice_evar( res, context[23], context[27] );
    res = refalrts::splice_evar( res, context[15], context[15] );
    res = refalrts::splice_evar( res, context[0], context[4] );
    res = refalrts::splice_evar( res, context[21], context[22] );
    res = refalrts::splice_evar( res, context[13], context[13] );
    res = refalrts::splice_evar( res, context[19], context[20] );
    res = refalrts::splice_evar( res, context[17], context[18] );
    res = refalrts::splice_evar( res, context[7], context[11] );
    refalrts::use( res );
    refalrts::splice_to_freelist_open( trash_prev, res );
    return refalrts::FnResult(refalrts::cSuccess | (__LINE__ << 8));
  } while ( 0 );

  do {
    refalrts::start_sentence();
    //(E )(#CmdReinitSVarS S )
    // </0 & GenCommand/4 (/7 e.Indent#1/5 )/8 (/11 # CmdReinitSVar/13 s.Offset#1/14 s.Sample#1/15 )/12 >/1
    if( ! refalrts::ident_term(  & ident_CmdReinitSVar<int>::name, context[13] ) )
      continue;
    // closed e.Indent#1 as range 5
    context[66] = context[9];
    context[67] = context[10];
    if( ! refalrts::svar_left( context[14], context[66], context[67] ) )
      continue;
    if( ! refalrts::svar_left( context[15], context[66], context[67] ) )
      continue;
    if( ! refalrts::empty_seq( context[66], context[67] ) )
      continue;

    refalrts::reset_allocator();
    //TRASH: {REMOVED TILE}  {REMOVED TILE}  {REMOVED TILE}  {REMOVED TILE}  {REMOVED TILE}  {REMOVED TILE}  {REMOVED TILE} 
    //RESULT: Tile{ [[ } Tile{ AsIs: (/7 AsIs: e.Indent#1/5 AsIs: )/8 AsIs: (/11 } e.Indent#1/5/16"ref"/18 Tile{ HalfReuse: 'a'/13 }"lrts::reinit_svar( "/20 Tile{ AsIs: </0 Reuse: & ContextItem/4 } Tile{ AsIs: s.Offset#1/14 } >/22", "/23 </25 & ContextItem/26 Tile{ AsIs: s.Sample#1/15 HalfReuse: >/12 HalfReuse: ' '/1 }");"/27 )/29 Tile{ ]] }
    if (! refalrts::copy_evar(context[16], context[17], context[5], context[6]))
      return refalrts::cNoMemory;
    if( ! refalrts::alloc_chars( context[18], context[19], "ref", 3 ) )
      return refalrts::cNoMemory;
    if( ! refalrts::alloc_chars( context[20], context[21], "lrts::reinit_svar( ", 19 ) )
      return refalrts::cNoMemory;
    if( ! refalrts::alloc_close_call( context[22] ) )
      return refalrts::cNoMemory;
    if( ! refalrts::alloc_chars( context[23], context[24], ", ", 2 ) )
      return refalrts::cNoMemory;
    if( ! refalrts::alloc_open_call( context[25] ) )
      return refalrts::cNoMemory;
    if( ! refalrts::alloc_name( context[26], ContextItem, "ContextItem" ) )
      return refalrts::cNoMemory;
    if( ! refalrts::alloc_chars( context[27], context[28], ");", 2 ) )
      return refalrts::cNoMemory;
    if( ! refalrts::alloc_close_bracket( context[29] ) )
      return refalrts::cNoMemory;
    refalrts::reinit_char( context[13], 'a' );
    refalrts::update_name( context[4], ContextItem, "ContextItem" );
    refalrts::reinit_close_call( context[12] );
    refalrts::reinit_char( context[1], ' ' );
    refalrts::link_brackets( context[11], context[29] );
    refalrts::push_stack( context[12] );
    refalrts::push_stack( context[25] );
    refalrts::push_stack( context[22] );
    refalrts::push_stack( context[0] );
    refalrts::link_brackets( context[7], context[8] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = arg_end->next;
    res = refalrts::splice_evar( res, context[27], context[29] );
    res = refalrts::splice_evar( res, context[15], context[1] );
    res = refalrts::splice_evar( res, context[22], context[26] );
    res = refalrts::splice_evar( res, context[14], context[14] );
    res = refalrts::splice_evar( res, context[0], context[4] );
    res = refalrts::splice_evar( res, context[20], context[21] );
    res = refalrts::splice_evar( res, context[13], context[13] );
    res = refalrts::splice_evar( res, context[18], context[19] );
    res = refalrts::splice_evar( res, context[16], context[17] );
    res = refalrts::splice_evar( res, context[7], context[11] );
    refalrts::use( res );
    return refalrts::FnResult(refalrts::cSuccess | (__LINE__ << 8));
  } while ( 0 );

  do {
    refalrts::start_sentence();
    //(E )(#CmdAllocateElemS #ElStringE )
    // </0 & GenCommand/4 (/7 e.Indent#1/5 )/8 (/11 # CmdAllocateElem/13 s.ElemNumber#1/14 # ElString/15 e.String#1/9 )/12 >/1
    if( ! refalrts::ident_term(  & ident_CmdAllocateElem<int>::name, context[13] ) )
      continue;
    // closed e.Indent#1 as range 5
    context[66] = context[9];
    context[67] = context[10];
    if( ! refalrts::svar_left( context[14], context[66], context[67] ) )
      continue;
    context[15] = refalrts::ident_left(  & ident_ElString<int>::name, context[66], context[67] );
    if( ! context[15] )
      continue;
    // closed e.String#1 as range 66(9)

    refalrts::reset_allocator();
    //TRASH: {REMOVED TILE}  {REMOVED TILE}  {REMOVED TILE}  {REMOVED TILE}  {REMOVED TILE}  {REMOVED TILE} 
    //RESULT: Tile{ [[ } Tile{ AsIs: (/7 AsIs: e.Indent#1/5 AsIs: )/8 AsIs: (/11 } e.Indent#1/5/16"if( ! refalrts::alloc_chars( "/18 Tile{ AsIs: </0 Reuse: & ContextItem/4 } s.ElemNumber#1/14/20 >/21", "/22 </24 & ContextItem/25 </26 Tile{ HalfReuse: & Inc/13 AsIs: s.ElemNumber#1/14 } >/27 >/28", "/29 </31 Tile{ HalfReuse: & PrintString/15 AsIs: e.String#1/66(9) HalfReuse: >/12 HalfReuse: ' '/1 }") )"/32 )/34 (/35 e.Indent#1/5/36"  return refalrts::cNoMemory;"/38 )/40 Tile{ ]] }
    if (! refalrts::copy_evar(context[16], context[17], context[5], context[6]))
      return refalrts::cNoMemory;
    if( ! refalrts::alloc_chars( context[18], context[19], "if( ! refalrts::alloc_chars( ", 29 ) )
      return refalrts::cNoMemory;
    if (! refalrts::copy_stvar(context[20], context[14]))
      return refalrts::cNoMemory;
    if( ! refalrts::alloc_close_call( context[21] ) )
      return refalrts::cNoMemory;
    if( ! refalrts::alloc_chars( context[22], context[23], ", ", 2 ) )
      return refalrts::cNoMemory;
    if( ! refalrts::alloc_open_call( context[24] ) )
      return refalrts::cNoMemory;
    if( ! refalrts::alloc_name( context[25], ContextItem, "ContextItem" ) )
      return refalrts::cNoMemory;
    if( ! refalrts::alloc_open_call( context[26] ) )
      return refalrts::cNoMemory;
    if( ! refalrts::alloc_close_call( context[27] ) )
      return refalrts::cNoMemory;
    if( ! refalrts::alloc_close_call( context[28] ) )
      return refalrts::cNoMemory;
    if( ! refalrts::alloc_chars( context[29], context[30], ", ", 2 ) )
      return refalrts::cNoMemory;
    if( ! refalrts::alloc_open_call( context[31] ) )
      return refalrts::cNoMemory;
    if( ! refalrts::alloc_chars( context[32], context[33], ") )", 3 ) )
      return refalrts::cNoMemory;
    if( ! refalrts::alloc_close_bracket( context[34] ) )
      return refalrts::cNoMemory;
    if( ! refalrts::alloc_open_bracket( context[35] ) )
      return refalrts::cNoMemory;
    if (! refalrts::copy_evar(context[36], context[37], context[5], context[6]))
      return refalrts::cNoMemory;
    if( ! refalrts::alloc_chars( context[38], context[39], "  return refalrts::cNoMemory;", 29 ) )
      return refalrts::cNoMemory;
    if( ! refalrts::alloc_close_bracket( context[40] ) )
      return refalrts::cNoMemory;
    refalrts::update_name( context[4], ContextItem, "ContextItem" );
    refalrts::reinit_name( context[13], Inc, "Inc" );
    refalrts::reinit_name( context[15], PrintString, "PrintString" );
    refalrts::reinit_close_call( context[12] );
    refalrts::reinit_char( context[1], ' ' );
    refalrts::link_brackets( context[35], context[40] );
    refalrts::link_brackets( context[11], context[34] );
    refalrts::push_stack( context[12] );
    refalrts::push_stack( context[31] );
    refalrts::push_stack( context[28] );
    refalrts::push_stack( context[24] );
    refalrts::push_stack( context[27] );
    refalrts::push_stack( context[26] );
    refalrts::push_stack( context[21] );
    refalrts::push_stack( context[0] );
    refalrts::link_brackets( context[7], context[8] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = arg_end->next;
    res = refalrts::splice_evar( res, context[32], context[40] );
    res = refalrts::splice_evar( res, context[15], context[1] );
    res = refalrts::splice_evar( res, context[27], context[31] );
    res = refalrts::splice_evar( res, context[13], context[14] );
    res = refalrts::splice_evar( res, context[20], context[26] );
    res = refalrts::splice_evar( res, context[0], context[4] );
    res = refalrts::splice_evar( res, context[18], context[19] );
    res = refalrts::splice_evar( res, context[16], context[17] );
    res = refalrts::splice_evar( res, context[7], context[11] );
    refalrts::use( res );
    return refalrts::FnResult(refalrts::cSuccess | (__LINE__ << 8));
  } while ( 0 );

  do {
    refalrts::start_sentence();
    //(E )(#CmdAllocateElemS E )
    // </0 & GenCommand/4 (/7 e.Indent#1/5 )/8 (/11 # CmdAllocateElem/13 s.ElemNumber#1/14 e.ElemInfo#1/9 )/12 >/1
    if( ! refalrts::ident_term(  & ident_CmdAllocateElem<int>::name, context[13] ) )
      continue;
    // closed e.Indent#1 as range 5
    context[66] = context[9];
    context[67] = context[10];
    if( ! refalrts::svar_left( context[14], context[66], context[67] ) )
      continue;
    // closed e.ElemInfo#1 as range 66(9)

    refalrts::reset_allocator();
    //TRASH: {REMOVED TILE}  {REMOVED TILE}  {REMOVED TILE}  {REMOVED TILE}  {REMOVED TILE} 
    //RESULT: Tile{ [[ } (/15 e.Indent#1/5/16 Tile{ HalfReuse: )/1 } Tile{ AsIs: </0 Reuse: & PrintCreateElem/4 AsIs: (/7 AsIs: e.Indent#1/5 AsIs: )/8 AsIs: (/11 HalfReuse: 'a'/13 }"lloc"/18 )/20 Tile{ AsIs: s.ElemNumber#1/14 AsIs: e.ElemInfo#1/66(9) HalfReuse: >/12 } Tile{ ]] }
    if( ! refalrts::alloc_open_bracket( context[15] ) )
      return refalrts::cNoMemory;
    if (! refalrts::copy_evar(context[16], context[17], context[5], context[6]))
      return refalrts::cNoMemory;
    if( ! refalrts::alloc_chars( context[18], context[19], "lloc", 4 ) )
      return refalrts::cNoMemory;
    if( ! refalrts::alloc_close_bracket( context[20] ) )
      return refalrts::cNoMemory;
    refalrts::reinit_close_bracket( context[1] );
    refalrts::update_name( context[4], PrintCreateElem, "PrintCreateElem" );
    refalrts::reinit_char( context[13], 'a' );
    refalrts::reinit_close_call( context[12] );
    refalrts::push_stack( context[12] );
    refalrts::push_stack( context[0] );
    refalrts::link_brackets( context[11], context[20] );
    refalrts::link_brackets( context[7], context[8] );
    refalrts::link_brackets( context[15], context[1] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = arg_end->next;
    res = refalrts::splice_evar( res, context[14], context[12] );
    res = refalrts::splice_evar( res, context[18], context[20] );
    res = refalrts::splice_evar( res, context[0], context[13] );
    res = refalrts::splice_evar( res, context[1], context[1] );
    res = refalrts::splice_evar( res, context[16], context[17] );
    res = refalrts::splice_evar( res, context[15], context[15] );
    refalrts::use( res );
    return refalrts::FnResult(refalrts::cSuccess | (__LINE__ << 8));
  } while ( 0 );

  do {
    refalrts::start_sentence();
    //(E )(#CmdReinitElemS E )
    // </0 & GenCommand/4 (/7 e.Indent#1/5 )/8 (/11 # CmdReinitElem/13 s.ElemNumber#1/14 e.ElemInfo#1/9 )/12 >/1
    if( ! refalrts::ident_term(  & ident_CmdReinitElem<int>::name, context[13] ) )
      continue;
    // closed e.Indent#1 as range 5
    context[66] = context[9];
    context[67] = context[10];
    if( ! refalrts::svar_left( context[14], context[66], context[67] ) )
      continue;
    // closed e.ElemInfo#1 as range 66(9)

    refalrts::reset_allocator();
    //TRASH: {REMOVED TILE}  {REMOVED TILE}  {REMOVED TILE}  {REMOVED TILE}  {REMOVED TILE} 
    //RESULT: Tile{ [[ } (/15 e.Indent#1/5/16 Tile{ HalfReuse: )/1 } Tile{ AsIs: </0 Reuse: & PrintCreateElem/4 AsIs: (/7 AsIs: e.Indent#1/5 AsIs: )/8 AsIs: (/11 HalfReuse: 'r'/13 }"einit"/18 )/20 Tile{ AsIs: s.ElemNumber#1/14 AsIs: e.ElemInfo#1/66(9) HalfReuse: >/12 } Tile{ ]] }
    if( ! refalrts::alloc_open_bracket( context[15] ) )
      return refalrts::cNoMemory;
    if (! refalrts::copy_evar(context[16], context[17], context[5], context[6]))
      return refalrts::cNoMemory;
    if( ! refalrts::alloc_chars( context[18], context[19], "einit", 5 ) )
      return refalrts::cNoMemory;
    if( ! refalrts::alloc_close_bracket( context[20] ) )
      return refalrts::cNoMemory;
    refalrts::reinit_close_bracket( context[1] );
    refalrts::update_name( context[4], PrintCreateElem, "PrintCreateElem" );
    refalrts::reinit_char( context[13], 'r' );
    refalrts::reinit_close_call( context[12] );
    refalrts::push_stack( context[12] );
    refalrts::push_stack( context[0] );
    refalrts::link_brackets( context[11], context[20] );
    refalrts::link_brackets( context[7], context[8] );
    refalrts::link_brackets( context[15], context[1] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = arg_end->next;
    res = refalrts::splice_evar( res, context[14], context[12] );
    res = refalrts::splice_evar( res, context[18], context[20] );
    res = refalrts::splice_evar( res, context[0], context[13] );
    res = refalrts::splice_evar( res, context[1], context[1] );
    res = refalrts::splice_evar( res, context[16], context[17] );
    res = refalrts::splice_evar( res, context[15], context[15] );
    refalrts::use( res );
    return refalrts::FnResult(refalrts::cSuccess | (__LINE__ << 8));
  } while ( 0 );

  do {
    refalrts::start_sentence();
    //(E )(#CmdUpdateElemS E )
    // </0 & GenCommand/4 (/7 e.Indent#1/5 )/8 (/11 # CmdUpdateElem/13 s.ElemNumber#1/14 e.ElemInfo#1/9 )/12 >/1
    if( ! refalrts::ident_term(  & ident_CmdUpdateElem<int>::name, context[13] ) )
      continue;
    // closed e.Indent#1 as range 5
    context[66] = context[9];
    context[67] = context[10];
    if( ! refalrts::svar_left( context[14], context[66], context[67] ) )
      continue;
    // closed e.ElemInfo#1 as range 66(9)

    refalrts::reset_allocator();
    //TRASH: {REMOVED TILE}  {REMOVED TILE}  {REMOVED TILE}  {REMOVED TILE}  {REMOVED TILE} 
    //RESULT: Tile{ [[ } (/15 e.Indent#1/5/16 Tile{ HalfReuse: )/1 } Tile{ AsIs: </0 Reuse: & PrintCreateElem/4 AsIs: (/7 AsIs: e.Indent#1/5 AsIs: )/8 AsIs: (/11 HalfReuse: 'u'/13 }"pdate"/18 )/20 Tile{ AsIs: s.ElemNumber#1/14 AsIs: e.ElemInfo#1/66(9) HalfReuse: >/12 } Tile{ ]] }
    if( ! refalrts::alloc_open_bracket( context[15] ) )
      return refalrts::cNoMemory;
    if (! refalrts::copy_evar(context[16], context[17], context[5], context[6]))
      return refalrts::cNoMemory;
    if( ! refalrts::alloc_chars( context[18], context[19], "pdate", 5 ) )
      return refalrts::cNoMemory;
    if( ! refalrts::alloc_close_bracket( context[20] ) )
      return refalrts::cNoMemory;
    refalrts::reinit_close_bracket( context[1] );
    refalrts::update_name( context[4], PrintCreateElem, "PrintCreateElem" );
    refalrts::reinit_char( context[13], 'u' );
    refalrts::reinit_close_call( context[12] );
    refalrts::push_stack( context[12] );
    refalrts::push_stack( context[0] );
    refalrts::link_brackets( context[11], context[20] );
    refalrts::link_brackets( context[7], context[8] );
    refalrts::link_brackets( context[15], context[1] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = arg_end->next;
    res = refalrts::splice_evar( res, context[14], context[12] );
    res = refalrts::splice_evar( res, context[18], context[20] );
    res = refalrts::splice_evar( res, context[0], context[13] );
    res = refalrts::splice_evar( res, context[1], context[1] );
    res = refalrts::splice_evar( res, context[16], context[17] );
    res = refalrts::splice_evar( res, context[15], context[15] );
    refalrts::use( res );
    return refalrts::FnResult(refalrts::cSuccess | (__LINE__ << 8));
  } while ( 0 );

  do {
    refalrts::start_sentence();
    //(E )(#CmdLinkBracketsS S )
    // </0 & GenCommand/4 (/7 e.Indent#1/5 )/8 (/11 # CmdLinkBrackets/13 s.Left#1/14 s.Right#1/15 )/12 >/1
    if( ! refalrts::ident_term(  & ident_CmdLinkBrackets<int>::name, context[13] ) )
      continue;
    // closed e.Indent#1 as range 5
    context[66] = context[9];
    context[67] = context[10];
    if( ! refalrts::svar_left( context[14], context[66], context[67] ) )
      continue;
    if( ! refalrts::svar_left( context[15], context[66], context[67] ) )
      continue;
    if( ! refalrts::empty_seq( context[66], context[67] ) )
      continue;

    refalrts::reset_allocator();
    //TRASH: {REMOVED TILE}  {REMOVED TILE}  {REMOVED TILE}  {REMOVED TILE}  {REMOVED TILE}  {REMOVED TILE}  {REMOVED TILE} 
    //RESULT: Tile{ [[ } Tile{ AsIs: (/7 AsIs: e.Indent#1/5 AsIs: )/8 AsIs: (/11 } e.Indent#1/5/16"ref"/18 Tile{ HalfReuse: 'a'/13 }"lrts::link_brackets( "/20 Tile{ AsIs: </0 Reuse: & ContextItem/4 } Tile{ AsIs: s.Left#1/14 } >/22", "/23 </25 & ContextItem/26 Tile{ AsIs: s.Right#1/15 HalfReuse: >/12 HalfReuse: ' '/1 }");"/27 )/29 Tile{ ]] }
    if (! refalrts::copy_evar(context[16], context[17], context[5], context[6]))
      return refalrts::cNoMemory;
    if( ! refalrts::alloc_chars( context[18], context[19], "ref", 3 ) )
      return refalrts::cNoMemory;
    if( ! refalrts::alloc_chars( context[20], context[21], "lrts::link_brackets( ", 21 ) )
      return refalrts::cNoMemory;
    if( ! refalrts::alloc_close_call( context[22] ) )
      return refalrts::cNoMemory;
    if( ! refalrts::alloc_chars( context[23], context[24], ", ", 2 ) )
      return refalrts::cNoMemory;
    if( ! refalrts::alloc_open_call( context[25] ) )
      return refalrts::cNoMemory;
    if( ! refalrts::alloc_name( context[26], ContextItem, "ContextItem" ) )
      return refalrts::cNoMemory;
    if( ! refalrts::alloc_chars( context[27], context[28], ");", 2 ) )
      return refalrts::cNoMemory;
    if( ! refalrts::alloc_close_bracket( context[29] ) )
      return refalrts::cNoMemory;
    refalrts::reinit_char( context[13], 'a' );
    refalrts::update_name( context[4], ContextItem, "ContextItem" );
    refalrts::reinit_close_call( context[12] );
    refalrts::reinit_char( context[1], ' ' );
    refalrts::link_brackets( context[11], context[29] );
    refalrts::push_stack( context[12] );
    refalrts::push_stack( context[25] );
    refalrts::push_stack( context[22] );
    refalrts::push_stack( context[0] );
    refalrts::link_brackets( context[7], context[8] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = arg_end->next;
    res = refalrts::splice_evar( res, context[27], context[29] );
    res = refalrts::splice_evar( res, context[15], context[1] );
    res = refalrts::splice_evar( res, context[22], context[26] );
    res = refalrts::splice_evar( res, context[14], context[14] );
    res = refalrts::splice_evar( res, context[0], context[4] );
    res = refalrts::splice_evar( res, context[20], context[21] );
    res = refalrts::splice_evar( res, context[13], context[13] );
    res = refalrts::splice_evar( res, context[18], context[19] );
    res = refalrts::splice_evar( res, context[16], context[17] );
    res = refalrts::splice_evar( res, context[7], context[11] );
    refalrts::use( res );
    return refalrts::FnResult(refalrts::cSuccess | (__LINE__ << 8));
  } while ( 0 );

  do {
    refalrts::start_sentence();
    //(E )(#CmdPushStackS )
    // </0 & GenCommand/4 (/7 e.Indent#1/5 )/8 (/11 # CmdPushStack/13 s.ElemNumber#1/14 )/12 >/1
    if( ! refalrts::ident_term(  & ident_CmdPushStack<int>::name, context[13] ) )
      continue;
    // closed e.Indent#1 as range 5
    context[66] = context[9];
    context[67] = context[10];
    if( ! refalrts::svar_left( context[14], context[66], context[67] ) )
      continue;
    if( ! refalrts::empty_seq( context[66], context[67] ) )
      continue;

    refalrts::reset_allocator();
    //TRASH: {REMOVED TILE}  {REMOVED TILE}  {REMOVED TILE}  {REMOVED TILE}  {REMOVED TILE}  {REMOVED TILE} 
    //RESULT: Tile{ [[ } Tile{ AsIs: (/7 AsIs: e.Indent#1/5 AsIs: )/8 AsIs: (/11 } e.Indent#1/5/15 Tile{ HalfReuse: 'r'/4 }"efalrts::push_stack( "/17 Tile{ AsIs: </0 } Tile{ HalfReuse: & ContextItem/13 AsIs: s.ElemNumber#1/14 HalfReuse: >/12 HalfReuse: ' '/1 }");"/19 )/21 Tile{ ]] }
    if (! refalrts::copy_evar(context[15], context[16], context[5], context[6]))
      return refalrts::cNoMemory;
    if( ! refalrts::alloc_chars( context[17], context[18], "efalrts::push_stack( ", 21 ) )
      return refalrts::cNoMemory;
    if( ! refalrts::alloc_chars( context[19], context[20], ");", 2 ) )
      return refalrts::cNoMemory;
    if( ! refalrts::alloc_close_bracket( context[21] ) )
      return refalrts::cNoMemory;
    refalrts::reinit_char( context[4], 'r' );
    refalrts::reinit_name( context[13], ContextItem, "ContextItem" );
    refalrts::reinit_close_call( context[12] );
    refalrts::reinit_char( context[1], ' ' );
    refalrts::link_brackets( context[11], context[21] );
    refalrts::push_stack( context[12] );
    refalrts::push_stack( context[0] );
    refalrts::link_brackets( context[7], context[8] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = arg_end->next;
    res = refalrts::splice_evar( res, context[19], context[21] );
    res = refalrts::splice_evar( res, context[13], context[1] );
    res = refalrts::splice_evar( res, context[0], context[0] );
    res = refalrts::splice_evar( res, context[17], context[18] );
    res = refalrts::splice_evar( res, context[4], context[4] );
    res = refalrts::splice_evar( res, context[15], context[16] );
    res = refalrts::splice_evar( res, context[7], context[11] );
    refalrts::use( res );
    return refalrts::FnResult(refalrts::cSuccess | (__LINE__ << 8));
  } while ( 0 );

  do {
    refalrts::start_sentence();
    //(E )(#CmdInsertElemS )
    // </0 & GenCommand/4 (/7 e.Indent#1/5 )/8 (/11 # CmdInsertElem/13 s.ElemNumber#1/14 )/12 >/1
    if( ! refalrts::ident_term(  & ident_CmdInsertElem<int>::name, context[13] ) )
      continue;
    // closed e.Indent#1 as range 5
    context[66] = context[9];
    context[67] = context[10];
    if( ! refalrts::svar_left( context[14], context[66], context[67] ) )
      continue;
    if( ! refalrts::empty_seq( context[66], context[67] ) )
      continue;

    refalrts::reset_allocator();
    //TRASH: {REMOVED TILE}  {REMOVED TILE}  {REMOVED TILE}  {REMOVED TILE}  {REMOVED TILE}  {REMOVED TILE} 
    //RESULT: Tile{ [[ } Tile{ AsIs: (/7 AsIs: e.Indent#1/5 AsIs: )/8 AsIs: (/11 } e.Indent#1/5/15 Tile{ HalfReuse: 'r'/4 }"es = refalrts::splice_elem( res, "/17 Tile{ AsIs: </0 } Tile{ HalfReuse: & ContextItem/13 AsIs: s.ElemNumber#1/14 HalfReuse: >/12 HalfReuse: ' '/1 }");"/19 )/21 Tile{ ]] }
    if (! refalrts::copy_evar(context[15], context[16], context[5], context[6]))
      return refalrts::cNoMemory;
    if( ! refalrts::alloc_chars( context[17], context[18], "es = refalrts::splice_elem( res, ", 33 ) )
      return refalrts::cNoMemory;
    if( ! refalrts::alloc_chars( context[19], context[20], ");", 2 ) )
      return refalrts::cNoMemory;
    if( ! refalrts::alloc_close_bracket( context[21] ) )
      return refalrts::cNoMemory;
    refalrts::reinit_char( context[4], 'r' );
    refalrts::reinit_name( context[13], ContextItem, "ContextItem" );
    refalrts::reinit_close_call( context[12] );
    refalrts::reinit_char( context[1], ' ' );
    refalrts::link_brackets( context[11], context[21] );
    refalrts::push_stack( context[12] );
    refalrts::push_stack( context[0] );
    refalrts::link_brackets( context[7], context[8] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = arg_end->next;
    res = refalrts::splice_evar( res, context[19], context[21] );
    res = refalrts::splice_evar( res, context[13], context[1] );
    res = refalrts::splice_evar( res, context[0], context[0] );
    res = refalrts::splice_evar( res, context[17], context[18] );
    res = refalrts::splice_evar( res, context[4], context[4] );
    res = refalrts::splice_evar( res, context[15], context[16] );
    res = refalrts::splice_evar( res, context[7], context[11] );
    refalrts::use( res );
    return refalrts::FnResult(refalrts::cSuccess | (__LINE__ << 8));
  } while ( 0 );

  do {
    refalrts::start_sentence();
    //(E )(#CmdInsertVar'e'S )
    // </0 & GenCommand/4 (/7 e.Indent#1/5 )/8 (/11 # CmdInsertVar/13 'e'/14 s.Number#1/15 )/12 >/1
    if( ! refalrts::ident_term(  & ident_CmdInsertVar<int>::name, context[13] ) )
      continue;
    context[66] = context[9];
    context[67] = context[10];
    context[14] = refalrts::char_left( 'e', context[66], context[67] );
    if( ! context[14] )
      continue;
    // closed e.Indent#1 as range 5
    if( ! refalrts::svar_left( context[15], context[66], context[67] ) )
      continue;
    if( ! refalrts::empty_seq( context[66], context[67] ) )
      continue;

    refalrts::reset_allocator();
    //TRASH: {REMOVED TILE}  {REMOVED TILE}  {REMOVED TILE}  {REMOVED TILE}  {REMOVED TILE} 
    //RESULT: Tile{ [[ } Tile{ AsIs: (/7 AsIs: e.Indent#1/5 AsIs: )/8 AsIs: (/11 } e.Indent#1/5/16 'r'/18 Tile{ HalfReuse: 'e'/0 HalfReuse: 's'/4 }" = refalrts::splice_evar( res, "/19 Tile{ HalfReuse: </13 HalfReuse: & ContextRange/14 AsIs: s.Number#1/15 HalfReuse: >/12 HalfReuse: ' '/1 }");"/21 )/23 Tile{ ]] }
    if (! refalrts::copy_evar(context[16], context[17], context[5], context[6]))
      return refalrts::cNoMemory;
    if( ! refalrts::alloc_char( context[18], 'r' ) )
      return refalrts::cNoMemory;
    if( ! refalrts::alloc_chars( context[19], context[20], " = refalrts::splice_evar( res, ", 31 ) )
      return refalrts::cNoMemory;
    if( ! refalrts::alloc_chars( context[21], context[22], ");", 2 ) )
      return refalrts::cNoMemory;
    if( ! refalrts::alloc_close_bracket( context[23] ) )
      return refalrts::cNoMemory;
    refalrts::reinit_char( context[0], 'e' );
    refalrts::reinit_char( context[4], 's' );
    refalrts::reinit_open_call( context[13] );
    refalrts::reinit_name( context[14], ContextRange, "ContextRange" );
    refalrts::reinit_close_call( context[12] );
    refalrts::reinit_char( context[1], ' ' );
    refalrts::link_brackets( context[11], context[23] );
    refalrts::push_stack( context[12] );
    refalrts::push_stack( context[13] );
    refalrts::link_brackets( context[7], context[8] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = arg_end->next;
    res = refalrts::splice_evar( res, context[21], context[23] );
    res = refalrts::splice_evar( res, context[13], context[1] );
    res = refalrts::splice_evar( res, context[19], context[20] );
    res = refalrts::splice_evar( res, context[0], context[4] );
    res = refalrts::splice_evar( res, context[18], context[18] );
    res = refalrts::splice_evar( res, context[16], context[17] );
    res = refalrts::splice_evar( res, context[7], context[11] );
    refalrts::use( res );
    return refalrts::FnResult(refalrts::cSuccess | (__LINE__ << 8));
  } while ( 0 );

  do {
    refalrts::start_sentence();
    //(E )(#CmdInsertVarS S )
    // </0 & GenCommand/4 (/7 e.Indent#1/5 )/8 (/11 # CmdInsertVar/13 s.Mode#1/14 s.Number#1/15 )/12 >/1
    if( ! refalrts::ident_term(  & ident_CmdInsertVar<int>::name, context[13] ) )
      continue;
    // closed e.Indent#1 as range 5
    context[66] = context[9];
    context[67] = context[10];
    if( ! refalrts::svar_left( context[14], context[66], context[67] ) )
      continue;
    if( ! refalrts::svar_left( context[15], context[66], context[67] ) )
      continue;
    if( ! refalrts::empty_seq( context[66], context[67] ) )
      continue;

    refalrts::reset_allocator();
    //TRASH: {REMOVED TILE}  {REMOVED TILE}  {REMOVED TILE}  {REMOVED TILE}  s.Mode#1/14 {REMOVED TILE}  {REMOVED TILE} 
    //RESULT: Tile{ [[ } Tile{ AsIs: (/7 AsIs: e.Indent#1/5 AsIs: )/8 AsIs: (/11 } e.Indent#1/5/16"res"/18 Tile{ HalfReuse: ' '/13 }"= refalrts::splice_stvar( res, "/20 Tile{ AsIs: </0 Reuse: & ContextItem/4 } Tile{ AsIs: s.Number#1/15 HalfReuse: >/12 HalfReuse: ' '/1 }");"/22 )/24 Tile{ ]] }
    if (! refalrts::copy_evar(context[16], context[17], context[5], context[6]))
      return refalrts::cNoMemory;
    if( ! refalrts::alloc_chars( context[18], context[19], "res", 3 ) )
      return refalrts::cNoMemory;
    if( ! refalrts::alloc_chars( context[20], context[21], "= refalrts::splice_stvar( res, ", 31 ) )
      return refalrts::cNoMemory;
    if( ! refalrts::alloc_chars( context[22], context[23], ");", 2 ) )
      return refalrts::cNoMemory;
    if( ! refalrts::alloc_close_bracket( context[24] ) )
      return refalrts::cNoMemory;
    refalrts::reinit_char( context[13], ' ' );
    refalrts::update_name( context[4], ContextItem, "ContextItem" );
    refalrts::reinit_close_call( context[12] );
    refalrts::reinit_char( context[1], ' ' );
    refalrts::link_brackets( context[11], context[24] );
    refalrts::push_stack( context[12] );
    refalrts::push_stack( context[0] );
    refalrts::link_brackets( context[7], context[8] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = arg_end->next;
    res = refalrts::splice_evar( res, context[22], context[24] );
    res = refalrts::splice_evar( res, context[15], context[1] );
    res = refalrts::splice_evar( res, context[0], context[4] );
    res = refalrts::splice_evar( res, context[20], context[21] );
    res = refalrts::splice_evar( res, context[13], context[13] );
    res = refalrts::splice_evar( res, context[18], context[19] );
    res = refalrts::splice_evar( res, context[16], context[17] );
    res = refalrts::splice_evar( res, context[7], context[11] );
    refalrts::use( res );
    refalrts::splice_to_freelist_open( trash_prev, res );
    return refalrts::FnResult(refalrts::cSuccess | (__LINE__ << 8));
  } while ( 0 );

  do {
    refalrts::start_sentence();
    //(E )(#CmdInsertRangeS )
    // </0 & GenCommand/4 (/7 e.Indent#1/5 )/8 (/11 # CmdInsertRange/13 s.Number#1/14 )/12 >/1
    if( ! refalrts::ident_term(  & ident_CmdInsertRange<int>::name, context[13] ) )
      continue;
    // closed e.Indent#1 as range 5
    context[66] = context[9];
    context[67] = context[10];
    if( ! refalrts::svar_left( context[14], context[66], context[67] ) )
      continue;
    if( ! refalrts::empty_seq( context[66], context[67] ) )
      continue;

    refalrts::reset_allocator();
    //TRASH: {REMOVED TILE}  {REMOVED TILE}  {REMOVED TILE}  {REMOVED TILE}  {REMOVED TILE} 
    //RESULT: Tile{ [[ } Tile{ AsIs: (/7 AsIs: e.Indent#1/5 AsIs: )/8 AsIs: (/11 } e.Indent#1/5/15"res = refalrts::splice_evar( res, "/17 Tile{ AsIs: </0 Reuse: & ContextItem/4 } s.Number#1/14/19 >/20", "/21 </23 & ContextItem/24 </25 Tile{ HalfReuse: & Inc/13 AsIs: s.Number#1/14 HalfReuse: >/12 AsIs: >/1 }" );"/26 )/28 Tile{ ]] }
    if (! refalrts::copy_evar(context[15], context[16], context[5], context[6]))
      return refalrts::cNoMemory;
    if( ! refalrts::alloc_chars( context[17], context[18], "res = refalrts::splice_evar( res, ", 34 ) )
      return refalrts::cNoMemory;
    if (! refalrts::copy_stvar(context[19], context[14]))
      return refalrts::cNoMemory;
    if( ! refalrts::alloc_close_call( context[20] ) )
      return refalrts::cNoMemory;
    if( ! refalrts::alloc_chars( context[21], context[22], ", ", 2 ) )
      return refalrts::cNoMemory;
    if( ! refalrts::alloc_open_call( context[23] ) )
      return refalrts::cNoMemory;
    if( ! refalrts::alloc_name( context[24], ContextItem, "ContextItem" ) )
      return refalrts::cNoMemory;
    if( ! refalrts::alloc_open_call( context[25] ) )
      return refalrts::cNoMemory;
    if( ! refalrts::alloc_chars( context[26], context[27], " );", 3 ) )
      return refalrts::cNoMemory;
    if( ! refalrts::alloc_close_bracket( context[28] ) )
      return refalrts::cNoMemory;
    refalrts::update_name( context[4], ContextItem, "ContextItem" );
    refalrts::reinit_name( context[13], Inc, "Inc" );
    refalrts::reinit_close_call( context[12] );
    refalrts::link_brackets( context[11], context[28] );
    refalrts::push_stack( context[1] );
    refalrts::push_stack( context[23] );
    refalrts::push_stack( context[12] );
    refalrts::push_stack( context[25] );
    refalrts::push_stack( context[20] );
    refalrts::push_stack( context[0] );
    refalrts::link_brackets( context[7], context[8] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = arg_end->next;
    res = refalrts::splice_evar( res, context[26], context[28] );
    res = refalrts::splice_evar( res, context[13], context[1] );
    res = refalrts::splice_evar( res, context[19], context[25] );
    res = refalrts::splice_evar( res, context[0], context[4] );
    res = refalrts::splice_evar( res, context[17], context[18] );
    res = refalrts::splice_evar( res, context[15], context[16] );
    res = refalrts::splice_evar( res, context[7], context[11] );
    refalrts::use( res );
    return refalrts::FnResult(refalrts::cSuccess | (__LINE__ << 8));
  } while ( 0 );

  do {
    refalrts::start_sentence();
    //(E )(#CmdInsertTileS S )
    // </0 & GenCommand/4 (/7 e.Indent#1/5 )/8 (/11 # CmdInsertTile/13 s.BeginOffset#1/14 s.EndOffset#1/15 )/12 >/1
    if( ! refalrts::ident_term(  & ident_CmdInsertTile<int>::name, context[13] ) )
      continue;
    // closed e.Indent#1 as range 5
    context[66] = context[9];
    context[67] = context[10];
    if( ! refalrts::svar_left( context[14], context[66], context[67] ) )
      continue;
    if( ! refalrts::svar_left( context[15], context[66], context[67] ) )
      continue;
    if( ! refalrts::empty_seq( context[66], context[67] ) )
      continue;

    refalrts::reset_allocator();
    //TRASH: {REMOVED TILE}  {REMOVED TILE}  {REMOVED TILE}  {REMOVED TILE}  {REMOVED TILE}  {REMOVED TILE}  {REMOVED TILE} 
    //RESULT: Tile{ [[ } Tile{ AsIs: (/7 AsIs: e.Indent#1/5 AsIs: )/8 AsIs: (/11 } e.Indent#1/5/16"res"/18 Tile{ HalfReuse: ' '/13 }"= refalrts::splice_evar( res, "/20 Tile{ AsIs: </0 Reuse: & ContextItem/4 } Tile{ AsIs: s.BeginOffset#1/14 } >/22", "/23 </25 & ContextItem/26 Tile{ AsIs: s.EndOffset#1/15 HalfReuse: >/12 HalfReuse: ' '/1 }");"/27 )/29 Tile{ ]] }
    if (! refalrts::copy_evar(context[16], context[17], context[5], context[6]))
      return refalrts::cNoMemory;
    if( ! refalrts::alloc_chars( context[18], context[19], "res", 3 ) )
      return refalrts::cNoMemory;
    if( ! refalrts::alloc_chars( context[20], context[21], "= refalrts::splice_evar( res, ", 30 ) )
      return refalrts::cNoMemory;
    if( ! refalrts::alloc_close_call( context[22] ) )
      return refalrts::cNoMemory;
    if( ! refalrts::alloc_chars( context[23], context[24], ", ", 2 ) )
      return refalrts::cNoMemory;
    if( ! refalrts::alloc_open_call( context[25] ) )
      return refalrts::cNoMemory;
    if( ! refalrts::alloc_name( context[26], ContextItem, "ContextItem" ) )
      return refalrts::cNoMemory;
    if( ! refalrts::alloc_chars( context[27], context[28], ");", 2 ) )
      return refalrts::cNoMemory;
    if( ! refalrts::alloc_close_bracket( context[29] ) )
      return refalrts::cNoMemory;
    refalrts::reinit_char( context[13], ' ' );
    refalrts::update_name( context[4], ContextItem, "ContextItem" );
    refalrts::reinit_close_call( context[12] );
    refalrts::reinit_char( context[1], ' ' );
    refalrts::link_brackets( context[11], context[29] );
    refalrts::push_stack( context[12] );
    refalrts::push_stack( context[25] );
    refalrts::push_stack( context[22] );
    refalrts::push_stack( context[0] );
    refalrts::link_brackets( context[7], context[8] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = arg_end->next;
    res = refalrts::splice_evar( res, context[27], context[29] );
    res = refalrts::splice_evar( res, context[15], context[1] );
    res = refalrts::splice_evar( res, context[22], context[26] );
    res = refalrts::splice_evar( res, context[14], context[14] );
    res = refalrts::splice_evar( res, context[0], context[4] );
    res = refalrts::splice_evar( res, context[20], context[21] );
    res = refalrts::splice_evar( res, context[13], context[13] );
    res = refalrts::splice_evar( res, context[18], context[19] );
    res = refalrts::splice_evar( res, context[16], context[17] );
    res = refalrts::splice_evar( res, context[7], context[11] );
    refalrts::use( res );
    return refalrts::FnResult(refalrts::cSuccess | (__LINE__ << 8));
  } while ( 0 );

  do {
    refalrts::start_sentence();
    //(E )(#CmdReturnResult)
    // </0 & GenCommand/4 (/7 e.Indent#1/5 )/8 (/11 # CmdReturnResult/13 )/12 >/1
    if( ! refalrts::ident_term(  & ident_CmdReturnResult<int>::name, context[13] ) )
      continue;
    context[66] = context[9];
    context[67] = context[10];
    if( ! refalrts::empty_seq( context[66], context[67] ) )
      continue;
    // closed e.Indent#1 as range 5

    refalrts::reset_allocator();
    //TRASH: {REMOVED TILE}  {REMOVED TILE}  {REMOVED TILE} 
    //RESULT: Tile{ [[ } (/14 e.Indent#1/5/15 )/17 (/18 e.Indent#1/5/19"refalrts::use( res )"/21 Tile{ HalfReuse: ';'/0 HalfReuse: )/4 AsIs: (/7 AsIs: e.Indent#1/5 HalfReuse: 'r'/8 HalfReuse: 'e'/11 HalfReuse: 'f'/13 HalfReuse: 'a'/12 HalfReuse: 'l'/1 }"rts::splice_to_freelist( arg_begin, arg_end );"/23 )/25 </26 & GenReturn/27 # Success/28 e.Indent#1/5/29 >/31 Tile{ ]] }
    if( ! refalrts::alloc_open_bracket( context[14] ) )
      return refalrts::cNoMemory;
    if (! refalrts::copy_evar(context[15], context[16], context[5], context[6]))
      return refalrts::cNoMemory;
    if( ! refalrts::alloc_close_bracket( context[17] ) )
      return refalrts::cNoMemory;
    if( ! refalrts::alloc_open_bracket( context[18] ) )
      return refalrts::cNoMemory;
    if (! refalrts::copy_evar(context[19], context[20], context[5], context[6]))
      return refalrts::cNoMemory;
    if( ! refalrts::alloc_chars( context[21], context[22], "refalrts::use( res )", 20 ) )
      return refalrts::cNoMemory;
    if( ! refalrts::alloc_chars( context[23], context[24], "rts::splice_to_freelist( arg_begin, arg_end );", 46 ) )
      return refalrts::cNoMemory;
    if( ! refalrts::alloc_close_bracket( context[25] ) )
      return refalrts::cNoMemory;
    if( ! refalrts::alloc_open_call( context[26] ) )
      return refalrts::cNoMemory;
    if( ! refalrts::alloc_name( context[27], GenReturn, "GenReturn" ) )
      return refalrts::cNoMemory;
    if( ! refalrts::alloc_ident( context[28], & ident_Success<int>::name ) )
      return refalrts::cNoMemory;
    if (! refalrts::copy_evar(context[29], context[30], context[5], context[6]))
      return refalrts::cNoMemory;
    if( ! refalrts::alloc_close_call( context[31] ) )
      return refalrts::cNoMemory;
    refalrts::reinit_char( context[0], ';' );
    refalrts::reinit_close_bracket( context[4] );
    refalrts::reinit_char( context[8], 'r' );
    refalrts::reinit_char( context[11], 'e' );
    refalrts::reinit_char( context[13], 'f' );
    refalrts::reinit_char( context[12], 'a' );
    refalrts::reinit_char( context[1], 'l' );
    refalrts::push_stack( context[31] );
    refalrts::push_stack( context[26] );
    refalrts::link_brackets( context[7], context[25] );
    refalrts::link_brackets( context[18], context[4] );
    refalrts::link_brackets( context[14], context[17] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = arg_end->next;
    res = refalrts::splice_evar( res, context[23], context[31] );
    res = refalrts::splice_evar( res, context[0], context[1] );
    res = refalrts::splice_evar( res, context[14], context[22] );
    refalrts::use( res );
    return refalrts::FnResult(refalrts::cSuccess | (__LINE__ << 8));
  } while ( 0 );

  do {
    refalrts::start_sentence();
    //(E )(#CmdUseRes)
    // </0 & GenCommand/4 (/7 e.Indent#1/5 )/8 (/11 # CmdUseRes/13 )/12 >/1
    if( ! refalrts::ident_term(  & ident_CmdUseRes<int>::name, context[13] ) )
      continue;
    context[66] = context[9];
    context[67] = context[10];
    if( ! refalrts::empty_seq( context[66], context[67] ) )
      continue;
    // closed e.Indent#1 as range 5

    refalrts::reset_allocator();
    //TRASH: {REMOVED TILE}  {REMOVED TILE}  {REMOVED TILE}  {REMOVED TILE} 
    //RESULT: Tile{ [[ } Tile{ AsIs: (/7 AsIs: e.Indent#1/5 AsIs: )/8 AsIs: (/11 } e.Indent#1/5/14 Tile{ HalfReuse: 'r'/0 HalfReuse: 'e'/4 }"falrts::use( res "/16 Tile{ HalfReuse: ')'/13 HalfReuse: ';'/12 HalfReuse: )/1 ]] }
    if (! refalrts::copy_evar(context[14], context[15], context[5], context[6]))
      return refalrts::cNoMemory;
    if( ! refalrts::alloc_chars( context[16], context[17], "falrts::use( res ", 17 ) )
      return refalrts::cNoMemory;
    refalrts::reinit_char( context[0], 'r' );
    refalrts::reinit_char( context[4], 'e' );
    refalrts::reinit_char( context[13], ')' );
    refalrts::reinit_char( context[12], ';' );
    refalrts::reinit_close_bracket( context[1] );
    refalrts::link_brackets( context[11], context[1] );
    refalrts::link_brackets( context[7], context[8] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[13];
    res = refalrts::splice_evar( res, context[16], context[17] );
    res = refalrts::splice_evar( res, context[0], context[4] );
    res = refalrts::splice_evar( res, context[14], context[15] );
    res = refalrts::splice_evar( res, context[7], context[11] );
    refalrts::use( res );
    return refalrts::FnResult(refalrts::cSuccess | (__LINE__ << 8));
  } while ( 0 );

  do {
    refalrts::start_sentence();
    //(E )(#CmdReturnResult_NoTrash)
    // </0 & GenCommand/4 (/7 e.Indent#1/5 )/8 (/11 # CmdReturnResult_NoTrash/13 )/12 >/1
    if( ! refalrts::ident_term(  & ident_CmdReturnResult_NoTrash<int>::name, context[13] ) )
      continue;
    context[66] = context[9];
    context[67] = context[10];
    if( ! refalrts::empty_seq( context[66], context[67] ) )
      continue;
    // closed e.Indent#1 as range 5

    refalrts::reset_allocator();
    //TRASH: {REMOVED TILE}  </0 & GenCommand/4 {REMOVED TILE}  {REMOVED TILE} 
    //RESULT: Tile{ [[ } Tile{ AsIs: (/7 AsIs: e.Indent#1/5 AsIs: )/8 HalfReuse: </11 HalfReuse: & GenReturn/13 HalfReuse: # Success/12 } e.Indent#1/5/14 Tile{ AsIs: >/1 ]] }
    if (! refalrts::copy_evar(context[14], context[15], context[5], context[6]))
      return refalrts::cNoMemory;
    refalrts::reinit_open_call( context[11] );
    refalrts::reinit_name( context[13], GenReturn, "GenReturn" );
    refalrts::reinit_ident( context[12], & ident_Success<int>::name );
    refalrts::push_stack( context[1] );
    refalrts::push_stack( context[11] );
    refalrts::link_brackets( context[7], context[8] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    res = refalrts::splice_evar( res, context[14], context[15] );
    res = refalrts::splice_evar( res, context[7], context[12] );
    refalrts::use( res );
    refalrts::splice_to_freelist_open( trash_prev, res );
    return refalrts::FnResult(refalrts::cSuccess | (__LINE__ << 8));
  } while ( 0 );

  do {
    refalrts::start_sentence();
    //(E )(#CmdTrashS )
    // </0 & GenCommand/4 (/7 e.Indent#1/5 )/8 (/11 # CmdTrash/13 s.Offset#1/14 )/12 >/1
    if( ! refalrts::ident_term(  & ident_CmdTrash<int>::name, context[13] ) )
      continue;
    // closed e.Indent#1 as range 5
    context[66] = context[9];
    context[67] = context[10];
    if( ! refalrts::svar_left( context[14], context[66], context[67] ) )
      continue;
    if( ! refalrts::empty_seq( context[66], context[67] ) )
      continue;

    refalrts::reset_allocator();
    //TRASH: {REMOVED TILE}  {REMOVED TILE}  {REMOVED TILE}  {REMOVED TILE}  {REMOVED TILE} 
    //RESULT: Tile{ [[ } Tile{ AsIs: (/7 AsIs: e.Indent#1/5 AsIs: )/8 HalfReuse: </11 HalfReuse: & Fetch/13 AsIs: s.Offset#1/14 HalfReuse: </12 HalfReuse: & CreateClosure /1 } Tile{ Reuse: & lambda_GenCommand_1/4 } Tile{ HalfReuse: (/0 } e.Indent#1/5/15 )/17 >/18 >/19 Tile{ ]] }
    if (! refalrts::copy_evar(context[15], context[16], context[5], context[6]))
      return refalrts::cNoMemory;
    if( ! refalrts::alloc_close_bracket( context[17] ) )
      return refalrts::cNoMemory;
    if( ! refalrts::alloc_close_call( context[18] ) )
      return refalrts::cNoMemory;
    if( ! refalrts::alloc_close_call( context[19] ) )
      return refalrts::cNoMemory;
    refalrts::reinit_open_call( context[11] );
    refalrts::reinit_name( context[13], Fetch, "Fetch" );
    refalrts::reinit_open_call( context[12] );
    refalrts::reinit_name( context[1], refalrts::create_closure, "refalrts::create_closure" );
    refalrts::update_name( context[4], lambda_GenCommand_1, "lambda_GenCommand_1" );
    refalrts::reinit_open_bracket( context[0] );
    refalrts::push_stack( context[19] );
    refalrts::push_stack( context[11] );
    refalrts::push_stack( context[18] );
    refalrts::push_stack( context[12] );
    refalrts::link_brackets( context[0], context[17] );
    refalrts::link_brackets( context[7], context[8] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = arg_end->next;
    res = refalrts::splice_evar( res, context[17], context[19] );
    res = refalrts::splice_evar( res, context[15], context[16] );
    res = refalrts::splice_evar( res, context[0], context[0] );
    res = refalrts::splice_evar( res, context[4], context[4] );
    res = refalrts::splice_evar( res, context[7], context[1] );
    refalrts::use( res );
    return refalrts::FnResult(refalrts::cSuccess | (__LINE__ << 8));
  } while ( 0 );

  do {
    refalrts::start_sentence();
    //(E )(#CmdFail)
    // </0 & GenCommand/4 (/7 e.Indent#1/5 )/8 (/11 # CmdFail/13 )/12 >/1
    if( ! refalrts::ident_term(  & ident_CmdFail<int>::name, context[13] ) )
      continue;
    context[66] = context[9];
    context[67] = context[10];
    if( ! refalrts::empty_seq( context[66], context[67] ) )
      continue;
    // closed e.Indent#1 as range 5

    refalrts::reset_allocator();
    //TRASH: {REMOVED TILE}  </0 & GenCommand/4 {REMOVED TILE}  {REMOVED TILE} 
    //RESULT: Tile{ [[ } Tile{ AsIs: (/7 AsIs: e.Indent#1/5 AsIs: )/8 HalfReuse: </11 HalfReuse: & GenReturn/13 HalfReuse: # Fail/12 } e.Indent#1/5/14 Tile{ AsIs: >/1 ]] }
    if (! refalrts::copy_evar(context[14], context[15], context[5], context[6]))
      return refalrts::cNoMemory;
    refalrts::reinit_open_call( context[11] );
    refalrts::reinit_name( context[13], GenReturn, "GenReturn" );
    refalrts::reinit_ident( context[12], & ident_Fail<int>::name );
    refalrts::push_stack( context[1] );
    refalrts::push_stack( context[11] );
    refalrts::link_brackets( context[7], context[8] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    res = refalrts::splice_evar( res, context[14], context[15] );
    res = refalrts::splice_evar( res, context[7], context[12] );
    refalrts::use( res );
    refalrts::splice_to_freelist_open( trash_prev, res );
    return refalrts::FnResult(refalrts::cSuccess | (__LINE__ << 8));
  } while ( 0 );

  do {
    refalrts::start_sentence();
    //(E )(#CmdiFuncArray)
    // </0 & GenCommand/4 (/7 e.Indent#1/5 )/8 (/11 # CmdiFuncArray/13 )/12 >/1
    if( ! refalrts::ident_term(  & ident_CmdiFuncArray<int>::name, context[13] ) )
      continue;
    context[66] = context[9];
    context[67] = context[10];
    if( ! refalrts::empty_seq( context[66], context[67] ) )
      continue;
    // closed e.Indent#1 as range 5

    refalrts::reset_allocator();
    //TRASH: {REMOVED TILE}  {REMOVED TILE}  {REMOVED TILE}  {REMOVED TILE} 
    //RESULT: Tile{ [[ } Tile{ AsIs: (/7 AsIs: e.Indent#1/5 AsIs: )/8 AsIs: (/11 } e.Indent#1/5/14 Tile{ HalfReuse: 'u'/0 HalfReuse: 's'/4 }"ing refalrts::function"/16 Tile{ HalfReuse: 's'/13 HalfReuse: ';'/12 HalfReuse: )/1 ]] }
    if (! refalrts::copy_evar(context[14], context[15], context[5], context[6]))
      return refalrts::cNoMemory;
    if( ! refalrts::alloc_chars( context[16], context[17], "ing refalrts::function", 22 ) )
      return refalrts::cNoMemory;
    refalrts::reinit_char( context[0], 'u' );
    refalrts::reinit_char( context[4], 's' );
    refalrts::reinit_char( context[13], 's' );
    refalrts::reinit_char( context[12], ';' );
    refalrts::reinit_close_bracket( context[1] );
    refalrts::link_brackets( context[11], context[1] );
    refalrts::link_brackets( context[7], context[8] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[13];
    res = refalrts::splice_evar( res, context[16], context[17] );
    res = refalrts::splice_evar( res, context[0], context[4] );
    res = refalrts::splice_evar( res, context[14], context[15] );
    res = refalrts::splice_evar( res, context[7], context[11] );
    refalrts::use( res );
    return refalrts::FnResult(refalrts::cSuccess | (__LINE__ << 8));
  } while ( 0 );

  do {
    refalrts::start_sentence();
    //(E )(#CmdiFuncArrayE (E ))
    // </0 & GenCommand/4 (/7 e.Indent#1/5 )/8 (/11 # CmdiFuncArray/13 e.FuncNames#1/9 (/16 e.LastName#1/14 )/17 )/12 >/1
    if( ! refalrts::ident_term(  & ident_CmdiFuncArray<int>::name, context[13] ) )
      continue;
    context[66] = context[9];
    context[67] = context[10];
    context[14] = 0;
    context[15] = 0;
    context[16] = refalrts::brackets_right( context[14], context[15], context[66], context[67] );
    if( ! context[16] )
      continue;
    refalrts::bracket_pointers(context[16], context[17]);
    // closed e.Indent#1 as range 5
    // closed e.FuncNames#1 as range 66(9)
    // closed e.LastName#1 as range 14

    refalrts::reset_allocator();
    //TRASH: {REMOVED TILE}  {REMOVED TILE}  {REMOVED TILE}  {REMOVED TILE}  {REMOVED TILE}  {REMOVED TILE} 
    //RESULT: Tile{ [[ } (/18 e.Indent#1/5/19 )/21 (/22 e.Indent#1/5/23 Tile{ HalfReuse: 's'/13 }"tatic const refalrts::RefalFunction functions[] = {"/25 )/27 </28 & Map/29 </30 Tile{ HalfReuse: & CreateClosure /0 Reuse: & lambda_GenCommand_2/4 AsIs: (/7 AsIs: e.Indent#1/5 AsIs: )/8 HalfReuse: >/11 } Tile{ AsIs: e.FuncNames#1/66(9) } >/31 (/32 e.Indent#1/5/33"  { "/35 </37 Tile{ HalfReuse: & PrintName/16 AsIs: e.LastName#1/14 HalfReuse: >/17 HalfReuse: ','/12 HalfReuse: ' '/1 } '\"'/38 </39 & PrintName/40 e.LastName#1/14/41 >/43"\" }"/44 )/46 (/47 e.Indent#1/5/48"};"/50 )/52 Tile{ ]] }
    if( ! refalrts::alloc_open_bracket( context[18] ) )
      return refalrts::cNoMemory;
    if (! refalrts::copy_evar(context[19], context[20], context[5], context[6]))
      return refalrts::cNoMemory;
    if( ! refalrts::alloc_close_bracket( context[21] ) )
      return refalrts::cNoMemory;
    if( ! refalrts::alloc_open_bracket( context[22] ) )
      return refalrts::cNoMemory;
    if (! refalrts::copy_evar(context[23], context[24], context[5], context[6]))
      return refalrts::cNoMemory;
    if( ! refalrts::alloc_chars( context[25], context[26], "tatic const refalrts::RefalFunction functions[] = {", 51 ) )
      return refalrts::cNoMemory;
    if( ! refalrts::alloc_close_bracket( context[27] ) )
      return refalrts::cNoMemory;
    if( ! refalrts::alloc_open_call( context[28] ) )
      return refalrts::cNoMemory;
    if( ! refalrts::alloc_name( context[29], Map, "Map" ) )
      return refalrts::cNoMemory;
    if( ! refalrts::alloc_open_call( context[30] ) )
      return refalrts::cNoMemory;
    if( ! refalrts::alloc_close_call( context[31] ) )
      return refalrts::cNoMemory;
    if( ! refalrts::alloc_open_bracket( context[32] ) )
      return refalrts::cNoMemory;
    if (! refalrts::copy_evar(context[33], context[34], context[5], context[6]))
      return refalrts::cNoMemory;
    if( ! refalrts::alloc_chars( context[35], context[36], "  { ", 4 ) )
      return refalrts::cNoMemory;
    if( ! refalrts::alloc_open_call( context[37] ) )
      return refalrts::cNoMemory;
    if( ! refalrts::alloc_char( context[38], '\"' ) )
      return refalrts::cNoMemory;
    if( ! refalrts::alloc_open_call( context[39] ) )
      return refalrts::cNoMemory;
    if( ! refalrts::alloc_name( context[40], PrintName, "PrintName" ) )
      return refalrts::cNoMemory;
    if (! refalrts::copy_evar(context[41], context[42], context[14], context[15]))
      return refalrts::cNoMemory;
    if( ! refalrts::alloc_close_call( context[43] ) )
      return refalrts::cNoMemory;
    if( ! refalrts::alloc_chars( context[44], context[45], "\" }", 3 ) )
      return refalrts::cNoMemory;
    if( ! refalrts::alloc_close_bracket( context[46] ) )
      return refalrts::cNoMemory;
    if( ! refalrts::alloc_open_bracket( context[47] ) )
      return refalrts::cNoMemory;
    if (! refalrts::copy_evar(context[48], context[49], context[5], context[6]))
      return refalrts::cNoMemory;
    if( ! refalrts::alloc_chars( context[50], context[51], "};", 2 ) )
      return refalrts::cNoMemory;
    if( ! refalrts::alloc_close_bracket( context[52] ) )
      return refalrts::cNoMemory;
    refalrts::reinit_char( context[13], 's' );
    refalrts::reinit_name( context[0], refalrts::create_closure, "refalrts::create_closure" );
    refalrts::update_name( context[4], lambda_GenCommand_2, "lambda_GenCommand_2" );
    refalrts::reinit_close_call( context[11] );
    refalrts::reinit_name( context[16], PrintName, "PrintName" );
    refalrts::reinit_close_call( context[17] );
    refalrts::reinit_char( context[12], ',' );
    refalrts::reinit_char( context[1], ' ' );
    refalrts::link_brackets( context[47], context[52] );
    refalrts::link_brackets( context[32], context[46] );
    refalrts::push_stack( context[43] );
    refalrts::push_stack( context[39] );
    refalrts::push_stack( context[17] );
    refalrts::push_stack( context[37] );
    refalrts::push_stack( context[31] );
    refalrts::push_stack( context[28] );
    refalrts::push_stack( context[11] );
    refalrts::push_stack( context[30] );
    refalrts::link_brackets( context[7], context[8] );
    refalrts::link_brackets( context[22], context[27] );
    refalrts::link_brackets( context[18], context[21] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = arg_end->next;
    res = refalrts::splice_evar( res, context[38], context[52] );
    res = refalrts::splice_evar( res, context[16], context[1] );
    res = refalrts::splice_evar( res, context[31], context[37] );
    res = refalrts::splice_evar( res, context[66], context[67] );
    res = refalrts::splice_evar( res, context[0], context[11] );
    res = refalrts::splice_evar( res, context[25], context[30] );
    res = refalrts::splice_evar( res, context[13], context[13] );
    res = refalrts::splice_evar( res, context[23], context[24] );
    res = refalrts::splice_evar( res, context[18], context[22] );
    refalrts::use( res );
    return refalrts::FnResult(refalrts::cSuccess | (__LINE__ << 8));
  } while ( 0 );

  do {
    refalrts::start_sentence();
    //(E )(#CmdiLabelArray)
    // </0 & GenCommand/4 (/7 e.Indent#1/5 )/8 (/11 # CmdiLabelArray/13 )/12 >/1
    if( ! refalrts::ident_term(  & ident_CmdiLabelArray<int>::name, context[13] ) )
      continue;
    context[66] = context[9];
    context[67] = context[10];
    if( ! refalrts::empty_seq( context[66], context[67] ) )
      continue;
    // closed e.Indent#1 as range 5

    refalrts::reset_allocator();
    //TRASH: {REMOVED TILE}  {REMOVED TILE}  {REMOVED TILE}  {REMOVED TILE} 
    //RESULT: Tile{ [[ } Tile{ AsIs: (/7 AsIs: e.Indent#1/5 AsIs: )/8 AsIs: (/11 } e.Indent#1/5/14 Tile{ HalfReuse: 'u'/0 HalfReuse: 's'/4 }"ing refalrts::ident"/16 Tile{ HalfReuse: 's'/13 HalfReuse: ';'/12 HalfReuse: )/1 ]] }
    if (! refalrts::copy_evar(context[14], context[15], context[5], context[6]))
      return refalrts::cNoMemory;
    if( ! refalrts::alloc_chars( context[16], context[17], "ing refalrts::ident", 19 ) )
      return refalrts::cNoMemory;
    refalrts::reinit_char( context[0], 'u' );
    refalrts::reinit_char( context[4], 's' );
    refalrts::reinit_char( context[13], 's' );
    refalrts::reinit_char( context[12], ';' );
    refalrts::reinit_close_bracket( context[1] );
    refalrts::link_brackets( context[11], context[1] );
    refalrts::link_brackets( context[7], context[8] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[13];
    res = refalrts::splice_evar( res, context[16], context[17] );
    res = refalrts::splice_evar( res, context[0], context[4] );
    res = refalrts::splice_evar( res, context[14], context[15] );
    res = refalrts::splice_evar( res, context[7], context[11] );
    refalrts::use( res );
    return refalrts::FnResult(refalrts::cSuccess | (__LINE__ << 8));
  } while ( 0 );

  do {
    refalrts::start_sentence();
    //(E )(#CmdiLabelArrayE (E ))
    // </0 & GenCommand/4 (/7 e.Indent#1/5 )/8 (/11 # CmdiLabelArray/13 e.LabelNames#1/9 (/16 e.LastName#1/14 )/17 )/12 >/1
    if( ! refalrts::ident_term(  & ident_CmdiLabelArray<int>::name, context[13] ) )
      continue;
    context[66] = context[9];
    context[67] = context[10];
    context[14] = 0;
    context[15] = 0;
    context[16] = refalrts::brackets_right( context[14], context[15], context[66], context[67] );
    if( ! context[16] )
      continue;
    refalrts::bracket_pointers(context[16], context[17]);
    // closed e.Indent#1 as range 5
    // closed e.LabelNames#1 as range 66(9)
    // closed e.LastName#1 as range 14

    refalrts::reset_allocator();
    //TRASH: {REMOVED TILE}  {REMOVED TILE}  {REMOVED TILE}  {REMOVED TILE}  {REMOVED TILE}  {REMOVED TILE} 
    //RESULT: Tile{ [[ } (/18 e.Indent#1/5/19 )/21 (/22 e.Indent#1/5/23 Tile{ HalfReuse: 's'/13 }"tatic const refalrts::RefalIdentifier idents[] = {"/25 )/27 </28 & Map/29 </30 Tile{ HalfReuse: & CreateClosure /0 Reuse: & lambda_GenCommand_3/4 AsIs: (/7 AsIs: e.Indent#1/5 AsIs: )/8 HalfReuse: >/11 } Tile{ AsIs: e.LabelNames#1/66(9) } >/31 (/32 e.Indent#1/5/33"  & ident"/35 Tile{ HalfReuse: '_'/16 AsIs: e.LastName#1/14 HalfReuse: '<'/17 HalfReuse: 'i'/12 HalfReuse: 'n'/1 }"t>::name"/37 )/39 (/40 e.Indent#1/5/41"};"/43 )/45 Tile{ ]] }
    if( ! refalrts::alloc_open_bracket( context[18] ) )
      return refalrts::cNoMemory;
    if (! refalrts::copy_evar(context[19], context[20], context[5], context[6]))
      return refalrts::cNoMemory;
    if( ! refalrts::alloc_close_bracket( context[21] ) )
      return refalrts::cNoMemory;
    if( ! refalrts::alloc_open_bracket( context[22] ) )
      return refalrts::cNoMemory;
    if (! refalrts::copy_evar(context[23], context[24], context[5], context[6]))
      return refalrts::cNoMemory;
    if( ! refalrts::alloc_chars( context[25], context[26], "tatic const refalrts::RefalIdentifier idents[] = {", 50 ) )
      return refalrts::cNoMemory;
    if( ! refalrts::alloc_close_bracket( context[27] ) )
      return refalrts::cNoMemory;
    if( ! refalrts::alloc_open_call( context[28] ) )
      return refalrts::cNoMemory;
    if( ! refalrts::alloc_name( context[29], Map, "Map" ) )
      return refalrts::cNoMemory;
    if( ! refalrts::alloc_open_call( context[30] ) )
      return refalrts::cNoMemory;
    if( ! refalrts::alloc_close_call( context[31] ) )
      return refalrts::cNoMemory;
    if( ! refalrts::alloc_open_bracket( context[32] ) )
      return refalrts::cNoMemory;
    if (! refalrts::copy_evar(context[33], context[34], context[5], context[6]))
      return refalrts::cNoMemory;
    if( ! refalrts::alloc_chars( context[35], context[36], "  & ident", 9 ) )
      return refalrts::cNoMemory;
    if( ! refalrts::alloc_chars( context[37], context[38], "t>::name", 8 ) )
      return refalrts::cNoMemory;
    if( ! refalrts::alloc_close_bracket( context[39] ) )
      return refalrts::cNoMemory;
    if( ! refalrts::alloc_open_bracket( context[40] ) )
      return refalrts::cNoMemory;
    if (! refalrts::copy_evar(context[41], context[42], context[5], context[6]))
      return refalrts::cNoMemory;
    if( ! refalrts::alloc_chars( context[43], context[44], "};", 2 ) )
      return refalrts::cNoMemory;
    if( ! refalrts::alloc_close_bracket( context[45] ) )
      return refalrts::cNoMemory;
    refalrts::reinit_char( context[13], 's' );
    refalrts::reinit_name( context[0], refalrts::create_closure, "refalrts::create_closure" );
    refalrts::update_name( context[4], lambda_GenCommand_3, "lambda_GenCommand_3" );
    refalrts::reinit_close_call( context[11] );
    refalrts::reinit_char( context[16], '_' );
    refalrts::reinit_char( context[17], '<' );
    refalrts::reinit_char( context[12], 'i' );
    refalrts::reinit_char( context[1], 'n' );
    refalrts::link_brackets( context[40], context[45] );
    refalrts::link_brackets( context[32], context[39] );
    refalrts::push_stack( context[31] );
    refalrts::push_stack( context[28] );
    refalrts::push_stack( context[11] );
    refalrts::push_stack( context[30] );
    refalrts::link_brackets( context[7], context[8] );
    refalrts::link_brackets( context[22], context[27] );
    refalrts::link_brackets( context[18], context[21] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = arg_end->next;
    res = refalrts::splice_evar( res, context[37], context[45] );
    res = refalrts::splice_evar( res, context[16], context[1] );
    res = refalrts::splice_evar( res, context[31], context[36] );
    res = refalrts::splice_evar( res, context[66], context[67] );
    res = refalrts::splice_evar( res, context[0], context[11] );
    res = refalrts::splice_evar( res, context[25], context[30] );
    res = refalrts::splice_evar( res, context[13], context[13] );
    res = refalrts::splice_evar( res, context[23], context[24] );
    res = refalrts::splice_evar( res, context[18], context[22] );
    refalrts::use( res );
    return refalrts::FnResult(refalrts::cSuccess | (__LINE__ << 8));
  } while ( 0 );

  do {
    refalrts::start_sentence();
    //(E )(#CmdiNumberArray)
    // </0 & GenCommand/4 (/7 e.Indent#1/5 )/8 (/11 # CmdiNumberArray/13 )/12 >/1
    if( ! refalrts::ident_term(  & ident_CmdiNumberArray<int>::name, context[13] ) )
      continue;
    context[66] = context[9];
    context[67] = context[10];
    if( ! refalrts::empty_seq( context[66], context[67] ) )
      continue;
    // closed e.Indent#1 as range 5

    refalrts::reset_allocator();
    //TRASH: {REMOVED TILE}  {REMOVED TILE}  {REMOVED TILE}  {REMOVED TILE} 
    //RESULT: Tile{ [[ } Tile{ AsIs: (/7 AsIs: e.Indent#1/5 AsIs: )/8 AsIs: (/11 } e.Indent#1/5/14 Tile{ HalfReuse: 'u'/0 HalfReuse: 's'/4 }"ing refalrts::number"/16 Tile{ HalfReuse: 's'/13 HalfReuse: ';'/12 HalfReuse: )/1 ]] }
    if (! refalrts::copy_evar(context[14], context[15], context[5], context[6]))
      return refalrts::cNoMemory;
    if( ! refalrts::alloc_chars( context[16], context[17], "ing refalrts::number", 20 ) )
      return refalrts::cNoMemory;
    refalrts::reinit_char( context[0], 'u' );
    refalrts::reinit_char( context[4], 's' );
    refalrts::reinit_char( context[13], 's' );
    refalrts::reinit_char( context[12], ';' );
    refalrts::reinit_close_bracket( context[1] );
    refalrts::link_brackets( context[11], context[1] );
    refalrts::link_brackets( context[7], context[8] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[13];
    res = refalrts::splice_evar( res, context[16], context[17] );
    res = refalrts::splice_evar( res, context[0], context[4] );
    res = refalrts::splice_evar( res, context[14], context[15] );
    res = refalrts::splice_evar( res, context[7], context[11] );
    refalrts::use( res );
    return refalrts::FnResult(refalrts::cSuccess | (__LINE__ << 8));
  } while ( 0 );

  do {
    refalrts::start_sentence();
    //(E )(#CmdiNumberArrayE S )
    // </0 & GenCommand/4 (/7 e.Indent#1/5 )/8 (/11 # CmdiNumberArray/13 e.Numbers#1/9 s.LastNumber#1/14 )/12 >/1
    if( ! refalrts::ident_term(  & ident_CmdiNumberArray<int>::name, context[13] ) )
      continue;
    // closed e.Indent#1 as range 5
    context[66] = context[9];
    context[67] = context[10];
    if( ! refalrts::svar_right( context[14], context[66], context[67] ) )
      continue;
    // closed e.Numbers#1 as range 66(9)

    refalrts::reset_allocator();
    //TRASH: {REMOVED TILE}  {REMOVED TILE}  {REMOVED TILE}  {REMOVED TILE}  {REMOVED TILE}  {REMOVED TILE} 
    //RESULT: Tile{ [[ } (/15 e.Indent#1/5/16 )/18 (/19 e.Indent#1/5/20 Tile{ HalfReuse: 's'/13 }"tatic const refalrts::RefalNumber numbers[] = {"/22 )/24 </25 & Map/26 </27 Tile{ HalfReuse: & CreateClosure /0 Reuse: & lambda_GenCommand_4/4 AsIs: (/7 AsIs: e.Indent#1/5 AsIs: )/8 HalfReuse: >/11 } Tile{ AsIs: e.Numbers#1/66(9) } >/28 (/29 e.Indent#1/5/30"  "/32 </34 & StrFromInt/35 Tile{ AsIs: s.LastNumber#1/14 HalfReuse: >/12 HalfReuse: 'U'/1 } 'L'/36 )/37 (/38 e.Indent#1/5/39"};"/41 )/43 Tile{ ]] }
    if( ! refalrts::alloc_open_bracket( context[15] ) )
      return refalrts::cNoMemory;
    if (! refalrts::copy_evar(context[16], context[17], context[5], context[6]))
      return refalrts::cNoMemory;
    if( ! refalrts::alloc_close_bracket( context[18] ) )
      return refalrts::cNoMemory;
    if( ! refalrts::alloc_open_bracket( context[19] ) )
      return refalrts::cNoMemory;
    if (! refalrts::copy_evar(context[20], context[21], context[5], context[6]))
      return refalrts::cNoMemory;
    if( ! refalrts::alloc_chars( context[22], context[23], "tatic const refalrts::RefalNumber numbers[] = {", 47 ) )
      return refalrts::cNoMemory;
    if( ! refalrts::alloc_close_bracket( context[24] ) )
      return refalrts::cNoMemory;
    if( ! refalrts::alloc_open_call( context[25] ) )
      return refalrts::cNoMemory;
    if( ! refalrts::alloc_name( context[26], Map, "Map" ) )
      return refalrts::cNoMemory;
    if( ! refalrts::alloc_open_call( context[27] ) )
      return refalrts::cNoMemory;
    if( ! refalrts::alloc_close_call( context[28] ) )
      return refalrts::cNoMemory;
    if( ! refalrts::alloc_open_bracket( context[29] ) )
      return refalrts::cNoMemory;
    if (! refalrts::copy_evar(context[30], context[31], context[5], context[6]))
      return refalrts::cNoMemory;
    if( ! refalrts::alloc_chars( context[32], context[33], "  ", 2 ) )
      return refalrts::cNoMemory;
    if( ! refalrts::alloc_open_call( context[34] ) )
      return refalrts::cNoMemory;
    if( ! refalrts::alloc_name( context[35], StrFromInt, "StrFromInt" ) )
      return refalrts::cNoMemory;
    if( ! refalrts::alloc_char( context[36], 'L' ) )
      return refalrts::cNoMemory;
    if( ! refalrts::alloc_close_bracket( context[37] ) )
      return refalrts::cNoMemory;
    if( ! refalrts::alloc_open_bracket( context[38] ) )
      return refalrts::cNoMemory;
    if (! refalrts::copy_evar(context[39], context[40], context[5], context[6]))
      return refalrts::cNoMemory;
    if( ! refalrts::alloc_chars( context[41], context[42], "};", 2 ) )
      return refalrts::cNoMemory;
    if( ! refalrts::alloc_close_bracket( context[43] ) )
      return refalrts::cNoMemory;
    refalrts::reinit_char( context[13], 's' );
    refalrts::reinit_name( context[0], refalrts::create_closure, "refalrts::create_closure" );
    refalrts::update_name( context[4], lambda_GenCommand_4, "lambda_GenCommand_4" );
    refalrts::reinit_close_call( context[11] );
    refalrts::reinit_close_call( context[12] );
    refalrts::reinit_char( context[1], 'U' );
    refalrts::link_brackets( context[38], context[43] );
    refalrts::link_brackets( context[29], context[37] );
    refalrts::push_stack( context[12] );
    refalrts::push_stack( context[34] );
    refalrts::push_stack( context[28] );
    refalrts::push_stack( context[25] );
    refalrts::push_stack( context[11] );
    refalrts::push_stack( context[27] );
    refalrts::link_brackets( context[7], context[8] );
    refalrts::link_brackets( context[19], context[24] );
    refalrts::link_brackets( context[15], context[18] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = arg_end->next;
    res = refalrts::splice_evar( res, context[36], context[43] );
    res = refalrts::splice_evar( res, context[14], context[1] );
    res = refalrts::splice_evar( res, context[28], context[35] );
    res = refalrts::splice_evar( res, context[66], context[67] );
    res = refalrts::splice_evar( res, context[0], context[11] );
    res = refalrts::splice_evar( res, context[22], context[27] );
    res = refalrts::splice_evar( res, context[13], context[13] );
    res = refalrts::splice_evar( res, context[20], context[21] );
    res = refalrts::splice_evar( res, context[15], context[19] );
    refalrts::use( res );
    return refalrts::FnResult(refalrts::cSuccess | (__LINE__ << 8));
  } while ( 0 );

  do {
    refalrts::start_sentence();
    //(E )(#CmdiStringArray)
    // </0 & GenCommand/4 (/7 e.Indent#1/5 )/8 (/11 # CmdiStringArray/13 )/12 >/1
    if( ! refalrts::ident_term(  & ident_CmdiStringArray<int>::name, context[13] ) )
      continue;
    context[66] = context[9];
    context[67] = context[10];
    if( ! refalrts::empty_seq( context[66], context[67] ) )
      continue;
    // closed e.Indent#1 as range 5

    refalrts::reset_allocator();
    //TRASH: {REMOVED TILE}  {REMOVED TILE}  {REMOVED TILE}  {REMOVED TILE} 
    //RESULT: Tile{ [[ } Tile{ AsIs: (/7 AsIs: e.Indent#1/5 AsIs: )/8 AsIs: (/11 } e.Indent#1/5/14 Tile{ HalfReuse: 'u'/0 HalfReuse: 's'/4 }"ing refalrts::string"/16 Tile{ HalfReuse: 's'/13 HalfReuse: ';'/12 HalfReuse: )/1 ]] }
    if (! refalrts::copy_evar(context[14], context[15], context[5], context[6]))
      return refalrts::cNoMemory;
    if( ! refalrts::alloc_chars( context[16], context[17], "ing refalrts::string", 20 ) )
      return refalrts::cNoMemory;
    refalrts::reinit_char( context[0], 'u' );
    refalrts::reinit_char( context[4], 's' );
    refalrts::reinit_char( context[13], 's' );
    refalrts::reinit_char( context[12], ';' );
    refalrts::reinit_close_bracket( context[1] );
    refalrts::link_brackets( context[11], context[1] );
    refalrts::link_brackets( context[7], context[8] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[13];
    res = refalrts::splice_evar( res, context[16], context[17] );
    res = refalrts::splice_evar( res, context[0], context[4] );
    res = refalrts::splice_evar( res, context[14], context[15] );
    res = refalrts::splice_evar( res, context[7], context[11] );
    refalrts::use( res );
    return refalrts::FnResult(refalrts::cSuccess | (__LINE__ << 8));
  } while ( 0 );

  do {
    refalrts::start_sentence();
    //(E )(#CmdiStringArrayE (E ))
    // </0 & GenCommand/4 (/7 e.Indent#1/5 )/8 (/11 # CmdiStringArray/13 e.Strings#1/9 (/16 e.LastString#1/14 )/17 )/12 >/1
    if( ! refalrts::ident_term(  & ident_CmdiStringArray<int>::name, context[13] ) )
      continue;
    context[66] = context[9];
    context[67] = context[10];
    context[14] = 0;
    context[15] = 0;
    context[16] = refalrts::brackets_right( context[14], context[15], context[66], context[67] );
    if( ! context[16] )
      continue;
    refalrts::bracket_pointers(context[16], context[17]);
    // closed e.Indent#1 as range 5
    // closed e.Strings#1 as range 66(9)
    // closed e.LastString#1 as range 14

    refalrts::reset_allocator();
    //TRASH: {REMOVED TILE}  {REMOVED TILE}  {REMOVED TILE}  {REMOVED TILE}  {REMOVED TILE}  {REMOVED TILE} 
    //RESULT: Tile{ [[ } (/18 e.Indent#1/5/19 )/21 (/22 e.Indent#1/5/23 Tile{ HalfReuse: 's'/13 }"tatic const refalrts::StringItem strings[] = {"/25 )/27 </28 & Map/29 </30 Tile{ HalfReuse: & CreateClosure /0 Reuse: & lambda_GenCommand_5/4 AsIs: (/7 AsIs: e.Indent#1/5 AsIs: )/8 HalfReuse: >/11 } Tile{ AsIs: e.Strings#1/66(9) } >/31 (/32 e.Indent#1/5/33"  {"/35 </37 Tile{ HalfReuse: & PrintString/16 AsIs: e.LastString#1/14 HalfReuse: >/17 HalfReuse: '}'/12 HalfReuse: )/1 } (/38 e.Indent#1/5/39"};"/41 )/43 Tile{ ]] }
    if( ! refalrts::alloc_open_bracket( context[18] ) )
      return refalrts::cNoMemory;
    if (! refalrts::copy_evar(context[19], context[20], context[5], context[6]))
      return refalrts::cNoMemory;
    if( ! refalrts::alloc_close_bracket( context[21] ) )
      return refalrts::cNoMemory;
    if( ! refalrts::alloc_open_bracket( context[22] ) )
      return refalrts::cNoMemory;
    if (! refalrts::copy_evar(context[23], context[24], context[5], context[6]))
      return refalrts::cNoMemory;
    if( ! refalrts::alloc_chars( context[25], context[26], "tatic const refalrts::StringItem strings[] = {", 46 ) )
      return refalrts::cNoMemory;
    if( ! refalrts::alloc_close_bracket( context[27] ) )
      return refalrts::cNoMemory;
    if( ! refalrts::alloc_open_call( context[28] ) )
      return refalrts::cNoMemory;
    if( ! refalrts::alloc_name( context[29], Map, "Map" ) )
      return refalrts::cNoMemory;
    if( ! refalrts::alloc_open_call( context[30] ) )
      return refalrts::cNoMemory;
    if( ! refalrts::alloc_close_call( context[31] ) )
      return refalrts::cNoMemory;
    if( ! refalrts::alloc_open_bracket( context[32] ) )
      return refalrts::cNoMemory;
    if (! refalrts::copy_evar(context[33], context[34], context[5], context[6]))
      return refalrts::cNoMemory;
    if( ! refalrts::alloc_chars( context[35], context[36], "  {", 3 ) )
      return refalrts::cNoMemory;
    if( ! refalrts::alloc_open_call( context[37] ) )
      return refalrts::cNoMemory;
    if( ! refalrts::alloc_open_bracket( context[38] ) )
      return refalrts::cNoMemory;
    if (! refalrts::copy_evar(context[39], context[40], context[5], context[6]))
      return refalrts::cNoMemory;
    if( ! refalrts::alloc_chars( context[41], context[42], "};", 2 ) )
      return refalrts::cNoMemory;
    if( ! refalrts::alloc_close_bracket( context[43] ) )
      return refalrts::cNoMemory;
    refalrts::reinit_char( context[13], 's' );
    refalrts::reinit_name( context[0], refalrts::create_closure, "refalrts::create_closure" );
    refalrts::update_name( context[4], lambda_GenCommand_5, "lambda_GenCommand_5" );
    refalrts::reinit_close_call( context[11] );
    refalrts::reinit_name( context[16], PrintString, "PrintString" );
    refalrts::reinit_close_call( context[17] );
    refalrts::reinit_char( context[12], '}' );
    refalrts::reinit_close_bracket( context[1] );
    refalrts::link_brackets( context[38], context[43] );
    refalrts::link_brackets( context[32], context[1] );
    refalrts::push_stack( context[17] );
    refalrts::push_stack( context[37] );
    refalrts::push_stack( context[31] );
    refalrts::push_stack( context[28] );
    refalrts::push_stack( context[11] );
    refalrts::push_stack( context[30] );
    refalrts::link_brackets( context[7], context[8] );
    refalrts::link_brackets( context[22], context[27] );
    refalrts::link_brackets( context[18], context[21] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = arg_end->next;
    res = refalrts::splice_evar( res, context[38], context[43] );
    res = refalrts::splice_evar( res, context[16], context[1] );
    res = refalrts::splice_evar( res, context[31], context[37] );
    res = refalrts::splice_evar( res, context[66], context[67] );
    res = refalrts::splice_evar( res, context[0], context[11] );
    res = refalrts::splice_evar( res, context[25], context[30] );
    res = refalrts::splice_evar( res, context[13], context[13] );
    res = refalrts::splice_evar( res, context[23], context[24] );
    res = refalrts::splice_evar( res, context[18], context[22] );
    refalrts::use( res );
    return refalrts::FnResult(refalrts::cSuccess | (__LINE__ << 8));
  } while ( 0 );

  do {
    refalrts::start_sentence();
    //(E )(#CmdInitRAA)
    // </0 & GenCommand/4 (/7 e.Indent#1/5 )/8 (/11 # CmdInitRAA/13 )/12 >/1
    if( ! refalrts::ident_term(  & ident_CmdInitRAA<int>::name, context[13] ) )
      continue;
    context[66] = context[9];
    context[67] = context[10];
    if( ! refalrts::empty_seq( context[66], context[67] ) )
      continue;
    // closed e.Indent#1 as range 5

    refalrts::reset_allocator();
    //TRASH: {REMOVED TILE}  {REMOVED TILE}  {REMOVED TILE} 
    //RESULT: Tile{ [[ } (/14 e.Indent#1/5/15 ' '/17 Tile{ HalfReuse: ' '/0 HalfReuse: )/4 AsIs: (/7 AsIs: e.Indent#1/5 HalfReuse: 's'/8 HalfReuse: 't'/11 HalfReuse: 'a'/13 HalfReuse: 't'/12 HalfReuse: 'i'/1 }"c const refalrts::RASLCommand raa[] = {"/18 )/20 Tile{ ]] }
    if( ! refalrts::alloc_open_bracket( context[14] ) )
      return refalrts::cNoMemory;
    if (! refalrts::copy_evar(context[15], context[16], context[5], context[6]))
      return refalrts::cNoMemory;
    if( ! refalrts::alloc_char( context[17], ' ' ) )
      return refalrts::cNoMemory;
    if( ! refalrts::alloc_chars( context[18], context[19], "c const refalrts::RASLCommand raa[] = {", 39 ) )
      return refalrts::cNoMemory;
    if( ! refalrts::alloc_close_bracket( context[20] ) )
      return refalrts::cNoMemory;
    refalrts::reinit_char( context[0], ' ' );
    refalrts::reinit_close_bracket( context[4] );
    refalrts::reinit_char( context[8], 's' );
    refalrts::reinit_char( context[11], 't' );
    refalrts::reinit_char( context[13], 'a' );
    refalrts::reinit_char( context[12], 't' );
    refalrts::reinit_char( context[1], 'i' );
    refalrts::link_brackets( context[7], context[20] );
    refalrts::link_brackets( context[14], context[4] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = arg_end->next;
    res = refalrts::splice_evar( res, context[18], context[20] );
    res = refalrts::splice_evar( res, context[0], context[1] );
    res = refalrts::splice_evar( res, context[14], context[17] );
    refalrts::use( res );
    return refalrts::FnResult(refalrts::cSuccess | (__LINE__ << 8));
  } while ( 0 );

  do {
    refalrts::start_sentence();
    //(E ' '' ')(#CmdFinRAA)
    // </0 & GenCommand/4 (/7 e.Indent#1/5 ' '/15 ' '/14 )/8 (/11 # CmdFinRAA/13 )/12 >/1
    if( ! refalrts::ident_term(  & ident_CmdFinRAA<int>::name, context[13] ) )
      continue;
    context[66] = context[5];
    context[67] = context[6];
    context[14] = refalrts::char_right( ' ', context[66], context[67] );
    if( ! context[14] )
      continue;
    context[15] = refalrts::char_right( ' ', context[66], context[67] );
    if( ! context[15] )
      continue;
    context[68] = context[9];
    context[69] = context[10];
    if( ! refalrts::empty_seq( context[68], context[69] ) )
      continue;
    // closed e.Indent#1 as range 66(5)

    refalrts::reset_allocator();
    //TRASH: {REMOVED TILE}  {REMOVED TILE}  {REMOVED TILE} 
    //RESULT: Tile{ [[ HalfReuse: (/0 } e.Indent#1/66(5)/16 Tile{ HalfReuse: )/4 AsIs: (/7 AsIs: e.Indent#1/66(5) AsIs: ' '/15 AsIs: ' '/14 HalfReuse: '{'/8 HalfReuse: 'r'/11 HalfReuse: 'e'/13 HalfReuse: 'f'/12 HalfReuse: 'a'/1 }"lrts::icEnd, 0, 0, 0}"/18 )/20 (/21 e.Indent#1/66(5)/22"};"/24 )/26 Tile{ ]] }
    if (! refalrts::copy_evar(context[16], context[17], context[66], context[67]))
      return refalrts::cNoMemory;
    if( ! refalrts::alloc_chars( context[18], context[19], "lrts::icEnd, 0, 0, 0}", 21 ) )
      return refalrts::cNoMemory;
    if( ! refalrts::alloc_close_bracket( context[20] ) )
      return refalrts::cNoMemory;
    if( ! refalrts::alloc_open_bracket( context[21] ) )
      return refalrts::cNoMemory;
    if (! refalrts::copy_evar(context[22], context[23], context[66], context[67]))
      return refalrts::cNoMemory;
    if( ! refalrts::alloc_chars( context[24], context[25], "};", 2 ) )
      return refalrts::cNoMemory;
    if( ! refalrts::alloc_close_bracket( context[26] ) )
      return refalrts::cNoMemory;
    refalrts::reinit_open_bracket( context[0] );
    refalrts::reinit_close_bracket( context[4] );
    refalrts::reinit_char( context[8], '{' );
    refalrts::reinit_char( context[11], 'r' );
    refalrts::reinit_char( context[13], 'e' );
    refalrts::reinit_char( context[12], 'f' );
    refalrts::reinit_char( context[1], 'a' );
    refalrts::link_brackets( context[21], context[26] );
    refalrts::link_brackets( context[7], context[20] );
    refalrts::link_brackets( context[0], context[4] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = arg_end->next;
    res = refalrts::splice_evar( res, context[18], context[26] );
    res = refalrts::splice_evar( res, context[4], context[1] );
    res = refalrts::splice_evar( res, context[16], context[17] );
    refalrts::use( res );
    return refalrts::FnResult(refalrts::cSuccess | (__LINE__ << 8));
  } while ( 0 );

  do {
    refalrts::start_sentence();
    //(E )(#CmdiReserveStack0 )
    // </0 & GenCommand/4 (/7 e.Indent#1/5 )/8 (/11 # CmdiReserveStack/13 0/14 )/12 >/1
    if( ! refalrts::ident_term(  & ident_CmdiReserveStack<int>::name, context[13] ) )
      continue;
    context[66] = context[9];
    context[67] = context[10];
    context[14] = refalrts::number_left( 0UL, context[66], context[67] );
    if( ! context[14] )
      continue;
    if( ! refalrts::empty_seq( context[66], context[67] ) )
      continue;
    // closed e.Indent#1 as range 5

    refalrts::reset_allocator();
    //TRASH: {REMOVED TILE}  {REMOVED TILE}  {REMOVED TILE} 
    //RESULT: Tile{ [[ HalfReuse: (/0 } e.Indent#1/5/15 Tile{ HalfReuse: )/4 AsIs: (/7 AsIs: e.Indent#1/5 HalfReuse: 'i'/8 HalfReuse: 'n'/11 HalfReuse: 't'/13 HalfReuse: ' '/14 HalfReuse: 'o'/12 HalfReuse: 'p'/1 }"en_e_stack[1];"/17 )/19 Tile{ ]] }
    if (! refalrts::copy_evar(context[15], context[16], context[5], context[6]))
      return refalrts::cNoMemory;
    if( ! refalrts::alloc_chars( context[17], context[18], "en_e_stack[1];", 14 ) )
      return refalrts::cNoMemory;
    if( ! refalrts::alloc_close_bracket( context[19] ) )
      return refalrts::cNoMemory;
    refalrts::reinit_open_bracket( context[0] );
    refalrts::reinit_close_bracket( context[4] );
    refalrts::reinit_char( context[8], 'i' );
    refalrts::reinit_char( context[11], 'n' );
    refalrts::reinit_char( context[13], 't' );
    refalrts::reinit_char( context[14], ' ' );
    refalrts::reinit_char( context[12], 'o' );
    refalrts::reinit_char( context[1], 'p' );
    refalrts::link_brackets( context[7], context[19] );
    refalrts::link_brackets( context[0], context[4] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = arg_end->next;
    res = refalrts::splice_evar( res, context[17], context[19] );
    res = refalrts::splice_evar( res, context[4], context[1] );
    res = refalrts::splice_evar( res, context[15], context[16] );
    refalrts::use( res );
    return refalrts::FnResult(refalrts::cSuccess | (__LINE__ << 8));
  } while ( 0 );

  do {
    refalrts::start_sentence();
    //(E )(#CmdiReserveStackS )
    // </0 & GenCommand/4 (/7 e.Indent#1/5 )/8 (/11 # CmdiReserveStack/13 s.Depth#1/14 )/12 >/1
    if( ! refalrts::ident_term(  & ident_CmdiReserveStack<int>::name, context[13] ) )
      continue;
    // closed e.Indent#1 as range 5
    context[66] = context[9];
    context[67] = context[10];
    if( ! refalrts::svar_left( context[14], context[66], context[67] ) )
      continue;
    if( ! refalrts::empty_seq( context[66], context[67] ) )
      continue;

    refalrts::reset_allocator();
    //TRASH: {REMOVED TILE}  {REMOVED TILE}  {REMOVED TILE}  {REMOVED TILE}  {REMOVED TILE}  {REMOVED TILE} 
    //RESULT: Tile{ [[ } Tile{ AsIs: (/7 AsIs: e.Indent#1/5 AsIs: )/8 AsIs: (/11 } e.Indent#1/5/15 Tile{ HalfReuse: 'i'/4 }"nt open_e_stack["/17 Tile{ AsIs: </0 } Tile{ HalfReuse: & StrFromInt/13 AsIs: s.Depth#1/14 HalfReuse: >/12 HalfReuse: ']'/1 } ';'/19 )/20 Tile{ ]] }
    if (! refalrts::copy_evar(context[15], context[16], context[5], context[6]))
      return refalrts::cNoMemory;
    if( ! refalrts::alloc_chars( context[17], context[18], "nt open_e_stack[", 16 ) )
      return refalrts::cNoMemory;
    if( ! refalrts::alloc_char( context[19], ';' ) )
      return refalrts::cNoMemory;
    if( ! refalrts::alloc_close_bracket( context[20] ) )
      return refalrts::cNoMemory;
    refalrts::reinit_char( context[4], 'i' );
    refalrts::reinit_name( context[13], StrFromInt, "StrFromInt" );
    refalrts::reinit_close_call( context[12] );
    refalrts::reinit_char( context[1], ']' );
    refalrts::link_brackets( context[11], context[20] );
    refalrts::push_stack( context[12] );
    refalrts::push_stack( context[0] );
    refalrts::link_brackets( context[7], context[8] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = arg_end->next;
    res = refalrts::splice_evar( res, context[19], context[20] );
    res = refalrts::splice_evar( res, context[13], context[1] );
    res = refalrts::splice_evar( res, context[0], context[0] );
    res = refalrts::splice_evar( res, context[17], context[18] );
    res = refalrts::splice_evar( res, context[4], context[4] );
    res = refalrts::splice_evar( res, context[15], context[16] );
    res = refalrts::splice_evar( res, context[7], context[11] );
    refalrts::use( res );
    return refalrts::FnResult(refalrts::cSuccess | (__LINE__ << 8));
  } while ( 0 );

  do {
    refalrts::start_sentence();
    //(E )(#CmdiRunInterpret)
    // </0 & GenCommand/4 (/7 e.Indent#1/5 )/8 (/11 # CmdiRunInterpret/13 )/12 >/1
    if( ! refalrts::ident_term(  & ident_CmdiRunInterpret<int>::name, context[13] ) )
      continue;
    context[66] = context[9];
    context[67] = context[10];
    if( ! refalrts::empty_seq( context[66], context[67] ) )
      continue;
    // closed e.Indent#1 as range 5

    refalrts::reset_allocator();
    //TRASH: {REMOVED TILE}  {REMOVED TILE}  {REMOVED TILE} 
    //RESULT: Tile{ [[ } (/14 e.Indent#1/5/15 )/17 (/18 e.Indent#1/5/19"refalrts::FnResult res = refalrts::interpret_array"/21 Tile{ HalfReuse: '('/0 HalfReuse: )/4 AsIs: (/7 AsIs: e.Indent#1/5 HalfReuse: ' '/8 HalfReuse: ' '/11 HalfReuse: 'r'/13 HalfReuse: 'a'/12 HalfReuse: 'a'/1 }", context, arg_begin, arg_end,"/23 )/25 (/26 e.Indent#1/5/27"  functions, idents, numbers, strings, open_e_stack"/29 )/31 (/32 e.Indent#1/5/33");"/35 )/37 (/38 e.Indent#1/5/39"return res;"/41 )/43 Tile{ ]] }
    if( ! refalrts::alloc_open_bracket( context[14] ) )
      return refalrts::cNoMemory;
    if (! refalrts::copy_evar(context[15], context[16], context[5], context[6]))
      return refalrts::cNoMemory;
    if( ! refalrts::alloc_close_bracket( context[17] ) )
      return refalrts::cNoMemory;
    if( ! refalrts::alloc_open_bracket( context[18] ) )
      return refalrts::cNoMemory;
    if (! refalrts::copy_evar(context[19], context[20], context[5], context[6]))
      return refalrts::cNoMemory;
    if( ! refalrts::alloc_chars( context[21], context[22], "refalrts::FnResult res = refalrts::interpret_array", 50 ) )
      return refalrts::cNoMemory;
    if( ! refalrts::alloc_chars( context[23], context[24], ", context, arg_begin, arg_end,", 30 ) )
      return refalrts::cNoMemory;
    if( ! refalrts::alloc_close_bracket( context[25] ) )
      return refalrts::cNoMemory;
    if( ! refalrts::alloc_open_bracket( context[26] ) )
      return refalrts::cNoMemory;
    if (! refalrts::copy_evar(context[27], context[28], context[5], context[6]))
      return refalrts::cNoMemory;
    if( ! refalrts::alloc_chars( context[29], context[30], "  functions, idents, numbers, strings, open_e_stack", 51 ) )
      return refalrts::cNoMemory;
    if( ! refalrts::alloc_close_bracket( context[31] ) )
      return refalrts::cNoMemory;
    if( ! refalrts::alloc_open_bracket( context[32] ) )
      return refalrts::cNoMemory;
    if (! refalrts::copy_evar(context[33], context[34], context[5], context[6]))
      return refalrts::cNoMemory;
    if( ! refalrts::alloc_chars( context[35], context[36], ");", 2 ) )
      return refalrts::cNoMemory;
    if( ! refalrts::alloc_close_bracket( context[37] ) )
      return refalrts::cNoMemory;
    if( ! refalrts::alloc_open_bracket( context[38] ) )
      return refalrts::cNoMemory;
    if (! refalrts::copy_evar(context[39], context[40], context[5], context[6]))
      return refalrts::cNoMemory;
    if( ! refalrts::alloc_chars( context[41], context[42], "return res;", 11 ) )
      return refalrts::cNoMemory;
    if( ! refalrts::alloc_close_bracket( context[43] ) )
      return refalrts::cNoMemory;
    refalrts::reinit_char( context[0], '(' );
    refalrts::reinit_close_bracket( context[4] );
    refalrts::reinit_char( context[8], ' ' );
    refalrts::reinit_char( context[11], ' ' );
    refalrts::reinit_char( context[13], 'r' );
    refalrts::reinit_char( context[12], 'a' );
    refalrts::reinit_char( context[1], 'a' );
    refalrts::link_brackets( context[38], context[43] );
    refalrts::link_brackets( context[32], context[37] );
    refalrts::link_brackets( context[26], context[31] );
    refalrts::link_brackets( context[7], context[25] );
    refalrts::link_brackets( context[18], context[4] );
    refalrts::link_brackets( context[14], context[17] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = arg_end->next;
    res = refalrts::splice_evar( res, context[23], context[43] );
    res = refalrts::splice_evar( res, context[0], context[1] );
    res = refalrts::splice_evar( res, context[14], context[22] );
    refalrts::use( res );
    return refalrts::FnResult(refalrts::cSuccess | (__LINE__ << 8));
  } while ( 0 );

  do {
    refalrts::start_sentence();
    //(E )(#CmdiOnFailGoToS )
    // </0 & GenCommand/4 (/7 e.Indent#1/5 )/8 (/11 # CmdiOnFailGoTo/13 s.Offset#1/14 )/12 >/1
    if( ! refalrts::ident_term(  & ident_CmdiOnFailGoTo<int>::name, context[13] ) )
      continue;
    // closed e.Indent#1 as range 5
    context[66] = context[9];
    context[67] = context[10];
    if( ! refalrts::svar_left( context[14], context[66], context[67] ) )
      continue;
    if( ! refalrts::empty_seq( context[66], context[67] ) )
      continue;

    refalrts::reset_allocator();
    //TRASH: {REMOVED TILE}  {REMOVED TILE}  {REMOVED TILE}  {REMOVED TILE}  {REMOVED TILE}  {REMOVED TILE} 
    //RESULT: Tile{ [[ } Tile{ AsIs: (/7 AsIs: e.Indent#1/5 AsIs: )/8 AsIs: (/11 } e.Indent#1/5/15"{re"/17 Tile{ HalfReuse: 'f'/4 }"alrts::icOnFailGoTo, +"/19 Tile{ AsIs: </0 } Tile{ HalfReuse: & StrFromInt/13 AsIs: s.Offset#1/14 HalfReuse: >/12 HalfReuse: ','/1 }" 0, 0},"/21 )/23 Tile{ ]] }
    if (! refalrts::copy_evar(context[15], context[16], context[5], context[6]))
      return refalrts::cNoMemory;
    if( ! refalrts::alloc_chars( context[17], context[18], "{re", 3 ) )
      return refalrts::cNoMemory;
    if( ! refalrts::alloc_chars( context[19], context[20], "alrts::icOnFailGoTo, +", 22 ) )
      return refalrts::cNoMemory;
    if( ! refalrts::alloc_chars( context[21], context[22], " 0, 0},", 7 ) )
      return refalrts::cNoMemory;
    if( ! refalrts::alloc_close_bracket( context[23] ) )
      return refalrts::cNoMemory;
    refalrts::reinit_char( context[4], 'f' );
    refalrts::reinit_name( context[13], StrFromInt, "StrFromInt" );
    refalrts::reinit_close_call( context[12] );
    refalrts::reinit_char( context[1], ',' );
    refalrts::link_brackets( context[11], context[23] );
    refalrts::push_stack( context[12] );
    refalrts::push_stack( context[0] );
    refalrts::link_brackets( context[7], context[8] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = arg_end->next;
    res = refalrts::splice_evar( res, context[21], context[23] );
    res = refalrts::splice_evar( res, context[13], context[1] );
    res = refalrts::splice_evar( res, context[0], context[0] );
    res = refalrts::splice_evar( res, context[19], context[20] );
    res = refalrts::splice_evar( res, context[4], context[4] );
    res = refalrts::splice_evar( res, context[17], context[18] );
    res = refalrts::splice_evar( res, context[15], context[16] );
    res = refalrts::splice_evar( res, context[7], context[11] );
    refalrts::use( res );
    return refalrts::FnResult(refalrts::cSuccess | (__LINE__ << 8));
  } while ( 0 );

  do {
    refalrts::start_sentence();
    //(E )(#CmdiInitB0)
    // </0 & GenCommand/4 (/7 e.Indent#1/5 )/8 (/11 # CmdiInitB0/13 )/12 >/1
    if( ! refalrts::ident_term(  & ident_CmdiInitB0<int>::name, context[13] ) )
      continue;
    context[66] = context[9];
    context[67] = context[10];
    if( ! refalrts::empty_seq( context[66], context[67] ) )
      continue;
    // closed e.Indent#1 as range 5

    refalrts::reset_allocator();
    //TRASH: {REMOVED TILE}  {REMOVED TILE}  {REMOVED TILE}  {REMOVED TILE} 
    //RESULT: Tile{ [[ } Tile{ AsIs: (/7 AsIs: e.Indent#1/5 AsIs: )/8 AsIs: (/11 } e.Indent#1/5/14 Tile{ HalfReuse: '{'/0 HalfReuse: 'r'/4 }"efalrts::icInitB0, 0, 0, 0"/16 Tile{ HalfReuse: '}'/13 HalfReuse: ','/12 HalfReuse: )/1 ]] }
    if (! refalrts::copy_evar(context[14], context[15], context[5], context[6]))
      return refalrts::cNoMemory;
    if( ! refalrts::alloc_chars( context[16], context[17], "efalrts::icInitB0, 0, 0, 0", 26 ) )
      return refalrts::cNoMemory;
    refalrts::reinit_char( context[0], '{' );
    refalrts::reinit_char( context[4], 'r' );
    refalrts::reinit_char( context[13], '}' );
    refalrts::reinit_char( context[12], ',' );
    refalrts::reinit_close_bracket( context[1] );
    refalrts::link_brackets( context[11], context[1] );
    refalrts::link_brackets( context[7], context[8] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[13];
    res = refalrts::splice_evar( res, context[16], context[17] );
    res = refalrts::splice_evar( res, context[0], context[4] );
    res = refalrts::splice_evar( res, context[14], context[15] );
    res = refalrts::splice_evar( res, context[7], context[11] );
    refalrts::use( res );
    return refalrts::FnResult(refalrts::cSuccess | (__LINE__ << 8));
  } while ( 0 );

  do {
    refalrts::start_sentence();
    //(E )(#CmdiInitB0_Lite)
    // </0 & GenCommand/4 (/7 e.Indent#1/5 )/8 (/11 # CmdiInitB0_Lite/13 )/12 >/1
    if( ! refalrts::ident_term(  & ident_CmdiInitB0_Lite<int>::name, context[13] ) )
      continue;
    context[66] = context[9];
    context[67] = context[10];
    if( ! refalrts::empty_seq( context[66], context[67] ) )
      continue;
    // closed e.Indent#1 as range 5

    refalrts::reset_allocator();
    //TRASH: {REMOVED TILE}  {REMOVED TILE}  {REMOVED TILE}  {REMOVED TILE} 
    //RESULT: Tile{ [[ } Tile{ AsIs: (/7 AsIs: e.Indent#1/5 AsIs: )/8 AsIs: (/11 } e.Indent#1/5/14 Tile{ HalfReuse: '{'/0 HalfReuse: 'r'/4 }"efalrts::icInitB0_Lite, 0, 0, 0"/16 Tile{ HalfReuse: '}'/13 HalfReuse: ','/12 HalfReuse: )/1 ]] }
    if (! refalrts::copy_evar(context[14], context[15], context[5], context[6]))
      return refalrts::cNoMemory;
    if( ! refalrts::alloc_chars( context[16], context[17], "efalrts::icInitB0_Lite, 0, 0, 0", 31 ) )
      return refalrts::cNoMemory;
    refalrts::reinit_char( context[0], '{' );
    refalrts::reinit_char( context[4], 'r' );
    refalrts::reinit_char( context[13], '}' );
    refalrts::reinit_char( context[12], ',' );
    refalrts::reinit_close_bracket( context[1] );
    refalrts::link_brackets( context[11], context[1] );
    refalrts::link_brackets( context[7], context[8] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[13];
    res = refalrts::splice_evar( res, context[16], context[17] );
    res = refalrts::splice_evar( res, context[0], context[4] );
    res = refalrts::splice_evar( res, context[14], context[15] );
    res = refalrts::splice_evar( res, context[7], context[11] );
    refalrts::use( res );
    return refalrts::FnResult(refalrts::cSuccess | (__LINE__ << 8));
  } while ( 0 );

  do {
    refalrts::start_sentence();
    //(E )(#CmdiCharS S S )
    // </0 & GenCommand/4 (/7 e.Indent#1/5 )/8 (/11 # CmdiChar/13 s.Direction#1/14 s.BracketNumber#1/15 s.Char#1/16 )/12 >/1
    if( ! refalrts::ident_term(  & ident_CmdiChar<int>::name, context[13] ) )
      continue;
    // closed e.Indent#1 as range 5
    context[66] = context[9];
    context[67] = context[10];
    if( ! refalrts::svar_left( context[14], context[66], context[67] ) )
      continue;
    if( ! refalrts::svar_left( context[15], context[66], context[67] ) )
      continue;
    if( ! refalrts::svar_left( context[16], context[66], context[67] ) )
      continue;
    if( ! refalrts::empty_seq( context[66], context[67] ) )
      continue;

    refalrts::reset_allocator();
    //TRASH: {REMOVED TILE}  {REMOVED TILE}  {REMOVED TILE}  {REMOVED TILE}  {REMOVED TILE}  {REMOVED TILE}  {REMOVED TILE}  {REMOVED TILE} 
    //RESULT: Tile{ [[ } Tile{ AsIs: (/7 AsIs: e.Indent#1/5 AsIs: )/8 AsIs: (/11 } e.Indent#1/5/17"{ref"/19 Tile{ HalfReuse: 'a'/13 }"lrts::icChar"/21 Tile{ AsIs: </0 Reuse: & PrintDirection/4 } Tile{ AsIs: s.Direction#1/14 } >/23", 0, static_cast<unsigned char>(\'"/24 </26 & Escape/27 Tile{ AsIs: s.Char#1/16 HalfReuse: >/12 HalfReuse: '\''/1 }"), "/28 </30 & StrFromInt/31 Tile{ AsIs: s.BracketNumber#1/15 } >/32"},"/33 )/35 Tile{ ]] }
    if (! refalrts::copy_evar(context[17], context[18], context[5], context[6]))
      return refalrts::cNoMemory;
    if( ! refalrts::alloc_chars( context[19], context[20], "{ref", 4 ) )
      return refalrts::cNoMemory;
    if( ! refalrts::alloc_chars( context[21], context[22], "lrts::icChar", 12 ) )
      return refalrts::cNoMemory;
    if( ! refalrts::alloc_close_call( context[23] ) )
      return refalrts::cNoMemory;
    if( ! refalrts::alloc_chars( context[24], context[25], ", 0, static_cast<unsigned char>(\'", 33 ) )
      return refalrts::cNoMemory;
    if( ! refalrts::alloc_open_call( context[26] ) )
      return refalrts::cNoMemory;
    if( ! refalrts::alloc_name( context[27], Escape, "Escape" ) )
      return refalrts::cNoMemory;
    if( ! refalrts::alloc_chars( context[28], context[29], "), ", 3 ) )
      return refalrts::cNoMemory;
    if( ! refalrts::alloc_open_call( context[30] ) )
      return refalrts::cNoMemory;
    if( ! refalrts::alloc_name( context[31], StrFromInt, "StrFromInt" ) )
      return refalrts::cNoMemory;
    if( ! refalrts::alloc_close_call( context[32] ) )
      return refalrts::cNoMemory;
    if( ! refalrts::alloc_chars( context[33], context[34], "},", 2 ) )
      return refalrts::cNoMemory;
    if( ! refalrts::alloc_close_bracket( context[35] ) )
      return refalrts::cNoMemory;
    refalrts::reinit_char( context[13], 'a' );
    refalrts::update_name( context[4], PrintDirection, "PrintDirection" );
    refalrts::reinit_close_call( context[12] );
    refalrts::reinit_char( context[1], '\'' );
    refalrts::link_brackets( context[11], context[35] );
    refalrts::push_stack( context[32] );
    refalrts::push_stack( context[30] );
    refalrts::push_stack( context[12] );
    refalrts::push_stack( context[26] );
    refalrts::push_stack( context[23] );
    refalrts::push_stack( context[0] );
    refalrts::link_brackets( context[7], context[8] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = arg_end->next;
    res = refalrts::splice_evar( res, context[32], context[35] );
    res = refalrts::splice_evar( res, context[15], context[15] );
    res = refalrts::splice_evar( res, context[28], context[31] );
    res = refalrts::splice_evar( res, context[16], context[1] );
    res = refalrts::splice_evar( res, context[23], context[27] );
    res = refalrts::splice_evar( res, context[14], context[14] );
    res = refalrts::splice_evar( res, context[0], context[4] );
    res = refalrts::splice_evar( res, context[21], context[22] );
    res = refalrts::splice_evar( res, context[13], context[13] );
    res = refalrts::splice_evar( res, context[19], context[20] );
    res = refalrts::splice_evar( res, context[17], context[18] );
    res = refalrts::splice_evar( res, context[7], context[11] );
    refalrts::use( res );
    return refalrts::FnResult(refalrts::cSuccess | (__LINE__ << 8));
  } while ( 0 );

  do {
    refalrts::start_sentence();
    //(E )(#CmdiCharSaveS S S S )
    // </0 & GenCommand/4 (/7 e.Indent#1/5 )/8 (/11 # CmdiCharSave/13 s.Direction#1/14 s.BracketNumber#1/15 s.SaveOffset#1/16 s.Char#1/17 )/12 >/1
    if( ! refalrts::ident_term(  & ident_CmdiCharSave<int>::name, context[13] ) )
      continue;
    // closed e.Indent#1 as range 5
    context[66] = context[9];
    context[67] = context[10];
    if( ! refalrts::svar_left( context[14], context[66], context[67] ) )
      continue;
    if( ! refalrts::svar_left( context[15], context[66], context[67] ) )
      continue;
    if( ! refalrts::svar_left( context[16], context[66], context[67] ) )
      continue;
    if( ! refalrts::svar_left( context[17], context[66], context[67] ) )
      continue;
    if( ! refalrts::empty_seq( context[66], context[67] ) )
      continue;

    refalrts::reset_allocator();
    //TRASH: {REMOVED TILE}  {REMOVED TILE}  {REMOVED TILE}  {REMOVED TILE}  {REMOVED TILE}  {REMOVED TILE}  {REMOVED TILE}  {REMOVED TILE}  {REMOVED TILE} 
    //RESULT: Tile{ [[ } Tile{ AsIs: (/7 AsIs: e.Indent#1/5 AsIs: )/8 AsIs: (/11 } e.Indent#1/5/18"{refa"/20 Tile{ HalfReuse: 'l'/13 }"rts::icChar"/22 Tile{ AsIs: </0 Reuse: & PrintDirection/4 } Tile{ AsIs: s.Direction#1/14 } >/24"Save, "/25 </27 & StrFromInt/28 Tile{ AsIs: s.SaveOffset#1/16 } >/29", static_cast<unsigned char>(\'"/30 </32 & Escape/33 Tile{ AsIs: s.Char#1/17 HalfReuse: >/12 HalfReuse: '\''/1 }"), "/34 </36 & StrFromInt/37 Tile{ AsIs: s.BracketNumber#1/15 } >/38"},"/39 )/41 Tile{ ]] }
    if (! refalrts::copy_evar(context[18], context[19], context[5], context[6]))
      return refalrts::cNoMemory;
    if( ! refalrts::alloc_chars( context[20], context[21], "{refa", 5 ) )
      return refalrts::cNoMemory;
    if( ! refalrts::alloc_chars( context[22], context[23], "rts::icChar", 11 ) )
      return refalrts::cNoMemory;
    if( ! refalrts::alloc_close_call( context[24] ) )
      return refalrts::cNoMemory;
    if( ! refalrts::alloc_chars( context[25], context[26], "Save, ", 6 ) )
      return refalrts::cNoMemory;
    if( ! refalrts::alloc_open_call( context[27] ) )
      return refalrts::cNoMemory;
    if( ! refalrts::alloc_name( context[28], StrFromInt, "StrFromInt" ) )
      return refalrts::cNoMemory;
    if( ! refalrts::alloc_close_call( context[29] ) )
      return refalrts::cNoMemory;
    if( ! refalrts::alloc_chars( context[30], context[31], ", static_cast<unsigned char>(\'", 30 ) )
      return refalrts::cNoMemory;
    if( ! refalrts::alloc_open_call( context[32] ) )
      return refalrts::cNoMemory;
    if( ! refalrts::alloc_name( context[33], Escape, "Escape" ) )
      return refalrts::cNoMemory;
    if( ! refalrts::alloc_chars( context[34], context[35], "), ", 3 ) )
      return refalrts::cNoMemory;
    if( ! refalrts::alloc_open_call( context[36] ) )
      return refalrts::cNoMemory;
    if( ! refalrts::alloc_name( context[37], StrFromInt, "StrFromInt" ) )
      return refalrts::cNoMemory;
    if( ! refalrts::alloc_close_call( context[38] ) )
      return refalrts::cNoMemory;
    if( ! refalrts::alloc_chars( context[39], context[40], "},", 2 ) )
      return refalrts::cNoMemory;
    if( ! refalrts::alloc_close_bracket( context[41] ) )
      return refalrts::cNoMemory;
    refalrts::reinit_char( context[13], 'l' );
    refalrts::update_name( context[4], PrintDirection, "PrintDirection" );
    refalrts::reinit_close_call( context[12] );
    refalrts::reinit_char( context[1], '\'' );
    refalrts::link_brackets( context[11], context[41] );
    refalrts::push_stack( context[38] );
    refalrts::push_stack( context[36] );
    refalrts::push_stack( context[12] );
    refalrts::push_stack( context[32] );
    refalrts::push_stack( context[29] );
    refalrts::push_stack( context[27] );
    refalrts::push_stack( context[24] );
    refalrts::push_stack( context[0] );
    refalrts::link_brackets( context[7], context[8] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = arg_end->next;
    res = refalrts::splice_evar( res, context[38], context[41] );
    res = refalrts::splice_evar( res, context[15], context[15] );
    res = refalrts::splice_evar( res, context[34], context[37] );
    res = refalrts::splice_evar( res, context[17], context[1] );
    res = refalrts::splice_evar( res, context[29], context[33] );
    res = refalrts::splice_evar( res, context[16], context[16] );
    res = refalrts::splice_evar( res, context[24], context[28] );
    res = refalrts::splice_evar( res, context[14], context[14] );
    res = refalrts::splice_evar( res, context[0], context[4] );
    res = refalrts::splice_evar( res, context[22], context[23] );
    res = refalrts::splice_evar( res, context[13], context[13] );
    res = refalrts::splice_evar( res, context[20], context[21] );
    res = refalrts::splice_evar( res, context[18], context[19] );
    res = refalrts::splice_evar( res, context[7], context[11] );
    refalrts::use( res );
    return refalrts::FnResult(refalrts::cSuccess | (__LINE__ << 8));
  } while ( 0 );

  do {
    refalrts::start_sentence();
    //(E )(#CmdiNumS S S )
    // </0 & GenCommand/4 (/7 e.Indent#1/5 )/8 (/11 # CmdiNum/13 s.Direction#1/14 s.BracketNumber#1/15 s.Number#1/16 )/12 >/1
    if( ! refalrts::ident_term(  & ident_CmdiNum<int>::name, context[13] ) )
      continue;
    // closed e.Indent#1 as range 5
    context[66] = context[9];
    context[67] = context[10];
    if( ! refalrts::svar_left( context[14], context[66], context[67] ) )
      continue;
    if( ! refalrts::svar_left( context[15], context[66], context[67] ) )
      continue;
    if( ! refalrts::svar_left( context[16], context[66], context[67] ) )
      continue;
    if( ! refalrts::empty_seq( context[66], context[67] ) )
      continue;

    refalrts::reset_allocator();
    //TRASH: {REMOVED TILE}  {REMOVED TILE}  {REMOVED TILE}  {REMOVED TILE}  {REMOVED TILE}  {REMOVED TILE}  {REMOVED TILE}  {REMOVED TILE} 
    //RESULT: Tile{ [[ } Tile{ AsIs: (/7 AsIs: e.Indent#1/5 AsIs: )/8 AsIs: (/11 } e.Indent#1/5/17"{ref"/19 Tile{ HalfReuse: 'a'/13 }"lrts::icNum"/21 Tile{ AsIs: </0 Reuse: & PrintDirection/4 } Tile{ AsIs: s.Direction#1/14 } >/23", 0, "/24 </26 & StrFromInt/27 Tile{ AsIs: s.Number#1/16 HalfReuse: >/12 HalfReuse: ','/1 } ' '/28 </29 & StrFromInt/30 Tile{ AsIs: s.BracketNumber#1/15 } >/31"},"/32 )/34 Tile{ ]] }
    if (! refalrts::copy_evar(context[17], context[18], context[5], context[6]))
      return refalrts::cNoMemory;
    if( ! refalrts::alloc_chars( context[19], context[20], "{ref", 4 ) )
      return refalrts::cNoMemory;
    if( ! refalrts::alloc_chars( context[21], context[22], "lrts::icNum", 11 ) )
      return refalrts::cNoMemory;
    if( ! refalrts::alloc_close_call( context[23] ) )
      return refalrts::cNoMemory;
    if( ! refalrts::alloc_chars( context[24], context[25], ", 0, ", 5 ) )
      return refalrts::cNoMemory;
    if( ! refalrts::alloc_open_call( context[26] ) )
      return refalrts::cNoMemory;
    if( ! refalrts::alloc_name( context[27], StrFromInt, "StrFromInt" ) )
      return refalrts::cNoMemory;
    if( ! refalrts::alloc_char( context[28], ' ' ) )
      return refalrts::cNoMemory;
    if( ! refalrts::alloc_open_call( context[29] ) )
      return refalrts::cNoMemory;
    if( ! refalrts::alloc_name( context[30], StrFromInt, "StrFromInt" ) )
      return refalrts::cNoMemory;
    if( ! refalrts::alloc_close_call( context[31] ) )
      return refalrts::cNoMemory;
    if( ! refalrts::alloc_chars( context[32], context[33], "},", 2 ) )
      return refalrts::cNoMemory;
    if( ! refalrts::alloc_close_bracket( context[34] ) )
      return refalrts::cNoMemory;
    refalrts::reinit_char( context[13], 'a' );
    refalrts::update_name( context[4], PrintDirection, "PrintDirection" );
    refalrts::reinit_close_call( context[12] );
    refalrts::reinit_char( context[1], ',' );
    refalrts::link_brackets( context[11], context[34] );
    refalrts::push_stack( context[31] );
    refalrts::push_stack( context[29] );
    refalrts::push_stack( context[12] );
    refalrts::push_stack( context[26] );
    refalrts::push_stack( context[23] );
    refalrts::push_stack( context[0] );
    refalrts::link_brackets( context[7], context[8] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = arg_end->next;
    res = refalrts::splice_evar( res, context[31], context[34] );
    res = refalrts::splice_evar( res, context[15], context[15] );
    res = refalrts::splice_evar( res, context[28], context[30] );
    res = refalrts::splice_evar( res, context[16], context[1] );
    res = refalrts::splice_evar( res, context[23], context[27] );
    res = refalrts::splice_evar( res, context[14], context[14] );
    res = refalrts::splice_evar( res, context[0], context[4] );
    res = refalrts::splice_evar( res, context[21], context[22] );
    res = refalrts::splice_evar( res, context[13], context[13] );
    res = refalrts::splice_evar( res, context[19], context[20] );
    res = refalrts::splice_evar( res, context[17], context[18] );
    res = refalrts::splice_evar( res, context[7], context[11] );
    refalrts::use( res );
    return refalrts::FnResult(refalrts::cSuccess | (__LINE__ << 8));
  } while ( 0 );

  do {
    refalrts::start_sentence();
    //(E )(#CmdiNumSaveS S S S )
    // </0 & GenCommand/4 (/7 e.Indent#1/5 )/8 (/11 # CmdiNumSave/13 s.Direction#1/14 s.BracketNumber#1/15 s.SaveOffset#1/16 s.Number#1/17 )/12 >/1
    if( ! refalrts::ident_term(  & ident_CmdiNumSave<int>::name, context[13] ) )
      continue;
    // closed e.Indent#1 as range 5
    context[66] = context[9];
    context[67] = context[10];
    if( ! refalrts::svar_left( context[14], context[66], context[67] ) )
      continue;
    if( ! refalrts::svar_left( context[15], context[66], context[67] ) )
      continue;
    if( ! refalrts::svar_left( context[16], context[66], context[67] ) )
      continue;
    if( ! refalrts::svar_left( context[17], context[66], context[67] ) )
      continue;
    if( ! refalrts::empty_seq( context[66], context[67] ) )
      continue;

    refalrts::reset_allocator();
    //TRASH: {REMOVED TILE}  {REMOVED TILE}  {REMOVED TILE}  {REMOVED TILE}  {REMOVED TILE}  {REMOVED TILE}  {REMOVED TILE}  {REMOVED TILE}  {REMOVED TILE} 
    //RESULT: Tile{ [[ } Tile{ AsIs: (/7 AsIs: e.Indent#1/5 AsIs: )/8 AsIs: (/11 } e.Indent#1/5/18"{refa"/20 Tile{ HalfReuse: 'l'/13 }"rts::icNum"/22 Tile{ AsIs: </0 Reuse: & PrintDirection/4 } Tile{ AsIs: s.Direction#1/14 } >/24"Save, "/25 </27 & StrFromInt/28 Tile{ AsIs: s.SaveOffset#1/16 } >/29", "/30 </32 & StrFromInt/33 Tile{ AsIs: s.Number#1/17 HalfReuse: >/12 HalfReuse: ','/1 } ' '/34 </35 & StrFromInt/36 Tile{ AsIs: s.BracketNumber#1/15 } >/37"},"/38 )/40 Tile{ ]] }
    if (! refalrts::copy_evar(context[18], context[19], context[5], context[6]))
      return refalrts::cNoMemory;
    if( ! refalrts::alloc_chars( context[20], context[21], "{refa", 5 ) )
      return refalrts::cNoMemory;
    if( ! refalrts::alloc_chars( context[22], context[23], "rts::icNum", 10 ) )
      return refalrts::cNoMemory;
    if( ! refalrts::alloc_close_call( context[24] ) )
      return refalrts::cNoMemory;
    if( ! refalrts::alloc_chars( context[25], context[26], "Save, ", 6 ) )
      return refalrts::cNoMemory;
    if( ! refalrts::alloc_open_call( context[27] ) )
      return refalrts::cNoMemory;
    if( ! refalrts::alloc_name( context[28], StrFromInt, "StrFromInt" ) )
      return refalrts::cNoMemory;
    if( ! refalrts::alloc_close_call( context[29] ) )
      return refalrts::cNoMemory;
    if( ! refalrts::alloc_chars( context[30], context[31], ", ", 2 ) )
      return refalrts::cNoMemory;
    if( ! refalrts::alloc_open_call( context[32] ) )
      return refalrts::cNoMemory;
    if( ! refalrts::alloc_name( context[33], StrFromInt, "StrFromInt" ) )
      return refalrts::cNoMemory;
    if( ! refalrts::alloc_char( context[34], ' ' ) )
      return refalrts::cNoMemory;
    if( ! refalrts::alloc_open_call( context[35] ) )
      return refalrts::cNoMemory;
    if( ! refalrts::alloc_name( context[36], StrFromInt, "StrFromInt" ) )
      return refalrts::cNoMemory;
    if( ! refalrts::alloc_close_call( context[37] ) )
      return refalrts::cNoMemory;
    if( ! refalrts::alloc_chars( context[38], context[39], "},", 2 ) )
      return refalrts::cNoMemory;
    if( ! refalrts::alloc_close_bracket( context[40] ) )
      return refalrts::cNoMemory;
    refalrts::reinit_char( context[13], 'l' );
    refalrts::update_name( context[4], PrintDirection, "PrintDirection" );
    refalrts::reinit_close_call( context[12] );
    refalrts::reinit_char( context[1], ',' );
    refalrts::link_brackets( context[11], context[40] );
    refalrts::push_stack( context[37] );
    refalrts::push_stack( context[35] );
    refalrts::push_stack( context[12] );
    refalrts::push_stack( context[32] );
    refalrts::push_stack( context[29] );
    refalrts::push_stack( context[27] );
    refalrts::push_stack( context[24] );
    refalrts::push_stack( context[0] );
    refalrts::link_brackets( context[7], context[8] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = arg_end->next;
    res = refalrts::splice_evar( res, context[37], context[40] );
    res = refalrts::splice_evar( res, context[15], context[15] );
    res = refalrts::splice_evar( res, context[34], context[36] );
    res = refalrts::splice_evar( res, context[17], context[1] );
    res = refalrts::splice_evar( res, context[29], context[33] );
    res = refalrts::splice_evar( res, context[16], context[16] );
    res = refalrts::splice_evar( res, context[24], context[28] );
    res = refalrts::splice_evar( res, context[14], context[14] );
    res = refalrts::splice_evar( res, context[0], context[4] );
    res = refalrts::splice_evar( res, context[22], context[23] );
    res = refalrts::splice_evar( res, context[13], context[13] );
    res = refalrts::splice_evar( res, context[20], context[21] );
    res = refalrts::splice_evar( res, context[18], context[19] );
    res = refalrts::splice_evar( res, context[7], context[11] );
    refalrts::use( res );
    return refalrts::FnResult(refalrts::cSuccess | (__LINE__ << 8));
  } while ( 0 );

  do {
    refalrts::start_sentence();
    //(E )(#CmdiHugeNumS S S )
    // </0 & GenCommand/4 (/7 e.Indent#1/5 )/8 (/11 # CmdiHugeNum/13 s.Direction#1/14 s.BracketNumber#1/15 s.Number#1/16 )/12 >/1
    if( ! refalrts::ident_term(  & ident_CmdiHugeNum<int>::name, context[13] ) )
      continue;
    // closed e.Indent#1 as range 5
    context[66] = context[9];
    context[67] = context[10];
    if( ! refalrts::svar_left( context[14], context[66], context[67] ) )
      continue;
    if( ! refalrts::svar_left( context[15], context[66], context[67] ) )
      continue;
    if( ! refalrts::svar_left( context[16], context[66], context[67] ) )
      continue;
    if( ! refalrts::empty_seq( context[66], context[67] ) )
      continue;

    refalrts::reset_allocator();
    //TRASH: {REMOVED TILE}  {REMOVED TILE}  {REMOVED TILE}  {REMOVED TILE}  {REMOVED TILE}  {REMOVED TILE}  {REMOVED TILE}  {REMOVED TILE} 
    //RESULT: Tile{ [[ } Tile{ AsIs: (/7 AsIs: e.Indent#1/5 AsIs: )/8 AsIs: (/11 } e.Indent#1/5/17"{ref"/19 Tile{ HalfReuse: 'a'/13 }"lrts::icHugeNum"/21 Tile{ AsIs: </0 Reuse: & PrintDirection/4 } Tile{ AsIs: s.Direction#1/14 } >/23", 0, "/24 </26 & StrFromInt/27 Tile{ AsIs: s.Number#1/16 HalfReuse: >/12 HalfReuse: ','/1 } ' '/28 </29 & StrFromInt/30 Tile{ AsIs: s.BracketNumber#1/15 } >/31"},"/32 )/34 Tile{ ]] }
    if (! refalrts::copy_evar(context[17], context[18], context[5], context[6]))
      return refalrts::cNoMemory;
    if( ! refalrts::alloc_chars( context[19], context[20], "{ref", 4 ) )
      return refalrts::cNoMemory;
    if( ! refalrts::alloc_chars( context[21], context[22], "lrts::icHugeNum", 15 ) )
      return refalrts::cNoMemory;
    if( ! refalrts::alloc_close_call( context[23] ) )
      return refalrts::cNoMemory;
    if( ! refalrts::alloc_chars( context[24], context[25], ", 0, ", 5 ) )
      return refalrts::cNoMemory;
    if( ! refalrts::alloc_open_call( context[26] ) )
      return refalrts::cNoMemory;
    if( ! refalrts::alloc_name( context[27], StrFromInt, "StrFromInt" ) )
      return refalrts::cNoMemory;
    if( ! refalrts::alloc_char( context[28], ' ' ) )
      return refalrts::cNoMemory;
    if( ! refalrts::alloc_open_call( context[29] ) )
      return refalrts::cNoMemory;
    if( ! refalrts::alloc_name( context[30], StrFromInt, "StrFromInt" ) )
      return refalrts::cNoMemory;
    if( ! refalrts::alloc_close_call( context[31] ) )
      return refalrts::cNoMemory;
    if( ! refalrts::alloc_chars( context[32], context[33], "},", 2 ) )
      return refalrts::cNoMemory;
    if( ! refalrts::alloc_close_bracket( context[34] ) )
      return refalrts::cNoMemory;
    refalrts::reinit_char( context[13], 'a' );
    refalrts::update_name( context[4], PrintDirection, "PrintDirection" );
    refalrts::reinit_close_call( context[12] );
    refalrts::reinit_char( context[1], ',' );
    refalrts::link_brackets( context[11], context[34] );
    refalrts::push_stack( context[31] );
    refalrts::push_stack( context[29] );
    refalrts::push_stack( context[12] );
    refalrts::push_stack( context[26] );
    refalrts::push_stack( context[23] );
    refalrts::push_stack( context[0] );
    refalrts::link_brackets( context[7], context[8] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = arg_end->next;
    res = refalrts::splice_evar( res, context[31], context[34] );
    res = refalrts::splice_evar( res, context[15], context[15] );
    res = refalrts::splice_evar( res, context[28], context[30] );
    res = refalrts::splice_evar( res, context[16], context[1] );
    res = refalrts::splice_evar( res, context[23], context[27] );
    res = refalrts::splice_evar( res, context[14], context[14] );
    res = refalrts::splice_evar( res, context[0], context[4] );
    res = refalrts::splice_evar( res, context[21], context[22] );
    res = refalrts::splice_evar( res, context[13], context[13] );
    res = refalrts::splice_evar( res, context[19], context[20] );
    res = refalrts::splice_evar( res, context[17], context[18] );
    res = refalrts::splice_evar( res, context[7], context[11] );
    refalrts::use( res );
    return refalrts::FnResult(refalrts::cSuccess | (__LINE__ << 8));
  } while ( 0 );

  do {
    refalrts::start_sentence();
    //(E )(#CmdiHugeNumSaveS S S S )
    // </0 & GenCommand/4 (/7 e.Indent#1/5 )/8 (/11 # CmdiHugeNumSave/13 s.Direction#1/14 s.BracketNumber#1/15 s.SaveOffset#1/16 s.Number#1/17 )/12 >/1
    if( ! refalrts::ident_term(  & ident_CmdiHugeNumSave<int>::name, context[13] ) )
      continue;
    // closed e.Indent#1 as range 5
    context[66] = context[9];
    context[67] = context[10];
    if( ! refalrts::svar_left( context[14], context[66], context[67] ) )
      continue;
    if( ! refalrts::svar_left( context[15], context[66], context[67] ) )
      continue;
    if( ! refalrts::svar_left( context[16], context[66], context[67] ) )
      continue;
    if( ! refalrts::svar_left( context[17], context[66], context[67] ) )
      continue;
    if( ! refalrts::empty_seq( context[66], context[67] ) )
      continue;

    refalrts::reset_allocator();
    //TRASH: {REMOVED TILE}  {REMOVED TILE}  {REMOVED TILE}  {REMOVED TILE}  {REMOVED TILE}  {REMOVED TILE}  {REMOVED TILE}  {REMOVED TILE}  {REMOVED TILE} 
    //RESULT: Tile{ [[ } Tile{ AsIs: (/7 AsIs: e.Indent#1/5 AsIs: )/8 AsIs: (/11 } e.Indent#1/5/18"{refa"/20 Tile{ HalfReuse: 'l'/13 }"rts::icHugeNum"/22 Tile{ AsIs: </0 Reuse: & PrintDirection/4 } Tile{ AsIs: s.Direction#1/14 } >/24"Save, "/25 </27 & StrFromInt/28 Tile{ AsIs: s.SaveOffset#1/16 } >/29", "/30 </32 & StrFromInt/33 Tile{ AsIs: s.Number#1/17 HalfReuse: >/12 HalfReuse: ','/1 } ' '/34 </35 & StrFromInt/36 Tile{ AsIs: s.BracketNumber#1/15 } >/37"},"/38 )/40 Tile{ ]] }
    if (! refalrts::copy_evar(context[18], context[19], context[5], context[6]))
      return refalrts::cNoMemory;
    if( ! refalrts::alloc_chars( context[20], context[21], "{refa", 5 ) )
      return refalrts::cNoMemory;
    if( ! refalrts::alloc_chars( context[22], context[23], "rts::icHugeNum", 14 ) )
      return refalrts::cNoMemory;
    if( ! refalrts::alloc_close_call( context[24] ) )
      return refalrts::cNoMemory;
    if( ! refalrts::alloc_chars( context[25], context[26], "Save, ", 6 ) )
      return refalrts::cNoMemory;
    if( ! refalrts::alloc_open_call( context[27] ) )
      return refalrts::cNoMemory;
    if( ! refalrts::alloc_name( context[28], StrFromInt, "StrFromInt" ) )
      return refalrts::cNoMemory;
    if( ! refalrts::alloc_close_call( context[29] ) )
      return refalrts::cNoMemory;
    if( ! refalrts::alloc_chars( context[30], context[31], ", ", 2 ) )
      return refalrts::cNoMemory;
    if( ! refalrts::alloc_open_call( context[32] ) )
      return refalrts::cNoMemory;
    if( ! refalrts::alloc_name( context[33], StrFromInt, "StrFromInt" ) )
      return refalrts::cNoMemory;
    if( ! refalrts::alloc_char( context[34], ' ' ) )
      return refalrts::cNoMemory;
    if( ! refalrts::alloc_open_call( context[35] ) )
      return refalrts::cNoMemory;
    if( ! refalrts::alloc_name( context[36], StrFromInt, "StrFromInt" ) )
      return refalrts::cNoMemory;
    if( ! refalrts::alloc_close_call( context[37] ) )
      return refalrts::cNoMemory;
    if( ! refalrts::alloc_chars( context[38], context[39], "},", 2 ) )
      return refalrts::cNoMemory;
    if( ! refalrts::alloc_close_bracket( context[40] ) )
      return refalrts::cNoMemory;
    refalrts::reinit_char( context[13], 'l' );
    refalrts::update_name( context[4], PrintDirection, "PrintDirection" );
    refalrts::reinit_close_call( context[12] );
    refalrts::reinit_char( context[1], ',' );
    refalrts::link_brackets( context[11], context[40] );
    refalrts::push_stack( context[37] );
    refalrts::push_stack( context[35] );
    refalrts::push_stack( context[12] );
    refalrts::push_stack( context[32] );
    refalrts::push_stack( context[29] );
    refalrts::push_stack( context[27] );
    refalrts::push_stack( context[24] );
    refalrts::push_stack( context[0] );
    refalrts::link_brackets( context[7], context[8] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = arg_end->next;
    res = refalrts::splice_evar( res, context[37], context[40] );
    res = refalrts::splice_evar( res, context[15], context[15] );
    res = refalrts::splice_evar( res, context[34], context[36] );
    res = refalrts::splice_evar( res, context[17], context[1] );
    res = refalrts::splice_evar( res, context[29], context[33] );
    res = refalrts::splice_evar( res, context[16], context[16] );
    res = refalrts::splice_evar( res, context[24], context[28] );
    res = refalrts::splice_evar( res, context[14], context[14] );
    res = refalrts::splice_evar( res, context[0], context[4] );
    res = refalrts::splice_evar( res, context[22], context[23] );
    res = refalrts::splice_evar( res, context[13], context[13] );
    res = refalrts::splice_evar( res, context[20], context[21] );
    res = refalrts::splice_evar( res, context[18], context[19] );
    res = refalrts::splice_evar( res, context[7], context[11] );
    refalrts::use( res );
    return refalrts::FnResult(refalrts::cSuccess | (__LINE__ << 8));
  } while ( 0 );

  do {
    refalrts::start_sentence();
    //(E )(#CmdiNameS S S )
    // </0 & GenCommand/4 (/7 e.Indent#1/5 )/8 (/11 # CmdiName/13 s.Direction#1/14 s.BracketNumber#1/15 s.NameId#1/16 )/12 >/1
    if( ! refalrts::ident_term(  & ident_CmdiName<int>::name, context[13] ) )
      continue;
    // closed e.Indent#1 as range 5
    context[66] = context[9];
    context[67] = context[10];
    if( ! refalrts::svar_left( context[14], context[66], context[67] ) )
      continue;
    if( ! refalrts::svar_left( context[15], context[66], context[67] ) )
      continue;
    if( ! refalrts::svar_left( context[16], context[66], context[67] ) )
      continue;
    if( ! refalrts::empty_seq( context[66], context[67] ) )
      continue;

    refalrts::reset_allocator();
    //TRASH: {REMOVED TILE}  {REMOVED TILE}  {REMOVED TILE}  {REMOVED TILE}  {REMOVED TILE}  {REMOVED TILE}  {REMOVED TILE}  {REMOVED TILE} 
    //RESULT: Tile{ [[ } Tile{ AsIs: (/7 AsIs: e.Indent#1/5 AsIs: )/8 AsIs: (/11 } e.Indent#1/5/17"{ref"/19 Tile{ HalfReuse: 'a'/13 }"lrts::icFunc"/21 Tile{ AsIs: </0 Reuse: & PrintDirection/4 } Tile{ AsIs: s.Direction#1/14 } >/23", 0, "/24 </26 & StrFromInt/27 Tile{ AsIs: s.NameId#1/16 HalfReuse: >/12 HalfReuse: ','/1 } ' '/28 </29 & StrFromInt/30 Tile{ AsIs: s.BracketNumber#1/15 } >/31"},"/32 )/34 Tile{ ]] }
    if (! refalrts::copy_evar(context[17], context[18], context[5], context[6]))
      return refalrts::cNoMemory;
    if( ! refalrts::alloc_chars( context[19], context[20], "{ref", 4 ) )
      return refalrts::cNoMemory;
    if( ! refalrts::alloc_chars( context[21], context[22], "lrts::icFunc", 12 ) )
      return refalrts::cNoMemory;
    if( ! refalrts::alloc_close_call( context[23] ) )
      return refalrts::cNoMemory;
    if( ! refalrts::alloc_chars( context[24], context[25], ", 0, ", 5 ) )
      return refalrts::cNoMemory;
    if( ! refalrts::alloc_open_call( context[26] ) )
      return refalrts::cNoMemory;
    if( ! refalrts::alloc_name( context[27], StrFromInt, "StrFromInt" ) )
      return refalrts::cNoMemory;
    if( ! refalrts::alloc_char( context[28], ' ' ) )
      return refalrts::cNoMemory;
    if( ! refalrts::alloc_open_call( context[29] ) )
      return refalrts::cNoMemory;
    if( ! refalrts::alloc_name( context[30], StrFromInt, "StrFromInt" ) )
      return refalrts::cNoMemory;
    if( ! refalrts::alloc_close_call( context[31] ) )
      return refalrts::cNoMemory;
    if( ! refalrts::alloc_chars( context[32], context[33], "},", 2 ) )
      return refalrts::cNoMemory;
    if( ! refalrts::alloc_close_bracket( context[34] ) )
      return refalrts::cNoMemory;
    refalrts::reinit_char( context[13], 'a' );
    refalrts::update_name( context[4], PrintDirection, "PrintDirection" );
    refalrts::reinit_close_call( context[12] );
    refalrts::reinit_char( context[1], ',' );
    refalrts::link_brackets( context[11], context[34] );
    refalrts::push_stack( context[31] );
    refalrts::push_stack( context[29] );
    refalrts::push_stack( context[12] );
    refalrts::push_stack( context[26] );
    refalrts::push_stack( context[23] );
    refalrts::push_stack( context[0] );
    refalrts::link_brackets( context[7], context[8] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = arg_end->next;
    res = refalrts::splice_evar( res, context[31], context[34] );
    res = refalrts::splice_evar( res, context[15], context[15] );
    res = refalrts::splice_evar( res, context[28], context[30] );
    res = refalrts::splice_evar( res, context[16], context[1] );
    res = refalrts::splice_evar( res, context[23], context[27] );
    res = refalrts::splice_evar( res, context[14], context[14] );
    res = refalrts::splice_evar( res, context[0], context[4] );
    res = refalrts::splice_evar( res, context[21], context[22] );
    res = refalrts::splice_evar( res, context[13], context[13] );
    res = refalrts::splice_evar( res, context[19], context[20] );
    res = refalrts::splice_evar( res, context[17], context[18] );
    res = refalrts::splice_evar( res, context[7], context[11] );
    refalrts::use( res );
    return refalrts::FnResult(refalrts::cSuccess | (__LINE__ << 8));
  } while ( 0 );

  do {
    refalrts::start_sentence();
    //(E )(#CmdiNameSaveS S S S )
    // </0 & GenCommand/4 (/7 e.Indent#1/5 )/8 (/11 # CmdiNameSave/13 s.Direction#1/14 s.BracketNumber#1/15 s.SaveOffset#1/16 s.NameId#1/17 )/12 >/1
    if( ! refalrts::ident_term(  & ident_CmdiNameSave<int>::name, context[13] ) )
      continue;
    // closed e.Indent#1 as range 5
    context[66] = context[9];
    context[67] = context[10];
    if( ! refalrts::svar_left( context[14], context[66], context[67] ) )
      continue;
    if( ! refalrts::svar_left( context[15], context[66], context[67] ) )
      continue;
    if( ! refalrts::svar_left( context[16], context[66], context[67] ) )
      continue;
    if( ! refalrts::svar_left( context[17], context[66], context[67] ) )
      continue;
    if( ! refalrts::empty_seq( context[66], context[67] ) )
      continue;

    refalrts::reset_allocator();
    //TRASH: {REMOVED TILE}  {REMOVED TILE}  {REMOVED TILE}  {REMOVED TILE}  {REMOVED TILE}  {REMOVED TILE}  {REMOVED TILE}  {REMOVED TILE}  {REMOVED TILE} 
    //RESULT: Tile{ [[ } Tile{ AsIs: (/7 AsIs: e.Indent#1/5 AsIs: )/8 AsIs: (/11 } e.Indent#1/5/18"{refa"/20 Tile{ HalfReuse: 'l'/13 }"rts::icFunc"/22 Tile{ AsIs: </0 Reuse: & PrintDirection/4 } Tile{ AsIs: s.Direction#1/14 } >/24"Save, "/25 </27 & StrFromInt/28 Tile{ AsIs: s.SaveOffset#1/16 } >/29", "/30 </32 & StrFromInt/33 Tile{ AsIs: s.NameId#1/17 HalfReuse: >/12 HalfReuse: ','/1 } ' '/34 </35 & StrFromInt/36 Tile{ AsIs: s.BracketNumber#1/15 } >/37"},"/38 )/40 Tile{ ]] }
    if (! refalrts::copy_evar(context[18], context[19], context[5], context[6]))
      return refalrts::cNoMemory;
    if( ! refalrts::alloc_chars( context[20], context[21], "{refa", 5 ) )
      return refalrts::cNoMemory;
    if( ! refalrts::alloc_chars( context[22], context[23], "rts::icFunc", 11 ) )
      return refalrts::cNoMemory;
    if( ! refalrts::alloc_close_call( context[24] ) )
      return refalrts::cNoMemory;
    if( ! refalrts::alloc_chars( context[25], context[26], "Save, ", 6 ) )
      return refalrts::cNoMemory;
    if( ! refalrts::alloc_open_call( context[27] ) )
      return refalrts::cNoMemory;
    if( ! refalrts::alloc_name( context[28], StrFromInt, "StrFromInt" ) )
      return refalrts::cNoMemory;
    if( ! refalrts::alloc_close_call( context[29] ) )
      return refalrts::cNoMemory;
    if( ! refalrts::alloc_chars( context[30], context[31], ", ", 2 ) )
      return refalrts::cNoMemory;
    if( ! refalrts::alloc_open_call( context[32] ) )
      return refalrts::cNoMemory;
    if( ! refalrts::alloc_name( context[33], StrFromInt, "StrFromInt" ) )
      return refalrts::cNoMemory;
    if( ! refalrts::alloc_char( context[34], ' ' ) )
      return refalrts::cNoMemory;
    if( ! refalrts::alloc_open_call( context[35] ) )
      return refalrts::cNoMemory;
    if( ! refalrts::alloc_name( context[36], StrFromInt, "StrFromInt" ) )
      return refalrts::cNoMemory;
    if( ! refalrts::alloc_close_call( context[37] ) )
      return refalrts::cNoMemory;
    if( ! refalrts::alloc_chars( context[38], context[39], "},", 2 ) )
      return refalrts::cNoMemory;
    if( ! refalrts::alloc_close_bracket( context[40] ) )
      return refalrts::cNoMemory;
    refalrts::reinit_char( context[13], 'l' );
    refalrts::update_name( context[4], PrintDirection, "PrintDirection" );
    refalrts::reinit_close_call( context[12] );
    refalrts::reinit_char( context[1], ',' );
    refalrts::link_brackets( context[11], context[40] );
    refalrts::push_stack( context[37] );
    refalrts::push_stack( context[35] );
    refalrts::push_stack( context[12] );
    refalrts::push_stack( context[32] );
    refalrts::push_stack( context[29] );
    refalrts::push_stack( context[27] );
    refalrts::push_stack( context[24] );
    refalrts::push_stack( context[0] );
    refalrts::link_brackets( context[7], context[8] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = arg_end->next;
    res = refalrts::splice_evar( res, context[37], context[40] );
    res = refalrts::splice_evar( res, context[15], context[15] );
    res = refalrts::splice_evar( res, context[34], context[36] );
    res = refalrts::splice_evar( res, context[17], context[1] );
    res = refalrts::splice_evar( res, context[29], context[33] );
    res = refalrts::splice_evar( res, context[16], context[16] );
    res = refalrts::splice_evar( res, context[24], context[28] );
    res = refalrts::splice_evar( res, context[14], context[14] );
    res = refalrts::splice_evar( res, context[0], context[4] );
    res = refalrts::splice_evar( res, context[22], context[23] );
    res = refalrts::splice_evar( res, context[13], context[13] );
    res = refalrts::splice_evar( res, context[20], context[21] );
    res = refalrts::splice_evar( res, context[18], context[19] );
    res = refalrts::splice_evar( res, context[7], context[11] );
    refalrts::use( res );
    return refalrts::FnResult(refalrts::cSuccess | (__LINE__ << 8));
  } while ( 0 );

  do {
    refalrts::start_sentence();
    //(E )(#CmdiIdentS S S )
    // </0 & GenCommand/4 (/7 e.Indent#1/5 )/8 (/11 # CmdiIdent/13 s.Direction#1/14 s.BracketNumber#1/15 s.NameId#1/16 )/12 >/1
    if( ! refalrts::ident_term(  & ident_CmdiIdent<int>::name, context[13] ) )
      continue;
    // closed e.Indent#1 as range 5
    context[66] = context[9];
    context[67] = context[10];
    if( ! refalrts::svar_left( context[14], context[66], context[67] ) )
      continue;
    if( ! refalrts::svar_left( context[15], context[66], context[67] ) )
      continue;
    if( ! refalrts::svar_left( context[16], context[66], context[67] ) )
      continue;
    if( ! refalrts::empty_seq( context[66], context[67] ) )
      continue;

    refalrts::reset_allocator();
    //TRASH: {REMOVED TILE}  {REMOVED TILE}  {REMOVED TILE}  {REMOVED TILE}  {REMOVED TILE}  {REMOVED TILE}  {REMOVED TILE}  {REMOVED TILE} 
    //RESULT: Tile{ [[ } Tile{ AsIs: (/7 AsIs: e.Indent#1/5 AsIs: )/8 AsIs: (/11 } e.Indent#1/5/17"{ref"/19 Tile{ HalfReuse: 'a'/13 }"lrts::icIdent"/21 Tile{ AsIs: </0 Reuse: & PrintDirection/4 } Tile{ AsIs: s.Direction#1/14 } >/23", 0, "/24 </26 & StrFromInt/27 Tile{ AsIs: s.NameId#1/16 HalfReuse: >/12 HalfReuse: ','/1 } ' '/28 </29 & StrFromInt/30 Tile{ AsIs: s.BracketNumber#1/15 } >/31"},"/32 )/34 Tile{ ]] }
    if (! refalrts::copy_evar(context[17], context[18], context[5], context[6]))
      return refalrts::cNoMemory;
    if( ! refalrts::alloc_chars( context[19], context[20], "{ref", 4 ) )
      return refalrts::cNoMemory;
    if( ! refalrts::alloc_chars( context[21], context[22], "lrts::icIdent", 13 ) )
      return refalrts::cNoMemory;
    if( ! refalrts::alloc_close_call( context[23] ) )
      return refalrts::cNoMemory;
    if( ! refalrts::alloc_chars( context[24], context[25], ", 0, ", 5 ) )
      return refalrts::cNoMemory;
    if( ! refalrts::alloc_open_call( context[26] ) )
      return refalrts::cNoMemory;
    if( ! refalrts::alloc_name( context[27], StrFromInt, "StrFromInt" ) )
      return refalrts::cNoMemory;
    if( ! refalrts::alloc_char( context[28], ' ' ) )
      return refalrts::cNoMemory;
    if( ! refalrts::alloc_open_call( context[29] ) )
      return refalrts::cNoMemory;
    if( ! refalrts::alloc_name( context[30], StrFromInt, "StrFromInt" ) )
      return refalrts::cNoMemory;
    if( ! refalrts::alloc_close_call( context[31] ) )
      return refalrts::cNoMemory;
    if( ! refalrts::alloc_chars( context[32], context[33], "},", 2 ) )
      return refalrts::cNoMemory;
    if( ! refalrts::alloc_close_bracket( context[34] ) )
      return refalrts::cNoMemory;
    refalrts::reinit_char( context[13], 'a' );
    refalrts::update_name( context[4], PrintDirection, "PrintDirection" );
    refalrts::reinit_close_call( context[12] );
    refalrts::reinit_char( context[1], ',' );
    refalrts::link_brackets( context[11], context[34] );
    refalrts::push_stack( context[31] );
    refalrts::push_stack( context[29] );
    refalrts::push_stack( context[12] );
    refalrts::push_stack( context[26] );
    refalrts::push_stack( context[23] );
    refalrts::push_stack( context[0] );
    refalrts::link_brackets( context[7], context[8] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = arg_end->next;
    res = refalrts::splice_evar( res, context[31], context[34] );
    res = refalrts::splice_evar( res, context[15], context[15] );
    res = refalrts::splice_evar( res, context[28], context[30] );
    res = refalrts::splice_evar( res, context[16], context[1] );
    res = refalrts::splice_evar( res, context[23], context[27] );
    res = refalrts::splice_evar( res, context[14], context[14] );
    res = refalrts::splice_evar( res, context[0], context[4] );
    res = refalrts::splice_evar( res, context[21], context[22] );
    res = refalrts::splice_evar( res, context[13], context[13] );
    res = refalrts::splice_evar( res, context[19], context[20] );
    res = refalrts::splice_evar( res, context[17], context[18] );
    res = refalrts::splice_evar( res, context[7], context[11] );
    refalrts::use( res );
    return refalrts::FnResult(refalrts::cSuccess | (__LINE__ << 8));
  } while ( 0 );

  do {
    refalrts::start_sentence();
    //(E )(#CmdiIdentSaveS S S S )
    // </0 & GenCommand/4 (/7 e.Indent#1/5 )/8 (/11 # CmdiIdentSave/13 s.Direction#1/14 s.BracketNumber#1/15 s.SaveOffset#1/16 s.NameId#1/17 )/12 >/1
    if( ! refalrts::ident_term(  & ident_CmdiIdentSave<int>::name, context[13] ) )
      continue;
    // closed e.Indent#1 as range 5
    context[66] = context[9];
    context[67] = context[10];
    if( ! refalrts::svar_left( context[14], context[66], context[67] ) )
      continue;
    if( ! refalrts::svar_left( context[15], context[66], context[67] ) )
      continue;
    if( ! refalrts::svar_left( context[16], context[66], context[67] ) )
      continue;
    if( ! refalrts::svar_left( context[17], context[66], context[67] ) )
      continue;
    if( ! refalrts::empty_seq( context[66], context[67] ) )
      continue;

    refalrts::reset_allocator();
    //TRASH: {REMOVED TILE}  {REMOVED TILE}  {REMOVED TILE}  {REMOVED TILE}  {REMOVED TILE}  {REMOVED TILE}  {REMOVED TILE}  {REMOVED TILE}  {REMOVED TILE} 
    //RESULT: Tile{ [[ } Tile{ AsIs: (/7 AsIs: e.Indent#1/5 AsIs: )/8 AsIs: (/11 } e.Indent#1/5/18"{refa"/20 Tile{ HalfReuse: 'l'/13 }"rts::icIdent"/22 Tile{ AsIs: </0 Reuse: & PrintDirection/4 } Tile{ AsIs: s.Direction#1/14 } >/24"Save, "/25 </27 & StrFromInt/28 Tile{ AsIs: s.SaveOffset#1/16 } >/29", "/30 </32 & StrFromInt/33 Tile{ AsIs: s.NameId#1/17 HalfReuse: >/12 HalfReuse: ','/1 } ' '/34 </35 & StrFromInt/36 Tile{ AsIs: s.BracketNumber#1/15 } >/37"},"/38 )/40 Tile{ ]] }
    if (! refalrts::copy_evar(context[18], context[19], context[5], context[6]))
      return refalrts::cNoMemory;
    if( ! refalrts::alloc_chars( context[20], context[21], "{refa", 5 ) )
      return refalrts::cNoMemory;
    if( ! refalrts::alloc_chars( context[22], context[23], "rts::icIdent", 12 ) )
      return refalrts::cNoMemory;
    if( ! refalrts::alloc_close_call( context[24] ) )
      return refalrts::cNoMemory;
    if( ! refalrts::alloc_chars( context[25], context[26], "Save, ", 6 ) )
      return refalrts::cNoMemory;
    if( ! refalrts::alloc_open_call( context[27] ) )
      return refalrts::cNoMemory;
    if( ! refalrts::alloc_name( context[28], StrFromInt, "StrFromInt" ) )
      return refalrts::cNoMemory;
    if( ! refalrts::alloc_close_call( context[29] ) )
      return refalrts::cNoMemory;
    if( ! refalrts::alloc_chars( context[30], context[31], ", ", 2 ) )
      return refalrts::cNoMemory;
    if( ! refalrts::alloc_open_call( context[32] ) )
      return refalrts::cNoMemory;
    if( ! refalrts::alloc_name( context[33], StrFromInt, "StrFromInt" ) )
      return refalrts::cNoMemory;
    if( ! refalrts::alloc_char( context[34], ' ' ) )
      return refalrts::cNoMemory;
    if( ! refalrts::alloc_open_call( context[35] ) )
      return refalrts::cNoMemory;
    if( ! refalrts::alloc_name( context[36], StrFromInt, "StrFromInt" ) )
      return refalrts::cNoMemory;
    if( ! refalrts::alloc_close_call( context[37] ) )
      return refalrts::cNoMemory;
    if( ! refalrts::alloc_chars( context[38], context[39], "},", 2 ) )
      return refalrts::cNoMemory;
    if( ! refalrts::alloc_close_bracket( context[40] ) )
      return refalrts::cNoMemory;
    refalrts::reinit_char( context[13], 'l' );
    refalrts::update_name( context[4], PrintDirection, "PrintDirection" );
    refalrts::reinit_close_call( context[12] );
    refalrts::reinit_char( context[1], ',' );
    refalrts::link_brackets( context[11], context[40] );
    refalrts::push_stack( context[37] );
    refalrts::push_stack( context[35] );
    refalrts::push_stack( context[12] );
    refalrts::push_stack( context[32] );
    refalrts::push_stack( context[29] );
    refalrts::push_stack( context[27] );
    refalrts::push_stack( context[24] );
    refalrts::push_stack( context[0] );
    refalrts::link_brackets( context[7], context[8] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = arg_end->next;
    res = refalrts::splice_evar( res, context[37], context[40] );
    res = refalrts::splice_evar( res, context[15], context[15] );
    res = refalrts::splice_evar( res, context[34], context[36] );
    res = refalrts::splice_evar( res, context[17], context[1] );
    res = refalrts::splice_evar( res, context[29], context[33] );
    res = refalrts::splice_evar( res, context[16], context[16] );
    res = refalrts::splice_evar( res, context[24], context[28] );
    res = refalrts::splice_evar( res, context[14], context[14] );
    res = refalrts::splice_evar( res, context[0], context[4] );
    res = refalrts::splice_evar( res, context[22], context[23] );
    res = refalrts::splice_evar( res, context[13], context[13] );
    res = refalrts::splice_evar( res, context[20], context[21] );
    res = refalrts::splice_evar( res, context[18], context[19] );
    res = refalrts::splice_evar( res, context[7], context[11] );
    refalrts::use( res );
    return refalrts::FnResult(refalrts::cSuccess | (__LINE__ << 8));
  } while ( 0 );

  do {
    refalrts::start_sentence();
    //(E )(#CmdiBracketS S S )
    // </0 & GenCommand/4 (/7 e.Indent#1/5 )/8 (/11 # CmdiBracket/13 s.Direction#1/14 s.Num#1/15 s.NumRanges#1/16 )/12 >/1
    if( ! refalrts::ident_term(  & ident_CmdiBracket<int>::name, context[13] ) )
      continue;
    // closed e.Indent#1 as range 5
    context[66] = context[9];
    context[67] = context[10];
    if( ! refalrts::svar_left( context[14], context[66], context[67] ) )
      continue;
    if( ! refalrts::svar_left( context[15], context[66], context[67] ) )
      continue;
    if( ! refalrts::svar_left( context[16], context[66], context[67] ) )
      continue;
    if( ! refalrts::empty_seq( context[66], context[67] ) )
      continue;

    refalrts::reset_allocator();
    //TRASH: {REMOVED TILE}  {REMOVED TILE}  {REMOVED TILE}  {REMOVED TILE}  {REMOVED TILE}  {REMOVED TILE}  {REMOVED TILE}  {REMOVED TILE} 
    //RESULT: Tile{ [[ } Tile{ AsIs: (/7 AsIs: e.Indent#1/5 AsIs: )/8 AsIs: (/11 } e.Indent#1/5/17"{ref"/19 Tile{ HalfReuse: 'a'/13 }"lrts::icBracket"/21 Tile{ AsIs: </0 Reuse: & PrintDirection/4 } Tile{ AsIs: s.Direction#1/14 } >/23", 0, "/24 </26 & StrFromInt/27 Tile{ AsIs: s.NumRanges#1/16 HalfReuse: >/12 HalfReuse: ','/1 } ' '/28 </29 & StrFromInt/30 Tile{ AsIs: s.Num#1/15 } >/31"},"/32 )/34 Tile{ ]] }
    if (! refalrts::copy_evar(context[17], context[18], context[5], context[6]))
      return refalrts::cNoMemory;
    if( ! refalrts::alloc_chars( context[19], context[20], "{ref", 4 ) )
      return refalrts::cNoMemory;
    if( ! refalrts::alloc_chars( context[21], context[22], "lrts::icBracket", 15 ) )
      return refalrts::cNoMemory;
    if( ! refalrts::alloc_close_call( context[23] ) )
      return refalrts::cNoMemory;
    if( ! refalrts::alloc_chars( context[24], context[25], ", 0, ", 5 ) )
      return refalrts::cNoMemory;
    if( ! refalrts::alloc_open_call( context[26] ) )
      return refalrts::cNoMemory;
    if( ! refalrts::alloc_name( context[27], StrFromInt, "StrFromInt" ) )
      return refalrts::cNoMemory;
    if( ! refalrts::alloc_char( context[28], ' ' ) )
      return refalrts::cNoMemory;
    if( ! refalrts::alloc_open_call( context[29] ) )
      return refalrts::cNoMemory;
    if( ! refalrts::alloc_name( context[30], StrFromInt, "StrFromInt" ) )
      return refalrts::cNoMemory;
    if( ! refalrts::alloc_close_call( context[31] ) )
      return refalrts::cNoMemory;
    if( ! refalrts::alloc_chars( context[32], context[33], "},", 2 ) )
      return refalrts::cNoMemory;
    if( ! refalrts::alloc_close_bracket( context[34] ) )
      return refalrts::cNoMemory;
    refalrts::reinit_char( context[13], 'a' );
    refalrts::update_name( context[4], PrintDirection, "PrintDirection" );
    refalrts::reinit_close_call( context[12] );
    refalrts::reinit_char( context[1], ',' );
    refalrts::link_brackets( context[11], context[34] );
    refalrts::push_stack( context[31] );
    refalrts::push_stack( context[29] );
    refalrts::push_stack( context[12] );
    refalrts::push_stack( context[26] );
    refalrts::push_stack( context[23] );
    refalrts::push_stack( context[0] );
    refalrts::link_brackets( context[7], context[8] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = arg_end->next;
    res = refalrts::splice_evar( res, context[31], context[34] );
    res = refalrts::splice_evar( res, context[15], context[15] );
    res = refalrts::splice_evar( res, context[28], context[30] );
    res = refalrts::splice_evar( res, context[16], context[1] );
    res = refalrts::splice_evar( res, context[23], context[27] );
    res = refalrts::splice_evar( res, context[14], context[14] );
    res = refalrts::splice_evar( res, context[0], context[4] );
    res = refalrts::splice_evar( res, context[21], context[22] );
    res = refalrts::splice_evar( res, context[13], context[13] );
    res = refalrts::splice_evar( res, context[19], context[20] );
    res = refalrts::splice_evar( res, context[17], context[18] );
    res = refalrts::splice_evar( res, context[7], context[11] );
    refalrts::use( res );
    return refalrts::FnResult(refalrts::cSuccess | (__LINE__ << 8));
  } while ( 0 );

  do {
    refalrts::start_sentence();
    //(E )(#CmdiBracketsSaveS S S )
    // </0 & GenCommand/4 (/7 e.Indent#1/5 )/8 (/11 # CmdiBracketsSave/13 s.Direction#1/14 s.Num#1/15 s.NumRanges#1/16 )/12 >/1
    if( ! refalrts::ident_term(  & ident_CmdiBracketsSave<int>::name, context[13] ) )
      continue;
    // closed e.Indent#1 as range 5
    context[66] = context[9];
    context[67] = context[10];
    if( ! refalrts::svar_left( context[14], context[66], context[67] ) )
      continue;
    if( ! refalrts::svar_left( context[15], context[66], context[67] ) )
      continue;
    if( ! refalrts::svar_left( context[16], context[66], context[67] ) )
      continue;
    if( ! refalrts::empty_seq( context[66], context[67] ) )
      continue;

    refalrts::reset_allocator();
    //TRASH: {REMOVED TILE}  {REMOVED TILE}  {REMOVED TILE}  {REMOVED TILE}  {REMOVED TILE}  {REMOVED TILE}  {REMOVED TILE}  {REMOVED TILE} 
    //RESULT: Tile{ [[ } Tile{ AsIs: (/7 AsIs: e.Indent#1/5 AsIs: )/8 AsIs: (/11 } e.Indent#1/5/17"{ref"/19 Tile{ HalfReuse: 'a'/13 }"lrts::icBracket"/21 Tile{ AsIs: </0 Reuse: & PrintDirection/4 } Tile{ AsIs: s.Direction#1/14 } >/23"Save, 0, "/24 </26 & StrFromInt/27 Tile{ AsIs: s.NumRanges#1/16 HalfReuse: >/12 HalfReuse: ','/1 } ' '/28 </29 & StrFromInt/30 Tile{ AsIs: s.Num#1/15 } >/31"},"/32 )/34 Tile{ ]] }
    if (! refalrts::copy_evar(context[17], context[18], context[5], context[6]))
      return refalrts::cNoMemory;
    if( ! refalrts::alloc_chars( context[19], context[20], "{ref", 4 ) )
      return refalrts::cNoMemory;
    if( ! refalrts::alloc_chars( context[21], context[22], "lrts::icBracket", 15 ) )
      return refalrts::cNoMemory;
    if( ! refalrts::alloc_close_call( context[23] ) )
      return refalrts::cNoMemory;
    if( ! refalrts::alloc_chars( context[24], context[25], "Save, 0, ", 9 ) )
      return refalrts::cNoMemory;
    if( ! refalrts::alloc_open_call( context[26] ) )
      return refalrts::cNoMemory;
    if( ! refalrts::alloc_name( context[27], StrFromInt, "StrFromInt" ) )
      return refalrts::cNoMemory;
    if( ! refalrts::alloc_char( context[28], ' ' ) )
      return refalrts::cNoMemory;
    if( ! refalrts::alloc_open_call( context[29] ) )
      return refalrts::cNoMemory;
    if( ! refalrts::alloc_name( context[30], StrFromInt, "StrFromInt" ) )
      return refalrts::cNoMemory;
    if( ! refalrts::alloc_close_call( context[31] ) )
      return refalrts::cNoMemory;
    if( ! refalrts::alloc_chars( context[32], context[33], "},", 2 ) )
      return refalrts::cNoMemory;
    if( ! refalrts::alloc_close_bracket( context[34] ) )
      return refalrts::cNoMemory;
    refalrts::reinit_char( context[13], 'a' );
    refalrts::update_name( context[4], PrintDirection, "PrintDirection" );
    refalrts::reinit_close_call( context[12] );
    refalrts::reinit_char( context[1], ',' );
    refalrts::link_brackets( context[11], context[34] );
    refalrts::push_stack( context[31] );
    refalrts::push_stack( context[29] );
    refalrts::push_stack( context[12] );
    refalrts::push_stack( context[26] );
    refalrts::push_stack( context[23] );
    refalrts::push_stack( context[0] );
    refalrts::link_brackets( context[7], context[8] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = arg_end->next;
    res = refalrts::splice_evar( res, context[31], context[34] );
    res = refalrts::splice_evar( res, context[15], context[15] );
    res = refalrts::splice_evar( res, context[28], context[30] );
    res = refalrts::splice_evar( res, context[16], context[1] );
    res = refalrts::splice_evar( res, context[23], context[27] );
    res = refalrts::splice_evar( res, context[14], context[14] );
    res = refalrts::splice_evar( res, context[0], context[4] );
    res = refalrts::splice_evar( res, context[21], context[22] );
    res = refalrts::splice_evar( res, context[13], context[13] );
    res = refalrts::splice_evar( res, context[19], context[20] );
    res = refalrts::splice_evar( res, context[17], context[18] );
    res = refalrts::splice_evar( res, context[7], context[11] );
    refalrts::use( res );
    return refalrts::FnResult(refalrts::cSuccess | (__LINE__ << 8));
  } while ( 0 );

  do {
    refalrts::start_sentence();
    //(E )(#CmdiADTS S S S )
    // </0 & GenCommand/4 (/7 e.Indent#1/5 )/8 (/11 # CmdiADT/13 s.Direction#1/14 s.BracketNumber#1/15 s.InnerBrackets#1/16 s.NameId#1/17 )/12 >/1
    if( ! refalrts::ident_term(  & ident_CmdiADT<int>::name, context[13] ) )
      continue;
    // closed e.Indent#1 as range 5
    context[66] = context[9];
    context[67] = context[10];
    if( ! refalrts::svar_left( context[14], context[66], context[67] ) )
      continue;
    if( ! refalrts::svar_left( context[15], context[66], context[67] ) )
      continue;
    if( ! refalrts::svar_left( context[16], context[66], context[67] ) )
      continue;
    if( ! refalrts::svar_left( context[17], context[66], context[67] ) )
      continue;
    if( ! refalrts::empty_seq( context[66], context[67] ) )
      continue;

    refalrts::reset_allocator();
    //TRASH: {REMOVED TILE}  {REMOVED TILE}  {REMOVED TILE}  {REMOVED TILE}  {REMOVED TILE}  {REMOVED TILE}  {REMOVED TILE}  {REMOVED TILE}  {REMOVED TILE} 
    //RESULT: Tile{ [[ } Tile{ AsIs: (/7 AsIs: e.Indent#1/5 AsIs: )/8 AsIs: (/11 } e.Indent#1/5/18 Tile{ HalfReuse: '{'/13 }"refalrts::icADT"/20 Tile{ AsIs: </0 Reuse: & PrintDirection/4 } Tile{ AsIs: s.Direction#1/14 } >/22", "/23 </25 & StrFromInt/26 Tile{ AsIs: s.NameId#1/17 HalfReuse: >/12 HalfReuse: ','/1 } ' '/27 </28 & StrFromInt/29 Tile{ AsIs: s.InnerBrackets#1/16 } >/30", "/31 </33 & StrFromInt/34 Tile{ AsIs: s.BracketNumber#1/15 } >/35"},"/36 )/38 Tile{ ]] }
    if (! refalrts::copy_evar(context[18], context[19], context[5], context[6]))
      return refalrts::cNoMemory;
    if( ! refalrts::alloc_chars( context[20], context[21], "refalrts::icADT", 15 ) )
      return refalrts::cNoMemory;
    if( ! refalrts::alloc_close_call( context[22] ) )
      return refalrts::cNoMemory;
    if( ! refalrts::alloc_chars( context[23], context[24], ", ", 2 ) )
      return refalrts::cNoMemory;
    if( ! refalrts::alloc_open_call( context[25] ) )
      return refalrts::cNoMemory;
    if( ! refalrts::alloc_name( context[26], StrFromInt, "StrFromInt" ) )
      return refalrts::cNoMemory;
    if( ! refalrts::alloc_char( context[27], ' ' ) )
      return refalrts::cNoMemory;
    if( ! refalrts::alloc_open_call( context[28] ) )
      return refalrts::cNoMemory;
    if( ! refalrts::alloc_name( context[29], StrFromInt, "StrFromInt" ) )
      return refalrts::cNoMemory;
    if( ! refalrts::alloc_close_call( context[30] ) )
      return refalrts::cNoMemory;
    if( ! refalrts::alloc_chars( context[31], context[32], ", ", 2 ) )
      return refalrts::cNoMemory;
    if( ! refalrts::alloc_open_call( context[33] ) )
      return refalrts::cNoMemory;
    if( ! refalrts::alloc_name( context[34], StrFromInt, "StrFromInt" ) )
      return refalrts::cNoMemory;
    if( ! refalrts::alloc_close_call( context[35] ) )
      return refalrts::cNoMemory;
    if( ! refalrts::alloc_chars( context[36], context[37], "},", 2 ) )
      return refalrts::cNoMemory;
    if( ! refalrts::alloc_close_bracket( context[38] ) )
      return refalrts::cNoMemory;
    refalrts::reinit_char( context[13], '{' );
    refalrts::update_name( context[4], PrintDirection, "PrintDirection" );
    refalrts::reinit_close_call( context[12] );
    refalrts::reinit_char( context[1], ',' );
    refalrts::link_brackets( context[11], context[38] );
    refalrts::push_stack( context[35] );
    refalrts::push_stack( context[33] );
    refalrts::push_stack( context[30] );
    refalrts::push_stack( context[28] );
    refalrts::push_stack( context[12] );
    refalrts::push_stack( context[25] );
    refalrts::push_stack( context[22] );
    refalrts::push_stack( context[0] );
    refalrts::link_brackets( context[7], context[8] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = arg_end->next;
    res = refalrts::splice_evar( res, context[35], context[38] );
    res = refalrts::splice_evar( res, context[15], context[15] );
    res = refalrts::splice_evar( res, context[30], context[34] );
    res = refalrts::splice_evar( res, context[16], context[16] );
    res = refalrts::splice_evar( res, context[27], context[29] );
    res = refalrts::splice_evar( res, context[17], context[1] );
    res = refalrts::splice_evar( res, context[22], context[26] );
    res = refalrts::splice_evar( res, context[14], context[14] );
    res = refalrts::splice_evar( res, context[0], context[4] );
    res = refalrts::splice_evar( res, context[20], context[21] );
    res = refalrts::splice_evar( res, context[13], context[13] );
    res = refalrts::splice_evar( res, context[18], context[19] );
    res = refalrts::splice_evar( res, context[7], context[11] );
    refalrts::use( res );
    return refalrts::FnResult(refalrts::cSuccess | (__LINE__ << 8));
  } while ( 0 );

  do {
    refalrts::start_sentence();
    //(E )(#CmdiADTSaveS S S S )
    // </0 & GenCommand/4 (/7 e.Indent#1/5 )/8 (/11 # CmdiADTSave/13 s.Direction#1/14 s.BracketNumber#1/15 s.InnerBrackets#1/16 s.NameId#1/17 )/12 >/1
    if( ! refalrts::ident_term(  & ident_CmdiADTSave<int>::name, context[13] ) )
      continue;
    // closed e.Indent#1 as range 5
    context[66] = context[9];
    context[67] = context[10];
    if( ! refalrts::svar_left( context[14], context[66], context[67] ) )
      continue;
    if( ! refalrts::svar_left( context[15], context[66], context[67] ) )
      continue;
    if( ! refalrts::svar_left( context[16], context[66], context[67] ) )
      continue;
    if( ! refalrts::svar_left( context[17], context[66], context[67] ) )
      continue;
    if( ! refalrts::empty_seq( context[66], context[67] ) )
      continue;

    refalrts::reset_allocator();
    //TRASH: {REMOVED TILE}  {REMOVED TILE}  {REMOVED TILE}  {REMOVED TILE}  {REMOVED TILE}  {REMOVED TILE}  {REMOVED TILE}  {REMOVED TILE}  {REMOVED TILE} 
    //RESULT: Tile{ [[ } Tile{ AsIs: (/7 AsIs: e.Indent#1/5 AsIs: )/8 AsIs: (/11 } e.Indent#1/5/18"{refa"/20 Tile{ HalfReuse: 'l'/13 }"rts::icADT"/22 Tile{ AsIs: </0 Reuse: & PrintDirection/4 } Tile{ AsIs: s.Direction#1/14 } >/24"Save, "/25 </27 & StrFromInt/28 Tile{ AsIs: s.NameId#1/17 HalfReuse: >/12 HalfReuse: ','/1 } ' '/29 </30 & StrFromInt/31 Tile{ AsIs: s.InnerBrackets#1/16 } >/32", "/33 </35 & StrFromInt/36 Tile{ AsIs: s.BracketNumber#1/15 } >/37"},"/38 )/40 Tile{ ]] }
    if (! refalrts::copy_evar(context[18], context[19], context[5], context[6]))
      return refalrts::cNoMemory;
    if( ! refalrts::alloc_chars( context[20], context[21], "{refa", 5 ) )
      return refalrts::cNoMemory;
    if( ! refalrts::alloc_chars( context[22], context[23], "rts::icADT", 10 ) )
      return refalrts::cNoMemory;
    if( ! refalrts::alloc_close_call( context[24] ) )
      return refalrts::cNoMemory;
    if( ! refalrts::alloc_chars( context[25], context[26], "Save, ", 6 ) )
      return refalrts::cNoMemory;
    if( ! refalrts::alloc_open_call( context[27] ) )
      return refalrts::cNoMemory;
    if( ! refalrts::alloc_name( context[28], StrFromInt, "StrFromInt" ) )
      return refalrts::cNoMemory;
    if( ! refalrts::alloc_char( context[29], ' ' ) )
      return refalrts::cNoMemory;
    if( ! refalrts::alloc_open_call( context[30] ) )
      return refalrts::cNoMemory;
    if( ! refalrts::alloc_name( context[31], StrFromInt, "StrFromInt" ) )
      return refalrts::cNoMemory;
    if( ! refalrts::alloc_close_call( context[32] ) )
      return refalrts::cNoMemory;
    if( ! refalrts::alloc_chars( context[33], context[34], ", ", 2 ) )
      return refalrts::cNoMemory;
    if( ! refalrts::alloc_open_call( context[35] ) )
      return refalrts::cNoMemory;
    if( ! refalrts::alloc_name( context[36], StrFromInt, "StrFromInt" ) )
      return refalrts::cNoMemory;
    if( ! refalrts::alloc_close_call( context[37] ) )
      return refalrts::cNoMemory;
    if( ! refalrts::alloc_chars( context[38], context[39], "},", 2 ) )
      return refalrts::cNoMemory;
    if( ! refalrts::alloc_close_bracket( context[40] ) )
      return refalrts::cNoMemory;
    refalrts::reinit_char( context[13], 'l' );
    refalrts::update_name( context[4], PrintDirection, "PrintDirection" );
    refalrts::reinit_close_call( context[12] );
    refalrts::reinit_char( context[1], ',' );
    refalrts::link_brackets( context[11], context[40] );
    refalrts::push_stack( context[37] );
    refalrts::push_stack( context[35] );
    refalrts::push_stack( context[32] );
    refalrts::push_stack( context[30] );
    refalrts::push_stack( context[12] );
    refalrts::push_stack( context[27] );
    refalrts::push_stack( context[24] );
    refalrts::push_stack( context[0] );
    refalrts::link_brackets( context[7], context[8] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = arg_end->next;
    res = refalrts::splice_evar( res, context[37], context[40] );
    res = refalrts::splice_evar( res, context[15], context[15] );
    res = refalrts::splice_evar( res, context[32], context[36] );
    res = refalrts::splice_evar( res, context[16], context[16] );
    res = refalrts::splice_evar( res, context[29], context[31] );
    res = refalrts::splice_evar( res, context[17], context[1] );
    res = refalrts::splice_evar( res, context[24], context[28] );
    res = refalrts::splice_evar( res, context[14], context[14] );
    res = refalrts::splice_evar( res, context[0], context[4] );
    res = refalrts::splice_evar( res, context[22], context[23] );
    res = refalrts::splice_evar( res, context[13], context[13] );
    res = refalrts::splice_evar( res, context[20], context[21] );
    res = refalrts::splice_evar( res, context[18], context[19] );
    res = refalrts::splice_evar( res, context[7], context[11] );
    refalrts::use( res );
    return refalrts::FnResult(refalrts::cSuccess | (__LINE__ << 8));
  } while ( 0 );

  do {
    refalrts::start_sentence();
    //(E )(#CmdiCallSaveS S S )
    // </0 & GenCommand/4 (/7 e.Indent#1/5 )/8 (/11 # CmdiCallSave/13 s.Direction#1/14 s.BracketNumber#1/15 s.InnerBrackets#1/16 )/12 >/1
    if( ! refalrts::ident_term(  & ident_CmdiCallSave<int>::name, context[13] ) )
      continue;
    // closed e.Indent#1 as range 5
    context[66] = context[9];
    context[67] = context[10];
    if( ! refalrts::svar_left( context[14], context[66], context[67] ) )
      continue;
    if( ! refalrts::svar_left( context[15], context[66], context[67] ) )
      continue;
    if( ! refalrts::svar_left( context[16], context[66], context[67] ) )
      continue;
    if( ! refalrts::empty_seq( context[66], context[67] ) )
      continue;

    refalrts::reset_allocator();
    //TRASH: {REMOVED TILE}  {REMOVED TILE}  {REMOVED TILE}  {REMOVED TILE}  {REMOVED TILE}  {REMOVED TILE}  {REMOVED TILE}  {REMOVED TILE} 
    //RESULT: Tile{ [[ } Tile{ AsIs: (/7 AsIs: e.Indent#1/5 AsIs: )/8 AsIs: (/11 } e.Indent#1/5/17"{ref"/19 Tile{ HalfReuse: 'a'/13 }"lrts::icCallSave"/21 Tile{ AsIs: </0 Reuse: & PrintDirection/4 } Tile{ AsIs: s.Direction#1/14 } >/23", 0, "/24 </26 & StrFromInt/27 Tile{ AsIs: s.InnerBrackets#1/16 HalfReuse: >/12 HalfReuse: ','/1 } ' '/28 </29 & StrFromInt/30 Tile{ AsIs: s.BracketNumber#1/15 } >/31"},"/32 )/34 Tile{ ]] }
    if (! refalrts::copy_evar(context[17], context[18], context[5], context[6]))
      return refalrts::cNoMemory;
    if( ! refalrts::alloc_chars( context[19], context[20], "{ref", 4 ) )
      return refalrts::cNoMemory;
    if( ! refalrts::alloc_chars( context[21], context[22], "lrts::icCallSave", 16 ) )
      return refalrts::cNoMemory;
    if( ! refalrts::alloc_close_call( context[23] ) )
      return refalrts::cNoMemory;
    if( ! refalrts::alloc_chars( context[24], context[25], ", 0, ", 5 ) )
      return refalrts::cNoMemory;
    if( ! refalrts::alloc_open_call( context[26] ) )
      return refalrts::cNoMemory;
    if( ! refalrts::alloc_name( context[27], StrFromInt, "StrFromInt" ) )
      return refalrts::cNoMemory;
    if( ! refalrts::alloc_char( context[28], ' ' ) )
      return refalrts::cNoMemory;
    if( ! refalrts::alloc_open_call( context[29] ) )
      return refalrts::cNoMemory;
    if( ! refalrts::alloc_name( context[30], StrFromInt, "StrFromInt" ) )
      return refalrts::cNoMemory;
    if( ! refalrts::alloc_close_call( context[31] ) )
      return refalrts::cNoMemory;
    if( ! refalrts::alloc_chars( context[32], context[33], "},", 2 ) )
      return refalrts::cNoMemory;
    if( ! refalrts::alloc_close_bracket( context[34] ) )
      return refalrts::cNoMemory;
    refalrts::reinit_char( context[13], 'a' );
    refalrts::update_name( context[4], PrintDirection, "PrintDirection" );
    refalrts::reinit_close_call( context[12] );
    refalrts::reinit_char( context[1], ',' );
    refalrts::link_brackets( context[11], context[34] );
    refalrts::push_stack( context[31] );
    refalrts::push_stack( context[29] );
    refalrts::push_stack( context[12] );
    refalrts::push_stack( context[26] );
    refalrts::push_stack( context[23] );
    refalrts::push_stack( context[0] );
    refalrts::link_brackets( context[7], context[8] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = arg_end->next;
    res = refalrts::splice_evar( res, context[31], context[34] );
    res = refalrts::splice_evar( res, context[15], context[15] );
    res = refalrts::splice_evar( res, context[28], context[30] );
    res = refalrts::splice_evar( res, context[16], context[1] );
    res = refalrts::splice_evar( res, context[23], context[27] );
    res = refalrts::splice_evar( res, context[14], context[14] );
    res = refalrts::splice_evar( res, context[0], context[4] );
    res = refalrts::splice_evar( res, context[21], context[22] );
    res = refalrts::splice_evar( res, context[13], context[13] );
    res = refalrts::splice_evar( res, context[19], context[20] );
    res = refalrts::splice_evar( res, context[17], context[18] );
    res = refalrts::splice_evar( res, context[7], context[11] );
    refalrts::use( res );
    return refalrts::FnResult(refalrts::cSuccess | (__LINE__ << 8));
  } while ( 0 );

  do {
    refalrts::start_sentence();
    //(E )(#CmdiEmptyS )
    // </0 & GenCommand/4 (/7 e.Indent#1/5 )/8 (/11 # CmdiEmpty/13 s.Num#1/14 )/12 >/1
    if( ! refalrts::ident_term(  & ident_CmdiEmpty<int>::name, context[13] ) )
      continue;
    // closed e.Indent#1 as range 5
    context[66] = context[9];
    context[67] = context[10];
    if( ! refalrts::svar_left( context[14], context[66], context[67] ) )
      continue;
    if( ! refalrts::empty_seq( context[66], context[67] ) )
      continue;

    refalrts::reset_allocator();
    //TRASH: {REMOVED TILE}  {REMOVED TILE}  {REMOVED TILE}  {REMOVED TILE}  {REMOVED TILE}  {REMOVED TILE} 
    //RESULT: Tile{ [[ } Tile{ AsIs: (/7 AsIs: e.Indent#1/5 AsIs: )/8 AsIs: (/11 } e.Indent#1/5/15 Tile{ HalfReuse: '{'/4 }"refalrts::icEmpty, 0, 0, "/17 Tile{ AsIs: </0 } Tile{ HalfReuse: & StrFromInt/13 AsIs: s.Num#1/14 HalfReuse: >/12 HalfReuse: '}'/1 } ','/19 )/20 Tile{ ]] }
    if (! refalrts::copy_evar(context[15], context[16], context[5], context[6]))
      return refalrts::cNoMemory;
    if( ! refalrts::alloc_chars( context[17], context[18], "refalrts::icEmpty, 0, 0, ", 25 ) )
      return refalrts::cNoMemory;
    if( ! refalrts::alloc_char( context[19], ',' ) )
      return refalrts::cNoMemory;
    if( ! refalrts::alloc_close_bracket( context[20] ) )
      return refalrts::cNoMemory;
    refalrts::reinit_char( context[4], '{' );
    refalrts::reinit_name( context[13], StrFromInt, "StrFromInt" );
    refalrts::reinit_close_call( context[12] );
    refalrts::reinit_char( context[1], '}' );
    refalrts::link_brackets( context[11], context[20] );
    refalrts::push_stack( context[12] );
    refalrts::push_stack( context[0] );
    refalrts::link_brackets( context[7], context[8] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = arg_end->next;
    res = refalrts::splice_evar( res, context[19], context[20] );
    res = refalrts::splice_evar( res, context[13], context[1] );
    res = refalrts::splice_evar( res, context[0], context[0] );
    res = refalrts::splice_evar( res, context[17], context[18] );
    res = refalrts::splice_evar( res, context[4], context[4] );
    res = refalrts::splice_evar( res, context[15], context[16] );
    res = refalrts::splice_evar( res, context[7], context[11] );
    refalrts::use( res );
    return refalrts::FnResult(refalrts::cSuccess | (__LINE__ << 8));
  } while ( 0 );

  do {
    refalrts::start_sentence();
    //(E )(#CmdiVarS S S S )
    // </0 & GenCommand/4 (/7 e.Indent#1/5 )/8 (/11 # CmdiVar/13 s.Direction#1/14 s.BracketNumber#1/15 s.Mode#1/16 s.VarNumber#1/17 )/12 >/1
    if( ! refalrts::ident_term(  & ident_CmdiVar<int>::name, context[13] ) )
      continue;
    // closed e.Indent#1 as range 5
    context[66] = context[9];
    context[67] = context[10];
    if( ! refalrts::svar_left( context[14], context[66], context[67] ) )
      continue;
    if( ! refalrts::svar_left( context[15], context[66], context[67] ) )
      continue;
    if( ! refalrts::svar_left( context[16], context[66], context[67] ) )
      continue;
    if( ! refalrts::svar_left( context[17], context[66], context[67] ) )
      continue;
    if( ! refalrts::empty_seq( context[66], context[67] ) )
      continue;

    refalrts::reset_allocator();
    //TRASH: {REMOVED TILE}  {REMOVED TILE}  {REMOVED TILE}  {REMOVED TILE}  {REMOVED TILE}  {REMOVED TILE}  {REMOVED TILE}  {REMOVED TILE}  {REMOVED TILE} 
    //RESULT: Tile{ [[ } Tile{ AsIs: (/7 AsIs: e.Indent#1/5 AsIs: )/8 AsIs: (/11 } e.Indent#1/5/18"{refa"/20 Tile{ HalfReuse: 'l'/13 }"rts::ic"/22 Tile{ AsIs: s.Mode#1/16 }"Var"/24 Tile{ AsIs: </0 Reuse: & PrintDirection/4 } Tile{ AsIs: s.Direction#1/14 } >/26", 0, "/27 </29 & StrFromInt/30 Tile{ AsIs: s.VarNumber#1/17 HalfReuse: >/12 HalfReuse: ','/1 } ' '/31 </32 & StrFromInt/33 Tile{ AsIs: s.BracketNumber#1/15 } >/34"},"/35 )/37 Tile{ ]] }
    if (! refalrts::copy_evar(context[18], context[19], context[5], context[6]))
      return refalrts::cNoMemory;
    if( ! refalrts::alloc_chars( context[20], context[21], "{refa", 5 ) )
      return refalrts::cNoMemory;
    if( ! refalrts::alloc_chars( context[22], context[23], "rts::ic", 7 ) )
      return refalrts::cNoMemory;
    if( ! refalrts::alloc_chars( context[24], context[25], "Var", 3 ) )
      return refalrts::cNoMemory;
    if( ! refalrts::alloc_close_call( context[26] ) )
      return refalrts::cNoMemory;
    if( ! refalrts::alloc_chars( context[27], context[28], ", 0, ", 5 ) )
      return refalrts::cNoMemory;
    if( ! refalrts::alloc_open_call( context[29] ) )
      return refalrts::cNoMemory;
    if( ! refalrts::alloc_name( context[30], StrFromInt, "StrFromInt" ) )
      return refalrts::cNoMemory;
    if( ! refalrts::alloc_char( context[31], ' ' ) )
      return refalrts::cNoMemory;
    if( ! refalrts::alloc_open_call( context[32] ) )
      return refalrts::cNoMemory;
    if( ! refalrts::alloc_name( context[33], StrFromInt, "StrFromInt" ) )
      return refalrts::cNoMemory;
    if( ! refalrts::alloc_close_call( context[34] ) )
      return refalrts::cNoMemory;
    if( ! refalrts::alloc_chars( context[35], context[36], "},", 2 ) )
      return refalrts::cNoMemory;
    if( ! refalrts::alloc_close_bracket( context[37] ) )
      return refalrts::cNoMemory;
    refalrts::reinit_char( context[13], 'l' );
    refalrts::update_name( context[4], PrintDirection, "PrintDirection" );
    refalrts::reinit_close_call( context[12] );
    refalrts::reinit_char( context[1], ',' );
    refalrts::link_brackets( context[11], context[37] );
    refalrts::push_stack( context[34] );
    refalrts::push_stack( context[32] );
    refalrts::push_stack( context[12] );
    refalrts::push_stack( context[29] );
    refalrts::push_stack( context[26] );
    refalrts::push_stack( context[0] );
    refalrts::link_brackets( context[7], context[8] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = arg_end->next;
    res = refalrts::splice_evar( res, context[34], context[37] );
    res = refalrts::splice_evar( res, context[15], context[15] );
    res = refalrts::splice_evar( res, context[31], context[33] );
    res = refalrts::splice_evar( res, context[17], context[1] );
    res = refalrts::splice_evar( res, context[26], context[30] );
    res = refalrts::splice_evar( res, context[14], context[14] );
    res = refalrts::splice_evar( res, context[0], context[4] );
    res = refalrts::splice_evar( res, context[24], context[25] );
    res = refalrts::splice_evar( res, context[16], context[16] );
    res = refalrts::splice_evar( res, context[22], context[23] );
    res = refalrts::splice_evar( res, context[13], context[13] );
    res = refalrts::splice_evar( res, context[20], context[21] );
    res = refalrts::splice_evar( res, context[18], context[19] );
    res = refalrts::splice_evar( res, context[7], context[11] );
    refalrts::use( res );
    return refalrts::FnResult(refalrts::cSuccess | (__LINE__ << 8));
  } while ( 0 );

  do {
    refalrts::start_sentence();
    //(E )(#CmdiVarSaveS S S S )
    // </0 & GenCommand/4 (/7 e.Indent#1/5 )/8 (/11 # CmdiVarSave/13 s.Direction#1/14 s.BracketNumber#1/15 s.Mode#1/16 s.VarNumber#1/17 )/12 >/1
    if( ! refalrts::ident_term(  & ident_CmdiVarSave<int>::name, context[13] ) )
      continue;
    // closed e.Indent#1 as range 5
    context[66] = context[9];
    context[67] = context[10];
    if( ! refalrts::svar_left( context[14], context[66], context[67] ) )
      continue;
    if( ! refalrts::svar_left( context[15], context[66], context[67] ) )
      continue;
    if( ! refalrts::svar_left( context[16], context[66], context[67] ) )
      continue;
    if( ! refalrts::svar_left( context[17], context[66], context[67] ) )
      continue;
    if( ! refalrts::empty_seq( context[66], context[67] ) )
      continue;

    refalrts::reset_allocator();
    //TRASH: {REMOVED TILE}  {REMOVED TILE}  {REMOVED TILE}  {REMOVED TILE}  {REMOVED TILE}  {REMOVED TILE}  {REMOVED TILE}  {REMOVED TILE}  {REMOVED TILE} 
    //RESULT: Tile{ [[ } Tile{ AsIs: (/7 AsIs: e.Indent#1/5 AsIs: )/8 AsIs: (/11 } e.Indent#1/5/18"{refa"/20 Tile{ HalfReuse: 'l'/13 }"rts::ic"/22 Tile{ AsIs: s.Mode#1/16 }"Var"/24 Tile{ AsIs: </0 Reuse: & PrintDirection/4 } Tile{ AsIs: s.Direction#1/14 } >/26"Save, 0, "/27 </29 & StrFromInt/30 Tile{ AsIs: s.VarNumber#1/17 HalfReuse: >/12 HalfReuse: ','/1 } ' '/31 </32 & StrFromInt/33 Tile{ AsIs: s.BracketNumber#1/15 } >/34"},"/35 )/37 Tile{ ]] }
    if (! refalrts::copy_evar(context[18], context[19], context[5], context[6]))
      return refalrts::cNoMemory;
    if( ! refalrts::alloc_chars( context[20], context[21], "{refa", 5 ) )
      return refalrts::cNoMemory;
    if( ! refalrts::alloc_chars( context[22], context[23], "rts::ic", 7 ) )
      return refalrts::cNoMemory;
    if( ! refalrts::alloc_chars( context[24], context[25], "Var", 3 ) )
      return refalrts::cNoMemory;
    if( ! refalrts::alloc_close_call( context[26] ) )
      return refalrts::cNoMemory;
    if( ! refalrts::alloc_chars( context[27], context[28], "Save, 0, ", 9 ) )
      return refalrts::cNoMemory;
    if( ! refalrts::alloc_open_call( context[29] ) )
      return refalrts::cNoMemory;
    if( ! refalrts::alloc_name( context[30], StrFromInt, "StrFromInt" ) )
      return refalrts::cNoMemory;
    if( ! refalrts::alloc_char( context[31], ' ' ) )
      return refalrts::cNoMemory;
    if( ! refalrts::alloc_open_call( context[32] ) )
      return refalrts::cNoMemory;
    if( ! refalrts::alloc_name( context[33], StrFromInt, "StrFromInt" ) )
      return refalrts::cNoMemory;
    if( ! refalrts::alloc_close_call( context[34] ) )
      return refalrts::cNoMemory;
    if( ! refalrts::alloc_chars( context[35], context[36], "},", 2 ) )
      return refalrts::cNoMemory;
    if( ! refalrts::alloc_close_bracket( context[37] ) )
      return refalrts::cNoMemory;
    refalrts::reinit_char( context[13], 'l' );
    refalrts::update_name( context[4], PrintDirection, "PrintDirection" );
    refalrts::reinit_close_call( context[12] );
    refalrts::reinit_char( context[1], ',' );
    refalrts::link_brackets( context[11], context[37] );
    refalrts::push_stack( context[34] );
    refalrts::push_stack( context[32] );
    refalrts::push_stack( context[12] );
    refalrts::push_stack( context[29] );
    refalrts::push_stack( context[26] );
    refalrts::push_stack( context[0] );
    refalrts::link_brackets( context[7], context[8] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = arg_end->next;
    res = refalrts::splice_evar( res, context[34], context[37] );
    res = refalrts::splice_evar( res, context[15], context[15] );
    res = refalrts::splice_evar( res, context[31], context[33] );
    res = refalrts::splice_evar( res, context[17], context[1] );
    res = refalrts::splice_evar( res, context[26], context[30] );
    res = refalrts::splice_evar( res, context[14], context[14] );
    res = refalrts::splice_evar( res, context[0], context[4] );
    res = refalrts::splice_evar( res, context[24], context[25] );
    res = refalrts::splice_evar( res, context[16], context[16] );
    res = refalrts::splice_evar( res, context[22], context[23] );
    res = refalrts::splice_evar( res, context[13], context[13] );
    res = refalrts::splice_evar( res, context[20], context[21] );
    res = refalrts::splice_evar( res, context[18], context[19] );
    res = refalrts::splice_evar( res, context[7], context[11] );
    refalrts::use( res );
    return refalrts::FnResult(refalrts::cSuccess | (__LINE__ << 8));
  } while ( 0 );

  do {
    refalrts::start_sentence();
    //(E )(#CmdiRepeatS S S S S )
    // </0 & GenCommand/4 (/7 e.Indent#1/5 )/8 (/11 # CmdiRepeat/13 s.Direction#1/14 s.BracketNumber#1/15 s.Mode#1/16 s.VarNumber#1/17 s.SampleNumber#1/18 )/12 >/1
    if( ! refalrts::ident_term(  & ident_CmdiRepeat<int>::name, context[13] ) )
      continue;
    // closed e.Indent#1 as range 5
    context[66] = context[9];
    context[67] = context[10];
    if( ! refalrts::svar_left( context[14], context[66], context[67] ) )
      continue;
    if( ! refalrts::svar_left( context[15], context[66], context[67] ) )
      continue;
    if( ! refalrts::svar_left( context[16], context[66], context[67] ) )
      continue;
    if( ! refalrts::svar_left( context[17], context[66], context[67] ) )
      continue;
    if( ! refalrts::svar_left( context[18], context[66], context[67] ) )
      continue;
    if( ! refalrts::empty_seq( context[66], context[67] ) )
      continue;

    refalrts::reset_allocator();
    //TRASH: {REMOVED TILE}  {REMOVED TILE}  {REMOVED TILE}  {REMOVED TILE}  {REMOVED TILE}  {REMOVED TILE}  {REMOVED TILE}  {REMOVED TILE}  {REMOVED TILE}  {REMOVED TILE} 
    //RESULT: Tile{ [[ } Tile{ AsIs: (/7 AsIs: e.Indent#1/5 AsIs: )/8 AsIs: (/11 } e.Indent#1/5/19"{refal"/21 Tile{ HalfReuse: 'r'/13 }"ts::ic"/23 Tile{ AsIs: s.Mode#1/16 }"Repeat"/25 Tile{ AsIs: </0 Reuse: & PrintDirection/4 } Tile{ AsIs: s.Direction#1/14 } >/27", "/28 </30 & StrFromInt/31 Tile{ AsIs: s.VarNumber#1/17 } >/32", "/33 </35 & StrFromInt/36 Tile{ AsIs: s.SampleNumber#1/18 HalfReuse: >/12 HalfReuse: ','/1 } ' '/37 </38 & StrFromInt/39 Tile{ AsIs: s.BracketNumber#1/15 } >/40"},"/41 )/43 Tile{ ]] }
    if (! refalrts::copy_evar(context[19], context[20], context[5], context[6]))
      return refalrts::cNoMemory;
    if( ! refalrts::alloc_chars( context[21], context[22], "{refal", 6 ) )
      return refalrts::cNoMemory;
    if( ! refalrts::alloc_chars( context[23], context[24], "ts::ic", 6 ) )
      return refalrts::cNoMemory;
    if( ! refalrts::alloc_chars( context[25], context[26], "Repeat", 6 ) )
      return refalrts::cNoMemory;
    if( ! refalrts::alloc_close_call( context[27] ) )
      return refalrts::cNoMemory;
    if( ! refalrts::alloc_chars( context[28], context[29], ", ", 2 ) )
      return refalrts::cNoMemory;
    if( ! refalrts::alloc_open_call( context[30] ) )
      return refalrts::cNoMemory;
    if( ! refalrts::alloc_name( context[31], StrFromInt, "StrFromInt" ) )
      return refalrts::cNoMemory;
    if( ! refalrts::alloc_close_call( context[32] ) )
      return refalrts::cNoMemory;
    if( ! refalrts::alloc_chars( context[33], context[34], ", ", 2 ) )
      return refalrts::cNoMemory;
    if( ! refalrts::alloc_open_call( context[35] ) )
      return refalrts::cNoMemory;
    if( ! refalrts::alloc_name( context[36], StrFromInt, "StrFromInt" ) )
      return refalrts::cNoMemory;
    if( ! refalrts::alloc_char( context[37], ' ' ) )
      return refalrts::cNoMemory;
    if( ! refalrts::alloc_open_call( context[38] ) )
      return refalrts::cNoMemory;
    if( ! refalrts::alloc_name( context[39], StrFromInt, "StrFromInt" ) )
      return refalrts::cNoMemory;
    if( ! refalrts::alloc_close_call( context[40] ) )
      return refalrts::cNoMemory;
    if( ! refalrts::alloc_chars( context[41], context[42], "},", 2 ) )
      return refalrts::cNoMemory;
    if( ! refalrts::alloc_close_bracket( context[43] ) )
      return refalrts::cNoMemory;
    refalrts::reinit_char( context[13], 'r' );
    refalrts::update_name( context[4], PrintDirection, "PrintDirection" );
    refalrts::reinit_close_call( context[12] );
    refalrts::reinit_char( context[1], ',' );
    refalrts::link_brackets( context[11], context[43] );
    refalrts::push_stack( context[40] );
    refalrts::push_stack( context[38] );
    refalrts::push_stack( context[12] );
    refalrts::push_stack( context[35] );
    refalrts::push_stack( context[32] );
    refalrts::push_stack( context[30] );
    refalrts::push_stack( context[27] );
    refalrts::push_stack( context[0] );
    refalrts::link_brackets( context[7], context[8] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = arg_end->next;
    res = refalrts::splice_evar( res, context[40], context[43] );
    res = refalrts::splice_evar( res, context[15], context[15] );
    res = refalrts::splice_evar( res, context[37], context[39] );
    res = refalrts::splice_evar( res, context[18], context[1] );
    res = refalrts::splice_evar( res, context[32], context[36] );
    res = refalrts::splice_evar( res, context[17], context[17] );
    res = refalrts::splice_evar( res, context[27], context[31] );
    res = refalrts::splice_evar( res, context[14], context[14] );
    res = refalrts::splice_evar( res, context[0], context[4] );
    res = refalrts::splice_evar( res, context[25], context[26] );
    res = refalrts::splice_evar( res, context[16], context[16] );
    res = refalrts::splice_evar( res, context[23], context[24] );
    res = refalrts::splice_evar( res, context[13], context[13] );
    res = refalrts::splice_evar( res, context[21], context[22] );
    res = refalrts::splice_evar( res, context[19], context[20] );
    res = refalrts::splice_evar( res, context[7], context[11] );
    refalrts::use( res );
    return refalrts::FnResult(refalrts::cSuccess | (__LINE__ << 8));
  } while ( 0 );

  do {
    refalrts::start_sentence();
    //(E )(#CmdiRepeatedSaveS S 't'S S )
    // </0 & GenCommand/4 (/7 e.Indent#1/5 )/8 (/11 # CmdiRepeatedSave/13 s.Direction#1/14 s.BracketNumber#1/15 't'/16 s.VarNumber#1/17 s.SampleNumber#1/18 )/12 >/1
    if( ! refalrts::ident_term(  & ident_CmdiRepeatedSave<int>::name, context[13] ) )
      continue;
    // closed e.Indent#1 as range 5
    context[66] = context[9];
    context[67] = context[10];
    if( ! refalrts::svar_left( context[14], context[66], context[67] ) )
      continue;
    if( ! refalrts::svar_left( context[15], context[66], context[67] ) )
      continue;
    context[16] = refalrts::char_left( 't', context[66], context[67] );
    if( ! context[16] )
      continue;
    if( ! refalrts::svar_left( context[17], context[66], context[67] ) )
      continue;
    if( ! refalrts::svar_left( context[18], context[66], context[67] ) )
      continue;
    if( ! refalrts::empty_seq( context[66], context[67] ) )
      continue;

    refalrts::reset_allocator();
    //TRASH: {REMOVED TILE}  {REMOVED TILE}  {REMOVED TILE}  {REMOVED TILE}  {REMOVED TILE}  {REMOVED TILE}  {REMOVED TILE}  {REMOVED TILE}  {REMOVED TILE} 
    //RESULT: Tile{ [[ } Tile{ AsIs: (/7 AsIs: e.Indent#1/5 AsIs: )/8 AsIs: (/11 } e.Indent#1/5/19"{ref"/21 Tile{ HalfReuse: 'a'/13 }"lrts::ictRepeat"/23 Tile{ AsIs: </0 Reuse: & PrintDirection/4 } Tile{ AsIs: s.Direction#1/14 } >/25"Save, "/26 </28 Tile{ HalfReuse: & StrFromInt/16 AsIs: s.VarNumber#1/17 } >/29", "/30 </32 & StrFromInt/33 Tile{ AsIs: s.SampleNumber#1/18 HalfReuse: >/12 HalfReuse: ','/1 } ' '/34 </35 & StrFromInt/36 Tile{ AsIs: s.BracketNumber#1/15 } >/37"},"/38 )/40 Tile{ ]] }
    if (! refalrts::copy_evar(context[19], context[20], context[5], context[6]))
      return refalrts::cNoMemory;
    if( ! refalrts::alloc_chars( context[21], context[22], "{ref", 4 ) )
      return refalrts::cNoMemory;
    if( ! refalrts::alloc_chars( context[23], context[24], "lrts::ictRepeat", 15 ) )
      return refalrts::cNoMemory;
    if( ! refalrts::alloc_close_call( context[25] ) )
      return refalrts::cNoMemory;
    if( ! refalrts::alloc_chars( context[26], context[27], "Save, ", 6 ) )
      return refalrts::cNoMemory;
    if( ! refalrts::alloc_open_call( context[28] ) )
      return refalrts::cNoMemory;
    if( ! refalrts::alloc_close_call( context[29] ) )
      return refalrts::cNoMemory;
    if( ! refalrts::alloc_chars( context[30], context[31], ", ", 2 ) )
      return refalrts::cNoMemory;
    if( ! refalrts::alloc_open_call( context[32] ) )
      return refalrts::cNoMemory;
    if( ! refalrts::alloc_name( context[33], StrFromInt, "StrFromInt" ) )
      return refalrts::cNoMemory;
    if( ! refalrts::alloc_char( context[34], ' ' ) )
      return refalrts::cNoMemory;
    if( ! refalrts::alloc_open_call( context[35] ) )
      return refalrts::cNoMemory;
    if( ! refalrts::alloc_name( context[36], StrFromInt, "StrFromInt" ) )
      return refalrts::cNoMemory;
    if( ! refalrts::alloc_close_call( context[37] ) )
      return refalrts::cNoMemory;
    if( ! refalrts::alloc_chars( context[38], context[39], "},", 2 ) )
      return refalrts::cNoMemory;
    if( ! refalrts::alloc_close_bracket( context[40] ) )
      return refalrts::cNoMemory;
    refalrts::reinit_char( context[13], 'a' );
    refalrts::update_name( context[4], PrintDirection, "PrintDirection" );
    refalrts::reinit_name( context[16], StrFromInt, "StrFromInt" );
    refalrts::reinit_close_call( context[12] );
    refalrts::reinit_char( context[1], ',' );
    refalrts::link_brackets( context[11], context[40] );
    refalrts::push_stack( context[37] );
    refalrts::push_stack( context[35] );
    refalrts::push_stack( context[12] );
    refalrts::push_stack( context[32] );
    refalrts::push_stack( context[29] );
    refalrts::push_stack( context[28] );
    refalrts::push_stack( context[25] );
    refalrts::push_stack( context[0] );
    refalrts::link_brackets( context[7], context[8] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = arg_end->next;
    res = refalrts::splice_evar( res, context[37], context[40] );
    res = refalrts::splice_evar( res, context[15], context[15] );
    res = refalrts::splice_evar( res, context[34], context[36] );
    res = refalrts::splice_evar( res, context[18], context[1] );
    res = refalrts::splice_evar( res, context[29], context[33] );
    res = refalrts::splice_evar( res, context[16], context[17] );
    res = refalrts::splice_evar( res, context[25], context[28] );
    res = refalrts::splice_evar( res, context[14], context[14] );
    res = refalrts::splice_evar( res, context[0], context[4] );
    res = refalrts::splice_evar( res, context[23], context[24] );
    res = refalrts::splice_evar( res, context[13], context[13] );
    res = refalrts::splice_evar( res, context[21], context[22] );
    res = refalrts::splice_evar( res, context[19], context[20] );
    res = refalrts::splice_evar( res, context[7], context[11] );
    refalrts::use( res );
    return refalrts::FnResult(refalrts::cSuccess | (__LINE__ << 8));
  } while ( 0 );

  do {
    refalrts::start_sentence();
    //(E )(#CmdiEPrepareS S )
    // </0 & GenCommand/4 (/7 e.Indent#1/5 )/8 (/11 # CmdiEPrepare/13 s.BracketNumber#1/14 s.VarNumber#1/15 )/12 >/1
    if( ! refalrts::ident_term(  & ident_CmdiEPrepare<int>::name, context[13] ) )
      continue;
    // closed e.Indent#1 as range 5
    context[66] = context[9];
    context[67] = context[10];
    if( ! refalrts::svar_left( context[14], context[66], context[67] ) )
      continue;
    if( ! refalrts::svar_left( context[15], context[66], context[67] ) )
      continue;
    if( ! refalrts::empty_seq( context[66], context[67] ) )
      continue;

    refalrts::reset_allocator();
    //TRASH: {REMOVED TILE}  {REMOVED TILE}  {REMOVED TILE}  {REMOVED TILE}  {REMOVED TILE}  {REMOVED TILE} 
    //RESULT: Tile{ [[ } Tile{ AsIs: (/7 AsIs: e.Indent#1/5 AsIs: )/8 AsIs: (/11 } e.Indent#1/5/16"{refalrts::icEPrepare, 0, "/18 Tile{ AsIs: </0 Reuse: & StrFromInt/4 } Tile{ AsIs: s.VarNumber#1/15 HalfReuse: >/12 HalfReuse: ','/1 } ' '/20 </21 Tile{ HalfReuse: & StrFromInt/13 AsIs: s.BracketNumber#1/14 } >/22"},"/23 )/25 Tile{ ]] }
    if (! refalrts::copy_evar(context[16], context[17], context[5], context[6]))
      return refalrts::cNoMemory;
    if( ! refalrts::alloc_chars( context[18], context[19], "{refalrts::icEPrepare, 0, ", 26 ) )
      return refalrts::cNoMemory;
    if( ! refalrts::alloc_char( context[20], ' ' ) )
      return refalrts::cNoMemory;
    if( ! refalrts::alloc_open_call( context[21] ) )
      return refalrts::cNoMemory;
    if( ! refalrts::alloc_close_call( context[22] ) )
      return refalrts::cNoMemory;
    if( ! refalrts::alloc_chars( context[23], context[24], "},", 2 ) )
      return refalrts::cNoMemory;
    if( ! refalrts::alloc_close_bracket( context[25] ) )
      return refalrts::cNoMemory;
    refalrts::update_name( context[4], StrFromInt, "StrFromInt" );
    refalrts::reinit_close_call( context[12] );
    refalrts::reinit_char( context[1], ',' );
    refalrts::reinit_name( context[13], StrFromInt, "StrFromInt" );
    refalrts::link_brackets( context[11], context[25] );
    refalrts::push_stack( context[22] );
    refalrts::push_stack( context[21] );
    refalrts::push_stack( context[12] );
    refalrts::push_stack( context[0] );
    refalrts::link_brackets( context[7], context[8] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = arg_end->next;
    res = refalrts::splice_evar( res, context[22], context[25] );
    res = refalrts::splice_evar( res, context[13], context[14] );
    res = refalrts::splice_evar( res, context[20], context[21] );
    res = refalrts::splice_evar( res, context[15], context[1] );
    res = refalrts::splice_evar( res, context[0], context[4] );
    res = refalrts::splice_evar( res, context[18], context[19] );
    res = refalrts::splice_evar( res, context[16], context[17] );
    res = refalrts::splice_evar( res, context[7], context[11] );
    refalrts::use( res );
    return refalrts::FnResult(refalrts::cSuccess | (__LINE__ << 8));
  } while ( 0 );

  do {
    refalrts::start_sentence();
    //(E )(#CmdiEStartS S )
    // </0 & GenCommand/4 (/7 e.Indent#1/5 )/8 (/11 # CmdiEStart/13 s.BracketNumber#1/14 s.VarNumber#1/15 )/12 >/1
    if( ! refalrts::ident_term(  & ident_CmdiEStart<int>::name, context[13] ) )
      continue;
    // closed e.Indent#1 as range 5
    context[66] = context[9];
    context[67] = context[10];
    if( ! refalrts::svar_left( context[14], context[66], context[67] ) )
      continue;
    if( ! refalrts::svar_left( context[15], context[66], context[67] ) )
      continue;
    if( ! refalrts::empty_seq( context[66], context[67] ) )
      continue;

    refalrts::reset_allocator();
    //TRASH: {REMOVED TILE}  {REMOVED TILE}  {REMOVED TILE}  {REMOVED TILE}  {REMOVED TILE}  {REMOVED TILE} 
    //RESULT: Tile{ [[ } Tile{ AsIs: (/7 AsIs: e.Indent#1/5 AsIs: )/8 AsIs: (/11 } e.Indent#1/5/16"{refalrts::icEStart, 0, "/18 Tile{ AsIs: </0 Reuse: & StrFromInt/4 } Tile{ AsIs: s.VarNumber#1/15 HalfReuse: >/12 HalfReuse: ','/1 } ' '/20 </21 Tile{ HalfReuse: & StrFromInt/13 AsIs: s.BracketNumber#1/14 } >/22"},"/23 )/25 Tile{ ]] }
    if (! refalrts::copy_evar(context[16], context[17], context[5], context[6]))
      return refalrts::cNoMemory;
    if( ! refalrts::alloc_chars( context[18], context[19], "{refalrts::icEStart, 0, ", 24 ) )
      return refalrts::cNoMemory;
    if( ! refalrts::alloc_char( context[20], ' ' ) )
      return refalrts::cNoMemory;
    if( ! refalrts::alloc_open_call( context[21] ) )
      return refalrts::cNoMemory;
    if( ! refalrts::alloc_close_call( context[22] ) )
      return refalrts::cNoMemory;
    if( ! refalrts::alloc_chars( context[23], context[24], "},", 2 ) )
      return refalrts::cNoMemory;
    if( ! refalrts::alloc_close_bracket( context[25] ) )
      return refalrts::cNoMemory;
    refalrts::update_name( context[4], StrFromInt, "StrFromInt" );
    refalrts::reinit_close_call( context[12] );
    refalrts::reinit_char( context[1], ',' );
    refalrts::reinit_name( context[13], StrFromInt, "StrFromInt" );
    refalrts::link_brackets( context[11], context[25] );
    refalrts::push_stack( context[22] );
    refalrts::push_stack( context[21] );
    refalrts::push_stack( context[12] );
    refalrts::push_stack( context[0] );
    refalrts::link_brackets( context[7], context[8] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = arg_end->next;
    res = refalrts::splice_evar( res, context[22], context[25] );
    res = refalrts::splice_evar( res, context[13], context[14] );
    res = refalrts::splice_evar( res, context[20], context[21] );
    res = refalrts::splice_evar( res, context[15], context[1] );
    res = refalrts::splice_evar( res, context[0], context[4] );
    res = refalrts::splice_evar( res, context[18], context[19] );
    res = refalrts::splice_evar( res, context[16], context[17] );
    res = refalrts::splice_evar( res, context[7], context[11] );
    refalrts::use( res );
    return refalrts::FnResult(refalrts::cSuccess | (__LINE__ << 8));
  } while ( 0 );

  do {
    refalrts::start_sentence();
    //(E )(#CmdiSaveS S )
    // </0 & GenCommand/4 (/7 e.Indent#1/5 )/8 (/11 # CmdiSave/13 s.OldBracketNumber#1/14 s.NewBracketNumber#1/15 )/12 >/1
    if( ! refalrts::ident_term(  & ident_CmdiSave<int>::name, context[13] ) )
      continue;
    // closed e.Indent#1 as range 5
    context[66] = context[9];
    context[67] = context[10];
    if( ! refalrts::svar_left( context[14], context[66], context[67] ) )
      continue;
    if( ! refalrts::svar_left( context[15], context[66], context[67] ) )
      continue;
    if( ! refalrts::empty_seq( context[66], context[67] ) )
      continue;

    refalrts::reset_allocator();
    //TRASH: {REMOVED TILE}  {REMOVED TILE}  {REMOVED TILE}  {REMOVED TILE}  {REMOVED TILE}  {REMOVED TILE} 
    //RESULT: Tile{ [[ } Tile{ AsIs: (/7 AsIs: e.Indent#1/5 AsIs: )/8 AsIs: (/11 } e.Indent#1/5/16"{refalrts::icSave, 0, "/18 Tile{ AsIs: </0 Reuse: & StrFromInt/4 } Tile{ AsIs: s.NewBracketNumber#1/15 HalfReuse: >/12 HalfReuse: ','/1 } ' '/20 </21 Tile{ HalfReuse: & StrFromInt/13 AsIs: s.OldBracketNumber#1/14 } >/22"},"/23 )/25 Tile{ ]] }
    if (! refalrts::copy_evar(context[16], context[17], context[5], context[6]))
      return refalrts::cNoMemory;
    if( ! refalrts::alloc_chars( context[18], context[19], "{refalrts::icSave, 0, ", 22 ) )
      return refalrts::cNoMemory;
    if( ! refalrts::alloc_char( context[20], ' ' ) )
      return refalrts::cNoMemory;
    if( ! refalrts::alloc_open_call( context[21] ) )
      return refalrts::cNoMemory;
    if( ! refalrts::alloc_close_call( context[22] ) )
      return refalrts::cNoMemory;
    if( ! refalrts::alloc_chars( context[23], context[24], "},", 2 ) )
      return refalrts::cNoMemory;
    if( ! refalrts::alloc_close_bracket( context[25] ) )
      return refalrts::cNoMemory;
    refalrts::update_name( context[4], StrFromInt, "StrFromInt" );
    refalrts::reinit_close_call( context[12] );
    refalrts::reinit_char( context[1], ',' );
    refalrts::reinit_name( context[13], StrFromInt, "StrFromInt" );
    refalrts::link_brackets( context[11], context[25] );
    refalrts::push_stack( context[22] );
    refalrts::push_stack( context[21] );
    refalrts::push_stack( context[12] );
    refalrts::push_stack( context[0] );
    refalrts::link_brackets( context[7], context[8] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = arg_end->next;
    res = refalrts::splice_evar( res, context[22], context[25] );
    res = refalrts::splice_evar( res, context[13], context[14] );
    res = refalrts::splice_evar( res, context[20], context[21] );
    res = refalrts::splice_evar( res, context[15], context[1] );
    res = refalrts::splice_evar( res, context[0], context[4] );
    res = refalrts::splice_evar( res, context[18], context[19] );
    res = refalrts::splice_evar( res, context[16], context[17] );
    res = refalrts::splice_evar( res, context[7], context[11] );
    refalrts::use( res );
    return refalrts::FnResult(refalrts::cSuccess | (__LINE__ << 8));
  } while ( 0 );

  do {
    refalrts::start_sentence();
    //(E )(#CmdiEmptyResult)
    // </0 & GenCommand/4 (/7 e.Indent#1/5 )/8 (/11 # CmdiEmptyResult/13 )/12 >/1
    if( ! refalrts::ident_term(  & ident_CmdiEmptyResult<int>::name, context[13] ) )
      continue;
    context[66] = context[9];
    context[67] = context[10];
    if( ! refalrts::empty_seq( context[66], context[67] ) )
      continue;
    // closed e.Indent#1 as range 5

    refalrts::reset_allocator();
    //TRASH: {REMOVED TILE}  {REMOVED TILE}  {REMOVED TILE}  {REMOVED TILE} 
    //RESULT: Tile{ [[ } Tile{ AsIs: (/7 AsIs: e.Indent#1/5 AsIs: )/8 AsIs: (/11 } e.Indent#1/5/14 Tile{ HalfReuse: '{'/0 HalfReuse: 'r'/4 }"efalrts::icEmptyResult, 0, 0, 0"/16 Tile{ HalfReuse: '}'/13 HalfReuse: ','/12 HalfReuse: )/1 ]] }
    if (! refalrts::copy_evar(context[14], context[15], context[5], context[6]))
      return refalrts::cNoMemory;
    if( ! refalrts::alloc_chars( context[16], context[17], "efalrts::icEmptyResult, 0, 0, 0", 31 ) )
      return refalrts::cNoMemory;
    refalrts::reinit_char( context[0], '{' );
    refalrts::reinit_char( context[4], 'r' );
    refalrts::reinit_char( context[13], '}' );
    refalrts::reinit_char( context[12], ',' );
    refalrts::reinit_close_bracket( context[1] );
    refalrts::link_brackets( context[11], context[1] );
    refalrts::link_brackets( context[7], context[8] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[13];
    res = refalrts::splice_evar( res, context[16], context[17] );
    res = refalrts::splice_evar( res, context[0], context[4] );
    res = refalrts::splice_evar( res, context[14], context[15] );
    res = refalrts::splice_evar( res, context[7], context[11] );
    refalrts::use( res );
    return refalrts::FnResult(refalrts::cSuccess | (__LINE__ << 8));
  } while ( 0 );

  do {
    refalrts::start_sentence();
    //(E )(#CmdiSetResS )
    // </0 & GenCommand/4 (/7 e.Indent#1/5 )/8 (/11 # CmdiSetRes/13 s.Offset#1/14 )/12 >/1
    if( ! refalrts::ident_term(  & ident_CmdiSetRes<int>::name, context[13] ) )
      continue;
    // closed e.Indent#1 as range 5
    context[66] = context[9];
    context[67] = context[10];
    if( ! refalrts::svar_left( context[14], context[66], context[67] ) )
      continue;
    if( ! refalrts::empty_seq( context[66], context[67] ) )
      continue;

    refalrts::reset_allocator();
    //TRASH: {REMOVED TILE}  {REMOVED TILE}  {REMOVED TILE}  {REMOVED TILE}  {REMOVED TILE} 
    //RESULT: Tile{ [[ } Tile{ AsIs: (/7 AsIs: e.Indent#1/5 AsIs: )/8 HalfReuse: </11 HalfReuse: & Fetch/13 AsIs: s.Offset#1/14 HalfReuse: </12 HalfReuse: & CreateClosure /1 } Tile{ Reuse: & lambda_GenCommand_6/4 } Tile{ HalfReuse: (/0 } e.Indent#1/5/15 )/17 >/18 >/19 Tile{ ]] }
    if (! refalrts::copy_evar(context[15], context[16], context[5], context[6]))
      return refalrts::cNoMemory;
    if( ! refalrts::alloc_close_bracket( context[17] ) )
      return refalrts::cNoMemory;
    if( ! refalrts::alloc_close_call( context[18] ) )
      return refalrts::cNoMemory;
    if( ! refalrts::alloc_close_call( context[19] ) )
      return refalrts::cNoMemory;
    refalrts::reinit_open_call( context[11] );
    refalrts::reinit_name( context[13], Fetch, "Fetch" );
    refalrts::reinit_open_call( context[12] );
    refalrts::reinit_name( context[1], refalrts::create_closure, "refalrts::create_closure" );
    refalrts::update_name( context[4], lambda_GenCommand_6, "lambda_GenCommand_6" );
    refalrts::reinit_open_bracket( context[0] );
    refalrts::push_stack( context[19] );
    refalrts::push_stack( context[11] );
    refalrts::push_stack( context[18] );
    refalrts::push_stack( context[12] );
    refalrts::link_brackets( context[0], context[17] );
    refalrts::link_brackets( context[7], context[8] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = arg_end->next;
    res = refalrts::splice_evar( res, context[17], context[19] );
    res = refalrts::splice_evar( res, context[15], context[16] );
    res = refalrts::splice_evar( res, context[0], context[0] );
    res = refalrts::splice_evar( res, context[4], context[4] );
    res = refalrts::splice_evar( res, context[7], context[1] );
    refalrts::use( res );
    return refalrts::FnResult(refalrts::cSuccess | (__LINE__ << 8));
  } while ( 0 );

  do {
    refalrts::start_sentence();
    //(E )(#CmdiCopyVar'e'S S )
    // </0 & GenCommand/4 (/7 e.Indent#1/5 )/8 (/11 # CmdiCopyVar/13 'e'/14 s.Target#1/15 s.Sample#1/16 )/12 >/1
    if( ! refalrts::ident_term(  & ident_CmdiCopyVar<int>::name, context[13] ) )
      continue;
    context[66] = context[9];
    context[67] = context[10];
    context[14] = refalrts::char_left( 'e', context[66], context[67] );
    if( ! context[14] )
      continue;
    // closed e.Indent#1 as range 5
    if( ! refalrts::svar_left( context[15], context[66], context[67] ) )
      continue;
    if( ! refalrts::svar_left( context[16], context[66], context[67] ) )
      continue;
    if( ! refalrts::empty_seq( context[66], context[67] ) )
      continue;

    refalrts::reset_allocator();
    //TRASH: {REMOVED TILE}  {REMOVED TILE}  {REMOVED TILE}  {REMOVED TILE}  {REMOVED TILE}  {REMOVED TILE} 
    //RESULT: Tile{ [[ } Tile{ AsIs: (/7 AsIs: e.Indent#1/5 AsIs: )/8 AsIs: (/11 } e.Indent#1/5/17"{refalrts::icCopyEVar, "/19 Tile{ HalfReuse: </13 HalfReuse: & StrFromInt/14 AsIs: s.Target#1/15 } >/21", "/22 Tile{ AsIs: </0 Reuse: & StrFromInt/4 } Tile{ AsIs: s.Sample#1/16 HalfReuse: >/12 HalfReuse: ','/1 }" 0},"/24 )/26 Tile{ ]] }
    if (! refalrts::copy_evar(context[17], context[18], context[5], context[6]))
      return refalrts::cNoMemory;
    if( ! refalrts::alloc_chars( context[19], context[20], "{refalrts::icCopyEVar, ", 23 ) )
      return refalrts::cNoMemory;
    if( ! refalrts::alloc_close_call( context[21] ) )
      return refalrts::cNoMemory;
    if( ! refalrts::alloc_chars( context[22], context[23], ", ", 2 ) )
      return refalrts::cNoMemory;
    if( ! refalrts::alloc_chars( context[24], context[25], " 0},", 4 ) )
      return refalrts::cNoMemory;
    if( ! refalrts::alloc_close_bracket( context[26] ) )
      return refalrts::cNoMemory;
    refalrts::reinit_open_call( context[13] );
    refalrts::reinit_name( context[14], StrFromInt, "StrFromInt" );
    refalrts::update_name( context[4], StrFromInt, "StrFromInt" );
    refalrts::reinit_close_call( context[12] );
    refalrts::reinit_char( context[1], ',' );
    refalrts::link_brackets( context[11], context[26] );
    refalrts::push_stack( context[12] );
    refalrts::push_stack( context[0] );
    refalrts::push_stack( context[21] );
    refalrts::push_stack( context[13] );
    refalrts::link_brackets( context[7], context[8] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = arg_end->next;
    res = refalrts::splice_evar( res, context[24], context[26] );
    res = refalrts::splice_evar( res, context[16], context[1] );
    res = refalrts::splice_evar( res, context[0], context[4] );
    res = refalrts::splice_evar( res, context[21], context[23] );
    res = refalrts::splice_evar( res, context[13], context[15] );
    res = refalrts::splice_evar( res, context[19], context[20] );
    res = refalrts::splice_evar( res, context[17], context[18] );
    res = refalrts::splice_evar( res, context[7], context[11] );
    refalrts::use( res );
    return refalrts::FnResult(refalrts::cSuccess | (__LINE__ << 8));
  } while ( 0 );

  do {
    refalrts::start_sentence();
    //(E )(#CmdiCopyVarS S S )
    // </0 & GenCommand/4 (/7 e.Indent#1/5 )/8 (/11 # CmdiCopyVar/13 s.Mode#1/14 s.Target#1/15 s.Sample#1/16 )/12 >/1
    if( ! refalrts::ident_term(  & ident_CmdiCopyVar<int>::name, context[13] ) )
      continue;
    // closed e.Indent#1 as range 5
    context[66] = context[9];
    context[67] = context[10];
    if( ! refalrts::svar_left( context[14], context[66], context[67] ) )
      continue;
    if( ! refalrts::svar_left( context[15], context[66], context[67] ) )
      continue;
    if( ! refalrts::svar_left( context[16], context[66], context[67] ) )
      continue;
    if( ! refalrts::empty_seq( context[66], context[67] ) )
      continue;

    refalrts::reset_allocator();
    //TRASH: {REMOVED TILE}  {REMOVED TILE}  {REMOVED TILE}  {REMOVED TILE}  s.Mode#1/14 {REMOVED TILE}  {REMOVED TILE}  {REMOVED TILE} 
    //RESULT: Tile{ [[ } Tile{ AsIs: (/7 AsIs: e.Indent#1/5 AsIs: )/8 AsIs: (/11 } e.Indent#1/5/17"{ref"/19 Tile{ HalfReuse: 'a'/13 }"lrts::icCopySTVar, "/21 Tile{ AsIs: </0 Reuse: & StrFromInt/4 } Tile{ AsIs: s.Target#1/15 } >/23", "/24 </26 & StrFromInt/27 Tile{ AsIs: s.Sample#1/16 HalfReuse: >/12 HalfReuse: ','/1 }" 0},"/28 )/30 Tile{ ]] }
    if (! refalrts::copy_evar(context[17], context[18], context[5], context[6]))
      return refalrts::cNoMemory;
    if( ! refalrts::alloc_chars( context[19], context[20], "{ref", 4 ) )
      return refalrts::cNoMemory;
    if( ! refalrts::alloc_chars( context[21], context[22], "lrts::icCopySTVar, ", 19 ) )
      return refalrts::cNoMemory;
    if( ! refalrts::alloc_close_call( context[23] ) )
      return refalrts::cNoMemory;
    if( ! refalrts::alloc_chars( context[24], context[25], ", ", 2 ) )
      return refalrts::cNoMemory;
    if( ! refalrts::alloc_open_call( context[26] ) )
      return refalrts::cNoMemory;
    if( ! refalrts::alloc_name( context[27], StrFromInt, "StrFromInt" ) )
      return refalrts::cNoMemory;
    if( ! refalrts::alloc_chars( context[28], context[29], " 0},", 4 ) )
      return refalrts::cNoMemory;
    if( ! refalrts::alloc_close_bracket( context[30] ) )
      return refalrts::cNoMemory;
    refalrts::reinit_char( context[13], 'a' );
    refalrts::update_name( context[4], StrFromInt, "StrFromInt" );
    refalrts::reinit_close_call( context[12] );
    refalrts::reinit_char( context[1], ',' );
    refalrts::link_brackets( context[11], context[30] );
    refalrts::push_stack( context[12] );
    refalrts::push_stack( context[26] );
    refalrts::push_stack( context[23] );
    refalrts::push_stack( context[0] );
    refalrts::link_brackets( context[7], context[8] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = arg_end->next;
    res = refalrts::splice_evar( res, context[28], context[30] );
    res = refalrts::splice_evar( res, context[16], context[1] );
    res = refalrts::splice_evar( res, context[23], context[27] );
    res = refalrts::splice_evar( res, context[15], context[15] );
    res = refalrts::splice_evar( res, context[0], context[4] );
    res = refalrts::splice_evar( res, context[21], context[22] );
    res = refalrts::splice_evar( res, context[13], context[13] );
    res = refalrts::splice_evar( res, context[19], context[20] );
    res = refalrts::splice_evar( res, context[17], context[18] );
    res = refalrts::splice_evar( res, context[7], context[11] );
    refalrts::use( res );
    refalrts::splice_to_freelist_open( trash_prev, res );
    return refalrts::FnResult(refalrts::cSuccess | (__LINE__ << 8));
  } while ( 0 );

  do {
    refalrts::start_sentence();
    //(E )(#CmdiReinitSVarS S )
    // </0 & GenCommand/4 (/7 e.Indent#1/5 )/8 (/11 # CmdiReinitSVar/13 s.Offset#1/14 s.Sample#1/15 )/12 >/1
    if( ! refalrts::ident_term(  & ident_CmdiReinitSVar<int>::name, context[13] ) )
      continue;
    // closed e.Indent#1 as range 5
    context[66] = context[9];
    context[67] = context[10];
    if( ! refalrts::svar_left( context[14], context[66], context[67] ) )
      continue;
    if( ! refalrts::svar_left( context[15], context[66], context[67] ) )
      continue;
    if( ! refalrts::empty_seq( context[66], context[67] ) )
      continue;

    refalrts::reset_allocator();
    //TRASH: {REMOVED TILE}  {REMOVED TILE}  {REMOVED TILE}  {REMOVED TILE}  {REMOVED TILE}  {REMOVED TILE} 
    //RESULT: Tile{ [[ } Tile{ AsIs: (/7 AsIs: e.Indent#1/5 AsIs: )/8 AsIs: (/11 } e.Indent#1/5/16"{refalrts::icReinitSVar, 0, "/18 Tile{ AsIs: </0 Reuse: & StrFromInt/4 } Tile{ AsIs: s.Sample#1/15 HalfReuse: >/12 HalfReuse: ','/1 } ' '/20 </21 Tile{ HalfReuse: & StrFromInt/13 AsIs: s.Offset#1/14 } >/22"},"/23 )/25 Tile{ ]] }
    if (! refalrts::copy_evar(context[16], context[17], context[5], context[6]))
      return refalrts::cNoMemory;
    if( ! refalrts::alloc_chars( context[18], context[19], "{refalrts::icReinitSVar, 0, ", 28 ) )
      return refalrts::cNoMemory;
    if( ! refalrts::alloc_char( context[20], ' ' ) )
      return refalrts::cNoMemory;
    if( ! refalrts::alloc_open_call( context[21] ) )
      return refalrts::cNoMemory;
    if( ! refalrts::alloc_close_call( context[22] ) )
      return refalrts::cNoMemory;
    if( ! refalrts::alloc_chars( context[23], context[24], "},", 2 ) )
      return refalrts::cNoMemory;
    if( ! refalrts::alloc_close_bracket( context[25] ) )
      return refalrts::cNoMemory;
    refalrts::update_name( context[4], StrFromInt, "StrFromInt" );
    refalrts::reinit_close_call( context[12] );
    refalrts::reinit_char( context[1], ',' );
    refalrts::reinit_name( context[13], StrFromInt, "StrFromInt" );
    refalrts::link_brackets( context[11], context[25] );
    refalrts::push_stack( context[22] );
    refalrts::push_stack( context[21] );
    refalrts::push_stack( context[12] );
    refalrts::push_stack( context[0] );
    refalrts::link_brackets( context[7], context[8] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = arg_end->next;
    res = refalrts::splice_evar( res, context[22], context[25] );
    res = refalrts::splice_evar( res, context[13], context[14] );
    res = refalrts::splice_evar( res, context[20], context[21] );
    res = refalrts::splice_evar( res, context[15], context[1] );
    res = refalrts::splice_evar( res, context[0], context[4] );
    res = refalrts::splice_evar( res, context[18], context[19] );
    res = refalrts::splice_evar( res, context[16], context[17] );
    res = refalrts::splice_evar( res, context[7], context[11] );
    refalrts::use( res );
    return refalrts::FnResult(refalrts::cSuccess | (__LINE__ << 8));
  } while ( 0 );

  do {
    refalrts::start_sentence();
    //(E )(#CmdiCreateElemS S S E )
    // </0 & GenCommand/4 (/7 e.Indent#1/5 )/8 (/11 # CmdiCreateElem/13 s.CreateMode#1/14 s.ElemNumber#1/15 s.Type#1/16 e.Info#1/9 )/12 >/1
    if( ! refalrts::ident_term(  & ident_CmdiCreateElem<int>::name, context[13] ) )
      continue;
    // closed e.Indent#1 as range 5
    context[66] = context[9];
    context[67] = context[10];
    if( ! refalrts::svar_left( context[14], context[66], context[67] ) )
      continue;
    if( ! refalrts::svar_left( context[15], context[66], context[67] ) )
      continue;
    if( ! refalrts::svar_left( context[16], context[66], context[67] ) )
      continue;
    // closed e.Info#1 as range 66(9)

    refalrts::reset_allocator();
    //TRASH: {REMOVED TILE}  {REMOVED TILE}  s.CreateMode#1/14 s.ElemNumber#1/15 {REMOVED TILE}  {REMOVED TILE}  {REMOVED TILE} 
    //RESULT: Tile{ [[ } (/17 e.Indent#1/5/18 Tile{ HalfReuse: )/1 } Tile{ AsIs: </0 Reuse: & PrintInterpretCreateElem/4 AsIs: (/7 AsIs: e.Indent#1/5 AsIs: )/8 HalfReuse: s.CreateMode1 #14/11 HalfReuse: s.ElemNumber1 #15/13 } Tile{ AsIs: s.Type#1/16 AsIs: e.Info#1/66(9) HalfReuse: >/12 } Tile{ ]] }
    if( ! refalrts::alloc_open_bracket( context[17] ) )
      return refalrts::cNoMemory;
    if (! refalrts::copy_evar(context[18], context[19], context[5], context[6]))
      return refalrts::cNoMemory;
    refalrts::reinit_close_bracket( context[1] );
    refalrts::update_name( context[4], PrintInterpretCreateElem, "PrintInterpretCreateElem" );
    refalrts::reinit_svar( context[11], context[14] );
    refalrts::reinit_svar( context[13], context[15] );
    refalrts::reinit_close_call( context[12] );
    refalrts::push_stack( context[12] );
    refalrts::push_stack( context[0] );
    refalrts::link_brackets( context[7], context[8] );
    refalrts::link_brackets( context[17], context[1] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = arg_end->next;
    res = refalrts::splice_evar( res, context[16], context[12] );
    res = refalrts::splice_evar( res, context[0], context[13] );
    res = refalrts::splice_evar( res, context[1], context[1] );
    res = refalrts::splice_evar( res, context[18], context[19] );
    res = refalrts::splice_evar( res, context[17], context[17] );
    refalrts::use( res );
    refalrts::splice_to_freelist_open( trash_prev, res );
    return refalrts::FnResult(refalrts::cSuccess | (__LINE__ << 8));
  } while ( 0 );

  do {
    refalrts::start_sentence();
    //(E )(#CmdiLinkBracketsS S )
    // </0 & GenCommand/4 (/7 e.Indent#1/5 )/8 (/11 # CmdiLinkBrackets/13 s.Left#1/14 s.Right#1/15 )/12 >/1
    if( ! refalrts::ident_term(  & ident_CmdiLinkBrackets<int>::name, context[13] ) )
      continue;
    // closed e.Indent#1 as range 5
    context[66] = context[9];
    context[67] = context[10];
    if( ! refalrts::svar_left( context[14], context[66], context[67] ) )
      continue;
    if( ! refalrts::svar_left( context[15], context[66], context[67] ) )
      continue;
    if( ! refalrts::empty_seq( context[66], context[67] ) )
      continue;

    refalrts::reset_allocator();
    //TRASH: {REMOVED TILE}  {REMOVED TILE}  {REMOVED TILE}  {REMOVED TILE}  {REMOVED TILE}  {REMOVED TILE}  {REMOVED TILE} 
    //RESULT: Tile{ [[ } Tile{ AsIs: (/7 AsIs: e.Indent#1/5 AsIs: )/8 AsIs: (/11 } e.Indent#1/5/16"{re"/18 Tile{ HalfReuse: 'f'/13 }"alrts::icLinkBrackets, "/20 Tile{ AsIs: </0 Reuse: & StrFromInt/4 } Tile{ AsIs: s.Left#1/14 } >/22", "/23 </25 & StrFromInt/26 Tile{ AsIs: s.Right#1/15 HalfReuse: >/12 HalfReuse: ','/1 }" 0},"/27 )/29 Tile{ ]] }
    if (! refalrts::copy_evar(context[16], context[17], context[5], context[6]))
      return refalrts::cNoMemory;
    if( ! refalrts::alloc_chars( context[18], context[19], "{re", 3 ) )
      return refalrts::cNoMemory;
    if( ! refalrts::alloc_chars( context[20], context[21], "alrts::icLinkBrackets, ", 23 ) )
      return refalrts::cNoMemory;
    if( ! refalrts::alloc_close_call( context[22] ) )
      return refalrts::cNoMemory;
    if( ! refalrts::alloc_chars( context[23], context[24], ", ", 2 ) )
      return refalrts::cNoMemory;
    if( ! refalrts::alloc_open_call( context[25] ) )
      return refalrts::cNoMemory;
    if( ! refalrts::alloc_name( context[26], StrFromInt, "StrFromInt" ) )
      return refalrts::cNoMemory;
    if( ! refalrts::alloc_chars( context[27], context[28], " 0},", 4 ) )
      return refalrts::cNoMemory;
    if( ! refalrts::alloc_close_bracket( context[29] ) )
      return refalrts::cNoMemory;
    refalrts::reinit_char( context[13], 'f' );
    refalrts::update_name( context[4], StrFromInt, "StrFromInt" );
    refalrts::reinit_close_call( context[12] );
    refalrts::reinit_char( context[1], ',' );
    refalrts::link_brackets( context[11], context[29] );
    refalrts::push_stack( context[12] );
    refalrts::push_stack( context[25] );
    refalrts::push_stack( context[22] );
    refalrts::push_stack( context[0] );
    refalrts::link_brackets( context[7], context[8] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = arg_end->next;
    res = refalrts::splice_evar( res, context[27], context[29] );
    res = refalrts::splice_evar( res, context[15], context[1] );
    res = refalrts::splice_evar( res, context[22], context[26] );
    res = refalrts::splice_evar( res, context[14], context[14] );
    res = refalrts::splice_evar( res, context[0], context[4] );
    res = refalrts::splice_evar( res, context[20], context[21] );
    res = refalrts::splice_evar( res, context[13], context[13] );
    res = refalrts::splice_evar( res, context[18], context[19] );
    res = refalrts::splice_evar( res, context[16], context[17] );
    res = refalrts::splice_evar( res, context[7], context[11] );
    refalrts::use( res );
    return refalrts::FnResult(refalrts::cSuccess | (__LINE__ << 8));
  } while ( 0 );

  do {
    refalrts::start_sentence();
    //(E )(#CmdiPushStackS )
    // </0 & GenCommand/4 (/7 e.Indent#1/5 )/8 (/11 # CmdiPushStack/13 s.ElemNumber#1/14 )/12 >/1
    if( ! refalrts::ident_term(  & ident_CmdiPushStack<int>::name, context[13] ) )
      continue;
    // closed e.Indent#1 as range 5
    context[66] = context[9];
    context[67] = context[10];
    if( ! refalrts::svar_left( context[14], context[66], context[67] ) )
      continue;
    if( ! refalrts::empty_seq( context[66], context[67] ) )
      continue;

    refalrts::reset_allocator();
    //TRASH: {REMOVED TILE}  {REMOVED TILE}  {REMOVED TILE}  {REMOVED TILE}  {REMOVED TILE}  {REMOVED TILE} 
    //RESULT: Tile{ [[ } Tile{ AsIs: (/7 AsIs: e.Indent#1/5 AsIs: )/8 AsIs: (/11 } e.Indent#1/5/15 Tile{ HalfReuse: '{'/4 }"refalrts::icPushStack, 0, 0, "/17 Tile{ AsIs: </0 } Tile{ HalfReuse: & StrFromInt/13 AsIs: s.ElemNumber#1/14 HalfReuse: >/12 HalfReuse: '}'/1 } ','/19 )/20 Tile{ ]] }
    if (! refalrts::copy_evar(context[15], context[16], context[5], context[6]))
      return refalrts::cNoMemory;
    if( ! refalrts::alloc_chars( context[17], context[18], "refalrts::icPushStack, 0, 0, ", 29 ) )
      return refalrts::cNoMemory;
    if( ! refalrts::alloc_char( context[19], ',' ) )
      return refalrts::cNoMemory;
    if( ! refalrts::alloc_close_bracket( context[20] ) )
      return refalrts::cNoMemory;
    refalrts::reinit_char( context[4], '{' );
    refalrts::reinit_name( context[13], StrFromInt, "StrFromInt" );
    refalrts::reinit_close_call( context[12] );
    refalrts::reinit_char( context[1], '}' );
    refalrts::link_brackets( context[11], context[20] );
    refalrts::push_stack( context[12] );
    refalrts::push_stack( context[0] );
    refalrts::link_brackets( context[7], context[8] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = arg_end->next;
    res = refalrts::splice_evar( res, context[19], context[20] );
    res = refalrts::splice_evar( res, context[13], context[1] );
    res = refalrts::splice_evar( res, context[0], context[0] );
    res = refalrts::splice_evar( res, context[17], context[18] );
    res = refalrts::splice_evar( res, context[4], context[4] );
    res = refalrts::splice_evar( res, context[15], context[16] );
    res = refalrts::splice_evar( res, context[7], context[11] );
    refalrts::use( res );
    return refalrts::FnResult(refalrts::cSuccess | (__LINE__ << 8));
  } while ( 0 );

  do {
    refalrts::start_sentence();
    //(E )(#CmdiInsertElemS )
    // </0 & GenCommand/4 (/7 e.Indent#1/5 )/8 (/11 # CmdiInsertElem/13 s.ElemNumber#1/14 )/12 >/1
    if( ! refalrts::ident_term(  & ident_CmdiInsertElem<int>::name, context[13] ) )
      continue;
    // closed e.Indent#1 as range 5
    context[66] = context[9];
    context[67] = context[10];
    if( ! refalrts::svar_left( context[14], context[66], context[67] ) )
      continue;
    if( ! refalrts::empty_seq( context[66], context[67] ) )
      continue;

    refalrts::reset_allocator();
    //TRASH: {REMOVED TILE}  {REMOVED TILE}  {REMOVED TILE}  {REMOVED TILE}  {REMOVED TILE}  {REMOVED TILE} 
    //RESULT: Tile{ [[ } Tile{ AsIs: (/7 AsIs: e.Indent#1/5 AsIs: )/8 AsIs: (/11 } e.Indent#1/5/15 Tile{ HalfReuse: '{'/4 }"refalrts::icSpliceElem, 0, 0, "/17 Tile{ AsIs: </0 } Tile{ HalfReuse: & StrFromInt/13 AsIs: s.ElemNumber#1/14 HalfReuse: >/12 HalfReuse: '}'/1 } ','/19 )/20 Tile{ ]] }
    if (! refalrts::copy_evar(context[15], context[16], context[5], context[6]))
      return refalrts::cNoMemory;
    if( ! refalrts::alloc_chars( context[17], context[18], "refalrts::icSpliceElem, 0, 0, ", 30 ) )
      return refalrts::cNoMemory;
    if( ! refalrts::alloc_char( context[19], ',' ) )
      return refalrts::cNoMemory;
    if( ! refalrts::alloc_close_bracket( context[20] ) )
      return refalrts::cNoMemory;
    refalrts::reinit_char( context[4], '{' );
    refalrts::reinit_name( context[13], StrFromInt, "StrFromInt" );
    refalrts::reinit_close_call( context[12] );
    refalrts::reinit_char( context[1], '}' );
    refalrts::link_brackets( context[11], context[20] );
    refalrts::push_stack( context[12] );
    refalrts::push_stack( context[0] );
    refalrts::link_brackets( context[7], context[8] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = arg_end->next;
    res = refalrts::splice_evar( res, context[19], context[20] );
    res = refalrts::splice_evar( res, context[13], context[1] );
    res = refalrts::splice_evar( res, context[0], context[0] );
    res = refalrts::splice_evar( res, context[17], context[18] );
    res = refalrts::splice_evar( res, context[4], context[4] );
    res = refalrts::splice_evar( res, context[15], context[16] );
    res = refalrts::splice_evar( res, context[7], context[11] );
    refalrts::use( res );
    return refalrts::FnResult(refalrts::cSuccess | (__LINE__ << 8));
  } while ( 0 );

  do {
    refalrts::start_sentence();
    //(E )(#CmdiInsertVar'e'S )
    // </0 & GenCommand/4 (/7 e.Indent#1/5 )/8 (/11 # CmdiInsertVar/13 'e'/14 s.Offset#1/15 )/12 >/1
    if( ! refalrts::ident_term(  & ident_CmdiInsertVar<int>::name, context[13] ) )
      continue;
    context[66] = context[9];
    context[67] = context[10];
    context[14] = refalrts::char_left( 'e', context[66], context[67] );
    if( ! context[14] )
      continue;
    // closed e.Indent#1 as range 5
    if( ! refalrts::svar_left( context[15], context[66], context[67] ) )
      continue;
    if( ! refalrts::empty_seq( context[66], context[67] ) )
      continue;

    refalrts::reset_allocator();
    //TRASH: {REMOVED TILE}  {REMOVED TILE}  {REMOVED TILE}  {REMOVED TILE}  {REMOVED TILE} 
    //RESULT: Tile{ [[ } Tile{ AsIs: (/7 AsIs: e.Indent#1/5 AsIs: )/8 AsIs: (/11 } e.Indent#1/5/16 '{'/18 Tile{ HalfReuse: 'r'/0 HalfReuse: 'e'/4 }"falrts::icSpliceEVar, 0, 0, "/19 Tile{ HalfReuse: </13 HalfReuse: & StrFromInt/14 AsIs: s.Offset#1/15 HalfReuse: >/12 HalfReuse: '}'/1 } ','/21 )/22 Tile{ ]] }
    if (! refalrts::copy_evar(context[16], context[17], context[5], context[6]))
      return refalrts::cNoMemory;
    if( ! refalrts::alloc_char( context[18], '{' ) )
      return refalrts::cNoMemory;
    if( ! refalrts::alloc_chars( context[19], context[20], "falrts::icSpliceEVar, 0, 0, ", 28 ) )
      return refalrts::cNoMemory;
    if( ! refalrts::alloc_char( context[21], ',' ) )
      return refalrts::cNoMemory;
    if( ! refalrts::alloc_close_bracket( context[22] ) )
      return refalrts::cNoMemory;
    refalrts::reinit_char( context[0], 'r' );
    refalrts::reinit_char( context[4], 'e' );
    refalrts::reinit_open_call( context[13] );
    refalrts::reinit_name( context[14], StrFromInt, "StrFromInt" );
    refalrts::reinit_close_call( context[12] );
    refalrts::reinit_char( context[1], '}' );
    refalrts::link_brackets( context[11], context[22] );
    refalrts::push_stack( context[12] );
    refalrts::push_stack( context[13] );
    refalrts::link_brackets( context[7], context[8] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = arg_end->next;
    res = refalrts::splice_evar( res, context[21], context[22] );
    res = refalrts::splice_evar( res, context[13], context[1] );
    res = refalrts::splice_evar( res, context[19], context[20] );
    res = refalrts::splice_evar( res, context[0], context[4] );
    res = refalrts::splice_evar( res, context[18], context[18] );
    res = refalrts::splice_evar( res, context[16], context[17] );
    res = refalrts::splice_evar( res, context[7], context[11] );
    refalrts::use( res );
    return refalrts::FnResult(refalrts::cSuccess | (__LINE__ << 8));
  } while ( 0 );

  do {
    refalrts::start_sentence();
    //(E )(#CmdiInsertVarS S )
    // </0 & GenCommand/4 (/7 e.Indent#1/5 )/8 (/11 # CmdiInsertVar/13 s.Mode#1/14 s.Offset#1/15 )/12 >/1
    if( ! refalrts::ident_term(  & ident_CmdiInsertVar<int>::name, context[13] ) )
      continue;
    // closed e.Indent#1 as range 5
    context[66] = context[9];
    context[67] = context[10];
    if( ! refalrts::svar_left( context[14], context[66], context[67] ) )
      continue;
    if( ! refalrts::svar_left( context[15], context[66], context[67] ) )
      continue;
    if( ! refalrts::empty_seq( context[66], context[67] ) )
      continue;

    refalrts::reset_allocator();
    //TRASH: {REMOVED TILE}  {REMOVED TILE}  {REMOVED TILE}  {REMOVED TILE}  s.Mode#1/14 {REMOVED TILE}  {REMOVED TILE} 
    //RESULT: Tile{ [[ } Tile{ AsIs: (/7 AsIs: e.Indent#1/5 AsIs: )/8 AsIs: (/11 } e.Indent#1/5/16"{re"/18 Tile{ HalfReuse: 'f'/13 }"alrts::icSpliceSTVar, 0, 0, "/20 Tile{ AsIs: </0 Reuse: & StrFromInt/4 } Tile{ AsIs: s.Offset#1/15 HalfReuse: >/12 HalfReuse: '}'/1 } ','/22 )/23 Tile{ ]] }
    if (! refalrts::copy_evar(context[16], context[17], context[5], context[6]))
      return refalrts::cNoMemory;
    if( ! refalrts::alloc_chars( context[18], context[19], "{re", 3 ) )
      return refalrts::cNoMemory;
    if( ! refalrts::alloc_chars( context[20], context[21], "alrts::icSpliceSTVar, 0, 0, ", 28 ) )
      return refalrts::cNoMemory;
    if( ! refalrts::alloc_char( context[22], ',' ) )
      return refalrts::cNoMemory;
    if( ! refalrts::alloc_close_bracket( context[23] ) )
      return refalrts::cNoMemory;
    refalrts::reinit_char( context[13], 'f' );
    refalrts::update_name( context[4], StrFromInt, "StrFromInt" );
    refalrts::reinit_close_call( context[12] );
    refalrts::reinit_char( context[1], '}' );
    refalrts::link_brackets( context[11], context[23] );
    refalrts::push_stack( context[12] );
    refalrts::push_stack( context[0] );
    refalrts::link_brackets( context[7], context[8] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = arg_end->next;
    res = refalrts::splice_evar( res, context[22], context[23] );
    res = refalrts::splice_evar( res, context[15], context[1] );
    res = refalrts::splice_evar( res, context[0], context[4] );
    res = refalrts::splice_evar( res, context[20], context[21] );
    res = refalrts::splice_evar( res, context[13], context[13] );
    res = refalrts::splice_evar( res, context[18], context[19] );
    res = refalrts::splice_evar( res, context[16], context[17] );
    res = refalrts::splice_evar( res, context[7], context[11] );
    refalrts::use( res );
    refalrts::splice_to_freelist_open( trash_prev, res );
    return refalrts::FnResult(refalrts::cSuccess | (__LINE__ << 8));
  } while ( 0 );

  do {
    refalrts::start_sentence();
    //(E )(#CmdiInsertRangeS )
    // </0 & GenCommand/4 (/7 e.Indent#1/5 )/8 (/11 # CmdiInsertRange/13 s.ElemNumber#1/14 )/12 >/1
    if( ! refalrts::ident_term(  & ident_CmdiInsertRange<int>::name, context[13] ) )
      continue;
    // closed e.Indent#1 as range 5
    context[66] = context[9];
    context[67] = context[10];
    if( ! refalrts::svar_left( context[14], context[66], context[67] ) )
      continue;
    if( ! refalrts::empty_seq( context[66], context[67] ) )
      continue;

    refalrts::reset_allocator();
    //TRASH: {REMOVED TILE}  {REMOVED TILE}  {REMOVED TILE}  {REMOVED TILE}  {REMOVED TILE}  {REMOVED TILE} 
    //RESULT: Tile{ [[ } Tile{ AsIs: (/7 AsIs: e.Indent#1/5 AsIs: )/8 AsIs: (/11 } e.Indent#1/5/15 Tile{ HalfReuse: '{'/4 }"refalrts::icSpliceRange, 0, 0, "/17 Tile{ AsIs: </0 } Tile{ HalfReuse: & StrFromInt/13 AsIs: s.ElemNumber#1/14 HalfReuse: >/12 HalfReuse: '}'/1 } ','/19 )/20 Tile{ ]] }
    if (! refalrts::copy_evar(context[15], context[16], context[5], context[6]))
      return refalrts::cNoMemory;
    if( ! refalrts::alloc_chars( context[17], context[18], "refalrts::icSpliceRange, 0, 0, ", 31 ) )
      return refalrts::cNoMemory;
    if( ! refalrts::alloc_char( context[19], ',' ) )
      return refalrts::cNoMemory;
    if( ! refalrts::alloc_close_bracket( context[20] ) )
      return refalrts::cNoMemory;
    refalrts::reinit_char( context[4], '{' );
    refalrts::reinit_name( context[13], StrFromInt, "StrFromInt" );
    refalrts::reinit_close_call( context[12] );
    refalrts::reinit_char( context[1], '}' );
    refalrts::link_brackets( context[11], context[20] );
    refalrts::push_stack( context[12] );
    refalrts::push_stack( context[0] );
    refalrts::link_brackets( context[7], context[8] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = arg_end->next;
    res = refalrts::splice_evar( res, context[19], context[20] );
    res = refalrts::splice_evar( res, context[13], context[1] );
    res = refalrts::splice_evar( res, context[0], context[0] );
    res = refalrts::splice_evar( res, context[17], context[18] );
    res = refalrts::splice_evar( res, context[4], context[4] );
    res = refalrts::splice_evar( res, context[15], context[16] );
    res = refalrts::splice_evar( res, context[7], context[11] );
    refalrts::use( res );
    return refalrts::FnResult(refalrts::cSuccess | (__LINE__ << 8));
  } while ( 0 );

  do {
    refalrts::start_sentence();
    //(E )(#CmdiInsertTileS S )
    // </0 & GenCommand/4 (/7 e.Indent#1/5 )/8 (/11 # CmdiInsertTile/13 s.BeginOffset#1/14 s.EndOffset#1/15 )/12 >/1
    if( ! refalrts::ident_term(  & ident_CmdiInsertTile<int>::name, context[13] ) )
      continue;
    // closed e.Indent#1 as range 5
    context[66] = context[9];
    context[67] = context[10];
    if( ! refalrts::svar_left( context[14], context[66], context[67] ) )
      continue;
    if( ! refalrts::svar_left( context[15], context[66], context[67] ) )
      continue;
    if( ! refalrts::empty_seq( context[66], context[67] ) )
      continue;

    refalrts::reset_allocator();
    //TRASH: {REMOVED TILE}  {REMOVED TILE}  {REMOVED TILE}  {REMOVED TILE}  {REMOVED TILE}  {REMOVED TILE}  {REMOVED TILE} 
    //RESULT: Tile{ [[ } Tile{ AsIs: (/7 AsIs: e.Indent#1/5 AsIs: )/8 AsIs: (/11 } e.Indent#1/5/16"{re"/18 Tile{ HalfReuse: 'f'/13 }"alrts::icSpliceTile, "/20 Tile{ AsIs: </0 Reuse: & StrFromInt/4 } Tile{ AsIs: s.BeginOffset#1/14 } >/22", "/23 </25 & StrFromInt/26 Tile{ AsIs: s.EndOffset#1/15 HalfReuse: >/12 HalfReuse: ','/1 }" 0},"/27 )/29 Tile{ ]] }
    if (! refalrts::copy_evar(context[16], context[17], context[5], context[6]))
      return refalrts::cNoMemory;
    if( ! refalrts::alloc_chars( context[18], context[19], "{re", 3 ) )
      return refalrts::cNoMemory;
    if( ! refalrts::alloc_chars( context[20], context[21], "alrts::icSpliceTile, ", 21 ) )
      return refalrts::cNoMemory;
    if( ! refalrts::alloc_close_call( context[22] ) )
      return refalrts::cNoMemory;
    if( ! refalrts::alloc_chars( context[23], context[24], ", ", 2 ) )
      return refalrts::cNoMemory;
    if( ! refalrts::alloc_open_call( context[25] ) )
      return refalrts::cNoMemory;
    if( ! refalrts::alloc_name( context[26], StrFromInt, "StrFromInt" ) )
      return refalrts::cNoMemory;
    if( ! refalrts::alloc_chars( context[27], context[28], " 0},", 4 ) )
      return refalrts::cNoMemory;
    if( ! refalrts::alloc_close_bracket( context[29] ) )
      return refalrts::cNoMemory;
    refalrts::reinit_char( context[13], 'f' );
    refalrts::update_name( context[4], StrFromInt, "StrFromInt" );
    refalrts::reinit_close_call( context[12] );
    refalrts::reinit_char( context[1], ',' );
    refalrts::link_brackets( context[11], context[29] );
    refalrts::push_stack( context[12] );
    refalrts::push_stack( context[25] );
    refalrts::push_stack( context[22] );
    refalrts::push_stack( context[0] );
    refalrts::link_brackets( context[7], context[8] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = arg_end->next;
    res = refalrts::splice_evar( res, context[27], context[29] );
    res = refalrts::splice_evar( res, context[15], context[1] );
    res = refalrts::splice_evar( res, context[22], context[26] );
    res = refalrts::splice_evar( res, context[14], context[14] );
    res = refalrts::splice_evar( res, context[0], context[4] );
    res = refalrts::splice_evar( res, context[20], context[21] );
    res = refalrts::splice_evar( res, context[13], context[13] );
    res = refalrts::splice_evar( res, context[18], context[19] );
    res = refalrts::splice_evar( res, context[16], context[17] );
    res = refalrts::splice_evar( res, context[7], context[11] );
    refalrts::use( res );
    return refalrts::FnResult(refalrts::cSuccess | (__LINE__ << 8));
  } while ( 0 );

  do {
    refalrts::start_sentence();
    //(E )(#CmdiReturnResult)
    // </0 & GenCommand/4 (/7 e.Indent#1/5 )/8 (/11 # CmdiReturnResult/13 )/12 >/1
    if( ! refalrts::ident_term(  & ident_CmdiReturnResult<int>::name, context[13] ) )
      continue;
    context[66] = context[9];
    context[67] = context[10];
    if( ! refalrts::empty_seq( context[66], context[67] ) )
      continue;
    // closed e.Indent#1 as range 5

    refalrts::reset_allocator();
    //TRASH: {REMOVED TILE}  {REMOVED TILE}  {REMOVED TILE}  {REMOVED TILE} 
    //RESULT: Tile{ [[ } Tile{ AsIs: (/7 AsIs: e.Indent#1/5 AsIs: )/8 AsIs: (/11 } e.Indent#1/5/14 Tile{ HalfReuse: '{'/0 HalfReuse: 'r'/4 }"efalrts::icReturnResult, 0, 0, 0"/16 Tile{ HalfReuse: '}'/13 HalfReuse: ','/12 HalfReuse: )/1 ]] }
    if (! refalrts::copy_evar(context[14], context[15], context[5], context[6]))
      return refalrts::cNoMemory;
    if( ! refalrts::alloc_chars( context[16], context[17], "efalrts::icReturnResult, 0, 0, 0", 32 ) )
      return refalrts::cNoMemory;
    refalrts::reinit_char( context[0], '{' );
    refalrts::reinit_char( context[4], 'r' );
    refalrts::reinit_char( context[13], '}' );
    refalrts::reinit_char( context[12], ',' );
    refalrts::reinit_close_bracket( context[1] );
    refalrts::link_brackets( context[11], context[1] );
    refalrts::link_brackets( context[7], context[8] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[13];
    res = refalrts::splice_evar( res, context[16], context[17] );
    res = refalrts::splice_evar( res, context[0], context[4] );
    res = refalrts::splice_evar( res, context[14], context[15] );
    res = refalrts::splice_evar( res, context[7], context[11] );
    refalrts::use( res );
    return refalrts::FnResult(refalrts::cSuccess | (__LINE__ << 8));
  } while ( 0 );

  do {
    refalrts::start_sentence();
    //(E )(#CmdiReturnResult_NoTrash)
    // </0 & GenCommand/4 (/7 e.Indent#1/5 )/8 (/11 # CmdiReturnResult_NoTrash/13 )/12 >/1
    if( ! refalrts::ident_term(  & ident_CmdiReturnResult_NoTrash<int>::name, context[13] ) )
      continue;
    context[66] = context[9];
    context[67] = context[10];
    if( ! refalrts::empty_seq( context[66], context[67] ) )
      continue;
    // closed e.Indent#1 as range 5

    refalrts::reset_allocator();
    //TRASH: {REMOVED TILE}  {REMOVED TILE}  {REMOVED TILE}  {REMOVED TILE} 
    //RESULT: Tile{ [[ } Tile{ AsIs: (/7 AsIs: e.Indent#1/5 AsIs: )/8 AsIs: (/11 } e.Indent#1/5/14 Tile{ HalfReuse: '{'/0 HalfReuse: 'r'/4 }"efalrts::icReturnResult_NoTrash, 0, 0, 0"/16 Tile{ HalfReuse: '}'/13 HalfReuse: ','/12 HalfReuse: )/1 ]] }
    if (! refalrts::copy_evar(context[14], context[15], context[5], context[6]))
      return refalrts::cNoMemory;
    if( ! refalrts::alloc_chars( context[16], context[17], "efalrts::icReturnResult_NoTrash, 0, 0, 0", 40 ) )
      return refalrts::cNoMemory;
    refalrts::reinit_char( context[0], '{' );
    refalrts::reinit_char( context[4], 'r' );
    refalrts::reinit_char( context[13], '}' );
    refalrts::reinit_char( context[12], ',' );
    refalrts::reinit_close_bracket( context[1] );
    refalrts::link_brackets( context[11], context[1] );
    refalrts::link_brackets( context[7], context[8] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[13];
    res = refalrts::splice_evar( res, context[16], context[17] );
    res = refalrts::splice_evar( res, context[0], context[4] );
    res = refalrts::splice_evar( res, context[14], context[15] );
    res = refalrts::splice_evar( res, context[7], context[11] );
    refalrts::use( res );
    return refalrts::FnResult(refalrts::cSuccess | (__LINE__ << 8));
  } while ( 0 );

  do {
    refalrts::start_sentence();
    //(E )(#CmdiTrashS )
    // </0 & GenCommand/4 (/7 e.Indent#1/5 )/8 (/11 # CmdiTrash/13 s.Offset#1/14 )/12 >/1
    if( ! refalrts::ident_term(  & ident_CmdiTrash<int>::name, context[13] ) )
      continue;
    // closed e.Indent#1 as range 5
    context[66] = context[9];
    context[67] = context[10];
    if( ! refalrts::svar_left( context[14], context[66], context[67] ) )
      continue;
    if( ! refalrts::empty_seq( context[66], context[67] ) )
      continue;

    refalrts::reset_allocator();
    //TRASH: {REMOVED TILE}  {REMOVED TILE}  {REMOVED TILE}  {REMOVED TILE}  {REMOVED TILE} 
    //RESULT: Tile{ [[ } Tile{ AsIs: (/7 AsIs: e.Indent#1/5 AsIs: )/8 HalfReuse: </11 HalfReuse: & Fetch/13 AsIs: s.Offset#1/14 HalfReuse: </12 HalfReuse: & CreateClosure /1 } Tile{ Reuse: & lambda_GenCommand_7/4 } Tile{ HalfReuse: (/0 } e.Indent#1/5/15 )/17 >/18 >/19 Tile{ ]] }
    if (! refalrts::copy_evar(context[15], context[16], context[5], context[6]))
      return refalrts::cNoMemory;
    if( ! refalrts::alloc_close_bracket( context[17] ) )
      return refalrts::cNoMemory;
    if( ! refalrts::alloc_close_call( context[18] ) )
      return refalrts::cNoMemory;
    if( ! refalrts::alloc_close_call( context[19] ) )
      return refalrts::cNoMemory;
    refalrts::reinit_open_call( context[11] );
    refalrts::reinit_name( context[13], Fetch, "Fetch" );
    refalrts::reinit_open_call( context[12] );
    refalrts::reinit_name( context[1], refalrts::create_closure, "refalrts::create_closure" );
    refalrts::update_name( context[4], lambda_GenCommand_7, "lambda_GenCommand_7" );
    refalrts::reinit_open_bracket( context[0] );
    refalrts::push_stack( context[19] );
    refalrts::push_stack( context[11] );
    refalrts::push_stack( context[18] );
    refalrts::push_stack( context[12] );
    refalrts::link_brackets( context[0], context[17] );
    refalrts::link_brackets( context[7], context[8] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = arg_end->next;
    res = refalrts::splice_evar( res, context[17], context[19] );
    res = refalrts::splice_evar( res, context[15], context[16] );
    res = refalrts::splice_evar( res, context[0], context[0] );
    res = refalrts::splice_evar( res, context[4], context[4] );
    res = refalrts::splice_evar( res, context[7], context[1] );
    refalrts::use( res );
    return refalrts::FnResult(refalrts::cSuccess | (__LINE__ << 8));
  } while ( 0 );

  //(E )(#CmdiFail)
  // </0 & GenCommand/4 (/7 e.Indent#1/5 )/8 (/11 # CmdiFail/13 )/12 >/1
  if( ! refalrts::ident_term(  & ident_CmdiFail<int>::name, context[13] ) )
    return refalrts::cRecognitionImpossible;
  if( ! refalrts::empty_seq( context[9], context[10] ) )
    return refalrts::cRecognitionImpossible;
  // closed e.Indent#1 as range 5

  refalrts::reset_allocator();
  //TRASH: {REMOVED TILE}  {REMOVED TILE}  {REMOVED TILE}  {REMOVED TILE} 
  //RESULT: Tile{ [[ } Tile{ AsIs: (/7 AsIs: e.Indent#1/5 AsIs: )/8 AsIs: (/11 } e.Indent#1/5/14 Tile{ HalfReuse: '{'/0 HalfReuse: 'r'/4 }"efalrts::icFail, 0, 0, 0"/16 Tile{ HalfReuse: '}'/13 HalfReuse: ','/12 HalfReuse: )/1 ]] }
  if (! refalrts::copy_evar(context[14], context[15], context[5], context[6]))
    return refalrts::cNoMemory;
  if( ! refalrts::alloc_chars( context[16], context[17], "efalrts::icFail, 0, 0, 0", 24 ) )
    return refalrts::cNoMemory;
  refalrts::reinit_char( context[0], '{' );
  refalrts::reinit_char( context[4], 'r' );
  refalrts::reinit_char( context[13], '}' );
  refalrts::reinit_char( context[12], ',' );
  refalrts::reinit_close_bracket( context[1] );
  refalrts::link_brackets( context[11], context[1] );
  refalrts::link_brackets( context[7], context[8] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[13];
  res = refalrts::splice_evar( res, context[16], context[17] );
  res = refalrts::splice_evar( res, context[0], context[4] );
  res = refalrts::splice_evar( res, context[14], context[15] );
  res = refalrts::splice_evar( res, context[7], context[11] );
  refalrts::use( res );
  return refalrts::FnResult(refalrts::cSuccess | (__LINE__ << 8));
#endif
}

static refalrts::FnResult Escape(refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  refalrts::this_is_generated_function();
  // issue here memory for vars with 6 elems
  refalrts::Iter context[6];
  refalrts::zeros( context, 6 );
#ifdef INTERPRET
  static const refalrts::RefalFunction functions[] = {
    { EscapeChar, "EscapeChar" }
  };
  using refalrts::idents;
  using refalrts::numbers;
  using refalrts::strings;
  static const refalrts::RASLCommand raa[] = {
    // </0 & Escape/4 s.Char#1/5 >/1
    {refalrts::icInitB0_Lite, 0, 0, 0},
    {refalrts::icCallSaveLeft, 0, 2, 0},
    {refalrts::icsVarLeft, 0, 5, 2},
    {refalrts::icEmpty, 0, 0, 2},
    {refalrts::icEmptyResult, 0, 0, 0},
    //TRASH: {REMOVED TILE} 
    //RESULT: Tile{ [[ AsIs: </0 Reuse: & EscapeChar/4 AsIs: s.Char#1/5 AsIs: >/1 ]] }
    {refalrts::icUpdateFunc, 0, 0, 4},
    {refalrts::icPushStack, 0, 0, 1},
    {refalrts::icPushStack, 0, 0, 0},
    {refalrts::icReturnResult_NoTrash, 0, 0, 0},
    {refalrts::icEnd, 0, 0, 0}
  };
  int open_e_stack[1];
  refalrts::FnResult res = refalrts::interpret_array(
    raa, context, arg_begin, arg_end,
    functions, idents, numbers, strings, open_e_stack
  );
  return res;
#else
  // </0 & Escape/4 s.Char#1/5 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  if( ! refalrts::svar_left( context[5], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  if( ! refalrts::empty_seq( context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;

  refalrts::reset_allocator();
  //TRASH: {REMOVED TILE} 
  //RESULT: Tile{ [[ AsIs: </0 Reuse: & EscapeChar/4 AsIs: s.Char#1/5 AsIs: >/1 ]] }
  refalrts::update_name( context[4], EscapeChar, "EscapeChar" );
  refalrts::push_stack( context[1] );
  refalrts::push_stack( context[0] );
  return refalrts::FnResult(refalrts::cSuccess | (__LINE__ << 8));
#endif
}

static refalrts::FnResult EscapeString(refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  refalrts::this_is_generated_function();
  // issue here memory for vars with 6 elems
  refalrts::Iter context[6];
  refalrts::zeros( context, 6 );
#ifdef INTERPRET
  static const refalrts::RefalFunction functions[] = {
    { EscapeChar, "EscapeChar" },
    { Map, "Map" }
  };
  using refalrts::idents;
  using refalrts::numbers;
  using refalrts::strings;
  static const refalrts::RASLCommand raa[] = {
    // </0 & EscapeString/4 e.String#1/2 >/1
    {refalrts::icInitB0_Lite, 0, 0, 0},
    {refalrts::icCallSaveLeft, 0, 2, 0},
    // closed e.String#1 as range 2
    {refalrts::icEmptyResult, 0, 0, 0},
    //TRASH: {REMOVED TILE}  {REMOVED TILE} 
    //RESULT: Tile{ [[ } </5 Tile{ HalfReuse: & Map/0 Reuse: & EscapeChar/4 AsIs: e.String#1/2 AsIs: >/1 ]] }
    {refalrts::icAllocBracket, 0, refalrts::ibOpenCall, 5},
    {refalrts::icReinitFunc, 0, 1, 0},
    {refalrts::icUpdateFunc, 0, 0, 4},
    {refalrts::icPushStack, 0, 0, 1},
    {refalrts::icPushStack, 0, 0, 5},
    {refalrts::icSetRes, 0, 0, 0},
    {refalrts::icSpliceTile, 5, 5, 0},
    {refalrts::icReturnResult_NoTrash, 0, 0, 0},
    {refalrts::icEnd, 0, 0, 0}
  };
  int open_e_stack[1];
  refalrts::FnResult res = refalrts::interpret_array(
    raa, context, arg_begin, arg_end,
    functions, idents, numbers, strings, open_e_stack
  );
  return res;
#else
  // </0 & EscapeString/4 e.String#1/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.String#1 as range 2

  refalrts::reset_allocator();
  //TRASH: {REMOVED TILE}  {REMOVED TILE} 
  //RESULT: Tile{ [[ } </5 Tile{ HalfReuse: & Map/0 Reuse: & EscapeChar/4 AsIs: e.String#1/2 AsIs: >/1 ]] }
  if( ! refalrts::alloc_open_call( context[5] ) )
    return refalrts::cNoMemory;
  refalrts::reinit_name( context[0], Map, "Map" );
  refalrts::update_name( context[4], EscapeChar, "EscapeChar" );
  refalrts::push_stack( context[1] );
  refalrts::push_stack( context[5] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[0];
  res = refalrts::splice_evar( res, context[5], context[5] );
  refalrts::use( res );
  return refalrts::FnResult(refalrts::cSuccess | (__LINE__ << 8));
#endif
}

static refalrts::FnResult PrintLength(refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  refalrts::this_is_generated_function();
  // issue here memory for vars with 6 elems
  refalrts::Iter context[6];
  refalrts::zeros( context, 6 );
#ifdef INTERPRET
  static const refalrts::RefalFunction functions[] = {
    { DoPrintLength, "DoPrintLength" }
  };
  using refalrts::idents;
  using refalrts::numbers;
  using refalrts::strings;
  static const refalrts::RASLCommand raa[] = {
    // </0 & PrintLength/4 e.String#1/2 >/1
    {refalrts::icInitB0_Lite, 0, 0, 0},
    {refalrts::icCallSaveLeft, 0, 2, 0},
    // closed e.String#1 as range 2
    {refalrts::icEmptyResult, 0, 0, 0},
    //TRASH: {REMOVED TILE}  {REMOVED TILE} 
    //RESULT: Tile{ [[ } </5 Tile{ HalfReuse: & DoPrintLength/0 HalfReuse: 0/4 AsIs: e.String#1/2 AsIs: >/1 ]] }
    {refalrts::icAllocBracket, 0, refalrts::ibOpenCall, 5},
    {refalrts::icReinitFunc, 0, 0, 0},
    {refalrts::icReinitInt, 0, 0, 4},
    {refalrts::icPushStack, 0, 0, 1},
    {refalrts::icPushStack, 0, 0, 5},
    {refalrts::icSetRes, 0, 0, 0},
    {refalrts::icSpliceTile, 5, 5, 0},
    {refalrts::icReturnResult_NoTrash, 0, 0, 0},
    {refalrts::icEnd, 0, 0, 0}
  };
  int open_e_stack[1];
  refalrts::FnResult res = refalrts::interpret_array(
    raa, context, arg_begin, arg_end,
    functions, idents, numbers, strings, open_e_stack
  );
  return res;
#else
  // </0 & PrintLength/4 e.String#1/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.String#1 as range 2

  refalrts::reset_allocator();
  //TRASH: {REMOVED TILE}  {REMOVED TILE} 
  //RESULT: Tile{ [[ } </5 Tile{ HalfReuse: & DoPrintLength/0 HalfReuse: 0/4 AsIs: e.String#1/2 AsIs: >/1 ]] }
  if( ! refalrts::alloc_open_call( context[5] ) )
    return refalrts::cNoMemory;
  refalrts::reinit_name( context[0], DoPrintLength, "DoPrintLength" );
  refalrts::reinit_number( context[4], 0UL );
  refalrts::push_stack( context[1] );
  refalrts::push_stack( context[5] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[0];
  res = refalrts::splice_evar( res, context[5], context[5] );
  refalrts::use( res );
  return refalrts::FnResult(refalrts::cSuccess | (__LINE__ << 8));
#endif
}

static refalrts::FnResult DoPrintLength(refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  refalrts::this_is_generated_function();
  // issue here memory for vars with 12 elems
  refalrts::Iter context[12];
  refalrts::zeros( context, 12 );
#ifdef INTERPRET
  static const refalrts::RefalFunction functions[] = {
    { StrFromInt, "StrFromInt" },
    { Inc, "Inc" }
  };
  using refalrts::idents;
  using refalrts::numbers;
  using refalrts::strings;
  static const refalrts::RASLCommand raa[] = {
    //FAST GEN:E 
    //GLOBAL GEN:S E 
    // </0 & DoPrintLength/4 s.idx#0/5 e.idxV#0/2 >/1
    {refalrts::icInitB0_Lite, 0, 0, 0},
    {refalrts::icCallSaveLeft, 0, 2, 0},
    {refalrts::icsVarLeft, 0, 5, 2},
    // closed e.idxV#0 as range 2
    {refalrts::icOnFailGoTo, +17, 0, 0},
    //S S E 
    // </0 & DoPrintLength/4 s.Length#1/5 s.Char#1/6 e.Tail#1/2 >/1
    {refalrts::icSave, 0, 10, 2},
    {refalrts::icsVarLeft, 0, 6, 10},
    // closed e.Tail#1 as range 10(2)
    {refalrts::icEmptyResult, 0, 0, 0},
    //TRASH: {REMOVED TILE}  {REMOVED TILE}  s.Char#1/6 {REMOVED TILE}  {REMOVED TILE} 
    //RESULT: Tile{ [[ AsIs: </0 AsIs: & DoPrintLength/4 } </7 & Inc/8 Tile{ AsIs: s.Length#1/5 } >/9 Tile{ AsIs: e.Tail#1/10(2) } Tile{ AsIs: >/1 ]] }
    {refalrts::icAllocBracket, 0, refalrts::ibOpenCall, 7},
    {refalrts::icAllocFunc, 0, 1, 8},
    {refalrts::icAllocBracket, 0, refalrts::ibCloseCall, 9},
    {refalrts::icPushStack, 0, 0, 1},
    {refalrts::icPushStack, 0, 0, 0},
    {refalrts::icPushStack, 0, 0, 9},
    {refalrts::icPushStack, 0, 0, 7},
    {refalrts::icSetRes, 0, 0, 1},
    {refalrts::icSpliceEVar, 0, 0, 10},
    {refalrts::icSpliceTile, 9, 9, 0},
    {refalrts::icSpliceTile, 5, 5, 0},
    {refalrts::icSpliceTile, 7, 8, 0},
    {refalrts::icTrash, 0, 0, 4},
    {refalrts::icReturnResult_NoTrash, 0, 0, 0},
    //S 
    // </0 & DoPrintLength/4 s.Length#1/5 >/1
    {refalrts::icEmpty, 0, 0, 2},
    {refalrts::icEmptyResult, 0, 0, 0},
    //TRASH: {REMOVED TILE} 
    //RESULT: Tile{ [[ AsIs: </0 Reuse: & StrFromInt/4 AsIs: s.Length#1/5 AsIs: >/1 ]] }
    {refalrts::icUpdateFunc, 0, 0, 4},
    {refalrts::icPushStack, 0, 0, 1},
    {refalrts::icPushStack, 0, 0, 0},
    {refalrts::icReturnResult_NoTrash, 0, 0, 0},
    {refalrts::icEnd, 0, 0, 0}
  };
  int open_e_stack[1];
  refalrts::FnResult res = refalrts::interpret_array(
    raa, context, arg_begin, arg_end,
    functions, idents, numbers, strings, open_e_stack
  );
  return res;
#else
  //FAST GEN:E 
  //GLOBAL GEN:S E 
  // </0 & DoPrintLength/4 s.idx#0/5 e.idxV#0/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  if( ! refalrts::svar_left( context[5], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  // closed e.idxV#0 as range 2
  do {
    refalrts::start_sentence();
    //S S E 
    // </0 & DoPrintLength/4 s.Length#1/5 s.Char#1/6 e.Tail#1/2 >/1
    context[10] = context[2];
    context[11] = context[3];
    if( ! refalrts::svar_left( context[6], context[10], context[11] ) )
      continue;
    // closed e.Tail#1 as range 10(2)

    refalrts::reset_allocator();
    //TRASH: {REMOVED TILE}  {REMOVED TILE}  s.Char#1/6 {REMOVED TILE}  {REMOVED TILE} 
    //RESULT: Tile{ [[ AsIs: </0 AsIs: & DoPrintLength/4 } </7 & Inc/8 Tile{ AsIs: s.Length#1/5 } >/9 Tile{ AsIs: e.Tail#1/10(2) } Tile{ AsIs: >/1 ]] }
    if( ! refalrts::alloc_open_call( context[7] ) )
      return refalrts::cNoMemory;
    if( ! refalrts::alloc_name( context[8], Inc, "Inc" ) )
      return refalrts::cNoMemory;
    if( ! refalrts::alloc_close_call( context[9] ) )
      return refalrts::cNoMemory;
    refalrts::push_stack( context[1] );
    refalrts::push_stack( context[0] );
    refalrts::push_stack( context[9] );
    refalrts::push_stack( context[7] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    res = refalrts::splice_evar( res, context[10], context[11] );
    res = refalrts::splice_evar( res, context[9], context[9] );
    res = refalrts::splice_evar( res, context[5], context[5] );
    res = refalrts::splice_evar( res, context[7], context[8] );
    refalrts::use( res );
    refalrts::splice_to_freelist_open( context[4], res );
    return refalrts::FnResult(refalrts::cSuccess | (__LINE__ << 8));
  } while ( 0 );

  //S 
  // </0 & DoPrintLength/4 s.Length#1/5 >/1
  if( ! refalrts::empty_seq( context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;

  refalrts::reset_allocator();
  //TRASH: {REMOVED TILE} 
  //RESULT: Tile{ [[ AsIs: </0 Reuse: & StrFromInt/4 AsIs: s.Length#1/5 AsIs: >/1 ]] }
  refalrts::update_name( context[4], StrFromInt, "StrFromInt" );
  refalrts::push_stack( context[1] );
  refalrts::push_stack( context[0] );
  return refalrts::FnResult(refalrts::cSuccess | (__LINE__ << 8));
#endif
}

static refalrts::FnResult PrintString(refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  refalrts::this_is_generated_function();
  // issue here memory for vars with 13 elems
  refalrts::Iter context[13];
  refalrts::zeros( context, 13 );
#ifdef INTERPRET
  static const refalrts::RefalFunction functions[] = {
    { PrintLength, "PrintLength" },
    { EscapeString, "EscapeString" }
  };
  using refalrts::idents;
  using refalrts::numbers;
  static const refalrts::StringItem strings[] = {
    {"\", ", 3}
  };
  static const refalrts::RASLCommand raa[] = {
    // </0 & PrintString/4 e.String#1/2 >/1
    {refalrts::icInitB0_Lite, 0, 0, 0},
    {refalrts::icCallSaveLeft, 0, 2, 0},
    // closed e.String#1 as range 2
    {refalrts::icEmptyResult, 0, 0, 0},
    //TRASH: {REMOVED TILE}  {REMOVED TILE} 
    //RESULT: Tile{ [[ } '\"'/5 </6 & EscapeString/7 e.String#1/2/8 >/10"\", "/11 Tile{ AsIs: </0 Reuse: & PrintLength/4 AsIs: e.String#1/2 AsIs: >/1 ]] }
    {refalrts::icAllocChar, 0, '\"', 5},
    {refalrts::icAllocBracket, 0, refalrts::ibOpenCall, 6},
    {refalrts::icAllocFunc, 0, 1, 7},
    {refalrts::icCopyEVar, 8, 2, 0},
    {refalrts::icAllocBracket, 0, refalrts::ibCloseCall, 10},
    {refalrts::icAllocString, 0, 0, 11},
    {refalrts::icUpdateFunc, 0, 0, 4},
    {refalrts::icPushStack, 0, 0, 1},
    {refalrts::icPushStack, 0, 0, 0},
    {refalrts::icPushStack, 0, 0, 10},
    {refalrts::icPushStack, 0, 0, 6},
    {refalrts::icSetRes, 0, 0, 0},
    {refalrts::icSpliceTile, 5, 12, 0},
    {refalrts::icReturnResult_NoTrash, 0, 0, 0},
    {refalrts::icEnd, 0, 0, 0}
  };
  int open_e_stack[1];
  refalrts::FnResult res = refalrts::interpret_array(
    raa, context, arg_begin, arg_end,
    functions, idents, numbers, strings, open_e_stack
  );
  return res;
#else
  // </0 & PrintString/4 e.String#1/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.String#1 as range 2

  refalrts::reset_allocator();
  //TRASH: {REMOVED TILE}  {REMOVED TILE} 
  //RESULT: Tile{ [[ } '\"'/5 </6 & EscapeString/7 e.String#1/2/8 >/10"\", "/11 Tile{ AsIs: </0 Reuse: & PrintLength/4 AsIs: e.String#1/2 AsIs: >/1 ]] }
  if( ! refalrts::alloc_char( context[5], '\"' ) )
    return refalrts::cNoMemory;
  if( ! refalrts::alloc_open_call( context[6] ) )
    return refalrts::cNoMemory;
  if( ! refalrts::alloc_name( context[7], EscapeString, "EscapeString" ) )
    return refalrts::cNoMemory;
  if (! refalrts::copy_evar(context[8], context[9], context[2], context[3]))
    return refalrts::cNoMemory;
  if( ! refalrts::alloc_close_call( context[10] ) )
    return refalrts::cNoMemory;
  if( ! refalrts::alloc_chars( context[11], context[12], "\", ", 3 ) )
    return refalrts::cNoMemory;
  refalrts::update_name( context[4], PrintLength, "PrintLength" );
  refalrts::push_stack( context[1] );
  refalrts::push_stack( context[0] );
  refalrts::push_stack( context[10] );
  refalrts::push_stack( context[6] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[0];
  res = refalrts::splice_evar( res, context[5], context[12] );
  refalrts::use( res );
  return refalrts::FnResult(refalrts::cSuccess | (__LINE__ << 8));
#endif
}

static refalrts::FnResult PrintMatchChar(refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  refalrts::this_is_generated_function();
  // issue here memory for vars with 21 elems
  refalrts::Iter context[21];
  refalrts::zeros( context, 21 );
#ifdef INTERPRET
  static const refalrts::RefalFunction functions[] = {
    { PrintMatch, "PrintMatch" },
    { Escape, "Escape" }
  };
  using refalrts::idents;
  using refalrts::numbers;
  static const refalrts::StringItem strings[] = {
    {"char", 4}
  };
  static const refalrts::RASLCommand raa[] = {
    // </0 & PrintMatchChar/4 (/7 e.Indent#1/5 )/8 s.Direction#1/9 s.BracketNumber#1/10 s.Char#1/11 >/1
    {refalrts::icInitB0_Lite, 0, 0, 0},
    {refalrts::icCallSaveLeft, 0, 2, 0},
    {refalrts::icBracketLeftSave, 0, 5, 2},
    // closed e.Indent#1 as range 5
    {refalrts::icsVarLeft, 0, 9, 2},
    {refalrts::icsVarLeft, 0, 10, 2},
    {refalrts::icsVarLeft, 0, 11, 2},
    {refalrts::icEmpty, 0, 0, 2},
    {refalrts::icEmptyResult, 0, 0, 0},
    //TRASH: {REMOVED TILE}  {REMOVED TILE}  {REMOVED TILE} 
    //RESULT: Tile{ [[ AsIs: </0 Reuse: & PrintMatch/4 AsIs: (/7 AsIs: e.Indent#1/5 AsIs: )/8 AsIs: s.Direction#1/9 AsIs: s.BracketNumber#1/10 } (/12"char"/13 )/15 '\''/16 </17 & Escape/18 Tile{ AsIs: s.Char#1/11 AsIs: >/1 } '\''/19 >/20 Tile{ ]] }
    {refalrts::icAllocBracket, 0, refalrts::ibOpenBracket, 12},
    {refalrts::icAllocString, 0, 0, 13},
    {refalrts::icAllocBracket, 0, refalrts::ibCloseBracket, 15},
    {refalrts::icAllocChar, 0, '\'', 16},
    {refalrts::icAllocBracket, 0, refalrts::ibOpenCall, 17},
    {refalrts::icAllocFunc, 0, 1, 18},
    {refalrts::icAllocChar, 0, '\'', 19},
    {refalrts::icAllocBracket, 0, refalrts::ibCloseCall, 20},
    {refalrts::icUpdateFunc, 0, 0, 4},
    {refalrts::icPushStack, 0, 0, 20},
    {refalrts::icPushStack, 0, 0, 0},
    {refalrts::icPushStack, 0, 0, 1},
    {refalrts::icPushStack, 0, 0, 17},
    {refalrts::icLinkBrackets, 12, 15, 0},
    {refalrts::icLinkBrackets, 7, 8, 0},
    {refalrts::icSetResRightEdge, 0, 0, 0},
    {refalrts::icSpliceTile, 19, 20, 0},
    {refalrts::icSpliceTile, 11, 1, 0},
    {refalrts::icSpliceTile, 12, 18, 0},
    {refalrts::icReturnResult_NoTrash, 0, 0, 0},
    {refalrts::icEnd, 0, 0, 0}
  };
  int open_e_stack[1];
  refalrts::FnResult res = refalrts::interpret_array(
    raa, context, arg_begin, arg_end,
    functions, idents, numbers, strings, open_e_stack
  );
  return res;
#else
  // </0 & PrintMatchChar/4 (/7 e.Indent#1/5 )/8 s.Direction#1/9 s.BracketNumber#1/10 s.Char#1/11 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  context[5] = 0;
  context[6] = 0;
  context[7] = refalrts::brackets_left( context[5], context[6], context[2], context[3] );
  if( ! context[7] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[7], context[8]);
  // closed e.Indent#1 as range 5
  if( ! refalrts::svar_left( context[9], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  if( ! refalrts::svar_left( context[10], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  if( ! refalrts::svar_left( context[11], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  if( ! refalrts::empty_seq( context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;

  refalrts::reset_allocator();
  //TRASH: {REMOVED TILE}  {REMOVED TILE}  {REMOVED TILE} 
  //RESULT: Tile{ [[ AsIs: </0 Reuse: & PrintMatch/4 AsIs: (/7 AsIs: e.Indent#1/5 AsIs: )/8 AsIs: s.Direction#1/9 AsIs: s.BracketNumber#1/10 } (/12"char"/13 )/15 '\''/16 </17 & Escape/18 Tile{ AsIs: s.Char#1/11 AsIs: >/1 } '\''/19 >/20 Tile{ ]] }
  if( ! refalrts::alloc_open_bracket( context[12] ) )
    return refalrts::cNoMemory;
  if( ! refalrts::alloc_chars( context[13], context[14], "char", 4 ) )
    return refalrts::cNoMemory;
  if( ! refalrts::alloc_close_bracket( context[15] ) )
    return refalrts::cNoMemory;
  if( ! refalrts::alloc_char( context[16], '\'' ) )
    return refalrts::cNoMemory;
  if( ! refalrts::alloc_open_call( context[17] ) )
    return refalrts::cNoMemory;
  if( ! refalrts::alloc_name( context[18], Escape, "Escape" ) )
    return refalrts::cNoMemory;
  if( ! refalrts::alloc_char( context[19], '\'' ) )
    return refalrts::cNoMemory;
  if( ! refalrts::alloc_close_call( context[20] ) )
    return refalrts::cNoMemory;
  refalrts::update_name( context[4], PrintMatch, "PrintMatch" );
  refalrts::push_stack( context[20] );
  refalrts::push_stack( context[0] );
  refalrts::push_stack( context[1] );
  refalrts::push_stack( context[17] );
  refalrts::link_brackets( context[12], context[15] );
  refalrts::link_brackets( context[7], context[8] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = arg_end->next;
  res = refalrts::splice_evar( res, context[19], context[20] );
  res = refalrts::splice_evar( res, context[11], context[1] );
  res = refalrts::splice_evar( res, context[12], context[18] );
  refalrts::use( res );
  return refalrts::FnResult(refalrts::cSuccess | (__LINE__ << 8));
#endif
}

static refalrts::FnResult PrintMatchCharSave(refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  refalrts::this_is_generated_function();
  // issue here memory for vars with 22 elems
  refalrts::Iter context[22];
  refalrts::zeros( context, 22 );
#ifdef INTERPRET
  static const refalrts::RefalFunction functions[] = {
    { PrintMatchSave, "PrintMatchSave" },
    { Escape, "Escape" }
  };
  using refalrts::idents;
  using refalrts::numbers;
  static const refalrts::StringItem strings[] = {
    {"char", 4}
  };
  static const refalrts::RASLCommand raa[] = {
    // </0 & PrintMatchCharSave/4 (/7 e.Indent#1/5 )/8 s.Offset#1/9 s.Direction#1/10 s.BracketNumber#1/11 s.Char#1/12 >/1
    {refalrts::icInitB0_Lite, 0, 0, 0},
    {refalrts::icCallSaveLeft, 0, 2, 0},
    {refalrts::icBracketLeftSave, 0, 5, 2},
    // closed e.Indent#1 as range 5
    {refalrts::icsVarLeft, 0, 9, 2},
    {refalrts::icsVarLeft, 0, 10, 2},
    {refalrts::icsVarLeft, 0, 11, 2},
    {refalrts::icsVarLeft, 0, 12, 2},
    {refalrts::icEmpty, 0, 0, 2},
    {refalrts::icEmptyResult, 0, 0, 0},
    //TRASH: {REMOVED TILE}  {REMOVED TILE}  {REMOVED TILE} 
    //RESULT: Tile{ [[ AsIs: </0 Reuse: & PrintMatchSave/4 AsIs: (/7 AsIs: e.Indent#1/5 AsIs: )/8 AsIs: s.Offset#1/9 AsIs: s.Direction#1/10 AsIs: s.BracketNumber#1/11 } (/13"char"/14 )/16 '\''/17 </18 & Escape/19 Tile{ AsIs: s.Char#1/12 AsIs: >/1 } '\''/20 >/21 Tile{ ]] }
    {refalrts::icAllocBracket, 0, refalrts::ibOpenBracket, 13},
    {refalrts::icAllocString, 0, 0, 14},
    {refalrts::icAllocBracket, 0, refalrts::ibCloseBracket, 16},
    {refalrts::icAllocChar, 0, '\'', 17},
    {refalrts::icAllocBracket, 0, refalrts::ibOpenCall, 18},
    {refalrts::icAllocFunc, 0, 1, 19},
    {refalrts::icAllocChar, 0, '\'', 20},
    {refalrts::icAllocBracket, 0, refalrts::ibCloseCall, 21},
    {refalrts::icUpdateFunc, 0, 0, 4},
    {refalrts::icPushStack, 0, 0, 21},
    {refalrts::icPushStack, 0, 0, 0},
    {refalrts::icPushStack, 0, 0, 1},
    {refalrts::icPushStack, 0, 0, 18},
    {refalrts::icLinkBrackets, 13, 16, 0},
    {refalrts::icLinkBrackets, 7, 8, 0},
    {refalrts::icSetResRightEdge, 0, 0, 0},
    {refalrts::icSpliceTile, 20, 21, 0},
    {refalrts::icSpliceTile, 12, 1, 0},
    {refalrts::icSpliceTile, 13, 19, 0},
    {refalrts::icReturnResult_NoTrash, 0, 0, 0},
    {refalrts::icEnd, 0, 0, 0}
  };
  int open_e_stack[1];
  refalrts::FnResult res = refalrts::interpret_array(
    raa, context, arg_begin, arg_end,
    functions, idents, numbers, strings, open_e_stack
  );
  return res;
#else
  // </0 & PrintMatchCharSave/4 (/7 e.Indent#1/5 )/8 s.Offset#1/9 s.Direction#1/10 s.BracketNumber#1/11 s.Char#1/12 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  context[5] = 0;
  context[6] = 0;
  context[7] = refalrts::brackets_left( context[5], context[6], context[2], context[3] );
  if( ! context[7] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[7], context[8]);
  // closed e.Indent#1 as range 5
  if( ! refalrts::svar_left( context[9], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  if( ! refalrts::svar_left( context[10], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  if( ! refalrts::svar_left( context[11], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  if( ! refalrts::svar_left( context[12], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  if( ! refalrts::empty_seq( context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;

  refalrts::reset_allocator();
  //TRASH: {REMOVED TILE}  {REMOVED TILE}  {REMOVED TILE} 
  //RESULT: Tile{ [[ AsIs: </0 Reuse: & PrintMatchSave/4 AsIs: (/7 AsIs: e.Indent#1/5 AsIs: )/8 AsIs: s.Offset#1/9 AsIs: s.Direction#1/10 AsIs: s.BracketNumber#1/11 } (/13"char"/14 )/16 '\''/17 </18 & Escape/19 Tile{ AsIs: s.Char#1/12 AsIs: >/1 } '\''/20 >/21 Tile{ ]] }
  if( ! refalrts::alloc_open_bracket( context[13] ) )
    return refalrts::cNoMemory;
  if( ! refalrts::alloc_chars( context[14], context[15], "char", 4 ) )
    return refalrts::cNoMemory;
  if( ! refalrts::alloc_close_bracket( context[16] ) )
    return refalrts::cNoMemory;
  if( ! refalrts::alloc_char( context[17], '\'' ) )
    return refalrts::cNoMemory;
  if( ! refalrts::alloc_open_call( context[18] ) )
    return refalrts::cNoMemory;
  if( ! refalrts::alloc_name( context[19], Escape, "Escape" ) )
    return refalrts::cNoMemory;
  if( ! refalrts::alloc_char( context[20], '\'' ) )
    return refalrts::cNoMemory;
  if( ! refalrts::alloc_close_call( context[21] ) )
    return refalrts::cNoMemory;
  refalrts::update_name( context[4], PrintMatchSave, "PrintMatchSave" );
  refalrts::push_stack( context[21] );
  refalrts::push_stack( context[0] );
  refalrts::push_stack( context[1] );
  refalrts::push_stack( context[18] );
  refalrts::link_brackets( context[13], context[16] );
  refalrts::link_brackets( context[7], context[8] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = arg_end->next;
  res = refalrts::splice_evar( res, context[20], context[21] );
  res = refalrts::splice_evar( res, context[12], context[1] );
  res = refalrts::splice_evar( res, context[13], context[19] );
  refalrts::use( res );
  return refalrts::FnResult(refalrts::cSuccess | (__LINE__ << 8));
#endif
}

static refalrts::FnResult PrintMatchNumber(refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  refalrts::this_is_generated_function();
  // issue here memory for vars with 21 elems
  refalrts::Iter context[21];
  refalrts::zeros( context, 21 );
#ifdef INTERPRET
  static const refalrts::RefalFunction functions[] = {
    { PrintMatch, "PrintMatch" },
    { StrFromInt, "StrFromInt" }
  };
  using refalrts::idents;
  using refalrts::numbers;
  static const refalrts::StringItem strings[] = {
    {"UL", 2},
    {"number", 6}
  };
  static const refalrts::RASLCommand raa[] = {
    // </0 & PrintMatchNumber/4 (/7 e.Indent#1/5 )/8 s.Direction#1/9 s.BracketNumber#1/10 s.Number#1/11 >/1
    {refalrts::icInitB0_Lite, 0, 0, 0},
    {refalrts::icCallSaveLeft, 0, 2, 0},
    {refalrts::icBracketLeftSave, 0, 5, 2},
    // closed e.Indent#1 as range 5
    {refalrts::icsVarLeft, 0, 9, 2},
    {refalrts::icsVarLeft, 0, 10, 2},
    {refalrts::icsVarLeft, 0, 11, 2},
    {refalrts::icEmpty, 0, 0, 2},
    {refalrts::icEmptyResult, 0, 0, 0},
    //TRASH: {REMOVED TILE}  {REMOVED TILE}  {REMOVED TILE} 
    //RESULT: Tile{ [[ AsIs: </0 Reuse: & PrintMatch/4 AsIs: (/7 AsIs: e.Indent#1/5 AsIs: )/8 AsIs: s.Direction#1/9 AsIs: s.BracketNumber#1/10 } (/12"number"/13 )/15 </16 & StrFromInt/17 Tile{ AsIs: s.Number#1/11 AsIs: >/1 }"UL"/18 >/20 Tile{ ]] }
    {refalrts::icAllocBracket, 0, refalrts::ibOpenBracket, 12},
    {refalrts::icAllocString, 0, 1, 13},
    {refalrts::icAllocBracket, 0, refalrts::ibCloseBracket, 15},
    {refalrts::icAllocBracket, 0, refalrts::ibOpenCall, 16},
    {refalrts::icAllocFunc, 0, 1, 17},
    {refalrts::icAllocString, 0, 0, 18},
    {refalrts::icAllocBracket, 0, refalrts::ibCloseCall, 20},
    {refalrts::icUpdateFunc, 0, 0, 4},
    {refalrts::icPushStack, 0, 0, 20},
    {refalrts::icPushStack, 0, 0, 0},
    {refalrts::icPushStack, 0, 0, 1},
    {refalrts::icPushStack, 0, 0, 16},
    {refalrts::icLinkBrackets, 12, 15, 0},
    {refalrts::icLinkBrackets, 7, 8, 0},
    {refalrts::icSetResRightEdge, 0, 0, 0},
    {refalrts::icSpliceTile, 18, 20, 0},
    {refalrts::icSpliceTile, 11, 1, 0},
    {refalrts::icSpliceTile, 12, 17, 0},
    {refalrts::icReturnResult_NoTrash, 0, 0, 0},
    {refalrts::icEnd, 0, 0, 0}
  };
  int open_e_stack[1];
  refalrts::FnResult res = refalrts::interpret_array(
    raa, context, arg_begin, arg_end,
    functions, idents, numbers, strings, open_e_stack
  );
  return res;
#else
  // </0 & PrintMatchNumber/4 (/7 e.Indent#1/5 )/8 s.Direction#1/9 s.BracketNumber#1/10 s.Number#1/11 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  context[5] = 0;
  context[6] = 0;
  context[7] = refalrts::brackets_left( context[5], context[6], context[2], context[3] );
  if( ! context[7] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[7], context[8]);
  // closed e.Indent#1 as range 5
  if( ! refalrts::svar_left( context[9], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  if( ! refalrts::svar_left( context[10], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  if( ! refalrts::svar_left( context[11], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  if( ! refalrts::empty_seq( context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;

  refalrts::reset_allocator();
  //TRASH: {REMOVED TILE}  {REMOVED TILE}  {REMOVED TILE} 
  //RESULT: Tile{ [[ AsIs: </0 Reuse: & PrintMatch/4 AsIs: (/7 AsIs: e.Indent#1/5 AsIs: )/8 AsIs: s.Direction#1/9 AsIs: s.BracketNumber#1/10 } (/12"number"/13 )/15 </16 & StrFromInt/17 Tile{ AsIs: s.Number#1/11 AsIs: >/1 }"UL"/18 >/20 Tile{ ]] }
  if( ! refalrts::alloc_open_bracket( context[12] ) )
    return refalrts::cNoMemory;
  if( ! refalrts::alloc_chars( context[13], context[14], "number", 6 ) )
    return refalrts::cNoMemory;
  if( ! refalrts::alloc_close_bracket( context[15] ) )
    return refalrts::cNoMemory;
  if( ! refalrts::alloc_open_call( context[16] ) )
    return refalrts::cNoMemory;
  if( ! refalrts::alloc_name( context[17], StrFromInt, "StrFromInt" ) )
    return refalrts::cNoMemory;
  if( ! refalrts::alloc_chars( context[18], context[19], "UL", 2 ) )
    return refalrts::cNoMemory;
  if( ! refalrts::alloc_close_call( context[20] ) )
    return refalrts::cNoMemory;
  refalrts::update_name( context[4], PrintMatch, "PrintMatch" );
  refalrts::push_stack( context[20] );
  refalrts::push_stack( context[0] );
  refalrts::push_stack( context[1] );
  refalrts::push_stack( context[16] );
  refalrts::link_brackets( context[12], context[15] );
  refalrts::link_brackets( context[7], context[8] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = arg_end->next;
  res = refalrts::splice_evar( res, context[18], context[20] );
  res = refalrts::splice_evar( res, context[11], context[1] );
  res = refalrts::splice_evar( res, context[12], context[17] );
  refalrts::use( res );
  return refalrts::FnResult(refalrts::cSuccess | (__LINE__ << 8));
#endif
}

static refalrts::FnResult PrintMatchNumberSave(refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  refalrts::this_is_generated_function();
  // issue here memory for vars with 22 elems
  refalrts::Iter context[22];
  refalrts::zeros( context, 22 );
#ifdef INTERPRET
  static const refalrts::RefalFunction functions[] = {
    { PrintMatchSave, "PrintMatchSave" },
    { StrFromInt, "StrFromInt" }
  };
  using refalrts::idents;
  using refalrts::numbers;
  static const refalrts::StringItem strings[] = {
    {"UL", 2},
    {"number", 6}
  };
  static const refalrts::RASLCommand raa[] = {
    // </0 & PrintMatchNumberSave/4 (/7 e.Indent#1/5 )/8 s.Offset#1/9 s.Direction#1/10 s.BracketNumber#1/11 s.Number#1/12 >/1
    {refalrts::icInitB0_Lite, 0, 0, 0},
    {refalrts::icCallSaveLeft, 0, 2, 0},
    {refalrts::icBracketLeftSave, 0, 5, 2},
    // closed e.Indent#1 as range 5
    {refalrts::icsVarLeft, 0, 9, 2},
    {refalrts::icsVarLeft, 0, 10, 2},
    {refalrts::icsVarLeft, 0, 11, 2},
    {refalrts::icsVarLeft, 0, 12, 2},
    {refalrts::icEmpty, 0, 0, 2},
    {refalrts::icEmptyResult, 0, 0, 0},
    //TRASH: {REMOVED TILE}  {REMOVED TILE}  {REMOVED TILE} 
    //RESULT: Tile{ [[ AsIs: </0 Reuse: & PrintMatchSave/4 AsIs: (/7 AsIs: e.Indent#1/5 AsIs: )/8 AsIs: s.Offset#1/9 AsIs: s.Direction#1/10 AsIs: s.BracketNumber#1/11 } (/13"number"/14 )/16 </17 & StrFromInt/18 Tile{ AsIs: s.Number#1/12 AsIs: >/1 }"UL"/19 >/21 Tile{ ]] }
    {refalrts::icAllocBracket, 0, refalrts::ibOpenBracket, 13},
    {refalrts::icAllocString, 0, 1, 14},
    {refalrts::icAllocBracket, 0, refalrts::ibCloseBracket, 16},
    {refalrts::icAllocBracket, 0, refalrts::ibOpenCall, 17},
    {refalrts::icAllocFunc, 0, 1, 18},
    {refalrts::icAllocString, 0, 0, 19},
    {refalrts::icAllocBracket, 0, refalrts::ibCloseCall, 21},
    {refalrts::icUpdateFunc, 0, 0, 4},
    {refalrts::icPushStack, 0, 0, 21},
    {refalrts::icPushStack, 0, 0, 0},
    {refalrts::icPushStack, 0, 0, 1},
    {refalrts::icPushStack, 0, 0, 17},
    {refalrts::icLinkBrackets, 13, 16, 0},
    {refalrts::icLinkBrackets, 7, 8, 0},
    {refalrts::icSetResRightEdge, 0, 0, 0},
    {refalrts::icSpliceTile, 19, 21, 0},
    {refalrts::icSpliceTile, 12, 1, 0},
    {refalrts::icSpliceTile, 13, 18, 0},
    {refalrts::icReturnResult_NoTrash, 0, 0, 0},
    {refalrts::icEnd, 0, 0, 0}
  };
  int open_e_stack[1];
  refalrts::FnResult res = refalrts::interpret_array(
    raa, context, arg_begin, arg_end,
    functions, idents, numbers, strings, open_e_stack
  );
  return res;
#else
  // </0 & PrintMatchNumberSave/4 (/7 e.Indent#1/5 )/8 s.Offset#1/9 s.Direction#1/10 s.BracketNumber#1/11 s.Number#1/12 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  context[5] = 0;
  context[6] = 0;
  context[7] = refalrts::brackets_left( context[5], context[6], context[2], context[3] );
  if( ! context[7] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[7], context[8]);
  // closed e.Indent#1 as range 5
  if( ! refalrts::svar_left( context[9], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  if( ! refalrts::svar_left( context[10], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  if( ! refalrts::svar_left( context[11], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  if( ! refalrts::svar_left( context[12], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  if( ! refalrts::empty_seq( context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;

  refalrts::reset_allocator();
  //TRASH: {REMOVED TILE}  {REMOVED TILE}  {REMOVED TILE} 
  //RESULT: Tile{ [[ AsIs: </0 Reuse: & PrintMatchSave/4 AsIs: (/7 AsIs: e.Indent#1/5 AsIs: )/8 AsIs: s.Offset#1/9 AsIs: s.Direction#1/10 AsIs: s.BracketNumber#1/11 } (/13"number"/14 )/16 </17 & StrFromInt/18 Tile{ AsIs: s.Number#1/12 AsIs: >/1 }"UL"/19 >/21 Tile{ ]] }
  if( ! refalrts::alloc_open_bracket( context[13] ) )
    return refalrts::cNoMemory;
  if( ! refalrts::alloc_chars( context[14], context[15], "number", 6 ) )
    return refalrts::cNoMemory;
  if( ! refalrts::alloc_close_bracket( context[16] ) )
    return refalrts::cNoMemory;
  if( ! refalrts::alloc_open_call( context[17] ) )
    return refalrts::cNoMemory;
  if( ! refalrts::alloc_name( context[18], StrFromInt, "StrFromInt" ) )
    return refalrts::cNoMemory;
  if( ! refalrts::alloc_chars( context[19], context[20], "UL", 2 ) )
    return refalrts::cNoMemory;
  if( ! refalrts::alloc_close_call( context[21] ) )
    return refalrts::cNoMemory;
  refalrts::update_name( context[4], PrintMatchSave, "PrintMatchSave" );
  refalrts::push_stack( context[21] );
  refalrts::push_stack( context[0] );
  refalrts::push_stack( context[1] );
  refalrts::push_stack( context[17] );
  refalrts::link_brackets( context[13], context[16] );
  refalrts::link_brackets( context[7], context[8] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = arg_end->next;
  res = refalrts::splice_evar( res, context[19], context[21] );
  res = refalrts::splice_evar( res, context[12], context[1] );
  res = refalrts::splice_evar( res, context[13], context[18] );
  refalrts::use( res );
  return refalrts::FnResult(refalrts::cSuccess | (__LINE__ << 8));
#endif
}

static refalrts::FnResult PrintMatchName(refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  refalrts::this_is_generated_function();
  // issue here memory for vars with 15 elems
  refalrts::Iter context[15];
  refalrts::zeros( context, 15 );
#ifdef INTERPRET
  static const refalrts::RefalFunction functions[] = {
    { PrintMatch, "PrintMatch" }
  };
  using refalrts::idents;
  using refalrts::numbers;
  static const refalrts::StringItem strings[] = {
    {"function", 8}
  };
  static const refalrts::RASLCommand raa[] = {
    // </0 & PrintMatchName/4 (/7 e.Indent#1/5 )/8 s.Direction#1/9 s.BracketNumber#1/10 e.Name#1/2 >/1
    {refalrts::icInitB0_Lite, 0, 0, 0},
    {refalrts::icCallSaveLeft, 0, 2, 0},
    {refalrts::icBracketLeftSave, 0, 5, 2},
    // closed e.Indent#1 as range 5
    {refalrts::icsVarLeft, 0, 9, 2},
    {refalrts::icsVarLeft, 0, 10, 2},
    // closed e.Name#1 as range 2
    {refalrts::icEmptyResult, 0, 0, 0},
    //TRASH: {REMOVED TILE}  {REMOVED TILE}  {REMOVED TILE} 
    //RESULT: Tile{ [[ AsIs: </0 Reuse: & PrintMatch/4 AsIs: (/7 AsIs: e.Indent#1/5 AsIs: )/8 AsIs: s.Direction#1/9 AsIs: s.BracketNumber#1/10 } (/11"function"/12 )/14 Tile{ AsIs: e.Name#1/2 } Tile{ AsIs: >/1 ]] }
    {refalrts::icAllocBracket, 0, refalrts::ibOpenBracket, 11},
    {refalrts::icAllocString, 0, 0, 12},
    {refalrts::icAllocBracket, 0, refalrts::ibCloseBracket, 14},
    {refalrts::icUpdateFunc, 0, 0, 4},
    {refalrts::icPushStack, 0, 0, 1},
    {refalrts::icPushStack, 0, 0, 0},
    {refalrts::icLinkBrackets, 11, 14, 0},
    {refalrts::icLinkBrackets, 7, 8, 0},
    {refalrts::icSetRes, 0, 0, 1},
    {refalrts::icSpliceEVar, 0, 0, 2},
    {refalrts::icSpliceTile, 11, 14, 0},
    {refalrts::icReturnResult_NoTrash, 0, 0, 0},
    {refalrts::icEnd, 0, 0, 0}
  };
  int open_e_stack[1];
  refalrts::FnResult res = refalrts::interpret_array(
    raa, context, arg_begin, arg_end,
    functions, idents, numbers, strings, open_e_stack
  );
  return res;
#else
  // </0 & PrintMatchName/4 (/7 e.Indent#1/5 )/8 s.Direction#1/9 s.BracketNumber#1/10 e.Name#1/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  context[5] = 0;
  context[6] = 0;
  context[7] = refalrts::brackets_left( context[5], context[6], context[2], context[3] );
  if( ! context[7] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[7], context[8]);
  // closed e.Indent#1 as range 5
  if( ! refalrts::svar_left( context[9], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  if( ! refalrts::svar_left( context[10], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  // closed e.Name#1 as range 2

  refalrts::reset_allocator();
  //TRASH: {REMOVED TILE}  {REMOVED TILE}  {REMOVED TILE} 
  //RESULT: Tile{ [[ AsIs: </0 Reuse: & PrintMatch/4 AsIs: (/7 AsIs: e.Indent#1/5 AsIs: )/8 AsIs: s.Direction#1/9 AsIs: s.BracketNumber#1/10 } (/11"function"/12 )/14 Tile{ AsIs: e.Name#1/2 } Tile{ AsIs: >/1 ]] }
  if( ! refalrts::alloc_open_bracket( context[11] ) )
    return refalrts::cNoMemory;
  if( ! refalrts::alloc_chars( context[12], context[13], "function", 8 ) )
    return refalrts::cNoMemory;
  if( ! refalrts::alloc_close_bracket( context[14] ) )
    return refalrts::cNoMemory;
  refalrts::update_name( context[4], PrintMatch, "PrintMatch" );
  refalrts::push_stack( context[1] );
  refalrts::push_stack( context[0] );
  refalrts::link_brackets( context[11], context[14] );
  refalrts::link_brackets( context[7], context[8] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[1];
  res = refalrts::splice_evar( res, context[2], context[3] );
  res = refalrts::splice_evar( res, context[11], context[14] );
  refalrts::use( res );
  return refalrts::FnResult(refalrts::cSuccess | (__LINE__ << 8));
#endif
}

static refalrts::FnResult PrintMatchNameSave(refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  refalrts::this_is_generated_function();
  // issue here memory for vars with 16 elems
  refalrts::Iter context[16];
  refalrts::zeros( context, 16 );
#ifdef INTERPRET
  static const refalrts::RefalFunction functions[] = {
    { PrintMatchSave, "PrintMatchSave" }
  };
  using refalrts::idents;
  using refalrts::numbers;
  static const refalrts::StringItem strings[] = {
    {"function", 8}
  };
  static const refalrts::RASLCommand raa[] = {
    // </0 & PrintMatchNameSave/4 (/7 e.Indent#1/5 )/8 s.Offset#1/9 s.Direction#1/10 s.BracketNumber#1/11 e.Name#1/2 >/1
    {refalrts::icInitB0_Lite, 0, 0, 0},
    {refalrts::icCallSaveLeft, 0, 2, 0},
    {refalrts::icBracketLeftSave, 0, 5, 2},
    // closed e.Indent#1 as range 5
    {refalrts::icsVarLeft, 0, 9, 2},
    {refalrts::icsVarLeft, 0, 10, 2},
    {refalrts::icsVarLeft, 0, 11, 2},
    // closed e.Name#1 as range 2
    {refalrts::icEmptyResult, 0, 0, 0},
    //TRASH: {REMOVED TILE}  {REMOVED TILE}  {REMOVED TILE} 
    //RESULT: Tile{ [[ AsIs: </0 Reuse: & PrintMatchSave/4 AsIs: (/7 AsIs: e.Indent#1/5 AsIs: )/8 AsIs: s.Offset#1/9 AsIs: s.Direction#1/10 AsIs: s.BracketNumber#1/11 } (/12"function"/13 )/15 Tile{ AsIs: e.Name#1/2 } Tile{ AsIs: >/1 ]] }
    {refalrts::icAllocBracket, 0, refalrts::ibOpenBracket, 12},
    {refalrts::icAllocString, 0, 0, 13},
    {refalrts::icAllocBracket, 0, refalrts::ibCloseBracket, 15},
    {refalrts::icUpdateFunc, 0, 0, 4},
    {refalrts::icPushStack, 0, 0, 1},
    {refalrts::icPushStack, 0, 0, 0},
    {refalrts::icLinkBrackets, 12, 15, 0},
    {refalrts::icLinkBrackets, 7, 8, 0},
    {refalrts::icSetRes, 0, 0, 1},
    {refalrts::icSpliceEVar, 0, 0, 2},
    {refalrts::icSpliceTile, 12, 15, 0},
    {refalrts::icReturnResult_NoTrash, 0, 0, 0},
    {refalrts::icEnd, 0, 0, 0}
  };
  int open_e_stack[1];
  refalrts::FnResult res = refalrts::interpret_array(
    raa, context, arg_begin, arg_end,
    functions, idents, numbers, strings, open_e_stack
  );
  return res;
#else
  // </0 & PrintMatchNameSave/4 (/7 e.Indent#1/5 )/8 s.Offset#1/9 s.Direction#1/10 s.BracketNumber#1/11 e.Name#1/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  context[5] = 0;
  context[6] = 0;
  context[7] = refalrts::brackets_left( context[5], context[6], context[2], context[3] );
  if( ! context[7] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[7], context[8]);
  // closed e.Indent#1 as range 5
  if( ! refalrts::svar_left( context[9], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  if( ! refalrts::svar_left( context[10], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  if( ! refalrts::svar_left( context[11], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  // closed e.Name#1 as range 2

  refalrts::reset_allocator();
  //TRASH: {REMOVED TILE}  {REMOVED TILE}  {REMOVED TILE} 
  //RESULT: Tile{ [[ AsIs: </0 Reuse: & PrintMatchSave/4 AsIs: (/7 AsIs: e.Indent#1/5 AsIs: )/8 AsIs: s.Offset#1/9 AsIs: s.Direction#1/10 AsIs: s.BracketNumber#1/11 } (/12"function"/13 )/15 Tile{ AsIs: e.Name#1/2 } Tile{ AsIs: >/1 ]] }
  if( ! refalrts::alloc_open_bracket( context[12] ) )
    return refalrts::cNoMemory;
  if( ! refalrts::alloc_chars( context[13], context[14], "function", 8 ) )
    return refalrts::cNoMemory;
  if( ! refalrts::alloc_close_bracket( context[15] ) )
    return refalrts::cNoMemory;
  refalrts::update_name( context[4], PrintMatchSave, "PrintMatchSave" );
  refalrts::push_stack( context[1] );
  refalrts::push_stack( context[0] );
  refalrts::link_brackets( context[12], context[15] );
  refalrts::link_brackets( context[7], context[8] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[1];
  res = refalrts::splice_evar( res, context[2], context[3] );
  res = refalrts::splice_evar( res, context[12], context[15] );
  refalrts::use( res );
  return refalrts::FnResult(refalrts::cSuccess | (__LINE__ << 8));
#endif
}

static refalrts::FnResult PrintMatchIdent(refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  refalrts::this_is_generated_function();
  // issue here memory for vars with 19 elems
  refalrts::Iter context[19];
  refalrts::zeros( context, 19 );
#ifdef INTERPRET
  static const refalrts::RefalFunction functions[] = {
    { PrintMatch, "PrintMatch" }
  };
  using refalrts::idents;
  using refalrts::numbers;
  static const refalrts::StringItem strings[] = {
    {"<int>::name", 11},
    {" & ident_", 9},
    {"ident", 5}
  };
  static const refalrts::RASLCommand raa[] = {
    // </0 & PrintMatchIdent/4 (/7 e.Indent#1/5 )/8 s.Direction#1/9 s.BracketNumber#1/10 e.Name#1/2 >/1
    {refalrts::icInitB0_Lite, 0, 0, 0},
    {refalrts::icCallSaveLeft, 0, 2, 0},
    {refalrts::icBracketLeftSave, 0, 5, 2},
    // closed e.Indent#1 as range 5
    {refalrts::icsVarLeft, 0, 9, 2},
    {refalrts::icsVarLeft, 0, 10, 2},
    // closed e.Name#1 as range 2
    {refalrts::icEmptyResult, 0, 0, 0},
    //TRASH: {REMOVED TILE}  {REMOVED TILE}  {REMOVED TILE} 
    //RESULT: Tile{ [[ AsIs: </0 Reuse: & PrintMatch/4 AsIs: (/7 AsIs: e.Indent#1/5 AsIs: )/8 AsIs: s.Direction#1/9 AsIs: s.BracketNumber#1/10 } (/11"ident"/12 )/14" & ident_"/15 Tile{ AsIs: e.Name#1/2 }"<int>::name"/17 Tile{ AsIs: >/1 ]] }
    {refalrts::icAllocBracket, 0, refalrts::ibOpenBracket, 11},
    {refalrts::icAllocString, 0, 2, 12},
    {refalrts::icAllocBracket, 0, refalrts::ibCloseBracket, 14},
    {refalrts::icAllocString, 0, 1, 15},
    {refalrts::icAllocString, 0, 0, 17},
    {refalrts::icUpdateFunc, 0, 0, 4},
    {refalrts::icPushStack, 0, 0, 1},
    {refalrts::icPushStack, 0, 0, 0},
    {refalrts::icLinkBrackets, 11, 14, 0},
    {refalrts::icLinkBrackets, 7, 8, 0},
    {refalrts::icSetRes, 0, 0, 1},
    {refalrts::icSpliceTile, 17, 18, 0},
    {refalrts::icSpliceEVar, 0, 0, 2},
    {refalrts::icSpliceTile, 11, 16, 0},
    {refalrts::icReturnResult_NoTrash, 0, 0, 0},
    {refalrts::icEnd, 0, 0, 0}
  };
  int open_e_stack[1];
  refalrts::FnResult res = refalrts::interpret_array(
    raa, context, arg_begin, arg_end,
    functions, idents, numbers, strings, open_e_stack
  );
  return res;
#else
  // </0 & PrintMatchIdent/4 (/7 e.Indent#1/5 )/8 s.Direction#1/9 s.BracketNumber#1/10 e.Name#1/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  context[5] = 0;
  context[6] = 0;
  context[7] = refalrts::brackets_left( context[5], context[6], context[2], context[3] );
  if( ! context[7] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[7], context[8]);
  // closed e.Indent#1 as range 5
  if( ! refalrts::svar_left( context[9], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  if( ! refalrts::svar_left( context[10], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  // closed e.Name#1 as range 2

  refalrts::reset_allocator();
  //TRASH: {REMOVED TILE}  {REMOVED TILE}  {REMOVED TILE} 
  //RESULT: Tile{ [[ AsIs: </0 Reuse: & PrintMatch/4 AsIs: (/7 AsIs: e.Indent#1/5 AsIs: )/8 AsIs: s.Direction#1/9 AsIs: s.BracketNumber#1/10 } (/11"ident"/12 )/14" & ident_"/15 Tile{ AsIs: e.Name#1/2 }"<int>::name"/17 Tile{ AsIs: >/1 ]] }
  if( ! refalrts::alloc_open_bracket( context[11] ) )
    return refalrts::cNoMemory;
  if( ! refalrts::alloc_chars( context[12], context[13], "ident", 5 ) )
    return refalrts::cNoMemory;
  if( ! refalrts::alloc_close_bracket( context[14] ) )
    return refalrts::cNoMemory;
  if( ! refalrts::alloc_chars( context[15], context[16], " & ident_", 9 ) )
    return refalrts::cNoMemory;
  if( ! refalrts::alloc_chars( context[17], context[18], "<int>::name", 11 ) )
    return refalrts::cNoMemory;
  refalrts::update_name( context[4], PrintMatch, "PrintMatch" );
  refalrts::push_stack( context[1] );
  refalrts::push_stack( context[0] );
  refalrts::link_brackets( context[11], context[14] );
  refalrts::link_brackets( context[7], context[8] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[1];
  res = refalrts::splice_evar( res, context[17], context[18] );
  res = refalrts::splice_evar( res, context[2], context[3] );
  res = refalrts::splice_evar( res, context[11], context[16] );
  refalrts::use( res );
  return refalrts::FnResult(refalrts::cSuccess | (__LINE__ << 8));
#endif
}

static refalrts::FnResult PrintMatchIdentSave(refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  refalrts::this_is_generated_function();
  // issue here memory for vars with 20 elems
  refalrts::Iter context[20];
  refalrts::zeros( context, 20 );
#ifdef INTERPRET
  static const refalrts::RefalFunction functions[] = {
    { PrintMatchSave, "PrintMatchSave" }
  };
  using refalrts::idents;
  using refalrts::numbers;
  static const refalrts::StringItem strings[] = {
    {"<int>::name", 11},
    {" & ident_", 9},
    {"ident", 5}
  };
  static const refalrts::RASLCommand raa[] = {
    // </0 & PrintMatchIdentSave/4 (/7 e.Indent#1/5 )/8 s.Offset#1/9 s.Direction#1/10 s.BracketNumber#1/11 e.Name#1/2 >/1
    {refalrts::icInitB0_Lite, 0, 0, 0},
    {refalrts::icCallSaveLeft, 0, 2, 0},
    {refalrts::icBracketLeftSave, 0, 5, 2},
    // closed e.Indent#1 as range 5
    {refalrts::icsVarLeft, 0, 9, 2},
    {refalrts::icsVarLeft, 0, 10, 2},
    {refalrts::icsVarLeft, 0, 11, 2},
    // closed e.Name#1 as range 2
    {refalrts::icEmptyResult, 0, 0, 0},
    //TRASH: {REMOVED TILE}  {REMOVED TILE}  {REMOVED TILE} 
    //RESULT: Tile{ [[ AsIs: </0 Reuse: & PrintMatchSave/4 AsIs: (/7 AsIs: e.Indent#1/5 AsIs: )/8 AsIs: s.Offset#1/9 AsIs: s.Direction#1/10 AsIs: s.BracketNumber#1/11 } (/12"ident"/13 )/15" & ident_"/16 Tile{ AsIs: e.Name#1/2 }"<int>::name"/18 Tile{ AsIs: >/1 ]] }
    {refalrts::icAllocBracket, 0, refalrts::ibOpenBracket, 12},
    {refalrts::icAllocString, 0, 2, 13},
    {refalrts::icAllocBracket, 0, refalrts::ibCloseBracket, 15},
    {refalrts::icAllocString, 0, 1, 16},
    {refalrts::icAllocString, 0, 0, 18},
    {refalrts::icUpdateFunc, 0, 0, 4},
    {refalrts::icPushStack, 0, 0, 1},
    {refalrts::icPushStack, 0, 0, 0},
    {refalrts::icLinkBrackets, 12, 15, 0},
    {refalrts::icLinkBrackets, 7, 8, 0},
    {refalrts::icSetRes, 0, 0, 1},
    {refalrts::icSpliceTile, 18, 19, 0},
    {refalrts::icSpliceEVar, 0, 0, 2},
    {refalrts::icSpliceTile, 12, 17, 0},
    {refalrts::icReturnResult_NoTrash, 0, 0, 0},
    {refalrts::icEnd, 0, 0, 0}
  };
  int open_e_stack[1];
  refalrts::FnResult res = refalrts::interpret_array(
    raa, context, arg_begin, arg_end,
    functions, idents, numbers, strings, open_e_stack
  );
  return res;
#else
  // </0 & PrintMatchIdentSave/4 (/7 e.Indent#1/5 )/8 s.Offset#1/9 s.Direction#1/10 s.BracketNumber#1/11 e.Name#1/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  context[5] = 0;
  context[6] = 0;
  context[7] = refalrts::brackets_left( context[5], context[6], context[2], context[3] );
  if( ! context[7] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[7], context[8]);
  // closed e.Indent#1 as range 5
  if( ! refalrts::svar_left( context[9], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  if( ! refalrts::svar_left( context[10], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  if( ! refalrts::svar_left( context[11], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  // closed e.Name#1 as range 2

  refalrts::reset_allocator();
  //TRASH: {REMOVED TILE}  {REMOVED TILE}  {REMOVED TILE} 
  //RESULT: Tile{ [[ AsIs: </0 Reuse: & PrintMatchSave/4 AsIs: (/7 AsIs: e.Indent#1/5 AsIs: )/8 AsIs: s.Offset#1/9 AsIs: s.Direction#1/10 AsIs: s.BracketNumber#1/11 } (/12"ident"/13 )/15" & ident_"/16 Tile{ AsIs: e.Name#1/2 }"<int>::name"/18 Tile{ AsIs: >/1 ]] }
  if( ! refalrts::alloc_open_bracket( context[12] ) )
    return refalrts::cNoMemory;
  if( ! refalrts::alloc_chars( context[13], context[14], "ident", 5 ) )
    return refalrts::cNoMemory;
  if( ! refalrts::alloc_close_bracket( context[15] ) )
    return refalrts::cNoMemory;
  if( ! refalrts::alloc_chars( context[16], context[17], " & ident_", 9 ) )
    return refalrts::cNoMemory;
  if( ! refalrts::alloc_chars( context[18], context[19], "<int>::name", 11 ) )
    return refalrts::cNoMemory;
  refalrts::update_name( context[4], PrintMatchSave, "PrintMatchSave" );
  refalrts::push_stack( context[1] );
  refalrts::push_stack( context[0] );
  refalrts::link_brackets( context[12], context[15] );
  refalrts::link_brackets( context[7], context[8] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[1];
  res = refalrts::splice_evar( res, context[18], context[19] );
  res = refalrts::splice_evar( res, context[2], context[3] );
  res = refalrts::splice_evar( res, context[12], context[17] );
  refalrts::use( res );
  return refalrts::FnResult(refalrts::cSuccess | (__LINE__ << 8));
#endif
}

static refalrts::FnResult PrintMatchBrackets(refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  refalrts::this_is_generated_function();
  // issue here memory for vars with 19 elems
  refalrts::Iter context[19];
  refalrts::zeros( context, 19 );
#ifdef INTERPRET
  static const refalrts::RefalFunction functions[] = {
    { PrintMatch, "PrintMatch" },
    { ContextRange, "ContextRange" }
  };
  using refalrts::idents;
  using refalrts::numbers;
  static const refalrts::StringItem strings[] = {
    {"brackets", 8}
  };
  static const refalrts::RASLCommand raa[] = {
    // </0 & PrintMatchBrackets/4 (/7 e.Indent#1/5 )/8 s.Direction#1/9 s.BracketNumber#1/10 s.InnerNum#1/11 >/1
    {refalrts::icInitB0_Lite, 0, 0, 0},
    {refalrts::icCallSaveLeft, 0, 2, 0},
    {refalrts::icBracketLeftSave, 0, 5, 2},
    // closed e.Indent#1 as range 5
    {refalrts::icsVarLeft, 0, 9, 2},
    {refalrts::icsVarLeft, 0, 10, 2},
    {refalrts::icsVarLeft, 0, 11, 2},
    {refalrts::icEmpty, 0, 0, 2},
    {refalrts::icEmptyResult, 0, 0, 0},
    //TRASH: {REMOVED TILE}  {REMOVED TILE}  {REMOVED TILE} 
    //RESULT: Tile{ [[ AsIs: </0 Reuse: & PrintMatch/4 AsIs: (/7 AsIs: e.Indent#1/5 AsIs: )/8 AsIs: s.Direction#1/9 AsIs: s.BracketNumber#1/10 } (/12"brackets"/13 )/15 </16 & ContextRange/17 Tile{ AsIs: s.InnerNum#1/11 AsIs: >/1 } >/18 Tile{ ]] }
    {refalrts::icAllocBracket, 0, refalrts::ibOpenBracket, 12},
    {refalrts::icAllocString, 0, 0, 13},
    {refalrts::icAllocBracket, 0, refalrts::ibCloseBracket, 15},
    {refalrts::icAllocBracket, 0, refalrts::ibOpenCall, 16},
    {refalrts::icAllocFunc, 0, 1, 17},
    {refalrts::icAllocBracket, 0, refalrts::ibCloseCall, 18},
    {refalrts::icUpdateFunc, 0, 0, 4},
    {refalrts::icPushStack, 0, 0, 18},
    {refalrts::icPushStack, 0, 0, 0},
    {refalrts::icPushStack, 0, 0, 1},
    {refalrts::icPushStack, 0, 0, 16},
    {refalrts::icLinkBrackets, 12, 15, 0},
    {refalrts::icLinkBrackets, 7, 8, 0},
    {refalrts::icSetResRightEdge, 0, 0, 0},
    {refalrts::icSpliceTile, 18, 18, 0},
    {refalrts::icSpliceTile, 11, 1, 0},
    {refalrts::icSpliceTile, 12, 17, 0},
    {refalrts::icReturnResult_NoTrash, 0, 0, 0},
    {refalrts::icEnd, 0, 0, 0}
  };
  int open_e_stack[1];
  refalrts::FnResult res = refalrts::interpret_array(
    raa, context, arg_begin, arg_end,
    functions, idents, numbers, strings, open_e_stack
  );
  return res;
#else
  // </0 & PrintMatchBrackets/4 (/7 e.Indent#1/5 )/8 s.Direction#1/9 s.BracketNumber#1/10 s.InnerNum#1/11 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  context[5] = 0;
  context[6] = 0;
  context[7] = refalrts::brackets_left( context[5], context[6], context[2], context[3] );
  if( ! context[7] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[7], context[8]);
  // closed e.Indent#1 as range 5
  if( ! refalrts::svar_left( context[9], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  if( ! refalrts::svar_left( context[10], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  if( ! refalrts::svar_left( context[11], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  if( ! refalrts::empty_seq( context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;

  refalrts::reset_allocator();
  //TRASH: {REMOVED TILE}  {REMOVED TILE}  {REMOVED TILE} 
  //RESULT: Tile{ [[ AsIs: </0 Reuse: & PrintMatch/4 AsIs: (/7 AsIs: e.Indent#1/5 AsIs: )/8 AsIs: s.Direction#1/9 AsIs: s.BracketNumber#1/10 } (/12"brackets"/13 )/15 </16 & ContextRange/17 Tile{ AsIs: s.InnerNum#1/11 AsIs: >/1 } >/18 Tile{ ]] }
  if( ! refalrts::alloc_open_bracket( context[12] ) )
    return refalrts::cNoMemory;
  if( ! refalrts::alloc_chars( context[13], context[14], "brackets", 8 ) )
    return refalrts::cNoMemory;
  if( ! refalrts::alloc_close_bracket( context[15] ) )
    return refalrts::cNoMemory;
  if( ! refalrts::alloc_open_call( context[16] ) )
    return refalrts::cNoMemory;
  if( ! refalrts::alloc_name( context[17], ContextRange, "ContextRange" ) )
    return refalrts::cNoMemory;
  if( ! refalrts::alloc_close_call( context[18] ) )
    return refalrts::cNoMemory;
  refalrts::update_name( context[4], PrintMatch, "PrintMatch" );
  refalrts::push_stack( context[18] );
  refalrts::push_stack( context[0] );
  refalrts::push_stack( context[1] );
  refalrts::push_stack( context[16] );
  refalrts::link_brackets( context[12], context[15] );
  refalrts::link_brackets( context[7], context[8] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = arg_end->next;
  res = refalrts::splice_evar( res, context[18], context[18] );
  res = refalrts::splice_evar( res, context[11], context[1] );
  res = refalrts::splice_evar( res, context[12], context[17] );
  refalrts::use( res );
  return refalrts::FnResult(refalrts::cSuccess | (__LINE__ << 8));
#endif
}

static refalrts::FnResult PrintMatchBracketsSave(refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  refalrts::this_is_generated_function();
  // issue here memory for vars with 50 elems
  refalrts::Iter context[50];
  refalrts::zeros( context, 50 );
#ifdef INTERPRET
  static const refalrts::RefalFunction functions[] = {
    { PrintMatchSave, "PrintMatchSave" },
    { Add, "Add" },
    { ContextItem, "ContextItem" },
    { ContextRange, "ContextRange" }
  };
  using refalrts::idents;
  using refalrts::numbers;
  static const refalrts::StringItem strings[] = {
    {");", 2},
    {", ", 2},
    {"refalrts::bracket_pointers(", 27},
    {"brackets", 8}
  };
  static const refalrts::RASLCommand raa[] = {
    // </0 & PrintMatchBracketsSave/4 (/7 e.Indent#1/5 )/8 s.Direction#1/9 s.BracketNumber#1/10 s.InnerNum#1/11 >/1
    {refalrts::icInitB0_Lite, 0, 0, 0},
    {refalrts::icCallSaveLeft, 0, 2, 0},
    {refalrts::icBracketLeftSave, 0, 5, 2},
    // closed e.Indent#1 as range 5
    {refalrts::icsVarLeft, 0, 9, 2},
    {refalrts::icsVarLeft, 0, 10, 2},
    {refalrts::icsVarLeft, 0, 11, 2},
    {refalrts::icEmpty, 0, 0, 2},
    {refalrts::icEmptyResult, 0, 0, 0},
    //TRASH: {REMOVED TILE}  {REMOVED TILE}  {REMOVED TILE}  {REMOVED TILE} 
    //RESULT: Tile{ [[ AsIs: </0 Reuse: & PrintMatchSave/4 AsIs: (/7 AsIs: e.Indent#1/5 AsIs: )/8 } </12 & Add/13 2/14 Tile{ AsIs: s.InnerNum#1/11 AsIs: >/1 } Tile{ AsIs: s.Direction#1/9 AsIs: s.BracketNumber#1/10 } (/15"brackets"/16 )/18 </19 & ContextRange/20 s.InnerNum#1/11/21 >/22 >/23 (/24 e.Indent#1/5/25"refalrts::bracket_pointers("/27 </29 & ContextItem/30 </31 & Add/32 s.InnerNum#1/11/33 2/34 >/35 >/36", "/37 </39 & ContextItem/40 </41 & Add/42 s.InnerNum#1/11/43 3/44 >/45 >/46");"/47 )/49 Tile{ ]] }
    {refalrts::icAllocBracket, 0, refalrts::ibOpenCall, 12},
    {refalrts::icAllocFunc, 0, 1, 13},
    {refalrts::icAllocInt, 0, 2, 14},
    {refalrts::icAllocBracket, 0, refalrts::ibOpenBracket, 15},
    {refalrts::icAllocString, 0, 3, 16},
    {refalrts::icAllocBracket, 0, refalrts::ibCloseBracket, 18},
    {refalrts::icAllocBracket, 0, refalrts::ibOpenCall, 19},
    {refalrts::icAllocFunc, 0, 3, 20},
    {refalrts::icCopySTVar, 21, 11, 0},
    {refalrts::icAllocBracket, 0, refalrts::ibCloseCall, 22},
    {refalrts::icAllocBracket, 0, refalrts::ibCloseCall, 23},
    {refalrts::icAllocBracket, 0, refalrts::ibOpenBracket, 24},
    {refalrts::icCopyEVar, 25, 5, 0},
    {refalrts::icAllocString, 0, 2, 27},
    {refalrts::icAllocBracket, 0, refalrts::ibOpenCall, 29},
    {refalrts::icAllocFunc, 0, 2, 30},
    {refalrts::icAllocBracket, 0, refalrts::ibOpenCall, 31},
    {refalrts::icAllocFunc, 0, 1, 32},
    {refalrts::icCopySTVar, 33, 11, 0},
    {refalrts::icAllocInt, 0, 2, 34},
    {refalrts::icAllocBracket, 0, refalrts::ibCloseCall, 35},
    {refalrts::icAllocBracket, 0, refalrts::ibCloseCall, 36},
    {refalrts::icAllocString, 0, 1, 37},
    {refalrts::icAllocBracket, 0, refalrts::ibOpenCall, 39},
    {refalrts::icAllocFunc, 0, 2, 40},
    {refalrts::icAllocBracket, 0, refalrts::ibOpenCall, 41},
    {refalrts::icAllocFunc, 0, 1, 42},
    {refalrts::icCopySTVar, 43, 11, 0},
    {refalrts::icAllocInt, 0, 3, 44},
    {refalrts::icAllocBracket, 0, refalrts::ibCloseCall, 45},
    {refalrts::icAllocBracket, 0, refalrts::ibCloseCall, 46},
    {refalrts::icAllocString, 0, 0, 47},
    {refalrts::icAllocBracket, 0, refalrts::ibCloseBracket, 49},
    {refalrts::icUpdateFunc, 0, 0, 4},
    {refalrts::icLinkBrackets, 24, 49, 0},
    {refalrts::icPushStack, 0, 0, 46},
    {refalrts::icPushStack, 0, 0, 39},
    {refalrts::icPushStack, 0, 0, 45},
    {refalrts::icPushStack, 0, 0, 41},
    {refalrts::icPushStack, 0, 0, 36},
    {refalrts::icPushStack, 0, 0, 29},
    {refalrts::icPushStack, 0, 0, 35},
    {refalrts::icPushStack, 0, 0, 31},
    {refalrts::icPushStack, 0, 0, 23},
    {refalrts::icPushStack, 0, 0, 0},
    {refalrts::icPushStack, 0, 0, 22},
    {refalrts::icPushStack, 0, 0, 19},
    {refalrts::icLinkBrackets, 15, 18, 0},
    {refalrts::icPushStack, 0, 0, 1},
    {refalrts::icPushStack, 0, 0, 12},
    {refalrts::icLinkBrackets, 7, 8, 0},
    {refalrts::icSetResRightEdge, 0, 0, 0},
    {refalrts::icSpliceTile, 15, 49, 0},
    {refalrts::icSpliceTile, 9, 10, 0},
    {refalrts::icSpliceTile, 11, 1, 0},
    {refalrts::icSpliceTile, 12, 14, 0},
    {refalrts::icReturnResult_NoTrash, 0, 0, 0},
    {refalrts::icEnd, 0, 0, 0}
  };
  int open_e_stack[1];
  refalrts::FnResult res = refalrts::interpret_array(
    raa, context, arg_begin, arg_end,
    functions, idents, numbers, strings, open_e_stack
  );
  return res;
#else
  // </0 & PrintMatchBracketsSave/4 (/7 e.Indent#1/5 )/8 s.Direction#1/9 s.BracketNumber#1/10 s.InnerNum#1/11 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  context[5] = 0;
  context[6] = 0;
  context[7] = refalrts::brackets_left( context[5], context[6], context[2], context[3] );
  if( ! context[7] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[7], context[8]);
  // closed e.Indent#1 as range 5
  if( ! refalrts::svar_left( context[9], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  if( ! refalrts::svar_left( context[10], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  if( ! refalrts::svar_left( context[11], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  if( ! refalrts::empty_seq( context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;

  refalrts::reset_allocator();
  //TRASH: {REMOVED TILE}  {REMOVED TILE}  {REMOVED TILE}  {REMOVED TILE} 
  //RESULT: Tile{ [[ AsIs: </0 Reuse: & PrintMatchSave/4 AsIs: (/7 AsIs: e.Indent#1/5 AsIs: )/8 } </12 & Add/13 2/14 Tile{ AsIs: s.InnerNum#1/11 AsIs: >/1 } Tile{ AsIs: s.Direction#1/9 AsIs: s.BracketNumber#1/10 } (/15"brackets"/16 )/18 </19 & ContextRange/20 s.InnerNum#1/11/21 >/22 >/23 (/24 e.Indent#1/5/25"refalrts::bracket_pointers("/27 </29 & ContextItem/30 </31 & Add/32 s.InnerNum#1/11/33 2/34 >/35 >/36", "/37 </39 & ContextItem/40 </41 & Add/42 s.InnerNum#1/11/43 3/44 >/45 >/46");"/47 )/49 Tile{ ]] }
  if( ! refalrts::alloc_open_call( context[12] ) )
    return refalrts::cNoMemory;
  if( ! refalrts::alloc_name( context[13], Add, "Add" ) )
    return refalrts::cNoMemory;
  if( ! refalrts::alloc_number( context[14], 2UL ) )
    return refalrts::cNoMemory;
  if( ! refalrts::alloc_open_bracket( context[15] ) )
    return refalrts::cNoMemory;
  if( ! refalrts::alloc_chars( context[16], context[17], "brackets", 8 ) )
    return refalrts::cNoMemory;
  if( ! refalrts::alloc_close_bracket( context[18] ) )
    return refalrts::cNoMemory;
  if( ! refalrts::alloc_open_call( context[19] ) )
    return refalrts::cNoMemory;
  if( ! refalrts::alloc_name( context[20], ContextRange, "ContextRange" ) )
    return refalrts::cNoMemory;
  if (! refalrts::copy_stvar(context[21], context[11]))
    return refalrts::cNoMemory;
  if( ! refalrts::alloc_close_call( context[22] ) )
    return refalrts::cNoMemory;
  if( ! refalrts::alloc_close_call( context[23] ) )
    return refalrts::cNoMemory;
  if( ! refalrts::alloc_open_bracket( context[24] ) )
    return refalrts::cNoMemory;
  if (! refalrts::copy_evar(context[25], context[26], context[5], context[6]))
    return refalrts::cNoMemory;
  if( ! refalrts::alloc_chars( context[27], context[28], "refalrts::bracket_pointers(", 27 ) )
    return refalrts::cNoMemory;
  if( ! refalrts::alloc_open_call( context[29] ) )
    return refalrts::cNoMemory;
  if( ! refalrts::alloc_name( context[30], ContextItem, "ContextItem" ) )
    return refalrts::cNoMemory;
  if( ! refalrts::alloc_open_call( context[31] ) )
    return refalrts::cNoMemory;
  if( ! refalrts::alloc_name( context[32], Add, "Add" ) )
    return refalrts::cNoMemory;
  if (! refalrts::copy_stvar(context[33], context[11]))
    return refalrts::cNoMemory;
  if( ! refalrts::alloc_number( context[34], 2UL ) )
    return refalrts::cNoMemory;
  if( ! refalrts::alloc_close_call( context[35] ) )
    return refalrts::cNoMemory;
  if( ! refalrts::alloc_close_call( context[36] ) )
    return refalrts::cNoMemory;
  if( ! refalrts::alloc_chars( context[37], context[38], ", ", 2 ) )
    return refalrts::cNoMemory;
  if( ! refalrts::alloc_open_call( context[39] ) )
    return refalrts::cNoMemory;
  if( ! refalrts::alloc_name( context[40], ContextItem, "ContextItem" ) )
    return refalrts::cNoMemory;
  if( ! refalrts::alloc_open_call( context[41] ) )
    return refalrts::cNoMemory;
  if( ! refalrts::alloc_name( context[42], Add, "Add" ) )
    return refalrts::cNoMemory;
  if (! refalrts::copy_stvar(context[43], context[11]))
    return refalrts::cNoMemory;
  if( ! refalrts::alloc_number( context[44], 3UL ) )
    return refalrts::cNoMemory;
  if( ! refalrts::alloc_close_call( context[45] ) )
    return refalrts::cNoMemory;
  if( ! refalrts::alloc_close_call( context[46] ) )
    return refalrts::cNoMemory;
  if( ! refalrts::alloc_chars( context[47], context[48], ");", 2 ) )
    return refalrts::cNoMemory;
  if( ! refalrts::alloc_close_bracket( context[49] ) )
    return refalrts::cNoMemory;
  refalrts::update_name( context[4], PrintMatchSave, "PrintMatchSave" );
  refalrts::link_brackets( context[24], context[49] );
  refalrts::push_stack( context[46] );
  refalrts::push_stack( context[39] );
  refalrts::push_stack( context[45] );
  refalrts::push_stack( context[41] );
  refalrts::push_stack( context[36] );
  refalrts::push_stack( context[29] );
  refalrts::push_stack( context[35] );
  refalrts::push_stack( context[31] );
  refalrts::push_stack( context[23] );
  refalrts::push_stack( context[0] );
  refalrts::push_stack( context[22] );
  refalrts::push_stack( context[19] );
  refalrts::link_brackets( context[15], context[18] );
  refalrts::push_stack( context[1] );
  refalrts::push_stack( context[12] );
  refalrts::link_brackets( context[7], context[8] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = arg_end->next;
  res = refalrts::splice_evar( res, context[15], context[49] );
  res = refalrts::splice_evar( res, context[9], context[10] );
  res = refalrts::splice_evar( res, context[11], context[1] );
  res = refalrts::splice_evar( res, context[12], context[14] );
  refalrts::use( res );
  return refalrts::FnResult(refalrts::cSuccess | (__LINE__ << 8));
#endif
}

static refalrts::FnResult PrintMatchADT(refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  refalrts::this_is_generated_function();
  // issue here memory for vars with 21 elems
  refalrts::Iter context[21];
  refalrts::zeros( context, 21 );
#ifdef INTERPRET
  static const refalrts::RefalFunction functions[] = {
    { PrintMatch, "PrintMatch" },
    { ContextRange, "ContextRange" }
  };
  using refalrts::idents;
  using refalrts::numbers;
  static const refalrts::StringItem strings[] = {
    {", ", 2},
    {"adt", 3}
  };
  static const refalrts::RASLCommand raa[] = {
    // </0 & PrintMatchADT/4 (/7 e.Indent#1/5 )/8 s.Direction#1/9 s.BracketNumber#1/10 s.InnerNum#1/11 e.Name#1/2 >/1
    {refalrts::icInitB0_Lite, 0, 0, 0},
    {refalrts::icCallSaveLeft, 0, 2, 0},
    {refalrts::icBracketLeftSave, 0, 5, 2},
    // closed e.Indent#1 as range 5
    {refalrts::icsVarLeft, 0, 9, 2},
    {refalrts::icsVarLeft, 0, 10, 2},
    {refalrts::icsVarLeft, 0, 11, 2},
    // closed e.Name#1 as range 2
    {refalrts::icEmptyResult, 0, 0, 0},
    //TRASH: {REMOVED TILE}  {REMOVED TILE}  {REMOVED TILE}  {REMOVED TILE} 
    //RESULT: Tile{ [[ AsIs: </0 Reuse: & PrintMatch/4 AsIs: (/7 AsIs: e.Indent#1/5 AsIs: )/8 AsIs: s.Direction#1/9 AsIs: s.BracketNumber#1/10 } (/12"adt"/13 )/15 </16 & ContextRange/17 Tile{ AsIs: s.InnerNum#1/11 } >/18", "/19 Tile{ AsIs: e.Name#1/2 } Tile{ AsIs: >/1 ]] }
    {refalrts::icAllocBracket, 0, refalrts::ibOpenBracket, 12},
    {refalrts::icAllocString, 0, 1, 13},
    {refalrts::icAllocBracket, 0, refalrts::ibCloseBracket, 15},
    {refalrts::icAllocBracket, 0, refalrts::ibOpenCall, 16},
    {refalrts::icAllocFunc, 0, 1, 17},
    {refalrts::icAllocBracket, 0, refalrts::ibCloseCall, 18},
    {refalrts::icAllocString, 0, 0, 19},
    {refalrts::icUpdateFunc, 0, 0, 4},
    {refalrts::icPushStack, 0, 0, 1},
    {refalrts::icPushStack, 0, 0, 0},
    {refalrts::icPushStack, 0, 0, 18},
    {refalrts::icPushStack, 0, 0, 16},
    {refalrts::icLinkBrackets, 12, 15, 0},
    {refalrts::icLinkBrackets, 7, 8, 0},
    {refalrts::icSetRes, 0, 0, 1},
    {refalrts::icSpliceEVar, 0, 0, 2},
    {refalrts::icSpliceTile, 18, 20, 0},
    {refalrts::icSpliceTile, 11, 11, 0},
    {refalrts::icSpliceTile, 12, 17, 0},
    {refalrts::icReturnResult_NoTrash, 0, 0, 0},
    {refalrts::icEnd, 0, 0, 0}
  };
  int open_e_stack[1];
  refalrts::FnResult res = refalrts::interpret_array(
    raa, context, arg_begin, arg_end,
    functions, idents, numbers, strings, open_e_stack
  );
  return res;
#else
  // </0 & PrintMatchADT/4 (/7 e.Indent#1/5 )/8 s.Direction#1/9 s.BracketNumber#1/10 s.InnerNum#1/11 e.Name#1/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  context[5] = 0;
  context[6] = 0;
  context[7] = refalrts::brackets_left( context[5], context[6], context[2], context[3] );
  if( ! context[7] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[7], context[8]);
  // closed e.Indent#1 as range 5
  if( ! refalrts::svar_left( context[9], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  if( ! refalrts::svar_left( context[10], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  if( ! refalrts::svar_left( context[11], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  // closed e.Name#1 as range 2

  refalrts::reset_allocator();
  //TRASH: {REMOVED TILE}  {REMOVED TILE}  {REMOVED TILE}  {REMOVED TILE} 
  //RESULT: Tile{ [[ AsIs: </0 Reuse: & PrintMatch/4 AsIs: (/7 AsIs: e.Indent#1/5 AsIs: )/8 AsIs: s.Direction#1/9 AsIs: s.BracketNumber#1/10 } (/12"adt"/13 )/15 </16 & ContextRange/17 Tile{ AsIs: s.InnerNum#1/11 } >/18", "/19 Tile{ AsIs: e.Name#1/2 } Tile{ AsIs: >/1 ]] }
  if( ! refalrts::alloc_open_bracket( context[12] ) )
    return refalrts::cNoMemory;
  if( ! refalrts::alloc_chars( context[13], context[14], "adt", 3 ) )
    return refalrts::cNoMemory;
  if( ! refalrts::alloc_close_bracket( context[15] ) )
    return refalrts::cNoMemory;
  if( ! refalrts::alloc_open_call( context[16] ) )
    return refalrts::cNoMemory;
  if( ! refalrts::alloc_name( context[17], ContextRange, "ContextRange" ) )
    return refalrts::cNoMemory;
  if( ! refalrts::alloc_close_call( context[18] ) )
    return refalrts::cNoMemory;
  if( ! refalrts::alloc_chars( context[19], context[20], ", ", 2 ) )
    return refalrts::cNoMemory;
  refalrts::update_name( context[4], PrintMatch, "PrintMatch" );
  refalrts::push_stack( context[1] );
  refalrts::push_stack( context[0] );
  refalrts::push_stack( context[18] );
  refalrts::push_stack( context[16] );
  refalrts::link_brackets( context[12], context[15] );
  refalrts::link_brackets( context[7], context[8] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[1];
  res = refalrts::splice_evar( res, context[2], context[3] );
  res = refalrts::splice_evar( res, context[18], context[20] );
  res = refalrts::splice_evar( res, context[11], context[11] );
  res = refalrts::splice_evar( res, context[12], context[17] );
  refalrts::use( res );
  return refalrts::FnResult(refalrts::cSuccess | (__LINE__ << 8));
#endif
}

static refalrts::FnResult PrintMatchADTSave(refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  refalrts::this_is_generated_function();
  // issue here memory for vars with 62 elems
  refalrts::Iter context[62];
  refalrts::zeros( context, 62 );
#ifdef INTERPRET
  static const refalrts::RefalFunction functions[] = {
    { PrintMatchSave, "PrintMatchSave" },
    { Add, "Add" },
    { ContextItem, "ContextItem" },
    { ContextRange, "ContextRange" },
    { BreakerFromIndent, "BreakerFromIndent" }
  };
  static const refalrts::RefalIdentifier idents[] = {
    & ident_AlgTerm<int>::name
  };
  using refalrts::numbers;
  static const refalrts::StringItem strings[] = {
    {");", 2},
    {", ", 2},
    {"refalrts::adt_pointers(", 23},
    {"adt", 3},
    {"  ", 2},
    {" )", 2},
    {"( ! ", 4},
    {" = refalrts::adt_term(", 22}
  };
  static const refalrts::RASLCommand raa[] = {
    //FAST GEN:(E )S S S E 
    //GLOBAL GEN:(E )S S S E 
    // </0 & PrintMatchADTSave/4 (/7 e.idxB#0/5 )/8 s.idxT#0/9 s.idxTV#0/10 s.idxTVV#0/11 e.idxTVVV#0/2 >/1
    {refalrts::icInitB0_Lite, 0, 0, 0},
    {refalrts::icCallSaveLeft, 0, 2, 0},
    {refalrts::icBracketLeftSave, 0, 5, 2},
    // closed e.idxB#0 as range 5
    {refalrts::icsVarLeft, 0, 9, 2},
    {refalrts::icsVarLeft, 0, 10, 2},
    {refalrts::icsVarLeft, 0, 11, 2},
    // closed e.idxTVVV#0 as range 2
    {refalrts::icOnFailGoTo, +73, 0, 0},
    //(E )#AlgTermS S E 
    // </0 & PrintMatchADTSave/4 (/7 e.Indent#1/5 )/8 # AlgTerm/9 s.Offset#1/10 s.InnerNum#1/11 e.Name#1/2 >/1
    {refalrts::icIdentTerm, 0, 0, 9},
    // closed e.Indent#1 as range 5
    // closed e.Name#1 as range 2
    {refalrts::icEmptyResult, 0, 0, 0},
    //TRASH: {REMOVED TILE}  {REMOVED TILE}  {REMOVED TILE}  {REMOVED TILE}  {REMOVED TILE}  {REMOVED TILE} 
    //RESULT: Tile{ [[ } (/12 e.Indent#1/5/13 </15 & ContextItem/16 </17 & Add/18 s.InnerNum#1/11/19 2/20 >/21 >/22" = refalrts::adt_term("/23 </25 & ContextRange/26 Tile{ AsIs: s.InnerNum#1/11 } >/27", "/28 Tile{ AsIs: e.Name#1/2 }", "/30 </32 & ContextItem/33 Tile{ AsIs: s.Offset#1/10 } >/34 ')'/35 Tile{ HalfReuse: ';'/0 HalfReuse: )/4 AsIs: (/7 AsIs: e.Indent#1/5 HalfReuse: 'i'/8 HalfReuse: 'f'/9 }"( ! "/36 </38 & ContextItem/39 </40 & Add/41 s.InnerNum#1/11/42 2/43 >/44 >/45" )"/46 )/48 (/49 e.Indent#1/5/50"  "/52 </54 & BreakerFromIndent/55 e.Indent#1/5/56 >/58 Tile{ HalfReuse: )/1 ]] }
    {refalrts::icAllocBracket, 0, refalrts::ibOpenBracket, 12},
    {refalrts::icCopyEVar, 13, 5, 0},
    {refalrts::icAllocBracket, 0, refalrts::ibOpenCall, 15},
    {refalrts::icAllocFunc, 0, 2, 16},
    {refalrts::icAllocBracket, 0, refalrts::ibOpenCall, 17},
    {refalrts::icAllocFunc, 0, 1, 18},
    {refalrts::icCopySTVar, 19, 11, 0},
    {refalrts::icAllocInt, 0, 2, 20},
    {refalrts::icAllocBracket, 0, refalrts::ibCloseCall, 21},
    {refalrts::icAllocBracket, 0, refalrts::ibCloseCall, 22},
    {refalrts::icAllocString, 0, 7, 23},
    {refalrts::icAllocBracket, 0, refalrts::ibOpenCall, 25},
    {refalrts::icAllocFunc, 0, 3, 26},
    {refalrts::icAllocBracket, 0, refalrts::ibCloseCall, 27},
    {refalrts::icAllocString, 0, 1, 28},
    {refalrts::icAllocString, 0, 1, 30},
    {refalrts::icAllocBracket, 0, refalrts::ibOpenCall, 32},
    {refalrts::icAllocFunc, 0, 2, 33},
    {refalrts::icAllocBracket, 0, refalrts::ibCloseCall, 34},
    {refalrts::icAllocChar, 0, ')', 35},
    {refalrts::icAllocString, 0, 6, 36},
    {refalrts::icAllocBracket, 0, refalrts::ibOpenCall, 38},
    {refalrts::icAllocFunc, 0, 2, 39},
    {refalrts::icAllocBracket, 0, refalrts::ibOpenCall, 40},
    {refalrts::icAllocFunc, 0, 1, 41},
    {refalrts::icCopySTVar, 42, 11, 0},
    {refalrts::icAllocInt, 0, 2, 43},
    {refalrts::icAllocBracket, 0, refalrts::ibCloseCall, 44},
    {refalrts::icAllocBracket, 0, refalrts::ibCloseCall, 45},
    {refalrts::icAllocString, 0, 5, 46},
    {refalrts::icAllocBracket, 0, refalrts::ibCloseBracket, 48},
    {refalrts::icAllocBracket, 0, refalrts::ibOpenBracket, 49},
    {refalrts::icCopyEVar, 50, 5, 0},
    {refalrts::icAllocString, 0, 4, 52},
    {refalrts::icAllocBracket, 0, refalrts::ibOpenCall, 54},
    {refalrts::icAllocFunc, 0, 4, 55},
    {refalrts::icCopyEVar, 56, 5, 0},
    {refalrts::icAllocBracket, 0, refalrts::ibCloseCall, 58},
    {refalrts::icReinitChar, 0, ';', 0},
    {refalrts::icReinitBracket, 0, refalrts::ibCloseBracket, 4},
    {refalrts::icReinitChar, 0, 'i', 8},
    {refalrts::icReinitChar, 0, 'f', 9},
    {refalrts::icReinitBracket, 0, refalrts::ibCloseBracket, 1},
    {refalrts::icLinkBrackets, 49, 1, 0},
    {refalrts::icPushStack, 0, 0, 58},
    {refalrts::icPushStack, 0, 0, 54},
    {refalrts::icLinkBrackets, 7, 48, 0},
    {refalrts::icPushStack, 0, 0, 45},
    {refalrts::icPushStack, 0, 0, 38},
    {refalrts::icPushStack, 0, 0, 44},
    {refalrts::icPushStack, 0, 0, 40},
    {refalrts::icLinkBrackets, 12, 4, 0},
    {refalrts::icPushStack, 0, 0, 34},
    {refalrts::icPushStack, 0, 0, 32},
    {refalrts::icPushStack, 0, 0, 27},
    {refalrts::icPushStack, 0, 0, 25},
    {refalrts::icPushStack, 0, 0, 22},
    {refalrts::icPushStack, 0, 0, 15},
    {refalrts::icPushStack, 0, 0, 21},
    {refalrts::icPushStack, 0, 0, 17},
    {refalrts::icSetRes, 0, 0, 1},
    {refalrts::icSpliceTile, 36, 58, 0},
    {refalrts::icSpliceTile, 0, 9, 0},
    {refalrts::icSpliceTile, 34, 35, 0},
    {refalrts::icSpliceTile, 10, 10, 0},
    {refalrts::icSpliceTile, 30, 33, 0},
    {refalrts::icSpliceEVar, 0, 0, 2},
    {refalrts::icSpliceTile, 27, 29, 0},
    {refalrts::icSpliceTile, 11, 11, 0},
    {refalrts::icSpliceTile, 12, 26, 0},
    {refalrts::icReturnResult_NoTrash, 0, 0, 0},
    //(E )S S S E 
    // </0 & PrintMatchADTSave/4 (/7 e.Indent#1/5 )/8 s.Direction#1/9 s.BracketNumber#1/10 s.InnerNum#1/11 e.Name#1/2 >/1
    // closed e.Indent#1 as range 5
    // closed e.Name#1 as range 2
    {refalrts::icEmptyResult, 0, 0, 0},
    //TRASH: {REMOVED TILE}  {REMOVED TILE}  {REMOVED TILE}  {REMOVED TILE}  {REMOVED TILE} 
    //RESULT: Tile{ [[ AsIs: </0 Reuse: & PrintMatchSave/4 AsIs: (/7 AsIs: e.Indent#1/5 AsIs: )/8 } </12 & Add/13 2/14 s.InnerNum#1/11/15 >/16 Tile{ AsIs: s.Direction#1/9 AsIs: s.BracketNumber#1/10 } (/17"adt"/18 )/20 </21 & ContextRange/22 Tile{ AsIs: s.InnerNum#1/11 } >/23", "/24 Tile{ AsIs: e.Name#1/2 } >/26 (/27 e.Indent#1/5/28"refalrts::adt_pointers("/30 </32 & ContextItem/33 </34 & Add/35 s.InnerNum#1/11/36 2/37 >/38 >/39", "/40 </42 & ContextItem/43 </44 & Add/45 s.InnerNum#1/11/46 3/47 >/48 >/49", "/50 </52 & ContextItem/53 </54 & Add/55 s.InnerNum#1/11/56 4/57 >/58 >/59");"/60 Tile{ HalfReuse: )/1 ]] }
    {refalrts::icAllocBracket, 0, refalrts::ibOpenCall, 12},
    {refalrts::icAllocFunc, 0, 1, 13},
    {refalrts::icAllocInt, 0, 2, 14},
    {refalrts::icCopySTVar, 15, 11, 0},
    {refalrts::icAllocBracket, 0, refalrts::ibCloseCall, 16},
    {refalrts::icAllocBracket, 0, refalrts::ibOpenBracket, 17},
    {refalrts::icAllocString, 0, 3, 18},
    {refalrts::icAllocBracket, 0, refalrts::ibCloseBracket, 20},
    {refalrts::icAllocBracket, 0, refalrts::ibOpenCall, 21},
    {refalrts::icAllocFunc, 0, 3, 22},
    {refalrts::icAllocBracket, 0, refalrts::ibCloseCall, 23},
    {refalrts::icAllocString, 0, 1, 24},
    {refalrts::icAllocBracket, 0, refalrts::ibCloseCall, 26},
    {refalrts::icAllocBracket, 0, refalrts::ibOpenBracket, 27},
    {refalrts::icCopyEVar, 28, 5, 0},
    {refalrts::icAllocString, 0, 2, 30},
    {refalrts::icAllocBracket, 0, refalrts::ibOpenCall, 32},
    {refalrts::icAllocFunc, 0, 2, 33},
    {refalrts::icAllocBracket, 0, refalrts::ibOpenCall, 34},
    {refalrts::icAllocFunc, 0, 1, 35},
    {refalrts::icCopySTVar, 36, 11, 0},
    {refalrts::icAllocInt, 0, 2, 37},
    {refalrts::icAllocBracket, 0, refalrts::ibCloseCall, 38},
    {refalrts::icAllocBracket, 0, refalrts::ibCloseCall, 39},
    {refalrts::icAllocString, 0, 1, 40},
    {refalrts::icAllocBracket, 0, refalrts::ibOpenCall, 42},
    {refalrts::icAllocFunc, 0, 2, 43},
    {refalrts::icAllocBracket, 0, refalrts::ibOpenCall, 44},
    {refalrts::icAllocFunc, 0, 1, 45},
    {refalrts::icCopySTVar, 46, 11, 0},
    {refalrts::icAllocInt, 0, 3, 47},
    {refalrts::icAllocBracket, 0, refalrts::ibCloseCall, 48},
    {refalrts::icAllocBracket, 0, refalrts::ibCloseCall, 49},
    {refalrts::icAllocString, 0, 1, 50},
    {refalrts::icAllocBracket, 0, refalrts::ibOpenCall, 52},
    {refalrts::icAllocFunc, 0, 2, 53},
    {refalrts::icAllocBracket, 0, refalrts::ibOpenCall, 54},
    {refalrts::icAllocFunc, 0, 1, 55},
    {refalrts::icCopySTVar, 56, 11, 0},
    {refalrts::icAllocInt, 0, 4, 57},
    {refalrts::icAllocBracket, 0, refalrts::ibCloseCall, 58},
    {refalrts::icAllocBracket, 0, refalrts::ibCloseCall, 59},
    {refalrts::icAllocString, 0, 0, 60},
    {refalrts::icUpdateFunc, 0, 0, 4},
    {refalrts::icReinitBracket, 0, refalrts::ibCloseBracket, 1},
    {refalrts::icLinkBrackets, 27, 1, 0},
    {refalrts::icPushStack, 0, 0, 59},
    {refalrts::icPushStack, 0, 0, 52},
    {refalrts::icPushStack, 0, 0, 58},
    {refalrts::icPushStack, 0, 0, 54},
    {refalrts::icPushStack, 0, 0, 49},
    {refalrts::icPushStack, 0, 0, 42},
    {refalrts::icPushStack, 0, 0, 48},
    {refalrts::icPushStack, 0, 0, 44},
    {refalrts::icPushStack, 0, 0, 39},
    {refalrts::icPushStack, 0, 0, 32},
    {refalrts::icPushStack, 0, 0, 38},
    {refalrts::icPushStack, 0, 0, 34},
    {refalrts::icPushStack, 0, 0, 26},
    {refalrts::icPushStack, 0, 0, 0},
    {refalrts::icPushStack, 0, 0, 23},
    {refalrts::icPushStack, 0, 0, 21},
    {refalrts::icLinkBrackets, 17, 20, 0},
    {refalrts::icPushStack, 0, 0, 16},
    {refalrts::icPushStack, 0, 0, 12},
    {refalrts::icLinkBrackets, 7, 8, 0},
    {refalrts::icSetRes, 0, 0, 1},
    {refalrts::icSpliceTile, 26, 61, 0},
    {refalrts::icSpliceEVar, 0, 0, 2},
    {refalrts::icSpliceTile, 23, 25, 0},
    {refalrts::icSpliceTile, 11, 11, 0},
    {refalrts::icSpliceTile, 17, 22, 0},
    {refalrts::icSpliceTile, 9, 10, 0},
    {refalrts::icSpliceTile, 12, 16, 0},
    {refalrts::icReturnResult_NoTrash, 0, 0, 0},
    {refalrts::icEnd, 0, 0, 0}
  };
  int open_e_stack[1];
  refalrts::FnResult res = refalrts::interpret_array(
    raa, context, arg_begin, arg_end,
    functions, idents, numbers, strings, open_e_stack
  );
  return res;
#else
  //FAST GEN:(E )S S S E 
  //GLOBAL GEN:(E )S S S E 
  // </0 & PrintMatchADTSave/4 (/7 e.idxB#0/5 )/8 s.idxT#0/9 s.idxTV#0/10 s.idxTVV#0/11 e.idxTVVV#0/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  context[5] = 0;
  context[6] = 0;
  context[7] = refalrts::brackets_left( context[5], context[6], context[2], context[3] );
  if( ! context[7] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[7], context[8]);
  // closed e.idxB#0 as range 5
  if( ! refalrts::svar_left( context[9], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  if( ! refalrts::svar_left( context[10], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  if( ! refalrts::svar_left( context[11], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  // closed e.idxTVVV#0 as range 2
  do {
    refalrts::start_sentence();
    //(E )#AlgTermS S E 
    // </0 & PrintMatchADTSave/4 (/7 e.Indent#1/5 )/8 # AlgTerm/9 s.Offset#1/10 s.InnerNum#1/11 e.Name#1/2 >/1
    if( ! refalrts::ident_term(  & ident_AlgTerm<int>::name, context[9] ) )
      continue;
    // closed e.Indent#1 as range 5
    // closed e.Name#1 as range 2

    refalrts::reset_allocator();
    //TRASH: {REMOVED TILE}  {REMOVED TILE}  {REMOVED TILE}  {REMOVED TILE}  {REMOVED TILE}  {REMOVED TILE} 
    //RESULT: Tile{ [[ } (/12 e.Indent#1/5/13 </15 & ContextItem/16 </17 & Add/18 s.InnerNum#1/11/19 2/20 >/21 >/22" = refalrts::adt_term("/23 </25 & ContextRange/26 Tile{ AsIs: s.InnerNum#1/11 } >/27", "/28 Tile{ AsIs: e.Name#1/2 }", "/30 </32 & ContextItem/33 Tile{ AsIs: s.Offset#1/10 } >/34 ')'/35 Tile{ HalfReuse: ';'/0 HalfReuse: )/4 AsIs: (/7 AsIs: e.Indent#1/5 HalfReuse: 'i'/8 HalfReuse: 'f'/9 }"( ! "/36 </38 & ContextItem/39 </40 & Add/41 s.InnerNum#1/11/42 2/43 >/44 >/45" )"/46 )/48 (/49 e.Indent#1/5/50"  "/52 </54 & BreakerFromIndent/55 e.Indent#1/5/56 >/58 Tile{ HalfReuse: )/1 ]] }
    if( ! refalrts::alloc_open_bracket( context[12] ) )
      return refalrts::cNoMemory;
    if (! refalrts::copy_evar(context[13], context[14], context[5], context[6]))
      return refalrts::cNoMemory;
    if( ! refalrts::alloc_open_call( context[15] ) )
      return refalrts::cNoMemory;
    if( ! refalrts::alloc_name( context[16], ContextItem, "ContextItem" ) )
      return refalrts::cNoMemory;
    if( ! refalrts::alloc_open_call( context[17] ) )
      return refalrts::cNoMemory;
    if( ! refalrts::alloc_name( context[18], Add, "Add" ) )
      return refalrts::cNoMemory;
    if (! refalrts::copy_stvar(context[19], context[11]))
      return refalrts::cNoMemory;
    if( ! refalrts::alloc_number( context[20], 2UL ) )
      return refalrts::cNoMemory;
    if( ! refalrts::alloc_close_call( context[21] ) )
      return refalrts::cNoMemory;
    if( ! refalrts::alloc_close_call( context[22] ) )
      return refalrts::cNoMemory;
    if( ! refalrts::alloc_chars( context[23], context[24], " = refalrts::adt_term(", 22 ) )
      return refalrts::cNoMemory;
    if( ! refalrts::alloc_open_call( context[25] ) )
      return refalrts::cNoMemory;
    if( ! refalrts::alloc_name( context[26], ContextRange, "ContextRange" ) )
      return refalrts::cNoMemory;
    if( ! refalrts::alloc_close_call( context[27] ) )
      return refalrts::cNoMemory;
    if( ! refalrts::alloc_chars( context[28], context[29], ", ", 2 ) )
      return refalrts::cNoMemory;
    if( ! refalrts::alloc_chars( context[30], context[31], ", ", 2 ) )
      return refalrts::cNoMemory;
    if( ! refalrts::alloc_open_call( context[32] ) )
      return refalrts::cNoMemory;
    if( ! refalrts::alloc_name( context[33], ContextItem, "ContextItem" ) )
      return refalrts::cNoMemory;
    if( ! refalrts::alloc_close_call( context[34] ) )
      return refalrts::cNoMemory;
    if( ! refalrts::alloc_char( context[35], ')' ) )
      return refalrts::cNoMemory;
    if( ! refalrts::alloc_chars( context[36], context[37], "( ! ", 4 ) )
      return refalrts::cNoMemory;
    if( ! refalrts::alloc_open_call( context[38] ) )
      return refalrts::cNoMemory;
    if( ! refalrts::alloc_name( context[39], ContextItem, "ContextItem" ) )
      return refalrts::cNoMemory;
    if( ! refalrts::alloc_open_call( context[40] ) )
      return refalrts::cNoMemory;
    if( ! refalrts::alloc_name( context[41], Add, "Add" ) )
      return refalrts::cNoMemory;
    if (! refalrts::copy_stvar(context[42], context[11]))
      return refalrts::cNoMemory;
    if( ! refalrts::alloc_number( context[43], 2UL ) )
      return refalrts::cNoMemory;
    if( ! refalrts::alloc_close_call( context[44] ) )
      return refalrts::cNoMemory;
    if( ! refalrts::alloc_close_call( context[45] ) )
      return refalrts::cNoMemory;
    if( ! refalrts::alloc_chars( context[46], context[47], " )", 2 ) )
      return refalrts::cNoMemory;
    if( ! refalrts::alloc_close_bracket( context[48] ) )
      return refalrts::cNoMemory;
    if( ! refalrts::alloc_open_bracket( context[49] ) )
      return refalrts::cNoMemory;
    if (! refalrts::copy_evar(context[50], context[51], context[5], context[6]))
      return refalrts::cNoMemory;
    if( ! refalrts::alloc_chars( context[52], context[53], "  ", 2 ) )
      return refalrts::cNoMemory;
    if( ! refalrts::alloc_open_call( context[54] ) )
      return refalrts::cNoMemory;
    if( ! refalrts::alloc_name( context[55], BreakerFromIndent, "BreakerFromIndent" ) )
      return refalrts::cNoMemory;
    if (! refalrts::copy_evar(context[56], context[57], context[5], context[6]))
      return refalrts::cNoMemory;
    if( ! refalrts::alloc_close_call( context[58] ) )
      return refalrts::cNoMemory;
    refalrts::reinit_char( context[0], ';' );
    refalrts::reinit_close_bracket( context[4] );
    refalrts::reinit_char( context[8], 'i' );
    refalrts::reinit_char( context[9], 'f' );
    refalrts::reinit_close_bracket( context[1] );
    refalrts::link_brackets( context[49], context[1] );
    refalrts::push_stack( context[58] );
    refalrts::push_stack( context[54] );
    refalrts::link_brackets( context[7], context[48] );
    refalrts::push_stack( context[45] );
    refalrts::push_stack( context[38] );
    refalrts::push_stack( context[44] );
    refalrts::push_stack( context[40] );
    refalrts::link_brackets( context[12], context[4] );
    refalrts::push_stack( context[34] );
    refalrts::push_stack( context[32] );
    refalrts::push_stack( context[27] );
    refalrts::push_stack( context[25] );
    refalrts::push_stack( context[22] );
    refalrts::push_stack( context[15] );
    refalrts::push_stack( context[21] );
    refalrts::push_stack( context[17] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    res = refalrts::splice_evar( res, context[36], context[58] );
    res = refalrts::splice_evar( res, context[0], context[9] );
    res = refalrts::splice_evar( res, context[34], context[35] );
    res = refalrts::splice_evar( res, context[10], context[10] );
    res = refalrts::splice_evar( res, context[30], context[33] );
    res = refalrts::splice_evar( res, context[2], context[3] );
    res = refalrts::splice_evar( res, context[27], context[29] );
    res = refalrts::splice_evar( res, context[11], context[11] );
    res = refalrts::splice_evar( res, context[12], context[26] );
    refalrts::use( res );
    return refalrts::FnResult(refalrts::cSuccess | (__LINE__ << 8));
  } while ( 0 );

  //(E )S S S E 
  // </0 & PrintMatchADTSave/4 (/7 e.Indent#1/5 )/8 s.Direction#1/9 s.BracketNumber#1/10 s.InnerNum#1/11 e.Name#1/2 >/1
  // closed e.Indent#1 as range 5
  // closed e.Name#1 as range 2

  refalrts::reset_allocator();
  //TRASH: {REMOVED TILE}  {REMOVED TILE}  {REMOVED TILE}  {REMOVED TILE}  {REMOVED TILE} 
  //RESULT: Tile{ [[ AsIs: </0 Reuse: & PrintMatchSave/4 AsIs: (/7 AsIs: e.Indent#1/5 AsIs: )/8 } </12 & Add/13 2/14 s.InnerNum#1/11/15 >/16 Tile{ AsIs: s.Direction#1/9 AsIs: s.BracketNumber#1/10 } (/17"adt"/18 )/20 </21 & ContextRange/22 Tile{ AsIs: s.InnerNum#1/11 } >/23", "/24 Tile{ AsIs: e.Name#1/2 } >/26 (/27 e.Indent#1/5/28"refalrts::adt_pointers("/30 </32 & ContextItem/33 </34 & Add/35 s.InnerNum#1/11/36 2/37 >/38 >/39", "/40 </42 & ContextItem/43 </44 & Add/45 s.InnerNum#1/11/46 3/47 >/48 >/49", "/50 </52 & ContextItem/53 </54 & Add/55 s.InnerNum#1/11/56 4/57 >/58 >/59");"/60 Tile{ HalfReuse: )/1 ]] }
  if( ! refalrts::alloc_open_call( context[12] ) )
    return refalrts::cNoMemory;
  if( ! refalrts::alloc_name( context[13], Add, "Add" ) )
    return refalrts::cNoMemory;
  if( ! refalrts::alloc_number( context[14], 2UL ) )
    return refalrts::cNoMemory;
  if (! refalrts::copy_stvar(context[15], context[11]))
    return refalrts::cNoMemory;
  if( ! refalrts::alloc_close_call( context[16] ) )
    return refalrts::cNoMemory;
  if( ! refalrts::alloc_open_bracket( context[17] ) )
    return refalrts::cNoMemory;
  if( ! refalrts::alloc_chars( context[18], context[19], "adt", 3 ) )
    return refalrts::cNoMemory;
  if( ! refalrts::alloc_close_bracket( context[20] ) )
    return refalrts::cNoMemory;
  if( ! refalrts::alloc_open_call( context[21] ) )
    return refalrts::cNoMemory;
  if( ! refalrts::alloc_name( context[22], ContextRange, "ContextRange" ) )
    return refalrts::cNoMemory;
  if( ! refalrts::alloc_close_call( context[23] ) )
    return refalrts::cNoMemory;
  if( ! refalrts::alloc_chars( context[24], context[25], ", ", 2 ) )
    return refalrts::cNoMemory;
  if( ! refalrts::alloc_close_call( context[26] ) )
    return refalrts::cNoMemory;
  if( ! refalrts::alloc_open_bracket( context[27] ) )
    return refalrts::cNoMemory;
  if (! refalrts::copy_evar(context[28], context[29], context[5], context[6]))
    return refalrts::cNoMemory;
  if( ! refalrts::alloc_chars( context[30], context[31], "refalrts::adt_pointers(", 23 ) )
    return refalrts::cNoMemory;
  if( ! refalrts::alloc_open_call( context[32] ) )
    return refalrts::cNoMemory;
  if( ! refalrts::alloc_name( context[33], ContextItem, "ContextItem" ) )
    return refalrts::cNoMemory;
  if( ! refalrts::alloc_open_call( context[34] ) )
    return refalrts::cNoMemory;
  if( ! refalrts::alloc_name( context[35], Add, "Add" ) )
    return refalrts::cNoMemory;
  if (! refalrts::copy_stvar(context[36], context[11]))
    return refalrts::cNoMemory;
  if( ! refalrts::alloc_number( context[37], 2UL ) )
    return refalrts::cNoMemory;
  if( ! refalrts::alloc_close_call( context[38] ) )
    return refalrts::cNoMemory;
  if( ! refalrts::alloc_close_call( context[39] ) )
    return refalrts::cNoMemory;
  if( ! refalrts::alloc_chars( context[40], context[41], ", ", 2 ) )
    return refalrts::cNoMemory;
  if( ! refalrts::alloc_open_call( context[42] ) )
    return refalrts::cNoMemory;
  if( ! refalrts::alloc_name( context[43], ContextItem, "ContextItem" ) )
    return refalrts::cNoMemory;
  if( ! refalrts::alloc_open_call( context[44] ) )
    return refalrts::cNoMemory;
  if( ! refalrts::alloc_name( context[45], Add, "Add" ) )
    return refalrts::cNoMemory;
  if (! refalrts::copy_stvar(context[46], context[11]))
    return refalrts::cNoMemory;
  if( ! refalrts::alloc_number( context[47], 3UL ) )
    return refalrts::cNoMemory;
  if( ! refalrts::alloc_close_call( context[48] ) )
    return refalrts::cNoMemory;
  if( ! refalrts::alloc_close_call( context[49] ) )
    return refalrts::cNoMemory;
  if( ! refalrts::alloc_chars( context[50], context[51], ", ", 2 ) )
    return refalrts::cNoMemory;
  if( ! refalrts::alloc_open_call( context[52] ) )
    return refalrts::cNoMemory;
  if( ! refalrts::alloc_name( context[53], ContextItem, "ContextItem" ) )
    return refalrts::cNoMemory;
  if( ! refalrts::alloc_open_call( context[54] ) )
    return refalrts::cNoMemory;
  if( ! refalrts::alloc_name( context[55], Add, "Add" ) )
    return refalrts::cNoMemory;
  if (! refalrts::copy_stvar(context[56], context[11]))
    return refalrts::cNoMemory;
  if( ! refalrts::alloc_number( context[57], 4UL ) )
    return refalrts::cNoMemory;
  if( ! refalrts::alloc_close_call( context[58] ) )
    return refalrts::cNoMemory;
  if( ! refalrts::alloc_close_call( context[59] ) )
    return refalrts::cNoMemory;
  if( ! refalrts::alloc_chars( context[60], context[61], ");", 2 ) )
    return refalrts::cNoMemory;
  refalrts::update_name( context[4], PrintMatchSave, "PrintMatchSave" );
  refalrts::reinit_close_bracket( context[1] );
  refalrts::link_brackets( context[27], context[1] );
  refalrts::push_stack( context[59] );
  refalrts::push_stack( context[52] );
  refalrts::push_stack( context[58] );
  refalrts::push_stack( context[54] );
  refalrts::push_stack( context[49] );
  refalrts::push_stack( context[42] );
  refalrts::push_stack( context[48] );
  refalrts::push_stack( context[44] );
  refalrts::push_stack( context[39] );
  refalrts::push_stack( context[32] );
  refalrts::push_stack( context[38] );
  refalrts::push_stack( context[34] );
  refalrts::push_stack( context[26] );
  refalrts::push_stack( context[0] );
  refalrts::push_stack( context[23] );
  refalrts::push_stack( context[21] );
  refalrts::link_brackets( context[17], context[20] );
  refalrts::push_stack( context[16] );
  refalrts::push_stack( context[12] );
  refalrts::link_brackets( context[7], context[8] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[1];
  res = refalrts::splice_evar( res, context[26], context[61] );
  res = refalrts::splice_evar( res, context[2], context[3] );
  res = refalrts::splice_evar( res, context[23], context[25] );
  res = refalrts::splice_evar( res, context[11], context[11] );
  res = refalrts::splice_evar( res, context[17], context[22] );
  res = refalrts::splice_evar( res, context[9], context[10] );
  res = refalrts::splice_evar( res, context[12], context[16] );
  refalrts::use( res );
  return refalrts::FnResult(refalrts::cSuccess | (__LINE__ << 8));
#endif
}

static refalrts::FnResult BreakerFromIndent(refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  refalrts::this_is_generated_function();
  // issue here memory for vars with 11 elems
  refalrts::Iter context[11];
  refalrts::zeros( context, 11 );
#ifdef INTERPRET
  using refalrts::functions;
  using refalrts::idents;
  using refalrts::numbers;
  static const refalrts::StringItem strings[] = {
    {"ntinue", 6},
    {"n refalrts::cRecognitionImpossible;", 35}
  };
  static const refalrts::RASLCommand raa[] = {
    //FAST GEN:E 
    //GLOBAL GEN:E 
    // </0 & BreakerFromIndent/4 e.idx#0/2 >/1
    {refalrts::icInitB0_Lite, 0, 0, 0},
    {refalrts::icCallSaveLeft, 0, 2, 0},
    // closed e.idx#0 as range 2
    {refalrts::icOnFailGoTo, +14, 0, 0},
    //' '' '
    // </0 & BreakerFromIndent/4 ' '/5 ' '/6 >/1
    {refalrts::icSave, 0, 9, 2},
    {refalrts::icCharLeftSave, 5, static_cast<unsigned char>(' '), 9},
    {refalrts::icCharLeftSave, 6, static_cast<unsigned char>(' '), 9},
    {refalrts::icEmpty, 0, 0, 9},
    {refalrts::icEmptyResult, 0, 0, 0},
    //TRASH: {REMOVED TILE}  {REMOVED TILE} 
    //RESULT: Tile{ [[ HalfReuse: 'r'/0 HalfReuse: 'e'/4 Reuse: 't'/5 Reuse: 'u'/6 HalfReuse: 'r'/1 }"n refalrts::cRecognitionImpossible;"/7 Tile{ ]] }
    {refalrts::icAllocString, 0, 1, 7},
    {refalrts::icReinitChar, 0, 'r', 0},
    {refalrts::icReinitChar, 0, 'e', 4},
    {refalrts::icUpdateChar, 0, 't', 5},
    {refalrts::icUpdateChar, 0, 'u', 6},
    {refalrts::icReinitChar, 0, 'r', 1},
    {refalrts::icSetResRightEdge, 0, 0, 0},
    {refalrts::icSpliceTile, 7, 8, 0},
    {refalrts::icReturnResult_NoTrash, 0, 0, 0},
    //E 
    // </0 & BreakerFromIndent/4 e.OtherIndent#1/2 >/1
    // closed e.OtherIndent#1 as range 2
    {refalrts::icEmptyResult, 0, 0, 0},
    //TRASH: {REMOVED TILE}  e.OtherIndent#1/2 {REMOVED TILE} 
    //RESULT: Tile{ [[ HalfReuse: 'c'/0 HalfReuse: 'o'/4 }"ntinue"/5 Tile{ HalfReuse: ';'/1 ]] }
    {refalrts::icAllocString, 0, 0, 5},
    {refalrts::icReinitChar, 0, 'c', 0},
    {refalrts::icReinitChar, 0, 'o', 4},
    {refalrts::icReinitChar, 0, ';', 1},
    {refalrts::icSetRes, 0, 0, 1},
    {refalrts::icSpliceTile, 5, 6, 0},
    {refalrts::icTrash, 0, 0, 4},
    {refalrts::icReturnResult_NoTrash, 0, 0, 0},
    {refalrts::icEnd, 0, 0, 0}
  };
  int open_e_stack[1];
  refalrts::FnResult res = refalrts::interpret_array(
    raa, context, arg_begin, arg_end,
    functions, idents, numbers, strings, open_e_stack
  );
  return res;
#else
  //FAST GEN:E 
  //GLOBAL GEN:E 
  // </0 & BreakerFromIndent/4 e.idx#0/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.idx#0 as range 2
  do {
    refalrts::start_sentence();
    //' '' '
    // </0 & BreakerFromIndent/4 ' '/5 ' '/6 >/1
    context[9] = context[2];
    context[10] = context[3];
    context[5] = refalrts::char_left( ' ', context[9], context[10] );
    if( ! context[5] )
      continue;
    context[6] = refalrts::char_left( ' ', context[9], context[10] );
    if( ! context[6] )
      continue;
    if( ! refalrts::empty_seq( context[9], context[10] ) )
      continue;

    refalrts::reset_allocator();
    //TRASH: {REMOVED TILE}  {REMOVED TILE} 
    //RESULT: Tile{ [[ HalfReuse: 'r'/0 HalfReuse: 'e'/4 Reuse: 't'/5 Reuse: 'u'/6 HalfReuse: 'r'/1 }"n refalrts::cRecognitionImpossible;"/7 Tile{ ]] }
    if( ! refalrts::alloc_chars( context[7], context[8], "n refalrts::cRecognitionImpossible;", 35 ) )
      return refalrts::cNoMemory;
    refalrts::reinit_char( context[0], 'r' );
    refalrts::reinit_char( context[4], 'e' );
    refalrts::update_char( context[5], 't' );
    refalrts::update_char( context[6], 'u' );
    refalrts::reinit_char( context[1], 'r' );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = arg_end->next;
    res = refalrts::splice_evar( res, context[7], context[8] );
    refalrts::use( res );
    return refalrts::FnResult(refalrts::cSuccess | (__LINE__ << 8));
  } while ( 0 );

  //E 
  // </0 & BreakerFromIndent/4 e.OtherIndent#1/2 >/1
  // closed e.OtherIndent#1 as range 2

  refalrts::reset_allocator();
  //TRASH: {REMOVED TILE}  e.OtherIndent#1/2 {REMOVED TILE} 
  //RESULT: Tile{ [[ HalfReuse: 'c'/0 HalfReuse: 'o'/4 }"ntinue"/5 Tile{ HalfReuse: ';'/1 ]] }
  if( ! refalrts::alloc_chars( context[5], context[6], "ntinue", 6 ) )
    return refalrts::cNoMemory;
  refalrts::reinit_char( context[0], 'c' );
  refalrts::reinit_char( context[4], 'o' );
  refalrts::reinit_char( context[1], ';' );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[1];
  res = refalrts::splice_evar( res, context[5], context[6] );
  refalrts::use( res );
  refalrts::splice_to_freelist_open( context[4], res );
  return refalrts::FnResult(refalrts::cSuccess | (__LINE__ << 8));
#endif
}

static refalrts::FnResult PrintMatchEmpty(refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  refalrts::this_is_generated_function();
  // issue here memory for vars with 26 elems
  refalrts::Iter context[26];
  refalrts::zeros( context, 26 );
#ifdef INTERPRET
  static const refalrts::RefalFunction functions[] = {
    { BreakerFromIndent, "BreakerFromIndent" },
    { ContextRange, "ContextRange" }
  };
  using refalrts::idents;
  using refalrts::numbers;
  static const refalrts::StringItem strings[] = {
    {" ) ", 3},
    {"if( ! refalrts::empty_seq( ", 27}
  };
  static const refalrts::RASLCommand raa[] = {
    // </0 & PrintMatchEmpty/4 (/7 e.Indent#1/5 )/8 s.BracketNumber#1/9 >/1
    {refalrts::icInitB0_Lite, 0, 0, 0},
    {refalrts::icCallSaveLeft, 0, 2, 0},
    {refalrts::icBracketLeftSave, 0, 5, 2},
    // closed e.Indent#1 as range 5
    {refalrts::icsVarLeft, 0, 9, 2},
    {refalrts::icEmpty, 0, 0, 2},
    {refalrts::icEmptyResult, 0, 0, 0},
    //TRASH: {REMOVED TILE}  {REMOVED TILE}  {REMOVED TILE}  {REMOVED TILE} 
    //RESULT: Tile{ [[ } (/10 e.Indent#1/5/11"if( ! refalrts::empty_seq( "/13 </15 & ContextRange/16 Tile{ AsIs: s.BracketNumber#1/9 AsIs: >/1 }" ) "/17 Tile{ HalfReuse: ')'/0 HalfReuse: )/4 AsIs: (/7 AsIs: e.Indent#1/5 HalfReuse: ' '/8 } ' '/19 </20 & BreakerFromIndent/21 e.Indent#1/5/22 >/24 )/25 Tile{ ]] }
    {refalrts::icAllocBracket, 0, refalrts::ibOpenBracket, 10},
    {refalrts::icCopyEVar, 11, 5, 0},
    {refalrts::icAllocString, 0, 1, 13},
    {refalrts::icAllocBracket, 0, refalrts::ibOpenCall, 15},
    {refalrts::icAllocFunc, 0, 1, 16},
    {refalrts::icAllocString, 0, 0, 17},
    {refalrts::icAllocChar, 0, ' ', 19},
    {refalrts::icAllocBracket, 0, refalrts::ibOpenCall, 20},
    {refalrts::icAllocFunc, 0, 0, 21},
    {refalrts::icCopyEVar, 22, 5, 0},
    {refalrts::icAllocBracket, 0, refalrts::ibCloseCall, 24},
    {refalrts::icAllocBracket, 0, refalrts::ibCloseBracket, 25},
    {refalrts::icReinitChar, 0, ')', 0},
    {refalrts::icReinitBracket, 0, refalrts::ibCloseBracket, 4},
    {refalrts::icReinitChar, 0, ' ', 8},
    {refalrts::icLinkBrackets, 7, 25, 0},
    {refalrts::icPushStack, 0, 0, 24},
    {refalrts::icPushStack, 0, 0, 20},
    {refalrts::icLinkBrackets, 10, 4, 0},
    {refalrts::icPushStack, 0, 0, 1},
    {refalrts::icPushStack, 0, 0, 15},
    {refalrts::icSetResRightEdge, 0, 0, 0},
    {refalrts::icSpliceTile, 19, 25, 0},
    {refalrts::icSpliceTile, 0, 8, 0},
    {refalrts::icSpliceTile, 17, 18, 0},
    {refalrts::icSpliceTile, 9, 1, 0},
    {refalrts::icSpliceTile, 10, 16, 0},
    {refalrts::icReturnResult_NoTrash, 0, 0, 0},
    {refalrts::icEnd, 0, 0, 0}
  };
  int open_e_stack[1];
  refalrts::FnResult res = refalrts::interpret_array(
    raa, context, arg_begin, arg_end,
    functions, idents, numbers, strings, open_e_stack
  );
  return res;
#else
  // </0 & PrintMatchEmpty/4 (/7 e.Indent#1/5 )/8 s.BracketNumber#1/9 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  context[5] = 0;
  context[6] = 0;
  context[7] = refalrts::brackets_left( context[5], context[6], context[2], context[3] );
  if( ! context[7] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[7], context[8]);
  // closed e.Indent#1 as range 5
  if( ! refalrts::svar_left( context[9], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  if( ! refalrts::empty_seq( context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;

  refalrts::reset_allocator();
  //TRASH: {REMOVED TILE}  {REMOVED TILE}  {REMOVED TILE}  {REMOVED TILE} 
  //RESULT: Tile{ [[ } (/10 e.Indent#1/5/11"if( ! refalrts::empty_seq( "/13 </15 & ContextRange/16 Tile{ AsIs: s.BracketNumber#1/9 AsIs: >/1 }" ) "/17 Tile{ HalfReuse: ')'/0 HalfReuse: )/4 AsIs: (/7 AsIs: e.Indent#1/5 HalfReuse: ' '/8 } ' '/19 </20 & BreakerFromIndent/21 e.Indent#1/5/22 >/24 )/25 Tile{ ]] }
  if( ! refalrts::alloc_open_bracket( context[10] ) )
    return refalrts::cNoMemory;
  if (! refalrts::copy_evar(context[11], context[12], context[5], context[6]))
    return refalrts::cNoMemory;
  if( ! refalrts::alloc_chars( context[13], context[14], "if( ! refalrts::empty_seq( ", 27 ) )
    return refalrts::cNoMemory;
  if( ! refalrts::alloc_open_call( context[15] ) )
    return refalrts::cNoMemory;
  if( ! refalrts::alloc_name( context[16], ContextRange, "ContextRange" ) )
    return refalrts::cNoMemory;
  if( ! refalrts::alloc_chars( context[17], context[18], " ) ", 3 ) )
    return refalrts::cNoMemory;
  if( ! refalrts::alloc_char( context[19], ' ' ) )
    return refalrts::cNoMemory;
  if( ! refalrts::alloc_open_call( context[20] ) )
    return refalrts::cNoMemory;
  if( ! refalrts::alloc_name( context[21], BreakerFromIndent, "BreakerFromIndent" ) )
    return refalrts::cNoMemory;
  if (! refalrts::copy_evar(context[22], context[23], context[5], context[6]))
    return refalrts::cNoMemory;
  if( ! refalrts::alloc_close_call( context[24] ) )
    return refalrts::cNoMemory;
  if( ! refalrts::alloc_close_bracket( context[25] ) )
    return refalrts::cNoMemory;
  refalrts::reinit_char( context[0], ')' );
  refalrts::reinit_close_bracket( context[4] );
  refalrts::reinit_char( context[8], ' ' );
  refalrts::link_brackets( context[7], context[25] );
  refalrts::push_stack( context[24] );
  refalrts::push_stack( context[20] );
  refalrts::link_brackets( context[10], context[4] );
  refalrts::push_stack( context[1] );
  refalrts::push_stack( context[15] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = arg_end->next;
  res = refalrts::splice_evar( res, context[19], context[25] );
  res = refalrts::splice_evar( res, context[0], context[8] );
  res = refalrts::splice_evar( res, context[17], context[18] );
  res = refalrts::splice_evar( res, context[9], context[1] );
  res = refalrts::splice_evar( res, context[10], context[16] );
  refalrts::use( res );
  return refalrts::FnResult(refalrts::cSuccess | (__LINE__ << 8));
#endif
}

static refalrts::FnResult StrFromDirection(refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  refalrts::this_is_generated_function();
  // issue here memory for vars with 7 elems
  refalrts::Iter context[7];
  refalrts::zeros( context, 7 );
#ifdef INTERPRET
  using refalrts::functions;
  static const refalrts::RefalIdentifier idents[] = {
    & ident_AlgRight<int>::name,
    & ident_AlgLeft<int>::name
  };
  using refalrts::numbers;
  using refalrts::strings;
  static const refalrts::RASLCommand raa[] = {
    //FAST GEN:S 
    //GLOBAL GEN:S 
    // </0 & StrFromDirection/4 s.idx#0/5 >/1
    {refalrts::icInitB0_Lite, 0, 0, 0},
    {refalrts::icCallSaveLeft, 0, 2, 0},
    {refalrts::icsVarLeft, 0, 5, 2},
    {refalrts::icEmpty, 0, 0, 2},
    {refalrts::icOnFailGoTo, +7, 0, 0},
    //#AlgLeft
    // </0 & StrFromDirection/4 # AlgLeft/5 >/1
    {refalrts::icIdentTerm, 0, 1, 5},
    {refalrts::icEmptyResult, 0, 0, 0},
    //TRASH: {REMOVED TILE} 
    //RESULT: Tile{ [[ HalfReuse: 'l'/0 HalfReuse: 'e'/4 HalfReuse: 'f'/5 HalfReuse: 't'/1 ]] }
    {refalrts::icReinitChar, 0, 'l', 0},
    {refalrts::icReinitChar, 0, 'e', 4},
    {refalrts::icReinitChar, 0, 'f', 5},
    {refalrts::icReinitChar, 0, 't', 1},
    {refalrts::icReturnResult_NoTrash, 0, 0, 0},
    //#AlgRight
    // </0 & StrFromDirection/4 # AlgRight/5 >/1
    {refalrts::icIdentTerm, 0, 0, 5},
    {refalrts::icEmptyResult, 0, 0, 0},
    //TRASH: {REMOVED TILE}  {REMOVED TILE} 
    //RESULT: Tile{ [[ HalfReuse: 'r'/0 HalfReuse: 'i'/4 HalfReuse: 'g'/5 HalfReuse: 'h'/1 } 't'/6 Tile{ ]] }
    {refalrts::icAllocChar, 0, 't', 6},
    {refalrts::icReinitChar, 0, 'r', 0},
    {refalrts::icReinitChar, 0, 'i', 4},
    {refalrts::icReinitChar, 0, 'g', 5},
    {refalrts::icReinitChar, 0, 'h', 1},
    {refalrts::icSetResRightEdge, 0, 0, 0},
    {refalrts::icSpliceTile, 6, 6, 0},
    {refalrts::icReturnResult_NoTrash, 0, 0, 0},
    {refalrts::icEnd, 0, 0, 0}
  };
  int open_e_stack[1];
  refalrts::FnResult res = refalrts::interpret_array(
    raa, context, arg_begin, arg_end,
    functions, idents, numbers, strings, open_e_stack
  );
  return res;
#else
  //FAST GEN:S 
  //GLOBAL GEN:S 
  // </0 & StrFromDirection/4 s.idx#0/5 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  if( ! refalrts::svar_left( context[5], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  if( ! refalrts::empty_seq( context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  do {
    refalrts::start_sentence();
    //#AlgLeft
    // </0 & StrFromDirection/4 # AlgLeft/5 >/1
    if( ! refalrts::ident_term(  & ident_AlgLeft<int>::name, context[5] ) )
      continue;

    refalrts::reset_allocator();
    //TRASH: {REMOVED TILE} 
    //RESULT: Tile{ [[ HalfReuse: 'l'/0 HalfReuse: 'e'/4 HalfReuse: 'f'/5 HalfReuse: 't'/1 ]] }
    refalrts::reinit_char( context[0], 'l' );
    refalrts::reinit_char( context[4], 'e' );
    refalrts::reinit_char( context[5], 'f' );
    refalrts::reinit_char( context[1], 't' );
    return refalrts::FnResult(refalrts::cSuccess | (__LINE__ << 8));
  } while ( 0 );

  //#AlgRight
  // </0 & StrFromDirection/4 # AlgRight/5 >/1
  if( ! refalrts::ident_term(  & ident_AlgRight<int>::name, context[5] ) )
    return refalrts::cRecognitionImpossible;

  refalrts::reset_allocator();
  //TRASH: {REMOVED TILE}  {REMOVED TILE} 
  //RESULT: Tile{ [[ HalfReuse: 'r'/0 HalfReuse: 'i'/4 HalfReuse: 'g'/5 HalfReuse: 'h'/1 } 't'/6 Tile{ ]] }
  if( ! refalrts::alloc_char( context[6], 't' ) )
    return refalrts::cNoMemory;
  refalrts::reinit_char( context[0], 'r' );
  refalrts::reinit_char( context[4], 'i' );
  refalrts::reinit_char( context[5], 'g' );
  refalrts::reinit_char( context[1], 'h' );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = arg_end->next;
  res = refalrts::splice_evar( res, context[6], context[6] );
  refalrts::use( res );
  return refalrts::FnResult(refalrts::cSuccess | (__LINE__ << 8));
#endif
}

static refalrts::FnResult VarMatchFunction(refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  refalrts::this_is_generated_function();
  // issue here memory for vars with 6 elems
  refalrts::Iter context[6];
  refalrts::zeros( context, 6 );
#ifdef INTERPRET
  using refalrts::functions;
  using refalrts::idents;
  using refalrts::numbers;
  using refalrts::strings;
  static const refalrts::RASLCommand raa[] = {
    //FAST GEN:S 
    //GLOBAL GEN:S 
    // </0 & VarMatchFunction/4 s.idx#0/5 >/1
    {refalrts::icInitB0_Lite, 0, 0, 0},
    {refalrts::icCallSaveLeft, 0, 2, 0},
    {refalrts::icsVarLeft, 0, 5, 2},
    {refalrts::icEmpty, 0, 0, 2},
    {refalrts::icOnFailGoTo, +7, 0, 0},
    //'s'
    // </0 & VarMatchFunction/4 's'/5 >/1
    {refalrts::icCharTerm, 0, static_cast<unsigned char>('s'), 5},
    {refalrts::icEmptyResult, 0, 0, 0},
    //TRASH: {REMOVED TILE} 
    //RESULT: Tile{ [[ HalfReuse: 's'/0 HalfReuse: 'v'/4 Reuse: 'a'/5 HalfReuse: 'r'/1 ]] }
    {refalrts::icReinitChar, 0, 's', 0},
    {refalrts::icReinitChar, 0, 'v', 4},
    {refalrts::icUpdateChar, 0, 'a', 5},
    {refalrts::icReinitChar, 0, 'r', 1},
    {refalrts::icReturnResult_NoTrash, 0, 0, 0},
    //'t'
    // </0 & VarMatchFunction/4 't'/5 >/1
    {refalrts::icCharTerm, 0, static_cast<unsigned char>('t'), 5},
    {refalrts::icEmptyResult, 0, 0, 0},
    //TRASH: {REMOVED TILE} 
    //RESULT: Tile{ [[ HalfReuse: 't'/0 HalfReuse: 'v'/4 Reuse: 'a'/5 HalfReuse: 'r'/1 ]] }
    {refalrts::icReinitChar, 0, 't', 0},
    {refalrts::icReinitChar, 0, 'v', 4},
    {refalrts::icUpdateChar, 0, 'a', 5},
    {refalrts::icReinitChar, 0, 'r', 1},
    {refalrts::icReturnResult_NoTrash, 0, 0, 0},
    {refalrts::icEnd, 0, 0, 0}
  };
  int open_e_stack[1];
  refalrts::FnResult res = refalrts::interpret_array(
    raa, context, arg_begin, arg_end,
    functions, idents, numbers, strings, open_e_stack
  );
  return res;
#else
  //FAST GEN:S 
  //GLOBAL GEN:S 
  // </0 & VarMatchFunction/4 s.idx#0/5 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  if( ! refalrts::svar_left( context[5], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  if( ! refalrts::empty_seq( context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  do {
    refalrts::start_sentence();
    //'s'
    // </0 & VarMatchFunction/4 's'/5 >/1
    if( ! refalrts::char_term( 's', context[5] ) )
      continue;

    refalrts::reset_allocator();
    //TRASH: {REMOVED TILE} 
    //RESULT: Tile{ [[ HalfReuse: 's'/0 HalfReuse: 'v'/4 Reuse: 'a'/5 HalfReuse: 'r'/1 ]] }
    refalrts::reinit_char( context[0], 's' );
    refalrts::reinit_char( context[4], 'v' );
    refalrts::update_char( context[5], 'a' );
    refalrts::reinit_char( context[1], 'r' );
    return refalrts::FnResult(refalrts::cSuccess | (__LINE__ << 8));
  } while ( 0 );

  //'t'
  // </0 & VarMatchFunction/4 't'/5 >/1
  if( ! refalrts::char_term( 't', context[5] ) )
    return refalrts::cRecognitionImpossible;

  refalrts::reset_allocator();
  //TRASH: {REMOVED TILE} 
  //RESULT: Tile{ [[ HalfReuse: 't'/0 HalfReuse: 'v'/4 Reuse: 'a'/5 HalfReuse: 'r'/1 ]] }
  refalrts::reinit_char( context[0], 't' );
  refalrts::reinit_char( context[4], 'v' );
  refalrts::update_char( context[5], 'a' );
  refalrts::reinit_char( context[1], 'r' );
  return refalrts::FnResult(refalrts::cSuccess | (__LINE__ << 8));
#endif
}

static refalrts::FnResult PrintMatchSTVar(refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  refalrts::this_is_generated_function();
  // issue here memory for vars with 21 elems
  refalrts::Iter context[21];
  refalrts::zeros( context, 21 );
#ifdef INTERPRET
  static const refalrts::RefalFunction functions[] = {
    { PrintMatch, "PrintMatch" },
    { ContextItem, "ContextItem" },
    { VarMatchFunction, "VarMatchFunction" }
  };
  using refalrts::idents;
  using refalrts::numbers;
  using refalrts::strings;
  static const refalrts::RASLCommand raa[] = {
    // </0 & PrintMatchSTVar/4 (/7 e.Indent#1/5 )/8 s.Direction#1/9 s.BracketNumber#1/10 s.Mode#1/11 s.VarNumber#1/12 >/1
    {refalrts::icInitB0_Lite, 0, 0, 0},
    {refalrts::icCallSaveLeft, 0, 2, 0},
    {refalrts::icBracketLeftSave, 0, 5, 2},
    // closed e.Indent#1 as range 5
    {refalrts::icsVarLeft, 0, 9, 2},
    {refalrts::icsVarLeft, 0, 10, 2},
    {refalrts::icsVarLeft, 0, 11, 2},
    {refalrts::icsVarLeft, 0, 12, 2},
    {refalrts::icEmpty, 0, 0, 2},
    {refalrts::icEmptyResult, 0, 0, 0},
    //TRASH: {REMOVED TILE}  {REMOVED TILE}  {REMOVED TILE}  {REMOVED TILE} 
    //RESULT: Tile{ [[ AsIs: </0 Reuse: & PrintMatch/4 AsIs: (/7 AsIs: e.Indent#1/5 AsIs: )/8 AsIs: s.Direction#1/9 AsIs: s.BracketNumber#1/10 } (/13 </14 & VarMatchFunction/15 Tile{ AsIs: s.Mode#1/11 } >/16 )/17 </18 & ContextItem/19 Tile{ AsIs: s.VarNumber#1/12 AsIs: >/1 } >/20 Tile{ ]] }
    {refalrts::icAllocBracket, 0, refalrts::ibOpenBracket, 13},
    {refalrts::icAllocBracket, 0, refalrts::ibOpenCall, 14},
    {refalrts::icAllocFunc, 0, 2, 15},
    {refalrts::icAllocBracket, 0, refalrts::ibCloseCall, 16},
    {refalrts::icAllocBracket, 0, refalrts::ibCloseBracket, 17},
    {refalrts::icAllocBracket, 0, refalrts::ibOpenCall, 18},
    {refalrts::icAllocFunc, 0, 1, 19},
    {refalrts::icAllocBracket, 0, refalrts::ibCloseCall, 20},
    {refalrts::icUpdateFunc, 0, 0, 4},
    {refalrts::icPushStack, 0, 0, 20},
    {refalrts::icPushStack, 0, 0, 0},
    {refalrts::icPushStack, 0, 0, 1},
    {refalrts::icPushStack, 0, 0, 18},
    {refalrts::icLinkBrackets, 13, 17, 0},
    {refalrts::icPushStack, 0, 0, 16},
    {refalrts::icPushStack, 0, 0, 14},
    {refalrts::icLinkBrackets, 7, 8, 0},
    {refalrts::icSetResRightEdge, 0, 0, 0},
    {refalrts::icSpliceTile, 20, 20, 0},
    {refalrts::icSpliceTile, 12, 1, 0},
    {refalrts::icSpliceTile, 16, 19, 0},
    {refalrts::icSpliceTile, 11, 11, 0},
    {refalrts::icSpliceTile, 13, 15, 0},
    {refalrts::icReturnResult_NoTrash, 0, 0, 0},
    {refalrts::icEnd, 0, 0, 0}
  };
  int open_e_stack[1];
  refalrts::FnResult res = refalrts::interpret_array(
    raa, context, arg_begin, arg_end,
    functions, idents, numbers, strings, open_e_stack
  );
  return res;
#else
  // </0 & PrintMatchSTVar/4 (/7 e.Indent#1/5 )/8 s.Direction#1/9 s.BracketNumber#1/10 s.Mode#1/11 s.VarNumber#1/12 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  context[5] = 0;
  context[6] = 0;
  context[7] = refalrts::brackets_left( context[5], context[6], context[2], context[3] );
  if( ! context[7] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[7], context[8]);
  // closed e.Indent#1 as range 5
  if( ! refalrts::svar_left( context[9], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  if( ! refalrts::svar_left( context[10], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  if( ! refalrts::svar_left( context[11], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  if( ! refalrts::svar_left( context[12], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  if( ! refalrts::empty_seq( context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;

  refalrts::reset_allocator();
  //TRASH: {REMOVED TILE}  {REMOVED TILE}  {REMOVED TILE}  {REMOVED TILE} 
  //RESULT: Tile{ [[ AsIs: </0 Reuse: & PrintMatch/4 AsIs: (/7 AsIs: e.Indent#1/5 AsIs: )/8 AsIs: s.Direction#1/9 AsIs: s.BracketNumber#1/10 } (/13 </14 & VarMatchFunction/15 Tile{ AsIs: s.Mode#1/11 } >/16 )/17 </18 & ContextItem/19 Tile{ AsIs: s.VarNumber#1/12 AsIs: >/1 } >/20 Tile{ ]] }
  if( ! refalrts::alloc_open_bracket( context[13] ) )
    return refalrts::cNoMemory;
  if( ! refalrts::alloc_open_call( context[14] ) )
    return refalrts::cNoMemory;
  if( ! refalrts::alloc_name( context[15], VarMatchFunction, "VarMatchFunction" ) )
    return refalrts::cNoMemory;
  if( ! refalrts::alloc_close_call( context[16] ) )
    return refalrts::cNoMemory;
  if( ! refalrts::alloc_close_bracket( context[17] ) )
    return refalrts::cNoMemory;
  if( ! refalrts::alloc_open_call( context[18] ) )
    return refalrts::cNoMemory;
  if( ! refalrts::alloc_name( context[19], ContextItem, "ContextItem" ) )
    return refalrts::cNoMemory;
  if( ! refalrts::alloc_close_call( context[20] ) )
    return refalrts::cNoMemory;
  refalrts::update_name( context[4], PrintMatch, "PrintMatch" );
  refalrts::push_stack( context[20] );
  refalrts::push_stack( context[0] );
  refalrts::push_stack( context[1] );
  refalrts::push_stack( context[18] );
  refalrts::link_brackets( context[13], context[17] );
  refalrts::push_stack( context[16] );
  refalrts::push_stack( context[14] );
  refalrts::link_brackets( context[7], context[8] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = arg_end->next;
  res = refalrts::splice_evar( res, context[20], context[20] );
  res = refalrts::splice_evar( res, context[12], context[1] );
  res = refalrts::splice_evar( res, context[16], context[19] );
  res = refalrts::splice_evar( res, context[11], context[11] );
  res = refalrts::splice_evar( res, context[13], context[15] );
  refalrts::use( res );
  return refalrts::FnResult(refalrts::cSuccess | (__LINE__ << 8));
#endif
}

static refalrts::FnResult PrintMatchSTVarSave(refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  refalrts::this_is_generated_function();
  // issue here memory for vars with 25 elems
  refalrts::Iter context[25];
  refalrts::zeros( context, 25 );
#ifdef INTERPRET
  static const refalrts::RefalFunction functions[] = {
    { Inc, "Inc" },
    { PrintMatchSave, "PrintMatchSave" },
    { ContextItem, "ContextItem" },
    { VarMatchFunction, "VarMatchFunction" }
  };
  using refalrts::idents;
  using refalrts::numbers;
  using refalrts::strings;
  static const refalrts::RASLCommand raa[] = {
    // </0 & PrintMatchSTVarSave/4 (/7 e.Indent#1/5 )/8 s.Direction#1/9 s.BracketNumber#1/10 't'/11 s.VarNumber#1/12 >/1
    {refalrts::icInitB0_Lite, 0, 0, 0},
    {refalrts::icCallSaveLeft, 0, 2, 0},
    {refalrts::icBracketLeftSave, 0, 5, 2},
    // closed e.Indent#1 as range 5
    {refalrts::icsVarLeft, 0, 9, 2},
    {refalrts::icsVarLeft, 0, 10, 2},
    {refalrts::icCharLeftSave, 11, static_cast<unsigned char>('t'), 2},
    {refalrts::icsVarLeft, 0, 12, 2},
    {refalrts::icEmpty, 0, 0, 2},
    {refalrts::icEmptyResult, 0, 0, 0},
    //TRASH: {REMOVED TILE}  {REMOVED TILE}  {REMOVED TILE}  {REMOVED TILE} 
    //RESULT: Tile{ [[ AsIs: </0 Reuse: & PrintMatchSave/4 AsIs: (/7 AsIs: e.Indent#1/5 AsIs: )/8 } </13 Tile{ HalfReuse: & Inc/11 AsIs: s.VarNumber#1/12 AsIs: >/1 } Tile{ AsIs: s.Direction#1/9 AsIs: s.BracketNumber#1/10 } (/14 </15 & VarMatchFunction/16 't'/17 >/18 )/19 </20 & ContextItem/21 s.VarNumber#1/12/22 >/23 >/24 Tile{ ]] }
    {refalrts::icAllocBracket, 0, refalrts::ibOpenCall, 13},
    {refalrts::icAllocBracket, 0, refalrts::ibOpenBracket, 14},
    {refalrts::icAllocBracket, 0, refalrts::ibOpenCall, 15},
    {refalrts::icAllocFunc, 0, 3, 16},
    {refalrts::icAllocChar, 0, 't', 17},
    {refalrts::icAllocBracket, 0, refalrts::ibCloseCall, 18},
    {refalrts::icAllocBracket, 0, refalrts::ibCloseBracket, 19},
    {refalrts::icAllocBracket, 0, refalrts::ibOpenCall, 20},
    {refalrts::icAllocFunc, 0, 2, 21},
    {refalrts::icCopySTVar, 22, 12, 0},
    {refalrts::icAllocBracket, 0, refalrts::ibCloseCall, 23},
    {refalrts::icAllocBracket, 0, refalrts::ibCloseCall, 24},
    {refalrts::icUpdateFunc, 0, 1, 4},
    {refalrts::icReinitFunc, 0, 0, 11},
    {refalrts::icPushStack, 0, 0, 24},
    {refalrts::icPushStack, 0, 0, 0},
    {refalrts::icPushStack, 0, 0, 23},
    {refalrts::icPushStack, 0, 0, 20},
    {refalrts::icLinkBrackets, 14, 19, 0},
    {refalrts::icPushStack, 0, 0, 18},
    {refalrts::icPushStack, 0, 0, 15},
    {refalrts::icPushStack, 0, 0, 1},
    {refalrts::icPushStack, 0, 0, 13},
    {refalrts::icLinkBrackets, 7, 8, 0},
    {refalrts::icSetResRightEdge, 0, 0, 0},
    {refalrts::icSpliceTile, 14, 24, 0},
    {refalrts::icSpliceTile, 9, 10, 0},
    {refalrts::icSpliceTile, 11, 1, 0},
    {refalrts::icSpliceTile, 13, 13, 0},
    {refalrts::icReturnResult_NoTrash, 0, 0, 0},
    {refalrts::icEnd, 0, 0, 0}
  };
  int open_e_stack[1];
  refalrts::FnResult res = refalrts::interpret_array(
    raa, context, arg_begin, arg_end,
    functions, idents, numbers, strings, open_e_stack
  );
  return res;
#else
  // </0 & PrintMatchSTVarSave/4 (/7 e.Indent#1/5 )/8 s.Direction#1/9 s.BracketNumber#1/10 't'/11 s.VarNumber#1/12 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  context[5] = 0;
  context[6] = 0;
  context[7] = refalrts::brackets_left( context[5], context[6], context[2], context[3] );
  if( ! context[7] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[7], context[8]);
  // closed e.Indent#1 as range 5
  if( ! refalrts::svar_left( context[9], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  if( ! refalrts::svar_left( context[10], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  context[11] = refalrts::char_left( 't', context[2], context[3] );
  if( ! context[11] )
    return refalrts::cRecognitionImpossible;
  if( ! refalrts::svar_left( context[12], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  if( ! refalrts::empty_seq( context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;

  refalrts::reset_allocator();
  //TRASH: {REMOVED TILE}  {REMOVED TILE}  {REMOVED TILE}  {REMOVED TILE} 
  //RESULT: Tile{ [[ AsIs: </0 Reuse: & PrintMatchSave/4 AsIs: (/7 AsIs: e.Indent#1/5 AsIs: )/8 } </13 Tile{ HalfReuse: & Inc/11 AsIs: s.VarNumber#1/12 AsIs: >/1 } Tile{ AsIs: s.Direction#1/9 AsIs: s.BracketNumber#1/10 } (/14 </15 & VarMatchFunction/16 't'/17 >/18 )/19 </20 & ContextItem/21 s.VarNumber#1/12/22 >/23 >/24 Tile{ ]] }
  if( ! refalrts::alloc_open_call( context[13] ) )
    return refalrts::cNoMemory;
  if( ! refalrts::alloc_open_bracket( context[14] ) )
    return refalrts::cNoMemory;
  if( ! refalrts::alloc_open_call( context[15] ) )
    return refalrts::cNoMemory;
  if( ! refalrts::alloc_name( context[16], VarMatchFunction, "VarMatchFunction" ) )
    return refalrts::cNoMemory;
  if( ! refalrts::alloc_char( context[17], 't' ) )
    return refalrts::cNoMemory;
  if( ! refalrts::alloc_close_call( context[18] ) )
    return refalrts::cNoMemory;
  if( ! refalrts::alloc_close_bracket( context[19] ) )
    return refalrts::cNoMemory;
  if( ! refalrts::alloc_open_call( context[20] ) )
    return refalrts::cNoMemory;
  if( ! refalrts::alloc_name( context[21], ContextItem, "ContextItem" ) )
    return refalrts::cNoMemory;
  if (! refalrts::copy_stvar(context[22], context[12]))
    return refalrts::cNoMemory;
  if( ! refalrts::alloc_close_call( context[23] ) )
    return refalrts::cNoMemory;
  if( ! refalrts::alloc_close_call( context[24] ) )
    return refalrts::cNoMemory;
  refalrts::update_name( context[4], PrintMatchSave, "PrintMatchSave" );
  refalrts::reinit_name( context[11], Inc, "Inc" );
  refalrts::push_stack( context[24] );
  refalrts::push_stack( context[0] );
  refalrts::push_stack( context[23] );
  refalrts::push_stack( context[20] );
  refalrts::link_brackets( context[14], context[19] );
  refalrts::push_stack( context[18] );
  refalrts::push_stack( context[15] );
  refalrts::push_stack( context[1] );
  refalrts::push_stack( context[13] );
  refalrts::link_brackets( context[7], context[8] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = arg_end->next;
  res = refalrts::splice_evar( res, context[14], context[24] );
  res = refalrts::splice_evar( res, context[9], context[10] );
  res = refalrts::splice_evar( res, context[11], context[1] );
  res = refalrts::splice_evar( res, context[13], context[13] );
  refalrts::use( res );
  return refalrts::FnResult(refalrts::cSuccess | (__LINE__ << 8));
#endif
}

static refalrts::FnResult PrintMatchRepeated(refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  refalrts::this_is_generated_function();
  // issue here memory for vars with 34 elems
  refalrts::Iter context[34];
  refalrts::zeros( context, 34 );
#ifdef INTERPRET
  static const refalrts::RefalFunction functions[] = {
    { PrintMatch, "PrintMatch" },
    { ContextItem, "ContextItem" },
    { BreakerFromIndent, "BreakerFromIndent" },
    { ContextRange, "ContextRange" }
  };
  static const refalrts::RefalIdentifier idents[] = {
    & ident_AlgTerm<int>::name
  };
  using refalrts::numbers;
  static const refalrts::StringItem strings[] = {
    {", ", 2},
    {"repeated_stvar", 14},
    {" ) ", 3},
    {"if( ! refalrts::repeated_stvar_term( ", 37},
    {"repeated_evar", 13}
  };
  static const refalrts::RASLCommand raa[] = {
    //FAST GEN:(E )S S S S S 
    //GLOBAL GEN:(E )S S S S S 
    // </0 & PrintMatchRepeated/4 (/7 e.idxB#0/5 )/8 s.idxT#0/9 s.idxTV#0/10 s.idxTVV#0/11 s.idxTVVV#0/12 s.idxTVVVV#0/13 >/1
    {refalrts::icInitB0_Lite, 0, 0, 0},
    {refalrts::icCallSaveLeft, 0, 2, 0},
    {refalrts::icBracketLeftSave, 0, 5, 2},
    // closed e.idxB#0 as range 5
    {refalrts::icsVarLeft, 0, 9, 2},
    {refalrts::icsVarLeft, 0, 10, 2},
    {refalrts::icsVarLeft, 0, 11, 2},
    {refalrts::icsVarLeft, 0, 12, 2},
    {refalrts::icsVarLeft, 0, 13, 2},
    {refalrts::icEmpty, 0, 0, 2},
    {refalrts::icOnFailGoTo, +28, 0, 0},
    //(E )S S 'e'S S 
    // </0 & PrintMatchRepeated/4 (/7 e.Indent#1/5 )/8 s.Direction#1/9 s.BracketNumber#1/10 'e'/11 s.VarNumber#1/12 s.SampleNumber#1/13 >/1
    {refalrts::icCharTerm, 0, static_cast<unsigned char>('e'), 11},
    // closed e.Indent#1 as range 5
    {refalrts::icEmptyResult, 0, 0, 0},
    //TRASH: {REMOVED TILE}  {REMOVED TILE}  {REMOVED TILE}  {REMOVED TILE} 
    //RESULT: Tile{ [[ AsIs: </0 Reuse: & PrintMatch/4 AsIs: (/7 AsIs: e.Indent#1/5 AsIs: )/8 AsIs: s.Direction#1/9 AsIs: s.BracketNumber#1/10 HalfReuse: (/11 }"repeated_evar"/14 )/16 </17 & ContextRange/18 Tile{ AsIs: s.VarNumber#1/12 } >/19", "/20 </22 & ContextRange/23 Tile{ AsIs: s.SampleNumber#1/13 AsIs: >/1 } >/24 Tile{ ]] }
    {refalrts::icAllocString, 0, 4, 14},
    {refalrts::icAllocBracket, 0, refalrts::ibCloseBracket, 16},
    {refalrts::icAllocBracket, 0, refalrts::ibOpenCall, 17},
    {refalrts::icAllocFunc, 0, 3, 18},
    {refalrts::icAllocBracket, 0, refalrts::ibCloseCall, 19},
    {refalrts::icAllocString, 0, 0, 20},
    {refalrts::icAllocBracket, 0, refalrts::ibOpenCall, 22},
    {refalrts::icAllocFunc, 0, 3, 23},
    {refalrts::icAllocBracket, 0, refalrts::ibCloseCall, 24},
    {refalrts::icUpdateFunc, 0, 0, 4},
    {refalrts::icReinitBracket, 0, refalrts::ibOpenBracket, 11},
    {refalrts::icPushStack, 0, 0, 24},
    {refalrts::icPushStack, 0, 0, 0},
    {refalrts::icPushStack, 0, 0, 1},
    {refalrts::icPushStack, 0, 0, 22},
    {refalrts::icPushStack, 0, 0, 19},
    {refalrts::icPushStack, 0, 0, 17},
    {refalrts::icLinkBrackets, 11, 16, 0},
    {refalrts::icLinkBrackets, 7, 8, 0},
    {refalrts::icSetResRightEdge, 0, 0, 0},
    {refalrts::icSpliceTile, 24, 24, 0},
    {refalrts::icSpliceTile, 13, 1, 0},
    {refalrts::icSpliceTile, 19, 23, 0},
    {refalrts::icSpliceTile, 12, 12, 0},
    {refalrts::icSpliceTile, 14, 18, 0},
    {refalrts::icReturnResult_NoTrash, 0, 0, 0},
    {refalrts::icOnFailGoTo, +39, 0, 0},
    //(E )#AlgTermS S S S 
    // </0 & PrintMatchRepeated/4 (/7 e.Indent#1/5 )/8 # AlgTerm/9 s.BracketNumber#1/10 s.Mode#1/11 s.VarNumber#1/12 s.SampleNumber#1/13 >/1
    {refalrts::icIdentTerm, 0, 0, 9},
    // closed e.Indent#1 as range 5
    {refalrts::icEmptyResult, 0, 0, 0},
    //TRASH: {REMOVED TILE}  {REMOVED TILE}  s.BracketNumber#1/10 s.Mode#1/11 {REMOVED TILE}  {REMOVED TILE}  {REMOVED TILE} 
    //RESULT: Tile{ [[ } (/14 e.Indent#1/5/15"if( ! refalrts::repeated_stvar_term( "/17 </19 & ContextItem/20 Tile{ AsIs: s.VarNumber#1/12 } >/21", "/22 </24 & ContextItem/25 Tile{ AsIs: s.SampleNumber#1/13 AsIs: >/1 }" ) "/26 Tile{ HalfReuse: ')'/0 HalfReuse: )/4 AsIs: (/7 AsIs: e.Indent#1/5 HalfReuse: ' '/8 HalfReuse: ' '/9 } </28 & BreakerFromIndent/29 e.Indent#1/5/30 >/32 )/33 Tile{ ]] }
    {refalrts::icAllocBracket, 0, refalrts::ibOpenBracket, 14},
    {refalrts::icCopyEVar, 15, 5, 0},
    {refalrts::icAllocString, 0, 3, 17},
    {refalrts::icAllocBracket, 0, refalrts::ibOpenCall, 19},
    {refalrts::icAllocFunc, 0, 1, 20},
    {refalrts::icAllocBracket, 0, refalrts::ibCloseCall, 21},
    {refalrts::icAllocString, 0, 0, 22},
    {refalrts::icAllocBracket, 0, refalrts::ibOpenCall, 24},
    {refalrts::icAllocFunc, 0, 1, 25},
    {refalrts::icAllocString, 0, 2, 26},
    {refalrts::icAllocBracket, 0, refalrts::ibOpenCall, 28},
    {refalrts::icAllocFunc, 0, 2, 29},
    {refalrts::icCopyEVar, 30, 5, 0},
    {refalrts::icAllocBracket, 0, refalrts::ibCloseCall, 32},
    {refalrts::icAllocBracket, 0, refalrts::ibCloseBracket, 33},
    {refalrts::icReinitChar, 0, ')', 0},
    {refalrts::icReinitBracket, 0, refalrts::ibCloseBracket, 4},
    {refalrts::icReinitChar, 0, ' ', 8},
    {refalrts::icReinitChar, 0, ' ', 9},
    {refalrts::icLinkBrackets, 7, 33, 0},
    {refalrts::icPushStack, 0, 0, 32},
    {refalrts::icPushStack, 0, 0, 28},
    {refalrts::icLinkBrackets, 14, 4, 0},
    {refalrts::icPushStack, 0, 0, 1},
    {refalrts::icPushStack, 0, 0, 24},
    {refalrts::icPushStack, 0, 0, 21},
    {refalrts::icPushStack, 0, 0, 19},
    {refalrts::icSetResRightEdge, 0, 0, 0},
    {refalrts::icSpliceTile, 28, 33, 0},
    {refalrts::icSpliceTile, 0, 9, 0},
    {refalrts::icSpliceTile, 26, 27, 0},
    {refalrts::icSpliceTile, 13, 1, 0},
    {refalrts::icSpliceTile, 21, 25, 0},
    {refalrts::icSpliceTile, 12, 12, 0},
    {refalrts::icSpliceTile, 14, 20, 0},
    {refalrts::icTrashLeftEdge, 0, 0, 0},
    {refalrts::icReturnResult_NoTrash, 0, 0, 0},
    //(E )S S S S S 
    // </0 & PrintMatchRepeated/4 (/7 e.Indent#1/5 )/8 s.Direction#1/9 s.BracketNumber#1/10 s.Mode#1/11 s.VarNumber#1/12 s.SampleNumber#1/13 >/1
    // closed e.Indent#1 as range 5
    {refalrts::icEmptyResult, 0, 0, 0},
    //TRASH: {REMOVED TILE}  s.Mode#1/11 {REMOVED TILE}  {REMOVED TILE}  {REMOVED TILE} 
    //RESULT: Tile{ [[ AsIs: </0 Reuse: & PrintMatch/4 AsIs: (/7 AsIs: e.Indent#1/5 AsIs: )/8 AsIs: s.Direction#1/9 AsIs: s.BracketNumber#1/10 } (/14"repeated_stvar"/15 )/17 </18 & ContextItem/19 Tile{ AsIs: s.VarNumber#1/12 } >/20", "/21 </23 & ContextItem/24 Tile{ AsIs: s.SampleNumber#1/13 AsIs: >/1 } >/25 Tile{ ]] }
    {refalrts::icAllocBracket, 0, refalrts::ibOpenBracket, 14},
    {refalrts::icAllocString, 0, 1, 15},
    {refalrts::icAllocBracket, 0, refalrts::ibCloseBracket, 17},
    {refalrts::icAllocBracket, 0, refalrts::ibOpenCall, 18},
    {refalrts::icAllocFunc, 0, 1, 19},
    {refalrts::icAllocBracket, 0, refalrts::ibCloseCall, 20},
    {refalrts::icAllocString, 0, 0, 21},
    {refalrts::icAllocBracket, 0, refalrts::ibOpenCall, 23},
    {refalrts::icAllocFunc, 0, 1, 24},
    {refalrts::icAllocBracket, 0, refalrts::ibCloseCall, 25},
    {refalrts::icUpdateFunc, 0, 0, 4},
    {refalrts::icPushStack, 0, 0, 25},
    {refalrts::icPushStack, 0, 0, 0},
    {refalrts::icPushStack, 0, 0, 1},
    {refalrts::icPushStack, 0, 0, 23},
    {refalrts::icPushStack, 0, 0, 20},
    {refalrts::icPushStack, 0, 0, 18},
    {refalrts::icLinkBrackets, 14, 17, 0},
    {refalrts::icLinkBrackets, 7, 8, 0},
    {refalrts::icSetResRightEdge, 0, 0, 0},
    {refalrts::icSpliceTile, 25, 25, 0},
    {refalrts::icSpliceTile, 13, 1, 0},
    {refalrts::icSpliceTile, 20, 24, 0},
    {refalrts::icSpliceTile, 12, 12, 0},
    {refalrts::icSpliceTile, 14, 19, 0},
    {refalrts::icTrash, 0, 0, 10},
    {refalrts::icReturnResult_NoTrash, 0, 0, 0},
    {refalrts::icEnd, 0, 0, 0}
  };
  int open_e_stack[2];
  refalrts::FnResult res = refalrts::interpret_array(
    raa, context, arg_begin, arg_end,
    functions, idents, numbers, strings, open_e_stack
  );
  return res;
#else
  //FAST GEN:(E )S S S S S 
  //GLOBAL GEN:(E )S S S S S 
  // </0 & PrintMatchRepeated/4 (/7 e.idxB#0/5 )/8 s.idxT#0/9 s.idxTV#0/10 s.idxTVV#0/11 s.idxTVVV#0/12 s.idxTVVVV#0/13 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  context[5] = 0;
  context[6] = 0;
  context[7] = refalrts::brackets_left( context[5], context[6], context[2], context[3] );
  if( ! context[7] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[7], context[8]);
  // closed e.idxB#0 as range 5
  if( ! refalrts::svar_left( context[9], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  if( ! refalrts::svar_left( context[10], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  if( ! refalrts::svar_left( context[11], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  if( ! refalrts::svar_left( context[12], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  if( ! refalrts::svar_left( context[13], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  if( ! refalrts::empty_seq( context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  do {
    refalrts::start_sentence();
    //(E )S S 'e'S S 
    // </0 & PrintMatchRepeated/4 (/7 e.Indent#1/5 )/8 s.Direction#1/9 s.BracketNumber#1/10 'e'/11 s.VarNumber#1/12 s.SampleNumber#1/13 >/1
    if( ! refalrts::char_term( 'e', context[11] ) )
      continue;
    // closed e.Indent#1 as range 5

    refalrts::reset_allocator();
    //TRASH: {REMOVED TILE}  {REMOVED TILE}  {REMOVED TILE}  {REMOVED TILE} 
    //RESULT: Tile{ [[ AsIs: </0 Reuse: & PrintMatch/4 AsIs: (/7 AsIs: e.Indent#1/5 AsIs: )/8 AsIs: s.Direction#1/9 AsIs: s.BracketNumber#1/10 HalfReuse: (/11 }"repeated_evar"/14 )/16 </17 & ContextRange/18 Tile{ AsIs: s.VarNumber#1/12 } >/19", "/20 </22 & ContextRange/23 Tile{ AsIs: s.SampleNumber#1/13 AsIs: >/1 } >/24 Tile{ ]] }
    if( ! refalrts::alloc_chars( context[14], context[15], "repeated_evar", 13 ) )
      return refalrts::cNoMemory;
    if( ! refalrts::alloc_close_bracket( context[16] ) )
      return refalrts::cNoMemory;
    if( ! refalrts::alloc_open_call( context[17] ) )
      return refalrts::cNoMemory;
    if( ! refalrts::alloc_name( context[18], ContextRange, "ContextRange" ) )
      return refalrts::cNoMemory;
    if( ! refalrts::alloc_close_call( context[19] ) )
      return refalrts::cNoMemory;
    if( ! refalrts::alloc_chars( context[20], context[21], ", ", 2 ) )
      return refalrts::cNoMemory;
    if( ! refalrts::alloc_open_call( context[22] ) )
      return refalrts::cNoMemory;
    if( ! refalrts::alloc_name( context[23], ContextRange, "ContextRange" ) )
      return refalrts::cNoMemory;
    if( ! refalrts::alloc_close_call( context[24] ) )
      return refalrts::cNoMemory;
    refalrts::update_name( context[4], PrintMatch, "PrintMatch" );
    refalrts::reinit_open_bracket( context[11] );
    refalrts::push_stack( context[24] );
    refalrts::push_stack( context[0] );
    refalrts::push_stack( context[1] );
    refalrts::push_stack( context[22] );
    refalrts::push_stack( context[19] );
    refalrts::push_stack( context[17] );
    refalrts::link_brackets( context[11], context[16] );
    refalrts::link_brackets( context[7], context[8] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = arg_end->next;
    res = refalrts::splice_evar( res, context[24], context[24] );
    res = refalrts::splice_evar( res, context[13], context[1] );
    res = refalrts::splice_evar( res, context[19], context[23] );
    res = refalrts::splice_evar( res, context[12], context[12] );
    res = refalrts::splice_evar( res, context[14], context[18] );
    refalrts::use( res );
    return refalrts::FnResult(refalrts::cSuccess | (__LINE__ << 8));
  } while ( 0 );

  do {
    refalrts::start_sentence();
    //(E )#AlgTermS S S S 
    // </0 & PrintMatchRepeated/4 (/7 e.Indent#1/5 )/8 # AlgTerm/9 s.BracketNumber#1/10 s.Mode#1/11 s.VarNumber#1/12 s.SampleNumber#1/13 >/1
    if( ! refalrts::ident_term(  & ident_AlgTerm<int>::name, context[9] ) )
      continue;
    // closed e.Indent#1 as range 5

    refalrts::reset_allocator();
    //TRASH: {REMOVED TILE}  {REMOVED TILE}  s.BracketNumber#1/10 s.Mode#1/11 {REMOVED TILE}  {REMOVED TILE}  {REMOVED TILE} 
    //RESULT: Tile{ [[ } (/14 e.Indent#1/5/15"if( ! refalrts::repeated_stvar_term( "/17 </19 & ContextItem/20 Tile{ AsIs: s.VarNumber#1/12 } >/21", "/22 </24 & ContextItem/25 Tile{ AsIs: s.SampleNumber#1/13 AsIs: >/1 }" ) "/26 Tile{ HalfReuse: ')'/0 HalfReuse: )/4 AsIs: (/7 AsIs: e.Indent#1/5 HalfReuse: ' '/8 HalfReuse: ' '/9 } </28 & BreakerFromIndent/29 e.Indent#1/5/30 >/32 )/33 Tile{ ]] }
    if( ! refalrts::alloc_open_bracket( context[14] ) )
      return refalrts::cNoMemory;
    if (! refalrts::copy_evar(context[15], context[16], context[5], context[6]))
      return refalrts::cNoMemory;
    if( ! refalrts::alloc_chars( context[17], context[18], "if( ! refalrts::repeated_stvar_term( ", 37 ) )
      return refalrts::cNoMemory;
    if( ! refalrts::alloc_open_call( context[19] ) )
      return refalrts::cNoMemory;
    if( ! refalrts::alloc_name( context[20], ContextItem, "ContextItem" ) )
      return refalrts::cNoMemory;
    if( ! refalrts::alloc_close_call( context[21] ) )
      return refalrts::cNoMemory;
    if( ! refalrts::alloc_chars( context[22], context[23], ", ", 2 ) )
      return refalrts::cNoMemory;
    if( ! refalrts::alloc_open_call( context[24] ) )
      return refalrts::cNoMemory;
    if( ! refalrts::alloc_name( context[25], ContextItem, "ContextItem" ) )
      return refalrts::cNoMemory;
    if( ! refalrts::alloc_chars( context[26], context[27], " ) ", 3 ) )
      return refalrts::cNoMemory;
    if( ! refalrts::alloc_open_call( context[28] ) )
      return refalrts::cNoMemory;
    if( ! refalrts::alloc_name( context[29], BreakerFromIndent, "BreakerFromIndent" ) )
      return refalrts::cNoMemory;
    if (! refalrts::copy_evar(context[30], context[31], context[5], context[6]))
      return refalrts::cNoMemory;
    if( ! refalrts::alloc_close_call( context[32] ) )
      return refalrts::cNoMemory;
    if( ! refalrts::alloc_close_bracket( context[33] ) )
      return refalrts::cNoMemory;
    refalrts::reinit_char( context[0], ')' );
    refalrts::reinit_close_bracket( context[4] );
    refalrts::reinit_char( context[8], ' ' );
    refalrts::reinit_char( context[9], ' ' );
    refalrts::link_brackets( context[7], context[33] );
    refalrts::push_stack( context[32] );
    refalrts::push_stack( context[28] );
    refalrts::link_brackets( context[14], context[4] );
    refalrts::push_stack( context[1] );
    refalrts::push_stack( context[24] );
    refalrts::push_stack( context[21] );
    refalrts::push_stack( context[19] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = arg_end->next;
    res = refalrts::splice_evar( res, context[28], context[33] );
    res = refalrts::splice_evar( res, context[0], context[9] );
    res = refalrts::splice_evar( res, context[26], context[27] );
    res = refalrts::splice_evar( res, context[13], context[1] );
    res = refalrts::splice_evar( res, context[21], context[25] );
    res = refalrts::splice_evar( res, context[12], context[12] );
    res = refalrts::splice_evar( res, context[14], context[20] );
    refalrts::use( res );
    refalrts::splice_to_freelist_open( trash_prev, res );
    return refalrts::FnResult(refalrts::cSuccess | (__LINE__ << 8));
  } while ( 0 );

  //(E )S S S S S 
  // </0 & PrintMatchRepeated/4 (/7 e.Indent#1/5 )/8 s.Direction#1/9 s.BracketNumber#1/10 s.Mode#1/11 s.VarNumber#1/12 s.SampleNumber#1/13 >/1
  // closed e.Indent#1 as range 5

  refalrts::reset_allocator();
  //TRASH: {REMOVED TILE}  s.Mode#1/11 {REMOVED TILE}  {REMOVED TILE}  {REMOVED TILE} 
  //RESULT: Tile{ [[ AsIs: </0 Reuse: & PrintMatch/4 AsIs: (/7 AsIs: e.Indent#1/5 AsIs: )/8 AsIs: s.Direction#1/9 AsIs: s.BracketNumber#1/10 } (/14"repeated_stvar"/15 )/17 </18 & ContextItem/19 Tile{ AsIs: s.VarNumber#1/12 } >/20", "/21 </23 & ContextItem/24 Tile{ AsIs: s.SampleNumber#1/13 AsIs: >/1 } >/25 Tile{ ]] }
  if( ! refalrts::alloc_open_bracket( context[14] ) )
    return refalrts::cNoMemory;
  if( ! refalrts::alloc_chars( context[15], context[16], "repeated_stvar", 14 ) )
    return refalrts::cNoMemory;
  if( ! refalrts::alloc_close_bracket( context[17] ) )
    return refalrts::cNoMemory;
  if( ! refalrts::alloc_open_call( context[18] ) )
    return refalrts::cNoMemory;
  if( ! refalrts::alloc_name( context[19], ContextItem, "ContextItem" ) )
    return refalrts::cNoMemory;
  if( ! refalrts::alloc_close_call( context[20] ) )
    return refalrts::cNoMemory;
  if( ! refalrts::alloc_chars( context[21], context[22], ", ", 2 ) )
    return refalrts::cNoMemory;
  if( ! refalrts::alloc_open_call( context[23] ) )
    return refalrts::cNoMemory;
  if( ! refalrts::alloc_name( context[24], ContextItem, "ContextItem" ) )
    return refalrts::cNoMemory;
  if( ! refalrts::alloc_close_call( context[25] ) )
    return refalrts::cNoMemory;
  refalrts::update_name( context[4], PrintMatch, "PrintMatch" );
  refalrts::push_stack( context[25] );
  refalrts::push_stack( context[0] );
  refalrts::push_stack( context[1] );
  refalrts::push_stack( context[23] );
  refalrts::push_stack( context[20] );
  refalrts::push_stack( context[18] );
  refalrts::link_brackets( context[14], context[17] );
  refalrts::link_brackets( context[7], context[8] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = arg_end->next;
  res = refalrts::splice_evar( res, context[25], context[25] );
  res = refalrts::splice_evar( res, context[13], context[1] );
  res = refalrts::splice_evar( res, context[20], context[24] );
  res = refalrts::splice_evar( res, context[12], context[12] );
  res = refalrts::splice_evar( res, context[14], context[19] );
  refalrts::use( res );
  refalrts::splice_to_freelist_open( context[10], res );
  return refalrts::FnResult(refalrts::cSuccess | (__LINE__ << 8));
#endif
}

static refalrts::FnResult PrintMatchRepeatedSave(refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  refalrts::this_is_generated_function();
  // issue here memory for vars with 29 elems
  refalrts::Iter context[29];
  refalrts::zeros( context, 29 );
#ifdef INTERPRET
  static const refalrts::RefalFunction functions[] = {
    { PrintMatchRepeated, "PrintMatchRepeated" },
    { PrintMatchSave, "PrintMatchSave" },
    { ContextItem, "ContextItem" },
    { Inc, "Inc" }
  };
  using refalrts::idents;
  using refalrts::numbers;
  static const refalrts::StringItem strings[] = {
    {", ", 2},
    {"repeated_stvar", 14}
  };
  static const refalrts::RASLCommand raa[] = {
    //FAST GEN:(E )S S S S S 
    //GLOBAL GEN:(E )S S S S S 
    // </0 & PrintMatchRepeatedSave/4 (/7 e.idxB#0/5 )/8 s.idxT#0/9 s.idxTV#0/10 s.idxTVV#0/11 s.idxTVVV#0/12 s.idxTVVVV#0/13 >/1
    {refalrts::icInitB0_Lite, 0, 0, 0},
    {refalrts::icCallSaveLeft, 0, 2, 0},
    {refalrts::icBracketLeftSave, 0, 5, 2},
    // closed e.idxB#0 as range 5
    {refalrts::icsVarLeft, 0, 9, 2},
    {refalrts::icsVarLeft, 0, 10, 2},
    {refalrts::icsVarLeft, 0, 11, 2},
    {refalrts::icsVarLeft, 0, 12, 2},
    {refalrts::icsVarLeft, 0, 13, 2},
    {refalrts::icEmpty, 0, 0, 2},
    {refalrts::icOnFailGoTo, +36, 0, 0},
    //(E )S S 't'S S 
    // </0 & PrintMatchRepeatedSave/4 (/7 e.Indent#1/5 )/8 s.Direction#1/9 s.BracketNumber#1/10 't'/11 s.VarNumber#1/12 s.SampleNumber#1/13 >/1
    {refalrts::icCharTerm, 0, static_cast<unsigned char>('t'), 11},
    // closed e.Indent#1 as range 5
    {refalrts::icEmptyResult, 0, 0, 0},
    //TRASH: {REMOVED TILE}  {REMOVED TILE}  {REMOVED TILE}  {REMOVED TILE}  {REMOVED TILE} 
    //RESULT: Tile{ [[ AsIs: </0 Reuse: & PrintMatchSave/4 AsIs: (/7 AsIs: e.Indent#1/5 AsIs: )/8 } </14 & Inc/15 Tile{ AsIs: s.VarNumber#1/12 } >/16 Tile{ AsIs: s.Direction#1/9 AsIs: s.BracketNumber#1/10 HalfReuse: (/11 }"repeated_stvar"/17 )/19 </20 & ContextItem/21 s.VarNumber#1/12/22 >/23", "/24 </26 & ContextItem/27 Tile{ AsIs: s.SampleNumber#1/13 AsIs: >/1 } >/28 Tile{ ]] }
    {refalrts::icAllocBracket, 0, refalrts::ibOpenCall, 14},
    {refalrts::icAllocFunc, 0, 3, 15},
    {refalrts::icAllocBracket, 0, refalrts::ibCloseCall, 16},
    {refalrts::icAllocString, 0, 1, 17},
    {refalrts::icAllocBracket, 0, refalrts::ibCloseBracket, 19},
    {refalrts::icAllocBracket, 0, refalrts::ibOpenCall, 20},
    {refalrts::icAllocFunc, 0, 2, 21},
    {refalrts::icCopySTVar, 22, 12, 0},
    {refalrts::icAllocBracket, 0, refalrts::ibCloseCall, 23},
    {refalrts::icAllocString, 0, 0, 24},
    {refalrts::icAllocBracket, 0, refalrts::ibOpenCall, 26},
    {refalrts::icAllocFunc, 0, 2, 27},
    {refalrts::icAllocBracket, 0, refalrts::ibCloseCall, 28},
    {refalrts::icUpdateFunc, 0, 1, 4},
    {refalrts::icReinitBracket, 0, refalrts::ibOpenBracket, 11},
    {refalrts::icPushStack, 0, 0, 28},
    {refalrts::icPushStack, 0, 0, 0},
    {refalrts::icPushStack, 0, 0, 1},
    {refalrts::icPushStack, 0, 0, 26},
    {refalrts::icPushStack, 0, 0, 23},
    {refalrts::icPushStack, 0, 0, 20},
    {refalrts::icLinkBrackets, 11, 19, 0},
    {refalrts::icPushStack, 0, 0, 16},
    {refalrts::icPushStack, 0, 0, 14},
    {refalrts::icLinkBrackets, 7, 8, 0},
    {refalrts::icSetResRightEdge, 0, 0, 0},
    {refalrts::icSpliceTile, 28, 28, 0},
    {refalrts::icSpliceTile, 13, 1, 0},
    {refalrts::icSpliceTile, 17, 27, 0},
    {refalrts::icSpliceTile, 9, 11, 0},
    {refalrts::icSpliceTile, 16, 16, 0},
    {refalrts::icSpliceTile, 12, 12, 0},
    {refalrts::icSpliceTile, 14, 15, 0},
    {refalrts::icReturnResult_NoTrash, 0, 0, 0},
    //(E )S S S S S 
    // </0 & PrintMatchRepeatedSave/4 (/7 e.Indent#1/5 )/8 s.Direction#1/9 s.BracketNumber#1/10 s.Mode#1/11 s.VarNumber#1/12 s.SampleNumber#1/13 >/1
    // closed e.Indent#1 as range 5
    {refalrts::icEmptyResult, 0, 0, 0},
    //TRASH: {REMOVED TILE} 
    //RESULT: Tile{ [[ AsIs: </0 Reuse: & PrintMatchRepeated/4 AsIs: (/7 AsIs: e.Indent#1/5 AsIs: )/8 AsIs: s.Direction#1/9 AsIs: s.BracketNumber#1/10 AsIs: s.Mode#1/11 AsIs: s.VarNumber#1/12 AsIs: s.SampleNumber#1/13 AsIs: >/1 ]] }
    {refalrts::icUpdateFunc, 0, 0, 4},
    {refalrts::icPushStack, 0, 0, 1},
    {refalrts::icPushStack, 0, 0, 0},
    {refalrts::icLinkBrackets, 7, 8, 0},
    {refalrts::icReturnResult_NoTrash, 0, 0, 0},
    {refalrts::icEnd, 0, 0, 0}
  };
  int open_e_stack[1];
  refalrts::FnResult res = refalrts::interpret_array(
    raa, context, arg_begin, arg_end,
    functions, idents, numbers, strings, open_e_stack
  );
  return res;
#else
  //FAST GEN:(E )S S S S S 
  //GLOBAL GEN:(E )S S S S S 
  // </0 & PrintMatchRepeatedSave/4 (/7 e.idxB#0/5 )/8 s.idxT#0/9 s.idxTV#0/10 s.idxTVV#0/11 s.idxTVVV#0/12 s.idxTVVVV#0/13 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  context[5] = 0;
  context[6] = 0;
  context[7] = refalrts::brackets_left( context[5], context[6], context[2], context[3] );
  if( ! context[7] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[7], context[8]);
  // closed e.idxB#0 as range 5
  if( ! refalrts::svar_left( context[9], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  if( ! refalrts::svar_left( context[10], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  if( ! refalrts::svar_left( context[11], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  if( ! refalrts::svar_left( context[12], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  if( ! refalrts::svar_left( context[13], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  if( ! refalrts::empty_seq( context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  do {
    refalrts::start_sentence();
    //(E )S S 't'S S 
    // </0 & PrintMatchRepeatedSave/4 (/7 e.Indent#1/5 )/8 s.Direction#1/9 s.BracketNumber#1/10 't'/11 s.VarNumber#1/12 s.SampleNumber#1/13 >/1
    if( ! refalrts::char_term( 't', context[11] ) )
      continue;
    // closed e.Indent#1 as range 5

    refalrts::reset_allocator();
    //TRASH: {REMOVED TILE}  {REMOVED TILE}  {REMOVED TILE}  {REMOVED TILE}  {REMOVED TILE} 
    //RESULT: Tile{ [[ AsIs: </0 Reuse: & PrintMatchSave/4 AsIs: (/7 AsIs: e.Indent#1/5 AsIs: )/8 } </14 & Inc/15 Tile{ AsIs: s.VarNumber#1/12 } >/16 Tile{ AsIs: s.Direction#1/9 AsIs: s.BracketNumber#1/10 HalfReuse: (/11 }"repeated_stvar"/17 )/19 </20 & ContextItem/21 s.VarNumber#1/12/22 >/23", "/24 </26 & ContextItem/27 Tile{ AsIs: s.SampleNumber#1/13 AsIs: >/1 } >/28 Tile{ ]] }
    if( ! refalrts::alloc_open_call( context[14] ) )
      return refalrts::cNoMemory;
    if( ! refalrts::alloc_name( context[15], Inc, "Inc" ) )
      return refalrts::cNoMemory;
    if( ! refalrts::alloc_close_call( context[16] ) )
      return refalrts::cNoMemory;
    if( ! refalrts::alloc_chars( context[17], context[18], "repeated_stvar", 14 ) )
      return refalrts::cNoMemory;
    if( ! refalrts::alloc_close_bracket( context[19] ) )
      return refalrts::cNoMemory;
    if( ! refalrts::alloc_open_call( context[20] ) )
      return refalrts::cNoMemory;
    if( ! refalrts::alloc_name( context[21], ContextItem, "ContextItem" ) )
      return refalrts::cNoMemory;
    if (! refalrts::copy_stvar(context[22], context[12]))
      return refalrts::cNoMemory;
    if( ! refalrts::alloc_close_call( context[23] ) )
      return refalrts::cNoMemory;
    if( ! refalrts::alloc_chars( context[24], context[25], ", ", 2 ) )
      return refalrts::cNoMemory;
    if( ! refalrts::alloc_open_call( context[26] ) )
      return refalrts::cNoMemory;
    if( ! refalrts::alloc_name( context[27], ContextItem, "ContextItem" ) )
      return refalrts::cNoMemory;
    if( ! refalrts::alloc_close_call( context[28] ) )
      return refalrts::cNoMemory;
    refalrts::update_name( context[4], PrintMatchSave, "PrintMatchSave" );
    refalrts::reinit_open_bracket( context[11] );
    refalrts::push_stack( context[28] );
    refalrts::push_stack( context[0] );
    refalrts::push_stack( context[1] );
    refalrts::push_stack( context[26] );
    refalrts::push_stack( context[23] );
    refalrts::push_stack( context[20] );
    refalrts::link_brackets( context[11], context[19] );
    refalrts::push_stack( context[16] );
    refalrts::push_stack( context[14] );
    refalrts::link_brackets( context[7], context[8] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = arg_end->next;
    res = refalrts::splice_evar( res, context[28], context[28] );
    res = refalrts::splice_evar( res, context[13], context[1] );
    res = refalrts::splice_evar( res, context[17], context[27] );
    res = refalrts::splice_evar( res, context[9], context[11] );
    res = refalrts::splice_evar( res, context[16], context[16] );
    res = refalrts::splice_evar( res, context[12], context[12] );
    res = refalrts::splice_evar( res, context[14], context[15] );
    refalrts::use( res );
    return refalrts::FnResult(refalrts::cSuccess | (__LINE__ << 8));
  } while ( 0 );

  //(E )S S S S S 
  // </0 & PrintMatchRepeatedSave/4 (/7 e.Indent#1/5 )/8 s.Direction#1/9 s.BracketNumber#1/10 s.Mode#1/11 s.VarNumber#1/12 s.SampleNumber#1/13 >/1
  // closed e.Indent#1 as range 5

  refalrts::reset_allocator();
  //TRASH: {REMOVED TILE} 
  //RESULT: Tile{ [[ AsIs: </0 Reuse: & PrintMatchRepeated/4 AsIs: (/7 AsIs: e.Indent#1/5 AsIs: )/8 AsIs: s.Direction#1/9 AsIs: s.BracketNumber#1/10 AsIs: s.Mode#1/11 AsIs: s.VarNumber#1/12 AsIs: s.SampleNumber#1/13 AsIs: >/1 ]] }
  refalrts::update_name( context[4], PrintMatchRepeated, "PrintMatchRepeated" );
  refalrts::push_stack( context[1] );
  refalrts::push_stack( context[0] );
  refalrts::link_brackets( context[7], context[8] );
  return refalrts::FnResult(refalrts::cSuccess | (__LINE__ << 8));
#endif
}

static refalrts::FnResult PrintMatch(refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  refalrts::this_is_generated_function();
  // issue here memory for vars with 38 elems
  refalrts::Iter context[38];
  refalrts::zeros( context, 38 );
#ifdef INTERPRET
  static const refalrts::RefalFunction functions[] = {
    { BreakerFromIndent, "BreakerFromIndent" },
    { ContextRange, "ContextRange" },
    { StrFromDirection, "StrFromDirection" },
    { ContextItem, "ContextItem" }
  };
  static const refalrts::RefalIdentifier idents[] = {
    & ident_AlgTerm<int>::name
  };
  using refalrts::numbers;
  static const refalrts::StringItem strings[] = {
    {" ) ", 3},
    {", ", 2},
    {"( ", 2},
    {"if( ! refalrts:", 15},
    {"term( ", 6}
  };
  static const refalrts::RASLCommand raa[] = {
    //FAST GEN:(E )S S (E )E 
    //GLOBAL GEN:(E )S S (E )E 
    // </0 & PrintMatch/4 (/7 e.idxB#0/5 )/8 s.idxT#0/9 s.idxTV#0/10 (/13 e.idxTVVB#0/11 )/14 e.idxTVVT#0/2 >/1
    {refalrts::icInitB0_Lite, 0, 0, 0},
    {refalrts::icCallSaveLeft, 0, 2, 0},
    {refalrts::icBracketLeftSave, 0, 5, 2},
    // closed e.idxB#0 as range 5
    {refalrts::icsVarLeft, 0, 9, 2},
    {refalrts::icsVarLeft, 0, 10, 2},
    {refalrts::icBracketLeftSave, 0, 11, 2},
    // closed e.idxTVVB#0 as range 11
    // closed e.idxTVVT#0 as range 2
    {refalrts::icOnFailGoTo, +39, 0, 0},
    //(E )#AlgTermS (E )E 
    // </0 & PrintMatch/4 (/7 e.Indent#1/5 )/8 # AlgTerm/9 s.Offset#1/10 (/13 e.Function#1/11 )/14 e.TextRep#1/2 >/1
    {refalrts::icIdentTerm, 0, 0, 9},
    // closed e.Indent#1 as range 5
    // closed e.Function#1 as range 11
    // closed e.TextRep#1 as range 2
    {refalrts::icEmptyResult, 0, 0, 0},
    //TRASH: {REMOVED TILE}  {REMOVED TILE}  {REMOVED TILE}  {REMOVED TILE}  {REMOVED TILE}  {REMOVED TILE} 
    //RESULT: Tile{ [[ } (/15 e.Indent#1/5/16"if( ! refalrts:"/18 Tile{ HalfReuse: ':'/13 AsIs: e.Function#1/11 HalfReuse: '_'/14 }"term( "/20 Tile{ AsIs: e.TextRep#1/2 }", "/22 </24 & ContextItem/25 Tile{ AsIs: s.Offset#1/10 } >/26" ) "/27 Tile{ HalfReuse: ')'/0 HalfReuse: )/4 AsIs: (/7 AsIs: e.Indent#1/5 HalfReuse: ' '/8 HalfReuse: ' '/9 } </29 & BreakerFromIndent/30 e.Indent#1/5/31 >/33 Tile{ HalfReuse: )/1 ]] }
    {refalrts::icAllocBracket, 0, refalrts::ibOpenBracket, 15},
    {refalrts::icCopyEVar, 16, 5, 0},
    {refalrts::icAllocString, 0, 3, 18},
    {refalrts::icAllocString, 0, 4, 20},
    {refalrts::icAllocString, 0, 1, 22},
    {refalrts::icAllocBracket, 0, refalrts::ibOpenCall, 24},
    {refalrts::icAllocFunc, 0, 3, 25},
    {refalrts::icAllocBracket, 0, refalrts::ibCloseCall, 26},
    {refalrts::icAllocString, 0, 0, 27},
    {refalrts::icAllocBracket, 0, refalrts::ibOpenCall, 29},
    {refalrts::icAllocFunc, 0, 0, 30},
    {refalrts::icCopyEVar, 31, 5, 0},
    {refalrts::icAllocBracket, 0, refalrts::ibCloseCall, 33},
    {refalrts::icReinitChar, 0, ':', 13},
    {refalrts::icReinitChar, 0, '_', 14},
    {refalrts::icReinitChar, 0, ')', 0},
    {refalrts::icReinitBracket, 0, refalrts::ibCloseBracket, 4},
    {refalrts::icReinitChar, 0, ' ', 8},
    {refalrts::icReinitChar, 0, ' ', 9},
    {refalrts::icReinitBracket, 0, refalrts::ibCloseBracket, 1},
    {refalrts::icLinkBrackets, 7, 1, 0},
    {refalrts::icPushStack, 0, 0, 33},
    {refalrts::icPushStack, 0, 0, 29},
    {refalrts::icLinkBrackets, 15, 4, 0},
    {refalrts::icPushStack, 0, 0, 26},
    {refalrts::icPushStack, 0, 0, 24},
    {refalrts::icSetRes, 0, 0, 1},
    {refalrts::icSpliceTile, 29, 33, 0},
    {refalrts::icSpliceTile, 0, 9, 0},
    {refalrts::icSpliceTile, 26, 28, 0},
    {refalrts::icSpliceTile, 10, 10, 0},
    {refalrts::icSpliceTile, 22, 25, 0},
    {refalrts::icSpliceEVar, 0, 0, 2},
    {refalrts::icSpliceTile, 20, 21, 0},
    {refalrts::icSpliceTile, 13, 14, 0},
    {refalrts::icSpliceTile, 15, 19, 0},
    {refalrts::icReturnResult_NoTrash, 0, 0, 0},
    //(E )S S (E )E 
    // </0 & PrintMatch/4 (/7 e.Indent#1/5 )/8 s.Direction#1/9 s.BracketNumber#1/10 (/13 e.Function#1/11 )/14 e.TextRep#1/2 >/1
    // closed e.Indent#1 as range 5
    // closed e.Function#1 as range 11
    // closed e.TextRep#1 as range 2
    {refalrts::icEmptyResult, 0, 0, 0},
    //TRASH: {REMOVED TILE}  {REMOVED TILE}  {REMOVED TILE}  {REMOVED TILE}  {REMOVED TILE}  {REMOVED TILE}  {REMOVED TILE} 
    //RESULT: Tile{ [[ } (/15 e.Indent#1/5/16"if( ! refalrts:"/18 Tile{ HalfReuse: ':'/13 AsIs: e.Function#1/11 HalfReuse: '_'/14 } </20 & StrFromDirection/21 Tile{ AsIs: s.Direction#1/9 } >/22"( "/23 Tile{ AsIs: e.TextRep#1/2 }", "/25 </27 & ContextRange/28 Tile{ AsIs: s.BracketNumber#1/10 } >/29" ) "/30 Tile{ HalfReuse: ')'/0 HalfReuse: )/4 AsIs: (/7 AsIs: e.Indent#1/5 HalfReuse: ' '/8 } ' '/32 </33 & BreakerFromIndent/34 e.Indent#1/5/35 >/37 Tile{ HalfReuse: )/1 ]] }
    {refalrts::icAllocBracket, 0, refalrts::ibOpenBracket, 15},
    {refalrts::icCopyEVar, 16, 5, 0},
    {refalrts::icAllocString, 0, 3, 18},
    {refalrts::icAllocBracket, 0, refalrts::ibOpenCall, 20},
    {refalrts::icAllocFunc, 0, 2, 21},
    {refalrts::icAllocBracket, 0, refalrts::ibCloseCall, 22},
    {refalrts::icAllocString, 0, 2, 23},
    {refalrts::icAllocString, 0, 1, 25},
    {refalrts::icAllocBracket, 0, refalrts::ibOpenCall, 27},
    {refalrts::icAllocFunc, 0, 1, 28},
    {refalrts::icAllocBracket, 0, refalrts::ibCloseCall, 29},
    {refalrts::icAllocString, 0, 0, 30},
    {refalrts::icAllocChar, 0, ' ', 32},
    {refalrts::icAllocBracket, 0, refalrts::ibOpenCall, 33},
    {refalrts::icAllocFunc, 0, 0, 34},
    {refalrts::icCopyEVar, 35, 5, 0},
    {refalrts::icAllocBracket, 0, refalrts::ibCloseCall, 37},
    {refalrts::icReinitChar, 0, ':', 13},
    {refalrts::icReinitChar, 0, '_', 14},
    {refalrts::icReinitChar, 0, ')', 0},
    {refalrts::icReinitBracket, 0, refalrts::ibCloseBracket, 4},
    {refalrts::icReinitChar, 0, ' ', 8},
    {refalrts::icReinitBracket, 0, refalrts::ibCloseBracket, 1},
    {refalrts::icLinkBrackets, 7, 1, 0},
    {refalrts::icPushStack, 0, 0, 37},
    {refalrts::icPushStack, 0, 0, 33},
    {refalrts::icLinkBrackets, 15, 4, 0},
    {refalrts::icPushStack, 0, 0, 29},
    {refalrts::icPushStack, 0, 0, 27},
    {refalrts::icPushStack, 0, 0, 22},
    {refalrts::icPushStack, 0, 0, 20},
    {refalrts::icSetRes, 0, 0, 1},
    {refalrts::icSpliceTile, 32, 37, 0},
    {refalrts::icSpliceTile, 0, 8, 0},
    {refalrts::icSpliceTile, 29, 31, 0},
    {refalrts::icSpliceTile, 10, 10, 0},
    {refalrts::icSpliceTile, 25, 28, 0},
    {refalrts::icSpliceEVar, 0, 0, 2},
    {refalrts::icSpliceTile, 22, 24, 0},
    {refalrts::icSpliceTile, 9, 9, 0},
    {refalrts::icSpliceTile, 20, 21, 0},
    {refalrts::icSpliceTile, 13, 14, 0},
    {refalrts::icSpliceTile, 15, 19, 0},
    {refalrts::icReturnResult_NoTrash, 0, 0, 0},
    {refalrts::icEnd, 0, 0, 0}
  };
  int open_e_stack[1];
  refalrts::FnResult res = refalrts::interpret_array(
    raa, context, arg_begin, arg_end,
    functions, idents, numbers, strings, open_e_stack
  );
  return res;
#else
  //FAST GEN:(E )S S (E )E 
  //GLOBAL GEN:(E )S S (E )E 
  // </0 & PrintMatch/4 (/7 e.idxB#0/5 )/8 s.idxT#0/9 s.idxTV#0/10 (/13 e.idxTVVB#0/11 )/14 e.idxTVVT#0/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  context[5] = 0;
  context[6] = 0;
  context[7] = refalrts::brackets_left( context[5], context[6], context[2], context[3] );
  if( ! context[7] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[7], context[8]);
  // closed e.idxB#0 as range 5
  if( ! refalrts::svar_left( context[9], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  if( ! refalrts::svar_left( context[10], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  context[11] = 0;
  context[12] = 0;
  context[13] = refalrts::brackets_left( context[11], context[12], context[2], context[3] );
  if( ! context[13] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[13], context[14]);
  // closed e.idxTVVB#0 as range 11
  // closed e.idxTVVT#0 as range 2
  do {
    refalrts::start_sentence();
    //(E )#AlgTermS (E )E 
    // </0 & PrintMatch/4 (/7 e.Indent#1/5 )/8 # AlgTerm/9 s.Offset#1/10 (/13 e.Function#1/11 )/14 e.TextRep#1/2 >/1
    if( ! refalrts::ident_term(  & ident_AlgTerm<int>::name, context[9] ) )
      continue;
    // closed e.Indent#1 as range 5
    // closed e.Function#1 as range 11
    // closed e.TextRep#1 as range 2

    refalrts::reset_allocator();
    //TRASH: {REMOVED TILE}  {REMOVED TILE}  {REMOVED TILE}  {REMOVED TILE}  {REMOVED TILE}  {REMOVED TILE} 
    //RESULT: Tile{ [[ } (/15 e.Indent#1/5/16"if( ! refalrts:"/18 Tile{ HalfReuse: ':'/13 AsIs: e.Function#1/11 HalfReuse: '_'/14 }"term( "/20 Tile{ AsIs: e.TextRep#1/2 }", "/22 </24 & ContextItem/25 Tile{ AsIs: s.Offset#1/10 } >/26" ) "/27 Tile{ HalfReuse: ')'/0 HalfReuse: )/4 AsIs: (/7 AsIs: e.Indent#1/5 HalfReuse: ' '/8 HalfReuse: ' '/9 } </29 & BreakerFromIndent/30 e.Indent#1/5/31 >/33 Tile{ HalfReuse: )/1 ]] }
    if( ! refalrts::alloc_open_bracket( context[15] ) )
      return refalrts::cNoMemory;
    if (! refalrts::copy_evar(context[16], context[17], context[5], context[6]))
      return refalrts::cNoMemory;
    if( ! refalrts::alloc_chars( context[18], context[19], "if( ! refalrts:", 15 ) )
      return refalrts::cNoMemory;
    if( ! refalrts::alloc_chars( context[20], context[21], "term( ", 6 ) )
      return refalrts::cNoMemory;
    if( ! refalrts::alloc_chars( context[22], context[23], ", ", 2 ) )
      return refalrts::cNoMemory;
    if( ! refalrts::alloc_open_call( context[24] ) )
      return refalrts::cNoMemory;
    if( ! refalrts::alloc_name( context[25], ContextItem, "ContextItem" ) )
      return refalrts::cNoMemory;
    if( ! refalrts::alloc_close_call( context[26] ) )
      return refalrts::cNoMemory;
    if( ! refalrts::alloc_chars( context[27], context[28], " ) ", 3 ) )
      return refalrts::cNoMemory;
    if( ! refalrts::alloc_open_call( context[29] ) )
      return refalrts::cNoMemory;
    if( ! refalrts::alloc_name( context[30], BreakerFromIndent, "BreakerFromIndent" ) )
      return refalrts::cNoMemory;
    if (! refalrts::copy_evar(context[31], context[32], context[5], context[6]))
      return refalrts::cNoMemory;
    if( ! refalrts::alloc_close_call( context[33] ) )
      return refalrts::cNoMemory;
    refalrts::reinit_char( context[13], ':' );
    refalrts::reinit_char( context[14], '_' );
    refalrts::reinit_char( context[0], ')' );
    refalrts::reinit_close_bracket( context[4] );
    refalrts::reinit_char( context[8], ' ' );
    refalrts::reinit_char( context[9], ' ' );
    refalrts::reinit_close_bracket( context[1] );
    refalrts::link_brackets( context[7], context[1] );
    refalrts::push_stack( context[33] );
    refalrts::push_stack( context[29] );
    refalrts::link_brackets( context[15], context[4] );
    refalrts::push_stack( context[26] );
    refalrts::push_stack( context[24] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    res = refalrts::splice_evar( res, context[29], context[33] );
    res = refalrts::splice_evar( res, context[0], context[9] );
    res = refalrts::splice_evar( res, context[26], context[28] );
    res = refalrts::splice_evar( res, context[10], context[10] );
    res = refalrts::splice_evar( res, context[22], context[25] );
    res = refalrts::splice_evar( res, context[2], context[3] );
    res = refalrts::splice_evar( res, context[20], context[21] );
    res = refalrts::splice_evar( res, context[13], context[14] );
    res = refalrts::splice_evar( res, context[15], context[19] );
    refalrts::use( res );
    return refalrts::FnResult(refalrts::cSuccess | (__LINE__ << 8));
  } while ( 0 );

  //(E )S S (E )E 
  // </0 & PrintMatch/4 (/7 e.Indent#1/5 )/8 s.Direction#1/9 s.BracketNumber#1/10 (/13 e.Function#1/11 )/14 e.TextRep#1/2 >/1
  // closed e.Indent#1 as range 5
  // closed e.Function#1 as range 11
  // closed e.TextRep#1 as range 2

  refalrts::reset_allocator();
  //TRASH: {REMOVED TILE}  {REMOVED TILE}  {REMOVED TILE}  {REMOVED TILE}  {REMOVED TILE}  {REMOVED TILE}  {REMOVED TILE} 
  //RESULT: Tile{ [[ } (/15 e.Indent#1/5/16"if( ! refalrts:"/18 Tile{ HalfReuse: ':'/13 AsIs: e.Function#1/11 HalfReuse: '_'/14 } </20 & StrFromDirection/21 Tile{ AsIs: s.Direction#1/9 } >/22"( "/23 Tile{ AsIs: e.TextRep#1/2 }", "/25 </27 & ContextRange/28 Tile{ AsIs: s.BracketNumber#1/10 } >/29" ) "/30 Tile{ HalfReuse: ')'/0 HalfReuse: )/4 AsIs: (/7 AsIs: e.Indent#1/5 HalfReuse: ' '/8 } ' '/32 </33 & BreakerFromIndent/34 e.Indent#1/5/35 >/37 Tile{ HalfReuse: )/1 ]] }
  if( ! refalrts::alloc_open_bracket( context[15] ) )
    return refalrts::cNoMemory;
  if (! refalrts::copy_evar(context[16], context[17], context[5], context[6]))
    return refalrts::cNoMemory;
  if( ! refalrts::alloc_chars( context[18], context[19], "if( ! refalrts:", 15 ) )
    return refalrts::cNoMemory;
  if( ! refalrts::alloc_open_call( context[20] ) )
    return refalrts::cNoMemory;
  if( ! refalrts::alloc_name( context[21], StrFromDirection, "StrFromDirection" ) )
    return refalrts::cNoMemory;
  if( ! refalrts::alloc_close_call( context[22] ) )
    return refalrts::cNoMemory;
  if( ! refalrts::alloc_chars( context[23], context[24], "( ", 2 ) )
    return refalrts::cNoMemory;
  if( ! refalrts::alloc_chars( context[25], context[26], ", ", 2 ) )
    return refalrts::cNoMemory;
  if( ! refalrts::alloc_open_call( context[27] ) )
    return refalrts::cNoMemory;
  if( ! refalrts::alloc_name( context[28], ContextRange, "ContextRange" ) )
    return refalrts::cNoMemory;
  if( ! refalrts::alloc_close_call( context[29] ) )
    return refalrts::cNoMemory;
  if( ! refalrts::alloc_chars( context[30], context[31], " ) ", 3 ) )
    return refalrts::cNoMemory;
  if( ! refalrts::alloc_char( context[32], ' ' ) )
    return refalrts::cNoMemory;
  if( ! refalrts::alloc_open_call( context[33] ) )
    return refalrts::cNoMemory;
  if( ! refalrts::alloc_name( context[34], BreakerFromIndent, "BreakerFromIndent" ) )
    return refalrts::cNoMemory;
  if (! refalrts::copy_evar(context[35], context[36], context[5], context[6]))
    return refalrts::cNoMemory;
  if( ! refalrts::alloc_close_call( context[37] ) )
    return refalrts::cNoMemory;
  refalrts::reinit_char( context[13], ':' );
  refalrts::reinit_char( context[14], '_' );
  refalrts::reinit_char( context[0], ')' );
  refalrts::reinit_close_bracket( context[4] );
  refalrts::reinit_char( context[8], ' ' );
  refalrts::reinit_close_bracket( context[1] );
  refalrts::link_brackets( context[7], context[1] );
  refalrts::push_stack( context[37] );
  refalrts::push_stack( context[33] );
  refalrts::link_brackets( context[15], context[4] );
  refalrts::push_stack( context[29] );
  refalrts::push_stack( context[27] );
  refalrts::push_stack( context[22] );
  refalrts::push_stack( context[20] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[1];
  res = refalrts::splice_evar( res, context[32], context[37] );
  res = refalrts::splice_evar( res, context[0], context[8] );
  res = refalrts::splice_evar( res, context[29], context[31] );
  res = refalrts::splice_evar( res, context[10], context[10] );
  res = refalrts::splice_evar( res, context[25], context[28] );
  res = refalrts::splice_evar( res, context[2], context[3] );
  res = refalrts::splice_evar( res, context[22], context[24] );
  res = refalrts::splice_evar( res, context[9], context[9] );
  res = refalrts::splice_evar( res, context[20], context[21] );
  res = refalrts::splice_evar( res, context[13], context[14] );
  res = refalrts::splice_evar( res, context[15], context[19] );
  refalrts::use( res );
  return refalrts::FnResult(refalrts::cSuccess | (__LINE__ << 8));
#endif
}

static refalrts::FnResult PrintMatchSave(refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  refalrts::this_is_generated_function();
  // issue here memory for vars with 55 elems
  refalrts::Iter context[55];
  refalrts::zeros( context, 55 );
#ifdef INTERPRET
  static const refalrts::RefalFunction functions[] = {
    { BreakerFromIndent, "BreakerFromIndent" },
    { ContextItem, "ContextItem" },
    { ContextRange, "ContextRange" },
    { StrFromDirection, "StrFromDirection" }
  };
  using refalrts::idents;
  using refalrts::numbers;
  static const refalrts::StringItem strings[] = {
    {"  ", 2},
    {" )", 2},
    {"f( ! ", 5},
    {", ", 2},
    {"( ", 2},
    {" = refalrts:", 12}
  };
  static const refalrts::RASLCommand raa[] = {
    // </0 & PrintMatchSave/4 (/7 e.Indent#1/5 )/8 s.Offset#1/9 s.Direction#1/10 s.BracketNumber#1/11 (/14 e.Function#1/12 )/15 e.TextRep#1/2 >/1
    {refalrts::icInitB0_Lite, 0, 0, 0},
    {refalrts::icCallSaveLeft, 0, 2, 0},
    {refalrts::icBracketLeftSave, 0, 5, 2},
    // closed e.Indent#1 as range 5
    {refalrts::icsVarLeft, 0, 9, 2},
    {refalrts::icsVarLeft, 0, 10, 2},
    {refalrts::icsVarLeft, 0, 11, 2},
    {refalrts::icBracketLeftSave, 0, 12, 2},
    // closed e.Function#1 as range 12
    // closed e.TextRep#1 as range 2
    {refalrts::icEmptyResult, 0, 0, 0},
    //TRASH: {REMOVED TILE}  {REMOVED TILE}  {REMOVED TILE}  {REMOVED TILE}  {REMOVED TILE}  {REMOVED TILE}  {REMOVED TILE}  {REMOVED TILE} 
    //RESULT: Tile{ [[ } (/16 e.Indent#1/5/17 </19 & ContextItem/20 s.Offset#1/9/21 >/22" = refalrts:"/23 Tile{ HalfReuse: ':'/14 AsIs: e.Function#1/12 HalfReuse: '_'/15 } </25 & StrFromDirection/26 Tile{ AsIs: s.Direction#1/10 } >/27"( "/28 Tile{ AsIs: e.TextRep#1/2 }", "/30 </32 & ContextRange/33 Tile{ AsIs: s.BracketNumber#1/11 } >/34" )"/35 Tile{ HalfReuse: ';'/0 HalfReuse: )/4 AsIs: (/7 AsIs: e.Indent#1/5 HalfReuse: 'i'/8 }"f( ! "/37 </39 & ContextItem/40 Tile{ AsIs: s.Offset#1/9 } >/41" )"/42 )/44 (/45 e.Indent#1/5/46"  "/48 </50 & BreakerFromIndent/51 e.Indent#1/5/52 >/54 Tile{ HalfReuse: )/1 ]] }
    {refalrts::icAllocBracket, 0, refalrts::ibOpenBracket, 16},
    {refalrts::icCopyEVar, 17, 5, 0},
    {refalrts::icAllocBracket, 0, refalrts::ibOpenCall, 19},
    {refalrts::icAllocFunc, 0, 1, 20},
    {refalrts::icCopySTVar, 21, 9, 0},
    {refalrts::icAllocBracket, 0, refalrts::ibCloseCall, 22},
    {refalrts::icAllocString, 0, 5, 23},
    {refalrts::icAllocBracket, 0, refalrts::ibOpenCall, 25},
    {refalrts::icAllocFunc, 0, 3, 26},
    {refalrts::icAllocBracket, 0, refalrts::ibCloseCall, 27},
    {refalrts::icAllocString, 0, 4, 28},
    {refalrts::icAllocString, 0, 3, 30},
    {refalrts::icAllocBracket, 0, refalrts::ibOpenCall, 32},
    {refalrts::icAllocFunc, 0, 2, 33},
    {refalrts::icAllocBracket, 0, refalrts::ibCloseCall, 34},
    {refalrts::icAllocString, 0, 1, 35},
    {refalrts::icAllocString, 0, 2, 37},
    {refalrts::icAllocBracket, 0, refalrts::ibOpenCall, 39},
    {refalrts::icAllocFunc, 0, 1, 40},
    {refalrts::icAllocBracket, 0, refalrts::ibCloseCall, 41},
    {refalrts::icAllocString, 0, 1, 42},
    {refalrts::icAllocBracket, 0, refalrts::ibCloseBracket, 44},
    {refalrts::icAllocBracket, 0, refalrts::ibOpenBracket, 45},
    {refalrts::icCopyEVar, 46, 5, 0},
    {refalrts::icAllocString, 0, 0, 48},
    {refalrts::icAllocBracket, 0, refalrts::ibOpenCall, 50},
    {refalrts::icAllocFunc, 0, 0, 51},
    {refalrts::icCopyEVar, 52, 5, 0},
    {refalrts::icAllocBracket, 0, refalrts::ibCloseCall, 54},
    {refalrts::icReinitChar, 0, ':', 14},
    {refalrts::icReinitChar, 0, '_', 15},
    {refalrts::icReinitChar, 0, ';', 0},
    {refalrts::icReinitBracket, 0, refalrts::ibCloseBracket, 4},
    {refalrts::icReinitChar, 0, 'i', 8},
    {refalrts::icReinitBracket, 0, refalrts::ibCloseBracket, 1},
    {refalrts::icLinkBrackets, 45, 1, 0},
    {refalrts::icPushStack, 0, 0, 54},
    {refalrts::icPushStack, 0, 0, 50},
    {refalrts::icLinkBrackets, 7, 44, 0},
    {refalrts::icPushStack, 0, 0, 41},
    {refalrts::icPushStack, 0, 0, 39},
    {refalrts::icLinkBrackets, 16, 4, 0},
    {refalrts::icPushStack, 0, 0, 34},
    {refalrts::icPushStack, 0, 0, 32},
    {refalrts::icPushStack, 0, 0, 27},
    {refalrts::icPushStack, 0, 0, 25},
    {refalrts::icPushStack, 0, 0, 22},
    {refalrts::icPushStack, 0, 0, 19},
    {refalrts::icSetRes, 0, 0, 1},
    {refalrts::icSpliceTile, 41, 54, 0},
    {refalrts::icSpliceTile, 9, 9, 0},
    {refalrts::icSpliceTile, 37, 40, 0},
    {refalrts::icSpliceTile, 0, 8, 0},
    {refalrts::icSpliceTile, 34, 36, 0},
    {refalrts::icSpliceTile, 11, 11, 0},
    {refalrts::icSpliceTile, 30, 33, 0},
    {refalrts::icSpliceEVar, 0, 0, 2},
    {refalrts::icSpliceTile, 27, 29, 0},
    {refalrts::icSpliceTile, 10, 10, 0},
    {refalrts::icSpliceTile, 25, 26, 0},
    {refalrts::icSpliceTile, 14, 15, 0},
    {refalrts::icSpliceTile, 16, 24, 0},
    {refalrts::icReturnResult_NoTrash, 0, 0, 0},
    {refalrts::icEnd, 0, 0, 0}
  };
  int open_e_stack[1];
  refalrts::FnResult res = refalrts::interpret_array(
    raa, context, arg_begin, arg_end,
    functions, idents, numbers, strings, open_e_stack
  );
  return res;
#else
  // </0 & PrintMatchSave/4 (/7 e.Indent#1/5 )/8 s.Offset#1/9 s.Direction#1/10 s.BracketNumber#1/11 (/14 e.Function#1/12 )/15 e.TextRep#1/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  context[5] = 0;
  context[6] = 0;
  context[7] = refalrts::brackets_left( context[5], context[6], context[2], context[3] );
  if( ! context[7] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[7], context[8]);
  // closed e.Indent#1 as range 5
  if( ! refalrts::svar_left( context[9], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  if( ! refalrts::svar_left( context[10], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  if( ! refalrts::svar_left( context[11], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  context[12] = 0;
  context[13] = 0;
  context[14] = refalrts::brackets_left( context[12], context[13], context[2], context[3] );
  if( ! context[14] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[14], context[15]);
  // closed e.Function#1 as range 12
  // closed e.TextRep#1 as range 2

  refalrts::reset_allocator();
  //TRASH: {REMOVED TILE}  {REMOVED TILE}  {REMOVED TILE}  {REMOVED TILE}  {REMOVED TILE}  {REMOVED TILE}  {REMOVED TILE}  {REMOVED TILE} 
  //RESULT: Tile{ [[ } (/16 e.Indent#1/5/17 </19 & ContextItem/20 s.Offset#1/9/21 >/22" = refalrts:"/23 Tile{ HalfReuse: ':'/14 AsIs: e.Function#1/12 HalfReuse: '_'/15 } </25 & StrFromDirection/26 Tile{ AsIs: s.Direction#1/10 } >/27"( "/28 Tile{ AsIs: e.TextRep#1/2 }", "/30 </32 & ContextRange/33 Tile{ AsIs: s.BracketNumber#1/11 } >/34" )"/35 Tile{ HalfReuse: ';'/0 HalfReuse: )/4 AsIs: (/7 AsIs: e.Indent#1/5 HalfReuse: 'i'/8 }"f( ! "/37 </39 & ContextItem/40 Tile{ AsIs: s.Offset#1/9 } >/41" )"/42 )/44 (/45 e.Indent#1/5/46"  "/48 </50 & BreakerFromIndent/51 e.Indent#1/5/52 >/54 Tile{ HalfReuse: )/1 ]] }
  if( ! refalrts::alloc_open_bracket( context[16] ) )
    return refalrts::cNoMemory;
  if (! refalrts::copy_evar(context[17], context[18], context[5], context[6]))
    return refalrts::cNoMemory;
  if( ! refalrts::alloc_open_call( context[19] ) )
    return refalrts::cNoMemory;
  if( ! refalrts::alloc_name( context[20], ContextItem, "ContextItem" ) )
    return refalrts::cNoMemory;
  if (! refalrts::copy_stvar(context[21], context[9]))
    return refalrts::cNoMemory;
  if( ! refalrts::alloc_close_call( context[22] ) )
    return refalrts::cNoMemory;
  if( ! refalrts::alloc_chars( context[23], context[24], " = refalrts:", 12 ) )
    return refalrts::cNoMemory;
  if( ! refalrts::alloc_open_call( context[25] ) )
    return refalrts::cNoMemory;
  if( ! refalrts::alloc_name( context[26], StrFromDirection, "StrFromDirection" ) )
    return refalrts::cNoMemory;
  if( ! refalrts::alloc_close_call( context[27] ) )
    return refalrts::cNoMemory;
  if( ! refalrts::alloc_chars( context[28], context[29], "( ", 2 ) )
    return refalrts::cNoMemory;
  if( ! refalrts::alloc_chars( context[30], context[31], ", ", 2 ) )
    return refalrts::cNoMemory;
  if( ! refalrts::alloc_open_call( context[32] ) )
    return refalrts::cNoMemory;
  if( ! refalrts::alloc_name( context[33], ContextRange, "ContextRange" ) )
    return refalrts::cNoMemory;
  if( ! refalrts::alloc_close_call( context[34] ) )
    return refalrts::cNoMemory;
  if( ! refalrts::alloc_chars( context[35], context[36], " )", 2 ) )
    return refalrts::cNoMemory;
  if( ! refalrts::alloc_chars( context[37], context[38], "f( ! ", 5 ) )
    return refalrts::cNoMemory;
  if( ! refalrts::alloc_open_call( context[39] ) )
    return refalrts::cNoMemory;
  if( ! refalrts::alloc_name( context[40], ContextItem, "ContextItem" ) )
    return refalrts::cNoMemory;
  if( ! refalrts::alloc_close_call( context[41] ) )
    return refalrts::cNoMemory;
  if( ! refalrts::alloc_chars( context[42], context[43], " )", 2 ) )
    return refalrts::cNoMemory;
  if( ! refalrts::alloc_close_bracket( context[44] ) )
    return refalrts::cNoMemory;
  if( ! refalrts::alloc_open_bracket( context[45] ) )
    return refalrts::cNoMemory;
  if (! refalrts::copy_evar(context[46], context[47], context[5], context[6]))
    return refalrts::cNoMemory;
  if( ! refalrts::alloc_chars( context[48], context[49], "  ", 2 ) )
    return refalrts::cNoMemory;
  if( ! refalrts::alloc_open_call( context[50] ) )
    return refalrts::cNoMemory;
  if( ! refalrts::alloc_name( context[51], BreakerFromIndent, "BreakerFromIndent" ) )
    return refalrts::cNoMemory;
  if (! refalrts::copy_evar(context[52], context[53], context[5], context[6]))
    return refalrts::cNoMemory;
  if( ! refalrts::alloc_close_call( context[54] ) )
    return refalrts::cNoMemory;
  refalrts::reinit_char( context[14], ':' );
  refalrts::reinit_char( context[15], '_' );
  refalrts::reinit_char( context[0], ';' );
  refalrts::reinit_close_bracket( context[4] );
  refalrts::reinit_char( context[8], 'i' );
  refalrts::reinit_close_bracket( context[1] );
  refalrts::link_brackets( context[45], context[1] );
  refalrts::push_stack( context[54] );
  refalrts::push_stack( context[50] );
  refalrts::link_brackets( context[7], context[44] );
  refalrts::push_stack( context[41] );
  refalrts::push_stack( context[39] );
  refalrts::link_brackets( context[16], context[4] );
  refalrts::push_stack( context[34] );
  refalrts::push_stack( context[32] );
  refalrts::push_stack( context[27] );
  refalrts::push_stack( context[25] );
  refalrts::push_stack( context[22] );
  refalrts::push_stack( context[19] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[1];
  res = refalrts::splice_evar( res, context[41], context[54] );
  res = refalrts::splice_evar( res, context[9], context[9] );
  res = refalrts::splice_evar( res, context[37], context[40] );
  res = refalrts::splice_evar( res, context[0], context[8] );
  res = refalrts::splice_evar( res, context[34], context[36] );
  res = refalrts::splice_evar( res, context[11], context[11] );
  res = refalrts::splice_evar( res, context[30], context[33] );
  res = refalrts::splice_evar( res, context[2], context[3] );
  res = refalrts::splice_evar( res, context[27], context[29] );
  res = refalrts::splice_evar( res, context[10], context[10] );
  res = refalrts::splice_evar( res, context[25], context[26] );
  res = refalrts::splice_evar( res, context[14], context[15] );
  res = refalrts::splice_evar( res, context[16], context[24] );
  refalrts::use( res );
  return refalrts::FnResult(refalrts::cSuccess | (__LINE__ << 8));
#endif
}

static refalrts::FnResult PrintCreateElem(refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  refalrts::this_is_generated_function();
  // issue here memory for vars with 43 elems
  refalrts::Iter context[43];
  refalrts::zeros( context, 43 );
#ifdef INTERPRET
  static const refalrts::RefalFunction functions[] = {
    { ContextItem, "ContextItem" },
    { AllocatorFuncName, "AllocatorFuncName" },
    { AllocatorFuncArgument, "AllocatorFuncArgument" }
  };
  using refalrts::idents;
  using refalrts::numbers;
  static const refalrts::StringItem strings[] = {
    {" );", 3},
    {"( ", 2},
    {"falrts::", 8},
    {" refalrts::cNoMemory;", 21},
    {" ) ", 3},
    {"if( ! refalrts::alloc_", 22}
  };
  static const refalrts::RASLCommand raa[] = {
    //FAST GEN:(E )(E )S S E 
    //GLOBAL GEN:(E )(E )S S E 
    // </0 & PrintCreateElem/4 (/7 e.idxB#0/5 )/8 (/11 e.idxTB#0/9 )/12 s.idxTT#0/13 s.idxTTV#0/14 e.idxTTVV#0/2 >/1
    {refalrts::icInitB0_Lite, 0, 0, 0},
    {refalrts::icCallSaveLeft, 0, 2, 0},
    {refalrts::icBracketLeftSave, 0, 5, 2},
    {refalrts::icBracketLeftSave, 0, 9, 2},
    // closed e.idxB#0 as range 5
    // closed e.idxTB#0 as range 9
    {refalrts::icsVarLeft, 0, 13, 2},
    {refalrts::icsVarLeft, 0, 14, 2},
    // closed e.idxTTVV#0 as range 2
    {refalrts::icOnFailGoTo, +51, 0, 0},
    //(E )('a''l''l''o''c')S S E 
    // </0 & PrintCreateElem/4 (/7 e.Indent#1/5 )/8 (/11 'a'/15 'l'/16 'l'/17 'o'/18 'c'/19 )/12 s.ElemNumber#1/13 s.ElementType#1/14 e.Info#1/2 >/1
    {refalrts::icSave, 0, 41, 9},
    {refalrts::icCharLeftSave, 15, static_cast<unsigned char>('a'), 41},
    {refalrts::icCharLeftSave, 16, static_cast<unsigned char>('l'), 41},
    {refalrts::icCharLeftSave, 17, static_cast<unsigned char>('l'), 41},
    {refalrts::icCharLeftSave, 18, static_cast<unsigned char>('o'), 41},
    {refalrts::icCharLeftSave, 19, static_cast<unsigned char>('c'), 41},
    {refalrts::icEmpty, 0, 0, 41},
    // closed e.Indent#1 as range 5
    // closed e.Info#1 as range 2
    {refalrts::icEmptyResult, 0, 0, 0},
    //TRASH: {REMOVED TILE}  {REMOVED TILE}  {REMOVED TILE}  {REMOVED TILE}  {REMOVED TILE} 
    //RESULT: Tile{ [[ } (/20 e.Indent#1/5/21"if( ! refalrts::alloc_"/23 </25 & AllocatorFuncName/26 s.ElementType#1/14/27 >/28"( "/29 </31 & ContextItem/32 Tile{ AsIs: s.ElemNumber#1/13 } >/33 </34 & AllocatorFuncArgument/35 Tile{ AsIs: s.ElementType#1/14 AsIs: e.Info#1/2 AsIs: >/1 }" ) "/36 Tile{ HalfReuse: ')'/0 HalfReuse: )/4 AsIs: (/7 AsIs: e.Indent#1/5 HalfReuse: ' '/8 HalfReuse: ' '/11 Reuse: 'r'/15 Reuse: 'e'/16 Reuse: 't'/17 Reuse: 'u'/18 Reuse: 'r'/19 HalfReuse: 'n'/12 }" refalrts::cNoMemory;"/38 )/40 Tile{ ]] }
    {refalrts::icAllocBracket, 0, refalrts::ibOpenBracket, 20},
    {refalrts::icCopyEVar, 21, 5, 0},
    {refalrts::icAllocString, 0, 5, 23},
    {refalrts::icAllocBracket, 0, refalrts::ibOpenCall, 25},
    {refalrts::icAllocFunc, 0, 1, 26},
    {refalrts::icCopySTVar, 27, 14, 0},
    {refalrts::icAllocBracket, 0, refalrts::ibCloseCall, 28},
    {refalrts::icAllocString, 0, 1, 29},
    {refalrts::icAllocBracket, 0, refalrts::ibOpenCall, 31},
    {refalrts::icAllocFunc, 0, 0, 32},
    {refalrts::icAllocBracket, 0, refalrts::ibCloseCall, 33},
    {refalrts::icAllocBracket, 0, refalrts::ibOpenCall, 34},
    {refalrts::icAllocFunc, 0, 2, 35},
    {refalrts::icAllocString, 0, 4, 36},
    {refalrts::icAllocString, 0, 3, 38},
    {refalrts::icAllocBracket, 0, refalrts::ibCloseBracket, 40},
    {refalrts::icReinitChar, 0, ')', 0},
    {refalrts::icReinitBracket, 0, refalrts::ibCloseBracket, 4},
    {refalrts::icReinitChar, 0, ' ', 8},
    {refalrts::icReinitChar, 0, ' ', 11},
    {refalrts::icUpdateChar, 0, 'r', 15},
    {refalrts::icUpdateChar, 0, 'e', 16},
    {refalrts::icUpdateChar, 0, 't', 17},
    {refalrts::icUpdateChar, 0, 'u', 18},
    {refalrts::icUpdateChar, 0, 'r', 19},
    {refalrts::icReinitChar, 0, 'n', 12},
    {refalrts::icLinkBrackets, 7, 40, 0},
    {refalrts::icLinkBrackets, 20, 4, 0},
    {refalrts::icPushStack, 0, 0, 1},
    {refalrts::icPushStack, 0, 0, 34},
    {refalrts::icPushStack, 0, 0, 33},
    {refalrts::icPushStack, 0, 0, 31},
    {refalrts::icPushStack, 0, 0, 28},
    {refalrts::icPushStack, 0, 0, 25},
    {refalrts::icSetResRightEdge, 0, 0, 0},
    {refalrts::icSpliceTile, 38, 40, 0},
    {refalrts::icSpliceTile, 0, 12, 0},
    {refalrts::icSpliceTile, 36, 37, 0},
    {refalrts::icSpliceTile, 14, 1, 0},
    {refalrts::icSpliceTile, 33, 35, 0},
    {refalrts::icSpliceTile, 13, 13, 0},
    {refalrts::icSpliceTile, 20, 32, 0},
    {refalrts::icReturnResult_NoTrash, 0, 0, 0},
    //(E )(E )S S E 
    // </0 & PrintCreateElem/4 (/7 e.Indent#1/5 )/8 (/11 e.Action#1/9 )/12 s.ElemNumber#1/13 s.ElementType#1/14 e.Info#1/2 >/1
    // closed e.Indent#1 as range 5
    // closed e.Action#1 as range 9
    // closed e.Info#1 as range 2
    {refalrts::icEmptyResult, 0, 0, 0},
    //TRASH: {REMOVED TILE}  {REMOVED TILE}  {REMOVED TILE}  {REMOVED TILE}  {REMOVED TILE}  {REMOVED TILE}  {REMOVED TILE} 
    //RESULT: Tile{ [[ } Tile{ AsIs: (/7 AsIs: e.Indent#1/5 HalfReuse: 'r'/8 HalfReuse: 'e'/11 }"falrts::"/15 Tile{ AsIs: e.Action#1/9 } '_'/17 Tile{ AsIs: </0 Reuse: & AllocatorFuncName/4 } s.ElementType#1/14/18 >/19"( "/20 </22 Tile{ HalfReuse: & ContextItem/12 AsIs: s.ElemNumber#1/13 } >/23 </24 & AllocatorFuncArgument/25 Tile{ AsIs: s.ElementType#1/14 AsIs: e.Info#1/2 AsIs: >/1 }" );"/26 )/28 Tile{ ]] }
    {refalrts::icAllocString, 0, 2, 15},
    {refalrts::icAllocChar, 0, '_', 17},
    {refalrts::icCopySTVar, 18, 14, 0},
    {refalrts::icAllocBracket, 0, refalrts::ibCloseCall, 19},
    {refalrts::icAllocString, 0, 1, 20},
    {refalrts::icAllocBracket, 0, refalrts::ibOpenCall, 22},
    {refalrts::icAllocBracket, 0, refalrts::ibCloseCall, 23},
    {refalrts::icAllocBracket, 0, refalrts::ibOpenCall, 24},
    {refalrts::icAllocFunc, 0, 2, 25},
    {refalrts::icAllocString, 0, 0, 26},
    {refalrts::icAllocBracket, 0, refalrts::ibCloseBracket, 28},
    {refalrts::icReinitChar, 0, 'r', 8},
    {refalrts::icReinitChar, 0, 'e', 11},
    {refalrts::icUpdateFunc, 0, 1, 4},
    {refalrts::icReinitFunc, 0, 0, 12},
    {refalrts::icLinkBrackets, 7, 28, 0},
    {refalrts::icPushStack, 0, 0, 1},
    {refalrts::icPushStack, 0, 0, 24},
    {refalrts::icPushStack, 0, 0, 23},
    {refalrts::icPushStack, 0, 0, 22},
    {refalrts::icPushStack, 0, 0, 19},
    {refalrts::icPushStack, 0, 0, 0},
    {refalrts::icSetResRightEdge, 0, 0, 0},
    {refalrts::icSpliceTile, 26, 28, 0},
    {refalrts::icSpliceTile, 14, 1, 0},
    {refalrts::icSpliceTile, 23, 25, 0},
    {refalrts::icSpliceTile, 12, 13, 0},
    {refalrts::icSpliceTile, 18, 22, 0},
    {refalrts::icSpliceTile, 0, 4, 0},
    {refalrts::icSpliceTile, 17, 17, 0},
    {refalrts::icSpliceEVar, 0, 0, 9},
    {refalrts::icSpliceTile, 15, 16, 0},
    {refalrts::icSpliceTile, 7, 11, 0},
    {refalrts::icReturnResult_NoTrash, 0, 0, 0},
    {refalrts::icEnd, 0, 0, 0}
  };
  int open_e_stack[1];
  refalrts::FnResult res = refalrts::interpret_array(
    raa, context, arg_begin, arg_end,
    functions, idents, numbers, strings, open_e_stack
  );
  return res;
#else
  //FAST GEN:(E )(E )S S E 
  //GLOBAL GEN:(E )(E )S S E 
  // </0 & PrintCreateElem/4 (/7 e.idxB#0/5 )/8 (/11 e.idxTB#0/9 )/12 s.idxTT#0/13 s.idxTTV#0/14 e.idxTTVV#0/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  context[5] = 0;
  context[6] = 0;
  context[7] = refalrts::brackets_left( context[5], context[6], context[2], context[3] );
  if( ! context[7] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[7], context[8]);
  context[9] = 0;
  context[10] = 0;
  context[11] = refalrts::brackets_left( context[9], context[10], context[2], context[3] );
  if( ! context[11] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[11], context[12]);
  // closed e.idxB#0 as range 5
  // closed e.idxTB#0 as range 9
  if( ! refalrts::svar_left( context[13], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  if( ! refalrts::svar_left( context[14], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  // closed e.idxTTVV#0 as range 2
  do {
    refalrts::start_sentence();
    //(E )('a''l''l''o''c')S S E 
    // </0 & PrintCreateElem/4 (/7 e.Indent#1/5 )/8 (/11 'a'/15 'l'/16 'l'/17 'o'/18 'c'/19 )/12 s.ElemNumber#1/13 s.ElementType#1/14 e.Info#1/2 >/1
    context[41] = context[9];
    context[42] = context[10];
    context[15] = refalrts::char_left( 'a', context[41], context[42] );
    if( ! context[15] )
      continue;
    context[16] = refalrts::char_left( 'l', context[41], context[42] );
    if( ! context[16] )
      continue;
    context[17] = refalrts::char_left( 'l', context[41], context[42] );
    if( ! context[17] )
      continue;
    context[18] = refalrts::char_left( 'o', context[41], context[42] );
    if( ! context[18] )
      continue;
    context[19] = refalrts::char_left( 'c', context[41], context[42] );
    if( ! context[19] )
      continue;
    if( ! refalrts::empty_seq( context[41], context[42] ) )
      continue;
    // closed e.Indent#1 as range 5
    // closed e.Info#1 as range 2

    refalrts::reset_allocator();
    //TRASH: {REMOVED TILE}  {REMOVED TILE}  {REMOVED TILE}  {REMOVED TILE}  {REMOVED TILE} 
    //RESULT: Tile{ [[ } (/20 e.Indent#1/5/21"if( ! refalrts::alloc_"/23 </25 & AllocatorFuncName/26 s.ElementType#1/14/27 >/28"( "/29 </31 & ContextItem/32 Tile{ AsIs: s.ElemNumber#1/13 } >/33 </34 & AllocatorFuncArgument/35 Tile{ AsIs: s.ElementType#1/14 AsIs: e.Info#1/2 AsIs: >/1 }" ) "/36 Tile{ HalfReuse: ')'/0 HalfReuse: )/4 AsIs: (/7 AsIs: e.Indent#1/5 HalfReuse: ' '/8 HalfReuse: ' '/11 Reuse: 'r'/15 Reuse: 'e'/16 Reuse: 't'/17 Reuse: 'u'/18 Reuse: 'r'/19 HalfReuse: 'n'/12 }" refalrts::cNoMemory;"/38 )/40 Tile{ ]] }
    if( ! refalrts::alloc_open_bracket( context[20] ) )
      return refalrts::cNoMemory;
    if (! refalrts::copy_evar(context[21], context[22], context[5], context[6]))
      return refalrts::cNoMemory;
    if( ! refalrts::alloc_chars( context[23], context[24], "if( ! refalrts::alloc_", 22 ) )
      return refalrts::cNoMemory;
    if( ! refalrts::alloc_open_call( context[25] ) )
      return refalrts::cNoMemory;
    if( ! refalrts::alloc_name( context[26], AllocatorFuncName, "AllocatorFuncName" ) )
      return refalrts::cNoMemory;
    if (! refalrts::copy_stvar(context[27], context[14]))
      return refalrts::cNoMemory;
    if( ! refalrts::alloc_close_call( context[28] ) )
      return refalrts::cNoMemory;
    if( ! refalrts::alloc_chars( context[29], context[30], "( ", 2 ) )
      return refalrts::cNoMemory;
    if( ! refalrts::alloc_open_call( context[31] ) )
      return refalrts::cNoMemory;
    if( ! refalrts::alloc_name( context[32], ContextItem, "ContextItem" ) )
      return refalrts::cNoMemory;
    if( ! refalrts::alloc_close_call( context[33] ) )
      return refalrts::cNoMemory;
    if( ! refalrts::alloc_open_call( context[34] ) )
      return refalrts::cNoMemory;
    if( ! refalrts::alloc_name( context[35], AllocatorFuncArgument, "AllocatorFuncArgument" ) )
      return refalrts::cNoMemory;
    if( ! refalrts::alloc_chars( context[36], context[37], " ) ", 3 ) )
      return refalrts::cNoMemory;
    if( ! refalrts::alloc_chars( context[38], context[39], " refalrts::cNoMemory;", 21 ) )
      return refalrts::cNoMemory;
    if( ! refalrts::alloc_close_bracket( context[40] ) )
      return refalrts::cNoMemory;
    refalrts::reinit_char( context[0], ')' );
    refalrts::reinit_close_bracket( context[4] );
    refalrts::reinit_char( context[8], ' ' );
    refalrts::reinit_char( context[11], ' ' );
    refalrts::update_char( context[15], 'r' );
    refalrts::update_char( context[16], 'e' );
    refalrts::update_char( context[17], 't' );
    refalrts::update_char( context[18], 'u' );
    refalrts::update_char( context[19], 'r' );
    refalrts::reinit_char( context[12], 'n' );
    refalrts::link_brackets( context[7], context[40] );
    refalrts::link_brackets( context[20], context[4] );
    refalrts::push_stack( context[1] );
    refalrts::push_stack( context[34] );
    refalrts::push_stack( context[33] );
    refalrts::push_stack( context[31] );
    refalrts::push_stack( context[28] );
    refalrts::push_stack( context[25] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = arg_end->next;
    res = refalrts::splice_evar( res, context[38], context[40] );
    res = refalrts::splice_evar( res, context[0], context[12] );
    res = refalrts::splice_evar( res, context[36], context[37] );
    res = refalrts::splice_evar( res, context[14], context[1] );
    res = refalrts::splice_evar( res, context[33], context[35] );
    res = refalrts::splice_evar( res, context[13], context[13] );
    res = refalrts::splice_evar( res, context[20], context[32] );
    refalrts::use( res );
    return refalrts::FnResult(refalrts::cSuccess | (__LINE__ << 8));
  } while ( 0 );

  //(E )(E )S S E 
  // </0 & PrintCreateElem/4 (/7 e.Indent#1/5 )/8 (/11 e.Action#1/9 )/12 s.ElemNumber#1/13 s.ElementType#1/14 e.Info#1/2 >/1
  // closed e.Indent#1 as range 5
  // closed e.Action#1 as range 9
  // closed e.Info#1 as range 2

  refalrts::reset_allocator();
  //TRASH: {REMOVED TILE}  {REMOVED TILE}  {REMOVED TILE}  {REMOVED TILE}  {REMOVED TILE}  {REMOVED TILE}  {REMOVED TILE} 
  //RESULT: Tile{ [[ } Tile{ AsIs: (/7 AsIs: e.Indent#1/5 HalfReuse: 'r'/8 HalfReuse: 'e'/11 }"falrts::"/15 Tile{ AsIs: e.Action#1/9 } '_'/17 Tile{ AsIs: </0 Reuse: & AllocatorFuncName/4 } s.ElementType#1/14/18 >/19"( "/20 </22 Tile{ HalfReuse: & ContextItem/12 AsIs: s.ElemNumber#1/13 } >/23 </24 & AllocatorFuncArgument/25 Tile{ AsIs: s.ElementType#1/14 AsIs: e.Info#1/2 AsIs: >/1 }" );"/26 )/28 Tile{ ]] }
  if( ! refalrts::alloc_chars( context[15], context[16], "falrts::", 8 ) )
    return refalrts::cNoMemory;
  if( ! refalrts::alloc_char( context[17], '_' ) )
    return refalrts::cNoMemory;
  if (! refalrts::copy_stvar(context[18], context[14]))
    return refalrts::cNoMemory;
  if( ! refalrts::alloc_close_call( context[19] ) )
    return refalrts::cNoMemory;
  if( ! refalrts::alloc_chars( context[20], context[21], "( ", 2 ) )
    return refalrts::cNoMemory;
  if( ! refalrts::alloc_open_call( context[22] ) )
    return refalrts::cNoMemory;
  if( ! refalrts::alloc_close_call( context[23] ) )
    return refalrts::cNoMemory;
  if( ! refalrts::alloc_open_call( context[24] ) )
    return refalrts::cNoMemory;
  if( ! refalrts::alloc_name( context[25], AllocatorFuncArgument, "AllocatorFuncArgument" ) )
    return refalrts::cNoMemory;
  if( ! refalrts::alloc_chars( context[26], context[27], " );", 3 ) )
    return refalrts::cNoMemory;
  if( ! refalrts::alloc_close_bracket( context[28] ) )
    return refalrts::cNoMemory;
  refalrts::reinit_char( context[8], 'r' );
  refalrts::reinit_char( context[11], 'e' );
  refalrts::update_name( context[4], AllocatorFuncName, "AllocatorFuncName" );
  refalrts::reinit_name( context[12], ContextItem, "ContextItem" );
  refalrts::link_brackets( context[7], context[28] );
  refalrts::push_stack( context[1] );
  refalrts::push_stack( context[24] );
  refalrts::push_stack( context[23] );
  refalrts::push_stack( context[22] );
  refalrts::push_stack( context[19] );
  refalrts::push_stack( context[0] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = arg_end->next;
  res = refalrts::splice_evar( res, context[26], context[28] );
  res = refalrts::splice_evar( res, context[14], context[1] );
  res = refalrts::splice_evar( res, context[23], context[25] );
  res = refalrts::splice_evar( res, context[12], context[13] );
  res = refalrts::splice_evar( res, context[18], context[22] );
  res = refalrts::splice_evar( res, context[0], context[4] );
  res = refalrts::splice_evar( res, context[17], context[17] );
  res = refalrts::splice_evar( res, context[9], context[10] );
  res = refalrts::splice_evar( res, context[15], context[16] );
  res = refalrts::splice_evar( res, context[7], context[11] );
  refalrts::use( res );
  return refalrts::FnResult(refalrts::cSuccess | (__LINE__ << 8));
#endif
}

static refalrts::FnResult AllocatorFuncName(refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  refalrts::this_is_generated_function();
  // issue here memory for vars with 8 elems
  refalrts::Iter context[8];
  refalrts::zeros( context, 8 );
#ifdef INTERPRET
  using refalrts::functions;
  static const refalrts::RefalIdentifier idents[] = {
    & ident_ElCloseCall<int>::name,
    & ident_ElOpenCall<int>::name,
    & ident_ElCloseBracket<int>::name,
    & ident_ElOpenBracket<int>::name,
    & ident_ElCloseADT<int>::name,
    & ident_ElOpenADT<int>::name,
    & ident_ElIdent<int>::name,
    & ident_ElNumber<int>::name,
    & ident_ElName<int>::name,
    & ident_ElChar<int>::name
  };
  using refalrts::numbers;
  static const refalrts::StringItem strings[] = {
    {"e_call", 6},
    {"_call", 5},
    {"e_bracket", 9},
    {"_bracket", 8},
    {"e_adt", 5},
    {"_adt", 4},
    {"er", 2}
  };
  static const refalrts::RASLCommand raa[] = {
    //FAST GEN:S 
    //GLOBAL GEN:S 
    // </0 & AllocatorFuncName/4 s.idx#0/5 >/1
    {refalrts::icInitB0_Lite, 0, 0, 0},
    {refalrts::icCallSaveLeft, 0, 2, 0},
    {refalrts::icsVarLeft, 0, 5, 2},
    {refalrts::icEmpty, 0, 0, 2},
    {refalrts::icOnFailGoTo, +7, 0, 0},
    //#ElChar
    // </0 & AllocatorFuncName/4 # ElChar/5 >/1
    {refalrts::icIdentTerm, 0, 9, 5},
    {refalrts::icEmptyResult, 0, 0, 0},
    //TRASH: {REMOVED TILE} 
    //RESULT: Tile{ [[ HalfReuse: 'c'/0 HalfReuse: 'h'/4 HalfReuse: 'a'/5 HalfReuse: 'r'/1 ]] }
    {refalrts::icReinitChar, 0, 'c', 0},
    {refalrts::icReinitChar, 0, 'h', 4},
    {refalrts::icReinitChar, 0, 'a', 5},
    {refalrts::icReinitChar, 0, 'r', 1},
    {refalrts::icReturnResult_NoTrash, 0, 0, 0},
    {refalrts::icOnFailGoTo, +7, 0, 0},
    //#ElName
    // </0 & AllocatorFuncName/4 # ElName/5 >/1
    {refalrts::icIdentTerm, 0, 8, 5},
    {refalrts::icEmptyResult, 0, 0, 0},
    //TRASH: {REMOVED TILE} 
    //RESULT: Tile{ [[ HalfReuse: 'n'/0 HalfReuse: 'a'/4 HalfReuse: 'm'/5 HalfReuse: 'e'/1 ]] }
    {refalrts::icReinitChar, 0, 'n', 0},
    {refalrts::icReinitChar, 0, 'a', 4},
    {refalrts::icReinitChar, 0, 'm', 5},
    {refalrts::icReinitChar, 0, 'e', 1},
    {refalrts::icReturnResult_NoTrash, 0, 0, 0},
    {refalrts::icOnFailGoTo, +10, 0, 0},
    //#ElNumber
    // </0 & AllocatorFuncName/4 # ElNumber/5 >/1
    {refalrts::icIdentTerm, 0, 7, 5},
    {refalrts::icEmptyResult, 0, 0, 0},
    //TRASH: {REMOVED TILE}  {REMOVED TILE} 
    //RESULT: Tile{ [[ HalfReuse: 'n'/0 HalfReuse: 'u'/4 HalfReuse: 'm'/5 HalfReuse: 'b'/1 }"er"/6 Tile{ ]] }
    {refalrts::icAllocString, 0, 6, 6},
    {refalrts::icReinitChar, 0, 'n', 0},
    {refalrts::icReinitChar, 0, 'u', 4},
    {refalrts::icReinitChar, 0, 'm', 5},
    {refalrts::icReinitChar, 0, 'b', 1},
    {refalrts::icSetResRightEdge, 0, 0, 0},
    {refalrts::icSpliceTile, 6, 7, 0},
    {refalrts::icReturnResult_NoTrash, 0, 0, 0},
    {refalrts::icOnFailGoTo, +10, 0, 0},
    //#ElIdent
    // </0 & AllocatorFuncName/4 # ElIdent/5 >/1
    {refalrts::icIdentTerm, 0, 6, 5},
    {refalrts::icEmptyResult, 0, 0, 0},
    //TRASH: {REMOVED TILE}  {REMOVED TILE} 
    //RESULT: Tile{ [[ HalfReuse: 'i'/0 HalfReuse: 'd'/4 HalfReuse: 'e'/5 HalfReuse: 'n'/1 } 't'/6 Tile{ ]] }
    {refalrts::icAllocChar, 0, 't', 6},
    {refalrts::icReinitChar, 0, 'i', 0},
    {refalrts::icReinitChar, 0, 'd', 4},
    {refalrts::icReinitChar, 0, 'e', 5},
    {refalrts::icReinitChar, 0, 'n', 1},
    {refalrts::icSetResRightEdge, 0, 0, 0},
    {refalrts::icSpliceTile, 6, 6, 0},
    {refalrts::icReturnResult_NoTrash, 0, 0, 0},
    {refalrts::icOnFailGoTo, +10, 0, 0},
    //#ElOpenADT
    // </0 & AllocatorFuncName/4 # ElOpenADT/5 >/1
    {refalrts::icIdentTerm, 0, 5, 5},
    {refalrts::icEmptyResult, 0, 0, 0},
    //TRASH: {REMOVED TILE}  {REMOVED TILE} 
    //RESULT: Tile{ [[ HalfReuse: 'o'/0 HalfReuse: 'p'/4 HalfReuse: 'e'/5 HalfReuse: 'n'/1 }"_adt"/6 Tile{ ]] }
    {refalrts::icAllocString, 0, 5, 6},
    {refalrts::icReinitChar, 0, 'o', 0},
    {refalrts::icReinitChar, 0, 'p', 4},
    {refalrts::icReinitChar, 0, 'e', 5},
    {refalrts::icReinitChar, 0, 'n', 1},
    {refalrts::icSetResRightEdge, 0, 0, 0},
    {refalrts::icSpliceTile, 6, 7, 0},
    {refalrts::icReturnResult_NoTrash, 0, 0, 0},
    {refalrts::icOnFailGoTo, +10, 0, 0},
    //#ElCloseADT
    // </0 & AllocatorFuncName/4 # ElCloseADT/5 >/1
    {refalrts::icIdentTerm, 0, 4, 5},
    {refalrts::icEmptyResult, 0, 0, 0},
    //TRASH: {REMOVED TILE}  {REMOVED TILE} 
    //RESULT: Tile{ [[ HalfReuse: 'c'/0 HalfReuse: 'l'/4 HalfReuse: 'o'/5 HalfReuse: 's'/1 }"e_adt"/6 Tile{ ]] }
    {refalrts::icAllocString, 0, 4, 6},
    {refalrts::icReinitChar, 0, 'c', 0},
    {refalrts::icReinitChar, 0, 'l', 4},
    {refalrts::icReinitChar, 0, 'o', 5},
    {refalrts::icReinitChar, 0, 's', 1},
    {refalrts::icSetResRightEdge, 0, 0, 0},
    {refalrts::icSpliceTile, 6, 7, 0},
    {refalrts::icReturnResult_NoTrash, 0, 0, 0},
    {refalrts::icOnFailGoTo, +10, 0, 0},
    //#ElOpenBracket
    // </0 & AllocatorFuncName/4 # ElOpenBracket/5 >/1
    {refalrts::icIdentTerm, 0, 3, 5},
    {refalrts::icEmptyResult, 0, 0, 0},
    //TRASH: {REMOVED TILE}  {REMOVED TILE} 
    //RESULT: Tile{ [[ HalfReuse: 'o'/0 HalfReuse: 'p'/4 HalfReuse: 'e'/5 HalfReuse: 'n'/1 }"_bracket"/6 Tile{ ]] }
    {refalrts::icAllocString, 0, 3, 6},
    {refalrts::icReinitChar, 0, 'o', 0},
    {refalrts::icReinitChar, 0, 'p', 4},
    {refalrts::icReinitChar, 0, 'e', 5},
    {refalrts::icReinitChar, 0, 'n', 1},
    {refalrts::icSetResRightEdge, 0, 0, 0},
    {refalrts::icSpliceTile, 6, 7, 0},
    {refalrts::icReturnResult_NoTrash, 0, 0, 0},
    {refalrts::icOnFailGoTo, +10, 0, 0},
    //#ElCloseBracket
    // </0 & AllocatorFuncName/4 # ElCloseBracket/5 >/1
    {refalrts::icIdentTerm, 0, 2, 5},
    {refalrts::icEmptyResult, 0, 0, 0},
    //TRASH: {REMOVED TILE}  {REMOVED TILE} 
    //RESULT: Tile{ [[ HalfReuse: 'c'/0 HalfReuse: 'l'/4 HalfReuse: 'o'/5 HalfReuse: 's'/1 }"e_bracket"/6 Tile{ ]] }
    {refalrts::icAllocString, 0, 2, 6},
    {refalrts::icReinitChar, 0, 'c', 0},
    {refalrts::icReinitChar, 0, 'l', 4},
    {refalrts::icReinitChar, 0, 'o', 5},
    {refalrts::icReinitChar, 0, 's', 1},
    {refalrts::icSetResRightEdge, 0, 0, 0},
    {refalrts::icSpliceTile, 6, 7, 0},
    {refalrts::icReturnResult_NoTrash, 0, 0, 0},
    {refalrts::icOnFailGoTo, +10, 0, 0},
    //#ElOpenCall
    // </0 & AllocatorFuncName/4 # ElOpenCall/5 >/1
    {refalrts::icIdentTerm, 0, 1, 5},
    {refalrts::icEmptyResult, 0, 0, 0},
    //TRASH: {REMOVED TILE}  {REMOVED TILE} 
    //RESULT: Tile{ [[ HalfReuse: 'o'/0 HalfReuse: 'p'/4 HalfReuse: 'e'/5 HalfReuse: 'n'/1 }"_call"/6 Tile{ ]] }
    {refalrts::icAllocString, 0, 1, 6},
    {refalrts::icReinitChar, 0, 'o', 0},
    {refalrts::icReinitChar, 0, 'p', 4},
    {refalrts::icReinitChar, 0, 'e', 5},
    {refalrts::icReinitChar, 0, 'n', 1},
    {refalrts::icSetResRightEdge, 0, 0, 0},
    {refalrts::icSpliceTile, 6, 7, 0},
    {refalrts::icReturnResult_NoTrash, 0, 0, 0},
    //#ElCloseCall
    // </0 & AllocatorFuncName/4 # ElCloseCall/5 >/1
    {refalrts::icIdentTerm, 0, 0, 5},
    {refalrts::icEmptyResult, 0, 0, 0},
    //TRASH: {REMOVED TILE}  {REMOVED TILE} 
    //RESULT: Tile{ [[ HalfReuse: 'c'/0 HalfReuse: 'l'/4 HalfReuse: 'o'/5 HalfReuse: 's'/1 }"e_call"/6 Tile{ ]] }
    {refalrts::icAllocString, 0, 0, 6},
    {refalrts::icReinitChar, 0, 'c', 0},
    {refalrts::icReinitChar, 0, 'l', 4},
    {refalrts::icReinitChar, 0, 'o', 5},
    {refalrts::icReinitChar, 0, 's', 1},
    {refalrts::icSetResRightEdge, 0, 0, 0},
    {refalrts::icSpliceTile, 6, 7, 0},
    {refalrts::icReturnResult_NoTrash, 0, 0, 0},
    {refalrts::icEnd, 0, 0, 0}
  };
  int open_e_stack[9];
  refalrts::FnResult res = refalrts::interpret_array(
    raa, context, arg_begin, arg_end,
    functions, idents, numbers, strings, open_e_stack
  );
  return res;
#else
  //FAST GEN:S 
  //GLOBAL GEN:S 
  // </0 & AllocatorFuncName/4 s.idx#0/5 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  if( ! refalrts::svar_left( context[5], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  if( ! refalrts::empty_seq( context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  do {
    refalrts::start_sentence();
    //#ElChar
    // </0 & AllocatorFuncName/4 # ElChar/5 >/1
    if( ! refalrts::ident_term(  & ident_ElChar<int>::name, context[5] ) )
      continue;

    refalrts::reset_allocator();
    //TRASH: {REMOVED TILE} 
    //RESULT: Tile{ [[ HalfReuse: 'c'/0 HalfReuse: 'h'/4 HalfReuse: 'a'/5 HalfReuse: 'r'/1 ]] }
    refalrts::reinit_char( context[0], 'c' );
    refalrts::reinit_char( context[4], 'h' );
    refalrts::reinit_char( context[5], 'a' );
    refalrts::reinit_char( context[1], 'r' );
    return refalrts::FnResult(refalrts::cSuccess | (__LINE__ << 8));
  } while ( 0 );

  do {
    refalrts::start_sentence();
    //#ElName
    // </0 & AllocatorFuncName/4 # ElName/5 >/1
    if( ! refalrts::ident_term(  & ident_ElName<int>::name, context[5] ) )
      continue;

    refalrts::reset_allocator();
    //TRASH: {REMOVED TILE} 
    //RESULT: Tile{ [[ HalfReuse: 'n'/0 HalfReuse: 'a'/4 HalfReuse: 'm'/5 HalfReuse: 'e'/1 ]] }
    refalrts::reinit_char( context[0], 'n' );
    refalrts::reinit_char( context[4], 'a' );
    refalrts::reinit_char( context[5], 'm' );
    refalrts::reinit_char( context[1], 'e' );
    return refalrts::FnResult(refalrts::cSuccess | (__LINE__ << 8));
  } while ( 0 );

  do {
    refalrts::start_sentence();
    //#ElNumber
    // </0 & AllocatorFuncName/4 # ElNumber/5 >/1
    if( ! refalrts::ident_term(  & ident_ElNumber<int>::name, context[5] ) )
      continue;

    refalrts::reset_allocator();
    //TRASH: {REMOVED TILE}  {REMOVED TILE} 
    //RESULT: Tile{ [[ HalfReuse: 'n'/0 HalfReuse: 'u'/4 HalfReuse: 'm'/5 HalfReuse: 'b'/1 }"er"/6 Tile{ ]] }
    if( ! refalrts::alloc_chars( context[6], context[7], "er", 2 ) )
      return refalrts::cNoMemory;
    refalrts::reinit_char( context[0], 'n' );
    refalrts::reinit_char( context[4], 'u' );
    refalrts::reinit_char( context[5], 'm' );
    refalrts::reinit_char( context[1], 'b' );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = arg_end->next;
    res = refalrts::splice_evar( res, context[6], context[7] );
    refalrts::use( res );
    return refalrts::FnResult(refalrts::cSuccess | (__LINE__ << 8));
  } while ( 0 );

  do {
    refalrts::start_sentence();
    //#ElIdent
    // </0 & AllocatorFuncName/4 # ElIdent/5 >/1
    if( ! refalrts::ident_term(  & ident_ElIdent<int>::name, context[5] ) )
      continue;

    refalrts::reset_allocator();
    //TRASH: {REMOVED TILE}  {REMOVED TILE} 
    //RESULT: Tile{ [[ HalfReuse: 'i'/0 HalfReuse: 'd'/4 HalfReuse: 'e'/5 HalfReuse: 'n'/1 } 't'/6 Tile{ ]] }
    if( ! refalrts::alloc_char( context[6], 't' ) )
      return refalrts::cNoMemory;
    refalrts::reinit_char( context[0], 'i' );
    refalrts::reinit_char( context[4], 'd' );
    refalrts::reinit_char( context[5], 'e' );
    refalrts::reinit_char( context[1], 'n' );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = arg_end->next;
    res = refalrts::splice_evar( res, context[6], context[6] );
    refalrts::use( res );
    return refalrts::FnResult(refalrts::cSuccess | (__LINE__ << 8));
  } while ( 0 );

  do {
    refalrts::start_sentence();
    //#ElOpenADT
    // </0 & AllocatorFuncName/4 # ElOpenADT/5 >/1
    if( ! refalrts::ident_term(  & ident_ElOpenADT<int>::name, context[5] ) )
      continue;

    refalrts::reset_allocator();
    //TRASH: {REMOVED TILE}  {REMOVED TILE} 
    //RESULT: Tile{ [[ HalfReuse: 'o'/0 HalfReuse: 'p'/4 HalfReuse: 'e'/5 HalfReuse: 'n'/1 }"_adt"/6 Tile{ ]] }
    if( ! refalrts::alloc_chars( context[6], context[7], "_adt", 4 ) )
      return refalrts::cNoMemory;
    refalrts::reinit_char( context[0], 'o' );
    refalrts::reinit_char( context[4], 'p' );
    refalrts::reinit_char( context[5], 'e' );
    refalrts::reinit_char( context[1], 'n' );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = arg_end->next;
    res = refalrts::splice_evar( res, context[6], context[7] );
    refalrts::use( res );
    return refalrts::FnResult(refalrts::cSuccess | (__LINE__ << 8));
  } while ( 0 );

  do {
    refalrts::start_sentence();
    //#ElCloseADT
    // </0 & AllocatorFuncName/4 # ElCloseADT/5 >/1
    if( ! refalrts::ident_term(  & ident_ElCloseADT<int>::name, context[5] ) )
      continue;

    refalrts::reset_allocator();
    //TRASH: {REMOVED TILE}  {REMOVED TILE} 
    //RESULT: Tile{ [[ HalfReuse: 'c'/0 HalfReuse: 'l'/4 HalfReuse: 'o'/5 HalfReuse: 's'/1 }"e_adt"/6 Tile{ ]] }
    if( ! refalrts::alloc_chars( context[6], context[7], "e_adt", 5 ) )
      return refalrts::cNoMemory;
    refalrts::reinit_char( context[0], 'c' );
    refalrts::reinit_char( context[4], 'l' );
    refalrts::reinit_char( context[5], 'o' );
    refalrts::reinit_char( context[1], 's' );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = arg_end->next;
    res = refalrts::splice_evar( res, context[6], context[7] );
    refalrts::use( res );
    return refalrts::FnResult(refalrts::cSuccess | (__LINE__ << 8));
  } while ( 0 );

  do {
    refalrts::start_sentence();
    //#ElOpenBracket
    // </0 & AllocatorFuncName/4 # ElOpenBracket/5 >/1
    if( ! refalrts::ident_term(  & ident_ElOpenBracket<int>::name, context[5] ) )
      continue;

    refalrts::reset_allocator();
    //TRASH: {REMOVED TILE}  {REMOVED TILE} 
    //RESULT: Tile{ [[ HalfReuse: 'o'/0 HalfReuse: 'p'/4 HalfReuse: 'e'/5 HalfReuse: 'n'/1 }"_bracket"/6 Tile{ ]] }
    if( ! refalrts::alloc_chars( context[6], context[7], "_bracket", 8 ) )
      return refalrts::cNoMemory;
    refalrts::reinit_char( context[0], 'o' );
    refalrts::reinit_char( context[4], 'p' );
    refalrts::reinit_char( context[5], 'e' );
    refalrts::reinit_char( context[1], 'n' );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = arg_end->next;
    res = refalrts::splice_evar( res, context[6], context[7] );
    refalrts::use( res );
    return refalrts::FnResult(refalrts::cSuccess | (__LINE__ << 8));
  } while ( 0 );

  do {
    refalrts::start_sentence();
    //#ElCloseBracket
    // </0 & AllocatorFuncName/4 # ElCloseBracket/5 >/1
    if( ! refalrts::ident_term(  & ident_ElCloseBracket<int>::name, context[5] ) )
      continue;

    refalrts::reset_allocator();
    //TRASH: {REMOVED TILE}  {REMOVED TILE} 
    //RESULT: Tile{ [[ HalfReuse: 'c'/0 HalfReuse: 'l'/4 HalfReuse: 'o'/5 HalfReuse: 's'/1 }"e_bracket"/6 Tile{ ]] }
    if( ! refalrts::alloc_chars( context[6], context[7], "e_bracket", 9 ) )
      return refalrts::cNoMemory;
    refalrts::reinit_char( context[0], 'c' );
    refalrts::reinit_char( context[4], 'l' );
    refalrts::reinit_char( context[5], 'o' );
    refalrts::reinit_char( context[1], 's' );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = arg_end->next;
    res = refalrts::splice_evar( res, context[6], context[7] );
    refalrts::use( res );
    return refalrts::FnResult(refalrts::cSuccess | (__LINE__ << 8));
  } while ( 0 );

  do {
    refalrts::start_sentence();
    //#ElOpenCall
    // </0 & AllocatorFuncName/4 # ElOpenCall/5 >/1
    if( ! refalrts::ident_term(  & ident_ElOpenCall<int>::name, context[5] ) )
      continue;

    refalrts::reset_allocator();
    //TRASH: {REMOVED TILE}  {REMOVED TILE} 
    //RESULT: Tile{ [[ HalfReuse: 'o'/0 HalfReuse: 'p'/4 HalfReuse: 'e'/5 HalfReuse: 'n'/1 }"_call"/6 Tile{ ]] }
    if( ! refalrts::alloc_chars( context[6], context[7], "_call", 5 ) )
      return refalrts::cNoMemory;
    refalrts::reinit_char( context[0], 'o' );
    refalrts::reinit_char( context[4], 'p' );
    refalrts::reinit_char( context[5], 'e' );
    refalrts::reinit_char( context[1], 'n' );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = arg_end->next;
    res = refalrts::splice_evar( res, context[6], context[7] );
    refalrts::use( res );
    return refalrts::FnResult(refalrts::cSuccess | (__LINE__ << 8));
  } while ( 0 );

  //#ElCloseCall
  // </0 & AllocatorFuncName/4 # ElCloseCall/5 >/1
  if( ! refalrts::ident_term(  & ident_ElCloseCall<int>::name, context[5] ) )
    return refalrts::cRecognitionImpossible;

  refalrts::reset_allocator();
  //TRASH: {REMOVED TILE}  {REMOVED TILE} 
  //RESULT: Tile{ [[ HalfReuse: 'c'/0 HalfReuse: 'l'/4 HalfReuse: 'o'/5 HalfReuse: 's'/1 }"e_call"/6 Tile{ ]] }
  if( ! refalrts::alloc_chars( context[6], context[7], "e_call", 6 ) )
    return refalrts::cNoMemory;
  refalrts::reinit_char( context[0], 'c' );
  refalrts::reinit_char( context[4], 'l' );
  refalrts::reinit_char( context[5], 'o' );
  refalrts::reinit_char( context[1], 's' );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = arg_end->next;
  res = refalrts::splice_evar( res, context[6], context[7] );
  refalrts::use( res );
  return refalrts::FnResult(refalrts::cSuccess | (__LINE__ << 8));
#endif
}

static refalrts::FnResult AllocatorFuncArgument(refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  refalrts::this_is_generated_function();
  // issue here memory for vars with 17 elems
  refalrts::Iter context[17];
  refalrts::zeros( context, 17 );
#ifdef INTERPRET
  static const refalrts::RefalFunction functions[] = {
    { StrFromInt, "StrFromInt" },
    { PrintName, "PrintName" },
    { Escape, "Escape" }
  };
  static const refalrts::RefalIdentifier idents[] = {
    & ident_ElIdent<int>::name,
    & ident_ElNumber<int>::name,
    & ident_ElName<int>::name,
    & ident_ElChar<int>::name
  };
  using refalrts::numbers;
  static const refalrts::StringItem strings[] = {
    {"int>::name", 10},
    {", & ide", 7},
    {"UL", 2},
    {", \"", 3},
    {", ", 2}
  };
  static const refalrts::RASLCommand raa[] = {
    //FAST GEN:E 
    //GLOBAL GEN:S E 
    // </0 & AllocatorFuncArgument/4 s.idx#0/5 e.idxV#0/2 >/1
    {refalrts::icInitB0_Lite, 0, 0, 0},
    {refalrts::icCallSaveLeft, 0, 2, 0},
    {refalrts::icsVarLeft, 0, 5, 2},
    // closed e.idxV#0 as range 2
    {refalrts::icOnFailGoTo, +17, 0, 0},
    //#ElCharS 
    // </0 & AllocatorFuncArgument/4 # ElChar/5 s.Char#1/6 >/1
    {refalrts::icIdentTerm, 0, 3, 5},
    {refalrts::icSave, 0, 15, 2},
    {refalrts::icsVarLeft, 0, 6, 15},
    {refalrts::icEmpty, 0, 0, 15},
    {refalrts::icEmptyResult, 0, 0, 0},
    //TRASH: {REMOVED TILE}  {REMOVED TILE}  {REMOVED TILE} 
    //RESULT: Tile{ [[ }", "/7 Tile{ HalfReuse: '\''/0 HalfReuse: </4 HalfReuse: & Escape/5 AsIs: s.Char#1/6 AsIs: >/1 } '\''/9 Tile{ ]] }
    {refalrts::icAllocString, 0, 4, 7},
    {refalrts::icAllocChar, 0, '\'', 9},
    {refalrts::icReinitChar, 0, '\'', 0},
    {refalrts::icReinitBracket, 0, refalrts::ibOpenCall, 4},
    {refalrts::icReinitFunc, 0, 2, 5},
    {refalrts::icPushStack, 0, 0, 1},
    {refalrts::icPushStack, 0, 0, 4},
    {refalrts::icSetResRightEdge, 0, 0, 0},
    {refalrts::icSpliceTile, 9, 9, 0},
    {refalrts::icSpliceTile, 0, 1, 0},
    {refalrts::icSpliceTile, 7, 8, 0},
    {refalrts::icReturnResult_NoTrash, 0, 0, 0},
    {refalrts::icOnFailGoTo, +21, 0, 0},
    //#ElNameE 
    // </0 & AllocatorFuncArgument/4 # ElName/5 e.Name#1/2 >/1
    {refalrts::icIdentTerm, 0, 2, 5},
    // closed e.Name#1 as range 2
    {refalrts::icEmptyResult, 0, 0, 0},
    //TRASH: {REMOVED TILE}  {REMOVED TILE}  {REMOVED TILE} 
    //RESULT: Tile{ [[ } ','/6 Tile{ HalfReuse: ' '/0 HalfReuse: </4 HalfReuse: & PrintName/5 AsIs: e.Name#1/2 AsIs: >/1 }", \""/7 </9 & PrintName/10 e.Name#1/2/11 >/13 '\"'/14 Tile{ ]] }
    {refalrts::icAllocChar, 0, ',', 6},
    {refalrts::icAllocString, 0, 3, 7},
    {refalrts::icAllocBracket, 0, refalrts::ibOpenCall, 9},
    {refalrts::icAllocFunc, 0, 1, 10},
    {refalrts::icCopyEVar, 11, 2, 0},
    {refalrts::icAllocBracket, 0, refalrts::ibCloseCall, 13},
    {refalrts::icAllocChar, 0, '\"', 14},
    {refalrts::icReinitChar, 0, ' ', 0},
    {refalrts::icReinitBracket, 0, refalrts::ibOpenCall, 4},
    {refalrts::icReinitFunc, 0, 1, 5},
    {refalrts::icPushStack, 0, 0, 13},
    {refalrts::icPushStack, 0, 0, 9},
    {refalrts::icPushStack, 0, 0, 1},
    {refalrts::icPushStack, 0, 0, 4},
    {refalrts::icSetResRightEdge, 0, 0, 0},
    {refalrts::icSpliceTile, 7, 14, 0},
    {refalrts::icSpliceTile, 0, 1, 0},
    {refalrts::icSpliceTile, 6, 6, 0},
    {refalrts::icReturnResult_NoTrash, 0, 0, 0},
    {refalrts::icOnFailGoTo, +17, 0, 0},
    //#ElNumberS 
    // </0 & AllocatorFuncArgument/4 # ElNumber/5 s.Number#1/6 >/1
    {refalrts::icIdentTerm, 0, 1, 5},
    {refalrts::icSave, 0, 15, 2},
    {refalrts::icsVarLeft, 0, 6, 15},
    {refalrts::icEmpty, 0, 0, 15},
    {refalrts::icEmptyResult, 0, 0, 0},
    //TRASH: {REMOVED TILE}  {REMOVED TILE}  {REMOVED TILE} 
    //RESULT: Tile{ [[ } ','/7 Tile{ HalfReuse: ' '/0 HalfReuse: </4 HalfReuse: & StrFromInt/5 AsIs: s.Number#1/6 AsIs: >/1 }"UL"/8 Tile{ ]] }
    {refalrts::icAllocChar, 0, ',', 7},
    {refalrts::icAllocString, 0, 2, 8},
    {refalrts::icReinitChar, 0, ' ', 0},
    {refalrts::icReinitBracket, 0, refalrts::ibOpenCall, 4},
    {refalrts::icReinitFunc, 0, 0, 5},
    {refalrts::icPushStack, 0, 0, 1},
    {refalrts::icPushStack, 0, 0, 4},
    {refalrts::icSetResRightEdge, 0, 0, 0},
    {refalrts::icSpliceTile, 8, 9, 0},
    {refalrts::icSpliceTile, 0, 1, 0},
    {refalrts::icSpliceTile, 7, 7, 0},
    {refalrts::icReturnResult_NoTrash, 0, 0, 0},
    {refalrts::icOnFailGoTo, +13, 0, 0},
    //#ElIdentE 
    // </0 & AllocatorFuncArgument/4 # ElIdent/5 e.Name#1/2 >/1
    {refalrts::icIdentTerm, 0, 0, 5},
    // closed e.Name#1 as range 2
    {refalrts::icEmptyResult, 0, 0, 0},
    //TRASH: {REMOVED TILE}  {REMOVED TILE}  {REMOVED TILE} 
    //RESULT: Tile{ [[ }", & ide"/6 Tile{ HalfReuse: 'n'/0 HalfReuse: 't'/4 HalfReuse: '_'/5 AsIs: e.Name#1/2 HalfReuse: '<'/1 }"int>::name"/8 Tile{ ]] }
    {refalrts::icAllocString, 0, 1, 6},
    {refalrts::icAllocString, 0, 0, 8},
    {refalrts::icReinitChar, 0, 'n', 0},
    {refalrts::icReinitChar, 0, 't', 4},
    {refalrts::icReinitChar, 0, '_', 5},
    {refalrts::icReinitChar, 0, '<', 1},
    {refalrts::icSetResRightEdge, 0, 0, 0},
    {refalrts::icSpliceTile, 8, 9, 0},
    {refalrts::icSpliceTile, 0, 1, 0},
    {refalrts::icSpliceTile, 6, 7, 0},
    {refalrts::icReturnResult_NoTrash, 0, 0, 0},
    //S 
    // </0 & AllocatorFuncArgument/4 s.Other#1/5 >/1
    {refalrts::icEmpty, 0, 0, 2},
    {refalrts::icEmptyResult, 0, 0, 0},
    //TRASH: {REMOVED TILE}  </0 & AllocatorFuncArgument/4 s.Other#1/5 >/1 {REMOVED TILE} 
    //RESULT: Tile{ [[ } Tile{ ]] }
    {refalrts::icSetResRightEdge, 0, 0, 0},
    {refalrts::icTrashLeftEdge, 0, 0, 0},
    {refalrts::icReturnResult_NoTrash, 0, 0, 0},
    {refalrts::icEnd, 0, 0, 0}
  };
  int open_e_stack[4];
  refalrts::FnResult res = refalrts::interpret_array(
    raa, context, arg_begin, arg_end,
    functions, idents, numbers, strings, open_e_stack
  );
  return res;
#else
  //FAST GEN:E 
  //GLOBAL GEN:S E 
  // </0 & AllocatorFuncArgument/4 s.idx#0/5 e.idxV#0/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  if( ! refalrts::svar_left( context[5], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  // closed e.idxV#0 as range 2
  do {
    refalrts::start_sentence();
    //#ElCharS 
    // </0 & AllocatorFuncArgument/4 # ElChar/5 s.Char#1/6 >/1
    if( ! refalrts::ident_term(  & ident_ElChar<int>::name, context[5] ) )
      continue;
    context[15] = context[2];
    context[16] = context[3];
    if( ! refalrts::svar_left( context[6], context[15], context[16] ) )
      continue;
    if( ! refalrts::empty_seq( context[15], context[16] ) )
      continue;

    refalrts::reset_allocator();
    //TRASH: {REMOVED TILE}  {REMOVED TILE}  {REMOVED TILE} 
    //RESULT: Tile{ [[ }", "/7 Tile{ HalfReuse: '\''/0 HalfReuse: </4 HalfReuse: & Escape/5 AsIs: s.Char#1/6 AsIs: >/1 } '\''/9 Tile{ ]] }
    if( ! refalrts::alloc_chars( context[7], context[8], ", ", 2 ) )
      return refalrts::cNoMemory;
    if( ! refalrts::alloc_char( context[9], '\'' ) )
      return refalrts::cNoMemory;
    refalrts::reinit_char( context[0], '\'' );
    refalrts::reinit_open_call( context[4] );
    refalrts::reinit_name( context[5], Escape, "Escape" );
    refalrts::push_stack( context[1] );
    refalrts::push_stack( context[4] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = arg_end->next;
    res = refalrts::splice_evar( res, context[9], context[9] );
    res = refalrts::splice_evar( res, context[0], context[1] );
    res = refalrts::splice_evar( res, context[7], context[8] );
    refalrts::use( res );
    return refalrts::FnResult(refalrts::cSuccess | (__LINE__ << 8));
  } while ( 0 );

  do {
    refalrts::start_sentence();
    //#ElNameE 
    // </0 & AllocatorFuncArgument/4 # ElName/5 e.Name#1/2 >/1
    if( ! refalrts::ident_term(  & ident_ElName<int>::name, context[5] ) )
      continue;
    // closed e.Name#1 as range 2

    refalrts::reset_allocator();
    //TRASH: {REMOVED TILE}  {REMOVED TILE}  {REMOVED TILE} 
    //RESULT: Tile{ [[ } ','/6 Tile{ HalfReuse: ' '/0 HalfReuse: </4 HalfReuse: & PrintName/5 AsIs: e.Name#1/2 AsIs: >/1 }", \""/7 </9 & PrintName/10 e.Name#1/2/11 >/13 '\"'/14 Tile{ ]] }
    if( ! refalrts::alloc_char( context[6], ',' ) )
      return refalrts::cNoMemory;
    if( ! refalrts::alloc_chars( context[7], context[8], ", \"", 3 ) )
      return refalrts::cNoMemory;
    if( ! refalrts::alloc_open_call( context[9] ) )
      return refalrts::cNoMemory;
    if( ! refalrts::alloc_name( context[10], PrintName, "PrintName" ) )
      return refalrts::cNoMemory;
    if (! refalrts::copy_evar(context[11], context[12], context[2], context[3]))
      return refalrts::cNoMemory;
    if( ! refalrts::alloc_close_call( context[13] ) )
      return refalrts::cNoMemory;
    if( ! refalrts::alloc_char( context[14], '\"' ) )
      return refalrts::cNoMemory;
    refalrts::reinit_char( context[0], ' ' );
    refalrts::reinit_open_call( context[4] );
    refalrts::reinit_name( context[5], PrintName, "PrintName" );
    refalrts::push_stack( context[13] );
    refalrts::push_stack( context[9] );
    refalrts::push_stack( context[1] );
    refalrts::push_stack( context[4] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = arg_end->next;
    res = refalrts::splice_evar( res, context[7], context[14] );
    res = refalrts::splice_evar( res, context[0], context[1] );
    res = refalrts::splice_evar( res, context[6], context[6] );
    refalrts::use( res );
    return refalrts::FnResult(refalrts::cSuccess | (__LINE__ << 8));
  } while ( 0 );

  do {
    refalrts::start_sentence();
    //#ElNumberS 
    // </0 & AllocatorFuncArgument/4 # ElNumber/5 s.Number#1/6 >/1
    if( ! refalrts::ident_term(  & ident_ElNumber<int>::name, context[5] ) )
      continue;
    context[15] = context[2];
    context[16] = context[3];
    if( ! refalrts::svar_left( context[6], context[15], context[16] ) )
      continue;
    if( ! refalrts::empty_seq( context[15], context[16] ) )
      continue;

    refalrts::reset_allocator();
    //TRASH: {REMOVED TILE}  {REMOVED TILE}  {REMOVED TILE} 
    //RESULT: Tile{ [[ } ','/7 Tile{ HalfReuse: ' '/0 HalfReuse: </4 HalfReuse: & StrFromInt/5 AsIs: s.Number#1/6 AsIs: >/1 }"UL"/8 Tile{ ]] }
    if( ! refalrts::alloc_char( context[7], ',' ) )
      return refalrts::cNoMemory;
    if( ! refalrts::alloc_chars( context[8], context[9], "UL", 2 ) )
      return refalrts::cNoMemory;
    refalrts::reinit_char( context[0], ' ' );
    refalrts::reinit_open_call( context[4] );
    refalrts::reinit_name( context[5], StrFromInt, "StrFromInt" );
    refalrts::push_stack( context[1] );
    refalrts::push_stack( context[4] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = arg_end->next;
    res = refalrts::splice_evar( res, context[8], context[9] );
    res = refalrts::splice_evar( res, context[0], context[1] );
    res = refalrts::splice_evar( res, context[7], context[7] );
    refalrts::use( res );
    return refalrts::FnResult(refalrts::cSuccess | (__LINE__ << 8));
  } while ( 0 );

  do {
    refalrts::start_sentence();
    //#ElIdentE 
    // </0 & AllocatorFuncArgument/4 # ElIdent/5 e.Name#1/2 >/1
    if( ! refalrts::ident_term(  & ident_ElIdent<int>::name, context[5] ) )
      continue;
    // closed e.Name#1 as range 2

    refalrts::reset_allocator();
    //TRASH: {REMOVED TILE}  {REMOVED TILE}  {REMOVED TILE} 
    //RESULT: Tile{ [[ }", & ide"/6 Tile{ HalfReuse: 'n'/0 HalfReuse: 't'/4 HalfReuse: '_'/5 AsIs: e.Name#1/2 HalfReuse: '<'/1 }"int>::name"/8 Tile{ ]] }
    if( ! refalrts::alloc_chars( context[6], context[7], ", & ide", 7 ) )
      return refalrts::cNoMemory;
    if( ! refalrts::alloc_chars( context[8], context[9], "int>::name", 10 ) )
      return refalrts::cNoMemory;
    refalrts::reinit_char( context[0], 'n' );
    refalrts::reinit_char( context[4], 't' );
    refalrts::reinit_char( context[5], '_' );
    refalrts::reinit_char( context[1], '<' );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = arg_end->next;
    res = refalrts::splice_evar( res, context[8], context[9] );
    res = refalrts::splice_evar( res, context[0], context[1] );
    res = refalrts::splice_evar( res, context[6], context[7] );
    refalrts::use( res );
    return refalrts::FnResult(refalrts::cSuccess | (__LINE__ << 8));
  } while ( 0 );

  //S 
  // </0 & AllocatorFuncArgument/4 s.Other#1/5 >/1
  if( ! refalrts::empty_seq( context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;

  refalrts::reset_allocator();
  //TRASH: {REMOVED TILE}  </0 & AllocatorFuncArgument/4 s.Other#1/5 >/1 {REMOVED TILE} 
  //RESULT: Tile{ [[ } Tile{ ]] }
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = arg_end->next;
  refalrts::use( res );
  refalrts::splice_to_freelist_open( trash_prev, res );
  return refalrts::FnResult(refalrts::cSuccess | (__LINE__ << 8));
#endif
}

static refalrts::FnResult PrintInterpretCreateElem(refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  refalrts::this_is_generated_function();
  // issue here memory for vars with 31 elems
  refalrts::Iter context[31];
  refalrts::zeros( context, 31 );
#ifdef INTERPRET
  static const refalrts::RefalFunction functions[] = {
    { CreateCommandTag, "CreateCommandTag" },
    { StrFromInt, "StrFromInt" },
    { CreateCommandInfo, "CreateCommandInfo" },
    { CreateMode, "CreateMode" }
  };
  using refalrts::idents;
  using refalrts::numbers;
  static const refalrts::StringItem strings[] = {
    {"},", 2},
    {", ", 2},
    {", 0, ", 5},
    {"refalrts::ic", 12}
  };
  static const refalrts::RASLCommand raa[] = {
    // </0 & PrintInterpretCreateElem/4 (/7 e.Indent#1/5 )/8 s.Mode#1/9 s.ElemNumber#1/10 s.ElementType#1/11 e.Info#1/2 >/1
    {refalrts::icInitB0_Lite, 0, 0, 0},
    {refalrts::icCallSaveLeft, 0, 2, 0},
    {refalrts::icBracketLeftSave, 0, 5, 2},
    // closed e.Indent#1 as range 5
    {refalrts::icsVarLeft, 0, 9, 2},
    {refalrts::icsVarLeft, 0, 10, 2},
    {refalrts::icsVarLeft, 0, 11, 2},
    // closed e.Info#1 as range 2
    {refalrts::icEmptyResult, 0, 0, 0},
    //TRASH: {REMOVED TILE}  {REMOVED TILE}  {REMOVED TILE}  {REMOVED TILE}  {REMOVED TILE}  {REMOVED TILE}  {REMOVED TILE} 
    //RESULT: Tile{ [[ } Tile{ AsIs: (/7 AsIs: e.Indent#1/5 HalfReuse: '{'/8 }"refalrts::ic"/12 </14 & CreateMode/15 Tile{ AsIs: s.Mode#1/9 } >/16 Tile{ AsIs: </0 Reuse: & CreateCommandTag/4 } s.ElementType#1/11/17 >/18", 0, "/19 </21 & CreateCommandInfo/22 Tile{ AsIs: s.ElementType#1/11 AsIs: e.Info#1/2 AsIs: >/1 }", "/23 </25 & StrFromInt/26 Tile{ AsIs: s.ElemNumber#1/10 } >/27"},"/28 )/30 Tile{ ]] }
    {refalrts::icAllocString, 0, 3, 12},
    {refalrts::icAllocBracket, 0, refalrts::ibOpenCall, 14},
    {refalrts::icAllocFunc, 0, 3, 15},
    {refalrts::icAllocBracket, 0, refalrts::ibCloseCall, 16},
    {refalrts::icCopySTVar, 17, 11, 0},
    {refalrts::icAllocBracket, 0, refalrts::ibCloseCall, 18},
    {refalrts::icAllocString, 0, 2, 19},
    {refalrts::icAllocBracket, 0, refalrts::ibOpenCall, 21},
    {refalrts::icAllocFunc, 0, 2, 22},
    {refalrts::icAllocString, 0, 1, 23},
    {refalrts::icAllocBracket, 0, refalrts::ibOpenCall, 25},
    {refalrts::icAllocFunc, 0, 1, 26},
    {refalrts::icAllocBracket, 0, refalrts::ibCloseCall, 27},
    {refalrts::icAllocString, 0, 0, 28},
    {refalrts::icAllocBracket, 0, refalrts::ibCloseBracket, 30},
    {refalrts::icReinitChar, 0, '{', 8},
    {refalrts::icUpdateFunc, 0, 0, 4},
    {refalrts::icLinkBrackets, 7, 30, 0},
    {refalrts::icPushStack, 0, 0, 27},
    {refalrts::icPushStack, 0, 0, 25},
    {refalrts::icPushStack, 0, 0, 1},
    {refalrts::icPushStack, 0, 0, 21},
    {refalrts::icPushStack, 0, 0, 18},
    {refalrts::icPushStack, 0, 0, 0},
    {refalrts::icPushStack, 0, 0, 16},
    {refalrts::icPushStack, 0, 0, 14},
    {refalrts::icSetResRightEdge, 0, 0, 0},
    {refalrts::icSpliceTile, 27, 30, 0},
    {refalrts::icSpliceTile, 10, 10, 0},
    {refalrts::icSpliceTile, 23, 26, 0},
    {refalrts::icSpliceTile, 11, 1, 0},
    {refalrts::icSpliceTile, 17, 22, 0},
    {refalrts::icSpliceTile, 0, 4, 0},
    {refalrts::icSpliceTile, 16, 16, 0},
    {refalrts::icSpliceTile, 9, 9, 0},
    {refalrts::icSpliceTile, 12, 15, 0},
    {refalrts::icSpliceTile, 7, 8, 0},
    {refalrts::icReturnResult_NoTrash, 0, 0, 0},
    {refalrts::icEnd, 0, 0, 0}
  };
  int open_e_stack[1];
  refalrts::FnResult res = refalrts::interpret_array(
    raa, context, arg_begin, arg_end,
    functions, idents, numbers, strings, open_e_stack
  );
  return res;
#else
  // </0 & PrintInterpretCreateElem/4 (/7 e.Indent#1/5 )/8 s.Mode#1/9 s.ElemNumber#1/10 s.ElementType#1/11 e.Info#1/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  context[5] = 0;
  context[6] = 0;
  context[7] = refalrts::brackets_left( context[5], context[6], context[2], context[3] );
  if( ! context[7] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[7], context[8]);
  // closed e.Indent#1 as range 5
  if( ! refalrts::svar_left( context[9], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  if( ! refalrts::svar_left( context[10], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  if( ! refalrts::svar_left( context[11], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  // closed e.Info#1 as range 2

  refalrts::reset_allocator();
  //TRASH: {REMOVED TILE}  {REMOVED TILE}  {REMOVED TILE}  {REMOVED TILE}  {REMOVED TILE}  {REMOVED TILE}  {REMOVED TILE} 
  //RESULT: Tile{ [[ } Tile{ AsIs: (/7 AsIs: e.Indent#1/5 HalfReuse: '{'/8 }"refalrts::ic"/12 </14 & CreateMode/15 Tile{ AsIs: s.Mode#1/9 } >/16 Tile{ AsIs: </0 Reuse: & CreateCommandTag/4 } s.ElementType#1/11/17 >/18", 0, "/19 </21 & CreateCommandInfo/22 Tile{ AsIs: s.ElementType#1/11 AsIs: e.Info#1/2 AsIs: >/1 }", "/23 </25 & StrFromInt/26 Tile{ AsIs: s.ElemNumber#1/10 } >/27"},"/28 )/30 Tile{ ]] }
  if( ! refalrts::alloc_chars( context[12], context[13], "refalrts::ic", 12 ) )
    return refalrts::cNoMemory;
  if( ! refalrts::alloc_open_call( context[14] ) )
    return refalrts::cNoMemory;
  if( ! refalrts::alloc_name( context[15], CreateMode, "CreateMode" ) )
    return refalrts::cNoMemory;
  if( ! refalrts::alloc_close_call( context[16] ) )
    return refalrts::cNoMemory;
  if (! refalrts::copy_stvar(context[17], context[11]))
    return refalrts::cNoMemory;
  if( ! refalrts::alloc_close_call( context[18] ) )
    return refalrts::cNoMemory;
  if( ! refalrts::alloc_chars( context[19], context[20], ", 0, ", 5 ) )
    return refalrts::cNoMemory;
  if( ! refalrts::alloc_open_call( context[21] ) )
    return refalrts::cNoMemory;
  if( ! refalrts::alloc_name( context[22], CreateCommandInfo, "CreateCommandInfo" ) )
    return refalrts::cNoMemory;
  if( ! refalrts::alloc_chars( context[23], context[24], ", ", 2 ) )
    return refalrts::cNoMemory;
  if( ! refalrts::alloc_open_call( context[25] ) )
    return refalrts::cNoMemory;
  if( ! refalrts::alloc_name( context[26], StrFromInt, "StrFromInt" ) )
    return refalrts::cNoMemory;
  if( ! refalrts::alloc_close_call( context[27] ) )
    return refalrts::cNoMemory;
  if( ! refalrts::alloc_chars( context[28], context[29], "},", 2 ) )
    return refalrts::cNoMemory;
  if( ! refalrts::alloc_close_bracket( context[30] ) )
    return refalrts::cNoMemory;
  refalrts::reinit_char( context[8], '{' );
  refalrts::update_name( context[4], CreateCommandTag, "CreateCommandTag" );
  refalrts::link_brackets( context[7], context[30] );
  refalrts::push_stack( context[27] );
  refalrts::push_stack( context[25] );
  refalrts::push_stack( context[1] );
  refalrts::push_stack( context[21] );
  refalrts::push_stack( context[18] );
  refalrts::push_stack( context[0] );
  refalrts::push_stack( context[16] );
  refalrts::push_stack( context[14] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = arg_end->next;
  res = refalrts::splice_evar( res, context[27], context[30] );
  res = refalrts::splice_evar( res, context[10], context[10] );
  res = refalrts::splice_evar( res, context[23], context[26] );
  res = refalrts::splice_evar( res, context[11], context[1] );
  res = refalrts::splice_evar( res, context[17], context[22] );
  res = refalrts::splice_evar( res, context[0], context[4] );
  res = refalrts::splice_evar( res, context[16], context[16] );
  res = refalrts::splice_evar( res, context[9], context[9] );
  res = refalrts::splice_evar( res, context[12], context[15] );
  res = refalrts::splice_evar( res, context[7], context[8] );
  refalrts::use( res );
  return refalrts::FnResult(refalrts::cSuccess | (__LINE__ << 8));
#endif
}

static refalrts::FnResult CreateMode(refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  refalrts::this_is_generated_function();
  // issue here memory for vars with 8 elems
  refalrts::Iter context[8];
  refalrts::zeros( context, 8 );
#ifdef INTERPRET
  using refalrts::functions;
  static const refalrts::RefalIdentifier idents[] = {
    & ident_Update<int>::name,
    & ident_Reinit<int>::name,
    & ident_Allocate<int>::name
  };
  using refalrts::numbers;
  static const refalrts::StringItem strings[] = {
    {"te", 2},
    {"it", 2}
  };
  static const refalrts::RASLCommand raa[] = {
    //FAST GEN:S 
    //GLOBAL GEN:S 
    // </0 & CreateMode/4 s.idx#0/5 >/1
    {refalrts::icInitB0_Lite, 0, 0, 0},
    {refalrts::icCallSaveLeft, 0, 2, 0},
    {refalrts::icsVarLeft, 0, 5, 2},
    {refalrts::icEmpty, 0, 0, 2},
    {refalrts::icOnFailGoTo, +10, 0, 0},
    //#Allocate
    // </0 & CreateMode/4 # Allocate/5 >/1
    {refalrts::icIdentTerm, 0, 2, 5},
    {refalrts::icEmptyResult, 0, 0, 0},
    //TRASH: {REMOVED TILE}  {REMOVED TILE} 
    //RESULT: Tile{ [[ HalfReuse: 'A'/0 HalfReuse: 'l'/4 HalfReuse: 'l'/5 HalfReuse: 'o'/1 } 'c'/6 Tile{ ]] }
    {refalrts::icAllocChar, 0, 'c', 6},
    {refalrts::icReinitChar, 0, 'A', 0},
    {refalrts::icReinitChar, 0, 'l', 4},
    {refalrts::icReinitChar, 0, 'l', 5},
    {refalrts::icReinitChar, 0, 'o', 1},
    {refalrts::icSetResRightEdge, 0, 0, 0},
    {refalrts::icSpliceTile, 6, 6, 0},
    {refalrts::icReturnResult_NoTrash, 0, 0, 0},
    {refalrts::icOnFailGoTo, +10, 0, 0},
    //#Reinit
    // </0 & CreateMode/4 # Reinit/5 >/1
    {refalrts::icIdentTerm, 0, 1, 5},
    {refalrts::icEmptyResult, 0, 0, 0},
    //TRASH: {REMOVED TILE}  {REMOVED TILE} 
    //RESULT: Tile{ [[ HalfReuse: 'R'/0 HalfReuse: 'e'/4 HalfReuse: 'i'/5 HalfReuse: 'n'/1 }"it"/6 Tile{ ]] }
    {refalrts::icAllocString, 0, 1, 6},
    {refalrts::icReinitChar, 0, 'R', 0},
    {refalrts::icReinitChar, 0, 'e', 4},
    {refalrts::icReinitChar, 0, 'i', 5},
    {refalrts::icReinitChar, 0, 'n', 1},
    {refalrts::icSetResRightEdge, 0, 0, 0},
    {refalrts::icSpliceTile, 6, 7, 0},
    {refalrts::icReturnResult_NoTrash, 0, 0, 0},
    //#Update
    // </0 & CreateMode/4 # Update/5 >/1
    {refalrts::icIdentTerm, 0, 0, 5},
    {refalrts::icEmptyResult, 0, 0, 0},
    //TRASH: {REMOVED TILE}  {REMOVED TILE} 
    //RESULT: Tile{ [[ HalfReuse: 'U'/0 HalfReuse: 'p'/4 HalfReuse: 'd'/5 HalfReuse: 'a'/1 }"te"/6 Tile{ ]] }
    {refalrts::icAllocString, 0, 0, 6},
    {refalrts::icReinitChar, 0, 'U', 0},
    {refalrts::icReinitChar, 0, 'p', 4},
    {refalrts::icReinitChar, 0, 'd', 5},
    {refalrts::icReinitChar, 0, 'a', 1},
    {refalrts::icSetResRightEdge, 0, 0, 0},
    {refalrts::icSpliceTile, 6, 7, 0},
    {refalrts::icReturnResult_NoTrash, 0, 0, 0},
    {refalrts::icEnd, 0, 0, 0}
  };
  int open_e_stack[2];
  refalrts::FnResult res = refalrts::interpret_array(
    raa, context, arg_begin, arg_end,
    functions, idents, numbers, strings, open_e_stack
  );
  return res;
#else
  //FAST GEN:S 
  //GLOBAL GEN:S 
  // </0 & CreateMode/4 s.idx#0/5 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  if( ! refalrts::svar_left( context[5], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  if( ! refalrts::empty_seq( context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  do {
    refalrts::start_sentence();
    //#Allocate
    // </0 & CreateMode/4 # Allocate/5 >/1
    if( ! refalrts::ident_term(  & ident_Allocate<int>::name, context[5] ) )
      continue;

    refalrts::reset_allocator();
    //TRASH: {REMOVED TILE}  {REMOVED TILE} 
    //RESULT: Tile{ [[ HalfReuse: 'A'/0 HalfReuse: 'l'/4 HalfReuse: 'l'/5 HalfReuse: 'o'/1 } 'c'/6 Tile{ ]] }
    if( ! refalrts::alloc_char( context[6], 'c' ) )
      return refalrts::cNoMemory;
    refalrts::reinit_char( context[0], 'A' );
    refalrts::reinit_char( context[4], 'l' );
    refalrts::reinit_char( context[5], 'l' );
    refalrts::reinit_char( context[1], 'o' );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = arg_end->next;
    res = refalrts::splice_evar( res, context[6], context[6] );
    refalrts::use( res );
    return refalrts::FnResult(refalrts::cSuccess | (__LINE__ << 8));
  } while ( 0 );

  do {
    refalrts::start_sentence();
    //#Reinit
    // </0 & CreateMode/4 # Reinit/5 >/1
    if( ! refalrts::ident_term(  & ident_Reinit<int>::name, context[5] ) )
      continue;

    refalrts::reset_allocator();
    //TRASH: {REMOVED TILE}  {REMOVED TILE} 
    //RESULT: Tile{ [[ HalfReuse: 'R'/0 HalfReuse: 'e'/4 HalfReuse: 'i'/5 HalfReuse: 'n'/1 }"it"/6 Tile{ ]] }
    if( ! refalrts::alloc_chars( context[6], context[7], "it", 2 ) )
      return refalrts::cNoMemory;
    refalrts::reinit_char( context[0], 'R' );
    refalrts::reinit_char( context[4], 'e' );
    refalrts::reinit_char( context[5], 'i' );
    refalrts::reinit_char( context[1], 'n' );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = arg_end->next;
    res = refalrts::splice_evar( res, context[6], context[7] );
    refalrts::use( res );
    return refalrts::FnResult(refalrts::cSuccess | (__LINE__ << 8));
  } while ( 0 );

  //#Update
  // </0 & CreateMode/4 # Update/5 >/1
  if( ! refalrts::ident_term(  & ident_Update<int>::name, context[5] ) )
    return refalrts::cRecognitionImpossible;

  refalrts::reset_allocator();
  //TRASH: {REMOVED TILE}  {REMOVED TILE} 
  //RESULT: Tile{ [[ HalfReuse: 'U'/0 HalfReuse: 'p'/4 HalfReuse: 'd'/5 HalfReuse: 'a'/1 }"te"/6 Tile{ ]] }
  if( ! refalrts::alloc_chars( context[6], context[7], "te", 2 ) )
    return refalrts::cNoMemory;
  refalrts::reinit_char( context[0], 'U' );
  refalrts::reinit_char( context[4], 'p' );
  refalrts::reinit_char( context[5], 'd' );
  refalrts::reinit_char( context[1], 'a' );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = arg_end->next;
  res = refalrts::splice_evar( res, context[6], context[7] );
  refalrts::use( res );
  return refalrts::FnResult(refalrts::cSuccess | (__LINE__ << 8));
#endif
}

static refalrts::FnResult CreateCommandTag(refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  refalrts::this_is_generated_function();
  // issue here memory for vars with 8 elems
  refalrts::Iter context[8];
  refalrts::zeros( context, 8 );
#ifdef INTERPRET
  using refalrts::functions;
  static const refalrts::RefalIdentifier idents[] = {
    & ident_ElString<int>::name,
    & ident_ElCloseCall<int>::name,
    & ident_ElCloseADT<int>::name,
    & ident_ElCloseBracket<int>::name,
    & ident_ElOpenCall<int>::name,
    & ident_ElOpenADT<int>::name,
    & ident_ElOpenBracket<int>::name,
    & ident_ElIdent<int>::name,
    & ident_ElHugeNumber<int>::name,
    & ident_ElNumber<int>::name,
    & ident_ElName<int>::name,
    & ident_ElChar<int>::name
  };
  using refalrts::numbers;
  static const refalrts::StringItem strings[] = {
    {"ng", 2},
    {"ket", 3},
    {"Int", 3}
  };
  static const refalrts::RASLCommand raa[] = {
    //FAST GEN:S 
    //GLOBAL GEN:S 
    // </0 & CreateCommandTag/4 s.idx#0/5 >/1
    {refalrts::icInitB0_Lite, 0, 0, 0},
    {refalrts::icCallSaveLeft, 0, 2, 0},
    {refalrts::icsVarLeft, 0, 5, 2},
    {refalrts::icEmpty, 0, 0, 2},
    {refalrts::icOnFailGoTo, +7, 0, 0},
    //#ElChar
    // </0 & CreateCommandTag/4 # ElChar/5 >/1
    {refalrts::icIdentTerm, 0, 11, 5},
    {refalrts::icEmptyResult, 0, 0, 0},
    //TRASH: {REMOVED TILE} 
    //RESULT: Tile{ [[ HalfReuse: 'C'/0 HalfReuse: 'h'/4 HalfReuse: 'a'/5 HalfReuse: 'r'/1 ]] }
    {refalrts::icReinitChar, 0, 'C', 0},
    {refalrts::icReinitChar, 0, 'h', 4},
    {refalrts::icReinitChar, 0, 'a', 5},
    {refalrts::icReinitChar, 0, 'r', 1},
    {refalrts::icReturnResult_NoTrash, 0, 0, 0},
    {refalrts::icOnFailGoTo, +7, 0, 0},
    //#ElName
    // </0 & CreateCommandTag/4 # ElName/5 >/1
    {refalrts::icIdentTerm, 0, 10, 5},
    {refalrts::icEmptyResult, 0, 0, 0},
    //TRASH: {REMOVED TILE} 
    //RESULT: Tile{ [[ HalfReuse: 'F'/0 HalfReuse: 'u'/4 HalfReuse: 'n'/5 HalfReuse: 'c'/1 ]] }
    {refalrts::icReinitChar, 0, 'F', 0},
    {refalrts::icReinitChar, 0, 'u', 4},
    {refalrts::icReinitChar, 0, 'n', 5},
    {refalrts::icReinitChar, 0, 'c', 1},
    {refalrts::icReturnResult_NoTrash, 0, 0, 0},
    {refalrts::icOnFailGoTo, +8, 0, 0},
    //#ElNumber
    // </0 & CreateCommandTag/4 # ElNumber/5 >/1
    {refalrts::icIdentTerm, 0, 9, 5},
    {refalrts::icEmptyResult, 0, 0, 0},
    //TRASH: {REMOVED TILE}  </0 {REMOVED TILE} 
    //RESULT: Tile{ [[ } Tile{ HalfReuse: 'I'/4 HalfReuse: 'n'/5 HalfReuse: 't'/1 ]] }
    {refalrts::icReinitChar, 0, 'I', 4},
    {refalrts::icReinitChar, 0, 'n', 5},
    {refalrts::icReinitChar, 0, 't', 1},
    {refalrts::icSetRes, 0, 0, 4},
    {refalrts::icTrashLeftEdge, 0, 0, 0},
    {refalrts::icReturnResult_NoTrash, 0, 0, 0},
    {refalrts::icOnFailGoTo, +10, 0, 0},
    //#ElHugeNumber
    // </0 & CreateCommandTag/4 # ElHugeNumber/5 >/1
    {refalrts::icIdentTerm, 0, 8, 5},
    {refalrts::icEmptyResult, 0, 0, 0},
    //TRASH: {REMOVED TILE}  {REMOVED TILE} 
    //RESULT: Tile{ [[ HalfReuse: 'H'/0 HalfReuse: 'u'/4 HalfReuse: 'g'/5 HalfReuse: 'e'/1 }"Int"/6 Tile{ ]] }
    {refalrts::icAllocString, 0, 2, 6},
    {refalrts::icReinitChar, 0, 'H', 0},
    {refalrts::icReinitChar, 0, 'u', 4},
    {refalrts::icReinitChar, 0, 'g', 5},
    {refalrts::icReinitChar, 0, 'e', 1},
    {refalrts::icSetResRightEdge, 0, 0, 0},
    {refalrts::icSpliceTile, 6, 7, 0},
    {refalrts::icReturnResult_NoTrash, 0, 0, 0},
    {refalrts::icOnFailGoTo, +10, 0, 0},
    //#ElIdent
    // </0 & CreateCommandTag/4 # ElIdent/5 >/1
    {refalrts::icIdentTerm, 0, 7, 5},
    {refalrts::icEmptyResult, 0, 0, 0},
    //TRASH: {REMOVED TILE}  {REMOVED TILE} 
    //RESULT: Tile{ [[ HalfReuse: 'I'/0 HalfReuse: 'd'/4 HalfReuse: 'e'/5 HalfReuse: 'n'/1 } 't'/6 Tile{ ]] }
    {refalrts::icAllocChar, 0, 't', 6},
    {refalrts::icReinitChar, 0, 'I', 0},
    {refalrts::icReinitChar, 0, 'd', 4},
    {refalrts::icReinitChar, 0, 'e', 5},
    {refalrts::icReinitChar, 0, 'n', 1},
    {refalrts::icSetResRightEdge, 0, 0, 0},
    {refalrts::icSpliceTile, 6, 6, 0},
    {refalrts::icReturnResult_NoTrash, 0, 0, 0},
    {refalrts::icOnFailGoTo, +10, 0, 0},
    //#ElOpenBracket
    // </0 & CreateCommandTag/4 # ElOpenBracket/5 >/1
    {refalrts::icIdentTerm, 0, 6, 5},
    {refalrts::icEmptyResult, 0, 0, 0},
    //TRASH: {REMOVED TILE}  {REMOVED TILE} 
    //RESULT: Tile{ [[ HalfReuse: 'B'/0 HalfReuse: 'r'/4 HalfReuse: 'a'/5 HalfReuse: 'c'/1 }"ket"/6 Tile{ ]] }
    {refalrts::icAllocString, 0, 1, 6},
    {refalrts::icReinitChar, 0, 'B', 0},
    {refalrts::icReinitChar, 0, 'r', 4},
    {refalrts::icReinitChar, 0, 'a', 5},
    {refalrts::icReinitChar, 0, 'c', 1},
    {refalrts::icSetResRightEdge, 0, 0, 0},
    {refalrts::icSpliceTile, 6, 7, 0},
    {refalrts::icReturnResult_NoTrash, 0, 0, 0},
    {refalrts::icOnFailGoTo, +10, 0, 0},
    //#ElOpenADT
    // </0 & CreateCommandTag/4 # ElOpenADT/5 >/1
    {refalrts::icIdentTerm, 0, 5, 5},
    {refalrts::icEmptyResult, 0, 0, 0},
    //TRASH: {REMOVED TILE}  {REMOVED TILE} 
    //RESULT: Tile{ [[ HalfReuse: 'B'/0 HalfReuse: 'r'/4 HalfReuse: 'a'/5 HalfReuse: 'c'/1 }"ket"/6 Tile{ ]] }
    {refalrts::icAllocString, 0, 1, 6},
    {refalrts::icReinitChar, 0, 'B', 0},
    {refalrts::icReinitChar, 0, 'r', 4},
    {refalrts::icReinitChar, 0, 'a', 5},
    {refalrts::icReinitChar, 0, 'c', 1},
    {refalrts::icSetResRightEdge, 0, 0, 0},
    {refalrts::icSpliceTile, 6, 7, 0},
    {refalrts::icReturnResult_NoTrash, 0, 0, 0},
    {refalrts::icOnFailGoTo, +10, 0, 0},
    //#ElOpenCall
    // </0 & CreateCommandTag/4 # ElOpenCall/5 >/1
    {refalrts::icIdentTerm, 0, 4, 5},
    {refalrts::icEmptyResult, 0, 0, 0},
    //TRASH: {REMOVED TILE}  {REMOVED TILE} 
    //RESULT: Tile{ [[ HalfReuse: 'B'/0 HalfReuse: 'r'/4 HalfReuse: 'a'/5 HalfReuse: 'c'/1 }"ket"/6 Tile{ ]] }
    {refalrts::icAllocString, 0, 1, 6},
    {refalrts::icReinitChar, 0, 'B', 0},
    {refalrts::icReinitChar, 0, 'r', 4},
    {refalrts::icReinitChar, 0, 'a', 5},
    {refalrts::icReinitChar, 0, 'c', 1},
    {refalrts::icSetResRightEdge, 0, 0, 0},
    {refalrts::icSpliceTile, 6, 7, 0},
    {refalrts::icReturnResult_NoTrash, 0, 0, 0},
    {refalrts::icOnFailGoTo, +10, 0, 0},
    //#ElCloseBracket
    // </0 & CreateCommandTag/4 # ElCloseBracket/5 >/1
    {refalrts::icIdentTerm, 0, 3, 5},
    {refalrts::icEmptyResult, 0, 0, 0},
    //TRASH: {REMOVED TILE}  {REMOVED TILE} 
    //RESULT: Tile{ [[ HalfReuse: 'B'/0 HalfReuse: 'r'/4 HalfReuse: 'a'/5 HalfReuse: 'c'/1 }"ket"/6 Tile{ ]] }
    {refalrts::icAllocString, 0, 1, 6},
    {refalrts::icReinitChar, 0, 'B', 0},
    {refalrts::icReinitChar, 0, 'r', 4},
    {refalrts::icReinitChar, 0, 'a', 5},
    {refalrts::icReinitChar, 0, 'c', 1},
    {refalrts::icSetResRightEdge, 0, 0, 0},
    {refalrts::icSpliceTile, 6, 7, 0},
    {refalrts::icReturnResult_NoTrash, 0, 0, 0},
    {refalrts::icOnFailGoTo, +10, 0, 0},
    //#ElCloseADT
    // </0 & CreateCommandTag/4 # ElCloseADT/5 >/1
    {refalrts::icIdentTerm, 0, 2, 5},
    {refalrts::icEmptyResult, 0, 0, 0},
    //TRASH: {REMOVED TILE}  {REMOVED TILE} 
    //RESULT: Tile{ [[ HalfReuse: 'B'/0 HalfReuse: 'r'/4 HalfReuse: 'a'/5 HalfReuse: 'c'/1 }"ket"/6 Tile{ ]] }
    {refalrts::icAllocString, 0, 1, 6},
    {refalrts::icReinitChar, 0, 'B', 0},
    {refalrts::icReinitChar, 0, 'r', 4},
    {refalrts::icReinitChar, 0, 'a', 5},
    {refalrts::icReinitChar, 0, 'c', 1},
    {refalrts::icSetResRightEdge, 0, 0, 0},
    {refalrts::icSpliceTile, 6, 7, 0},
    {refalrts::icReturnResult_NoTrash, 0, 0, 0},
    {refalrts::icOnFailGoTo, +10, 0, 0},
    //#ElCloseCall
    // </0 & CreateCommandTag/4 # ElCloseCall/5 >/1
    {refalrts::icIdentTerm, 0, 1, 5},
    {refalrts::icEmptyResult, 0, 0, 0},
    //TRASH: {REMOVED TILE}  {REMOVED TILE} 
    //RESULT: Tile{ [[ HalfReuse: 'B'/0 HalfReuse: 'r'/4 HalfReuse: 'a'/5 HalfReuse: 'c'/1 }"ket"/6 Tile{ ]] }
    {refalrts::icAllocString, 0, 1, 6},
    {refalrts::icReinitChar, 0, 'B', 0},
    {refalrts::icReinitChar, 0, 'r', 4},
    {refalrts::icReinitChar, 0, 'a', 5},
    {refalrts::icReinitChar, 0, 'c', 1},
    {refalrts::icSetResRightEdge, 0, 0, 0},
    {refalrts::icSpliceTile, 6, 7, 0},
    {refalrts::icReturnResult_NoTrash, 0, 0, 0},
    //#ElString
    // </0 & CreateCommandTag/4 # ElString/5 >/1
    {refalrts::icIdentTerm, 0, 0, 5},
    {refalrts::icEmptyResult, 0, 0, 0},
    //TRASH: {REMOVED TILE}  {REMOVED TILE} 
    //RESULT: Tile{ [[ HalfReuse: 'S'/0 HalfReuse: 't'/4 HalfReuse: 'r'/5 HalfReuse: 'i'/1 }"ng"/6 Tile{ ]] }
    {refalrts::icAllocString, 0, 0, 6},
    {refalrts::icReinitChar, 0, 'S', 0},
    {refalrts::icReinitChar, 0, 't', 4},
    {refalrts::icReinitChar, 0, 'r', 5},
    {refalrts::icReinitChar, 0, 'i', 1},
    {refalrts::icSetResRightEdge, 0, 0, 0},
    {refalrts::icSpliceTile, 6, 7, 0},
    {refalrts::icReturnResult_NoTrash, 0, 0, 0},
    {refalrts::icEnd, 0, 0, 0}
  };
  int open_e_stack[11];
  refalrts::FnResult res = refalrts::interpret_array(
    raa, context, arg_begin, arg_end,
    functions, idents, numbers, strings, open_e_stack
  );
  return res;
#else
  //FAST GEN:S 
  //GLOBAL GEN:S 
  // </0 & CreateCommandTag/4 s.idx#0/5 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  if( ! refalrts::svar_left( context[5], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  if( ! refalrts::empty_seq( context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  do {
    refalrts::start_sentence();
    //#ElChar
    // </0 & CreateCommandTag/4 # ElChar/5 >/1
    if( ! refalrts::ident_term(  & ident_ElChar<int>::name, context[5] ) )
      continue;

    refalrts::reset_allocator();
    //TRASH: {REMOVED TILE} 
    //RESULT: Tile{ [[ HalfReuse: 'C'/0 HalfReuse: 'h'/4 HalfReuse: 'a'/5 HalfReuse: 'r'/1 ]] }
    refalrts::reinit_char( context[0], 'C' );
    refalrts::reinit_char( context[4], 'h' );
    refalrts::reinit_char( context[5], 'a' );
    refalrts::reinit_char( context[1], 'r' );
    return refalrts::FnResult(refalrts::cSuccess | (__LINE__ << 8));
  } while ( 0 );

  do {
    refalrts::start_sentence();
    //#ElName
    // </0 & CreateCommandTag/4 # ElName/5 >/1
    if( ! refalrts::ident_term(  & ident_ElName<int>::name, context[5] ) )
      continue;

    refalrts::reset_allocator();
    //TRASH: {REMOVED TILE} 
    //RESULT: Tile{ [[ HalfReuse: 'F'/0 HalfReuse: 'u'/4 HalfReuse: 'n'/5 HalfReuse: 'c'/1 ]] }
    refalrts::reinit_char( context[0], 'F' );
    refalrts::reinit_char( context[4], 'u' );
    refalrts::reinit_char( context[5], 'n' );
    refalrts::reinit_char( context[1], 'c' );
    return refalrts::FnResult(refalrts::cSuccess | (__LINE__ << 8));
  } while ( 0 );

  do {
    refalrts::start_sentence();
    //#ElNumber
    // </0 & CreateCommandTag/4 # ElNumber/5 >/1
    if( ! refalrts::ident_term(  & ident_ElNumber<int>::name, context[5] ) )
      continue;

    refalrts::reset_allocator();
    //TRASH: {REMOVED TILE}  </0 {REMOVED TILE} 
    //RESULT: Tile{ [[ } Tile{ HalfReuse: 'I'/4 HalfReuse: 'n'/5 HalfReuse: 't'/1 ]] }
    refalrts::reinit_char( context[4], 'I' );
    refalrts::reinit_char( context[5], 'n' );
    refalrts::reinit_char( context[1], 't' );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[4];
    refalrts::use( res );
    refalrts::splice_to_freelist_open( trash_prev, res );
    return refalrts::FnResult(refalrts::cSuccess | (__LINE__ << 8));
  } while ( 0 );

  do {
    refalrts::start_sentence();
    //#ElHugeNumber
    // </0 & CreateCommandTag/4 # ElHugeNumber/5 >/1
    if( ! refalrts::ident_term(  & ident_ElHugeNumber<int>::name, context[5] ) )
      continue;

    refalrts::reset_allocator();
    //TRASH: {REMOVED TILE}  {REMOVED TILE} 
    //RESULT: Tile{ [[ HalfReuse: 'H'/0 HalfReuse: 'u'/4 HalfReuse: 'g'/5 HalfReuse: 'e'/1 }"Int"/6 Tile{ ]] }
    if( ! refalrts::alloc_chars( context[6], context[7], "Int", 3 ) )
      return refalrts::cNoMemory;
    refalrts::reinit_char( context[0], 'H' );
    refalrts::reinit_char( context[4], 'u' );
    refalrts::reinit_char( context[5], 'g' );
    refalrts::reinit_char( context[1], 'e' );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = arg_end->next;
    res = refalrts::splice_evar( res, context[6], context[7] );
    refalrts::use( res );
    return refalrts::FnResult(refalrts::cSuccess | (__LINE__ << 8));
  } while ( 0 );

  do {
    refalrts::start_sentence();
    //#ElIdent
    // </0 & CreateCommandTag/4 # ElIdent/5 >/1
    if( ! refalrts::ident_term(  & ident_ElIdent<int>::name, context[5] ) )
      continue;

    refalrts::reset_allocator();
    //TRASH: {REMOVED TILE}  {REMOVED TILE} 
    //RESULT: Tile{ [[ HalfReuse: 'I'/0 HalfReuse: 'd'/4 HalfReuse: 'e'/5 HalfReuse: 'n'/1 } 't'/6 Tile{ ]] }
    if( ! refalrts::alloc_char( context[6], 't' ) )
      return refalrts::cNoMemory;
    refalrts::reinit_char( context[0], 'I' );
    refalrts::reinit_char( context[4], 'd' );
    refalrts::reinit_char( context[5], 'e' );
    refalrts::reinit_char( context[1], 'n' );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = arg_end->next;
    res = refalrts::splice_evar( res, context[6], context[6] );
    refalrts::use( res );
    return refalrts::FnResult(refalrts::cSuccess | (__LINE__ << 8));
  } while ( 0 );

  do {
    refalrts::start_sentence();
    //#ElOpenBracket
    // </0 & CreateCommandTag/4 # ElOpenBracket/5 >/1
    if( ! refalrts::ident_term(  & ident_ElOpenBracket<int>::name, context[5] ) )
      continue;

    refalrts::reset_allocator();
    //TRASH: {REMOVED TILE}  {REMOVED TILE} 
    //RESULT: Tile{ [[ HalfReuse: 'B'/0 HalfReuse: 'r'/4 HalfReuse: 'a'/5 HalfReuse: 'c'/1 }"ket"/6 Tile{ ]] }
    if( ! refalrts::alloc_chars( context[6], context[7], "ket", 3 ) )
      return refalrts::cNoMemory;
    refalrts::reinit_char( context[0], 'B' );
    refalrts::reinit_char( context[4], 'r' );
    refalrts::reinit_char( context[5], 'a' );
    refalrts::reinit_char( context[1], 'c' );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = arg_end->next;
    res = refalrts::splice_evar( res, context[6], context[7] );
    refalrts::use( res );
    return refalrts::FnResult(refalrts::cSuccess | (__LINE__ << 8));
  } while ( 0 );

  do {
    refalrts::start_sentence();
    //#ElOpenADT
    // </0 & CreateCommandTag/4 # ElOpenADT/5 >/1
    if( ! refalrts::ident_term(  & ident_ElOpenADT<int>::name, context[5] ) )
      continue;

    refalrts::reset_allocator();
    //TRASH: {REMOVED TILE}  {REMOVED TILE} 
    //RESULT: Tile{ [[ HalfReuse: 'B'/0 HalfReuse: 'r'/4 HalfReuse: 'a'/5 HalfReuse: 'c'/1 }"ket"/6 Tile{ ]] }
    if( ! refalrts::alloc_chars( context[6], context[7], "ket", 3 ) )
      return refalrts::cNoMemory;
    refalrts::reinit_char( context[0], 'B' );
    refalrts::reinit_char( context[4], 'r' );
    refalrts::reinit_char( context[5], 'a' );
    refalrts::reinit_char( context[1], 'c' );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = arg_end->next;
    res = refalrts::splice_evar( res, context[6], context[7] );
    refalrts::use( res );
    return refalrts::FnResult(refalrts::cSuccess | (__LINE__ << 8));
  } while ( 0 );

  do {
    refalrts::start_sentence();
    //#ElOpenCall
    // </0 & CreateCommandTag/4 # ElOpenCall/5 >/1
    if( ! refalrts::ident_term(  & ident_ElOpenCall<int>::name, context[5] ) )
      continue;

    refalrts::reset_allocator();
    //TRASH: {REMOVED TILE}  {REMOVED TILE} 
    //RESULT: Tile{ [[ HalfReuse: 'B'/0 HalfReuse: 'r'/4 HalfReuse: 'a'/5 HalfReuse: 'c'/1 }"ket"/6 Tile{ ]] }
    if( ! refalrts::alloc_chars( context[6], context[7], "ket", 3 ) )
      return refalrts::cNoMemory;
    refalrts::reinit_char( context[0], 'B' );
    refalrts::reinit_char( context[4], 'r' );
    refalrts::reinit_char( context[5], 'a' );
    refalrts::reinit_char( context[1], 'c' );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = arg_end->next;
    res = refalrts::splice_evar( res, context[6], context[7] );
    refalrts::use( res );
    return refalrts::FnResult(refalrts::cSuccess | (__LINE__ << 8));
  } while ( 0 );

  do {
    refalrts::start_sentence();
    //#ElCloseBracket
    // </0 & CreateCommandTag/4 # ElCloseBracket/5 >/1
    if( ! refalrts::ident_term(  & ident_ElCloseBracket<int>::name, context[5] ) )
      continue;

    refalrts::reset_allocator();
    //TRASH: {REMOVED TILE}  {REMOVED TILE} 
    //RESULT: Tile{ [[ HalfReuse: 'B'/0 HalfReuse: 'r'/4 HalfReuse: 'a'/5 HalfReuse: 'c'/1 }"ket"/6 Tile{ ]] }
    if( ! refalrts::alloc_chars( context[6], context[7], "ket", 3 ) )
      return refalrts::cNoMemory;
    refalrts::reinit_char( context[0], 'B' );
    refalrts::reinit_char( context[4], 'r' );
    refalrts::reinit_char( context[5], 'a' );
    refalrts::reinit_char( context[1], 'c' );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = arg_end->next;
    res = refalrts::splice_evar( res, context[6], context[7] );
    refalrts::use( res );
    return refalrts::FnResult(refalrts::cSuccess | (__LINE__ << 8));
  } while ( 0 );

  do {
    refalrts::start_sentence();
    //#ElCloseADT
    // </0 & CreateCommandTag/4 # ElCloseADT/5 >/1
    if( ! refalrts::ident_term(  & ident_ElCloseADT<int>::name, context[5] ) )
      continue;

    refalrts::reset_allocator();
    //TRASH: {REMOVED TILE}  {REMOVED TILE} 
    //RESULT: Tile{ [[ HalfReuse: 'B'/0 HalfReuse: 'r'/4 HalfReuse: 'a'/5 HalfReuse: 'c'/1 }"ket"/6 Tile{ ]] }
    if( ! refalrts::alloc_chars( context[6], context[7], "ket", 3 ) )
      return refalrts::cNoMemory;
    refalrts::reinit_char( context[0], 'B' );
    refalrts::reinit_char( context[4], 'r' );
    refalrts::reinit_char( context[5], 'a' );
    refalrts::reinit_char( context[1], 'c' );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = arg_end->next;
    res = refalrts::splice_evar( res, context[6], context[7] );
    refalrts::use( res );
    return refalrts::FnResult(refalrts::cSuccess | (__LINE__ << 8));
  } while ( 0 );

  do {
    refalrts::start_sentence();
    //#ElCloseCall
    // </0 & CreateCommandTag/4 # ElCloseCall/5 >/1
    if( ! refalrts::ident_term(  & ident_ElCloseCall<int>::name, context[5] ) )
      continue;

    refalrts::reset_allocator();
    //TRASH: {REMOVED TILE}  {REMOVED TILE} 
    //RESULT: Tile{ [[ HalfReuse: 'B'/0 HalfReuse: 'r'/4 HalfReuse: 'a'/5 HalfReuse: 'c'/1 }"ket"/6 Tile{ ]] }
    if( ! refalrts::alloc_chars( context[6], context[7], "ket", 3 ) )
      return refalrts::cNoMemory;
    refalrts::reinit_char( context[0], 'B' );
    refalrts::reinit_char( context[4], 'r' );
    refalrts::reinit_char( context[5], 'a' );
    refalrts::reinit_char( context[1], 'c' );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = arg_end->next;
    res = refalrts::splice_evar( res, context[6], context[7] );
    refalrts::use( res );
    return refalrts::FnResult(refalrts::cSuccess | (__LINE__ << 8));
  } while ( 0 );

  //#ElString
  // </0 & CreateCommandTag/4 # ElString/5 >/1
  if( ! refalrts::ident_term(  & ident_ElString<int>::name, context[5] ) )
    return refalrts::cRecognitionImpossible;

  refalrts::reset_allocator();
  //TRASH: {REMOVED TILE}  {REMOVED TILE} 
  //RESULT: Tile{ [[ HalfReuse: 'S'/0 HalfReuse: 't'/4 HalfReuse: 'r'/5 HalfReuse: 'i'/1 }"ng"/6 Tile{ ]] }
  if( ! refalrts::alloc_chars( context[6], context[7], "ng", 2 ) )
    return refalrts::cNoMemory;
  refalrts::reinit_char( context[0], 'S' );
  refalrts::reinit_char( context[4], 't' );
  refalrts::reinit_char( context[5], 'r' );
  refalrts::reinit_char( context[1], 'i' );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = arg_end->next;
  res = refalrts::splice_evar( res, context[6], context[7] );
  refalrts::use( res );
  return refalrts::FnResult(refalrts::cSuccess | (__LINE__ << 8));
#endif
}

static refalrts::FnResult CreateCommandInfo(refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  refalrts::this_is_generated_function();
  // issue here memory for vars with 10 elems
  refalrts::Iter context[10];
  refalrts::zeros( context, 10 );
#ifdef INTERPRET
  static const refalrts::RefalFunction functions[] = {
    { StrFromInt, "StrFromInt" },
    { Escape, "Escape" }
  };
  static const refalrts::RefalIdentifier idents[] = {
    & ident_ElString<int>::name,
    & ident_ElCloseCall<int>::name,
    & ident_ElCloseADT<int>::name,
    & ident_ElCloseBracket<int>::name,
    & ident_ElOpenCall<int>::name,
    & ident_ElOpenADT<int>::name,
    & ident_ElOpenBracket<int>::name,
    & ident_ElIdent<int>::name,
    & ident_ElHugeNumber<int>::name,
    & ident_ElNumber<int>::name,
    & ident_ElName<int>::name,
    & ident_ElChar<int>::name
  };
  using refalrts::numbers;
  static const refalrts::StringItem strings[] = {
    {"lrts::ibCloseCall", 17},
    {"lrts::ibCloseADT", 16},
    {"lrts::ibCloseBracket", 20},
    {"lrts::ibOpenCall", 16},
    {"lrts::ibOpenADT", 15},
    {"lrts::ibOpenBracket", 19}
  };
  static const refalrts::RASLCommand raa[] = {
    //FAST GEN:E 
    //GLOBAL GEN:S E 
    // </0 & CreateCommandInfo/4 s.idx#0/5 e.idxV#0/2 >/1
    {refalrts::icInitB0_Lite, 0, 0, 0},
    {refalrts::icCallSaveLeft, 0, 2, 0},
    {refalrts::icsVarLeft, 0, 5, 2},
    // closed e.idxV#0 as range 2
    {refalrts::icOnFailGoTo, +14, 0, 0},
    //#ElCharS 
    // </0 & CreateCommandInfo/4 # ElChar/5 s.Char#1/6 >/1
    {refalrts::icIdentTerm, 0, 11, 5},
    {refalrts::icSave, 0, 8, 2},
    {refalrts::icsVarLeft, 0, 6, 8},
    {refalrts::icEmpty, 0, 0, 8},
    {refalrts::icEmptyResult, 0, 0, 0},
    //TRASH: {REMOVED TILE}  {REMOVED TILE} 
    //RESULT: Tile{ [[ HalfReuse: '\''/0 HalfReuse: </4 HalfReuse: & Escape/5 AsIs: s.Char#1/6 AsIs: >/1 } '\''/7 Tile{ ]] }
    {refalrts::icAllocChar, 0, '\'', 7},
    {refalrts::icReinitChar, 0, '\'', 0},
    {refalrts::icReinitBracket, 0, refalrts::ibOpenCall, 4},
    {refalrts::icReinitFunc, 0, 1, 5},
    {refalrts::icPushStack, 0, 0, 1},
    {refalrts::icPushStack, 0, 0, 4},
    {refalrts::icSetResRightEdge, 0, 0, 0},
    {refalrts::icSpliceTile, 7, 7, 0},
    {refalrts::icReturnResult_NoTrash, 0, 0, 0},
    {refalrts::icOnFailGoTo, +12, 0, 0},
    //#ElNameS 
    // </0 & CreateCommandInfo/4 # ElName/5 s.NameId#1/6 >/1
    {refalrts::icIdentTerm, 0, 10, 5},
    {refalrts::icSave, 0, 8, 2},
    {refalrts::icsVarLeft, 0, 6, 8},
    {refalrts::icEmpty, 0, 0, 8},
    {refalrts::icEmptyResult, 0, 0, 0},
    //TRASH: {REMOVED TILE}  </0 {REMOVED TILE} 
    //RESULT: Tile{ [[ } Tile{ HalfReuse: </4 HalfReuse: & StrFromInt/5 AsIs: s.NameId#1/6 AsIs: >/1 ]] }
    {refalrts::icReinitBracket, 0, refalrts::ibOpenCall, 4},
    {refalrts::icReinitFunc, 0, 0, 5},
    {refalrts::icPushStack, 0, 0, 1},
    {refalrts::icPushStack, 0, 0, 4},
    {refalrts::icSetRes, 0, 0, 4},
    {refalrts::icTrashLeftEdge, 0, 0, 0},
    {refalrts::icReturnResult_NoTrash, 0, 0, 0},
    {refalrts::icOnFailGoTo, +12, 0, 0},
    //#ElNumberS 
    // </0 & CreateCommandInfo/4 # ElNumber/5 s.Number#1/6 >/1
    {refalrts::icIdentTerm, 0, 9, 5},
    {refalrts::icSave, 0, 8, 2},
    {refalrts::icsVarLeft, 0, 6, 8},
    {refalrts::icEmpty, 0, 0, 8},
    {refalrts::icEmptyResult, 0, 0, 0},
    //TRASH: {REMOVED TILE}  </0 {REMOVED TILE} 
    //RESULT: Tile{ [[ } Tile{ HalfReuse: </4 HalfReuse: & StrFromInt/5 AsIs: s.Number#1/6 AsIs: >/1 ]] }
    {refalrts::icReinitBracket, 0, refalrts::ibOpenCall, 4},
    {refalrts::icReinitFunc, 0, 0, 5},
    {refalrts::icPushStack, 0, 0, 1},
    {refalrts::icPushStack, 0, 0, 4},
    {refalrts::icSetRes, 0, 0, 4},
    {refalrts::icTrashLeftEdge, 0, 0, 0},
    {refalrts::icReturnResult_NoTrash, 0, 0, 0},
    {refalrts::icOnFailGoTo, +12, 0, 0},
    //#ElHugeNumberS 
    // </0 & CreateCommandInfo/4 # ElHugeNumber/5 s.NumberId#1/6 >/1
    {refalrts::icIdentTerm, 0, 8, 5},
    {refalrts::icSave, 0, 8, 2},
    {refalrts::icsVarLeft, 0, 6, 8},
    {refalrts::icEmpty, 0, 0, 8},
    {refalrts::icEmptyResult, 0, 0, 0},
    //TRASH: {REMOVED TILE}  </0 {REMOVED TILE} 
    //RESULT: Tile{ [[ } Tile{ HalfReuse: </4 HalfReuse: & StrFromInt/5 AsIs: s.NumberId#1/6 AsIs: >/1 ]] }
    {refalrts::icReinitBracket, 0, refalrts::ibOpenCall, 4},
    {refalrts::icReinitFunc, 0, 0, 5},
    {refalrts::icPushStack, 0, 0, 1},
    {refalrts::icPushStack, 0, 0, 4},
    {refalrts::icSetRes, 0, 0, 4},
    {refalrts::icTrashLeftEdge, 0, 0, 0},
    {refalrts::icReturnResult_NoTrash, 0, 0, 0},
    {refalrts::icOnFailGoTo, +12, 0, 0},
    //#ElIdentS 
    // </0 & CreateCommandInfo/4 # ElIdent/5 s.NameId#1/6 >/1
    {refalrts::icIdentTerm, 0, 7, 5},
    {refalrts::icSave, 0, 8, 2},
    {refalrts::icsVarLeft, 0, 6, 8},
    {refalrts::icEmpty, 0, 0, 8},
    {refalrts::icEmptyResult, 0, 0, 0},
    //TRASH: {REMOVED TILE}  </0 {REMOVED TILE} 
    //RESULT: Tile{ [[ } Tile{ HalfReuse: </4 HalfReuse: & StrFromInt/5 AsIs: s.NameId#1/6 AsIs: >/1 ]] }
    {refalrts::icReinitBracket, 0, refalrts::ibOpenCall, 4},
    {refalrts::icReinitFunc, 0, 0, 5},
    {refalrts::icPushStack, 0, 0, 1},
    {refalrts::icPushStack, 0, 0, 4},
    {refalrts::icSetRes, 0, 0, 4},
    {refalrts::icTrashLeftEdge, 0, 0, 0},
    {refalrts::icReturnResult_NoTrash, 0, 0, 0},
    {refalrts::icOnFailGoTo, +12, 0, 0},
    //#ElOpenBracket
    // </0 & CreateCommandInfo/4 # ElOpenBracket/5 >/1
    {refalrts::icIdentTerm, 0, 6, 5},
    {refalrts::icSave, 0, 8, 2},
    {refalrts::icEmpty, 0, 0, 8},
    {refalrts::icEmptyResult, 0, 0, 0},
    //TRASH: {REMOVED TILE}  {REMOVED TILE} 
    //RESULT: Tile{ [[ HalfReuse: 'r'/0 HalfReuse: 'e'/4 HalfReuse: 'f'/5 HalfReuse: 'a'/1 }"lrts::ibOpenBracket"/6 Tile{ ]] }
    {refalrts::icAllocString, 0, 5, 6},
    {refalrts::icReinitChar, 0, 'r', 0},
    {refalrts::icReinitChar, 0, 'e', 4},
    {refalrts::icReinitChar, 0, 'f', 5},
    {refalrts::icReinitChar, 0, 'a', 1},
    {refalrts::icSetResRightEdge, 0, 0, 0},
    {refalrts::icSpliceTile, 6, 7, 0},
    {refalrts::icReturnResult_NoTrash, 0, 0, 0},
    {refalrts::icOnFailGoTo, +12, 0, 0},
    //#ElOpenADT
    // </0 & CreateCommandInfo/4 # ElOpenADT/5 >/1
    {refalrts::icIdentTerm, 0, 5, 5},
    {refalrts::icSave, 0, 8, 2},
    {refalrts::icEmpty, 0, 0, 8},
    {refalrts::icEmptyResult, 0, 0, 0},
    //TRASH: {REMOVED TILE}  {REMOVED TILE} 
    //RESULT: Tile{ [[ HalfReuse: 'r'/0 HalfReuse: 'e'/4 HalfReuse: 'f'/5 HalfReuse: 'a'/1 }"lrts::ibOpenADT"/6 Tile{ ]] }
    {refalrts::icAllocString, 0, 4, 6},
    {refalrts::icReinitChar, 0, 'r', 0},
    {refalrts::icReinitChar, 0, 'e', 4},
    {refalrts::icReinitChar, 0, 'f', 5},
    {refalrts::icReinitChar, 0, 'a', 1},
    {refalrts::icSetResRightEdge, 0, 0, 0},
    {refalrts::icSpliceTile, 6, 7, 0},
    {refalrts::icReturnResult_NoTrash, 0, 0, 0},
    {refalrts::icOnFailGoTo, +12, 0, 0},
    //#ElOpenCall
    // </0 & CreateCommandInfo/4 # ElOpenCall/5 >/1
    {refalrts::icIdentTerm, 0, 4, 5},
    {refalrts::icSave, 0, 8, 2},
    {refalrts::icEmpty, 0, 0, 8},
    {refalrts::icEmptyResult, 0, 0, 0},
    //TRASH: {REMOVED TILE}  {REMOVED TILE} 
    //RESULT: Tile{ [[ HalfReuse: 'r'/0 HalfReuse: 'e'/4 HalfReuse: 'f'/5 HalfReuse: 'a'/1 }"lrts::ibOpenCall"/6 Tile{ ]] }
    {refalrts::icAllocString, 0, 3, 6},
    {refalrts::icReinitChar, 0, 'r', 0},
    {refalrts::icReinitChar, 0, 'e', 4},
    {refalrts::icReinitChar, 0, 'f', 5},
    {refalrts::icReinitChar, 0, 'a', 1},
    {refalrts::icSetResRightEdge, 0, 0, 0},
    {refalrts::icSpliceTile, 6, 7, 0},
    {refalrts::icReturnResult_NoTrash, 0, 0, 0},
    {refalrts::icOnFailGoTo, +12, 0, 0},
    //#ElCloseBracket
    // </0 & CreateCommandInfo/4 # ElCloseBracket/5 >/1
    {refalrts::icIdentTerm, 0, 3, 5},
    {refalrts::icSave, 0, 8, 2},
    {refalrts::icEmpty, 0, 0, 8},
    {refalrts::icEmptyResult, 0, 0, 0},
    //TRASH: {REMOVED TILE}  {REMOVED TILE} 
    //RESULT: Tile{ [[ HalfReuse: 'r'/0 HalfReuse: 'e'/4 HalfReuse: 'f'/5 HalfReuse: 'a'/1 }"lrts::ibCloseBracket"/6 Tile{ ]] }
    {refalrts::icAllocString, 0, 2, 6},
    {refalrts::icReinitChar, 0, 'r', 0},
    {refalrts::icReinitChar, 0, 'e', 4},
    {refalrts::icReinitChar, 0, 'f', 5},
    {refalrts::icReinitChar, 0, 'a', 1},
    {refalrts::icSetResRightEdge, 0, 0, 0},
    {refalrts::icSpliceTile, 6, 7, 0},
    {refalrts::icReturnResult_NoTrash, 0, 0, 0},
    {refalrts::icOnFailGoTo, +12, 0, 0},
    //#ElCloseADT
    // </0 & CreateCommandInfo/4 # ElCloseADT/5 >/1
    {refalrts::icIdentTerm, 0, 2, 5},
    {refalrts::icSave, 0, 8, 2},
    {refalrts::icEmpty, 0, 0, 8},
    {refalrts::icEmptyResult, 0, 0, 0},
    //TRASH: {REMOVED TILE}  {REMOVED TILE} 
    //RESULT: Tile{ [[ HalfReuse: 'r'/0 HalfReuse: 'e'/4 HalfReuse: 'f'/5 HalfReuse: 'a'/1 }"lrts::ibCloseADT"/6 Tile{ ]] }
    {refalrts::icAllocString, 0, 1, 6},
    {refalrts::icReinitChar, 0, 'r', 0},
    {refalrts::icReinitChar, 0, 'e', 4},
    {refalrts::icReinitChar, 0, 'f', 5},
    {refalrts::icReinitChar, 0, 'a', 1},
    {refalrts::icSetResRightEdge, 0, 0, 0},
    {refalrts::icSpliceTile, 6, 7, 0},
    {refalrts::icReturnResult_NoTrash, 0, 0, 0},
    {refalrts::icOnFailGoTo, +12, 0, 0},
    //#ElCloseCall
    // </0 & CreateCommandInfo/4 # ElCloseCall/5 >/1
    {refalrts::icIdentTerm, 0, 1, 5},
    {refalrts::icSave, 0, 8, 2},
    {refalrts::icEmpty, 0, 0, 8},
    {refalrts::icEmptyResult, 0, 0, 0},
    //TRASH: {REMOVED TILE}  {REMOVED TILE} 
    //RESULT: Tile{ [[ HalfReuse: 'r'/0 HalfReuse: 'e'/4 HalfReuse: 'f'/5 HalfReuse: 'a'/1 }"lrts::ibCloseCall"/6 Tile{ ]] }
    {refalrts::icAllocString, 0, 0, 6},
    {refalrts::icReinitChar, 0, 'r', 0},
    {refalrts::icReinitChar, 0, 'e', 4},
    {refalrts::icReinitChar, 0, 'f', 5},
    {refalrts::icReinitChar, 0, 'a', 1},
    {refalrts::icSetResRightEdge, 0, 0, 0},
    {refalrts::icSpliceTile, 6, 7, 0},
    {refalrts::icReturnResult_NoTrash, 0, 0, 0},
    //#ElStringS 
    // </0 & CreateCommandInfo/4 # ElString/5 s.StringId#1/6 >/1
    {refalrts::icIdentTerm, 0, 0, 5},
    {refalrts::icsVarLeft, 0, 6, 2},
    {refalrts::icEmpty, 0, 0, 2},
    {refalrts::icEmptyResult, 0, 0, 0},
    //TRASH: {REMOVED TILE}  </0 {REMOVED TILE} 
    //RESULT: Tile{ [[ } Tile{ HalfReuse: </4 HalfReuse: & StrFromInt/5 AsIs: s.StringId#1/6 AsIs: >/1 ]] }
    {refalrts::icReinitBracket, 0, refalrts::ibOpenCall, 4},
    {refalrts::icReinitFunc, 0, 0, 5},
    {refalrts::icPushStack, 0, 0, 1},
    {refalrts::icPushStack, 0, 0, 4},
    {refalrts::icSetRes, 0, 0, 4},
    {refalrts::icTrashLeftEdge, 0, 0, 0},
    {refalrts::icReturnResult_NoTrash, 0, 0, 0},
    {refalrts::icEnd, 0, 0, 0}
  };
  int open_e_stack[11];
  refalrts::FnResult res = refalrts::interpret_array(
    raa, context, arg_begin, arg_end,
    functions, idents, numbers, strings, open_e_stack
  );
  return res;
#else
  //FAST GEN:E 
  //GLOBAL GEN:S E 
  // </0 & CreateCommandInfo/4 s.idx#0/5 e.idxV#0/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  if( ! refalrts::svar_left( context[5], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  // closed e.idxV#0 as range 2
  do {
    refalrts::start_sentence();
    //#ElCharS 
    // </0 & CreateCommandInfo/4 # ElChar/5 s.Char#1/6 >/1
    if( ! refalrts::ident_term(  & ident_ElChar<int>::name, context[5] ) )
      continue;
    context[8] = context[2];
    context[9] = context[3];
    if( ! refalrts::svar_left( context[6], context[8], context[9] ) )
      continue;
    if( ! refalrts::empty_seq( context[8], context[9] ) )
      continue;

    refalrts::reset_allocator();
    //TRASH: {REMOVED TILE}  {REMOVED TILE} 
    //RESULT: Tile{ [[ HalfReuse: '\''/0 HalfReuse: </4 HalfReuse: & Escape/5 AsIs: s.Char#1/6 AsIs: >/1 } '\''/7 Tile{ ]] }
    if( ! refalrts::alloc_char( context[7], '\'' ) )
      return refalrts::cNoMemory;
    refalrts::reinit_char( context[0], '\'' );
    refalrts::reinit_open_call( context[4] );
    refalrts::reinit_name( context[5], Escape, "Escape" );
    refalrts::push_stack( context[1] );
    refalrts::push_stack( context[4] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = arg_end->next;
    res = refalrts::splice_evar( res, context[7], context[7] );
    refalrts::use( res );
    return refalrts::FnResult(refalrts::cSuccess | (__LINE__ << 8));
  } while ( 0 );

  do {
    refalrts::start_sentence();
    //#ElNameS 
    // </0 & CreateCommandInfo/4 # ElName/5 s.NameId#1/6 >/1
    if( ! refalrts::ident_term(  & ident_ElName<int>::name, context[5] ) )
      continue;
    context[8] = context[2];
    context[9] = context[3];
    if( ! refalrts::svar_left( context[6], context[8], context[9] ) )
      continue;
    if( ! refalrts::empty_seq( context[8], context[9] ) )
      continue;

    refalrts::reset_allocator();
    //TRASH: {REMOVED TILE}  </0 {REMOVED TILE} 
    //RESULT: Tile{ [[ } Tile{ HalfReuse: </4 HalfReuse: & StrFromInt/5 AsIs: s.NameId#1/6 AsIs: >/1 ]] }
    refalrts::reinit_open_call( context[4] );
    refalrts::reinit_name( context[5], StrFromInt, "StrFromInt" );
    refalrts::push_stack( context[1] );
    refalrts::push_stack( context[4] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[4];
    refalrts::use( res );
    refalrts::splice_to_freelist_open( trash_prev, res );
    return refalrts::FnResult(refalrts::cSuccess | (__LINE__ << 8));
  } while ( 0 );

  do {
    refalrts::start_sentence();
    //#ElNumberS 
    // </0 & CreateCommandInfo/4 # ElNumber/5 s.Number#1/6 >/1
    if( ! refalrts::ident_term(  & ident_ElNumber<int>::name, context[5] ) )
      continue;
    context[8] = context[2];
    context[9] = context[3];
    if( ! refalrts::svar_left( context[6], context[8], context[9] ) )
      continue;
    if( ! refalrts::empty_seq( context[8], context[9] ) )
      continue;

    refalrts::reset_allocator();
    //TRASH: {REMOVED TILE}  </0 {REMOVED TILE} 
    //RESULT: Tile{ [[ } Tile{ HalfReuse: </4 HalfReuse: & StrFromInt/5 AsIs: s.Number#1/6 AsIs: >/1 ]] }
    refalrts::reinit_open_call( context[4] );
    refalrts::reinit_name( context[5], StrFromInt, "StrFromInt" );
    refalrts::push_stack( context[1] );
    refalrts::push_stack( context[4] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[4];
    refalrts::use( res );
    refalrts::splice_to_freelist_open( trash_prev, res );
    return refalrts::FnResult(refalrts::cSuccess | (__LINE__ << 8));
  } while ( 0 );

  do {
    refalrts::start_sentence();
    //#ElHugeNumberS 
    // </0 & CreateCommandInfo/4 # ElHugeNumber/5 s.NumberId#1/6 >/1
    if( ! refalrts::ident_term(  & ident_ElHugeNumber<int>::name, context[5] ) )
      continue;
    context[8] = context[2];
    context[9] = context[3];
    if( ! refalrts::svar_left( context[6], context[8], context[9] ) )
      continue;
    if( ! refalrts::empty_seq( context[8], context[9] ) )
      continue;

    refalrts::reset_allocator();
    //TRASH: {REMOVED TILE}  </0 {REMOVED TILE} 
    //RESULT: Tile{ [[ } Tile{ HalfReuse: </4 HalfReuse: & StrFromInt/5 AsIs: s.NumberId#1/6 AsIs: >/1 ]] }
    refalrts::reinit_open_call( context[4] );
    refalrts::reinit_name( context[5], StrFromInt, "StrFromInt" );
    refalrts::push_stack( context[1] );
    refalrts::push_stack( context[4] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[4];
    refalrts::use( res );
    refalrts::splice_to_freelist_open( trash_prev, res );
    return refalrts::FnResult(refalrts::cSuccess | (__LINE__ << 8));
  } while ( 0 );

  do {
    refalrts::start_sentence();
    //#ElIdentS 
    // </0 & CreateCommandInfo/4 # ElIdent/5 s.NameId#1/6 >/1
    if( ! refalrts::ident_term(  & ident_ElIdent<int>::name, context[5] ) )
      continue;
    context[8] = context[2];
    context[9] = context[3];
    if( ! refalrts::svar_left( context[6], context[8], context[9] ) )
      continue;
    if( ! refalrts::empty_seq( context[8], context[9] ) )
      continue;

    refalrts::reset_allocator();
    //TRASH: {REMOVED TILE}  </0 {REMOVED TILE} 
    //RESULT: Tile{ [[ } Tile{ HalfReuse: </4 HalfReuse: & StrFromInt/5 AsIs: s.NameId#1/6 AsIs: >/1 ]] }
    refalrts::reinit_open_call( context[4] );
    refalrts::reinit_name( context[5], StrFromInt, "StrFromInt" );
    refalrts::push_stack( context[1] );
    refalrts::push_stack( context[4] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[4];
    refalrts::use( res );
    refalrts::splice_to_freelist_open( trash_prev, res );
    return refalrts::FnResult(refalrts::cSuccess | (__LINE__ << 8));
  } while ( 0 );

  do {
    refalrts::start_sentence();
    //#ElOpenBracket
    // </0 & CreateCommandInfo/4 # ElOpenBracket/5 >/1
    if( ! refalrts::ident_term(  & ident_ElOpenBracket<int>::name, context[5] ) )
      continue;
    context[8] = context[2];
    context[9] = context[3];
    if( ! refalrts::empty_seq( context[8], context[9] ) )
      continue;

    refalrts::reset_allocator();
    //TRASH: {REMOVED TILE}  {REMOVED TILE} 
    //RESULT: Tile{ [[ HalfReuse: 'r'/0 HalfReuse: 'e'/4 HalfReuse: 'f'/5 HalfReuse: 'a'/1 }"lrts::ibOpenBracket"/6 Tile{ ]] }
    if( ! refalrts::alloc_chars( context[6], context[7], "lrts::ibOpenBracket", 19 ) )
      return refalrts::cNoMemory;
    refalrts::reinit_char( context[0], 'r' );
    refalrts::reinit_char( context[4], 'e' );
    refalrts::reinit_char( context[5], 'f' );
    refalrts::reinit_char( context[1], 'a' );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = arg_end->next;
    res = refalrts::splice_evar( res, context[6], context[7] );
    refalrts::use( res );
    return refalrts::FnResult(refalrts::cSuccess | (__LINE__ << 8));
  } while ( 0 );

  do {
    refalrts::start_sentence();
    //#ElOpenADT
    // </0 & CreateCommandInfo/4 # ElOpenADT/5 >/1
    if( ! refalrts::ident_term(  & ident_ElOpenADT<int>::name, context[5] ) )
      continue;
    context[8] = context[2];
    context[9] = context[3];
    if( ! refalrts::empty_seq( context[8], context[9] ) )
      continue;

    refalrts::reset_allocator();
    //TRASH: {REMOVED TILE}  {REMOVED TILE} 
    //RESULT: Tile{ [[ HalfReuse: 'r'/0 HalfReuse: 'e'/4 HalfReuse: 'f'/5 HalfReuse: 'a'/1 }"lrts::ibOpenADT"/6 Tile{ ]] }
    if( ! refalrts::alloc_chars( context[6], context[7], "lrts::ibOpenADT", 15 ) )
      return refalrts::cNoMemory;
    refalrts::reinit_char( context[0], 'r' );
    refalrts::reinit_char( context[4], 'e' );
    refalrts::reinit_char( context[5], 'f' );
    refalrts::reinit_char( context[1], 'a' );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = arg_end->next;
    res = refalrts::splice_evar( res, context[6], context[7] );
    refalrts::use( res );
    return refalrts::FnResult(refalrts::cSuccess | (__LINE__ << 8));
  } while ( 0 );

  do {
    refalrts::start_sentence();
    //#ElOpenCall
    // </0 & CreateCommandInfo/4 # ElOpenCall/5 >/1
    if( ! refalrts::ident_term(  & ident_ElOpenCall<int>::name, context[5] ) )
      continue;
    context[8] = context[2];
    context[9] = context[3];
    if( ! refalrts::empty_seq( context[8], context[9] ) )
      continue;

    refalrts::reset_allocator();
    //TRASH: {REMOVED TILE}  {REMOVED TILE} 
    //RESULT: Tile{ [[ HalfReuse: 'r'/0 HalfReuse: 'e'/4 HalfReuse: 'f'/5 HalfReuse: 'a'/1 }"lrts::ibOpenCall"/6 Tile{ ]] }
    if( ! refalrts::alloc_chars( context[6], context[7], "lrts::ibOpenCall", 16 ) )
      return refalrts::cNoMemory;
    refalrts::reinit_char( context[0], 'r' );
    refalrts::reinit_char( context[4], 'e' );
    refalrts::reinit_char( context[5], 'f' );
    refalrts::reinit_char( context[1], 'a' );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = arg_end->next;
    res = refalrts::splice_evar( res, context[6], context[7] );
    refalrts::use( res );
    return refalrts::FnResult(refalrts::cSuccess | (__LINE__ << 8));
  } while ( 0 );

  do {
    refalrts::start_sentence();
    //#ElCloseBracket
    // </0 & CreateCommandInfo/4 # ElCloseBracket/5 >/1
    if( ! refalrts::ident_term(  & ident_ElCloseBracket<int>::name, context[5] ) )
      continue;
    context[8] = context[2];
    context[9] = context[3];
    if( ! refalrts::empty_seq( context[8], context[9] ) )
      continue;

    refalrts::reset_allocator();
    //TRASH: {REMOVED TILE}  {REMOVED TILE} 
    //RESULT: Tile{ [[ HalfReuse: 'r'/0 HalfReuse: 'e'/4 HalfReuse: 'f'/5 HalfReuse: 'a'/1 }"lrts::ibCloseBracket"/6 Tile{ ]] }
    if( ! refalrts::alloc_chars( context[6], context[7], "lrts::ibCloseBracket", 20 ) )
      return refalrts::cNoMemory;
    refalrts::reinit_char( context[0], 'r' );
    refalrts::reinit_char( context[4], 'e' );
    refalrts::reinit_char( context[5], 'f' );
    refalrts::reinit_char( context[1], 'a' );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = arg_end->next;
    res = refalrts::splice_evar( res, context[6], context[7] );
    refalrts::use( res );
    return refalrts::FnResult(refalrts::cSuccess | (__LINE__ << 8));
  } while ( 0 );

  do {
    refalrts::start_sentence();
    //#ElCloseADT
    // </0 & CreateCommandInfo/4 # ElCloseADT/5 >/1
    if( ! refalrts::ident_term(  & ident_ElCloseADT<int>::name, context[5] ) )
      continue;
    context[8] = context[2];
    context[9] = context[3];
    if( ! refalrts::empty_seq( context[8], context[9] ) )
      continue;

    refalrts::reset_allocator();
    //TRASH: {REMOVED TILE}  {REMOVED TILE} 
    //RESULT: Tile{ [[ HalfReuse: 'r'/0 HalfReuse: 'e'/4 HalfReuse: 'f'/5 HalfReuse: 'a'/1 }"lrts::ibCloseADT"/6 Tile{ ]] }
    if( ! refalrts::alloc_chars( context[6], context[7], "lrts::ibCloseADT", 16 ) )
      return refalrts::cNoMemory;
    refalrts::reinit_char( context[0], 'r' );
    refalrts::reinit_char( context[4], 'e' );
    refalrts::reinit_char( context[5], 'f' );
    refalrts::reinit_char( context[1], 'a' );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = arg_end->next;
    res = refalrts::splice_evar( res, context[6], context[7] );
    refalrts::use( res );
    return refalrts::FnResult(refalrts::cSuccess | (__LINE__ << 8));
  } while ( 0 );

  do {
    refalrts::start_sentence();
    //#ElCloseCall
    // </0 & CreateCommandInfo/4 # ElCloseCall/5 >/1
    if( ! refalrts::ident_term(  & ident_ElCloseCall<int>::name, context[5] ) )
      continue;
    context[8] = context[2];
    context[9] = context[3];
    if( ! refalrts::empty_seq( context[8], context[9] ) )
      continue;

    refalrts::reset_allocator();
    //TRASH: {REMOVED TILE}  {REMOVED TILE} 
    //RESULT: Tile{ [[ HalfReuse: 'r'/0 HalfReuse: 'e'/4 HalfReuse: 'f'/5 HalfReuse: 'a'/1 }"lrts::ibCloseCall"/6 Tile{ ]] }
    if( ! refalrts::alloc_chars( context[6], context[7], "lrts::ibCloseCall", 17 ) )
      return refalrts::cNoMemory;
    refalrts::reinit_char( context[0], 'r' );
    refalrts::reinit_char( context[4], 'e' );
    refalrts::reinit_char( context[5], 'f' );
    refalrts::reinit_char( context[1], 'a' );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = arg_end->next;
    res = refalrts::splice_evar( res, context[6], context[7] );
    refalrts::use( res );
    return refalrts::FnResult(refalrts::cSuccess | (__LINE__ << 8));
  } while ( 0 );

  //#ElStringS 
  // </0 & CreateCommandInfo/4 # ElString/5 s.StringId#1/6 >/1
  if( ! refalrts::ident_term(  & ident_ElString<int>::name, context[5] ) )
    return refalrts::cRecognitionImpossible;
  if( ! refalrts::svar_left( context[6], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  if( ! refalrts::empty_seq( context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;

  refalrts::reset_allocator();
  //TRASH: {REMOVED TILE}  </0 {REMOVED TILE} 
  //RESULT: Tile{ [[ } Tile{ HalfReuse: </4 HalfReuse: & StrFromInt/5 AsIs: s.StringId#1/6 AsIs: >/1 ]] }
  refalrts::reinit_open_call( context[4] );
  refalrts::reinit_name( context[5], StrFromInt, "StrFromInt" );
  refalrts::push_stack( context[1] );
  refalrts::push_stack( context[4] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[4];
  refalrts::use( res );
  refalrts::splice_to_freelist_open( trash_prev, res );
  return refalrts::FnResult(refalrts::cSuccess | (__LINE__ << 8));
#endif
}


//End of file
