// Automatically generated file. Don't edit!
#include "refalrts.h"


const refalrts::RefalIdentifier ident_ = refalrts::ident_from_static("");
const refalrts::RefalIdentifier ident_k37_ = refalrts::ident_from_static("%");
const refalrts::RefalIdentifier ident_k42_ = refalrts::ident_from_static("*");
const refalrts::RefalIdentifier ident_k43_ = refalrts::ident_from_static("+");
const refalrts::RefalIdentifier ident_m_ = refalrts::ident_from_static("-");
const refalrts::RefalIdentifier ident_k47_ = refalrts::ident_from_static("/");
const refalrts::RefalIdentifier ident_Add = refalrts::ident_from_static("Add");
const refalrts::RefalIdentifier ident_AnalyzeContinuation = refalrts::ident_from_static("AnalyzeContinuation");
const refalrts::RefalIdentifier ident_AnalyzeContinuationu_check = refalrts::ident_from_static("AnalyzeContinuation_check");
const refalrts::RefalIdentifier ident_Apply = refalrts::ident_from_static("Apply");
const refalrts::RefalIdentifier ident_Arg = refalrts::ident_from_static("Arg");
const refalrts::RefalIdentifier ident_BlockScopeVars = refalrts::ident_from_static("BlockScopeVars");
const refalrts::RefalIdentifier ident_Br = refalrts::ident_from_static("Br");
const refalrts::RefalIdentifier ident_Brackets = refalrts::ident_from_static("Brackets");
const refalrts::RefalIdentifier ident_CALLm_BLOCK = refalrts::ident_from_static("CALL-BLOCK");
const refalrts::RefalIdentifier ident_Call = refalrts::ident_from_static("Call");
const refalrts::RefalIdentifier ident_Card = refalrts::ident_from_static("Card");
const refalrts::RefalIdentifier ident_Char = refalrts::ident_from_static("Char");
const refalrts::RefalIdentifier ident_Chr = refalrts::ident_from_static("Chr");
const refalrts::RefalIdentifier ident_Close = refalrts::ident_from_static("Close");
const refalrts::RefalIdentifier ident_Compare = refalrts::ident_from_static("Compare");
const refalrts::RefalIdentifier ident_Compound = refalrts::ident_from_static("Compound");
const refalrts::RefalIdentifier ident_Condition = refalrts::ident_from_static("Condition");
const refalrts::RefalIdentifier ident_ConditionSubFunctions = refalrts::ident_from_static("ConditionSubFunctions");
const refalrts::RefalIdentifier ident_ConditionSubFunctionsm_Aux = refalrts::ident_from_static("ConditionSubFunctions-Aux");
const refalrts::RefalIdentifier ident_ConditionSubFunctionsm_Auxu_check = refalrts::ident_from_static("ConditionSubFunctions-Aux_check");
const refalrts::RefalIdentifier ident_ConditionSubFunctionsu_check = refalrts::ident_from_static("ConditionSubFunctions_check");
const refalrts::RefalIdentifier ident_ConditionSubFunctionsu_check0 = refalrts::ident_from_static("ConditionSubFunctions_check0");
const refalrts::RefalIdentifier ident_ConditionSubFunctionsu_check1 = refalrts::ident_from_static("ConditionSubFunctions_check1");
const refalrts::RefalIdentifier ident_ConditionSubFunctionsu_check2 = refalrts::ident_from_static("ConditionSubFunctions_check2");
const refalrts::RefalIdentifier ident_ConditionSubFunctionsu_check3 = refalrts::ident_from_static("ConditionSubFunctions_check3");
const refalrts::RefalIdentifier ident_Cp = refalrts::ident_from_static("Cp");
const refalrts::RefalIdentifier ident_DeSysfun = refalrts::ident_from_static("DeSysfun");
const refalrts::RefalIdentifier ident_Dg = refalrts::ident_from_static("Dg");
const refalrts::RefalIdentifier ident_Dgall = refalrts::ident_from_static("Dgall");
const refalrts::RefalIdentifier ident_Div = refalrts::ident_from_static("Div");
const refalrts::RefalIdentifier ident_Divmod = refalrts::ident_from_static("Divmod");
const refalrts::RefalIdentifier ident_Dn = refalrts::ident_from_static("Dn");
const refalrts::RefalIdentifier ident_DoBindBrackets = refalrts::ident_from_static("DoBindBrackets");
const refalrts::RefalIdentifier ident_DoBindBracketsu_check = refalrts::ident_from_static("DoBindBrackets_check");
const refalrts::RefalIdentifier ident_DoBindBracketsu_cont = refalrts::ident_from_static("DoBindBrackets_cont");
const refalrts::RefalIdentifier ident_DoNewName = refalrts::ident_from_static("DoNewName");
const refalrts::RefalIdentifier ident_DoNewName0 = refalrts::ident_from_static("DoNewName0");
const refalrts::RefalIdentifier ident_DoNewNameu_check = refalrts::ident_from_static("DoNewName_check");
const refalrts::RefalIdentifier ident_DoOpenEChain = refalrts::ident_from_static("DoOpenEChain");
const refalrts::RefalIdentifier ident_DoOpenEChainu_check = refalrts::ident_from_static("DoOpenEChain_check");
const refalrts::RefalIdentifier ident_DoOpenEChainu_check0 = refalrts::ident_from_static("DoOpenEChain_check0");
const refalrts::RefalIdentifier ident_DoOpenEChainu_check1 = refalrts::ident_from_static("DoOpenEChain_check1");
const refalrts::RefalIdentifier ident_DoOpenEChainu_cont = refalrts::ident_from_static("DoOpenEChain_cont");
const refalrts::RefalIdentifier ident_DoPatternSteps = refalrts::ident_from_static("DoPatternSteps");
const refalrts::RefalIdentifier ident_DoPatternSteps0 = refalrts::ident_from_static("DoPatternSteps0");
const refalrts::RefalIdentifier ident_DoPatternSteps0u_check = refalrts::ident_from_static("DoPatternSteps0_check");
const refalrts::RefalIdentifier ident_DoPatternSteps0u_check0 = refalrts::ident_from_static("DoPatternSteps0_check0");
const refalrts::RefalIdentifier ident_DoPatternSteps0u_cont = refalrts::ident_from_static("DoPatternSteps0_cont");
const refalrts::RefalIdentifier ident_DoPatternSteps0u_cont0 = refalrts::ident_from_static("DoPatternSteps0_cont0");
const refalrts::RefalIdentifier ident_DoPatternSteps0u_forward = refalrts::ident_from_static("DoPatternSteps0_forward");
const refalrts::RefalIdentifier ident_DoPatternSteps0u_forward0 = refalrts::ident_from_static("DoPatternSteps0_forward0");
const refalrts::RefalIdentifier ident_DoPatternSteps0u_next = refalrts::ident_from_static("DoPatternSteps0_next");
const refalrts::RefalIdentifier ident_DoPatternSteps0u_next0 = refalrts::ident_from_static("DoPatternSteps0_next0");
const refalrts::RefalIdentifier ident_DoT0 = refalrts::ident_from_static("DoT0");
const refalrts::RefalIdentifier ident_DoTransform = refalrts::ident_from_static("DoTransform");
const refalrts::RefalIdentifier ident_DoTransformu_check = refalrts::ident_from_static("DoTransform_check");
const refalrts::RefalIdentifier ident_DoTransformu_cont = refalrts::ident_from_static("DoTransform_cont");
const refalrts::RefalIdentifier ident_DoUnBlock = refalrts::ident_from_static("DoUnBlock");
const refalrts::RefalIdentifier ident_DoUnBlockm_NextFunction = refalrts::ident_from_static("DoUnBlock-NextFunction");
const refalrts::RefalIdentifier ident_DoUnBlocku_check = refalrts::ident_from_static("DoUnBlock_check");
const refalrts::RefalIdentifier ident_DoUnBlocku_check0 = refalrts::ident_from_static("DoUnBlock_check0");
const refalrts::RefalIdentifier ident_DoUnBlocku_check1 = refalrts::ident_from_static("DoUnBlock_check1");
const refalrts::RefalIdentifier ident_DoUnBlocku_cont = refalrts::ident_from_static("DoUnBlock_cont");
const refalrts::RefalIdentifier ident_DoUnBlocku_cont0 = refalrts::ident_from_static("DoUnBlock_cont0");
const refalrts::RefalIdentifier ident_DoUnBlocku_cont1 = refalrts::ident_from_static("DoUnBlock_cont1");
const refalrts::RefalIdentifier ident_DoUnBlocku_forward = refalrts::ident_from_static("DoUnBlock_forward");
const refalrts::RefalIdentifier ident_DoUnBlocku_next = refalrts::ident_from_static("DoUnBlock_next");
const refalrts::RefalIdentifier ident_DoUnCondition = refalrts::ident_from_static("DoUnCondition");
const refalrts::RefalIdentifier ident_DoUnConditionm_NextFunction = refalrts::ident_from_static("DoUnCondition-NextFunction");
const refalrts::RefalIdentifier ident_DoUnConditionu_check = refalrts::ident_from_static("DoUnCondition_check");
const refalrts::RefalIdentifier ident_DoUnConditionu_cont = refalrts::ident_from_static("DoUnCondition_cont");
const refalrts::RefalIdentifier ident_DoUnConditionu_forward = refalrts::ident_from_static("DoUnCondition_forward");
const refalrts::RefalIdentifier ident_DoUnConditionu_next = refalrts::ident_from_static("DoUnCondition_next");
const refalrts::RefalIdentifier ident_DoWithBlock = refalrts::ident_from_static("DoWithBlock");
const refalrts::RefalIdentifier ident_Evm_met = refalrts::ident_from_static("Ev-met");
const refalrts::RefalIdentifier ident_ExistFile = refalrts::ident_from_static("ExistFile");
const refalrts::RefalIdentifier ident_Exit = refalrts::ident_from_static("Exit");
const refalrts::RefalIdentifier ident_Explode = refalrts::ident_from_static("Explode");
const refalrts::RefalIdentifier ident_Explodeu_Ext = refalrts::ident_from_static("Explode_Ext");
const refalrts::RefalIdentifier ident_Extern = refalrts::ident_from_static("Extern");
const refalrts::RefalIdentifier ident_ExtractVariables = refalrts::ident_from_static("ExtractVariables");
const refalrts::RefalIdentifier ident_ExtractVariablesm_Expr = refalrts::ident_from_static("ExtractVariables-Expr");
const refalrts::RefalIdentifier ident_ExtractVariablesm_Sentences = refalrts::ident_from_static("ExtractVariables-Sentences");
const refalrts::RefalIdentifier ident_ExtractVariablesm_Tail = refalrts::ident_from_static("ExtractVariables-Tail");
const refalrts::RefalIdentifier ident_Fails = refalrts::ident_from_static("Fails");
const refalrts::RefalIdentifier ident_False = refalrts::ident_from_static("False");
const refalrts::RefalIdentifier ident_First = refalrts::ident_from_static("First");
const refalrts::RefalIdentifier ident_Freeze = refalrts::ident_from_static("Freeze");
const refalrts::RefalIdentifier ident_Freezer = refalrts::ident_from_static("Freezer");
const refalrts::RefalIdentifier ident_Function = refalrts::ident_from_static("Function");
const refalrts::RefalIdentifier ident_Get = refalrts::ident_from_static("Get");
const refalrts::RefalIdentifier ident_GetCurrentDirectory = refalrts::ident_from_static("GetCurrentDirectory");
const refalrts::RefalIdentifier ident_GetEnv = refalrts::ident_from_static("GetEnv");
const refalrts::RefalIdentifier ident_GetFunctionNames = refalrts::ident_from_static("GetFunctionNames");
const refalrts::RefalIdentifier ident_GetPID = refalrts::ident_from_static("GetPID");
const refalrts::RefalIdentifier ident_GetPPID = refalrts::ident_from_static("GetPPID");
const refalrts::RefalIdentifier ident_HOLE = refalrts::ident_from_static("HOLE");
const refalrts::RefalIdentifier ident_HardItem = refalrts::ident_from_static("HardItem");
const refalrts::RefalIdentifier ident_Impk36_k36_ = refalrts::ident_from_static("Imp$$");
const refalrts::RefalIdentifier ident_Implode = refalrts::ident_from_static("Implode");
const refalrts::RefalIdentifier ident_Implodeu_Ext = refalrts::ident_from_static("Implode_Ext");
const refalrts::RefalIdentifier ident_Last = refalrts::ident_from_static("Last");
const refalrts::RefalIdentifier ident_LeftBracket = refalrts::ident_from_static("LeftBracket");
const refalrts::RefalIdentifier ident_Lenw = refalrts::ident_from_static("Lenw");
const refalrts::RefalIdentifier ident_ListOfBuiltin = refalrts::ident_from_static("ListOfBuiltin");
const refalrts::RefalIdentifier ident_Local = refalrts::ident_from_static("Local");
const refalrts::RefalIdentifier ident_Lower = refalrts::ident_from_static("Lower");
const refalrts::RefalIdentifier ident_MakeContinuationSentence = refalrts::ident_from_static("MakeContinuationSentence");
const refalrts::RefalIdentifier ident_MakeOpenEm_ForwardNext = refalrts::ident_from_static("MakeOpenE-ForwardNext");
const refalrts::RefalIdentifier ident_MakeOpenEm_ForwardNextu_check = refalrts::ident_from_static("MakeOpenE-ForwardNext_check");
const refalrts::RefalIdentifier ident_Map = refalrts::ident_from_static("Map");
const refalrts::RefalIdentifier ident_Mod = refalrts::ident_from_static("Mod");
const refalrts::RefalIdentifier ident_Mu = refalrts::ident_from_static("Mu");
const refalrts::RefalIdentifier ident_Mul = refalrts::ident_from_static("Mul");
const refalrts::RefalIdentifier ident_NOm_POS = refalrts::ident_from_static("NO-POS");
const refalrts::RefalIdentifier ident_NewName = refalrts::ident_from_static("NewName");
const refalrts::RefalIdentifier ident_NoContinuation = refalrts::ident_from_static("NoContinuation");
const refalrts::RefalIdentifier ident_Numb = refalrts::ident_from_static("Numb");
const refalrts::RefalIdentifier ident_Number = refalrts::ident_from_static("Number");
const refalrts::RefalIdentifier ident_Open = refalrts::ident_from_static("Open");
const refalrts::RefalIdentifier ident_OpenE = refalrts::ident_from_static("OpenE");
const refalrts::RefalIdentifier ident_OpenEChain = refalrts::ident_from_static("OpenEChain");
const refalrts::RefalIdentifier ident_OpenEChainu_check = refalrts::ident_from_static("OpenEChain_check");
const refalrts::RefalIdentifier ident_OpenEChainu_check0 = refalrts::ident_from_static("OpenEChain_check0");
const refalrts::RefalIdentifier ident_OpenEChainu_check1 = refalrts::ident_from_static("OpenEChain_check1");
const refalrts::RefalIdentifier ident_OpenEChainu_check2 = refalrts::ident_from_static("OpenEChain_check2");
const refalrts::RefalIdentifier ident_OpenEChainu_cont = refalrts::ident_from_static("OpenEChain_cont");
const refalrts::RefalIdentifier ident_Ord = refalrts::ident_from_static("Ord");
const refalrts::RefalIdentifier ident_PassiveHoles = refalrts::ident_from_static("PassiveHoles");
const refalrts::RefalIdentifier ident_PassiveHolesu_check = refalrts::ident_from_static("PassiveHoles_check");
const refalrts::RefalIdentifier ident_PassiveHolesu_cont = refalrts::ident_from_static("PassiveHoles_cont");
const refalrts::RefalIdentifier ident_PassiveHolesu_forward = refalrts::ident_from_static("PassiveHoles_forward");
const refalrts::RefalIdentifier ident_PassiveHolesu_next = refalrts::ident_from_static("PassiveHoles_next");
const refalrts::RefalIdentifier ident_PatternSteps = refalrts::ident_from_static("PatternSteps");
const refalrts::RefalIdentifier ident_Print = refalrts::ident_from_static("Print");
const refalrts::RefalIdentifier ident_Prout = refalrts::ident_from_static("Prout");
const refalrts::RefalIdentifier ident_Put = refalrts::ident_from_static("Put");
const refalrts::RefalIdentifier ident_Putout = refalrts::ident_from_static("Putout");
const refalrts::RefalIdentifier ident_R5m_Builtins = refalrts::ident_from_static("R5-Builtins");
const refalrts::RefalIdentifier ident_R5m_Transform = refalrts::ident_from_static("R5-Transform");
const refalrts::RefalIdentifier ident_R5m_Unique = refalrts::ident_from_static("R5-Unique");
const refalrts::RefalIdentifier ident_RETURN = refalrts::ident_from_static("RETURN");
const refalrts::RefalIdentifier ident_Random = refalrts::ident_from_static("Random");
const refalrts::RefalIdentifier ident_RandomDigit = refalrts::ident_from_static("RandomDigit");
const refalrts::RefalIdentifier ident_RemoveFile = refalrts::ident_from_static("RemoveFile");
const refalrts::RefalIdentifier ident_Residue = refalrts::ident_from_static("Residue");
const refalrts::RefalIdentifier ident_RightBracket = refalrts::ident_from_static("RightBracket");
const refalrts::RefalIdentifier ident_Rp = refalrts::ident_from_static("Rp");
const refalrts::RefalIdentifier ident_SizeOf = refalrts::ident_from_static("SizeOf");
const refalrts::RefalIdentifier ident_SpecialComment = refalrts::ident_from_static("SpecialComment");
const refalrts::RefalIdentifier ident_Step = refalrts::ident_from_static("Step");
const refalrts::RefalIdentifier ident_Stopk36_k36_ = refalrts::ident_from_static("Stop$$");
const refalrts::RefalIdentifier ident_Sub = refalrts::ident_from_static("Sub");
const refalrts::RefalIdentifier ident_Substitute = refalrts::ident_from_static("Substitute");
const refalrts::RefalIdentifier ident_Success = refalrts::ident_from_static("Success");
const refalrts::RefalIdentifier ident_Symb = refalrts::ident_from_static("Symb");
const refalrts::RefalIdentifier ident_Symbol = refalrts::ident_from_static("Symbol");
const refalrts::RefalIdentifier ident_Sysfun = refalrts::ident_from_static("Sysfun");
const refalrts::RefalIdentifier ident_System = refalrts::ident_from_static("System");
const refalrts::RefalIdentifier ident_T0 = refalrts::ident_from_static("T0");
const refalrts::RefalIdentifier ident_T1 = refalrts::ident_from_static("T1");
const refalrts::RefalIdentifier ident_T1u_check = refalrts::ident_from_static("T1_check");
const refalrts::RefalIdentifier ident_T1u_check0 = refalrts::ident_from_static("T1_check0");
const refalrts::RefalIdentifier ident_T1u_check1 = refalrts::ident_from_static("T1_check1");
const refalrts::RefalIdentifier ident_T1u_cont = refalrts::ident_from_static("T1_cont");
const refalrts::RefalIdentifier ident_T1u_cont0 = refalrts::ident_from_static("T1_cont0");
const refalrts::RefalIdentifier ident_T1u_forward = refalrts::ident_from_static("T1_forward");
const refalrts::RefalIdentifier ident_T1u_next = refalrts::ident_from_static("T1_next");
const refalrts::RefalIdentifier ident_T2 = refalrts::ident_from_static("T2");
const refalrts::RefalIdentifier ident_T2u_check = refalrts::ident_from_static("T2_check");
const refalrts::RefalIdentifier ident_T2u_check0 = refalrts::ident_from_static("T2_check0");
const refalrts::RefalIdentifier ident_T2u_check1 = refalrts::ident_from_static("T2_check1");
const refalrts::RefalIdentifier ident_T2u_cont = refalrts::ident_from_static("T2_cont");
const refalrts::RefalIdentifier ident_T2u_cont0 = refalrts::ident_from_static("T2_cont0");
const refalrts::RefalIdentifier ident_T2u_forward = refalrts::ident_from_static("T2_forward");
const refalrts::RefalIdentifier ident_T2u_next = refalrts::ident_from_static("T2_next");
const refalrts::RefalIdentifier ident_T3 = refalrts::ident_from_static("T3");
const refalrts::RefalIdentifier ident_T3u_check = refalrts::ident_from_static("T3_check");
const refalrts::RefalIdentifier ident_T3u_forward = refalrts::ident_from_static("T3_forward");
const refalrts::RefalIdentifier ident_T3u_next = refalrts::ident_from_static("T3_next");
const refalrts::RefalIdentifier ident_T4 = refalrts::ident_from_static("T4");
const refalrts::RefalIdentifier ident_T4u_check = refalrts::ident_from_static("T4_check");
const refalrts::RefalIdentifier ident_T4u_forward = refalrts::ident_from_static("T4_forward");
const refalrts::RefalIdentifier ident_T4u_next = refalrts::ident_from_static("T4_next");
const refalrts::RefalIdentifier ident_T5 = refalrts::ident_from_static("T5");
const refalrts::RefalIdentifier ident_T5m_UnHole = refalrts::ident_from_static("T5-UnHole");
const refalrts::RefalIdentifier ident_T5m_sub = refalrts::ident_from_static("T5-sub");
const refalrts::RefalIdentifier ident_T5m_subu_check = refalrts::ident_from_static("T5-sub_check");
const refalrts::RefalIdentifier ident_T5m_subu_check0 = refalrts::ident_from_static("T5-sub_check0");
const refalrts::RefalIdentifier ident_T5u_check = refalrts::ident_from_static("T5_check");
const refalrts::RefalIdentifier ident_T5u_forward = refalrts::ident_from_static("T5_forward");
const refalrts::RefalIdentifier ident_T5u_next = refalrts::ident_from_static("T5_next");
const refalrts::RefalIdentifier ident_T6 = refalrts::ident_from_static("T6");
const refalrts::RefalIdentifier ident_T6u_check = refalrts::ident_from_static("T6_check");
const refalrts::RefalIdentifier ident_T6u_check0 = refalrts::ident_from_static("T6_check0");
const refalrts::RefalIdentifier ident_T6u_cont = refalrts::ident_from_static("T6_cont");
const refalrts::RefalIdentifier ident_T6u_forward = refalrts::ident_from_static("T6_forward");
const refalrts::RefalIdentifier ident_T6u_next = refalrts::ident_from_static("T6_next");
const refalrts::RefalIdentifier ident_T7 = refalrts::ident_from_static("T7");
const refalrts::RefalIdentifier ident_T7u_check = refalrts::ident_from_static("T7_check");
const refalrts::RefalIdentifier ident_T7u_check0 = refalrts::ident_from_static("T7_check0");
const refalrts::RefalIdentifier ident_T7u_cont = refalrts::ident_from_static("T7_cont");
const refalrts::RefalIdentifier ident_T7u_forward = refalrts::ident_from_static("T7_forward");
const refalrts::RefalIdentifier ident_T7u_next = refalrts::ident_from_static("T7_next");
const refalrts::RefalIdentifier ident_Time = refalrts::ident_from_static("Time");
const refalrts::RefalIdentifier ident_TimeElapsed = refalrts::ident_from_static("TimeElapsed");
const refalrts::RefalIdentifier ident_Transformm_Step = refalrts::ident_from_static("Transform-Step");
const refalrts::RefalIdentifier ident_True = refalrts::ident_from_static("True");
const refalrts::RefalIdentifier ident_Type = refalrts::ident_from_static("Type");
const refalrts::RefalIdentifier ident_TypeCharacter = refalrts::ident_from_static("TypeCharacter");
const refalrts::RefalIdentifier ident_TypeIdentifier = refalrts::ident_from_static("TypeIdentifier");
const refalrts::RefalIdentifier ident_TypeNumber = refalrts::ident_from_static("TypeNumber");
const refalrts::RefalIdentifier ident_UnBlock = refalrts::ident_from_static("UnBlock");
const refalrts::RefalIdentifier ident_UnCondition = refalrts::ident_from_static("UnCondition");
const refalrts::RefalIdentifier ident_UnConditionSentence = refalrts::ident_from_static("UnConditionSentence");
const refalrts::RefalIdentifier ident_UnConditionSentencem_Aux = refalrts::ident_from_static("UnConditionSentence-Aux");
const refalrts::RefalIdentifier ident_UnConditionSentencem_Auxu_check = refalrts::ident_from_static("UnConditionSentence-Aux_check");
const refalrts::RefalIdentifier ident_UnConditionSentencem_Auxu_check0 = refalrts::ident_from_static("UnConditionSentence-Aux_check0");
const refalrts::RefalIdentifier ident_UnConditionSentence0 = refalrts::ident_from_static("UnConditionSentence0");
const refalrts::RefalIdentifier ident_Up = refalrts::ident_from_static("Up");
const refalrts::RefalIdentifier ident_Upper = refalrts::ident_from_static("Upper");
const refalrts::RefalIdentifier ident_Variable = refalrts::ident_from_static("Variable");
const refalrts::RefalIdentifier ident_WithBlock = refalrts::ident_from_static("WithBlock");
const refalrts::RefalIdentifier ident_Write = refalrts::ident_from_static("Write");
const refalrts::RefalIdentifier ident_XMLParse = refalrts::ident_from_static("XMLParse");
const refalrts::RefalIdentifier ident_int4fabu_1 = refalrts::ident_from_static("int4fab_1");
const refalrts::RefalIdentifier ident_regular = refalrts::ident_from_static("regular");
const refalrts::RefalIdentifier ident_special = refalrts::ident_from_static("special");
const refalrts::RefalIdentifier ident_transformeru_AddScopeVars = refalrts::ident_from_static("transformer_AddScopeVars");
const refalrts::RefalIdentifier ident_transformeru_BindBrackets = refalrts::ident_from_static("transformer_BindBrackets");
const refalrts::RefalIdentifier ident_transformeru_MakeVariables = refalrts::ident_from_static("transformer_MakeVariables");
static refalrts::ExternalReference ref_Arg("Arg", 0U, 0U);
static refalrts::ExternalReference ref_Add("Add", 0U, 0U);
static refalrts::ExternalReference ref_Sub("Sub", 0U, 0U);
static refalrts::ExternalReference ref_Mul("Mul", 0U, 0U);
static refalrts::ExternalReference ref_Div("Div", 0U, 0U);
static refalrts::ExternalReference ref_Mod("Mod", 0U, 0U);
static refalrts::ExternalReference ref_Chr("Chr", 0U, 0U);
static refalrts::ExternalReference ref_Ord("Ord", 0U, 0U);
static refalrts::ExternalReference ref_WriteLine("WriteLine", 0U, 0U);
static refalrts::ExternalReference ref_Explode("Explode", 0U, 0U);
static refalrts::ExternalReference ref_FOpen("FOpen", 0U, 0U);
static refalrts::ExternalReference ref_FClose("FClose", 0U, 0U);
static refalrts::ExternalReference ref_FReadLine("FReadLine", 0U, 0U);
static refalrts::ExternalReference ref_FWriteLine("FWriteLine", 0U, 0U);
static refalrts::ExternalReference ref_IntFromStr("IntFromStr", 0U, 0U);
static refalrts::ExternalReference ref_StrFromInt("StrFromInt", 0U, 0U);
static refalrts::ExternalReference ref_SymbType("SymbType", 0U, 0U);
static refalrts::ExternalReference ref_SymbCompare("SymbCompare", 0U, 0U);
static refalrts::ExternalReference ref_Prout("Prout", 786251477U, 1176157594U);
static refalrts::ExternalReference ref_u_u_fileu_handles("__file_handles", 786251477U, 1176157594U);
static refalrts::ExternalReference ref_Open("Open", 786251477U, 1176157594U);
static refalrts::ExternalReference ref_gen_u_u_read_A1("__read=1", 786251477U, 1176157594U);
static refalrts::ExternalReference ref_u_u_read("__read", 786251477U, 1176157594U);
static refalrts::ExternalReference ref_gen_u_u_write_A1("__write=1", 786251477U, 1176157594U);
static refalrts::ExternalReference ref_u_u_write("__write", 786251477U, 1176157594U);
static refalrts::ExternalReference ref_gen_u_u_Openm_SwOpened_S3A1("__Open-SwOpened$3=1", 786251477U, 1176157594U);
static refalrts::ExternalReference ref_u_u_Openm_SwOpened("__Open-SwOpened", 786251477U, 1176157594U);
static refalrts::ExternalReference ref_u_u_handleu_foru_num("__handle_for_num", 786251477U, 1176157594U);
static refalrts::ExternalReference ref_u_u_handleu_foru_numu_opened("__handle_for_num_opened", 786251477U, 1176157594U);
static refalrts::ExternalReference ref_Close("Close", 786251477U, 1176157594U);
static refalrts::ExternalReference ref_u_u_Closem_SwOpened("__Close-SwOpened", 786251477U, 1176157594U);
static refalrts::ExternalReference ref_gen_Get_A1("Get=1", 786251477U, 1176157594U);
static refalrts::ExternalReference ref_Get("Get", 786251477U, 1176157594U);
static refalrts::ExternalReference ref_gen_Putout_A1("Putout=1", 786251477U, 1176157594U);
static refalrts::ExternalReference ref_Putout("Putout", 786251477U, 1176157594U);
static refalrts::ExternalReference ref_Symb("Symb", 786251477U, 1176157594U);
static refalrts::ExternalReference ref_gen_Numb_A1("Numb=1", 786251477U, 1176157594U);
static refalrts::ExternalReference ref_Numb("Numb", 786251477U, 1176157594U);
static refalrts::ExternalReference ref_First("First", 786251477U, 1176157594U);
static refalrts::ExternalReference ref_u_u_DoFirst("__DoFirst", 786251477U, 1176157594U);
static refalrts::ExternalReference ref_ListOfBuiltin("ListOfBuiltin", 786251477U, 1176157594U);
static refalrts::ExternalReference ref_u_u_ListOfBuiltinu_1("__ListOfBuiltin_1", 786251477U, 1176157594U);
static refalrts::ExternalReference ref_u_u_ListOfBuiltinu_2("__ListOfBuiltin_2", 786251477U, 1176157594U);
static refalrts::ExternalReference ref_Type("Type", 786251477U, 1176157594U);
static refalrts::ExternalReference ref_u_u_Typem_SwSymbol("__Type-SwSymbol", 786251477U, 1176157594U);
static refalrts::ExternalReference ref_u_u_Typem_SwCharacter("__Type-SwCharacter", 786251477U, 1176157594U);
static refalrts::ExternalReference ref_u_u_fetch("__fetch", 786251477U, 1176157594U);
static refalrts::ExternalReference ref_gen_u_u_Typem_SwIdentifier_L1("__Type-SwIdentifier\\1", 786251477U, 1176157594U);
static refalrts::ExternalReference ref_u_u_Typem_SwIdentifier("__Type-SwIdentifier", 786251477U, 1176157594U);
static refalrts::ExternalReference ref_gen_u_u_Typem_DoSwIdentifier_S1L1("__Type-DoSwIdentifier$1\\1", 786251477U, 1176157594U);
static refalrts::ExternalReference ref_u_u_Typem_DoSwIdentifier("__Type-DoSwIdentifier", 786251477U, 1176157594U);
static refalrts::ExternalReference ref_gen_u_u_IdentTail_L1("__IdentTail\\1", 786251477U, 1176157594U);
static refalrts::ExternalReference ref_u_u_IdentTail("__IdentTail", 786251477U, 1176157594U);
static refalrts::ExternalReference ref_gen_Compare_L1("Compare\\1", 786251477U, 1176157594U);
static refalrts::ExternalReference ref_Compare("Compare", 786251477U, 1176157594U);
static refalrts::ExternalReference ref_u_u_store("__store", 786251477U, 1176157594U);
static refalrts::ExternalReference ref_Br("Br", 786251477U, 1176157594U);
static refalrts::ExternalReference ref_Dg("Dg", 786251477U, 1176157594U);
static refalrts::ExternalReference ref_u_u_Dgm_SwExist("__Dg-SwExist", 786251477U, 1176157594U);
static refalrts::ExternalReference ref_Explodeu_Ext("Explode_Ext", 786251477U, 1176157594U);
static refalrts::ExternalReference ref_Implodeu_Ext("Implode_Ext", 786251477U, 1176157594U);
static refalrts::ExternalReference ref_Card("Card", 786251477U, 1176157594U);
static refalrts::ExternalReference ref_Cp("Cp", 786251477U, 1176157594U);
static refalrts::ExternalReference ref_Dgall("Dgall", 786251477U, 1176157594U);
static refalrts::ExternalReference ref_Divmod("Divmod", 786251477U, 1176157594U);
static refalrts::ExternalReference ref_Implode("Implode", 786251477U, 1176157594U);
static refalrts::ExternalReference ref_Last("Last", 786251477U, 1176157594U);
static refalrts::ExternalReference ref_Lenw("Lenw", 786251477U, 1176157594U);
static refalrts::ExternalReference ref_Lower("Lower", 786251477U, 1176157594U);
static refalrts::ExternalReference ref_Print("Print", 786251477U, 1176157594U);
static refalrts::ExternalReference ref_Put("Put", 786251477U, 1176157594U);
static refalrts::ExternalReference ref_Rp("Rp", 786251477U, 1176157594U);
static refalrts::ExternalReference ref_Step("Step", 786251477U, 1176157594U);
static refalrts::ExternalReference ref_Time("Time", 786251477U, 1176157594U);
static refalrts::ExternalReference ref_Upper("Upper", 786251477U, 1176157594U);
static refalrts::ExternalReference ref_Sysfun("Sysfun", 786251477U, 1176157594U);
static refalrts::ExternalReference ref_Freeze("Freeze", 786251477U, 1176157594U);
static refalrts::ExternalReference ref_Freezer("Freezer", 786251477U, 1176157594U);
static refalrts::ExternalReference ref_Dn("Dn", 786251477U, 1176157594U);
static refalrts::ExternalReference ref_Up("Up", 786251477U, 1176157594U);
static refalrts::ExternalReference ref_Evm_met("Ev-met", 786251477U, 1176157594U);
static refalrts::ExternalReference ref_Residue("Residue", 786251477U, 1176157594U);
static refalrts::ExternalReference ref_GetEnv("GetEnv", 786251477U, 1176157594U);
static refalrts::ExternalReference ref_System("System", 786251477U, 1176157594U);
static refalrts::ExternalReference ref_Exit("Exit", 786251477U, 1176157594U);
static refalrts::ExternalReference ref_ExistFile("ExistFile", 786251477U, 1176157594U);
static refalrts::ExternalReference ref_GetCurrentDirectory("GetCurrentDirectory", 786251477U, 1176157594U);
static refalrts::ExternalReference ref_RemoveFile("RemoveFile", 786251477U, 1176157594U);
static refalrts::ExternalReference ref_TimeElapsed("TimeElapsed", 786251477U, 1176157594U);
static refalrts::ExternalReference ref_DeSysfun("DeSysfun", 786251477U, 1176157594U);
static refalrts::ExternalReference ref_XMLParse("XMLParse", 786251477U, 1176157594U);
static refalrts::ExternalReference ref_Random("Random", 786251477U, 1176157594U);
static refalrts::ExternalReference ref_RandomDigit("RandomDigit", 786251477U, 1176157594U);
static refalrts::ExternalReference ref_Write("Write", 786251477U, 1176157594U);
static refalrts::ExternalReference ref_SizeOf("SizeOf", 786251477U, 1176157594U);
static refalrts::ExternalReference ref_GetPID("GetPID", 786251477U, 1176157594U);
static refalrts::ExternalReference ref_int4fabu_1("int4fab_1", 786251477U, 1176157594U);
static refalrts::ExternalReference ref_GetPPID("GetPPID", 786251477U, 1176157594U);
static refalrts::ExternalReference ref_Mu("Mu", 786251477U, 1176157594U);
static refalrts::ExternalReference ref_R5m_Builtins("R5-Builtins", 0U, 0U);
static refalrts::ExternalReference ref_R5m_Unique("R5-Unique", 0U, 0U);
static refalrts::ExternalReference ref_R5m_Transform("R5-Transform", 0U, 0U);
static refalrts::ExternalReference ref_Transformm_Step("Transform-Step", 786251477U, 1176157594U);
static refalrts::ExternalReference ref_GetFunctionNames("GetFunctionNames", 786251477U, 1176157594U);
static refalrts::ExternalReference ref_DoTransform("DoTransform", 786251477U, 1176157594U);
static refalrts::ExternalReference ref_DoTransformu_check("DoTransform_check", 786251477U, 1176157594U);
static refalrts::ExternalReference ref_DoTransformu_cont("DoTransform_cont", 786251477U, 1176157594U);
static refalrts::ExternalReference ref_UnBlock("UnBlock", 786251477U, 1176157594U);
static refalrts::ExternalReference ref_DoUnBlock("DoUnBlock", 786251477U, 1176157594U);
static refalrts::ExternalReference ref_DoUnBlocku_check("DoUnBlock_check", 786251477U, 1176157594U);
static refalrts::ExternalReference ref_DoUnBlocku_forward("DoUnBlock_forward", 786251477U, 1176157594U);
static refalrts::ExternalReference ref_DoUnBlocku_next("DoUnBlock_next", 786251477U, 1176157594U);
static refalrts::ExternalReference ref_DoUnBlocku_cont("DoUnBlock_cont", 786251477U, 1176157594U);
static refalrts::ExternalReference ref_DoUnBlocku_check0("DoUnBlock_check0", 786251477U, 1176157594U);
static refalrts::ExternalReference ref_DoUnBlocku_cont0("DoUnBlock_cont0", 786251477U, 1176157594U);
static refalrts::ExternalReference ref_DoUnBlocku_check1("DoUnBlock_check1", 786251477U, 1176157594U);
static refalrts::ExternalReference ref_DoUnBlocku_cont1("DoUnBlock_cont1", 786251477U, 1176157594U);
static refalrts::ExternalReference ref_DoUnBlockm_NextFunction("DoUnBlock-NextFunction", 786251477U, 1176157594U);
static refalrts::ExternalReference ref_WithBlock("WithBlock", 786251477U, 1176157594U);
static refalrts::ExternalReference ref_DoWithBlock("DoWithBlock", 786251477U, 1176157594U);
static refalrts::ExternalReference ref_BlockScopeVars("BlockScopeVars", 786251477U, 1176157594U);
static refalrts::ExternalReference ref_transformeru_MakeVariables("transformer_MakeVariables", 786251477U, 1176157594U);
static refalrts::ExternalReference ref_transformeru_AddScopeVars("transformer_AddScopeVars", 786251477U, 1176157594U);
static refalrts::ExternalReference ref_UnCondition("UnCondition", 786251477U, 1176157594U);
static refalrts::ExternalReference ref_DoUnCondition("DoUnCondition", 786251477U, 1176157594U);
static refalrts::ExternalReference ref_DoUnConditionu_check("DoUnCondition_check", 786251477U, 1176157594U);
static refalrts::ExternalReference ref_DoUnConditionu_forward("DoUnCondition_forward", 786251477U, 1176157594U);
static refalrts::ExternalReference ref_DoUnConditionu_next("DoUnCondition_next", 786251477U, 1176157594U);
static refalrts::ExternalReference ref_DoUnConditionu_cont("DoUnCondition_cont", 786251477U, 1176157594U);
static refalrts::ExternalReference ref_DoUnConditionm_NextFunction("DoUnCondition-NextFunction", 786251477U, 1176157594U);
static refalrts::ExternalReference ref_UnConditionSentence("UnConditionSentence", 786251477U, 1176157594U);
static refalrts::ExternalReference ref_UnConditionSentence0("UnConditionSentence0", 786251477U, 1176157594U);
static refalrts::ExternalReference ref_UnConditionSentencem_Aux("UnConditionSentence-Aux", 786251477U, 1176157594U);
static refalrts::ExternalReference ref_UnConditionSentencem_Auxu_check("UnConditionSentence-Aux_check", 786251477U, 1176157594U);
static refalrts::ExternalReference ref_UnConditionSentencem_Auxu_check0("UnConditionSentence-Aux_check0", 786251477U, 1176157594U);
static refalrts::ExternalReference ref_AnalyzeContinuation("AnalyzeContinuation", 786251477U, 1176157594U);
static refalrts::ExternalReference ref_AnalyzeContinuationu_check("AnalyzeContinuation_check", 786251477U, 1176157594U);
static refalrts::ExternalReference ref_MakeContinuationSentence("MakeContinuationSentence", 786251477U, 1176157594U);
static refalrts::ExternalReference ref_PatternSteps("PatternSteps", 786251477U, 1176157594U);
static refalrts::ExternalReference ref_DoPatternSteps("DoPatternSteps", 786251477U, 1176157594U);
static refalrts::ExternalReference ref_DoPatternSteps0("DoPatternSteps0", 786251477U, 1176157594U);
static refalrts::ExternalReference ref_DoPatternSteps0u_check("DoPatternSteps0_check", 786251477U, 1176157594U);
static refalrts::ExternalReference ref_DoPatternSteps0u_forward("DoPatternSteps0_forward", 786251477U, 1176157594U);
static refalrts::ExternalReference ref_DoPatternSteps0u_next("DoPatternSteps0_next", 786251477U, 1176157594U);
static refalrts::ExternalReference ref_DoPatternSteps0u_cont("DoPatternSteps0_cont", 786251477U, 1176157594U);
static refalrts::ExternalReference ref_DoPatternSteps0u_check0("DoPatternSteps0_check0", 786251477U, 1176157594U);
static refalrts::ExternalReference ref_DoPatternSteps0u_forward0("DoPatternSteps0_forward0", 786251477U, 1176157594U);
static refalrts::ExternalReference ref_DoPatternSteps0u_next0("DoPatternSteps0_next0", 786251477U, 1176157594U);
static refalrts::ExternalReference ref_DoPatternSteps0u_cont0("DoPatternSteps0_cont0", 786251477U, 1176157594U);
static refalrts::ExternalReference ref_HardItem("HardItem", 786251477U, 1176157594U);
static refalrts::ExternalReference ref_transformeru_BindBrackets("transformer_BindBrackets", 786251477U, 1176157594U);
static refalrts::ExternalReference ref_DoBindBrackets("DoBindBrackets", 786251477U, 1176157594U);
static refalrts::ExternalReference ref_DoBindBracketsu_check("DoBindBrackets_check", 786251477U, 1176157594U);
static refalrts::ExternalReference ref_DoBindBracketsu_cont("DoBindBrackets_cont", 786251477U, 1176157594U);
static refalrts::ExternalReference ref_T1("T1", 786251477U, 1176157594U);
static refalrts::ExternalReference ref_T1u_check("T1_check", 786251477U, 1176157594U);
static refalrts::ExternalReference ref_T1u_forward("T1_forward", 786251477U, 1176157594U);
static refalrts::ExternalReference ref_T1u_next("T1_next", 786251477U, 1176157594U);
static refalrts::ExternalReference ref_T1u_check0("T1_check0", 786251477U, 1176157594U);
static refalrts::ExternalReference ref_T1u_cont("T1_cont", 786251477U, 1176157594U);
static refalrts::ExternalReference ref_T1u_check1("T1_check1", 786251477U, 1176157594U);
static refalrts::ExternalReference ref_T1u_cont0("T1_cont0", 786251477U, 1176157594U);
static refalrts::ExternalReference ref_PassiveHoles("PassiveHoles", 786251477U, 1176157594U);
static refalrts::ExternalReference ref_PassiveHolesu_check("PassiveHoles_check", 786251477U, 1176157594U);
static refalrts::ExternalReference ref_PassiveHolesu_forward("PassiveHoles_forward", 786251477U, 1176157594U);
static refalrts::ExternalReference ref_PassiveHolesu_next("PassiveHoles_next", 786251477U, 1176157594U);
static refalrts::ExternalReference ref_PassiveHolesu_cont("PassiveHoles_cont", 786251477U, 1176157594U);
static refalrts::ExternalReference ref_T2("T2", 786251477U, 1176157594U);
static refalrts::ExternalReference ref_T2u_check("T2_check", 786251477U, 1176157594U);
static refalrts::ExternalReference ref_T2u_forward("T2_forward", 786251477U, 1176157594U);
static refalrts::ExternalReference ref_T2u_next("T2_next", 786251477U, 1176157594U);
static refalrts::ExternalReference ref_T2u_check0("T2_check0", 786251477U, 1176157594U);
static refalrts::ExternalReference ref_T2u_cont("T2_cont", 786251477U, 1176157594U);
static refalrts::ExternalReference ref_T2u_check1("T2_check1", 786251477U, 1176157594U);
static refalrts::ExternalReference ref_T2u_cont0("T2_cont0", 786251477U, 1176157594U);
static refalrts::ExternalReference ref_T3("T3", 786251477U, 1176157594U);
static refalrts::ExternalReference ref_T3u_check("T3_check", 786251477U, 1176157594U);
static refalrts::ExternalReference ref_T3u_forward("T3_forward", 786251477U, 1176157594U);
static refalrts::ExternalReference ref_T3u_next("T3_next", 786251477U, 1176157594U);
static refalrts::ExternalReference ref_T4("T4", 786251477U, 1176157594U);
static refalrts::ExternalReference ref_T4u_check("T4_check", 786251477U, 1176157594U);
static refalrts::ExternalReference ref_T4u_forward("T4_forward", 786251477U, 1176157594U);
static refalrts::ExternalReference ref_T4u_next("T4_next", 786251477U, 1176157594U);
static refalrts::ExternalReference ref_T5("T5", 786251477U, 1176157594U);
static refalrts::ExternalReference ref_T5u_check("T5_check", 786251477U, 1176157594U);
static refalrts::ExternalReference ref_T5u_forward("T5_forward", 786251477U, 1176157594U);
static refalrts::ExternalReference ref_T5u_next("T5_next", 786251477U, 1176157594U);
static refalrts::ExternalReference ref_T5m_UnHole("T5-UnHole", 786251477U, 1176157594U);
static refalrts::ExternalReference ref_T5m_sub("T5-sub", 786251477U, 1176157594U);
static refalrts::ExternalReference ref_T5m_subu_check("T5-sub_check", 786251477U, 1176157594U);
static refalrts::ExternalReference ref_T5m_subu_check0("T5-sub_check0", 786251477U, 1176157594U);
static refalrts::ExternalReference ref_Substitute("Substitute", 786251477U, 1176157594U);
static refalrts::ExternalReference ref_T6("T6", 786251477U, 1176157594U);
static refalrts::ExternalReference ref_T6u_check("T6_check", 786251477U, 1176157594U);
static refalrts::ExternalReference ref_T6u_forward("T6_forward", 786251477U, 1176157594U);
static refalrts::ExternalReference ref_T6u_next("T6_next", 786251477U, 1176157594U);
static refalrts::ExternalReference ref_T6u_check0("T6_check0", 786251477U, 1176157594U);
static refalrts::ExternalReference ref_T6u_cont("T6_cont", 786251477U, 1176157594U);
static refalrts::ExternalReference ref_T7("T7", 786251477U, 1176157594U);
static refalrts::ExternalReference ref_T7u_check("T7_check", 786251477U, 1176157594U);
static refalrts::ExternalReference ref_T7u_forward("T7_forward", 786251477U, 1176157594U);
static refalrts::ExternalReference ref_T7u_next("T7_next", 786251477U, 1176157594U);
static refalrts::ExternalReference ref_T7u_check0("T7_check0", 786251477U, 1176157594U);
static refalrts::ExternalReference ref_T7u_cont("T7_cont", 786251477U, 1176157594U);
static refalrts::ExternalReference ref_T0("T0", 786251477U, 1176157594U);
static refalrts::ExternalReference ref_DoT0("DoT0", 786251477U, 1176157594U);
static refalrts::ExternalReference ref_ConditionSubFunctions("ConditionSubFunctions", 786251477U, 1176157594U);
static refalrts::ExternalReference ref_ConditionSubFunctionsu_check("ConditionSubFunctions_check", 786251477U, 1176157594U);
static refalrts::ExternalReference ref_ConditionSubFunctionsu_check0("ConditionSubFunctions_check0", 786251477U, 1176157594U);
static refalrts::ExternalReference ref_ConditionSubFunctionsu_check1("ConditionSubFunctions_check1", 786251477U, 1176157594U);
static refalrts::ExternalReference ref_ConditionSubFunctionsu_check2("ConditionSubFunctions_check2", 786251477U, 1176157594U);
static refalrts::ExternalReference ref_ConditionSubFunctionsu_check3("ConditionSubFunctions_check3", 786251477U, 1176157594U);
static refalrts::ExternalReference ref_ConditionSubFunctionsm_Aux("ConditionSubFunctions-Aux", 786251477U, 1176157594U);
static refalrts::ExternalReference ref_ConditionSubFunctionsm_Auxu_check("ConditionSubFunctions-Aux_check", 786251477U, 1176157594U);
static refalrts::ExternalReference ref_OpenEChain("OpenEChain", 786251477U, 1176157594U);
static refalrts::ExternalReference ref_OpenEChainu_check("OpenEChain_check", 786251477U, 1176157594U);
static refalrts::ExternalReference ref_OpenEChainu_cont("OpenEChain_cont", 786251477U, 1176157594U);
static refalrts::ExternalReference ref_OpenEChainu_check0("OpenEChain_check0", 786251477U, 1176157594U);
static refalrts::ExternalReference ref_OpenEChainu_check1("OpenEChain_check1", 786251477U, 1176157594U);
static refalrts::ExternalReference ref_OpenEChainu_check2("OpenEChain_check2", 786251477U, 1176157594U);
static refalrts::ExternalReference ref_DoOpenEChain("DoOpenEChain", 786251477U, 1176157594U);
static refalrts::ExternalReference ref_DoOpenEChainu_check("DoOpenEChain_check", 786251477U, 1176157594U);
static refalrts::ExternalReference ref_DoOpenEChainu_cont("DoOpenEChain_cont", 786251477U, 1176157594U);
static refalrts::ExternalReference ref_DoOpenEChainu_check0("DoOpenEChain_check0", 786251477U, 1176157594U);
static refalrts::ExternalReference ref_DoOpenEChainu_check1("DoOpenEChain_check1", 786251477U, 1176157594U);
static refalrts::ExternalReference ref_MakeOpenEm_ForwardNext("MakeOpenE-ForwardNext", 786251477U, 1176157594U);
static refalrts::ExternalReference ref_MakeOpenEm_ForwardNextu_check("MakeOpenE-ForwardNext_check", 786251477U, 1176157594U);
static refalrts::ExternalReference ref_ExtractVariables("ExtractVariables", 786251477U, 1176157594U);
static refalrts::ExternalReference ref_ExtractVariablesm_Sentences("ExtractVariables-Sentences", 786251477U, 1176157594U);
static refalrts::ExternalReference ref_ExtractVariablesm_Tail("ExtractVariables-Tail", 786251477U, 1176157594U);
static refalrts::ExternalReference ref_ExtractVariablesm_Expr("ExtractVariables-Expr", 786251477U, 1176157594U);
static refalrts::ExternalReference ref_NewName("NewName", 786251477U, 1176157594U);
static refalrts::ExternalReference ref_DoNewName("DoNewName", 786251477U, 1176157594U);
static refalrts::ExternalReference ref_DoNewNameu_check("DoNewName_check", 786251477U, 1176157594U);
static refalrts::ExternalReference ref_DoNewName0("DoNewName0", 786251477U, 1176157594U);
static refalrts::ExternalReference ref_Symbol("Symbol", 786251477U, 1176157594U);
static refalrts::ExternalReference ref_Apply("Apply", 786251477U, 1176157594U);
static refalrts::ExternalReference ref_Map("Map", 786251477U, 1176157594U);

static refalrts::FnResult func_Prout(refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  refalrts::this_is_generated_function();
  // issue here memory for vars with 5 elems
  refalrts::Iter context[5];
  refalrts::zeros( context, 5 );
  // </0 & Prout/4 e.Text#1/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.Text#1 as range 2
  //DEBUG: e.Text#1: 2

  refalrts::reset_allocator();
  //TRASH: {REMOVED TILE}
  //RESULT: Tile{ [[ AsIs: </0 Reuse: & WriteLine/4 AsIs: e.Text#1/2 AsIs: >/1 ]] }
  refalrts::update_name( context[4], ref_WriteLine.ref.function );
  refalrts::push_stack( context[1] );
  refalrts::push_stack( context[0] );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_Prout("Prout", 786251477U, 1176157594U, func_Prout);

static refalrts::FnResult func_Open(refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  refalrts::this_is_generated_function();
  // issue here memory for vars with 13 elems
  refalrts::Iter context[13];
  refalrts::zeros( context, 13 );
  // </0 & Open/4 s.Mode#1/5 s.Number#1/6 e.FileName#1/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  if( ! refalrts::svar_left( context[5], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  if( ! refalrts::svar_left( context[6], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  // closed e.FileName#1 as range 2
  //DEBUG: s.Mode#1: 5
  //DEBUG: s.Number#1: 6
  //DEBUG: e.FileName#1: 2

  refalrts::reset_allocator();
  //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ } </7 Tile{ HalfReuse: & __Open-SwOpened/0 HalfReuse: (/4 AsIs: s.Mode#1/5 AsIs: s.Number#1/6 AsIs: e.FileName#1/2 HalfReuse: )/1 } </8 & __read/9 & __file_handles/10 >/11 >/12 Tile{ ]] }
  if( ! refalrts::alloc_open_call( context[7] ) )
    return refalrts::cNoMemory;
  if( ! refalrts::alloc_open_call( context[8] ) )
    return refalrts::cNoMemory;
  if( ! refalrts::alloc_name( context[9], ref_u_u_read.ref.function ) )
    return refalrts::cNoMemory;
  if( ! refalrts::alloc_name( context[10], ref_u_u_fileu_handles.ref.function ) )
    return refalrts::cNoMemory;
  if( ! refalrts::alloc_close_call( context[11] ) )
    return refalrts::cNoMemory;
  if( ! refalrts::alloc_close_call( context[12] ) )
    return refalrts::cNoMemory;
  refalrts::reinit_name( context[0], ref_u_u_Openm_SwOpened.ref.function );
  refalrts::reinit_open_bracket( context[4] );
  refalrts::reinit_close_bracket( context[1] );
  refalrts::push_stack( context[12] );
  refalrts::push_stack( context[7] );
  refalrts::push_stack( context[11] );
  refalrts::push_stack( context[8] );
  refalrts::link_brackets( context[4], context[1] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = arg_end->next;
  res = refalrts::splice_evar( res, context[8], context[12] );
  res = refalrts::splice_evar( res, context[0], context[1] );
  res = refalrts::splice_evar( res, context[7], context[7] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_Open("Open", 786251477U, 1176157594U, func_Open);

static refalrts::FnResult func_gen_u_u_read_A1(refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  refalrts::this_is_generated_function();
  // issue here memory for vars with 8 elems
  refalrts::Iter context[8];
  refalrts::zeros( context, 8 );
  // </0 & __read=1/4 s.Swap#1/5 e.Content#2/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  if( ! refalrts::svar_left( context[5], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  // closed e.Content#2 as range 2
  //DEBUG: s.Swap#1: 5
  //DEBUG: e.Content#2: 2

  refalrts::reset_allocator();
  //TRASH: {REMOVED TILE} </0 {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ } Tile{ HalfReuse: </4 AsIs: s.Swap#1/5 AsIs: e.Content#2/2 AsIs: >/1 } e.Content#2/2/6 Tile{ ]] }
  if (! refalrts::copy_evar(context[6], context[7], context[2], context[3]))
    return refalrts::cNoMemory;
  refalrts::reinit_open_call( context[4] );
  refalrts::push_stack( context[1] );
  refalrts::push_stack( context[4] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = arg_end->next;
  res = refalrts::splice_evar( res, context[6], context[7] );
  res = refalrts::splice_evar( res, context[4], context[1] );
  refalrts::splice_to_freelist_open( trash_prev, res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_u_u_read_A1("__read=1", 786251477U, 1176157594U, func_gen_u_u_read_A1);

static refalrts::FnResult func_u_u_read(refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  refalrts::this_is_generated_function();
  // issue here memory for vars with 12 elems
  refalrts::Iter context[12];
  refalrts::zeros( context, 12 );
  // </0 & __read/4 s.Swap#1/5 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  if( ! refalrts::svar_left( context[5], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  if( ! refalrts::empty_seq( context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  //DEBUG: s.Swap#1: 5

  refalrts::reset_allocator();
  //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ } </6 </7 Tile{ HalfReuse: & @create_closure@/0 Reuse: & __read=1/4 AsIs: s.Swap#1/5 AsIs: >/1 } </8 s.Swap#1/5/9 >/10 >/11 Tile{ ]] }
  if( ! refalrts::alloc_open_call( context[6] ) )
    return refalrts::cNoMemory;
  if( ! refalrts::alloc_open_call( context[7] ) )
    return refalrts::cNoMemory;
  if( ! refalrts::alloc_open_call( context[8] ) )
    return refalrts::cNoMemory;
  if (! refalrts::copy_stvar(context[9], context[5]))
    return refalrts::cNoMemory;
  if( ! refalrts::alloc_close_call( context[10] ) )
    return refalrts::cNoMemory;
  if( ! refalrts::alloc_close_call( context[11] ) )
    return refalrts::cNoMemory;
  refalrts::reinit_name( context[0], refalrts::create_closure );
  refalrts::update_name( context[4], ref_gen_u_u_read_A1.ref.function );
  refalrts::push_stack( context[11] );
  refalrts::push_stack( context[6] );
  refalrts::push_stack( context[10] );
  refalrts::push_stack( context[8] );
  refalrts::push_stack( context[1] );
  refalrts::push_stack( context[7] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = arg_end->next;
  res = refalrts::splice_evar( res, context[8], context[11] );
  res = refalrts::splice_evar( res, context[0], context[1] );
  res = refalrts::splice_evar( res, context[6], context[7] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_u_u_read("__read", 786251477U, 1176157594U, func_u_u_read);

static refalrts::FnResult func_gen_u_u_write_A1(refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  refalrts::this_is_generated_function();
  // issue here memory for vars with 5 elems
  refalrts::Iter context[5];
  refalrts::zeros( context, 5 );
  // </0 & __write=1/4 e.OldContent#2/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.OldContent#2 as range 2
  //DEBUG: e.OldContent#2: 2

  refalrts::reset_allocator();
  //TRASH: {REMOVED TILE} </0 & __write=1/4 e.OldContent#2/2 >/1 {REMOVED TILE}
  //RESULT: Tile{ [[ } Tile{ ]] }
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = arg_end->next;
  refalrts::splice_to_freelist_open( trash_prev, res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_u_u_write_A1("__write=1", 786251477U, 1176157594U, func_gen_u_u_write_A1);

static refalrts::FnResult func_u_u_write(refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  refalrts::this_is_generated_function();
  // issue here memory for vars with 8 elems
  refalrts::Iter context[8];
  refalrts::zeros( context, 8 );
  // </0 & __write/4 s.Swap#1/5 e.Content#1/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  if( ! refalrts::svar_left( context[5], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  // closed e.Content#1 as range 2
  //DEBUG: s.Swap#1: 5
  //DEBUG: e.Content#1: 2

  refalrts::reset_allocator();
  //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ } </6 Tile{ HalfReuse: & __write=1/0 HalfReuse: </4 AsIs: s.Swap#1/5 AsIs: e.Content#1/2 AsIs: >/1 } >/7 Tile{ ]] }
  if( ! refalrts::alloc_open_call( context[6] ) )
    return refalrts::cNoMemory;
  if( ! refalrts::alloc_close_call( context[7] ) )
    return refalrts::cNoMemory;
  refalrts::reinit_name( context[0], ref_gen_u_u_write_A1.ref.function );
  refalrts::reinit_open_call( context[4] );
  refalrts::push_stack( context[7] );
  refalrts::push_stack( context[6] );
  refalrts::push_stack( context[1] );
  refalrts::push_stack( context[4] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = arg_end->next;
  res = refalrts::splice_evar( res, context[7], context[7] );
  res = refalrts::splice_evar( res, context[0], context[1] );
  res = refalrts::splice_evar( res, context[6], context[6] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_u_u_write("__write", 786251477U, 1176157594U, func_u_u_write);

static refalrts::FnResult func_gen_u_u_Openm_SwOpened_S3A1(refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  refalrts::this_is_generated_function();
  // issue here memory for vars with 13 elems
  refalrts::Iter context[13];
  refalrts::zeros( context, 13 );
  // </0 & __Open-SwOpened$3=1/4 s.Number#1/5 (/8 e.Handles#1/6 )/9 s.Handle#2/10 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  if( ! refalrts::svar_left( context[5], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  context[6] = 0;
  context[7] = 0;
  context[8] = refalrts::brackets_left( context[6], context[7], context[2], context[3] );
  if( ! context[8] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[8], context[9]);
  // closed e.Handles#1 as range 6
  if( ! refalrts::svar_left( context[10], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  if( ! refalrts::empty_seq( context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  //DEBUG: s.Number#1: 5
  //DEBUG: e.Handles#1: 6
  //DEBUG: s.Handle#2: 10

  refalrts::reset_allocator();
  //TRASH: {REMOVED TILE} s.Number#1/5 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ AsIs: </0 Reuse: & __write/4 } & __file_handles/11 Tile{ AsIs: (/8 } Tile{ HalfReuse: s.Number1 #5/9 AsIs: s.Handle#2/10 } )/12 Tile{ AsIs: e.Handles#1/6 } Tile{ AsIs: >/1 ]] }
  if( ! refalrts::alloc_name( context[11], ref_u_u_fileu_handles.ref.function ) )
    return refalrts::cNoMemory;
  if( ! refalrts::alloc_close_bracket( context[12] ) )
    return refalrts::cNoMemory;
  refalrts::update_name( context[4], ref_u_u_write.ref.function );
  refalrts::reinit_svar( context[9], context[5] );
  refalrts::push_stack( context[1] );
  refalrts::push_stack( context[0] );
  refalrts::link_brackets( context[8], context[12] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[1];
  res = refalrts::splice_evar( res, context[6], context[7] );
  res = refalrts::splice_evar( res, context[12], context[12] );
  res = refalrts::splice_evar( res, context[9], context[10] );
  res = refalrts::splice_evar( res, context[8], context[8] );
  res = refalrts::splice_evar( res, context[11], context[11] );
  refalrts::splice_to_freelist_open( context[4], res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_u_u_Openm_SwOpened_S3A1("__Open-SwOpened$3=1", 786251477U, 1176157594U, func_gen_u_u_Openm_SwOpened_S3A1);

static refalrts::FnResult func_u_u_Openm_SwOpened(refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  refalrts::this_is_generated_function();
  // issue here memory for vars with 23 elems
  refalrts::Iter context[23];
  refalrts::zeros( context, 23 );
  //FAST GEN: ( e.$ ) e.$
  //GLOBAL GEN: ( s.$ s.$ e.$ ) e.$
  // </0 & __Open-SwOpened/4 (/7 s.idxB#0/9 s.idxBV#0/10 e.idxBVV#0/5 )/8 e.idxT#0/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  context[5] = 0;
  context[6] = 0;
  context[7] = refalrts::brackets_left( context[5], context[6], context[2], context[3] );
  if( ! context[7] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[7], context[8]);
  // closed e.idxT#0 as range 2
  if( ! refalrts::svar_left( context[9], context[5], context[6] ) )
    return refalrts::cRecognitionImpossible;
  if( ! refalrts::svar_left( context[10], context[5], context[6] ) )
    return refalrts::cRecognitionImpossible;
  // closed e.idxBVV#0 as range 5
  do {
    // ( s.idx s.idx e.idx ) e.idx
    // </0 & __Open-SwOpened/4 (/7 s.Mode#1/9 s.Number#1/10 e.FileName#1/5 )/8 e.Handles-B#1/11 (/15 s.Number#1/17 s.Handle#1/18 )/16 e.Handles-E#1/2 >/1
    // closed e.FileName#1 as range 5
    context[19] = context[2];
    context[20] = context[3];
    context[11] = 0;
    context[12] = 0;
    refalrts::start_e_loop();
    do {
      context[21] = context[19];
      context[22] = context[20];
      context[13] = 0;
      context[14] = 0;
      context[15] = refalrts::brackets_left( context[13], context[14], context[21], context[22] );
      if( ! context[15] )
        continue;
      refalrts::bracket_pointers(context[15], context[16]);
      if( ! refalrts::repeated_stvar_left( context[17], context[10], context[13], context[14] ) )
        continue;
      // closed e.Handles-E#1 as range 21(2)
      if( ! refalrts::svar_left( context[18], context[13], context[14] ) )
        continue;
      if( ! refalrts::empty_seq( context[13], context[14] ) )
        continue;
      //DEBUG: s.Mode#1: 9
      //DEBUG: s.Number#1: 10
      //DEBUG: e.FileName#1: 5
      //DEBUG: e.Handles-B#1: 11
      //DEBUG: e.Handles-E#1: 2
      //DEBUG: s.Handle#1: 18

      refalrts::reset_allocator();
      //TRASH: {REMOVED TILE} {REMOVED TILE} e.Handles-B#1/11 {REMOVED TILE} s.Number#1/17 {REMOVED TILE} )/16 e.Handles-E#1/21(2) {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ } Tile{ HalfReuse: </1 } Tile{ HalfReuse: & FClose/15 } Tile{ AsIs: s.Handle#1/18 } Tile{ HalfReuse: >/0 HalfReuse: </4 HalfReuse: & Open/7 AsIs: s.Mode#1/9 AsIs: s.Number#1/10 AsIs: e.FileName#1/5 HalfReuse: >/8 } Tile{ ]] }
      refalrts::reinit_open_call( context[1] );
      refalrts::reinit_name( context[15], ref_FClose.ref.function );
      refalrts::reinit_close_call( context[0] );
      refalrts::reinit_open_call( context[4] );
      refalrts::reinit_name( context[7], ref_Open.ref.function );
      refalrts::reinit_close_call( context[8] );
      refalrts::push_stack( context[8] );
      refalrts::push_stack( context[4] );
      refalrts::push_stack( context[0] );
      refalrts::push_stack( context[1] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = arg_end->next;
      res = refalrts::splice_evar( res, context[0], context[8] );
      res = refalrts::splice_evar( res, context[18], context[18] );
      res = refalrts::splice_evar( res, context[15], context[15] );
      res = refalrts::splice_evar( res, context[1], context[1] );
      refalrts::splice_to_freelist_open( trash_prev, res );
      return refalrts::cSuccess;
    } while ( refalrts::open_evar_advance( context[11], context[12], context[19], context[20] ) );
  } while ( 0 );
  refalrts::stop_sentence();

  do {
    // ( s.idx s.idx ) e.idx
    // </0 & __Open-SwOpened/4 (/7 s.Mode#1/9 s.Number#1/10 )/8 e.Handles#1/2 >/1
    context[19] = context[5];
    context[20] = context[6];
    if( ! refalrts::empty_seq( context[19], context[20] ) )
      continue;
    // closed e.Handles#1 as range 2
    //DEBUG: s.Mode#1: 9
    //DEBUG: s.Number#1: 10
    //DEBUG: e.Handles#1: 2

    refalrts::reset_allocator();
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} e.Handles#1/2 {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ HalfReuse: </4 HalfReuse: & Open/7 AsIs: s.Mode#1/9 AsIs: s.Number#1/10 HalfReuse: 'R'/8 }"EFAL"/11 Tile{ AsIs: </0 } & Symb/13 s.Number#1/10/14 >/15".DAT"/16 Tile{ AsIs: >/1 ]] }
    if( ! refalrts::alloc_chars( context[11], context[12], "EFAL", 4 ) )
      return refalrts::cNoMemory;
    if( ! refalrts::alloc_name( context[13], ref_Symb.ref.function ) )
      return refalrts::cNoMemory;
    if (! refalrts::copy_stvar(context[14], context[10]))
      return refalrts::cNoMemory;
    if( ! refalrts::alloc_close_call( context[15] ) )
      return refalrts::cNoMemory;
    if( ! refalrts::alloc_chars( context[16], context[17], ".DAT", 4 ) )
      return refalrts::cNoMemory;
    refalrts::reinit_open_call( context[4] );
    refalrts::reinit_name( context[7], ref_Open.ref.function );
    refalrts::reinit_char( context[8], 'R' );
    refalrts::push_stack( context[1] );
    refalrts::push_stack( context[4] );
    refalrts::push_stack( context[15] );
    refalrts::push_stack( context[0] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    res = refalrts::splice_evar( res, context[13], context[17] );
    res = refalrts::splice_evar( res, context[0], context[0] );
    res = refalrts::splice_evar( res, context[11], context[12] );
    res = refalrts::splice_evar( res, context[4], context[8] );
    refalrts::splice_to_freelist_open( trash_prev, res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence();

  // ( s.idx s.idx e.idx ) e.idx
  // </0 & __Open-SwOpened/4 (/7 s.Mode#1/9 s.Number#1/10 e.FileName#1/5 )/8 e.Handles#1/2 >/1
  // closed e.FileName#1 as range 5
  // closed e.Handles#1 as range 2
  //DEBUG: s.Mode#1: 9
  //DEBUG: s.Number#1: 10
  //DEBUG: e.FileName#1: 5
  //DEBUG: e.Handles#1: 2

  refalrts::reset_allocator();
  //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ AsIs: </0 HalfReuse: </4 HalfReuse: & @create_closure@/7 } & __Open-SwOpened$3=1/11 Tile{ AsIs: s.Number#1/10 } (/12 Tile{ AsIs: e.Handles#1/2 } Tile{ AsIs: )/8 } >/13 </14 & FOpen/15 Tile{ AsIs: s.Mode#1/9 } Tile{ AsIs: e.FileName#1/5 } >/16 Tile{ AsIs: >/1 ]] }
  if( ! refalrts::alloc_name( context[11], ref_gen_u_u_Openm_SwOpened_S3A1.ref.function ) )
    return refalrts::cNoMemory;
  if( ! refalrts::alloc_open_bracket( context[12] ) )
    return refalrts::cNoMemory;
  if( ! refalrts::alloc_close_call( context[13] ) )
    return refalrts::cNoMemory;
  if( ! refalrts::alloc_open_call( context[14] ) )
    return refalrts::cNoMemory;
  if( ! refalrts::alloc_name( context[15], ref_FOpen.ref.function ) )
    return refalrts::cNoMemory;
  if( ! refalrts::alloc_close_call( context[16] ) )
    return refalrts::cNoMemory;
  refalrts::reinit_open_call( context[4] );
  refalrts::reinit_name( context[7], refalrts::create_closure );
  refalrts::push_stack( context[1] );
  refalrts::push_stack( context[0] );
  refalrts::push_stack( context[16] );
  refalrts::push_stack( context[14] );
  refalrts::push_stack( context[13] );
  refalrts::push_stack( context[4] );
  refalrts::link_brackets( context[12], context[8] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[1];
  res = refalrts::splice_evar( res, context[16], context[16] );
  res = refalrts::splice_evar( res, context[5], context[6] );
  res = refalrts::splice_evar( res, context[9], context[9] );
  res = refalrts::splice_evar( res, context[13], context[15] );
  res = refalrts::splice_evar( res, context[8], context[8] );
  res = refalrts::splice_evar( res, context[2], context[3] );
  res = refalrts::splice_evar( res, context[12], context[12] );
  res = refalrts::splice_evar( res, context[10], context[10] );
  res = refalrts::splice_evar( res, context[11], context[11] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_u_u_Openm_SwOpened("__Open-SwOpened", 786251477U, 1176157594U, func_u_u_Openm_SwOpened);

static refalrts::FnResult func_u_u_handleu_foru_num(refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  refalrts::this_is_generated_function();
  // issue here memory for vars with 11 elems
  refalrts::Iter context[11];
  refalrts::zeros( context, 11 );
  // </0 & __handle_for_num/4 s.Mode#1/5 s.Number#1/6 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  if( ! refalrts::svar_left( context[5], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  if( ! refalrts::svar_left( context[6], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  if( ! refalrts::empty_seq( context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  //DEBUG: s.Mode#1: 5
  //DEBUG: s.Number#1: 6

  refalrts::reset_allocator();
  //TRASH: {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ AsIs: </0 Reuse: & __handle_for_num_opened/4 AsIs: s.Mode#1/5 AsIs: s.Number#1/6 HalfReuse: </1 } & __read/7 & __file_handles/8 >/9 >/10 Tile{ ]] }
  if( ! refalrts::alloc_name( context[7], ref_u_u_read.ref.function ) )
    return refalrts::cNoMemory;
  if( ! refalrts::alloc_name( context[8], ref_u_u_fileu_handles.ref.function ) )
    return refalrts::cNoMemory;
  if( ! refalrts::alloc_close_call( context[9] ) )
    return refalrts::cNoMemory;
  if( ! refalrts::alloc_close_call( context[10] ) )
    return refalrts::cNoMemory;
  refalrts::update_name( context[4], ref_u_u_handleu_foru_numu_opened.ref.function );
  refalrts::reinit_open_call( context[1] );
  refalrts::push_stack( context[10] );
  refalrts::push_stack( context[0] );
  refalrts::push_stack( context[9] );
  refalrts::push_stack( context[1] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = arg_end->next;
  res = refalrts::splice_evar( res, context[7], context[10] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_u_u_handleu_foru_num("__handle_for_num", 786251477U, 1176157594U, func_u_u_handleu_foru_num);

static refalrts::FnResult func_u_u_handleu_foru_numu_opened(refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  refalrts::this_is_generated_function();
  // issue here memory for vars with 19 elems
  refalrts::Iter context[19];
  refalrts::zeros( context, 19 );
  //FAST GEN: s.$ s.$ e.$
  //GLOBAL GEN: s.$ s.$ e.$
  // </0 & __handle_for_num_opened/4 s.idx#0/5 s.idxV#0/6 e.idxVV#0/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  if( ! refalrts::svar_left( context[5], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  if( ! refalrts::svar_left( context[6], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  // closed e.idxVV#0 as range 2
  do {
    // s.idx s.idx e.idx
    // </0 & __handle_for_num_opened/4 s.Mode#1/5 s.Number#1/6 e.Handles-B#1/7 (/11 s.Number#1/13 s.Handle#1/14 )/12 e.Handles-E#1/2 >/1
    context[15] = context[2];
    context[16] = context[3];
    context[7] = 0;
    context[8] = 0;
    refalrts::start_e_loop();
    do {
      context[17] = context[15];
      context[18] = context[16];
      context[9] = 0;
      context[10] = 0;
      context[11] = refalrts::brackets_left( context[9], context[10], context[17], context[18] );
      if( ! context[11] )
        continue;
      refalrts::bracket_pointers(context[11], context[12]);
      if( ! refalrts::repeated_stvar_left( context[13], context[6], context[9], context[10] ) )
        continue;
      // closed e.Handles-E#1 as range 17(2)
      if( ! refalrts::svar_left( context[14], context[9], context[10] ) )
        continue;
      if( ! refalrts::empty_seq( context[9], context[10] ) )
        continue;
      //DEBUG: s.Mode#1: 5
      //DEBUG: s.Number#1: 6
      //DEBUG: e.Handles-B#1: 7
      //DEBUG: e.Handles-E#1: 2
      //DEBUG: s.Handle#1: 14

      refalrts::reset_allocator();
      //TRASH: {REMOVED TILE} </0 & __handle_for_num_opened/4 s.Mode#1/5 s.Number#1/6 e.Handles-B#1/7 (/11 s.Number#1/13 s.Handle#1/14 )/12 e.Handles-E#1/17(2) {REMOVED TILE}
      //RESULT: Tile{ [[ } Tile{ HalfReuse: s.Handle1 #14/1 ]] }
      refalrts::reinit_svar( context[1], context[14] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[1];
      refalrts::splice_to_freelist_open( trash_prev, res );
      return refalrts::cSuccess;
    } while ( refalrts::open_evar_advance( context[7], context[8], context[15], context[16] ) );
  } while ( 0 );
  refalrts::stop_sentence();

  // s.idx s.idx e.idx
  // </0 & __handle_for_num_opened/4 s.Mode#1/5 s.Number#1/6 e.Handles#1/2 >/1
  // closed e.Handles#1 as range 2
  //DEBUG: s.Mode#1: 5
  //DEBUG: s.Number#1: 6
  //DEBUG: e.Handles#1: 2

  refalrts::reset_allocator();
  //TRASH: {REMOVED TILE} e.Handles#1/2 {REMOVED TILE}
  //RESULT: Tile{ [[ AsIs: </0 Reuse: & Open/4 AsIs: s.Mode#1/5 AsIs: s.Number#1/6 } >/7 </8 & __handle_for_num/9 s.Mode#1/5/10 s.Number#1/6/11 Tile{ AsIs: >/1 ]] }
  if( ! refalrts::alloc_close_call( context[7] ) )
    return refalrts::cNoMemory;
  if( ! refalrts::alloc_open_call( context[8] ) )
    return refalrts::cNoMemory;
  if( ! refalrts::alloc_name( context[9], ref_u_u_handleu_foru_num.ref.function ) )
    return refalrts::cNoMemory;
  if (! refalrts::copy_stvar(context[10], context[5]))
    return refalrts::cNoMemory;
  if (! refalrts::copy_stvar(context[11], context[6]))
    return refalrts::cNoMemory;
  refalrts::update_name( context[4], ref_Open.ref.function );
  refalrts::push_stack( context[1] );
  refalrts::push_stack( context[8] );
  refalrts::push_stack( context[7] );
  refalrts::push_stack( context[0] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[1];
  res = refalrts::splice_evar( res, context[7], context[11] );
  refalrts::splice_to_freelist_open( context[6], res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_u_u_handleu_foru_numu_opened("__handle_for_num_opened", 786251477U, 1176157594U, func_u_u_handleu_foru_numu_opened);

static refalrts::FnResult func_Close(refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  refalrts::this_is_generated_function();
  // issue here memory for vars with 10 elems
  refalrts::Iter context[10];
  refalrts::zeros( context, 10 );
  // </0 & Close/4 s.Number#1/5 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  if( ! refalrts::svar_left( context[5], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  if( ! refalrts::empty_seq( context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  //DEBUG: s.Number#1: 5

  refalrts::reset_allocator();
  //TRASH: {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ AsIs: </0 Reuse: & __Close-SwOpened/4 AsIs: s.Number#1/5 HalfReuse: </1 } & __read/6 & __file_handles/7 >/8 >/9 Tile{ ]] }
  if( ! refalrts::alloc_name( context[6], ref_u_u_read.ref.function ) )
    return refalrts::cNoMemory;
  if( ! refalrts::alloc_name( context[7], ref_u_u_fileu_handles.ref.function ) )
    return refalrts::cNoMemory;
  if( ! refalrts::alloc_close_call( context[8] ) )
    return refalrts::cNoMemory;
  if( ! refalrts::alloc_close_call( context[9] ) )
    return refalrts::cNoMemory;
  refalrts::update_name( context[4], ref_u_u_Closem_SwOpened.ref.function );
  refalrts::reinit_open_call( context[1] );
  refalrts::push_stack( context[9] );
  refalrts::push_stack( context[0] );
  refalrts::push_stack( context[8] );
  refalrts::push_stack( context[1] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = arg_end->next;
  res = refalrts::splice_evar( res, context[6], context[9] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_Close("Close", 786251477U, 1176157594U, func_Close);

static refalrts::FnResult func_u_u_Closem_SwOpened(refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  refalrts::this_is_generated_function();
  // issue here memory for vars with 18 elems
  refalrts::Iter context[18];
  refalrts::zeros( context, 18 );
  // </0 & __Close-SwOpened/4 s.Number#1/5 e.Handles-B#1/6 (/10 s.Number#1/12 s.Handle#1/13 )/11 e.Handles-E#1/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  if( ! refalrts::svar_left( context[5], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  context[6] = 0;
  context[7] = 0;
  refalrts::start_e_loop();
  do {
    context[16] = context[2];
    context[17] = context[3];
    context[8] = 0;
    context[9] = 0;
    context[10] = refalrts::brackets_left( context[8], context[9], context[16], context[17] );
    if( ! context[10] )
      continue;
    refalrts::bracket_pointers(context[10], context[11]);
    if( ! refalrts::repeated_stvar_left( context[12], context[5], context[8], context[9] ) )
      continue;
    // closed e.Handles-E#1 as range 16(2)
    if( ! refalrts::svar_left( context[13], context[8], context[9] ) )
      continue;
    if( ! refalrts::empty_seq( context[8], context[9] ) )
      continue;
    //DEBUG: s.Number#1: 5
    //DEBUG: e.Handles-B#1: 6
    //DEBUG: e.Handles-E#1: 2
    //DEBUG: s.Handle#1: 13

    refalrts::reset_allocator();
    //TRASH: {REMOVED TILE} s.Number#1/5 {REMOVED TILE} {REMOVED TILE} s.Number#1/12 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 Reuse: & FClose/4 } Tile{ AsIs: s.Handle#1/13 HalfReuse: >/11 } </14 Tile{ HalfReuse: & __write/10 } & __file_handles/15 Tile{ AsIs: e.Handles-B#1/6 } Tile{ AsIs: e.Handles-E#1/16(2) } Tile{ AsIs: >/1 ]] }
    if( ! refalrts::alloc_open_call( context[14] ) )
      return refalrts::cNoMemory;
    if( ! refalrts::alloc_name( context[15], ref_u_u_fileu_handles.ref.function ) )
      return refalrts::cNoMemory;
    refalrts::update_name( context[4], ref_FClose.ref.function );
    refalrts::reinit_close_call( context[11] );
    refalrts::reinit_name( context[10], ref_u_u_write.ref.function );
    refalrts::push_stack( context[1] );
    refalrts::push_stack( context[14] );
    refalrts::push_stack( context[11] );
    refalrts::push_stack( context[0] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    res = refalrts::splice_evar( res, context[16], context[17] );
    res = refalrts::splice_evar( res, context[6], context[7] );
    res = refalrts::splice_evar( res, context[15], context[15] );
    res = refalrts::splice_evar( res, context[10], context[10] );
    res = refalrts::splice_evar( res, context[14], context[14] );
    res = refalrts::splice_evar( res, context[13], context[11] );
    refalrts::splice_to_freelist_open( context[4], res );
    return refalrts::cSuccess;
  } while ( refalrts::open_evar_advance( context[6], context[7], context[2], context[3] ) );
  return refalrts::cRecognitionImpossible;
}

static refalrts::NativeReference nat_ref_u_u_Closem_SwOpened("__Close-SwOpened", 786251477U, 1176157594U, func_u_u_Closem_SwOpened);

static refalrts::FnResult func_gen_Get_A1(refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  refalrts::this_is_generated_function();
  // issue here memory for vars with 6 elems
  refalrts::Iter context[6];
  refalrts::zeros( context, 6 );
  // </0 & Get=1/4 s.Handle#2/5 e.Line#2/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  if( ! refalrts::svar_left( context[5], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  // closed e.Line#2 as range 2
  //DEBUG: s.Handle#2: 5
  //DEBUG: e.Line#2: 2

  refalrts::reset_allocator();
  //TRASH: {REMOVED TILE} </0 & Get=1/4 s.Handle#2/5 {REMOVED TILE} >/1 {REMOVED TILE}
  //RESULT: Tile{ [[ } Tile{ AsIs: e.Line#2/2 } Tile{ ]] }
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = arg_end->next;
  res = refalrts::splice_evar( res, context[2], context[3] );
  refalrts::splice_to_freelist_open( trash_prev, res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_Get_A1("Get=1", 786251477U, 1176157594U, func_gen_Get_A1);

static refalrts::FnResult func_Get(refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  refalrts::this_is_generated_function();
  // issue here memory for vars with 13 elems
  refalrts::Iter context[13];
  refalrts::zeros( context, 13 );
  // </0 & Get/4 s.Number#1/5 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  if( ! refalrts::svar_left( context[5], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  if( ! refalrts::empty_seq( context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  //DEBUG: s.Number#1: 5

  refalrts::reset_allocator();
  //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ AsIs: </0 Reuse: & Get=1/4 } </6 & FReadLine/7 </8 & __handle_for_num/9 'r'/10 Tile{ AsIs: s.Number#1/5 AsIs: >/1 } >/11 >/12 Tile{ ]] }
  if( ! refalrts::alloc_open_call( context[6] ) )
    return refalrts::cNoMemory;
  if( ! refalrts::alloc_name( context[7], ref_FReadLine.ref.function ) )
    return refalrts::cNoMemory;
  if( ! refalrts::alloc_open_call( context[8] ) )
    return refalrts::cNoMemory;
  if( ! refalrts::alloc_name( context[9], ref_u_u_handleu_foru_num.ref.function ) )
    return refalrts::cNoMemory;
  if( ! refalrts::alloc_char( context[10], 'r' ) )
    return refalrts::cNoMemory;
  if( ! refalrts::alloc_close_call( context[11] ) )
    return refalrts::cNoMemory;
  if( ! refalrts::alloc_close_call( context[12] ) )
    return refalrts::cNoMemory;
  refalrts::update_name( context[4], ref_gen_Get_A1.ref.function );
  refalrts::push_stack( context[12] );
  refalrts::push_stack( context[0] );
  refalrts::push_stack( context[11] );
  refalrts::push_stack( context[6] );
  refalrts::push_stack( context[1] );
  refalrts::push_stack( context[8] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = arg_end->next;
  res = refalrts::splice_evar( res, context[11], context[12] );
  res = refalrts::splice_evar( res, context[5], context[1] );
  res = refalrts::splice_evar( res, context[6], context[10] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_Get("Get", 786251477U, 1176157594U, func_Get);

static refalrts::FnResult func_gen_Putout_A1(refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  refalrts::this_is_generated_function();
  // issue here memory for vars with 6 elems
  refalrts::Iter context[6];
  refalrts::zeros( context, 6 );
  // </0 & Putout=1/4 s.Handle#2/5 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  if( ! refalrts::svar_left( context[5], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  if( ! refalrts::empty_seq( context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  //DEBUG: s.Handle#2: 5

  refalrts::reset_allocator();
  //TRASH: {REMOVED TILE} </0 & Putout=1/4 s.Handle#2/5 >/1 {REMOVED TILE}
  //RESULT: Tile{ [[ } Tile{ ]] }
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = arg_end->next;
  refalrts::splice_to_freelist_open( trash_prev, res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_Putout_A1("Putout=1", 786251477U, 1176157594U, func_gen_Putout_A1);

static refalrts::FnResult func_Putout(refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  refalrts::this_is_generated_function();
  // issue here memory for vars with 13 elems
  refalrts::Iter context[13];
  refalrts::zeros( context, 13 );
  // </0 & Putout/4 s.Number#1/5 e.Line#1/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  if( ! refalrts::svar_left( context[5], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  // closed e.Line#1 as range 2
  //DEBUG: s.Number#1: 5
  //DEBUG: e.Line#1: 2

  refalrts::reset_allocator();
  //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ AsIs: </0 Reuse: & Putout=1/4 } </6 & FWriteLine/7 </8 & __handle_for_num/9 'w'/10 Tile{ AsIs: s.Number#1/5 } >/11 Tile{ AsIs: e.Line#1/2 } >/12 Tile{ AsIs: >/1 ]] }
  if( ! refalrts::alloc_open_call( context[6] ) )
    return refalrts::cNoMemory;
  if( ! refalrts::alloc_name( context[7], ref_FWriteLine.ref.function ) )
    return refalrts::cNoMemory;
  if( ! refalrts::alloc_open_call( context[8] ) )
    return refalrts::cNoMemory;
  if( ! refalrts::alloc_name( context[9], ref_u_u_handleu_foru_num.ref.function ) )
    return refalrts::cNoMemory;
  if( ! refalrts::alloc_char( context[10], 'w' ) )
    return refalrts::cNoMemory;
  if( ! refalrts::alloc_close_call( context[11] ) )
    return refalrts::cNoMemory;
  if( ! refalrts::alloc_close_call( context[12] ) )
    return refalrts::cNoMemory;
  refalrts::update_name( context[4], ref_gen_Putout_A1.ref.function );
  refalrts::push_stack( context[1] );
  refalrts::push_stack( context[0] );
  refalrts::push_stack( context[12] );
  refalrts::push_stack( context[6] );
  refalrts::push_stack( context[11] );
  refalrts::push_stack( context[8] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[1];
  res = refalrts::splice_evar( res, context[12], context[12] );
  res = refalrts::splice_evar( res, context[2], context[3] );
  res = refalrts::splice_evar( res, context[11], context[11] );
  res = refalrts::splice_evar( res, context[5], context[5] );
  res = refalrts::splice_evar( res, context[6], context[10] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_Putout("Putout", 786251477U, 1176157594U, func_Putout);

static refalrts::FnResult func_Symb(refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  refalrts::this_is_generated_function();
  // issue here memory for vars with 6 elems
  refalrts::Iter context[6];
  refalrts::zeros( context, 6 );
  // </0 & Symb/4 s.Number#1/5 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  if( ! refalrts::svar_left( context[5], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  if( ! refalrts::empty_seq( context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  //DEBUG: s.Number#1: 5

  refalrts::reset_allocator();
  //TRASH: {REMOVED TILE}
  //RESULT: Tile{ [[ AsIs: </0 Reuse: & StrFromInt/4 AsIs: s.Number#1/5 AsIs: >/1 ]] }
  refalrts::update_name( context[4], ref_StrFromInt.ref.function );
  refalrts::push_stack( context[1] );
  refalrts::push_stack( context[0] );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_Symb("Symb", 786251477U, 1176157594U, func_Symb);

static refalrts::FnResult func_gen_Numb_A1(refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  refalrts::this_is_generated_function();
  // issue here memory for vars with 7 elems
  refalrts::Iter context[7];
  refalrts::zeros( context, 7 );
  // </0 & Numb=1/4 # Success/5 s.Number#2/6 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  context[5] = refalrts::ident_left(  ident_Success, context[2], context[3] );
  if( ! context[5] )
    return refalrts::cRecognitionImpossible;
  if( ! refalrts::svar_left( context[6], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  if( ! refalrts::empty_seq( context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  //DEBUG: s.Number#2: 6

  refalrts::reset_allocator();
  //TRASH: {REMOVED TILE} </0 & Numb=1/4 # Success/5 s.Number#2/6 {REMOVED TILE}
  //RESULT: Tile{ [[ } Tile{ HalfReuse: s.Number2 #6/1 ]] }
  refalrts::reinit_svar( context[1], context[6] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[1];
  refalrts::splice_to_freelist_open( trash_prev, res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_Numb_A1("Numb=1", 786251477U, 1176157594U, func_gen_Numb_A1);

static refalrts::FnResult func_Numb(refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  refalrts::this_is_generated_function();
  // issue here memory for vars with 8 elems
  refalrts::Iter context[8];
  refalrts::zeros( context, 8 );
  // </0 & Numb/4 e.String#1/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.String#1 as range 2
  //DEBUG: e.String#1: 2

  refalrts::reset_allocator();
  //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ } </5 & Numb=1/6 Tile{ AsIs: </0 Reuse: & IntFromStr/4 AsIs: e.String#1/2 AsIs: >/1 } >/7 Tile{ ]] }
  if( ! refalrts::alloc_open_call( context[5] ) )
    return refalrts::cNoMemory;
  if( ! refalrts::alloc_name( context[6], ref_gen_Numb_A1.ref.function ) )
    return refalrts::cNoMemory;
  if( ! refalrts::alloc_close_call( context[7] ) )
    return refalrts::cNoMemory;
  refalrts::update_name( context[4], ref_IntFromStr.ref.function );
  refalrts::push_stack( context[7] );
  refalrts::push_stack( context[5] );
  refalrts::push_stack( context[1] );
  refalrts::push_stack( context[0] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = arg_end->next;
  res = refalrts::splice_evar( res, context[7], context[7] );
  res = refalrts::splice_evar( res, context[0], context[1] );
  res = refalrts::splice_evar( res, context[5], context[6] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_Numb("Numb", 786251477U, 1176157594U, func_Numb);

static refalrts::FnResult func_First(refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  refalrts::this_is_generated_function();
  // issue here memory for vars with 8 elems
  refalrts::Iter context[8];
  refalrts::zeros( context, 8 );
  // </0 & First/4 s.N#1/5 e.Expr#1/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  if( ! refalrts::svar_left( context[5], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  // closed e.Expr#1 as range 2
  //DEBUG: s.N#1: 5
  //DEBUG: e.Expr#1: 2

  refalrts::reset_allocator();
  //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ AsIs: </0 Reuse: & __DoFirst/4 AsIs: s.N#1/5 } (/6 )/7 Tile{ AsIs: e.Expr#1/2 } Tile{ AsIs: >/1 ]] }
  if( ! refalrts::alloc_open_bracket( context[6] ) )
    return refalrts::cNoMemory;
  if( ! refalrts::alloc_close_bracket( context[7] ) )
    return refalrts::cNoMemory;
  refalrts::update_name( context[4], ref_u_u_DoFirst.ref.function );
  refalrts::push_stack( context[1] );
  refalrts::push_stack( context[0] );
  refalrts::link_brackets( context[6], context[7] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[1];
  res = refalrts::splice_evar( res, context[2], context[3] );
  res = refalrts::splice_evar( res, context[6], context[7] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_First("First", 786251477U, 1176157594U, func_First);

static refalrts::FnResult func_u_u_DoFirst(refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  refalrts::this_is_generated_function();
  // issue here memory for vars with 18 elems
  refalrts::Iter context[18];
  refalrts::zeros( context, 18 );
  //FAST GEN: e.$
  //GLOBAL GEN: s.$ ( e.$ ) e.$
  // </0 & __DoFirst/4 s.idx#0/5 (/8 e.idxVB#0/6 )/9 e.idxVT#0/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  if( ! refalrts::svar_left( context[5], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  context[6] = 0;
  context[7] = 0;
  context[8] = refalrts::brackets_left( context[6], context[7], context[2], context[3] );
  if( ! context[8] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[8], context[9]);
  // closed e.idxVB#0 as range 6
  // closed e.idxVT#0 as range 2
  do {
    // 0 ( e.idx ) e.idx
    // </0 & __DoFirst/4 0/5 (/8 e.Scanned#1/6 )/9 e.Expr#1/2 >/1
    if( ! refalrts::number_term( 0UL, context[5] ) )
      continue;
    // closed e.Scanned#1 as range 6
    // closed e.Expr#1 as range 2
    //DEBUG: e.Scanned#1: 6
    //DEBUG: e.Expr#1: 2

    refalrts::reset_allocator();
    //TRASH: {REMOVED TILE} </0 & __DoFirst/4 0/5 {REMOVED TILE} {REMOVED TILE} >/1 {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ AsIs: (/8 AsIs: e.Scanned#1/6 AsIs: )/9 } Tile{ AsIs: e.Expr#1/2 } Tile{ ]] }
    refalrts::link_brackets( context[8], context[9] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = arg_end->next;
    res = refalrts::splice_evar( res, context[2], context[3] );
    res = refalrts::splice_evar( res, context[8], context[9] );
    refalrts::splice_to_freelist_open( trash_prev, res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence();

  do {
    // s.idx ( e.idx )
    // </0 & __DoFirst/4 s.N#1/5 (/8 e.Scanned#1/6 )/9 >/1
    context[16] = context[2];
    context[17] = context[3];
    if( ! refalrts::empty_seq( context[16], context[17] ) )
      continue;
    // closed e.Scanned#1 as range 6
    //DEBUG: s.N#1: 5
    //DEBUG: e.Scanned#1: 6

    refalrts::reset_allocator();
    //TRASH: {REMOVED TILE} </0 & __DoFirst/4 s.N#1/5 {REMOVED TILE} >/1 {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ AsIs: (/8 AsIs: e.Scanned#1/6 AsIs: )/9 } Tile{ ]] }
    refalrts::link_brackets( context[8], context[9] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = arg_end->next;
    res = refalrts::splice_evar( res, context[8], context[9] );
    refalrts::splice_to_freelist_open( trash_prev, res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence();

  // s.idx ( e.idx ) t.idx e.idx
  // </0 & __DoFirst/4 s.N#1/5 (/8 e.Scanned#1/6 )/9 t.Next#1/10 e.Expr#1/2 >/1
  // closed e.Scanned#1 as range 6
  context[11] = refalrts::tvar_left( context[10], context[2], context[3] );
  if( ! context[11] )
    return refalrts::cRecognitionImpossible;
  // closed e.Expr#1 as range 2
  //DEBUG: s.N#1: 5
  //DEBUG: e.Scanned#1: 6
  //DEBUG: t.Next#1: 10
  //DEBUG: e.Expr#1: 2

  refalrts::reset_allocator();
  //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ AsIs: </0 AsIs: & __DoFirst/4 } </12 & Sub/13 Tile{ AsIs: s.N#1/5 HalfReuse: 1/8 } >/14 (/15 Tile{ AsIs: e.Scanned#1/6 } Tile{ AsIs: t.Next#1/10 } Tile{ AsIs: )/9 } Tile{ AsIs: e.Expr#1/2 } Tile{ AsIs: >/1 ]] }
  if( ! refalrts::alloc_open_call( context[12] ) )
    return refalrts::cNoMemory;
  if( ! refalrts::alloc_name( context[13], ref_Sub.ref.function ) )
    return refalrts::cNoMemory;
  if( ! refalrts::alloc_close_call( context[14] ) )
    return refalrts::cNoMemory;
  if( ! refalrts::alloc_open_bracket( context[15] ) )
    return refalrts::cNoMemory;
  refalrts::reinit_number( context[8], 1UL );
  refalrts::push_stack( context[1] );
  refalrts::push_stack( context[0] );
  refalrts::link_brackets( context[15], context[9] );
  refalrts::push_stack( context[14] );
  refalrts::push_stack( context[12] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[1];
  res = refalrts::splice_evar( res, context[2], context[3] );
  res = refalrts::splice_evar( res, context[9], context[9] );
  res = refalrts::splice_evar( res, context[10], context[11] );
  res = refalrts::splice_evar( res, context[6], context[7] );
  res = refalrts::splice_evar( res, context[14], context[15] );
  res = refalrts::splice_evar( res, context[5], context[8] );
  res = refalrts::splice_evar( res, context[12], context[13] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_u_u_DoFirst("__DoFirst", 786251477U, 1176157594U, func_u_u_DoFirst);

static refalrts::FnResult func_ListOfBuiltin(refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  refalrts::this_is_generated_function();
  // issue here memory for vars with 8 elems
  refalrts::Iter context[8];
  refalrts::zeros( context, 8 );
  // </0 & ListOfBuiltin/4 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  if( ! refalrts::empty_seq( context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;

  refalrts::reset_allocator();
  //TRASH: {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ AsIs: </0 Reuse: & __ListOfBuiltin_1/4 AsIs: >/1 } </5 & __ListOfBuiltin_2/6 >/7 Tile{ ]] }
  if( ! refalrts::alloc_open_call( context[5] ) )
    return refalrts::cNoMemory;
  if( ! refalrts::alloc_name( context[6], ref_u_u_ListOfBuiltinu_2.ref.function ) )
    return refalrts::cNoMemory;
  if( ! refalrts::alloc_close_call( context[7] ) )
    return refalrts::cNoMemory;
  refalrts::update_name( context[4], ref_u_u_ListOfBuiltinu_1.ref.function );
  refalrts::push_stack( context[7] );
  refalrts::push_stack( context[5] );
  refalrts::push_stack( context[1] );
  refalrts::push_stack( context[0] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = arg_end->next;
  res = refalrts::splice_evar( res, context[5], context[7] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_ListOfBuiltin("ListOfBuiltin", 786251477U, 1176157594U, func_ListOfBuiltin);

static refalrts::FnResult func_u_u_ListOfBuiltinu_1(refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  refalrts::this_is_generated_function();
  // issue here memory for vars with 177 elems
  refalrts::Iter context[177];
  refalrts::zeros( context, 177 );
  // </0 & __ListOfBuiltin_1/4 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  if( ! refalrts::empty_seq( context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;

  refalrts::reset_allocator();
  //TRASH: {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ HalfReuse: (/0 HalfReuse: 1/4 HalfReuse: # Mu/1 } # special/5 )/6 (/7 2/8 # Add/9 # regular/10 )/11 (/12 3/13 # Arg/14 # regular/15 )/16 (/17 4/18 # Br/19 # regular/20 )/21 (/22 5/23 # Card/24 # regular/25 )/26 (/27 6/28 # Chr/29 # regular/30 )/31 (/32 7/33 # Cp/34 # regular/35 )/36 (/37 8/38 # Dg/39 # regular/40 )/41 (/42 9/43 # Dgall/44 # regular/45 )/46 (/47 10/48 # Div/49 # regular/50 )/51 (/52 11/53 # Divmod/54 # regular/55 )/56 (/57 12/58 # Explode/59 # regular/60 )/61 (/62 13/63 # First/64 # regular/65 )/66 (/67 14/68 # Get/69 # regular/70 )/71 (/72 15/73 # Implode/74 # regular/75 )/76 (/77 16/78 # Last/79 # regular/80 )/81 (/82 17/83 # Lenw/84 # regular/85 )/86 (/87 18/88 # Lower/89 # regular/90 )/91 (/92 19/93 # Mod/94 # regular/95 )/96 (/97 20/98 # Mul/99 # regular/100 )/101 (/102 21/103 # Numb/104 # regular/105 )/106 (/107 22/108 # Open/109 # regular/110 )/111 (/112 23/113 # Ord/114 # regular/115 )/116 (/117 24/118 # Print/119 # regular/120 )/121 (/122 25/123 # Prout/124 # regular/125 )/126 (/127 26/128 # Put/129 # regular/130 )/131 (/132 27/133 # Putout/134 # regular/135 )/136 (/137 28/138 # Rp/139 # regular/140 )/141 (/142 29/143 # Step/144 # regular/145 )/146 (/147 30/148 # Sub/149 # regular/150 )/151 (/152 31/153 # Symb/154 # regular/155 )/156 (/157 32/158 # Time/159 # regular/160 )/161 (/162 33/163 # Type/164 # regular/165 )/166 (/167 34/168 # Upper/169 # regular/170 )/171 (/172 35/173 # Sysfun/174 # regular/175 )/176 Tile{ ]] }
  if( ! refalrts::alloc_ident( context[5], ident_special ) )
    return refalrts::cNoMemory;
  if( ! refalrts::alloc_close_bracket( context[6] ) )
    return refalrts::cNoMemory;
  if( ! refalrts::alloc_open_bracket( context[7] ) )
    return refalrts::cNoMemory;
  if( ! refalrts::alloc_number( context[8], 2UL ) )
    return refalrts::cNoMemory;
  if( ! refalrts::alloc_ident( context[9], ident_Add ) )
    return refalrts::cNoMemory;
  if( ! refalrts::alloc_ident( context[10], ident_regular ) )
    return refalrts::cNoMemory;
  if( ! refalrts::alloc_close_bracket( context[11] ) )
    return refalrts::cNoMemory;
  if( ! refalrts::alloc_open_bracket( context[12] ) )
    return refalrts::cNoMemory;
  if( ! refalrts::alloc_number( context[13], 3UL ) )
    return refalrts::cNoMemory;
  if( ! refalrts::alloc_ident( context[14], ident_Arg ) )
    return refalrts::cNoMemory;
  if( ! refalrts::alloc_ident( context[15], ident_regular ) )
    return refalrts::cNoMemory;
  if( ! refalrts::alloc_close_bracket( context[16] ) )
    return refalrts::cNoMemory;
  if( ! refalrts::alloc_open_bracket( context[17] ) )
    return refalrts::cNoMemory;
  if( ! refalrts::alloc_number( context[18], 4UL ) )
    return refalrts::cNoMemory;
  if( ! refalrts::alloc_ident( context[19], ident_Br ) )
    return refalrts::cNoMemory;
  if( ! refalrts::alloc_ident( context[20], ident_regular ) )
    return refalrts::cNoMemory;
  if( ! refalrts::alloc_close_bracket( context[21] ) )
    return refalrts::cNoMemory;
  if( ! refalrts::alloc_open_bracket( context[22] ) )
    return refalrts::cNoMemory;
  if( ! refalrts::alloc_number( context[23], 5UL ) )
    return refalrts::cNoMemory;
  if( ! refalrts::alloc_ident( context[24], ident_Card ) )
    return refalrts::cNoMemory;
  if( ! refalrts::alloc_ident( context[25], ident_regular ) )
    return refalrts::cNoMemory;
  if( ! refalrts::alloc_close_bracket( context[26] ) )
    return refalrts::cNoMemory;
  if( ! refalrts::alloc_open_bracket( context[27] ) )
    return refalrts::cNoMemory;
  if( ! refalrts::alloc_number( context[28], 6UL ) )
    return refalrts::cNoMemory;
  if( ! refalrts::alloc_ident( context[29], ident_Chr ) )
    return refalrts::cNoMemory;
  if( ! refalrts::alloc_ident( context[30], ident_regular ) )
    return refalrts::cNoMemory;
  if( ! refalrts::alloc_close_bracket( context[31] ) )
    return refalrts::cNoMemory;
  if( ! refalrts::alloc_open_bracket( context[32] ) )
    return refalrts::cNoMemory;
  if( ! refalrts::alloc_number( context[33], 7UL ) )
    return refalrts::cNoMemory;
  if( ! refalrts::alloc_ident( context[34], ident_Cp ) )
    return refalrts::cNoMemory;
  if( ! refalrts::alloc_ident( context[35], ident_regular ) )
    return refalrts::cNoMemory;
  if( ! refalrts::alloc_close_bracket( context[36] ) )
    return refalrts::cNoMemory;
  if( ! refalrts::alloc_open_bracket( context[37] ) )
    return refalrts::cNoMemory;
  if( ! refalrts::alloc_number( context[38], 8UL ) )
    return refalrts::cNoMemory;
  if( ! refalrts::alloc_ident( context[39], ident_Dg ) )
    return refalrts::cNoMemory;
  if( ! refalrts::alloc_ident( context[40], ident_regular ) )
    return refalrts::cNoMemory;
  if( ! refalrts::alloc_close_bracket( context[41] ) )
    return refalrts::cNoMemory;
  if( ! refalrts::alloc_open_bracket( context[42] ) )
    return refalrts::cNoMemory;
  if( ! refalrts::alloc_number( context[43], 9UL ) )
    return refalrts::cNoMemory;
  if( ! refalrts::alloc_ident( context[44], ident_Dgall ) )
    return refalrts::cNoMemory;
  if( ! refalrts::alloc_ident( context[45], ident_regular ) )
    return refalrts::cNoMemory;
  if( ! refalrts::alloc_close_bracket( context[46] ) )
    return refalrts::cNoMemory;
  if( ! refalrts::alloc_open_bracket( context[47] ) )
    return refalrts::cNoMemory;
  if( ! refalrts::alloc_number( context[48], 10UL ) )
    return refalrts::cNoMemory;
  if( ! refalrts::alloc_ident( context[49], ident_Div ) )
    return refalrts::cNoMemory;
  if( ! refalrts::alloc_ident( context[50], ident_regular ) )
    return refalrts::cNoMemory;
  if( ! refalrts::alloc_close_bracket( context[51] ) )
    return refalrts::cNoMemory;
  if( ! refalrts::alloc_open_bracket( context[52] ) )
    return refalrts::cNoMemory;
  if( ! refalrts::alloc_number( context[53], 11UL ) )
    return refalrts::cNoMemory;
  if( ! refalrts::alloc_ident( context[54], ident_Divmod ) )
    return refalrts::cNoMemory;
  if( ! refalrts::alloc_ident( context[55], ident_regular ) )
    return refalrts::cNoMemory;
  if( ! refalrts::alloc_close_bracket( context[56] ) )
    return refalrts::cNoMemory;
  if( ! refalrts::alloc_open_bracket( context[57] ) )
    return refalrts::cNoMemory;
  if( ! refalrts::alloc_number( context[58], 12UL ) )
    return refalrts::cNoMemory;
  if( ! refalrts::alloc_ident( context[59], ident_Explode ) )
    return refalrts::cNoMemory;
  if( ! refalrts::alloc_ident( context[60], ident_regular ) )
    return refalrts::cNoMemory;
  if( ! refalrts::alloc_close_bracket( context[61] ) )
    return refalrts::cNoMemory;
  if( ! refalrts::alloc_open_bracket( context[62] ) )
    return refalrts::cNoMemory;
  if( ! refalrts::alloc_number( context[63], 13UL ) )
    return refalrts::cNoMemory;
  if( ! refalrts::alloc_ident( context[64], ident_First ) )
    return refalrts::cNoMemory;
  if( ! refalrts::alloc_ident( context[65], ident_regular ) )
    return refalrts::cNoMemory;
  if( ! refalrts::alloc_close_bracket( context[66] ) )
    return refalrts::cNoMemory;
  if( ! refalrts::alloc_open_bracket( context[67] ) )
    return refalrts::cNoMemory;
  if( ! refalrts::alloc_number( context[68], 14UL ) )
    return refalrts::cNoMemory;
  if( ! refalrts::alloc_ident( context[69], ident_Get ) )
    return refalrts::cNoMemory;
  if( ! refalrts::alloc_ident( context[70], ident_regular ) )
    return refalrts::cNoMemory;
  if( ! refalrts::alloc_close_bracket( context[71] ) )
    return refalrts::cNoMemory;
  if( ! refalrts::alloc_open_bracket( context[72] ) )
    return refalrts::cNoMemory;
  if( ! refalrts::alloc_number( context[73], 15UL ) )
    return refalrts::cNoMemory;
  if( ! refalrts::alloc_ident( context[74], ident_Implode ) )
    return refalrts::cNoMemory;
  if( ! refalrts::alloc_ident( context[75], ident_regular ) )
    return refalrts::cNoMemory;
  if( ! refalrts::alloc_close_bracket( context[76] ) )
    return refalrts::cNoMemory;
  if( ! refalrts::alloc_open_bracket( context[77] ) )
    return refalrts::cNoMemory;
  if( ! refalrts::alloc_number( context[78], 16UL ) )
    return refalrts::cNoMemory;
  if( ! refalrts::alloc_ident( context[79], ident_Last ) )
    return refalrts::cNoMemory;
  if( ! refalrts::alloc_ident( context[80], ident_regular ) )
    return refalrts::cNoMemory;
  if( ! refalrts::alloc_close_bracket( context[81] ) )
    return refalrts::cNoMemory;
  if( ! refalrts::alloc_open_bracket( context[82] ) )
    return refalrts::cNoMemory;
  if( ! refalrts::alloc_number( context[83], 17UL ) )
    return refalrts::cNoMemory;
  if( ! refalrts::alloc_ident( context[84], ident_Lenw ) )
    return refalrts::cNoMemory;
  if( ! refalrts::alloc_ident( context[85], ident_regular ) )
    return refalrts::cNoMemory;
  if( ! refalrts::alloc_close_bracket( context[86] ) )
    return refalrts::cNoMemory;
  if( ! refalrts::alloc_open_bracket( context[87] ) )
    return refalrts::cNoMemory;
  if( ! refalrts::alloc_number( context[88], 18UL ) )
    return refalrts::cNoMemory;
  if( ! refalrts::alloc_ident( context[89], ident_Lower ) )
    return refalrts::cNoMemory;
  if( ! refalrts::alloc_ident( context[90], ident_regular ) )
    return refalrts::cNoMemory;
  if( ! refalrts::alloc_close_bracket( context[91] ) )
    return refalrts::cNoMemory;
  if( ! refalrts::alloc_open_bracket( context[92] ) )
    return refalrts::cNoMemory;
  if( ! refalrts::alloc_number( context[93], 19UL ) )
    return refalrts::cNoMemory;
  if( ! refalrts::alloc_ident( context[94], ident_Mod ) )
    return refalrts::cNoMemory;
  if( ! refalrts::alloc_ident( context[95], ident_regular ) )
    return refalrts::cNoMemory;
  if( ! refalrts::alloc_close_bracket( context[96] ) )
    return refalrts::cNoMemory;
  if( ! refalrts::alloc_open_bracket( context[97] ) )
    return refalrts::cNoMemory;
  if( ! refalrts::alloc_number( context[98], 20UL ) )
    return refalrts::cNoMemory;
  if( ! refalrts::alloc_ident( context[99], ident_Mul ) )
    return refalrts::cNoMemory;
  if( ! refalrts::alloc_ident( context[100], ident_regular ) )
    return refalrts::cNoMemory;
  if( ! refalrts::alloc_close_bracket( context[101] ) )
    return refalrts::cNoMemory;
  if( ! refalrts::alloc_open_bracket( context[102] ) )
    return refalrts::cNoMemory;
  if( ! refalrts::alloc_number( context[103], 21UL ) )
    return refalrts::cNoMemory;
  if( ! refalrts::alloc_ident( context[104], ident_Numb ) )
    return refalrts::cNoMemory;
  if( ! refalrts::alloc_ident( context[105], ident_regular ) )
    return refalrts::cNoMemory;
  if( ! refalrts::alloc_close_bracket( context[106] ) )
    return refalrts::cNoMemory;
  if( ! refalrts::alloc_open_bracket( context[107] ) )
    return refalrts::cNoMemory;
  if( ! refalrts::alloc_number( context[108], 22UL ) )
    return refalrts::cNoMemory;
  if( ! refalrts::alloc_ident( context[109], ident_Open ) )
    return refalrts::cNoMemory;
  if( ! refalrts::alloc_ident( context[110], ident_regular ) )
    return refalrts::cNoMemory;
  if( ! refalrts::alloc_close_bracket( context[111] ) )
    return refalrts::cNoMemory;
  if( ! refalrts::alloc_open_bracket( context[112] ) )
    return refalrts::cNoMemory;
  if( ! refalrts::alloc_number( context[113], 23UL ) )
    return refalrts::cNoMemory;
  if( ! refalrts::alloc_ident( context[114], ident_Ord ) )
    return refalrts::cNoMemory;
  if( ! refalrts::alloc_ident( context[115], ident_regular ) )
    return refalrts::cNoMemory;
  if( ! refalrts::alloc_close_bracket( context[116] ) )
    return refalrts::cNoMemory;
  if( ! refalrts::alloc_open_bracket( context[117] ) )
    return refalrts::cNoMemory;
  if( ! refalrts::alloc_number( context[118], 24UL ) )
    return refalrts::cNoMemory;
  if( ! refalrts::alloc_ident( context[119], ident_Print ) )
    return refalrts::cNoMemory;
  if( ! refalrts::alloc_ident( context[120], ident_regular ) )
    return refalrts::cNoMemory;
  if( ! refalrts::alloc_close_bracket( context[121] ) )
    return refalrts::cNoMemory;
  if( ! refalrts::alloc_open_bracket( context[122] ) )
    return refalrts::cNoMemory;
  if( ! refalrts::alloc_number( context[123], 25UL ) )
    return refalrts::cNoMemory;
  if( ! refalrts::alloc_ident( context[124], ident_Prout ) )
    return refalrts::cNoMemory;
  if( ! refalrts::alloc_ident( context[125], ident_regular ) )
    return refalrts::cNoMemory;
  if( ! refalrts::alloc_close_bracket( context[126] ) )
    return refalrts::cNoMemory;
  if( ! refalrts::alloc_open_bracket( context[127] ) )
    return refalrts::cNoMemory;
  if( ! refalrts::alloc_number( context[128], 26UL ) )
    return refalrts::cNoMemory;
  if( ! refalrts::alloc_ident( context[129], ident_Put ) )
    return refalrts::cNoMemory;
  if( ! refalrts::alloc_ident( context[130], ident_regular ) )
    return refalrts::cNoMemory;
  if( ! refalrts::alloc_close_bracket( context[131] ) )
    return refalrts::cNoMemory;
  if( ! refalrts::alloc_open_bracket( context[132] ) )
    return refalrts::cNoMemory;
  if( ! refalrts::alloc_number( context[133], 27UL ) )
    return refalrts::cNoMemory;
  if( ! refalrts::alloc_ident( context[134], ident_Putout ) )
    return refalrts::cNoMemory;
  if( ! refalrts::alloc_ident( context[135], ident_regular ) )
    return refalrts::cNoMemory;
  if( ! refalrts::alloc_close_bracket( context[136] ) )
    return refalrts::cNoMemory;
  if( ! refalrts::alloc_open_bracket( context[137] ) )
    return refalrts::cNoMemory;
  if( ! refalrts::alloc_number( context[138], 28UL ) )
    return refalrts::cNoMemory;
  if( ! refalrts::alloc_ident( context[139], ident_Rp ) )
    return refalrts::cNoMemory;
  if( ! refalrts::alloc_ident( context[140], ident_regular ) )
    return refalrts::cNoMemory;
  if( ! refalrts::alloc_close_bracket( context[141] ) )
    return refalrts::cNoMemory;
  if( ! refalrts::alloc_open_bracket( context[142] ) )
    return refalrts::cNoMemory;
  if( ! refalrts::alloc_number( context[143], 29UL ) )
    return refalrts::cNoMemory;
  if( ! refalrts::alloc_ident( context[144], ident_Step ) )
    return refalrts::cNoMemory;
  if( ! refalrts::alloc_ident( context[145], ident_regular ) )
    return refalrts::cNoMemory;
  if( ! refalrts::alloc_close_bracket( context[146] ) )
    return refalrts::cNoMemory;
  if( ! refalrts::alloc_open_bracket( context[147] ) )
    return refalrts::cNoMemory;
  if( ! refalrts::alloc_number( context[148], 30UL ) )
    return refalrts::cNoMemory;
  if( ! refalrts::alloc_ident( context[149], ident_Sub ) )
    return refalrts::cNoMemory;
  if( ! refalrts::alloc_ident( context[150], ident_regular ) )
    return refalrts::cNoMemory;
  if( ! refalrts::alloc_close_bracket( context[151] ) )
    return refalrts::cNoMemory;
  if( ! refalrts::alloc_open_bracket( context[152] ) )
    return refalrts::cNoMemory;
  if( ! refalrts::alloc_number( context[153], 31UL ) )
    return refalrts::cNoMemory;
  if( ! refalrts::alloc_ident( context[154], ident_Symb ) )
    return refalrts::cNoMemory;
  if( ! refalrts::alloc_ident( context[155], ident_regular ) )
    return refalrts::cNoMemory;
  if( ! refalrts::alloc_close_bracket( context[156] ) )
    return refalrts::cNoMemory;
  if( ! refalrts::alloc_open_bracket( context[157] ) )
    return refalrts::cNoMemory;
  if( ! refalrts::alloc_number( context[158], 32UL ) )
    return refalrts::cNoMemory;
  if( ! refalrts::alloc_ident( context[159], ident_Time ) )
    return refalrts::cNoMemory;
  if( ! refalrts::alloc_ident( context[160], ident_regular ) )
    return refalrts::cNoMemory;
  if( ! refalrts::alloc_close_bracket( context[161] ) )
    return refalrts::cNoMemory;
  if( ! refalrts::alloc_open_bracket( context[162] ) )
    return refalrts::cNoMemory;
  if( ! refalrts::alloc_number( context[163], 33UL ) )
    return refalrts::cNoMemory;
  if( ! refalrts::alloc_ident( context[164], ident_Type ) )
    return refalrts::cNoMemory;
  if( ! refalrts::alloc_ident( context[165], ident_regular ) )
    return refalrts::cNoMemory;
  if( ! refalrts::alloc_close_bracket( context[166] ) )
    return refalrts::cNoMemory;
  if( ! refalrts::alloc_open_bracket( context[167] ) )
    return refalrts::cNoMemory;
  if( ! refalrts::alloc_number( context[168], 34UL ) )
    return refalrts::cNoMemory;
  if( ! refalrts::alloc_ident( context[169], ident_Upper ) )
    return refalrts::cNoMemory;
  if( ! refalrts::alloc_ident( context[170], ident_regular ) )
    return refalrts::cNoMemory;
  if( ! refalrts::alloc_close_bracket( context[171] ) )
    return refalrts::cNoMemory;
  if( ! refalrts::alloc_open_bracket( context[172] ) )
    return refalrts::cNoMemory;
  if( ! refalrts::alloc_number( context[173], 35UL ) )
    return refalrts::cNoMemory;
  if( ! refalrts::alloc_ident( context[174], ident_Sysfun ) )
    return refalrts::cNoMemory;
  if( ! refalrts::alloc_ident( context[175], ident_regular ) )
    return refalrts::cNoMemory;
  if( ! refalrts::alloc_close_bracket( context[176] ) )
    return refalrts::cNoMemory;
  refalrts::reinit_open_bracket( context[0] );
  refalrts::reinit_number( context[4], 1UL );
  refalrts::reinit_ident( context[1], ident_Mu );
  refalrts::link_brackets( context[172], context[176] );
  refalrts::link_brackets( context[167], context[171] );
  refalrts::link_brackets( context[162], context[166] );
  refalrts::link_brackets( context[157], context[161] );
  refalrts::link_brackets( context[152], context[156] );
  refalrts::link_brackets( context[147], context[151] );
  refalrts::link_brackets( context[142], context[146] );
  refalrts::link_brackets( context[137], context[141] );
  refalrts::link_brackets( context[132], context[136] );
  refalrts::link_brackets( context[127], context[131] );
  refalrts::link_brackets( context[122], context[126] );
  refalrts::link_brackets( context[117], context[121] );
  refalrts::link_brackets( context[112], context[116] );
  refalrts::link_brackets( context[107], context[111] );
  refalrts::link_brackets( context[102], context[106] );
  refalrts::link_brackets( context[97], context[101] );
  refalrts::link_brackets( context[92], context[96] );
  refalrts::link_brackets( context[87], context[91] );
  refalrts::link_brackets( context[82], context[86] );
  refalrts::link_brackets( context[77], context[81] );
  refalrts::link_brackets( context[72], context[76] );
  refalrts::link_brackets( context[67], context[71] );
  refalrts::link_brackets( context[62], context[66] );
  refalrts::link_brackets( context[57], context[61] );
  refalrts::link_brackets( context[52], context[56] );
  refalrts::link_brackets( context[47], context[51] );
  refalrts::link_brackets( context[42], context[46] );
  refalrts::link_brackets( context[37], context[41] );
  refalrts::link_brackets( context[32], context[36] );
  refalrts::link_brackets( context[27], context[31] );
  refalrts::link_brackets( context[22], context[26] );
  refalrts::link_brackets( context[17], context[21] );
  refalrts::link_brackets( context[12], context[16] );
  refalrts::link_brackets( context[7], context[11] );
  refalrts::link_brackets( context[0], context[6] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = arg_end->next;
  res = refalrts::splice_evar( res, context[5], context[176] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_u_u_ListOfBuiltinu_1("__ListOfBuiltin_1", 786251477U, 1176157594U, func_u_u_ListOfBuiltinu_1);

static refalrts::FnResult func_u_u_ListOfBuiltinu_2(refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  refalrts::this_is_generated_function();
  // issue here memory for vars with 152 elems
  refalrts::Iter context[152];
  refalrts::zeros( context, 152 );
  // </0 & __ListOfBuiltin_2/4 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  if( ! refalrts::empty_seq( context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;

  refalrts::reset_allocator();
  //TRASH: {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ HalfReuse: (/0 HalfReuse: 42/4 HalfReuse: # Imp$$$$/1 } # regular/5 )/6 (/7 43/8 # Stop$$$$/9 # regular/10 )/11 (/12 44/13 # /14 # regular/15 )/16 (/17 45/18 # Freeze/19 # regular/20 )/21 (/22 46/23 # Freezer/24 # regular/25 )/26 (/27 47/28 # Dn/29 # regular/30 )/31 (/32 48/33 # Up/34 # special/35 )/36 (/37 49/38 # Ev-met/39 # special/40 )/41 (/42 50/43 # Residue/44 # special/45 )/46 (/47 51/48 # GetEnv/49 # regular/50 )/51 (/52 52/53 # System/54 # regular/55 )/56 (/57 53/58 # Exit/59 # regular/60 )/61 (/62 54/63 # Close/64 # regular/65 )/66 (/67 55/68 # ExistFile/69 # regular/70 )/71 (/72 56/73 # GetCurrentDirectory/74 # regular/75 )/76 (/77 57/78 # RemoveFile/79 # regular/80 )/81 (/82 58/83 # Implode_Ext/84 # regular/85 )/86 (/87 59/88 # Explode_Ext/89 # regular/90 )/91 (/92 60/93 # TimeElapsed/94 # regular/95 )/96 (/97 61/98 # Compare/99 # regular/100 )/101 (/102 62/103 # DeSysfun/104 # regular/105 )/106 (/107 63/108 # XMLParse/109 # regular/110 )/111 (/112 64/113 # Random/114 # regular/115 )/116 (/117 65/118 # RandomDigit/119 # regular/120 )/121 (/122 66/123 # Write/124 # regular/125 )/126 (/127 67/128 # ListOfBuiltin/129 # regular/130 )/131 (/132 68/133 # SizeOf/134 # regular/135 )/136 (/137 69/138 # GetPID/139 # regular/140 )/141 (/142 70/143 # int4fab_1/144 # regular/145 )/146 (/147 71/148 # GetPPID/149 # regular/150 )/151 Tile{ ]] }
  if( ! refalrts::alloc_ident( context[5], ident_regular ) )
    return refalrts::cNoMemory;
  if( ! refalrts::alloc_close_bracket( context[6] ) )
    return refalrts::cNoMemory;
  if( ! refalrts::alloc_open_bracket( context[7] ) )
    return refalrts::cNoMemory;
  if( ! refalrts::alloc_number( context[8], 43UL ) )
    return refalrts::cNoMemory;
  if( ! refalrts::alloc_ident( context[9], ident_Stopk36_k36_ ) )
    return refalrts::cNoMemory;
  if( ! refalrts::alloc_ident( context[10], ident_regular ) )
    return refalrts::cNoMemory;
  if( ! refalrts::alloc_close_bracket( context[11] ) )
    return refalrts::cNoMemory;
  if( ! refalrts::alloc_open_bracket( context[12] ) )
    return refalrts::cNoMemory;
  if( ! refalrts::alloc_number( context[13], 44UL ) )
    return refalrts::cNoMemory;
  if( ! refalrts::alloc_ident( context[14], ident_ ) )
    return refalrts::cNoMemory;
  if( ! refalrts::alloc_ident( context[15], ident_regular ) )
    return refalrts::cNoMemory;
  if( ! refalrts::alloc_close_bracket( context[16] ) )
    return refalrts::cNoMemory;
  if( ! refalrts::alloc_open_bracket( context[17] ) )
    return refalrts::cNoMemory;
  if( ! refalrts::alloc_number( context[18], 45UL ) )
    return refalrts::cNoMemory;
  if( ! refalrts::alloc_ident( context[19], ident_Freeze ) )
    return refalrts::cNoMemory;
  if( ! refalrts::alloc_ident( context[20], ident_regular ) )
    return refalrts::cNoMemory;
  if( ! refalrts::alloc_close_bracket( context[21] ) )
    return refalrts::cNoMemory;
  if( ! refalrts::alloc_open_bracket( context[22] ) )
    return refalrts::cNoMemory;
  if( ! refalrts::alloc_number( context[23], 46UL ) )
    return refalrts::cNoMemory;
  if( ! refalrts::alloc_ident( context[24], ident_Freezer ) )
    return refalrts::cNoMemory;
  if( ! refalrts::alloc_ident( context[25], ident_regular ) )
    return refalrts::cNoMemory;
  if( ! refalrts::alloc_close_bracket( context[26] ) )
    return refalrts::cNoMemory;
  if( ! refalrts::alloc_open_bracket( context[27] ) )
    return refalrts::cNoMemory;
  if( ! refalrts::alloc_number( context[28], 47UL ) )
    return refalrts::cNoMemory;
  if( ! refalrts::alloc_ident( context[29], ident_Dn ) )
    return refalrts::cNoMemory;
  if( ! refalrts::alloc_ident( context[30], ident_regular ) )
    return refalrts::cNoMemory;
  if( ! refalrts::alloc_close_bracket( context[31] ) )
    return refalrts::cNoMemory;
  if( ! refalrts::alloc_open_bracket( context[32] ) )
    return refalrts::cNoMemory;
  if( ! refalrts::alloc_number( context[33], 48UL ) )
    return refalrts::cNoMemory;
  if( ! refalrts::alloc_ident( context[34], ident_Up ) )
    return refalrts::cNoMemory;
  if( ! refalrts::alloc_ident( context[35], ident_special ) )
    return refalrts::cNoMemory;
  if( ! refalrts::alloc_close_bracket( context[36] ) )
    return refalrts::cNoMemory;
  if( ! refalrts::alloc_open_bracket( context[37] ) )
    return refalrts::cNoMemory;
  if( ! refalrts::alloc_number( context[38], 49UL ) )
    return refalrts::cNoMemory;
  if( ! refalrts::alloc_ident( context[39], ident_Evm_met ) )
    return refalrts::cNoMemory;
  if( ! refalrts::alloc_ident( context[40], ident_special ) )
    return refalrts::cNoMemory;
  if( ! refalrts::alloc_close_bracket( context[41] ) )
    return refalrts::cNoMemory;
  if( ! refalrts::alloc_open_bracket( context[42] ) )
    return refalrts::cNoMemory;
  if( ! refalrts::alloc_number( context[43], 50UL ) )
    return refalrts::cNoMemory;
  if( ! refalrts::alloc_ident( context[44], ident_Residue ) )
    return refalrts::cNoMemory;
  if( ! refalrts::alloc_ident( context[45], ident_special ) )
    return refalrts::cNoMemory;
  if( ! refalrts::alloc_close_bracket( context[46] ) )
    return refalrts::cNoMemory;
  if( ! refalrts::alloc_open_bracket( context[47] ) )
    return refalrts::cNoMemory;
  if( ! refalrts::alloc_number( context[48], 51UL ) )
    return refalrts::cNoMemory;
  if( ! refalrts::alloc_ident( context[49], ident_GetEnv ) )
    return refalrts::cNoMemory;
  if( ! refalrts::alloc_ident( context[50], ident_regular ) )
    return refalrts::cNoMemory;
  if( ! refalrts::alloc_close_bracket( context[51] ) )
    return refalrts::cNoMemory;
  if( ! refalrts::alloc_open_bracket( context[52] ) )
    return refalrts::cNoMemory;
  if( ! refalrts::alloc_number( context[53], 52UL ) )
    return refalrts::cNoMemory;
  if( ! refalrts::alloc_ident( context[54], ident_System ) )
    return refalrts::cNoMemory;
  if( ! refalrts::alloc_ident( context[55], ident_regular ) )
    return refalrts::cNoMemory;
  if( ! refalrts::alloc_close_bracket( context[56] ) )
    return refalrts::cNoMemory;
  if( ! refalrts::alloc_open_bracket( context[57] ) )
    return refalrts::cNoMemory;
  if( ! refalrts::alloc_number( context[58], 53UL ) )
    return refalrts::cNoMemory;
  if( ! refalrts::alloc_ident( context[59], ident_Exit ) )
    return refalrts::cNoMemory;
  if( ! refalrts::alloc_ident( context[60], ident_regular ) )
    return refalrts::cNoMemory;
  if( ! refalrts::alloc_close_bracket( context[61] ) )
    return refalrts::cNoMemory;
  if( ! refalrts::alloc_open_bracket( context[62] ) )
    return refalrts::cNoMemory;
  if( ! refalrts::alloc_number( context[63], 54UL ) )
    return refalrts::cNoMemory;
  if( ! refalrts::alloc_ident( context[64], ident_Close ) )
    return refalrts::cNoMemory;
  if( ! refalrts::alloc_ident( context[65], ident_regular ) )
    return refalrts::cNoMemory;
  if( ! refalrts::alloc_close_bracket( context[66] ) )
    return refalrts::cNoMemory;
  if( ! refalrts::alloc_open_bracket( context[67] ) )
    return refalrts::cNoMemory;
  if( ! refalrts::alloc_number( context[68], 55UL ) )
    return refalrts::cNoMemory;
  if( ! refalrts::alloc_ident( context[69], ident_ExistFile ) )
    return refalrts::cNoMemory;
  if( ! refalrts::alloc_ident( context[70], ident_regular ) )
    return refalrts::cNoMemory;
  if( ! refalrts::alloc_close_bracket( context[71] ) )
    return refalrts::cNoMemory;
  if( ! refalrts::alloc_open_bracket( context[72] ) )
    return refalrts::cNoMemory;
  if( ! refalrts::alloc_number( context[73], 56UL ) )
    return refalrts::cNoMemory;
  if( ! refalrts::alloc_ident( context[74], ident_GetCurrentDirectory ) )
    return refalrts::cNoMemory;
  if( ! refalrts::alloc_ident( context[75], ident_regular ) )
    return refalrts::cNoMemory;
  if( ! refalrts::alloc_close_bracket( context[76] ) )
    return refalrts::cNoMemory;
  if( ! refalrts::alloc_open_bracket( context[77] ) )
    return refalrts::cNoMemory;
  if( ! refalrts::alloc_number( context[78], 57UL ) )
    return refalrts::cNoMemory;
  if( ! refalrts::alloc_ident( context[79], ident_RemoveFile ) )
    return refalrts::cNoMemory;
  if( ! refalrts::alloc_ident( context[80], ident_regular ) )
    return refalrts::cNoMemory;
  if( ! refalrts::alloc_close_bracket( context[81] ) )
    return refalrts::cNoMemory;
  if( ! refalrts::alloc_open_bracket( context[82] ) )
    return refalrts::cNoMemory;
  if( ! refalrts::alloc_number( context[83], 58UL ) )
    return refalrts::cNoMemory;
  if( ! refalrts::alloc_ident( context[84], ident_Implodeu_Ext ) )
    return refalrts::cNoMemory;
  if( ! refalrts::alloc_ident( context[85], ident_regular ) )
    return refalrts::cNoMemory;
  if( ! refalrts::alloc_close_bracket( context[86] ) )
    return refalrts::cNoMemory;
  if( ! refalrts::alloc_open_bracket( context[87] ) )
    return refalrts::cNoMemory;
  if( ! refalrts::alloc_number( context[88], 59UL ) )
    return refalrts::cNoMemory;
  if( ! refalrts::alloc_ident( context[89], ident_Explodeu_Ext ) )
    return refalrts::cNoMemory;
  if( ! refalrts::alloc_ident( context[90], ident_regular ) )
    return refalrts::cNoMemory;
  if( ! refalrts::alloc_close_bracket( context[91] ) )
    return refalrts::cNoMemory;
  if( ! refalrts::alloc_open_bracket( context[92] ) )
    return refalrts::cNoMemory;
  if( ! refalrts::alloc_number( context[93], 60UL ) )
    return refalrts::cNoMemory;
  if( ! refalrts::alloc_ident( context[94], ident_TimeElapsed ) )
    return refalrts::cNoMemory;
  if( ! refalrts::alloc_ident( context[95], ident_regular ) )
    return refalrts::cNoMemory;
  if( ! refalrts::alloc_close_bracket( context[96] ) )
    return refalrts::cNoMemory;
  if( ! refalrts::alloc_open_bracket( context[97] ) )
    return refalrts::cNoMemory;
  if( ! refalrts::alloc_number( context[98], 61UL ) )
    return refalrts::cNoMemory;
  if( ! refalrts::alloc_ident( context[99], ident_Compare ) )
    return refalrts::cNoMemory;
  if( ! refalrts::alloc_ident( context[100], ident_regular ) )
    return refalrts::cNoMemory;
  if( ! refalrts::alloc_close_bracket( context[101] ) )
    return refalrts::cNoMemory;
  if( ! refalrts::alloc_open_bracket( context[102] ) )
    return refalrts::cNoMemory;
  if( ! refalrts::alloc_number( context[103], 62UL ) )
    return refalrts::cNoMemory;
  if( ! refalrts::alloc_ident( context[104], ident_DeSysfun ) )
    return refalrts::cNoMemory;
  if( ! refalrts::alloc_ident( context[105], ident_regular ) )
    return refalrts::cNoMemory;
  if( ! refalrts::alloc_close_bracket( context[106] ) )
    return refalrts::cNoMemory;
  if( ! refalrts::alloc_open_bracket( context[107] ) )
    return refalrts::cNoMemory;
  if( ! refalrts::alloc_number( context[108], 63UL ) )
    return refalrts::cNoMemory;
  if( ! refalrts::alloc_ident( context[109], ident_XMLParse ) )
    return refalrts::cNoMemory;
  if( ! refalrts::alloc_ident( context[110], ident_regular ) )
    return refalrts::cNoMemory;
  if( ! refalrts::alloc_close_bracket( context[111] ) )
    return refalrts::cNoMemory;
  if( ! refalrts::alloc_open_bracket( context[112] ) )
    return refalrts::cNoMemory;
  if( ! refalrts::alloc_number( context[113], 64UL ) )
    return refalrts::cNoMemory;
  if( ! refalrts::alloc_ident( context[114], ident_Random ) )
    return refalrts::cNoMemory;
  if( ! refalrts::alloc_ident( context[115], ident_regular ) )
    return refalrts::cNoMemory;
  if( ! refalrts::alloc_close_bracket( context[116] ) )
    return refalrts::cNoMemory;
  if( ! refalrts::alloc_open_bracket( context[117] ) )
    return refalrts::cNoMemory;
  if( ! refalrts::alloc_number( context[118], 65UL ) )
    return refalrts::cNoMemory;
  if( ! refalrts::alloc_ident( context[119], ident_RandomDigit ) )
    return refalrts::cNoMemory;
  if( ! refalrts::alloc_ident( context[120], ident_regular ) )
    return refalrts::cNoMemory;
  if( ! refalrts::alloc_close_bracket( context[121] ) )
    return refalrts::cNoMemory;
  if( ! refalrts::alloc_open_bracket( context[122] ) )
    return refalrts::cNoMemory;
  if( ! refalrts::alloc_number( context[123], 66UL ) )
    return refalrts::cNoMemory;
  if( ! refalrts::alloc_ident( context[124], ident_Write ) )
    return refalrts::cNoMemory;
  if( ! refalrts::alloc_ident( context[125], ident_regular ) )
    return refalrts::cNoMemory;
  if( ! refalrts::alloc_close_bracket( context[126] ) )
    return refalrts::cNoMemory;
  if( ! refalrts::alloc_open_bracket( context[127] ) )
    return refalrts::cNoMemory;
  if( ! refalrts::alloc_number( context[128], 67UL ) )
    return refalrts::cNoMemory;
  if( ! refalrts::alloc_ident( context[129], ident_ListOfBuiltin ) )
    return refalrts::cNoMemory;
  if( ! refalrts::alloc_ident( context[130], ident_regular ) )
    return refalrts::cNoMemory;
  if( ! refalrts::alloc_close_bracket( context[131] ) )
    return refalrts::cNoMemory;
  if( ! refalrts::alloc_open_bracket( context[132] ) )
    return refalrts::cNoMemory;
  if( ! refalrts::alloc_number( context[133], 68UL ) )
    return refalrts::cNoMemory;
  if( ! refalrts::alloc_ident( context[134], ident_SizeOf ) )
    return refalrts::cNoMemory;
  if( ! refalrts::alloc_ident( context[135], ident_regular ) )
    return refalrts::cNoMemory;
  if( ! refalrts::alloc_close_bracket( context[136] ) )
    return refalrts::cNoMemory;
  if( ! refalrts::alloc_open_bracket( context[137] ) )
    return refalrts::cNoMemory;
  if( ! refalrts::alloc_number( context[138], 69UL ) )
    return refalrts::cNoMemory;
  if( ! refalrts::alloc_ident( context[139], ident_GetPID ) )
    return refalrts::cNoMemory;
  if( ! refalrts::alloc_ident( context[140], ident_regular ) )
    return refalrts::cNoMemory;
  if( ! refalrts::alloc_close_bracket( context[141] ) )
    return refalrts::cNoMemory;
  if( ! refalrts::alloc_open_bracket( context[142] ) )
    return refalrts::cNoMemory;
  if( ! refalrts::alloc_number( context[143], 70UL ) )
    return refalrts::cNoMemory;
  if( ! refalrts::alloc_ident( context[144], ident_int4fabu_1 ) )
    return refalrts::cNoMemory;
  if( ! refalrts::alloc_ident( context[145], ident_regular ) )
    return refalrts::cNoMemory;
  if( ! refalrts::alloc_close_bracket( context[146] ) )
    return refalrts::cNoMemory;
  if( ! refalrts::alloc_open_bracket( context[147] ) )
    return refalrts::cNoMemory;
  if( ! refalrts::alloc_number( context[148], 71UL ) )
    return refalrts::cNoMemory;
  if( ! refalrts::alloc_ident( context[149], ident_GetPPID ) )
    return refalrts::cNoMemory;
  if( ! refalrts::alloc_ident( context[150], ident_regular ) )
    return refalrts::cNoMemory;
  if( ! refalrts::alloc_close_bracket( context[151] ) )
    return refalrts::cNoMemory;
  refalrts::reinit_open_bracket( context[0] );
  refalrts::reinit_number( context[4], 42UL );
  refalrts::reinit_ident( context[1], ident_Impk36_k36_ );
  refalrts::link_brackets( context[147], context[151] );
  refalrts::link_brackets( context[142], context[146] );
  refalrts::link_brackets( context[137], context[141] );
  refalrts::link_brackets( context[132], context[136] );
  refalrts::link_brackets( context[127], context[131] );
  refalrts::link_brackets( context[122], context[126] );
  refalrts::link_brackets( context[117], context[121] );
  refalrts::link_brackets( context[112], context[116] );
  refalrts::link_brackets( context[107], context[111] );
  refalrts::link_brackets( context[102], context[106] );
  refalrts::link_brackets( context[97], context[101] );
  refalrts::link_brackets( context[92], context[96] );
  refalrts::link_brackets( context[87], context[91] );
  refalrts::link_brackets( context[82], context[86] );
  refalrts::link_brackets( context[77], context[81] );
  refalrts::link_brackets( context[72], context[76] );
  refalrts::link_brackets( context[67], context[71] );
  refalrts::link_brackets( context[62], context[66] );
  refalrts::link_brackets( context[57], context[61] );
  refalrts::link_brackets( context[52], context[56] );
  refalrts::link_brackets( context[47], context[51] );
  refalrts::link_brackets( context[42], context[46] );
  refalrts::link_brackets( context[37], context[41] );
  refalrts::link_brackets( context[32], context[36] );
  refalrts::link_brackets( context[27], context[31] );
  refalrts::link_brackets( context[22], context[26] );
  refalrts::link_brackets( context[17], context[21] );
  refalrts::link_brackets( context[12], context[16] );
  refalrts::link_brackets( context[7], context[11] );
  refalrts::link_brackets( context[0], context[6] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = arg_end->next;
  res = refalrts::splice_evar( res, context[5], context[151] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_u_u_ListOfBuiltinu_2("__ListOfBuiltin_2", 786251477U, 1176157594U, func_u_u_ListOfBuiltinu_2);

static refalrts::FnResult func_Type(refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  refalrts::this_is_generated_function();
  // issue here memory for vars with 12 elems
  refalrts::Iter context[12];
  refalrts::zeros( context, 12 );
  //FAST GEN: e.$
  //GLOBAL GEN: e.$
  // </0 & Type/4 e.idx#0/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.idx#0 as range 2
  do {
    // s.idx e.idx
    // </0 & Type/4 s.Symbol#1/5 e.Tail#1/2 >/1
    context[10] = context[2];
    context[11] = context[3];
    if( ! refalrts::svar_left( context[5], context[10], context[11] ) )
      continue;
    // closed e.Tail#1 as range 10(2)
    //DEBUG: s.Symbol#1: 5
    //DEBUG: e.Tail#1: 2

    refalrts::reset_allocator();
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 Reuse: & __Type-SwSymbol/4 } </6 & SymbType/7 Tile{ AsIs: s.Symbol#1/5 } Tile{ AsIs: >/1 } s.Symbol#1/5/8 >/9 Tile{ AsIs: e.Tail#1/10(2) } Tile{ ]] }
    if( ! refalrts::alloc_open_call( context[6] ) )
      return refalrts::cNoMemory;
    if( ! refalrts::alloc_name( context[7], ref_SymbType.ref.function ) )
      return refalrts::cNoMemory;
    if (! refalrts::copy_stvar(context[8], context[5]))
      return refalrts::cNoMemory;
    if( ! refalrts::alloc_close_call( context[9] ) )
      return refalrts::cNoMemory;
    refalrts::update_name( context[4], ref_u_u_Typem_SwSymbol.ref.function );
    refalrts::push_stack( context[9] );
    refalrts::push_stack( context[0] );
    refalrts::push_stack( context[1] );
    refalrts::push_stack( context[6] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = arg_end->next;
    res = refalrts::splice_evar( res, context[10], context[11] );
    res = refalrts::splice_evar( res, context[8], context[9] );
    res = refalrts::splice_evar( res, context[1], context[1] );
    res = refalrts::splice_evar( res, context[5], context[5] );
    res = refalrts::splice_evar( res, context[6], context[7] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence();

  do {
    // ( e.idx ) e.idx
    // </0 & Type/4 (/7 e.Brackets#1/5 )/8 e.Tail#1/2 >/1
    context[10] = context[2];
    context[11] = context[3];
    context[5] = 0;
    context[6] = 0;
    context[7] = refalrts::brackets_left( context[5], context[6], context[10], context[11] );
    if( ! context[7] )
      continue;
    refalrts::bracket_pointers(context[7], context[8]);
    // closed e.Brackets#1 as range 5
    // closed e.Tail#1 as range 10(2)
    //DEBUG: e.Brackets#1: 5
    //DEBUG: e.Tail#1: 2

    refalrts::reset_allocator();
    //TRASH: {REMOVED TILE} {REMOVED TILE} >/1 {REMOVED TILE}
    //RESULT: Tile{ [[ HalfReuse: 'B'/0 HalfReuse: '0'/4 AsIs: (/7 AsIs: e.Brackets#1/5 AsIs: )/8 } Tile{ AsIs: e.Tail#1/10(2) } Tile{ ]] }
    refalrts::reinit_char( context[0], 'B' );
    refalrts::reinit_char( context[4], '0' );
    refalrts::link_brackets( context[7], context[8] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = arg_end->next;
    res = refalrts::splice_evar( res, context[10], context[11] );
    refalrts::splice_to_freelist_open( context[8], res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence();

  //
  // </0 & Type/4 >/1
  if( ! refalrts::empty_seq( context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;

  refalrts::reset_allocator();
  //TRASH: {REMOVED TILE} </0 {REMOVED TILE}
  //RESULT: Tile{ [[ } Tile{ HalfReuse: '*'/4 HalfReuse: '0'/1 ]] }
  refalrts::reinit_char( context[4], '*' );
  refalrts::reinit_char( context[1], '0' );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[4];
  refalrts::splice_to_freelist_open( trash_prev, res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_Type("Type", 786251477U, 1176157594U, func_Type);

static refalrts::FnResult func_u_u_Typem_SwSymbol(refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  refalrts::this_is_generated_function();
  // issue here memory for vars with 41 elems
  refalrts::Iter context[41];
  refalrts::zeros( context, 41 );
  //FAST GEN: s.$ s.$
  //GLOBAL GEN: s.$ s.$
  // </0 & __Type-SwSymbol/4 s.idx#0/5 s.idxV#0/6 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  if( ! refalrts::svar_left( context[5], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  if( ! refalrts::svar_left( context[6], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  if( ! refalrts::empty_seq( context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  do {
    // # TypeCharacter s.idx
    // </0 & __Type-SwSymbol/4 # TypeCharacter/5 s.Symbol#1/6 >/1
    if( ! refalrts::ident_term(  ident_TypeCharacter, context[5] ) )
      continue;
    //DEBUG: s.Symbol#1: 6

    refalrts::reset_allocator();
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ } </7 & __Type-SwCharacter/8 (/9 'L'/10 (/11"uABCDEFGHIJKLMNOPQRSTUVWXYZ"/12 )/14 (/15"labcdefghijklmnopqrstuvwxyz"/16 )/18 )/19 (/20 'D'/21 (/22"00123456789"/23 )/25 )/26 (/27 'P'/28 (/29"l "/30 )/32 )/33 s.Symbol#1/6/34 Tile{ AsIs: </0 Reuse: & SymbCompare/4 HalfReuse: ' '/5 AsIs: s.Symbol#1/6 AsIs: >/1 } </35 & SymbCompare/36 s.Symbol#1/6/37 '\200'/38 >/39 >/40 Tile{ ]] }
    if( ! refalrts::alloc_open_call( context[7] ) )
      return refalrts::cNoMemory;
    if( ! refalrts::alloc_name( context[8], ref_u_u_Typem_SwCharacter.ref.function ) )
      return refalrts::cNoMemory;
    if( ! refalrts::alloc_open_bracket( context[9] ) )
      return refalrts::cNoMemory;
    if( ! refalrts::alloc_char( context[10], 'L' ) )
      return refalrts::cNoMemory;
    if( ! refalrts::alloc_open_bracket( context[11] ) )
      return refalrts::cNoMemory;
    if( ! refalrts::alloc_chars( context[12], context[13], "uABCDEFGHIJKLMNOPQRSTUVWXYZ", 27 ) )
      return refalrts::cNoMemory;
    if( ! refalrts::alloc_close_bracket( context[14] ) )
      return refalrts::cNoMemory;
    if( ! refalrts::alloc_open_bracket( context[15] ) )
      return refalrts::cNoMemory;
    if( ! refalrts::alloc_chars( context[16], context[17], "labcdefghijklmnopqrstuvwxyz", 27 ) )
      return refalrts::cNoMemory;
    if( ! refalrts::alloc_close_bracket( context[18] ) )
      return refalrts::cNoMemory;
    if( ! refalrts::alloc_close_bracket( context[19] ) )
      return refalrts::cNoMemory;
    if( ! refalrts::alloc_open_bracket( context[20] ) )
      return refalrts::cNoMemory;
    if( ! refalrts::alloc_char( context[21], 'D' ) )
      return refalrts::cNoMemory;
    if( ! refalrts::alloc_open_bracket( context[22] ) )
      return refalrts::cNoMemory;
    if( ! refalrts::alloc_chars( context[23], context[24], "00123456789", 11 ) )
      return refalrts::cNoMemory;
    if( ! refalrts::alloc_close_bracket( context[25] ) )
      return refalrts::cNoMemory;
    if( ! refalrts::alloc_close_bracket( context[26] ) )
      return refalrts::cNoMemory;
    if( ! refalrts::alloc_open_bracket( context[27] ) )
      return refalrts::cNoMemory;
    if( ! refalrts::alloc_char( context[28], 'P' ) )
      return refalrts::cNoMemory;
    if( ! refalrts::alloc_open_bracket( context[29] ) )
      return refalrts::cNoMemory;
    if( ! refalrts::alloc_chars( context[30], context[31], "l ", 2 ) )
      return refalrts::cNoMemory;
    if( ! refalrts::alloc_close_bracket( context[32] ) )
      return refalrts::cNoMemory;
    if( ! refalrts::alloc_close_bracket( context[33] ) )
      return refalrts::cNoMemory;
    if (! refalrts::copy_stvar(context[34], context[6]))
      return refalrts::cNoMemory;
    if( ! refalrts::alloc_open_call( context[35] ) )
      return refalrts::cNoMemory;
    if( ! refalrts::alloc_name( context[36], ref_SymbCompare.ref.function ) )
      return refalrts::cNoMemory;
    if (! refalrts::copy_stvar(context[37], context[6]))
      return refalrts::cNoMemory;
    if( ! refalrts::alloc_char( context[38], '\200' ) )
      return refalrts::cNoMemory;
    if( ! refalrts::alloc_close_call( context[39] ) )
      return refalrts::cNoMemory;
    if( ! refalrts::alloc_close_call( context[40] ) )
      return refalrts::cNoMemory;
    refalrts::update_name( context[4], ref_SymbCompare.ref.function );
    refalrts::reinit_char( context[5], ' ' );
    refalrts::push_stack( context[40] );
    refalrts::push_stack( context[7] );
    refalrts::push_stack( context[39] );
    refalrts::push_stack( context[35] );
    refalrts::push_stack( context[1] );
    refalrts::push_stack( context[0] );
    refalrts::link_brackets( context[27], context[33] );
    refalrts::link_brackets( context[29], context[32] );
    refalrts::link_brackets( context[20], context[26] );
    refalrts::link_brackets( context[22], context[25] );
    refalrts::link_brackets( context[9], context[19] );
    refalrts::link_brackets( context[15], context[18] );
    refalrts::link_brackets( context[11], context[14] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = arg_end->next;
    res = refalrts::splice_evar( res, context[35], context[40] );
    res = refalrts::splice_evar( res, context[0], context[1] );
    res = refalrts::splice_evar( res, context[7], context[34] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence();

  do {
    // # TypeIdentifier s.idx
    // </0 & __Type-SwSymbol/4 # TypeIdentifier/5 s.Symbol#1/6 >/1
    if( ! refalrts::ident_term(  ident_TypeIdentifier, context[5] ) )
      continue;
    //DEBUG: s.Symbol#1: 6

    refalrts::reset_allocator();
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 Reuse: & __Type-SwIdentifier/4 HalfReuse: s.Symbol1 #6/5 } </7 & Explode/8 Tile{ AsIs: s.Symbol#1/6 AsIs: >/1 } >/9 Tile{ ]] }
    if( ! refalrts::alloc_open_call( context[7] ) )
      return refalrts::cNoMemory;
    if( ! refalrts::alloc_name( context[8], ref_Explode.ref.function ) )
      return refalrts::cNoMemory;
    if( ! refalrts::alloc_close_call( context[9] ) )
      return refalrts::cNoMemory;
    refalrts::update_name( context[4], ref_u_u_Typem_SwIdentifier.ref.function );
    refalrts::reinit_svar( context[5], context[6] );
    refalrts::push_stack( context[9] );
    refalrts::push_stack( context[0] );
    refalrts::push_stack( context[1] );
    refalrts::push_stack( context[7] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = arg_end->next;
    res = refalrts::splice_evar( res, context[9], context[9] );
    res = refalrts::splice_evar( res, context[6], context[1] );
    res = refalrts::splice_evar( res, context[7], context[8] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence();

  // # TypeNumber s.idx
  // </0 & __Type-SwSymbol/4 # TypeNumber/5 s.Symbol#1/6 >/1
  if( ! refalrts::ident_term(  ident_TypeNumber, context[5] ) )
    return refalrts::cRecognitionImpossible;
  //DEBUG: s.Symbol#1: 6

  refalrts::reset_allocator();
  //TRASH: {REMOVED TILE} s.Symbol#1/6 >/1 {REMOVED TILE}
  //RESULT: Tile{ [[ HalfReuse: 'N'/0 HalfReuse: '0'/4 HalfReuse: s.Symbol1 #6/5 } Tile{ ]] }
  refalrts::reinit_char( context[0], 'N' );
  refalrts::reinit_char( context[4], '0' );
  refalrts::reinit_svar( context[5], context[6] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = arg_end->next;
  refalrts::splice_to_freelist_open( context[5], res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_u_u_Typem_SwSymbol("__Type-SwSymbol", 786251477U, 1176157594U, func_u_u_Typem_SwSymbol);

static refalrts::FnResult func_u_u_Typem_SwCharacter(refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  refalrts::this_is_generated_function();
  // issue here memory for vars with 33 elems
  refalrts::Iter context[33];
  refalrts::zeros( context, 33 );
  //FAST GEN: e.$ s.$ s.$ s.$
  //GLOBAL GEN: e.$ s.$ s.$ s.$
  // </0 & __Type-SwCharacter/4 e.idx#0/2 s.idxV#0/7 s.idxVV#0/6 s.idxVVV#0/5 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  if( ! refalrts::svar_right( context[5], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  if( ! refalrts::svar_right( context[6], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  if( ! refalrts::svar_right( context[7], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  // closed e.idx#0 as range 2
  do {
    // e.idx s.idx s.idx s.idx
    // </0 & __Type-SwCharacter/4 e.Types-B#1/8 (/12 s.Type#1/14 e.SubTypes-B#1/15 (/19 s.SubType#1/21 e.Chars-B#1/22 s.Char#1/24 e.Chars-E#1/17 )/20 e.SubTypes-E#1/10 )/13 e.Types-E#1/2 s.Char#1/7 s.Cmp1#1/6 s.Cmp2#1/5 >/1
    context[25] = context[2];
    context[26] = context[3];
    context[8] = 0;
    context[9] = 0;
    refalrts::start_e_loop();
    do {
      context[27] = context[25];
      context[28] = context[26];
      context[10] = 0;
      context[11] = 0;
      context[12] = refalrts::brackets_left( context[10], context[11], context[27], context[28] );
      if( ! context[12] )
        continue;
      refalrts::bracket_pointers(context[12], context[13]);
      // closed e.Types-E#1 as range 27(2)
      if( ! refalrts::svar_left( context[14], context[10], context[11] ) )
        continue;
      context[15] = 0;
      context[16] = 0;
      refalrts::start_e_loop();
      do {
        context[29] = context[10];
        context[30] = context[11];
        context[17] = 0;
        context[18] = 0;
        context[19] = refalrts::brackets_left( context[17], context[18], context[29], context[30] );
        if( ! context[19] )
          continue;
        refalrts::bracket_pointers(context[19], context[20]);
        // closed e.SubTypes-E#1 as range 29(10)
        if( ! refalrts::svar_left( context[21], context[17], context[18] ) )
          continue;
        context[22] = 0;
        context[23] = 0;
        refalrts::start_e_loop();
        do {
          context[31] = context[17];
          context[32] = context[18];
          if( ! refalrts::repeated_stvar_left( context[24], context[7], context[31], context[32] ) )
            continue;
          // closed e.Chars-E#1 as range 31(17)
          //DEBUG: s.Char#1: 7
          //DEBUG: s.Cmp1#1: 6
          //DEBUG: s.Cmp2#1: 5
          //DEBUG: e.Types-B#1: 8
          //DEBUG: e.Types-E#1: 2
          //DEBUG: s.Type#1: 14
          //DEBUG: e.SubTypes-B#1: 15
          //DEBUG: e.SubTypes-E#1: 10
          //DEBUG: s.SubType#1: 21
          //DEBUG: e.Chars-B#1: 22
          //DEBUG: e.Chars-E#1: 17

          refalrts::reset_allocator();
          //TRASH: {REMOVED TILE} e.Types-B#1/8 (/12 s.Type#1/14 e.SubTypes-B#1/15 (/19 s.SubType#1/21 e.Chars-B#1/22 s.Char#1/24 e.Chars-E#1/31(17) )/20 e.SubTypes-E#1/29(10) )/13 e.Types-E#1/27(2) s.Char#1/7 s.Cmp1#1/6 s.Cmp2#1/5 {REMOVED TILE}
          //RESULT: Tile{ [[ HalfReuse: s.Type1 #14/0 HalfReuse: s.SubType1 #21/4 } Tile{ HalfReuse: s.Char1 #24/1 ]] }
          refalrts::reinit_svar( context[0], context[14] );
          refalrts::reinit_svar( context[4], context[21] );
          refalrts::reinit_svar( context[1], context[24] );
          refalrts::Iter trash_prev = arg_begin->prev;
          refalrts::use(trash_prev);
          refalrts::Iter res = context[1];
          refalrts::splice_to_freelist_open( context[4], res );
          return refalrts::cSuccess;
        } while ( refalrts::open_evar_advance( context[22], context[23], context[17], context[18] ) );
      } while ( refalrts::open_evar_advance( context[15], context[16], context[10], context[11] ) );
    } while ( refalrts::open_evar_advance( context[8], context[9], context[25], context[26] ) );
  } while ( 0 );
  refalrts::stop_sentence();

  do {
    // e.idx s.idx '<<'
    // </0 & __Type-SwCharacter/4 e.Types#1/2 s.Char#1/7 '<'/6 '<'/5 >/1
    if( ! refalrts::char_term( '<', context[6] ) )
      continue;
    if( ! refalrts::char_term( '<', context[5] ) )
      continue;
    // closed e.Types#1 as range 2
    //DEBUG: s.Char#1: 7
    //DEBUG: e.Types#1: 2

    refalrts::reset_allocator();
    //TRASH: {REMOVED TILE} </0 & __Type-SwCharacter/4 e.Types#1/2 s.Char#1/7 {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ Reuse: 'P'/6 Reuse: 'l'/5 HalfReuse: s.Char1 #7/1 ]] }
    refalrts::update_char( context[6], 'P' );
    refalrts::update_char( context[5], 'l' );
    refalrts::reinit_svar( context[1], context[7] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[6];
    refalrts::splice_to_freelist_open( trash_prev, res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence();

  // e.idx s.idx s.idx s.idx
  // </0 & __Type-SwCharacter/4 e.Types#1/2 s.Char#1/7 s.Cmp1#1/6 s.Cmp2#1/5 >/1
  // closed e.Types#1 as range 2
  //DEBUG: s.Char#1: 7
  //DEBUG: s.Cmp1#1: 6
  //DEBUG: s.Cmp2#1: 5
  //DEBUG: e.Types#1: 2

  refalrts::reset_allocator();
  //TRASH: {REMOVED TILE} e.Types#1/2 s.Char#1/7 s.Cmp1#1/6 s.Cmp2#1/5 {REMOVED TILE}
  //RESULT: Tile{ [[ HalfReuse: 'O'/0 HalfReuse: 'l'/4 } Tile{ HalfReuse: s.Char1 #7/1 ]] }
  refalrts::reinit_char( context[0], 'O' );
  refalrts::reinit_char( context[4], 'l' );
  refalrts::reinit_svar( context[1], context[7] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[1];
  refalrts::splice_to_freelist_open( context[4], res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_u_u_Typem_SwCharacter("__Type-SwCharacter", 786251477U, 1176157594U, func_u_u_Typem_SwCharacter);

static refalrts::FnResult func_u_u_fetch(refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  refalrts::this_is_generated_function();
  // issue here memory for vars with 6 elems
  refalrts::Iter context[6];
  refalrts::zeros( context, 6 );
  // </0 & __fetch/4 e.Arg#1/2 s.Func#1/5 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  if( ! refalrts::svar_right( context[5], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  // closed e.Arg#1 as range 2
  //DEBUG: s.Func#1: 5
  //DEBUG: e.Arg#1: 2

  refalrts::reset_allocator();
  //TRASH: {REMOVED TILE} {REMOVED TILE} s.Func#1/5 {REMOVED TILE}
  //RESULT: Tile{ [[ AsIs: </0 HalfReuse: s.Func1 #5/4 } Tile{ AsIs: e.Arg#1/2 } Tile{ AsIs: >/1 ]] }
  refalrts::reinit_svar( context[4], context[5] );
  refalrts::push_stack( context[1] );
  refalrts::push_stack( context[0] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[1];
  res = refalrts::splice_evar( res, context[2], context[3] );
  refalrts::splice_to_freelist_open( context[4], res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_u_u_fetch("__fetch", 786251477U, 1176157594U, func_u_u_fetch);

static refalrts::FnResult func_gen_u_u_Typem_SwIdentifier_L1(refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  refalrts::this_is_generated_function();
  // issue here memory for vars with 14 elems
  refalrts::Iter context[14];
  refalrts::zeros( context, 14 );
  //FAST GEN: s.$ s.$ ( e.$ ) s.$ s.$ s.$
  //GLOBAL GEN: s.$ s.$ ( e.$ ) s.$ s.$ s.$
  // </0 & __Type-SwIdentifier\1/4 s.idx#0/5 s.idxV#0/6 (/9 e.idxVVB#0/7 )/10 s.idxVVT#0/11 s.idxVVTV#0/12 s.idxVVTVV#0/13 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  if( ! refalrts::svar_left( context[5], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  if( ! refalrts::svar_left( context[6], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  context[7] = 0;
  context[8] = 0;
  context[9] = refalrts::brackets_left( context[7], context[8], context[2], context[3] );
  if( ! context[9] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[9], context[10]);
  // closed e.idxVVB#0 as range 7
  if( ! refalrts::svar_left( context[11], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  if( ! refalrts::svar_left( context[12], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  if( ! refalrts::svar_left( context[13], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  if( ! refalrts::empty_seq( context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  do {
    // s.idx s.idx ( e.idx ) 'L' s.idx s.idx
    // </0 & __Type-SwIdentifier\1/4 s.First#1/5 s.Symbol#1/6 (/9 e.Tail#1/7 )/10 'L'/11 s.SubType#2/12 s.First#1/13 >/1
    if( ! refalrts::char_term( 'L', context[11] ) )
      continue;
    if( ! refalrts::repeated_stvar_term( context[13], context[5] ) )
      continue;
    // closed e.Tail#1 as range 7
    //DEBUG: s.First#1: 5
    //DEBUG: s.Symbol#1: 6
    //DEBUG: s.SubType#2: 12
    //DEBUG: e.Tail#1: 7

    refalrts::reset_allocator();
    //TRASH: {REMOVED TILE} s.First#1/5 {REMOVED TILE} (/9 {REMOVED TILE} )/10 'L'/11 s.SubType#2/12 s.First#1/13 {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 Reuse: & __Type-DoSwIdentifier/4 } Tile{ AsIs: s.Symbol#1/6 } Tile{ AsIs: e.Tail#1/7 } Tile{ AsIs: >/1 ]] }
    refalrts::update_name( context[4], ref_u_u_Typem_DoSwIdentifier.ref.function );
    refalrts::push_stack( context[1] );
    refalrts::push_stack( context[0] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    res = refalrts::splice_evar( res, context[7], context[8] );
    res = refalrts::splice_evar( res, context[6], context[6] );
    refalrts::splice_to_freelist_open( context[4], res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence();

  // s.idx s.idx ( e.idx ) s.idx s.idx s.idx
  // </0 & __Type-SwIdentifier\1/4 s.First#1/5 s.Symbol#1/6 (/9 e.Tail#1/7 )/10 s.Type#2/11 s.SubType#2/12 s.First#1/13 >/1
  if( ! refalrts::repeated_stvar_term( context[13], context[5] ) )
    return refalrts::cRecognitionImpossible;
  // closed e.Tail#1 as range 7
  //DEBUG: s.First#1: 5
  //DEBUG: s.Symbol#1: 6
  //DEBUG: s.Type#2: 11
  //DEBUG: s.SubType#2: 12
  //DEBUG: e.Tail#1: 7

  refalrts::reset_allocator();
  //TRASH: {REMOVED TILE} s.First#1/5 s.Symbol#1/6 (/9 e.Tail#1/7 )/10 s.Type#2/11 s.SubType#2/12 s.First#1/13 {REMOVED TILE}
  //RESULT: Tile{ [[ HalfReuse: 'W'/0 HalfReuse: 'q'/4 } Tile{ HalfReuse: s.Symbol1 #6/1 ]] }
  refalrts::reinit_char( context[0], 'W' );
  refalrts::reinit_char( context[4], 'q' );
  refalrts::reinit_svar( context[1], context[6] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[1];
  refalrts::splice_to_freelist_open( context[4], res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_u_u_Typem_SwIdentifier_L1("__Type-SwIdentifier\\1", 786251477U, 1176157594U, func_gen_u_u_Typem_SwIdentifier_L1);

static refalrts::FnResult func_u_u_Typem_SwIdentifier(refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  refalrts::this_is_generated_function();
  // issue here memory for vars with 17 elems
  refalrts::Iter context[17];
  refalrts::zeros( context, 17 );
  // </0 & __Type-SwIdentifier/4 s.Symbol#1/5 s.First#1/6 e.Tail#1/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  if( ! refalrts::svar_left( context[5], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  if( ! refalrts::svar_left( context[6], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  // closed e.Tail#1 as range 2
  //DEBUG: s.Symbol#1: 5
  //DEBUG: s.First#1: 6
  //DEBUG: e.Tail#1: 2

  refalrts::reset_allocator();
  //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ AsIs: </0 Reuse: & __fetch/4 } </7 & Type/8 Tile{ AsIs: s.First#1/6 } >/9 </10 & @create_closure@/11 & __Type-SwIdentifier\1/12 s.First#1/6/13 Tile{ AsIs: s.Symbol#1/5 } (/14 Tile{ AsIs: e.Tail#1/2 } )/15 >/16 Tile{ AsIs: >/1 ]] }
  if( ! refalrts::alloc_open_call( context[7] ) )
    return refalrts::cNoMemory;
  if( ! refalrts::alloc_name( context[8], ref_Type.ref.function ) )
    return refalrts::cNoMemory;
  if( ! refalrts::alloc_close_call( context[9] ) )
    return refalrts::cNoMemory;
  if( ! refalrts::alloc_open_call( context[10] ) )
    return refalrts::cNoMemory;
  if( ! refalrts::alloc_name( context[11], refalrts::create_closure ) )
    return refalrts::cNoMemory;
  if( ! refalrts::alloc_name( context[12], ref_gen_u_u_Typem_SwIdentifier_L1.ref.function ) )
    return refalrts::cNoMemory;
  if (! refalrts::copy_stvar(context[13], context[6]))
    return refalrts::cNoMemory;
  if( ! refalrts::alloc_open_bracket( context[14] ) )
    return refalrts::cNoMemory;
  if( ! refalrts::alloc_close_bracket( context[15] ) )
    return refalrts::cNoMemory;
  if( ! refalrts::alloc_close_call( context[16] ) )
    return refalrts::cNoMemory;
  refalrts::update_name( context[4], ref_u_u_fetch.ref.function );
  refalrts::push_stack( context[1] );
  refalrts::push_stack( context[0] );
  refalrts::push_stack( context[16] );
  refalrts::push_stack( context[10] );
  refalrts::link_brackets( context[14], context[15] );
  refalrts::push_stack( context[9] );
  refalrts::push_stack( context[7] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[1];
  res = refalrts::splice_evar( res, context[15], context[16] );
  res = refalrts::splice_evar( res, context[2], context[3] );
  res = refalrts::splice_evar( res, context[14], context[14] );
  res = refalrts::splice_evar( res, context[5], context[5] );
  res = refalrts::splice_evar( res, context[9], context[13] );
  res = refalrts::splice_evar( res, context[6], context[6] );
  res = refalrts::splice_evar( res, context[7], context[8] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_u_u_Typem_SwIdentifier("__Type-SwIdentifier", 786251477U, 1176157594U, func_u_u_Typem_SwIdentifier);

static refalrts::FnResult func_gen_u_u_Typem_DoSwIdentifier_S1L1(refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  refalrts::this_is_generated_function();
  // issue here memory for vars with 11 elems
  refalrts::Iter context[11];
  refalrts::zeros( context, 11 );
  //FAST GEN: s.$ ( e.$ ) s.$
  //GLOBAL GEN: s.$ ( e.$ ) s.$
  // </0 & __Type-DoSwIdentifier$1\1/4 s.idx#0/5 (/8 e.idxVB#0/6 )/9 s.idxVT#0/10 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  if( ! refalrts::svar_left( context[5], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  context[6] = 0;
  context[7] = 0;
  context[8] = refalrts::brackets_left( context[6], context[7], context[2], context[3] );
  if( ! context[8] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[8], context[9]);
  // closed e.idxVB#0 as range 6
  if( ! refalrts::svar_left( context[10], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  if( ! refalrts::empty_seq( context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  do {
    // s.idx ( e.idx ) # True
    // </0 & __Type-DoSwIdentifier$1\1/4 s.Symbol#1/5 (/8 e.Tail#1/6 )/9 # True/10 >/1
    if( ! refalrts::ident_term(  ident_True, context[10] ) )
      continue;
    // closed e.Tail#1 as range 6
    //DEBUG: s.Symbol#1: 5
    //DEBUG: e.Tail#1: 6

    refalrts::reset_allocator();
    //TRASH: {REMOVED TILE} (/8 {REMOVED TILE} )/9 # True/10 {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 Reuse: & __Type-DoSwIdentifier/4 AsIs: s.Symbol#1/5 } Tile{ AsIs: e.Tail#1/6 } Tile{ AsIs: >/1 ]] }
    refalrts::update_name( context[4], ref_u_u_Typem_DoSwIdentifier.ref.function );
    refalrts::push_stack( context[1] );
    refalrts::push_stack( context[0] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    res = refalrts::splice_evar( res, context[6], context[7] );
    refalrts::splice_to_freelist_open( context[5], res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence();

  // s.idx ( e.idx ) # False
  // </0 & __Type-DoSwIdentifier$1\1/4 s.Symbol#1/5 (/8 e.Tail#1/6 )/9 # False/10 >/1
  if( ! refalrts::ident_term(  ident_False, context[10] ) )
    return refalrts::cRecognitionImpossible;
  // closed e.Tail#1 as range 6
  //DEBUG: s.Symbol#1: 5
  //DEBUG: e.Tail#1: 6

  refalrts::reset_allocator();
  //TRASH: {REMOVED TILE} (/8 e.Tail#1/6 )/9 # False/10 >/1 {REMOVED TILE}
  //RESULT: Tile{ [[ HalfReuse: 'W'/0 HalfReuse: 'q'/4 AsIs: s.Symbol#1/5 } Tile{ ]] }
  refalrts::reinit_char( context[0], 'W' );
  refalrts::reinit_char( context[4], 'q' );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = arg_end->next;
  refalrts::splice_to_freelist_open( context[5], res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_u_u_Typem_DoSwIdentifier_S1L1("__Type-DoSwIdentifier$1\\1", 786251477U, 1176157594U, func_gen_u_u_Typem_DoSwIdentifier_S1L1);

static refalrts::FnResult func_u_u_Typem_DoSwIdentifier(refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  refalrts::this_is_generated_function();
  // issue here memory for vars with 18 elems
  refalrts::Iter context[18];
  refalrts::zeros( context, 18 );
  //FAST GEN: e.$
  //GLOBAL GEN: s.$ e.$
  // </0 & __Type-DoSwIdentifier/4 s.idx#0/5 e.idxV#0/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  if( ! refalrts::svar_left( context[5], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  // closed e.idxV#0 as range 2
  do {
    // s.idx s.idx e.idx
    // </0 & __Type-DoSwIdentifier/4 s.Symbol#1/5 s.Next#1/6 e.Tail#1/2 >/1
    context[16] = context[2];
    context[17] = context[3];
    if( ! refalrts::svar_left( context[6], context[16], context[17] ) )
      continue;
    // closed e.Tail#1 as range 16(2)
    //DEBUG: s.Symbol#1: 5
    //DEBUG: s.Next#1: 6
    //DEBUG: e.Tail#1: 2

    refalrts::reset_allocator();
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 Reuse: & __fetch/4 } </7 & __IdentTail/8 Tile{ AsIs: s.Next#1/6 } >/9 </10 & @create_closure@/11 & __Type-DoSwIdentifier$1\1/12 Tile{ AsIs: s.Symbol#1/5 } (/13 Tile{ AsIs: e.Tail#1/16(2) } )/14 >/15 Tile{ AsIs: >/1 ]] }
    if( ! refalrts::alloc_open_call( context[7] ) )
      return refalrts::cNoMemory;
    if( ! refalrts::alloc_name( context[8], ref_u_u_IdentTail.ref.function ) )
      return refalrts::cNoMemory;
    if( ! refalrts::alloc_close_call( context[9] ) )
      return refalrts::cNoMemory;
    if( ! refalrts::alloc_open_call( context[10] ) )
      return refalrts::cNoMemory;
    if( ! refalrts::alloc_name( context[11], refalrts::create_closure ) )
      return refalrts::cNoMemory;
    if( ! refalrts::alloc_name( context[12], ref_gen_u_u_Typem_DoSwIdentifier_S1L1.ref.function ) )
      return refalrts::cNoMemory;
    if( ! refalrts::alloc_open_bracket( context[13] ) )
      return refalrts::cNoMemory;
    if( ! refalrts::alloc_close_bracket( context[14] ) )
      return refalrts::cNoMemory;
    if( ! refalrts::alloc_close_call( context[15] ) )
      return refalrts::cNoMemory;
    refalrts::update_name( context[4], ref_u_u_fetch.ref.function );
    refalrts::push_stack( context[1] );
    refalrts::push_stack( context[0] );
    refalrts::push_stack( context[15] );
    refalrts::push_stack( context[10] );
    refalrts::link_brackets( context[13], context[14] );
    refalrts::push_stack( context[9] );
    refalrts::push_stack( context[7] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    res = refalrts::splice_evar( res, context[14], context[15] );
    res = refalrts::splice_evar( res, context[16], context[17] );
    res = refalrts::splice_evar( res, context[13], context[13] );
    res = refalrts::splice_evar( res, context[5], context[5] );
    res = refalrts::splice_evar( res, context[9], context[12] );
    res = refalrts::splice_evar( res, context[6], context[6] );
    res = refalrts::splice_evar( res, context[7], context[8] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence();

  // s.idx
  // </0 & __Type-DoSwIdentifier/4 s.Symbol#1/5 >/1
  if( ! refalrts::empty_seq( context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  //DEBUG: s.Symbol#1: 5

  refalrts::reset_allocator();
  //TRASH: {REMOVED TILE} >/1 {REMOVED TILE}
  //RESULT: Tile{ [[ HalfReuse: 'W'/0 HalfReuse: 'i'/4 AsIs: s.Symbol#1/5 } Tile{ ]] }
  refalrts::reinit_char( context[0], 'W' );
  refalrts::reinit_char( context[4], 'i' );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = arg_end->next;
  refalrts::splice_to_freelist_open( context[5], res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_u_u_Typem_DoSwIdentifier("__Type-DoSwIdentifier", 786251477U, 1176157594U, func_u_u_Typem_DoSwIdentifier);

static refalrts::FnResult func_gen_u_u_IdentTail_L1(refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  refalrts::this_is_generated_function();
  // issue here memory for vars with 8 elems
  refalrts::Iter context[8];
  refalrts::zeros( context, 8 );
  //FAST GEN: s.$ s.$ s.$
  //GLOBAL GEN: s.$ s.$ s.$
  // </0 & __IdentTail\1/4 s.idx#0/5 s.idxV#0/6 s.idxVV#0/7 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  if( ! refalrts::svar_left( context[5], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  if( ! refalrts::svar_left( context[6], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  if( ! refalrts::svar_left( context[7], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  if( ! refalrts::empty_seq( context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  do {
    // 'W' s.idx s.idx
    // </0 & __IdentTail\1/4 'W'/5 s.SubType#2/6 s.Char#2/7 >/1
    if( ! refalrts::char_term( 'W', context[5] ) )
      continue;
    //DEBUG: s.SubType#2: 6
    //DEBUG: s.Char#2: 7

    refalrts::reset_allocator();
    //TRASH: {REMOVED TILE} </0 & __IdentTail\1/4 'W'/5 s.SubType#2/6 s.Char#2/7 {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ HalfReuse: # True/1 ]] }
    refalrts::reinit_ident( context[1], ident_True );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    refalrts::splice_to_freelist_open( trash_prev, res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence();

  do {
    // 'D0' s.idx
    // </0 & __IdentTail\1/4 'D'/5 '0'/6 s.Char#2/7 >/1
    if( ! refalrts::char_term( 'D', context[5] ) )
      continue;
    if( ! refalrts::char_term( '0', context[6] ) )
      continue;
    //DEBUG: s.Char#2: 7

    refalrts::reset_allocator();
    //TRASH: {REMOVED TILE} </0 & __IdentTail\1/4 'D'/5 '0'/6 s.Char#2/7 {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ HalfReuse: # True/1 ]] }
    refalrts::reinit_ident( context[1], ident_True );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    refalrts::splice_to_freelist_open( trash_prev, res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence();

  do {
    // s.idx s.idx '-'
    // </0 & __IdentTail\1/4 s.Type#2/5 s.SubType#2/6 '-'/7 >/1
    if( ! refalrts::char_term( '-', context[7] ) )
      continue;
    //DEBUG: s.Type#2: 5
    //DEBUG: s.SubType#2: 6

    refalrts::reset_allocator();
    //TRASH: {REMOVED TILE} </0 & __IdentTail\1/4 s.Type#2/5 s.SubType#2/6 '-'/7 {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ HalfReuse: # True/1 ]] }
    refalrts::reinit_ident( context[1], ident_True );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    refalrts::splice_to_freelist_open( trash_prev, res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence();

  do {
    // s.idx s.idx '_'
    // </0 & __IdentTail\1/4 s.Type#2/5 s.SubType#2/6 '_'/7 >/1
    if( ! refalrts::char_term( '_', context[7] ) )
      continue;
    //DEBUG: s.Type#2: 5
    //DEBUG: s.SubType#2: 6

    refalrts::reset_allocator();
    //TRASH: {REMOVED TILE} </0 & __IdentTail\1/4 s.Type#2/5 s.SubType#2/6 '_'/7 {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ HalfReuse: # True/1 ]] }
    refalrts::reinit_ident( context[1], ident_True );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    refalrts::splice_to_freelist_open( trash_prev, res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence();

  // s.idx s.idx s.idx
  // </0 & __IdentTail\1/4 s.Type#2/5 s.SubType#2/6 s.Char#2/7 >/1
  //DEBUG: s.Type#2: 5
  //DEBUG: s.SubType#2: 6
  //DEBUG: s.Char#2: 7

  refalrts::reset_allocator();
  //TRASH: {REMOVED TILE} </0 & __IdentTail\1/4 s.Type#2/5 s.SubType#2/6 s.Char#2/7 {REMOVED TILE}
  //RESULT: Tile{ [[ } Tile{ HalfReuse: # False/1 ]] }
  refalrts::reinit_ident( context[1], ident_False );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[1];
  refalrts::splice_to_freelist_open( trash_prev, res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_u_u_IdentTail_L1("__IdentTail\\1", 786251477U, 1176157594U, func_gen_u_u_IdentTail_L1);

static refalrts::FnResult func_u_u_IdentTail(refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  refalrts::this_is_generated_function();
  // issue here memory for vars with 10 elems
  refalrts::Iter context[10];
  refalrts::zeros( context, 10 );
  // </0 & __IdentTail/4 s.Char#1/5 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  if( ! refalrts::svar_left( context[5], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  if( ! refalrts::empty_seq( context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  //DEBUG: s.Char#1: 5

  refalrts::reset_allocator();
  //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ } </6 & __fetch/7 Tile{ AsIs: </0 Reuse: & Type/4 AsIs: s.Char#1/5 AsIs: >/1 } & __IdentTail\1/8 >/9 Tile{ ]] }
  if( ! refalrts::alloc_open_call( context[6] ) )
    return refalrts::cNoMemory;
  if( ! refalrts::alloc_name( context[7], ref_u_u_fetch.ref.function ) )
    return refalrts::cNoMemory;
  if( ! refalrts::alloc_name( context[8], ref_gen_u_u_IdentTail_L1.ref.function ) )
    return refalrts::cNoMemory;
  if( ! refalrts::alloc_close_call( context[9] ) )
    return refalrts::cNoMemory;
  refalrts::update_name( context[4], ref_Type.ref.function );
  refalrts::push_stack( context[9] );
  refalrts::push_stack( context[6] );
  refalrts::push_stack( context[1] );
  refalrts::push_stack( context[0] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = arg_end->next;
  res = refalrts::splice_evar( res, context[8], context[9] );
  res = refalrts::splice_evar( res, context[0], context[1] );
  res = refalrts::splice_evar( res, context[6], context[7] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_u_u_IdentTail("__IdentTail", 786251477U, 1176157594U, func_u_u_IdentTail);

static refalrts::FnResult func_gen_Compare_L1(refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  refalrts::this_is_generated_function();
  // issue here memory for vars with 6 elems
  refalrts::Iter context[6];
  refalrts::zeros( context, 6 );
  //FAST GEN: s.$
  //GLOBAL GEN: s.$
  // </0 & Compare\1/4 s.idx#0/5 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  if( ! refalrts::svar_left( context[5], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  if( ! refalrts::empty_seq( context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  do {
    // '<'
    // </0 & Compare\1/4 '<'/5 >/1
    if( ! refalrts::char_term( '<', context[5] ) )
      continue;

    refalrts::reset_allocator();
    //TRASH: {REMOVED TILE} </0 & Compare\1/4 '<'/5 {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ HalfReuse: '-'/1 ]] }
    refalrts::reinit_char( context[1], '-' );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    refalrts::splice_to_freelist_open( trash_prev, res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence();

  do {
    // '='
    // </0 & Compare\1/4 '='/5 >/1
    if( ! refalrts::char_term( '=', context[5] ) )
      continue;

    refalrts::reset_allocator();
    //TRASH: {REMOVED TILE} </0 & Compare\1/4 '='/5 {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ HalfReuse: '0'/1 ]] }
    refalrts::reinit_char( context[1], '0' );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    refalrts::splice_to_freelist_open( trash_prev, res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence();

  // '>'
  // </0 & Compare\1/4 '>'/5 >/1
  if( ! refalrts::char_term( '>', context[5] ) )
    return refalrts::cRecognitionImpossible;

  refalrts::reset_allocator();
  //TRASH: {REMOVED TILE} </0 & Compare\1/4 '>'/5 {REMOVED TILE}
  //RESULT: Tile{ [[ } Tile{ HalfReuse: '+'/1 ]] }
  refalrts::reinit_char( context[1], '+' );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[1];
  refalrts::splice_to_freelist_open( trash_prev, res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_Compare_L1("Compare\\1", 786251477U, 1176157594U, func_gen_Compare_L1);

static refalrts::FnResult func_Compare(refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  refalrts::this_is_generated_function();
  // issue here memory for vars with 10 elems
  refalrts::Iter context[10];
  refalrts::zeros( context, 10 );
  // </0 & Compare/4 s.Num1#1/5 s.Num2#1/6 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  if( ! refalrts::svar_left( context[5], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  if( ! refalrts::svar_left( context[6], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  if( ! refalrts::empty_seq( context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  //DEBUG: s.Num1#1: 5
  //DEBUG: s.Num2#1: 6

  refalrts::reset_allocator();
  //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ } </7 & Compare\1/8 Tile{ AsIs: </0 Reuse: & SymbCompare/4 AsIs: s.Num1#1/5 AsIs: s.Num2#1/6 AsIs: >/1 } >/9 Tile{ ]] }
  if( ! refalrts::alloc_open_call( context[7] ) )
    return refalrts::cNoMemory;
  if( ! refalrts::alloc_name( context[8], ref_gen_Compare_L1.ref.function ) )
    return refalrts::cNoMemory;
  if( ! refalrts::alloc_close_call( context[9] ) )
    return refalrts::cNoMemory;
  refalrts::update_name( context[4], ref_SymbCompare.ref.function );
  refalrts::push_stack( context[9] );
  refalrts::push_stack( context[7] );
  refalrts::push_stack( context[1] );
  refalrts::push_stack( context[0] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = arg_end->next;
  res = refalrts::splice_evar( res, context[9], context[9] );
  res = refalrts::splice_evar( res, context[0], context[1] );
  res = refalrts::splice_evar( res, context[7], context[8] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_Compare("Compare", 786251477U, 1176157594U, func_Compare);

static refalrts::FnResult func_Br(refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  refalrts::this_is_generated_function();
  // issue here memory for vars with 16 elems
  refalrts::Iter context[16];
  refalrts::zeros( context, 16 );
  // </0 & Br/4 e.Key#1/5 '='/7 e.Value#1/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  context[5] = 0;
  context[6] = 0;
  refalrts::start_e_loop();
  do {
    context[14] = context[2];
    context[15] = context[3];
    context[7] = refalrts::char_left( '=', context[14], context[15] );
    if( ! context[7] )
      continue;
    // closed e.Value#1 as range 14(2)
    //DEBUG: e.Key#1: 5
    //DEBUG: e.Value#1: 2

    refalrts::reset_allocator();
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ } </8 & __store/9 Tile{ HalfReuse: (/0 HalfReuse: (/4 AsIs: e.Key#1/5 HalfReuse: )/7 AsIs: e.Value#1/14(2) HalfReuse: )/1 } </10 & __store/11 >/12 >/13 Tile{ ]] }
    if( ! refalrts::alloc_open_call( context[8] ) )
      return refalrts::cNoMemory;
    if( ! refalrts::alloc_name( context[9], ref_u_u_store.ref.function ) )
      return refalrts::cNoMemory;
    if( ! refalrts::alloc_open_call( context[10] ) )
      return refalrts::cNoMemory;
    if( ! refalrts::alloc_name( context[11], ref_u_u_store.ref.function ) )
      return refalrts::cNoMemory;
    if( ! refalrts::alloc_close_call( context[12] ) )
      return refalrts::cNoMemory;
    if( ! refalrts::alloc_close_call( context[13] ) )
      return refalrts::cNoMemory;
    refalrts::reinit_open_bracket( context[0] );
    refalrts::reinit_open_bracket( context[4] );
    refalrts::reinit_close_bracket( context[7] );
    refalrts::reinit_close_bracket( context[1] );
    refalrts::push_stack( context[13] );
    refalrts::push_stack( context[8] );
    refalrts::push_stack( context[12] );
    refalrts::push_stack( context[10] );
    refalrts::link_brackets( context[0], context[1] );
    refalrts::link_brackets( context[4], context[7] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = arg_end->next;
    res = refalrts::splice_evar( res, context[10], context[13] );
    res = refalrts::splice_evar( res, context[0], context[1] );
    res = refalrts::splice_evar( res, context[8], context[9] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( refalrts::open_evar_advance( context[5], context[6], context[2], context[3] ) );
  return refalrts::cRecognitionImpossible;
}

static refalrts::NativeReference nat_ref_Br("Br", 786251477U, 1176157594U, func_Br);

static refalrts::FnResult func_Dg(refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  refalrts::this_is_generated_function();
  // issue here memory for vars with 10 elems
  refalrts::Iter context[10];
  refalrts::zeros( context, 10 );
  // </0 & Dg/4 e.Key#1/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.Key#1 as range 2
  //DEBUG: e.Key#1: 2

  refalrts::reset_allocator();
  //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ AsIs: </0 Reuse: & __Dg-SwExist/4 } (/5 Tile{ AsIs: e.Key#1/2 } )/6 </7 & __store/8 >/9 Tile{ AsIs: >/1 ]] }
  if( ! refalrts::alloc_open_bracket( context[5] ) )
    return refalrts::cNoMemory;
  if( ! refalrts::alloc_close_bracket( context[6] ) )
    return refalrts::cNoMemory;
  if( ! refalrts::alloc_open_call( context[7] ) )
    return refalrts::cNoMemory;
  if( ! refalrts::alloc_name( context[8], ref_u_u_store.ref.function ) )
    return refalrts::cNoMemory;
  if( ! refalrts::alloc_close_call( context[9] ) )
    return refalrts::cNoMemory;
  refalrts::update_name( context[4], ref_u_u_Dgm_SwExist.ref.function );
  refalrts::push_stack( context[1] );
  refalrts::push_stack( context[0] );
  refalrts::push_stack( context[9] );
  refalrts::push_stack( context[7] );
  refalrts::link_brackets( context[5], context[6] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[1];
  res = refalrts::splice_evar( res, context[6], context[9] );
  res = refalrts::splice_evar( res, context[2], context[3] );
  res = refalrts::splice_evar( res, context[5], context[5] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_Dg("Dg", 786251477U, 1176157594U, func_Dg);

static refalrts::FnResult func_u_u_Dgm_SwExist(refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  refalrts::this_is_generated_function();
  // issue here memory for vars with 25 elems
  refalrts::Iter context[25];
  refalrts::zeros( context, 25 );
  //FAST GEN: ( e.$ ) e.$
  //GLOBAL GEN: ( e.$ ) e.$
  // </0 & __Dg-SwExist/4 (/7 e.idxB#0/5 )/8 e.idxT#0/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  context[5] = 0;
  context[6] = 0;
  context[7] = refalrts::brackets_left( context[5], context[6], context[2], context[3] );
  if( ! context[7] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[7], context[8]);
  // closed e.idxB#0 as range 5
  // closed e.idxT#0 as range 2
  do {
    // ( e.idx ) e.idx
    // </0 & __Dg-SwExist/4 (/7 e.Key#1/5 )/8 e.Store-B#1/9 (/13 (/17 e.Key#1/19 )/18 e.Value#1/11 )/14 e.Store-E#1/2 >/1
    // closed e.Key#1 as range 5
    context[21] = context[2];
    context[22] = context[3];
    context[9] = 0;
    context[10] = 0;
    refalrts::start_e_loop();
    do {
      context[23] = context[21];
      context[24] = context[22];
      context[11] = 0;
      context[12] = 0;
      context[13] = refalrts::brackets_left( context[11], context[12], context[23], context[24] );
      if( ! context[13] )
        continue;
      refalrts::bracket_pointers(context[13], context[14]);
      context[15] = 0;
      context[16] = 0;
      context[17] = refalrts::brackets_left( context[15], context[16], context[11], context[12] );
      if( ! context[17] )
        continue;
      refalrts::bracket_pointers(context[17], context[18]);
      if( ! refalrts::repeated_evar_left( context[19], context[20], context[5], context[6], context[15], context[16] ) )
        continue;
      if( ! refalrts::empty_seq( context[15], context[16] ) )
        continue;
      // closed e.Value#1 as range 11
      // closed e.Store-E#1 as range 23(2)
      //DEBUG: e.Key#1: 5
      //DEBUG: e.Store-B#1: 9
      //DEBUG: e.Value#1: 11
      //DEBUG: e.Store-E#1: 2

      refalrts::reset_allocator();
      //TRASH: {REMOVED TILE} {REMOVED TILE} (/7 e.Key#1/5 )/8 {REMOVED TILE} (/13 (/17 e.Key#1/19 )/18 {REMOVED TILE} )/14 {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ } Tile{ AsIs: e.Value#1/11 } Tile{ AsIs: </0 Reuse: & __store/4 } Tile{ AsIs: e.Store-B#1/9 } Tile{ AsIs: e.Store-E#1/23(2) } Tile{ AsIs: >/1 ]] }
      refalrts::update_name( context[4], ref_u_u_store.ref.function );
      refalrts::push_stack( context[1] );
      refalrts::push_stack( context[0] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[1];
      res = refalrts::splice_evar( res, context[23], context[24] );
      res = refalrts::splice_evar( res, context[9], context[10] );
      res = refalrts::splice_evar( res, context[0], context[4] );
      res = refalrts::splice_evar( res, context[11], context[12] );
      refalrts::splice_to_freelist_open( trash_prev, res );
      return refalrts::cSuccess;
    } while ( refalrts::open_evar_advance( context[9], context[10], context[21], context[22] ) );
  } while ( 0 );
  refalrts::stop_sentence();

  // ( e.idx ) e.idx
  // </0 & __Dg-SwExist/4 (/7 e.Key#1/5 )/8 e.Store#1/2 >/1
  // closed e.Key#1 as range 5
  // closed e.Store#1 as range 2
  //DEBUG: e.Key#1: 5
  //DEBUG: e.Store#1: 2

  refalrts::reset_allocator();
  //TRASH: {REMOVED TILE} & __Dg-SwExist/4 (/7 e.Key#1/5 {REMOVED TILE}
  //RESULT: Tile{ [[ AsIs: </0 } Tile{ HalfReuse: & __store/8 AsIs: e.Store#1/2 AsIs: >/1 ]] }
  refalrts::reinit_name( context[8], ref_u_u_store.ref.function );
  refalrts::push_stack( context[1] );
  refalrts::push_stack( context[0] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[8];
  refalrts::splice_to_freelist_open( context[0], res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_u_u_Dgm_SwExist("__Dg-SwExist", 786251477U, 1176157594U, func_u_u_Dgm_SwExist);

static refalrts::FnResult func_Explodeu_Ext(refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  refalrts::this_is_generated_function();
  // issue here memory for vars with 6 elems
  refalrts::Iter context[6];
  refalrts::zeros( context, 6 );
  // </0 & Explode_Ext/4 s.Compound#1/5 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  if( ! refalrts::svar_left( context[5], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  if( ! refalrts::empty_seq( context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  //DEBUG: s.Compound#1: 5

  refalrts::reset_allocator();
  //TRASH: {REMOVED TILE}
  //RESULT: Tile{ [[ AsIs: </0 Reuse: & Explode/4 AsIs: s.Compound#1/5 AsIs: >/1 ]] }
  refalrts::update_name( context[4], ref_Explode.ref.function );
  refalrts::push_stack( context[1] );
  refalrts::push_stack( context[0] );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_Explodeu_Ext("Explode_Ext", 786251477U, 1176157594U, func_Explodeu_Ext);

static refalrts::FnResult func_Implodeu_Ext(refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  refalrts::this_is_generated_function();
  // issue here memory for vars with 5 elems
  refalrts::Iter context[5];
  refalrts::zeros( context, 5 );
  // </0 & Implode_Ext/4 e.String#1/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.String#1 as range 2
  //DEBUG: e.String#1: 2

  refalrts::reset_allocator();
  //TRASH: {REMOVED TILE}
  //RESULT: Tile{ [[ AsIs: </0 Reuse: & Implode/4 AsIs: e.String#1/2 AsIs: >/1 ]] }
  refalrts::update_name( context[4], ref_Implode.ref.function );
  refalrts::push_stack( context[1] );
  refalrts::push_stack( context[0] );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_Implodeu_Ext("Implode_Ext", 786251477U, 1176157594U, func_Implodeu_Ext);

static refalrts::FnResult func_Mu(refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  refalrts::this_is_generated_function();
  // issue here memory for vars with 40 elems
  refalrts::Iter context[40];
  refalrts::zeros( context, 40 );
  //FAST GEN: t.$ e.$
  //GLOBAL GEN: t.$ e.$
  // </0 & Mu/4 t.idx#0/5 e.idxV#0/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  context[6] = refalrts::tvar_left( context[5], context[2], context[3] );
  if( ! context[6] )
    return refalrts::cRecognitionImpossible;
  // closed e.idxV#0 as range 2
  do {
    // '+' e.idx
    // </0 & Mu/4 '+'/5 e.eX#1/2 >/1
    if( ! refalrts::char_term( '+', context[5] ) )
      continue;
    // closed e.eX#1 as range 2
    //DEBUG: e.eX#1: 2

    refalrts::reset_allocator();
    //TRASH: {REMOVED TILE} </0 {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ HalfReuse: </4 HalfReuse: & Add/5 AsIs: e.eX#1/2 AsIs: >/1 ]] }
    refalrts::reinit_open_call( context[4] );
    refalrts::reinit_name( context[5], ref_Add.ref.function );
    refalrts::push_stack( context[1] );
    refalrts::push_stack( context[4] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[4];
    refalrts::splice_to_freelist_open( trash_prev, res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence();

  do {
    // # + e.idx
    // </0 & Mu/4 # +/5 e.eX#1/2 >/1
    if( ! refalrts::ident_term(  ident_k43_, context[5] ) )
      continue;
    // closed e.eX#1 as range 2
    //DEBUG: e.eX#1: 2

    refalrts::reset_allocator();
    //TRASH: {REMOVED TILE} </0 {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ HalfReuse: </4 HalfReuse: & Add/5 AsIs: e.eX#1/2 AsIs: >/1 ]] }
    refalrts::reinit_open_call( context[4] );
    refalrts::reinit_name( context[5], ref_Add.ref.function );
    refalrts::push_stack( context[1] );
    refalrts::push_stack( context[4] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[4];
    refalrts::splice_to_freelist_open( trash_prev, res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence();

  do {
    // ( '+' ) e.idx
    // </0 & Mu/4 (/5 '+'/9 )/6 e.eX#1/2 >/1
    context[7] = 0;
    context[8] = 0;
    if( ! refalrts::brackets_term( context[7], context[8], context[5] ) )
      continue;
    context[9] = refalrts::char_left( '+', context[7], context[8] );
    if( ! context[9] )
      continue;
    if( ! refalrts::empty_seq( context[7], context[8] ) )
      continue;
    // closed e.eX#1 as range 2
    //DEBUG: e.eX#1: 2

    refalrts::reset_allocator();
    //TRASH: {REMOVED TILE} </0 & Mu/4 (/5 {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ HalfReuse: </9 HalfReuse: & Add/6 AsIs: e.eX#1/2 AsIs: >/1 ]] }
    refalrts::reinit_open_call( context[9] );
    refalrts::reinit_name( context[6], ref_Add.ref.function );
    refalrts::push_stack( context[1] );
    refalrts::push_stack( context[9] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[9];
    refalrts::splice_to_freelist_open( trash_prev, res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence();

  do {
    // '-' e.idx
    // </0 & Mu/4 '-'/5 e.eX#1/2 >/1
    if( ! refalrts::char_term( '-', context[5] ) )
      continue;
    // closed e.eX#1 as range 2
    //DEBUG: e.eX#1: 2

    refalrts::reset_allocator();
    //TRASH: {REMOVED TILE} </0 {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ HalfReuse: </4 HalfReuse: & Sub/5 AsIs: e.eX#1/2 AsIs: >/1 ]] }
    refalrts::reinit_open_call( context[4] );
    refalrts::reinit_name( context[5], ref_Sub.ref.function );
    refalrts::push_stack( context[1] );
    refalrts::push_stack( context[4] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[4];
    refalrts::splice_to_freelist_open( trash_prev, res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence();

  do {
    // # - e.idx
    // </0 & Mu/4 # -/5 e.eX#1/2 >/1
    if( ! refalrts::ident_term(  ident_m_, context[5] ) )
      continue;
    // closed e.eX#1 as range 2
    //DEBUG: e.eX#1: 2

    refalrts::reset_allocator();
    //TRASH: {REMOVED TILE} </0 {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ HalfReuse: </4 HalfReuse: & Sub/5 AsIs: e.eX#1/2 AsIs: >/1 ]] }
    refalrts::reinit_open_call( context[4] );
    refalrts::reinit_name( context[5], ref_Sub.ref.function );
    refalrts::push_stack( context[1] );
    refalrts::push_stack( context[4] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[4];
    refalrts::splice_to_freelist_open( trash_prev, res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence();

  do {
    // ( '-' ) e.idx
    // </0 & Mu/4 (/5 '-'/9 )/6 e.eX#1/2 >/1
    context[7] = 0;
    context[8] = 0;
    if( ! refalrts::brackets_term( context[7], context[8], context[5] ) )
      continue;
    context[9] = refalrts::char_left( '-', context[7], context[8] );
    if( ! context[9] )
      continue;
    if( ! refalrts::empty_seq( context[7], context[8] ) )
      continue;
    // closed e.eX#1 as range 2
    //DEBUG: e.eX#1: 2

    refalrts::reset_allocator();
    //TRASH: {REMOVED TILE} </0 & Mu/4 (/5 {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ HalfReuse: </9 HalfReuse: & Sub/6 AsIs: e.eX#1/2 AsIs: >/1 ]] }
    refalrts::reinit_open_call( context[9] );
    refalrts::reinit_name( context[6], ref_Sub.ref.function );
    refalrts::push_stack( context[1] );
    refalrts::push_stack( context[9] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[9];
    refalrts::splice_to_freelist_open( trash_prev, res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence();

  do {
    // '*' e.idx
    // </0 & Mu/4 '*'/5 e.eX#1/2 >/1
    if( ! refalrts::char_term( '*', context[5] ) )
      continue;
    // closed e.eX#1 as range 2
    //DEBUG: e.eX#1: 2

    refalrts::reset_allocator();
    //TRASH: {REMOVED TILE} </0 {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ HalfReuse: </4 HalfReuse: & Mul/5 AsIs: e.eX#1/2 AsIs: >/1 ]] }
    refalrts::reinit_open_call( context[4] );
    refalrts::reinit_name( context[5], ref_Mul.ref.function );
    refalrts::push_stack( context[1] );
    refalrts::push_stack( context[4] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[4];
    refalrts::splice_to_freelist_open( trash_prev, res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence();

  do {
    // # * e.idx
    // </0 & Mu/4 # */5 e.eX#1/2 >/1
    if( ! refalrts::ident_term(  ident_k42_, context[5] ) )
      continue;
    // closed e.eX#1 as range 2
    //DEBUG: e.eX#1: 2

    refalrts::reset_allocator();
    //TRASH: {REMOVED TILE} </0 {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ HalfReuse: </4 HalfReuse: & Mul/5 AsIs: e.eX#1/2 AsIs: >/1 ]] }
    refalrts::reinit_open_call( context[4] );
    refalrts::reinit_name( context[5], ref_Mul.ref.function );
    refalrts::push_stack( context[1] );
    refalrts::push_stack( context[4] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[4];
    refalrts::splice_to_freelist_open( trash_prev, res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence();

  do {
    // ( '*' ) e.idx
    // </0 & Mu/4 (/5 '*'/9 )/6 e.eX#1/2 >/1
    context[7] = 0;
    context[8] = 0;
    if( ! refalrts::brackets_term( context[7], context[8], context[5] ) )
      continue;
    context[9] = refalrts::char_left( '*', context[7], context[8] );
    if( ! context[9] )
      continue;
    if( ! refalrts::empty_seq( context[7], context[8] ) )
      continue;
    // closed e.eX#1 as range 2
    //DEBUG: e.eX#1: 2

    refalrts::reset_allocator();
    //TRASH: {REMOVED TILE} </0 & Mu/4 (/5 {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ HalfReuse: </9 HalfReuse: & Mul/6 AsIs: e.eX#1/2 AsIs: >/1 ]] }
    refalrts::reinit_open_call( context[9] );
    refalrts::reinit_name( context[6], ref_Mul.ref.function );
    refalrts::push_stack( context[1] );
    refalrts::push_stack( context[9] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[9];
    refalrts::splice_to_freelist_open( trash_prev, res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence();

  do {
    // '/' e.idx
    // </0 & Mu/4 '/'/5 e.eX#1/2 >/1
    if( ! refalrts::char_term( '/', context[5] ) )
      continue;
    // closed e.eX#1 as range 2
    //DEBUG: e.eX#1: 2

    refalrts::reset_allocator();
    //TRASH: {REMOVED TILE} </0 {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ HalfReuse: </4 HalfReuse: & Div/5 AsIs: e.eX#1/2 AsIs: >/1 ]] }
    refalrts::reinit_open_call( context[4] );
    refalrts::reinit_name( context[5], ref_Div.ref.function );
    refalrts::push_stack( context[1] );
    refalrts::push_stack( context[4] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[4];
    refalrts::splice_to_freelist_open( trash_prev, res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence();

  do {
    // # / e.idx
    // </0 & Mu/4 # //5 e.eX#1/2 >/1
    if( ! refalrts::ident_term(  ident_k47_, context[5] ) )
      continue;
    // closed e.eX#1 as range 2
    //DEBUG: e.eX#1: 2

    refalrts::reset_allocator();
    //TRASH: {REMOVED TILE} </0 {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ HalfReuse: </4 HalfReuse: & Div/5 AsIs: e.eX#1/2 AsIs: >/1 ]] }
    refalrts::reinit_open_call( context[4] );
    refalrts::reinit_name( context[5], ref_Div.ref.function );
    refalrts::push_stack( context[1] );
    refalrts::push_stack( context[4] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[4];
    refalrts::splice_to_freelist_open( trash_prev, res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence();

  do {
    // ( '/' ) e.idx
    // </0 & Mu/4 (/5 '/'/9 )/6 e.eX#1/2 >/1
    context[7] = 0;
    context[8] = 0;
    if( ! refalrts::brackets_term( context[7], context[8], context[5] ) )
      continue;
    context[9] = refalrts::char_left( '/', context[7], context[8] );
    if( ! context[9] )
      continue;
    if( ! refalrts::empty_seq( context[7], context[8] ) )
      continue;
    // closed e.eX#1 as range 2
    //DEBUG: e.eX#1: 2

    refalrts::reset_allocator();
    //TRASH: {REMOVED TILE} </0 & Mu/4 (/5 {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ HalfReuse: </9 HalfReuse: & Div/6 AsIs: e.eX#1/2 AsIs: >/1 ]] }
    refalrts::reinit_open_call( context[9] );
    refalrts::reinit_name( context[6], ref_Div.ref.function );
    refalrts::push_stack( context[1] );
    refalrts::push_stack( context[9] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[9];
    refalrts::splice_to_freelist_open( trash_prev, res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence();

  do {
    // '%' e.idx
    // </0 & Mu/4 '%'/5 e.eX#1/2 >/1
    if( ! refalrts::char_term( '%', context[5] ) )
      continue;
    // closed e.eX#1 as range 2
    //DEBUG: e.eX#1: 2

    refalrts::reset_allocator();
    //TRASH: {REMOVED TILE} </0 {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ HalfReuse: </4 HalfReuse: & Mod/5 AsIs: e.eX#1/2 AsIs: >/1 ]] }
    refalrts::reinit_open_call( context[4] );
    refalrts::reinit_name( context[5], ref_Mod.ref.function );
    refalrts::push_stack( context[1] );
    refalrts::push_stack( context[4] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[4];
    refalrts::splice_to_freelist_open( trash_prev, res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence();

  do {
    // # % e.idx
    // </0 & Mu/4 # %/5 e.eX#1/2 >/1
    if( ! refalrts::ident_term(  ident_k37_, context[5] ) )
      continue;
    // closed e.eX#1 as range 2
    //DEBUG: e.eX#1: 2

    refalrts::reset_allocator();
    //TRASH: {REMOVED TILE} </0 {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ HalfReuse: </4 HalfReuse: & Mod/5 AsIs: e.eX#1/2 AsIs: >/1 ]] }
    refalrts::reinit_open_call( context[4] );
    refalrts::reinit_name( context[5], ref_Mod.ref.function );
    refalrts::push_stack( context[1] );
    refalrts::push_stack( context[4] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[4];
    refalrts::splice_to_freelist_open( trash_prev, res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence();

  do {
    // ( '%' ) e.idx
    // </0 & Mu/4 (/5 '%'/9 )/6 e.eX#1/2 >/1
    context[7] = 0;
    context[8] = 0;
    if( ! refalrts::brackets_term( context[7], context[8], context[5] ) )
      continue;
    context[9] = refalrts::char_left( '%', context[7], context[8] );
    if( ! context[9] )
      continue;
    if( ! refalrts::empty_seq( context[7], context[8] ) )
      continue;
    // closed e.eX#1 as range 2
    //DEBUG: e.eX#1: 2

    refalrts::reset_allocator();
    //TRASH: {REMOVED TILE} </0 & Mu/4 (/5 {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ HalfReuse: </9 HalfReuse: & Mod/6 AsIs: e.eX#1/2 AsIs: >/1 ]] }
    refalrts::reinit_open_call( context[9] );
    refalrts::reinit_name( context[6], ref_Mod.ref.function );
    refalrts::push_stack( context[1] );
    refalrts::push_stack( context[9] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[9];
    refalrts::splice_to_freelist_open( trash_prev, res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence();

  do {
    // # Mu e.idx
    // </0 & Mu/4 # Mu/5 e.eX#1/2 >/1
    if( ! refalrts::ident_term(  ident_Mu, context[5] ) )
      continue;
    // closed e.eX#1 as range 2
    //DEBUG: e.eX#1: 2

    refalrts::reset_allocator();
    //TRASH: {REMOVED TILE} </0 {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ HalfReuse: </4 HalfReuse: & Mu/5 AsIs: e.eX#1/2 AsIs: >/1 ]] }
    refalrts::reinit_open_call( context[4] );
    refalrts::reinit_name( context[5], ref_Mu.ref.function );
    refalrts::push_stack( context[1] );
    refalrts::push_stack( context[4] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[4];
    refalrts::splice_to_freelist_open( trash_prev, res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence();

  do {
    // ( 'Mu' ) e.idx
    // </0 & Mu/4 (/5 'M'/9 'u'/10 )/6 e.eX#1/2 >/1
    context[7] = 0;
    context[8] = 0;
    if( ! refalrts::brackets_term( context[7], context[8], context[5] ) )
      continue;
    context[9] = refalrts::char_left( 'M', context[7], context[8] );
    if( ! context[9] )
      continue;
    context[10] = refalrts::char_left( 'u', context[7], context[8] );
    if( ! context[10] )
      continue;
    if( ! refalrts::empty_seq( context[7], context[8] ) )
      continue;
    // closed e.eX#1 as range 2
    //DEBUG: e.eX#1: 2

    refalrts::reset_allocator();
    //TRASH: {REMOVED TILE} </0 & Mu/4 (/5 'M'/9 {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ HalfReuse: </10 HalfReuse: & Mu/6 AsIs: e.eX#1/2 AsIs: >/1 ]] }
    refalrts::reinit_open_call( context[10] );
    refalrts::reinit_name( context[6], ref_Mu.ref.function );
    refalrts::push_stack( context[1] );
    refalrts::push_stack( context[10] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[10];
    refalrts::splice_to_freelist_open( trash_prev, res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence();

  do {
    // # Add e.idx
    // </0 & Mu/4 # Add/5 e.eX#1/2 >/1
    if( ! refalrts::ident_term(  ident_Add, context[5] ) )
      continue;
    // closed e.eX#1 as range 2
    //DEBUG: e.eX#1: 2

    refalrts::reset_allocator();
    //TRASH: {REMOVED TILE} </0 {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ HalfReuse: </4 HalfReuse: & Add/5 AsIs: e.eX#1/2 AsIs: >/1 ]] }
    refalrts::reinit_open_call( context[4] );
    refalrts::reinit_name( context[5], ref_Add.ref.function );
    refalrts::push_stack( context[1] );
    refalrts::push_stack( context[4] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[4];
    refalrts::splice_to_freelist_open( trash_prev, res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence();

  do {
    // ( 'Add' ) e.idx
    // </0 & Mu/4 (/5 'A'/9 'd'/10 'd'/11 )/6 e.eX#1/2 >/1
    context[7] = 0;
    context[8] = 0;
    if( ! refalrts::brackets_term( context[7], context[8], context[5] ) )
      continue;
    context[9] = refalrts::char_left( 'A', context[7], context[8] );
    if( ! context[9] )
      continue;
    context[10] = refalrts::char_left( 'd', context[7], context[8] );
    if( ! context[10] )
      continue;
    context[11] = refalrts::char_left( 'd', context[7], context[8] );
    if( ! context[11] )
      continue;
    if( ! refalrts::empty_seq( context[7], context[8] ) )
      continue;
    // closed e.eX#1 as range 2
    //DEBUG: e.eX#1: 2

    refalrts::reset_allocator();
    //TRASH: {REMOVED TILE} </0 & Mu/4 (/5 'A'/9 'd'/10 {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ HalfReuse: </11 HalfReuse: & Add/6 AsIs: e.eX#1/2 AsIs: >/1 ]] }
    refalrts::reinit_open_call( context[11] );
    refalrts::reinit_name( context[6], ref_Add.ref.function );
    refalrts::push_stack( context[1] );
    refalrts::push_stack( context[11] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[11];
    refalrts::splice_to_freelist_open( trash_prev, res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence();

  do {
    // # Arg e.idx
    // </0 & Mu/4 # Arg/5 e.eX#1/2 >/1
    if( ! refalrts::ident_term(  ident_Arg, context[5] ) )
      continue;
    // closed e.eX#1 as range 2
    //DEBUG: e.eX#1: 2

    refalrts::reset_allocator();
    //TRASH: {REMOVED TILE} </0 {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ HalfReuse: </4 HalfReuse: & Arg/5 AsIs: e.eX#1/2 AsIs: >/1 ]] }
    refalrts::reinit_open_call( context[4] );
    refalrts::reinit_name( context[5], ref_Arg.ref.function );
    refalrts::push_stack( context[1] );
    refalrts::push_stack( context[4] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[4];
    refalrts::splice_to_freelist_open( trash_prev, res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence();

  do {
    // ( 'Arg' ) e.idx
    // </0 & Mu/4 (/5 'A'/9 'r'/10 'g'/11 )/6 e.eX#1/2 >/1
    context[7] = 0;
    context[8] = 0;
    if( ! refalrts::brackets_term( context[7], context[8], context[5] ) )
      continue;
    context[9] = refalrts::char_left( 'A', context[7], context[8] );
    if( ! context[9] )
      continue;
    context[10] = refalrts::char_left( 'r', context[7], context[8] );
    if( ! context[10] )
      continue;
    context[11] = refalrts::char_left( 'g', context[7], context[8] );
    if( ! context[11] )
      continue;
    if( ! refalrts::empty_seq( context[7], context[8] ) )
      continue;
    // closed e.eX#1 as range 2
    //DEBUG: e.eX#1: 2

    refalrts::reset_allocator();
    //TRASH: {REMOVED TILE} </0 & Mu/4 (/5 'A'/9 'r'/10 {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ HalfReuse: </11 HalfReuse: & Arg/6 AsIs: e.eX#1/2 AsIs: >/1 ]] }
    refalrts::reinit_open_call( context[11] );
    refalrts::reinit_name( context[6], ref_Arg.ref.function );
    refalrts::push_stack( context[1] );
    refalrts::push_stack( context[11] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[11];
    refalrts::splice_to_freelist_open( trash_prev, res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence();

  do {
    // # Br e.idx
    // </0 & Mu/4 # Br/5 e.eX#1/2 >/1
    if( ! refalrts::ident_term(  ident_Br, context[5] ) )
      continue;
    // closed e.eX#1 as range 2
    //DEBUG: e.eX#1: 2

    refalrts::reset_allocator();
    //TRASH: {REMOVED TILE} </0 {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ HalfReuse: </4 HalfReuse: & Br/5 AsIs: e.eX#1/2 AsIs: >/1 ]] }
    refalrts::reinit_open_call( context[4] );
    refalrts::reinit_name( context[5], ref_Br.ref.function );
    refalrts::push_stack( context[1] );
    refalrts::push_stack( context[4] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[4];
    refalrts::splice_to_freelist_open( trash_prev, res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence();

  do {
    // ( 'Br' ) e.idx
    // </0 & Mu/4 (/5 'B'/9 'r'/10 )/6 e.eX#1/2 >/1
    context[7] = 0;
    context[8] = 0;
    if( ! refalrts::brackets_term( context[7], context[8], context[5] ) )
      continue;
    context[9] = refalrts::char_left( 'B', context[7], context[8] );
    if( ! context[9] )
      continue;
    context[10] = refalrts::char_left( 'r', context[7], context[8] );
    if( ! context[10] )
      continue;
    if( ! refalrts::empty_seq( context[7], context[8] ) )
      continue;
    // closed e.eX#1 as range 2
    //DEBUG: e.eX#1: 2

    refalrts::reset_allocator();
    //TRASH: {REMOVED TILE} </0 & Mu/4 (/5 'B'/9 {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ HalfReuse: </10 HalfReuse: & Br/6 AsIs: e.eX#1/2 AsIs: >/1 ]] }
    refalrts::reinit_open_call( context[10] );
    refalrts::reinit_name( context[6], ref_Br.ref.function );
    refalrts::push_stack( context[1] );
    refalrts::push_stack( context[10] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[10];
    refalrts::splice_to_freelist_open( trash_prev, res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence();

  do {
    // # Card e.idx
    // </0 & Mu/4 # Card/5 e.eX#1/2 >/1
    if( ! refalrts::ident_term(  ident_Card, context[5] ) )
      continue;
    // closed e.eX#1 as range 2
    //DEBUG: e.eX#1: 2

    refalrts::reset_allocator();
    //TRASH: {REMOVED TILE} </0 {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ HalfReuse: </4 HalfReuse: & Card/5 AsIs: e.eX#1/2 AsIs: >/1 ]] }
    refalrts::reinit_open_call( context[4] );
    refalrts::reinit_name( context[5], ref_Card.ref.function );
    refalrts::push_stack( context[1] );
    refalrts::push_stack( context[4] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[4];
    refalrts::splice_to_freelist_open( trash_prev, res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence();

  do {
    // ( 'Card' ) e.idx
    // </0 & Mu/4 (/5 'C'/9 'a'/10 'r'/11 'd'/12 )/6 e.eX#1/2 >/1
    context[7] = 0;
    context[8] = 0;
    if( ! refalrts::brackets_term( context[7], context[8], context[5] ) )
      continue;
    context[9] = refalrts::char_left( 'C', context[7], context[8] );
    if( ! context[9] )
      continue;
    context[10] = refalrts::char_left( 'a', context[7], context[8] );
    if( ! context[10] )
      continue;
    context[11] = refalrts::char_left( 'r', context[7], context[8] );
    if( ! context[11] )
      continue;
    context[12] = refalrts::char_left( 'd', context[7], context[8] );
    if( ! context[12] )
      continue;
    if( ! refalrts::empty_seq( context[7], context[8] ) )
      continue;
    // closed e.eX#1 as range 2
    //DEBUG: e.eX#1: 2

    refalrts::reset_allocator();
    //TRASH: {REMOVED TILE} </0 & Mu/4 (/5 'C'/9 'a'/10 'r'/11 {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ HalfReuse: </12 HalfReuse: & Card/6 AsIs: e.eX#1/2 AsIs: >/1 ]] }
    refalrts::reinit_open_call( context[12] );
    refalrts::reinit_name( context[6], ref_Card.ref.function );
    refalrts::push_stack( context[1] );
    refalrts::push_stack( context[12] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[12];
    refalrts::splice_to_freelist_open( trash_prev, res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence();

  do {
    // # Chr e.idx
    // </0 & Mu/4 # Chr/5 e.eX#1/2 >/1
    if( ! refalrts::ident_term(  ident_Chr, context[5] ) )
      continue;
    // closed e.eX#1 as range 2
    //DEBUG: e.eX#1: 2

    refalrts::reset_allocator();
    //TRASH: {REMOVED TILE} </0 {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ HalfReuse: </4 HalfReuse: & Chr/5 AsIs: e.eX#1/2 AsIs: >/1 ]] }
    refalrts::reinit_open_call( context[4] );
    refalrts::reinit_name( context[5], ref_Chr.ref.function );
    refalrts::push_stack( context[1] );
    refalrts::push_stack( context[4] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[4];
    refalrts::splice_to_freelist_open( trash_prev, res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence();

  do {
    // ( 'Chr' ) e.idx
    // </0 & Mu/4 (/5 'C'/9 'h'/10 'r'/11 )/6 e.eX#1/2 >/1
    context[7] = 0;
    context[8] = 0;
    if( ! refalrts::brackets_term( context[7], context[8], context[5] ) )
      continue;
    context[9] = refalrts::char_left( 'C', context[7], context[8] );
    if( ! context[9] )
      continue;
    context[10] = refalrts::char_left( 'h', context[7], context[8] );
    if( ! context[10] )
      continue;
    context[11] = refalrts::char_left( 'r', context[7], context[8] );
    if( ! context[11] )
      continue;
    if( ! refalrts::empty_seq( context[7], context[8] ) )
      continue;
    // closed e.eX#1 as range 2
    //DEBUG: e.eX#1: 2

    refalrts::reset_allocator();
    //TRASH: {REMOVED TILE} </0 & Mu/4 (/5 'C'/9 'h'/10 {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ HalfReuse: </11 HalfReuse: & Chr/6 AsIs: e.eX#1/2 AsIs: >/1 ]] }
    refalrts::reinit_open_call( context[11] );
    refalrts::reinit_name( context[6], ref_Chr.ref.function );
    refalrts::push_stack( context[1] );
    refalrts::push_stack( context[11] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[11];
    refalrts::splice_to_freelist_open( trash_prev, res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence();

  do {
    // # Cp e.idx
    // </0 & Mu/4 # Cp/5 e.eX#1/2 >/1
    if( ! refalrts::ident_term(  ident_Cp, context[5] ) )
      continue;
    // closed e.eX#1 as range 2
    //DEBUG: e.eX#1: 2

    refalrts::reset_allocator();
    //TRASH: {REMOVED TILE} </0 {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ HalfReuse: </4 HalfReuse: & Cp/5 AsIs: e.eX#1/2 AsIs: >/1 ]] }
    refalrts::reinit_open_call( context[4] );
    refalrts::reinit_name( context[5], ref_Cp.ref.function );
    refalrts::push_stack( context[1] );
    refalrts::push_stack( context[4] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[4];
    refalrts::splice_to_freelist_open( trash_prev, res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence();

  do {
    // ( 'Cp' ) e.idx
    // </0 & Mu/4 (/5 'C'/9 'p'/10 )/6 e.eX#1/2 >/1
    context[7] = 0;
    context[8] = 0;
    if( ! refalrts::brackets_term( context[7], context[8], context[5] ) )
      continue;
    context[9] = refalrts::char_left( 'C', context[7], context[8] );
    if( ! context[9] )
      continue;
    context[10] = refalrts::char_left( 'p', context[7], context[8] );
    if( ! context[10] )
      continue;
    if( ! refalrts::empty_seq( context[7], context[8] ) )
      continue;
    // closed e.eX#1 as range 2
    //DEBUG: e.eX#1: 2

    refalrts::reset_allocator();
    //TRASH: {REMOVED TILE} </0 & Mu/4 (/5 'C'/9 {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ HalfReuse: </10 HalfReuse: & Cp/6 AsIs: e.eX#1/2 AsIs: >/1 ]] }
    refalrts::reinit_open_call( context[10] );
    refalrts::reinit_name( context[6], ref_Cp.ref.function );
    refalrts::push_stack( context[1] );
    refalrts::push_stack( context[10] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[10];
    refalrts::splice_to_freelist_open( trash_prev, res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence();

  do {
    // # Dg e.idx
    // </0 & Mu/4 # Dg/5 e.eX#1/2 >/1
    if( ! refalrts::ident_term(  ident_Dg, context[5] ) )
      continue;
    // closed e.eX#1 as range 2
    //DEBUG: e.eX#1: 2

    refalrts::reset_allocator();
    //TRASH: {REMOVED TILE} </0 {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ HalfReuse: </4 HalfReuse: & Dg/5 AsIs: e.eX#1/2 AsIs: >/1 ]] }
    refalrts::reinit_open_call( context[4] );
    refalrts::reinit_name( context[5], ref_Dg.ref.function );
    refalrts::push_stack( context[1] );
    refalrts::push_stack( context[4] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[4];
    refalrts::splice_to_freelist_open( trash_prev, res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence();

  do {
    // ( 'Dg' ) e.idx
    // </0 & Mu/4 (/5 'D'/9 'g'/10 )/6 e.eX#1/2 >/1
    context[7] = 0;
    context[8] = 0;
    if( ! refalrts::brackets_term( context[7], context[8], context[5] ) )
      continue;
    context[9] = refalrts::char_left( 'D', context[7], context[8] );
    if( ! context[9] )
      continue;
    context[10] = refalrts::char_left( 'g', context[7], context[8] );
    if( ! context[10] )
      continue;
    if( ! refalrts::empty_seq( context[7], context[8] ) )
      continue;
    // closed e.eX#1 as range 2
    //DEBUG: e.eX#1: 2

    refalrts::reset_allocator();
    //TRASH: {REMOVED TILE} </0 & Mu/4 (/5 'D'/9 {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ HalfReuse: </10 HalfReuse: & Dg/6 AsIs: e.eX#1/2 AsIs: >/1 ]] }
    refalrts::reinit_open_call( context[10] );
    refalrts::reinit_name( context[6], ref_Dg.ref.function );
    refalrts::push_stack( context[1] );
    refalrts::push_stack( context[10] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[10];
    refalrts::splice_to_freelist_open( trash_prev, res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence();

  do {
    // # Dgall e.idx
    // </0 & Mu/4 # Dgall/5 e.eX#1/2 >/1
    if( ! refalrts::ident_term(  ident_Dgall, context[5] ) )
      continue;
    // closed e.eX#1 as range 2
    //DEBUG: e.eX#1: 2

    refalrts::reset_allocator();
    //TRASH: {REMOVED TILE} </0 {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ HalfReuse: </4 HalfReuse: & Dgall/5 AsIs: e.eX#1/2 AsIs: >/1 ]] }
    refalrts::reinit_open_call( context[4] );
    refalrts::reinit_name( context[5], ref_Dgall.ref.function );
    refalrts::push_stack( context[1] );
    refalrts::push_stack( context[4] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[4];
    refalrts::splice_to_freelist_open( trash_prev, res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence();

  do {
    // ( 'Dgall' ) e.idx
    // </0 & Mu/4 (/5 'D'/9 'g'/10 'a'/11 'l'/12 'l'/13 )/6 e.eX#1/2 >/1
    context[7] = 0;
    context[8] = 0;
    if( ! refalrts::brackets_term( context[7], context[8], context[5] ) )
      continue;
    context[9] = refalrts::char_left( 'D', context[7], context[8] );
    if( ! context[9] )
      continue;
    context[10] = refalrts::char_left( 'g', context[7], context[8] );
    if( ! context[10] )
      continue;
    context[11] = refalrts::char_left( 'a', context[7], context[8] );
    if( ! context[11] )
      continue;
    context[12] = refalrts::char_left( 'l', context[7], context[8] );
    if( ! context[12] )
      continue;
    context[13] = refalrts::char_left( 'l', context[7], context[8] );
    if( ! context[13] )
      continue;
    if( ! refalrts::empty_seq( context[7], context[8] ) )
      continue;
    // closed e.eX#1 as range 2
    //DEBUG: e.eX#1: 2

    refalrts::reset_allocator();
    //TRASH: {REMOVED TILE} </0 & Mu/4 (/5 'D'/9 'g'/10 'a'/11 'l'/12 {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ HalfReuse: </13 HalfReuse: & Dgall/6 AsIs: e.eX#1/2 AsIs: >/1 ]] }
    refalrts::reinit_open_call( context[13] );
    refalrts::reinit_name( context[6], ref_Dgall.ref.function );
    refalrts::push_stack( context[1] );
    refalrts::push_stack( context[13] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[13];
    refalrts::splice_to_freelist_open( trash_prev, res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence();

  do {
    // # Div e.idx
    // </0 & Mu/4 # Div/5 e.eX#1/2 >/1
    if( ! refalrts::ident_term(  ident_Div, context[5] ) )
      continue;
    // closed e.eX#1 as range 2
    //DEBUG: e.eX#1: 2

    refalrts::reset_allocator();
    //TRASH: {REMOVED TILE} </0 {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ HalfReuse: </4 HalfReuse: & Div/5 AsIs: e.eX#1/2 AsIs: >/1 ]] }
    refalrts::reinit_open_call( context[4] );
    refalrts::reinit_name( context[5], ref_Div.ref.function );
    refalrts::push_stack( context[1] );
    refalrts::push_stack( context[4] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[4];
    refalrts::splice_to_freelist_open( trash_prev, res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence();

  do {
    // ( 'Div' ) e.idx
    // </0 & Mu/4 (/5 'D'/9 'i'/10 'v'/11 )/6 e.eX#1/2 >/1
    context[7] = 0;
    context[8] = 0;
    if( ! refalrts::brackets_term( context[7], context[8], context[5] ) )
      continue;
    context[9] = refalrts::char_left( 'D', context[7], context[8] );
    if( ! context[9] )
      continue;
    context[10] = refalrts::char_left( 'i', context[7], context[8] );
    if( ! context[10] )
      continue;
    context[11] = refalrts::char_left( 'v', context[7], context[8] );
    if( ! context[11] )
      continue;
    if( ! refalrts::empty_seq( context[7], context[8] ) )
      continue;
    // closed e.eX#1 as range 2
    //DEBUG: e.eX#1: 2

    refalrts::reset_allocator();
    //TRASH: {REMOVED TILE} </0 & Mu/4 (/5 'D'/9 'i'/10 {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ HalfReuse: </11 HalfReuse: & Div/6 AsIs: e.eX#1/2 AsIs: >/1 ]] }
    refalrts::reinit_open_call( context[11] );
    refalrts::reinit_name( context[6], ref_Div.ref.function );
    refalrts::push_stack( context[1] );
    refalrts::push_stack( context[11] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[11];
    refalrts::splice_to_freelist_open( trash_prev, res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence();

  do {
    // # Divmod e.idx
    // </0 & Mu/4 # Divmod/5 e.eX#1/2 >/1
    if( ! refalrts::ident_term(  ident_Divmod, context[5] ) )
      continue;
    // closed e.eX#1 as range 2
    //DEBUG: e.eX#1: 2

    refalrts::reset_allocator();
    //TRASH: {REMOVED TILE} </0 {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ HalfReuse: </4 HalfReuse: & Divmod/5 AsIs: e.eX#1/2 AsIs: >/1 ]] }
    refalrts::reinit_open_call( context[4] );
    refalrts::reinit_name( context[5], ref_Divmod.ref.function );
    refalrts::push_stack( context[1] );
    refalrts::push_stack( context[4] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[4];
    refalrts::splice_to_freelist_open( trash_prev, res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence();

  do {
    // ( 'Divmod' ) e.idx
    // </0 & Mu/4 (/5 'D'/9 'i'/10 'v'/11 'm'/12 'o'/13 'd'/14 )/6 e.eX#1/2 >/1
    context[7] = 0;
    context[8] = 0;
    if( ! refalrts::brackets_term( context[7], context[8], context[5] ) )
      continue;
    context[9] = refalrts::char_left( 'D', context[7], context[8] );
    if( ! context[9] )
      continue;
    context[10] = refalrts::char_left( 'i', context[7], context[8] );
    if( ! context[10] )
      continue;
    context[11] = refalrts::char_left( 'v', context[7], context[8] );
    if( ! context[11] )
      continue;
    context[12] = refalrts::char_left( 'm', context[7], context[8] );
    if( ! context[12] )
      continue;
    context[13] = refalrts::char_left( 'o', context[7], context[8] );
    if( ! context[13] )
      continue;
    context[14] = refalrts::char_left( 'd', context[7], context[8] );
    if( ! context[14] )
      continue;
    if( ! refalrts::empty_seq( context[7], context[8] ) )
      continue;
    // closed e.eX#1 as range 2
    //DEBUG: e.eX#1: 2

    refalrts::reset_allocator();
    //TRASH: {REMOVED TILE} </0 & Mu/4 (/5 'D'/9 'i'/10 'v'/11 'm'/12 'o'/13 {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ HalfReuse: </14 HalfReuse: & Divmod/6 AsIs: e.eX#1/2 AsIs: >/1 ]] }
    refalrts::reinit_open_call( context[14] );
    refalrts::reinit_name( context[6], ref_Divmod.ref.function );
    refalrts::push_stack( context[1] );
    refalrts::push_stack( context[14] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[14];
    refalrts::splice_to_freelist_open( trash_prev, res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence();

  do {
    // # Explode e.idx
    // </0 & Mu/4 # Explode/5 e.eX#1/2 >/1
    if( ! refalrts::ident_term(  ident_Explode, context[5] ) )
      continue;
    // closed e.eX#1 as range 2
    //DEBUG: e.eX#1: 2

    refalrts::reset_allocator();
    //TRASH: {REMOVED TILE} </0 {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ HalfReuse: </4 HalfReuse: & Explode/5 AsIs: e.eX#1/2 AsIs: >/1 ]] }
    refalrts::reinit_open_call( context[4] );
    refalrts::reinit_name( context[5], ref_Explode.ref.function );
    refalrts::push_stack( context[1] );
    refalrts::push_stack( context[4] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[4];
    refalrts::splice_to_freelist_open( trash_prev, res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence();

  do {
    // ( 'Explode' ) e.idx
    // </0 & Mu/4 (/5 'E'/9 'x'/10 'p'/11 'l'/12 'o'/13 'd'/14 'e'/15 )/6 e.eX#1/2 >/1
    context[7] = 0;
    context[8] = 0;
    if( ! refalrts::brackets_term( context[7], context[8], context[5] ) )
      continue;
    context[9] = refalrts::char_left( 'E', context[7], context[8] );
    if( ! context[9] )
      continue;
    context[10] = refalrts::char_left( 'x', context[7], context[8] );
    if( ! context[10] )
      continue;
    context[11] = refalrts::char_left( 'p', context[7], context[8] );
    if( ! context[11] )
      continue;
    context[12] = refalrts::char_left( 'l', context[7], context[8] );
    if( ! context[12] )
      continue;
    context[13] = refalrts::char_left( 'o', context[7], context[8] );
    if( ! context[13] )
      continue;
    context[14] = refalrts::char_left( 'd', context[7], context[8] );
    if( ! context[14] )
      continue;
    context[15] = refalrts::char_left( 'e', context[7], context[8] );
    if( ! context[15] )
      continue;
    if( ! refalrts::empty_seq( context[7], context[8] ) )
      continue;
    // closed e.eX#1 as range 2
    //DEBUG: e.eX#1: 2

    refalrts::reset_allocator();
    //TRASH: {REMOVED TILE} </0 & Mu/4 (/5 'E'/9 'x'/10 'p'/11 'l'/12 'o'/13 'd'/14 {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ HalfReuse: </15 HalfReuse: & Explode/6 AsIs: e.eX#1/2 AsIs: >/1 ]] }
    refalrts::reinit_open_call( context[15] );
    refalrts::reinit_name( context[6], ref_Explode.ref.function );
    refalrts::push_stack( context[1] );
    refalrts::push_stack( context[15] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[15];
    refalrts::splice_to_freelist_open( trash_prev, res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence();

  do {
    // # First e.idx
    // </0 & Mu/4 # First/5 e.eX#1/2 >/1
    if( ! refalrts::ident_term(  ident_First, context[5] ) )
      continue;
    // closed e.eX#1 as range 2
    //DEBUG: e.eX#1: 2

    refalrts::reset_allocator();
    //TRASH: {REMOVED TILE} </0 {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ HalfReuse: </4 HalfReuse: & First/5 AsIs: e.eX#1/2 AsIs: >/1 ]] }
    refalrts::reinit_open_call( context[4] );
    refalrts::reinit_name( context[5], ref_First.ref.function );
    refalrts::push_stack( context[1] );
    refalrts::push_stack( context[4] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[4];
    refalrts::splice_to_freelist_open( trash_prev, res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence();

  do {
    // ( 'First' ) e.idx
    // </0 & Mu/4 (/5 'F'/9 'i'/10 'r'/11 's'/12 't'/13 )/6 e.eX#1/2 >/1
    context[7] = 0;
    context[8] = 0;
    if( ! refalrts::brackets_term( context[7], context[8], context[5] ) )
      continue;
    context[9] = refalrts::char_left( 'F', context[7], context[8] );
    if( ! context[9] )
      continue;
    context[10] = refalrts::char_left( 'i', context[7], context[8] );
    if( ! context[10] )
      continue;
    context[11] = refalrts::char_left( 'r', context[7], context[8] );
    if( ! context[11] )
      continue;
    context[12] = refalrts::char_left( 's', context[7], context[8] );
    if( ! context[12] )
      continue;
    context[13] = refalrts::char_left( 't', context[7], context[8] );
    if( ! context[13] )
      continue;
    if( ! refalrts::empty_seq( context[7], context[8] ) )
      continue;
    // closed e.eX#1 as range 2
    //DEBUG: e.eX#1: 2

    refalrts::reset_allocator();
    //TRASH: {REMOVED TILE} </0 & Mu/4 (/5 'F'/9 'i'/10 'r'/11 's'/12 {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ HalfReuse: </13 HalfReuse: & First/6 AsIs: e.eX#1/2 AsIs: >/1 ]] }
    refalrts::reinit_open_call( context[13] );
    refalrts::reinit_name( context[6], ref_First.ref.function );
    refalrts::push_stack( context[1] );
    refalrts::push_stack( context[13] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[13];
    refalrts::splice_to_freelist_open( trash_prev, res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence();

  do {
    // # Get e.idx
    // </0 & Mu/4 # Get/5 e.eX#1/2 >/1
    if( ! refalrts::ident_term(  ident_Get, context[5] ) )
      continue;
    // closed e.eX#1 as range 2
    //DEBUG: e.eX#1: 2

    refalrts::reset_allocator();
    //TRASH: {REMOVED TILE} </0 {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ HalfReuse: </4 HalfReuse: & Get/5 AsIs: e.eX#1/2 AsIs: >/1 ]] }
    refalrts::reinit_open_call( context[4] );
    refalrts::reinit_name( context[5], ref_Get.ref.function );
    refalrts::push_stack( context[1] );
    refalrts::push_stack( context[4] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[4];
    refalrts::splice_to_freelist_open( trash_prev, res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence();

  do {
    // ( 'Get' ) e.idx
    // </0 & Mu/4 (/5 'G'/9 'e'/10 't'/11 )/6 e.eX#1/2 >/1
    context[7] = 0;
    context[8] = 0;
    if( ! refalrts::brackets_term( context[7], context[8], context[5] ) )
      continue;
    context[9] = refalrts::char_left( 'G', context[7], context[8] );
    if( ! context[9] )
      continue;
    context[10] = refalrts::char_left( 'e', context[7], context[8] );
    if( ! context[10] )
      continue;
    context[11] = refalrts::char_left( 't', context[7], context[8] );
    if( ! context[11] )
      continue;
    if( ! refalrts::empty_seq( context[7], context[8] ) )
      continue;
    // closed e.eX#1 as range 2
    //DEBUG: e.eX#1: 2

    refalrts::reset_allocator();
    //TRASH: {REMOVED TILE} </0 & Mu/4 (/5 'G'/9 'e'/10 {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ HalfReuse: </11 HalfReuse: & Get/6 AsIs: e.eX#1/2 AsIs: >/1 ]] }
    refalrts::reinit_open_call( context[11] );
    refalrts::reinit_name( context[6], ref_Get.ref.function );
    refalrts::push_stack( context[1] );
    refalrts::push_stack( context[11] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[11];
    refalrts::splice_to_freelist_open( trash_prev, res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence();

  do {
    // # Implode e.idx
    // </0 & Mu/4 # Implode/5 e.eX#1/2 >/1
    if( ! refalrts::ident_term(  ident_Implode, context[5] ) )
      continue;
    // closed e.eX#1 as range 2
    //DEBUG: e.eX#1: 2

    refalrts::reset_allocator();
    //TRASH: {REMOVED TILE} </0 {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ HalfReuse: </4 HalfReuse: & Implode/5 AsIs: e.eX#1/2 AsIs: >/1 ]] }
    refalrts::reinit_open_call( context[4] );
    refalrts::reinit_name( context[5], ref_Implode.ref.function );
    refalrts::push_stack( context[1] );
    refalrts::push_stack( context[4] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[4];
    refalrts::splice_to_freelist_open( trash_prev, res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence();

  do {
    // ( 'Implode' ) e.idx
    // </0 & Mu/4 (/5 'I'/9 'm'/10 'p'/11 'l'/12 'o'/13 'd'/14 'e'/15 )/6 e.eX#1/2 >/1
    context[7] = 0;
    context[8] = 0;
    if( ! refalrts::brackets_term( context[7], context[8], context[5] ) )
      continue;
    context[9] = refalrts::char_left( 'I', context[7], context[8] );
    if( ! context[9] )
      continue;
    context[10] = refalrts::char_left( 'm', context[7], context[8] );
    if( ! context[10] )
      continue;
    context[11] = refalrts::char_left( 'p', context[7], context[8] );
    if( ! context[11] )
      continue;
    context[12] = refalrts::char_left( 'l', context[7], context[8] );
    if( ! context[12] )
      continue;
    context[13] = refalrts::char_left( 'o', context[7], context[8] );
    if( ! context[13] )
      continue;
    context[14] = refalrts::char_left( 'd', context[7], context[8] );
    if( ! context[14] )
      continue;
    context[15] = refalrts::char_left( 'e', context[7], context[8] );
    if( ! context[15] )
      continue;
    if( ! refalrts::empty_seq( context[7], context[8] ) )
      continue;
    // closed e.eX#1 as range 2
    //DEBUG: e.eX#1: 2

    refalrts::reset_allocator();
    //TRASH: {REMOVED TILE} </0 & Mu/4 (/5 'I'/9 'm'/10 'p'/11 'l'/12 'o'/13 'd'/14 {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ HalfReuse: </15 HalfReuse: & Implode/6 AsIs: e.eX#1/2 AsIs: >/1 ]] }
    refalrts::reinit_open_call( context[15] );
    refalrts::reinit_name( context[6], ref_Implode.ref.function );
    refalrts::push_stack( context[1] );
    refalrts::push_stack( context[15] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[15];
    refalrts::splice_to_freelist_open( trash_prev, res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence();

  do {
    // # Last e.idx
    // </0 & Mu/4 # Last/5 e.eX#1/2 >/1
    if( ! refalrts::ident_term(  ident_Last, context[5] ) )
      continue;
    // closed e.eX#1 as range 2
    //DEBUG: e.eX#1: 2

    refalrts::reset_allocator();
    //TRASH: {REMOVED TILE} </0 {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ HalfReuse: </4 HalfReuse: & Last/5 AsIs: e.eX#1/2 AsIs: >/1 ]] }
    refalrts::reinit_open_call( context[4] );
    refalrts::reinit_name( context[5], ref_Last.ref.function );
    refalrts::push_stack( context[1] );
    refalrts::push_stack( context[4] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[4];
    refalrts::splice_to_freelist_open( trash_prev, res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence();

  do {
    // ( 'Last' ) e.idx
    // </0 & Mu/4 (/5 'L'/9 'a'/10 's'/11 't'/12 )/6 e.eX#1/2 >/1
    context[7] = 0;
    context[8] = 0;
    if( ! refalrts::brackets_term( context[7], context[8], context[5] ) )
      continue;
    context[9] = refalrts::char_left( 'L', context[7], context[8] );
    if( ! context[9] )
      continue;
    context[10] = refalrts::char_left( 'a', context[7], context[8] );
    if( ! context[10] )
      continue;
    context[11] = refalrts::char_left( 's', context[7], context[8] );
    if( ! context[11] )
      continue;
    context[12] = refalrts::char_left( 't', context[7], context[8] );
    if( ! context[12] )
      continue;
    if( ! refalrts::empty_seq( context[7], context[8] ) )
      continue;
    // closed e.eX#1 as range 2
    //DEBUG: e.eX#1: 2

    refalrts::reset_allocator();
    //TRASH: {REMOVED TILE} </0 & Mu/4 (/5 'L'/9 'a'/10 's'/11 {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ HalfReuse: </12 HalfReuse: & Last/6 AsIs: e.eX#1/2 AsIs: >/1 ]] }
    refalrts::reinit_open_call( context[12] );
    refalrts::reinit_name( context[6], ref_Last.ref.function );
    refalrts::push_stack( context[1] );
    refalrts::push_stack( context[12] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[12];
    refalrts::splice_to_freelist_open( trash_prev, res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence();

  do {
    // # Lenw e.idx
    // </0 & Mu/4 # Lenw/5 e.eX#1/2 >/1
    if( ! refalrts::ident_term(  ident_Lenw, context[5] ) )
      continue;
    // closed e.eX#1 as range 2
    //DEBUG: e.eX#1: 2

    refalrts::reset_allocator();
    //TRASH: {REMOVED TILE} </0 {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ HalfReuse: </4 HalfReuse: & Lenw/5 AsIs: e.eX#1/2 AsIs: >/1 ]] }
    refalrts::reinit_open_call( context[4] );
    refalrts::reinit_name( context[5], ref_Lenw.ref.function );
    refalrts::push_stack( context[1] );
    refalrts::push_stack( context[4] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[4];
    refalrts::splice_to_freelist_open( trash_prev, res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence();

  do {
    // ( 'Lenw' ) e.idx
    // </0 & Mu/4 (/5 'L'/9 'e'/10 'n'/11 'w'/12 )/6 e.eX#1/2 >/1
    context[7] = 0;
    context[8] = 0;
    if( ! refalrts::brackets_term( context[7], context[8], context[5] ) )
      continue;
    context[9] = refalrts::char_left( 'L', context[7], context[8] );
    if( ! context[9] )
      continue;
    context[10] = refalrts::char_left( 'e', context[7], context[8] );
    if( ! context[10] )
      continue;
    context[11] = refalrts::char_left( 'n', context[7], context[8] );
    if( ! context[11] )
      continue;
    context[12] = refalrts::char_left( 'w', context[7], context[8] );
    if( ! context[12] )
      continue;
    if( ! refalrts::empty_seq( context[7], context[8] ) )
      continue;
    // closed e.eX#1 as range 2
    //DEBUG: e.eX#1: 2

    refalrts::reset_allocator();
    //TRASH: {REMOVED TILE} </0 & Mu/4 (/5 'L'/9 'e'/10 'n'/11 {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ HalfReuse: </12 HalfReuse: & Lenw/6 AsIs: e.eX#1/2 AsIs: >/1 ]] }
    refalrts::reinit_open_call( context[12] );
    refalrts::reinit_name( context[6], ref_Lenw.ref.function );
    refalrts::push_stack( context[1] );
    refalrts::push_stack( context[12] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[12];
    refalrts::splice_to_freelist_open( trash_prev, res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence();

  do {
    // # Lower e.idx
    // </0 & Mu/4 # Lower/5 e.eX#1/2 >/1
    if( ! refalrts::ident_term(  ident_Lower, context[5] ) )
      continue;
    // closed e.eX#1 as range 2
    //DEBUG: e.eX#1: 2

    refalrts::reset_allocator();
    //TRASH: {REMOVED TILE} </0 {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ HalfReuse: </4 HalfReuse: & Lower/5 AsIs: e.eX#1/2 AsIs: >/1 ]] }
    refalrts::reinit_open_call( context[4] );
    refalrts::reinit_name( context[5], ref_Lower.ref.function );
    refalrts::push_stack( context[1] );
    refalrts::push_stack( context[4] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[4];
    refalrts::splice_to_freelist_open( trash_prev, res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence();

  do {
    // ( 'Lower' ) e.idx
    // </0 & Mu/4 (/5 'L'/9 'o'/10 'w'/11 'e'/12 'r'/13 )/6 e.eX#1/2 >/1
    context[7] = 0;
    context[8] = 0;
    if( ! refalrts::brackets_term( context[7], context[8], context[5] ) )
      continue;
    context[9] = refalrts::char_left( 'L', context[7], context[8] );
    if( ! context[9] )
      continue;
    context[10] = refalrts::char_left( 'o', context[7], context[8] );
    if( ! context[10] )
      continue;
    context[11] = refalrts::char_left( 'w', context[7], context[8] );
    if( ! context[11] )
      continue;
    context[12] = refalrts::char_left( 'e', context[7], context[8] );
    if( ! context[12] )
      continue;
    context[13] = refalrts::char_left( 'r', context[7], context[8] );
    if( ! context[13] )
      continue;
    if( ! refalrts::empty_seq( context[7], context[8] ) )
      continue;
    // closed e.eX#1 as range 2
    //DEBUG: e.eX#1: 2

    refalrts::reset_allocator();
    //TRASH: {REMOVED TILE} </0 & Mu/4 (/5 'L'/9 'o'/10 'w'/11 'e'/12 {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ HalfReuse: </13 HalfReuse: & Lower/6 AsIs: e.eX#1/2 AsIs: >/1 ]] }
    refalrts::reinit_open_call( context[13] );
    refalrts::reinit_name( context[6], ref_Lower.ref.function );
    refalrts::push_stack( context[1] );
    refalrts::push_stack( context[13] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[13];
    refalrts::splice_to_freelist_open( trash_prev, res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence();

  do {
    // # Mod e.idx
    // </0 & Mu/4 # Mod/5 e.eX#1/2 >/1
    if( ! refalrts::ident_term(  ident_Mod, context[5] ) )
      continue;
    // closed e.eX#1 as range 2
    //DEBUG: e.eX#1: 2

    refalrts::reset_allocator();
    //TRASH: {REMOVED TILE} </0 {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ HalfReuse: </4 HalfReuse: & Mod/5 AsIs: e.eX#1/2 AsIs: >/1 ]] }
    refalrts::reinit_open_call( context[4] );
    refalrts::reinit_name( context[5], ref_Mod.ref.function );
    refalrts::push_stack( context[1] );
    refalrts::push_stack( context[4] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[4];
    refalrts::splice_to_freelist_open( trash_prev, res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence();

  do {
    // ( 'Mod' ) e.idx
    // </0 & Mu/4 (/5 'M'/9 'o'/10 'd'/11 )/6 e.eX#1/2 >/1
    context[7] = 0;
    context[8] = 0;
    if( ! refalrts::brackets_term( context[7], context[8], context[5] ) )
      continue;
    context[9] = refalrts::char_left( 'M', context[7], context[8] );
    if( ! context[9] )
      continue;
    context[10] = refalrts::char_left( 'o', context[7], context[8] );
    if( ! context[10] )
      continue;
    context[11] = refalrts::char_left( 'd', context[7], context[8] );
    if( ! context[11] )
      continue;
    if( ! refalrts::empty_seq( context[7], context[8] ) )
      continue;
    // closed e.eX#1 as range 2
    //DEBUG: e.eX#1: 2

    refalrts::reset_allocator();
    //TRASH: {REMOVED TILE} </0 & Mu/4 (/5 'M'/9 'o'/10 {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ HalfReuse: </11 HalfReuse: & Mod/6 AsIs: e.eX#1/2 AsIs: >/1 ]] }
    refalrts::reinit_open_call( context[11] );
    refalrts::reinit_name( context[6], ref_Mod.ref.function );
    refalrts::push_stack( context[1] );
    refalrts::push_stack( context[11] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[11];
    refalrts::splice_to_freelist_open( trash_prev, res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence();

  do {
    // # Mul e.idx
    // </0 & Mu/4 # Mul/5 e.eX#1/2 >/1
    if( ! refalrts::ident_term(  ident_Mul, context[5] ) )
      continue;
    // closed e.eX#1 as range 2
    //DEBUG: e.eX#1: 2

    refalrts::reset_allocator();
    //TRASH: {REMOVED TILE} </0 {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ HalfReuse: </4 HalfReuse: & Mul/5 AsIs: e.eX#1/2 AsIs: >/1 ]] }
    refalrts::reinit_open_call( context[4] );
    refalrts::reinit_name( context[5], ref_Mul.ref.function );
    refalrts::push_stack( context[1] );
    refalrts::push_stack( context[4] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[4];
    refalrts::splice_to_freelist_open( trash_prev, res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence();

  do {
    // ( 'Mul' ) e.idx
    // </0 & Mu/4 (/5 'M'/9 'u'/10 'l'/11 )/6 e.eX#1/2 >/1
    context[7] = 0;
    context[8] = 0;
    if( ! refalrts::brackets_term( context[7], context[8], context[5] ) )
      continue;
    context[9] = refalrts::char_left( 'M', context[7], context[8] );
    if( ! context[9] )
      continue;
    context[10] = refalrts::char_left( 'u', context[7], context[8] );
    if( ! context[10] )
      continue;
    context[11] = refalrts::char_left( 'l', context[7], context[8] );
    if( ! context[11] )
      continue;
    if( ! refalrts::empty_seq( context[7], context[8] ) )
      continue;
    // closed e.eX#1 as range 2
    //DEBUG: e.eX#1: 2

    refalrts::reset_allocator();
    //TRASH: {REMOVED TILE} </0 & Mu/4 (/5 'M'/9 'u'/10 {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ HalfReuse: </11 HalfReuse: & Mul/6 AsIs: e.eX#1/2 AsIs: >/1 ]] }
    refalrts::reinit_open_call( context[11] );
    refalrts::reinit_name( context[6], ref_Mul.ref.function );
    refalrts::push_stack( context[1] );
    refalrts::push_stack( context[11] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[11];
    refalrts::splice_to_freelist_open( trash_prev, res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence();

  do {
    // # Numb e.idx
    // </0 & Mu/4 # Numb/5 e.eX#1/2 >/1
    if( ! refalrts::ident_term(  ident_Numb, context[5] ) )
      continue;
    // closed e.eX#1 as range 2
    //DEBUG: e.eX#1: 2

    refalrts::reset_allocator();
    //TRASH: {REMOVED TILE} </0 {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ HalfReuse: </4 HalfReuse: & Numb/5 AsIs: e.eX#1/2 AsIs: >/1 ]] }
    refalrts::reinit_open_call( context[4] );
    refalrts::reinit_name( context[5], ref_Numb.ref.function );
    refalrts::push_stack( context[1] );
    refalrts::push_stack( context[4] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[4];
    refalrts::splice_to_freelist_open( trash_prev, res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence();

  do {
    // ( 'Numb' ) e.idx
    // </0 & Mu/4 (/5 'N'/9 'u'/10 'm'/11 'b'/12 )/6 e.eX#1/2 >/1
    context[7] = 0;
    context[8] = 0;
    if( ! refalrts::brackets_term( context[7], context[8], context[5] ) )
      continue;
    context[9] = refalrts::char_left( 'N', context[7], context[8] );
    if( ! context[9] )
      continue;
    context[10] = refalrts::char_left( 'u', context[7], context[8] );
    if( ! context[10] )
      continue;
    context[11] = refalrts::char_left( 'm', context[7], context[8] );
    if( ! context[11] )
      continue;
    context[12] = refalrts::char_left( 'b', context[7], context[8] );
    if( ! context[12] )
      continue;
    if( ! refalrts::empty_seq( context[7], context[8] ) )
      continue;
    // closed e.eX#1 as range 2
    //DEBUG: e.eX#1: 2

    refalrts::reset_allocator();
    //TRASH: {REMOVED TILE} </0 & Mu/4 (/5 'N'/9 'u'/10 'm'/11 {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ HalfReuse: </12 HalfReuse: & Numb/6 AsIs: e.eX#1/2 AsIs: >/1 ]] }
    refalrts::reinit_open_call( context[12] );
    refalrts::reinit_name( context[6], ref_Numb.ref.function );
    refalrts::push_stack( context[1] );
    refalrts::push_stack( context[12] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[12];
    refalrts::splice_to_freelist_open( trash_prev, res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence();

  do {
    // # Open e.idx
    // </0 & Mu/4 # Open/5 e.eX#1/2 >/1
    if( ! refalrts::ident_term(  ident_Open, context[5] ) )
      continue;
    // closed e.eX#1 as range 2
    //DEBUG: e.eX#1: 2

    refalrts::reset_allocator();
    //TRASH: {REMOVED TILE} </0 {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ HalfReuse: </4 HalfReuse: & Open/5 AsIs: e.eX#1/2 AsIs: >/1 ]] }
    refalrts::reinit_open_call( context[4] );
    refalrts::reinit_name( context[5], ref_Open.ref.function );
    refalrts::push_stack( context[1] );
    refalrts::push_stack( context[4] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[4];
    refalrts::splice_to_freelist_open( trash_prev, res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence();

  do {
    // ( 'Open' ) e.idx
    // </0 & Mu/4 (/5 'O'/9 'p'/10 'e'/11 'n'/12 )/6 e.eX#1/2 >/1
    context[7] = 0;
    context[8] = 0;
    if( ! refalrts::brackets_term( context[7], context[8], context[5] ) )
      continue;
    context[9] = refalrts::char_left( 'O', context[7], context[8] );
    if( ! context[9] )
      continue;
    context[10] = refalrts::char_left( 'p', context[7], context[8] );
    if( ! context[10] )
      continue;
    context[11] = refalrts::char_left( 'e', context[7], context[8] );
    if( ! context[11] )
      continue;
    context[12] = refalrts::char_left( 'n', context[7], context[8] );
    if( ! context[12] )
      continue;
    if( ! refalrts::empty_seq( context[7], context[8] ) )
      continue;
    // closed e.eX#1 as range 2
    //DEBUG: e.eX#1: 2

    refalrts::reset_allocator();
    //TRASH: {REMOVED TILE} </0 & Mu/4 (/5 'O'/9 'p'/10 'e'/11 {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ HalfReuse: </12 HalfReuse: & Open/6 AsIs: e.eX#1/2 AsIs: >/1 ]] }
    refalrts::reinit_open_call( context[12] );
    refalrts::reinit_name( context[6], ref_Open.ref.function );
    refalrts::push_stack( context[1] );
    refalrts::push_stack( context[12] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[12];
    refalrts::splice_to_freelist_open( trash_prev, res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence();

  do {
    // # Ord e.idx
    // </0 & Mu/4 # Ord/5 e.eX#1/2 >/1
    if( ! refalrts::ident_term(  ident_Ord, context[5] ) )
      continue;
    // closed e.eX#1 as range 2
    //DEBUG: e.eX#1: 2

    refalrts::reset_allocator();
    //TRASH: {REMOVED TILE} </0 {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ HalfReuse: </4 HalfReuse: & Ord/5 AsIs: e.eX#1/2 AsIs: >/1 ]] }
    refalrts::reinit_open_call( context[4] );
    refalrts::reinit_name( context[5], ref_Ord.ref.function );
    refalrts::push_stack( context[1] );
    refalrts::push_stack( context[4] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[4];
    refalrts::splice_to_freelist_open( trash_prev, res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence();

  do {
    // ( 'Ord' ) e.idx
    // </0 & Mu/4 (/5 'O'/9 'r'/10 'd'/11 )/6 e.eX#1/2 >/1
    context[7] = 0;
    context[8] = 0;
    if( ! refalrts::brackets_term( context[7], context[8], context[5] ) )
      continue;
    context[9] = refalrts::char_left( 'O', context[7], context[8] );
    if( ! context[9] )
      continue;
    context[10] = refalrts::char_left( 'r', context[7], context[8] );
    if( ! context[10] )
      continue;
    context[11] = refalrts::char_left( 'd', context[7], context[8] );
    if( ! context[11] )
      continue;
    if( ! refalrts::empty_seq( context[7], context[8] ) )
      continue;
    // closed e.eX#1 as range 2
    //DEBUG: e.eX#1: 2

    refalrts::reset_allocator();
    //TRASH: {REMOVED TILE} </0 & Mu/4 (/5 'O'/9 'r'/10 {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ HalfReuse: </11 HalfReuse: & Ord/6 AsIs: e.eX#1/2 AsIs: >/1 ]] }
    refalrts::reinit_open_call( context[11] );
    refalrts::reinit_name( context[6], ref_Ord.ref.function );
    refalrts::push_stack( context[1] );
    refalrts::push_stack( context[11] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[11];
    refalrts::splice_to_freelist_open( trash_prev, res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence();

  do {
    // # Print e.idx
    // </0 & Mu/4 # Print/5 e.eX#1/2 >/1
    if( ! refalrts::ident_term(  ident_Print, context[5] ) )
      continue;
    // closed e.eX#1 as range 2
    //DEBUG: e.eX#1: 2

    refalrts::reset_allocator();
    //TRASH: {REMOVED TILE} </0 {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ HalfReuse: </4 HalfReuse: & Print/5 AsIs: e.eX#1/2 AsIs: >/1 ]] }
    refalrts::reinit_open_call( context[4] );
    refalrts::reinit_name( context[5], ref_Print.ref.function );
    refalrts::push_stack( context[1] );
    refalrts::push_stack( context[4] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[4];
    refalrts::splice_to_freelist_open( trash_prev, res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence();

  do {
    // ( 'Print' ) e.idx
    // </0 & Mu/4 (/5 'P'/9 'r'/10 'i'/11 'n'/12 't'/13 )/6 e.eX#1/2 >/1
    context[7] = 0;
    context[8] = 0;
    if( ! refalrts::brackets_term( context[7], context[8], context[5] ) )
      continue;
    context[9] = refalrts::char_left( 'P', context[7], context[8] );
    if( ! context[9] )
      continue;
    context[10] = refalrts::char_left( 'r', context[7], context[8] );
    if( ! context[10] )
      continue;
    context[11] = refalrts::char_left( 'i', context[7], context[8] );
    if( ! context[11] )
      continue;
    context[12] = refalrts::char_left( 'n', context[7], context[8] );
    if( ! context[12] )
      continue;
    context[13] = refalrts::char_left( 't', context[7], context[8] );
    if( ! context[13] )
      continue;
    if( ! refalrts::empty_seq( context[7], context[8] ) )
      continue;
    // closed e.eX#1 as range 2
    //DEBUG: e.eX#1: 2

    refalrts::reset_allocator();
    //TRASH: {REMOVED TILE} </0 & Mu/4 (/5 'P'/9 'r'/10 'i'/11 'n'/12 {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ HalfReuse: </13 HalfReuse: & Print/6 AsIs: e.eX#1/2 AsIs: >/1 ]] }
    refalrts::reinit_open_call( context[13] );
    refalrts::reinit_name( context[6], ref_Print.ref.function );
    refalrts::push_stack( context[1] );
    refalrts::push_stack( context[13] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[13];
    refalrts::splice_to_freelist_open( trash_prev, res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence();

  do {
    // # Prout e.idx
    // </0 & Mu/4 # Prout/5 e.eX#1/2 >/1
    if( ! refalrts::ident_term(  ident_Prout, context[5] ) )
      continue;
    // closed e.eX#1 as range 2
    //DEBUG: e.eX#1: 2

    refalrts::reset_allocator();
    //TRASH: {REMOVED TILE} </0 {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ HalfReuse: </4 HalfReuse: & Prout/5 AsIs: e.eX#1/2 AsIs: >/1 ]] }
    refalrts::reinit_open_call( context[4] );
    refalrts::reinit_name( context[5], ref_Prout.ref.function );
    refalrts::push_stack( context[1] );
    refalrts::push_stack( context[4] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[4];
    refalrts::splice_to_freelist_open( trash_prev, res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence();

  do {
    // ( 'Prout' ) e.idx
    // </0 & Mu/4 (/5 'P'/9 'r'/10 'o'/11 'u'/12 't'/13 )/6 e.eX#1/2 >/1
    context[7] = 0;
    context[8] = 0;
    if( ! refalrts::brackets_term( context[7], context[8], context[5] ) )
      continue;
    context[9] = refalrts::char_left( 'P', context[7], context[8] );
    if( ! context[9] )
      continue;
    context[10] = refalrts::char_left( 'r', context[7], context[8] );
    if( ! context[10] )
      continue;
    context[11] = refalrts::char_left( 'o', context[7], context[8] );
    if( ! context[11] )
      continue;
    context[12] = refalrts::char_left( 'u', context[7], context[8] );
    if( ! context[12] )
      continue;
    context[13] = refalrts::char_left( 't', context[7], context[8] );
    if( ! context[13] )
      continue;
    if( ! refalrts::empty_seq( context[7], context[8] ) )
      continue;
    // closed e.eX#1 as range 2
    //DEBUG: e.eX#1: 2

    refalrts::reset_allocator();
    //TRASH: {REMOVED TILE} </0 & Mu/4 (/5 'P'/9 'r'/10 'o'/11 'u'/12 {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ HalfReuse: </13 HalfReuse: & Prout/6 AsIs: e.eX#1/2 AsIs: >/1 ]] }
    refalrts::reinit_open_call( context[13] );
    refalrts::reinit_name( context[6], ref_Prout.ref.function );
    refalrts::push_stack( context[1] );
    refalrts::push_stack( context[13] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[13];
    refalrts::splice_to_freelist_open( trash_prev, res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence();

  do {
    // # Put e.idx
    // </0 & Mu/4 # Put/5 e.eX#1/2 >/1
    if( ! refalrts::ident_term(  ident_Put, context[5] ) )
      continue;
    // closed e.eX#1 as range 2
    //DEBUG: e.eX#1: 2

    refalrts::reset_allocator();
    //TRASH: {REMOVED TILE} </0 {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ HalfReuse: </4 HalfReuse: & Put/5 AsIs: e.eX#1/2 AsIs: >/1 ]] }
    refalrts::reinit_open_call( context[4] );
    refalrts::reinit_name( context[5], ref_Put.ref.function );
    refalrts::push_stack( context[1] );
    refalrts::push_stack( context[4] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[4];
    refalrts::splice_to_freelist_open( trash_prev, res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence();

  do {
    // ( 'Put' ) e.idx
    // </0 & Mu/4 (/5 'P'/9 'u'/10 't'/11 )/6 e.eX#1/2 >/1
    context[7] = 0;
    context[8] = 0;
    if( ! refalrts::brackets_term( context[7], context[8], context[5] ) )
      continue;
    context[9] = refalrts::char_left( 'P', context[7], context[8] );
    if( ! context[9] )
      continue;
    context[10] = refalrts::char_left( 'u', context[7], context[8] );
    if( ! context[10] )
      continue;
    context[11] = refalrts::char_left( 't', context[7], context[8] );
    if( ! context[11] )
      continue;
    if( ! refalrts::empty_seq( context[7], context[8] ) )
      continue;
    // closed e.eX#1 as range 2
    //DEBUG: e.eX#1: 2

    refalrts::reset_allocator();
    //TRASH: {REMOVED TILE} </0 & Mu/4 (/5 'P'/9 'u'/10 {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ HalfReuse: </11 HalfReuse: & Put/6 AsIs: e.eX#1/2 AsIs: >/1 ]] }
    refalrts::reinit_open_call( context[11] );
    refalrts::reinit_name( context[6], ref_Put.ref.function );
    refalrts::push_stack( context[1] );
    refalrts::push_stack( context[11] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[11];
    refalrts::splice_to_freelist_open( trash_prev, res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence();

  do {
    // # Putout e.idx
    // </0 & Mu/4 # Putout/5 e.eX#1/2 >/1
    if( ! refalrts::ident_term(  ident_Putout, context[5] ) )
      continue;
    // closed e.eX#1 as range 2
    //DEBUG: e.eX#1: 2

    refalrts::reset_allocator();
    //TRASH: {REMOVED TILE} </0 {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ HalfReuse: </4 HalfReuse: & Putout/5 AsIs: e.eX#1/2 AsIs: >/1 ]] }
    refalrts::reinit_open_call( context[4] );
    refalrts::reinit_name( context[5], ref_Putout.ref.function );
    refalrts::push_stack( context[1] );
    refalrts::push_stack( context[4] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[4];
    refalrts::splice_to_freelist_open( trash_prev, res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence();

  do {
    // ( 'Putout' ) e.idx
    // </0 & Mu/4 (/5 'P'/9 'u'/10 't'/11 'o'/12 'u'/13 't'/14 )/6 e.eX#1/2 >/1
    context[7] = 0;
    context[8] = 0;
    if( ! refalrts::brackets_term( context[7], context[8], context[5] ) )
      continue;
    context[9] = refalrts::char_left( 'P', context[7], context[8] );
    if( ! context[9] )
      continue;
    context[10] = refalrts::char_left( 'u', context[7], context[8] );
    if( ! context[10] )
      continue;
    context[11] = refalrts::char_left( 't', context[7], context[8] );
    if( ! context[11] )
      continue;
    context[12] = refalrts::char_left( 'o', context[7], context[8] );
    if( ! context[12] )
      continue;
    context[13] = refalrts::char_left( 'u', context[7], context[8] );
    if( ! context[13] )
      continue;
    context[14] = refalrts::char_left( 't', context[7], context[8] );
    if( ! context[14] )
      continue;
    if( ! refalrts::empty_seq( context[7], context[8] ) )
      continue;
    // closed e.eX#1 as range 2
    //DEBUG: e.eX#1: 2

    refalrts::reset_allocator();
    //TRASH: {REMOVED TILE} </0 & Mu/4 (/5 'P'/9 'u'/10 't'/11 'o'/12 'u'/13 {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ HalfReuse: </14 HalfReuse: & Putout/6 AsIs: e.eX#1/2 AsIs: >/1 ]] }
    refalrts::reinit_open_call( context[14] );
    refalrts::reinit_name( context[6], ref_Putout.ref.function );
    refalrts::push_stack( context[1] );
    refalrts::push_stack( context[14] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[14];
    refalrts::splice_to_freelist_open( trash_prev, res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence();

  do {
    // # Rp e.idx
    // </0 & Mu/4 # Rp/5 e.eX#1/2 >/1
    if( ! refalrts::ident_term(  ident_Rp, context[5] ) )
      continue;
    // closed e.eX#1 as range 2
    //DEBUG: e.eX#1: 2

    refalrts::reset_allocator();
    //TRASH: {REMOVED TILE} </0 {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ HalfReuse: </4 HalfReuse: & Rp/5 AsIs: e.eX#1/2 AsIs: >/1 ]] }
    refalrts::reinit_open_call( context[4] );
    refalrts::reinit_name( context[5], ref_Rp.ref.function );
    refalrts::push_stack( context[1] );
    refalrts::push_stack( context[4] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[4];
    refalrts::splice_to_freelist_open( trash_prev, res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence();

  do {
    // ( 'Rp' ) e.idx
    // </0 & Mu/4 (/5 'R'/9 'p'/10 )/6 e.eX#1/2 >/1
    context[7] = 0;
    context[8] = 0;
    if( ! refalrts::brackets_term( context[7], context[8], context[5] ) )
      continue;
    context[9] = refalrts::char_left( 'R', context[7], context[8] );
    if( ! context[9] )
      continue;
    context[10] = refalrts::char_left( 'p', context[7], context[8] );
    if( ! context[10] )
      continue;
    if( ! refalrts::empty_seq( context[7], context[8] ) )
      continue;
    // closed e.eX#1 as range 2
    //DEBUG: e.eX#1: 2

    refalrts::reset_allocator();
    //TRASH: {REMOVED TILE} </0 & Mu/4 (/5 'R'/9 {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ HalfReuse: </10 HalfReuse: & Rp/6 AsIs: e.eX#1/2 AsIs: >/1 ]] }
    refalrts::reinit_open_call( context[10] );
    refalrts::reinit_name( context[6], ref_Rp.ref.function );
    refalrts::push_stack( context[1] );
    refalrts::push_stack( context[10] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[10];
    refalrts::splice_to_freelist_open( trash_prev, res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence();

  do {
    // # Step e.idx
    // </0 & Mu/4 # Step/5 e.eX#1/2 >/1
    if( ! refalrts::ident_term(  ident_Step, context[5] ) )
      continue;
    // closed e.eX#1 as range 2
    //DEBUG: e.eX#1: 2

    refalrts::reset_allocator();
    //TRASH: {REMOVED TILE} </0 {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ HalfReuse: </4 HalfReuse: & Step/5 AsIs: e.eX#1/2 AsIs: >/1 ]] }
    refalrts::reinit_open_call( context[4] );
    refalrts::reinit_name( context[5], ref_Step.ref.function );
    refalrts::push_stack( context[1] );
    refalrts::push_stack( context[4] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[4];
    refalrts::splice_to_freelist_open( trash_prev, res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence();

  do {
    // ( 'Step' ) e.idx
    // </0 & Mu/4 (/5 'S'/9 't'/10 'e'/11 'p'/12 )/6 e.eX#1/2 >/1
    context[7] = 0;
    context[8] = 0;
    if( ! refalrts::brackets_term( context[7], context[8], context[5] ) )
      continue;
    context[9] = refalrts::char_left( 'S', context[7], context[8] );
    if( ! context[9] )
      continue;
    context[10] = refalrts::char_left( 't', context[7], context[8] );
    if( ! context[10] )
      continue;
    context[11] = refalrts::char_left( 'e', context[7], context[8] );
    if( ! context[11] )
      continue;
    context[12] = refalrts::char_left( 'p', context[7], context[8] );
    if( ! context[12] )
      continue;
    if( ! refalrts::empty_seq( context[7], context[8] ) )
      continue;
    // closed e.eX#1 as range 2
    //DEBUG: e.eX#1: 2

    refalrts::reset_allocator();
    //TRASH: {REMOVED TILE} </0 & Mu/4 (/5 'S'/9 't'/10 'e'/11 {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ HalfReuse: </12 HalfReuse: & Step/6 AsIs: e.eX#1/2 AsIs: >/1 ]] }
    refalrts::reinit_open_call( context[12] );
    refalrts::reinit_name( context[6], ref_Step.ref.function );
    refalrts::push_stack( context[1] );
    refalrts::push_stack( context[12] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[12];
    refalrts::splice_to_freelist_open( trash_prev, res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence();

  do {
    // # Sub e.idx
    // </0 & Mu/4 # Sub/5 e.eX#1/2 >/1
    if( ! refalrts::ident_term(  ident_Sub, context[5] ) )
      continue;
    // closed e.eX#1 as range 2
    //DEBUG: e.eX#1: 2

    refalrts::reset_allocator();
    //TRASH: {REMOVED TILE} </0 {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ HalfReuse: </4 HalfReuse: & Sub/5 AsIs: e.eX#1/2 AsIs: >/1 ]] }
    refalrts::reinit_open_call( context[4] );
    refalrts::reinit_name( context[5], ref_Sub.ref.function );
    refalrts::push_stack( context[1] );
    refalrts::push_stack( context[4] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[4];
    refalrts::splice_to_freelist_open( trash_prev, res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence();

  do {
    // ( 'Sub' ) e.idx
    // </0 & Mu/4 (/5 'S'/9 'u'/10 'b'/11 )/6 e.eX#1/2 >/1
    context[7] = 0;
    context[8] = 0;
    if( ! refalrts::brackets_term( context[7], context[8], context[5] ) )
      continue;
    context[9] = refalrts::char_left( 'S', context[7], context[8] );
    if( ! context[9] )
      continue;
    context[10] = refalrts::char_left( 'u', context[7], context[8] );
    if( ! context[10] )
      continue;
    context[11] = refalrts::char_left( 'b', context[7], context[8] );
    if( ! context[11] )
      continue;
    if( ! refalrts::empty_seq( context[7], context[8] ) )
      continue;
    // closed e.eX#1 as range 2
    //DEBUG: e.eX#1: 2

    refalrts::reset_allocator();
    //TRASH: {REMOVED TILE} </0 & Mu/4 (/5 'S'/9 'u'/10 {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ HalfReuse: </11 HalfReuse: & Sub/6 AsIs: e.eX#1/2 AsIs: >/1 ]] }
    refalrts::reinit_open_call( context[11] );
    refalrts::reinit_name( context[6], ref_Sub.ref.function );
    refalrts::push_stack( context[1] );
    refalrts::push_stack( context[11] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[11];
    refalrts::splice_to_freelist_open( trash_prev, res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence();

  do {
    // # Symb e.idx
    // </0 & Mu/4 # Symb/5 e.eX#1/2 >/1
    if( ! refalrts::ident_term(  ident_Symb, context[5] ) )
      continue;
    // closed e.eX#1 as range 2
    //DEBUG: e.eX#1: 2

    refalrts::reset_allocator();
    //TRASH: {REMOVED TILE} </0 {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ HalfReuse: </4 HalfReuse: & Symb/5 AsIs: e.eX#1/2 AsIs: >/1 ]] }
    refalrts::reinit_open_call( context[4] );
    refalrts::reinit_name( context[5], ref_Symb.ref.function );
    refalrts::push_stack( context[1] );
    refalrts::push_stack( context[4] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[4];
    refalrts::splice_to_freelist_open( trash_prev, res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence();

  do {
    // ( 'Symb' ) e.idx
    // </0 & Mu/4 (/5 'S'/9 'y'/10 'm'/11 'b'/12 )/6 e.eX#1/2 >/1
    context[7] = 0;
    context[8] = 0;
    if( ! refalrts::brackets_term( context[7], context[8], context[5] ) )
      continue;
    context[9] = refalrts::char_left( 'S', context[7], context[8] );
    if( ! context[9] )
      continue;
    context[10] = refalrts::char_left( 'y', context[7], context[8] );
    if( ! context[10] )
      continue;
    context[11] = refalrts::char_left( 'm', context[7], context[8] );
    if( ! context[11] )
      continue;
    context[12] = refalrts::char_left( 'b', context[7], context[8] );
    if( ! context[12] )
      continue;
    if( ! refalrts::empty_seq( context[7], context[8] ) )
      continue;
    // closed e.eX#1 as range 2
    //DEBUG: e.eX#1: 2

    refalrts::reset_allocator();
    //TRASH: {REMOVED TILE} </0 & Mu/4 (/5 'S'/9 'y'/10 'm'/11 {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ HalfReuse: </12 HalfReuse: & Symb/6 AsIs: e.eX#1/2 AsIs: >/1 ]] }
    refalrts::reinit_open_call( context[12] );
    refalrts::reinit_name( context[6], ref_Symb.ref.function );
    refalrts::push_stack( context[1] );
    refalrts::push_stack( context[12] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[12];
    refalrts::splice_to_freelist_open( trash_prev, res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence();

  do {
    // # Time e.idx
    // </0 & Mu/4 # Time/5 e.eX#1/2 >/1
    if( ! refalrts::ident_term(  ident_Time, context[5] ) )
      continue;
    // closed e.eX#1 as range 2
    //DEBUG: e.eX#1: 2

    refalrts::reset_allocator();
    //TRASH: {REMOVED TILE} </0 {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ HalfReuse: </4 HalfReuse: & Time/5 AsIs: e.eX#1/2 AsIs: >/1 ]] }
    refalrts::reinit_open_call( context[4] );
    refalrts::reinit_name( context[5], ref_Time.ref.function );
    refalrts::push_stack( context[1] );
    refalrts::push_stack( context[4] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[4];
    refalrts::splice_to_freelist_open( trash_prev, res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence();

  do {
    // ( 'Time' ) e.idx
    // </0 & Mu/4 (/5 'T'/9 'i'/10 'm'/11 'e'/12 )/6 e.eX#1/2 >/1
    context[7] = 0;
    context[8] = 0;
    if( ! refalrts::brackets_term( context[7], context[8], context[5] ) )
      continue;
    context[9] = refalrts::char_left( 'T', context[7], context[8] );
    if( ! context[9] )
      continue;
    context[10] = refalrts::char_left( 'i', context[7], context[8] );
    if( ! context[10] )
      continue;
    context[11] = refalrts::char_left( 'm', context[7], context[8] );
    if( ! context[11] )
      continue;
    context[12] = refalrts::char_left( 'e', context[7], context[8] );
    if( ! context[12] )
      continue;
    if( ! refalrts::empty_seq( context[7], context[8] ) )
      continue;
    // closed e.eX#1 as range 2
    //DEBUG: e.eX#1: 2

    refalrts::reset_allocator();
    //TRASH: {REMOVED TILE} </0 & Mu/4 (/5 'T'/9 'i'/10 'm'/11 {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ HalfReuse: </12 HalfReuse: & Time/6 AsIs: e.eX#1/2 AsIs: >/1 ]] }
    refalrts::reinit_open_call( context[12] );
    refalrts::reinit_name( context[6], ref_Time.ref.function );
    refalrts::push_stack( context[1] );
    refalrts::push_stack( context[12] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[12];
    refalrts::splice_to_freelist_open( trash_prev, res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence();

  do {
    // # Type e.idx
    // </0 & Mu/4 # Type/5 e.eX#1/2 >/1
    if( ! refalrts::ident_term(  ident_Type, context[5] ) )
      continue;
    // closed e.eX#1 as range 2
    //DEBUG: e.eX#1: 2

    refalrts::reset_allocator();
    //TRASH: {REMOVED TILE} </0 {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ HalfReuse: </4 HalfReuse: & Type/5 AsIs: e.eX#1/2 AsIs: >/1 ]] }
    refalrts::reinit_open_call( context[4] );
    refalrts::reinit_name( context[5], ref_Type.ref.function );
    refalrts::push_stack( context[1] );
    refalrts::push_stack( context[4] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[4];
    refalrts::splice_to_freelist_open( trash_prev, res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence();

  do {
    // ( 'Type' ) e.idx
    // </0 & Mu/4 (/5 'T'/9 'y'/10 'p'/11 'e'/12 )/6 e.eX#1/2 >/1
    context[7] = 0;
    context[8] = 0;
    if( ! refalrts::brackets_term( context[7], context[8], context[5] ) )
      continue;
    context[9] = refalrts::char_left( 'T', context[7], context[8] );
    if( ! context[9] )
      continue;
    context[10] = refalrts::char_left( 'y', context[7], context[8] );
    if( ! context[10] )
      continue;
    context[11] = refalrts::char_left( 'p', context[7], context[8] );
    if( ! context[11] )
      continue;
    context[12] = refalrts::char_left( 'e', context[7], context[8] );
    if( ! context[12] )
      continue;
    if( ! refalrts::empty_seq( context[7], context[8] ) )
      continue;
    // closed e.eX#1 as range 2
    //DEBUG: e.eX#1: 2

    refalrts::reset_allocator();
    //TRASH: {REMOVED TILE} </0 & Mu/4 (/5 'T'/9 'y'/10 'p'/11 {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ HalfReuse: </12 HalfReuse: & Type/6 AsIs: e.eX#1/2 AsIs: >/1 ]] }
    refalrts::reinit_open_call( context[12] );
    refalrts::reinit_name( context[6], ref_Type.ref.function );
    refalrts::push_stack( context[1] );
    refalrts::push_stack( context[12] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[12];
    refalrts::splice_to_freelist_open( trash_prev, res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence();

  do {
    // # Upper e.idx
    // </0 & Mu/4 # Upper/5 e.eX#1/2 >/1
    if( ! refalrts::ident_term(  ident_Upper, context[5] ) )
      continue;
    // closed e.eX#1 as range 2
    //DEBUG: e.eX#1: 2

    refalrts::reset_allocator();
    //TRASH: {REMOVED TILE} </0 {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ HalfReuse: </4 HalfReuse: & Upper/5 AsIs: e.eX#1/2 AsIs: >/1 ]] }
    refalrts::reinit_open_call( context[4] );
    refalrts::reinit_name( context[5], ref_Upper.ref.function );
    refalrts::push_stack( context[1] );
    refalrts::push_stack( context[4] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[4];
    refalrts::splice_to_freelist_open( trash_prev, res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence();

  do {
    // ( 'Upper' ) e.idx
    // </0 & Mu/4 (/5 'U'/9 'p'/10 'p'/11 'e'/12 'r'/13 )/6 e.eX#1/2 >/1
    context[7] = 0;
    context[8] = 0;
    if( ! refalrts::brackets_term( context[7], context[8], context[5] ) )
      continue;
    context[9] = refalrts::char_left( 'U', context[7], context[8] );
    if( ! context[9] )
      continue;
    context[10] = refalrts::char_left( 'p', context[7], context[8] );
    if( ! context[10] )
      continue;
    context[11] = refalrts::char_left( 'p', context[7], context[8] );
    if( ! context[11] )
      continue;
    context[12] = refalrts::char_left( 'e', context[7], context[8] );
    if( ! context[12] )
      continue;
    context[13] = refalrts::char_left( 'r', context[7], context[8] );
    if( ! context[13] )
      continue;
    if( ! refalrts::empty_seq( context[7], context[8] ) )
      continue;
    // closed e.eX#1 as range 2
    //DEBUG: e.eX#1: 2

    refalrts::reset_allocator();
    //TRASH: {REMOVED TILE} </0 & Mu/4 (/5 'U'/9 'p'/10 'p'/11 'e'/12 {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ HalfReuse: </13 HalfReuse: & Upper/6 AsIs: e.eX#1/2 AsIs: >/1 ]] }
    refalrts::reinit_open_call( context[13] );
    refalrts::reinit_name( context[6], ref_Upper.ref.function );
    refalrts::push_stack( context[1] );
    refalrts::push_stack( context[13] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[13];
    refalrts::splice_to_freelist_open( trash_prev, res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence();

  do {
    // # Sysfun e.idx
    // </0 & Mu/4 # Sysfun/5 e.eX#1/2 >/1
    if( ! refalrts::ident_term(  ident_Sysfun, context[5] ) )
      continue;
    // closed e.eX#1 as range 2
    //DEBUG: e.eX#1: 2

    refalrts::reset_allocator();
    //TRASH: {REMOVED TILE} </0 {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ HalfReuse: </4 HalfReuse: & Sysfun/5 AsIs: e.eX#1/2 AsIs: >/1 ]] }
    refalrts::reinit_open_call( context[4] );
    refalrts::reinit_name( context[5], ref_Sysfun.ref.function );
    refalrts::push_stack( context[1] );
    refalrts::push_stack( context[4] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[4];
    refalrts::splice_to_freelist_open( trash_prev, res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence();

  do {
    // ( 'Sysfun' ) e.idx
    // </0 & Mu/4 (/5 'S'/9 'y'/10 's'/11 'f'/12 'u'/13 'n'/14 )/6 e.eX#1/2 >/1
    context[7] = 0;
    context[8] = 0;
    if( ! refalrts::brackets_term( context[7], context[8], context[5] ) )
      continue;
    context[9] = refalrts::char_left( 'S', context[7], context[8] );
    if( ! context[9] )
      continue;
    context[10] = refalrts::char_left( 'y', context[7], context[8] );
    if( ! context[10] )
      continue;
    context[11] = refalrts::char_left( 's', context[7], context[8] );
    if( ! context[11] )
      continue;
    context[12] = refalrts::char_left( 'f', context[7], context[8] );
    if( ! context[12] )
      continue;
    context[13] = refalrts::char_left( 'u', context[7], context[8] );
    if( ! context[13] )
      continue;
    context[14] = refalrts::char_left( 'n', context[7], context[8] );
    if( ! context[14] )
      continue;
    if( ! refalrts::empty_seq( context[7], context[8] ) )
      continue;
    // closed e.eX#1 as range 2
    //DEBUG: e.eX#1: 2

    refalrts::reset_allocator();
    //TRASH: {REMOVED TILE} </0 & Mu/4 (/5 'S'/9 'y'/10 's'/11 'f'/12 'u'/13 {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ HalfReuse: </14 HalfReuse: & Sysfun/6 AsIs: e.eX#1/2 AsIs: >/1 ]] }
    refalrts::reinit_open_call( context[14] );
    refalrts::reinit_name( context[6], ref_Sysfun.ref.function );
    refalrts::push_stack( context[1] );
    refalrts::push_stack( context[14] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[14];
    refalrts::splice_to_freelist_open( trash_prev, res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence();

  do {
    // # Freeze e.idx
    // </0 & Mu/4 # Freeze/5 e.eX#1/2 >/1
    if( ! refalrts::ident_term(  ident_Freeze, context[5] ) )
      continue;
    // closed e.eX#1 as range 2
    //DEBUG: e.eX#1: 2

    refalrts::reset_allocator();
    //TRASH: {REMOVED TILE} </0 {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ HalfReuse: </4 HalfReuse: & Freeze/5 AsIs: e.eX#1/2 AsIs: >/1 ]] }
    refalrts::reinit_open_call( context[4] );
    refalrts::reinit_name( context[5], ref_Freeze.ref.function );
    refalrts::push_stack( context[1] );
    refalrts::push_stack( context[4] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[4];
    refalrts::splice_to_freelist_open( trash_prev, res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence();

  do {
    // ( 'Freeze' ) e.idx
    // </0 & Mu/4 (/5 'F'/9 'r'/10 'e'/11 'e'/12 'z'/13 'e'/14 )/6 e.eX#1/2 >/1
    context[7] = 0;
    context[8] = 0;
    if( ! refalrts::brackets_term( context[7], context[8], context[5] ) )
      continue;
    context[9] = refalrts::char_left( 'F', context[7], context[8] );
    if( ! context[9] )
      continue;
    context[10] = refalrts::char_left( 'r', context[7], context[8] );
    if( ! context[10] )
      continue;
    context[11] = refalrts::char_left( 'e', context[7], context[8] );
    if( ! context[11] )
      continue;
    context[12] = refalrts::char_left( 'e', context[7], context[8] );
    if( ! context[12] )
      continue;
    context[13] = refalrts::char_left( 'z', context[7], context[8] );
    if( ! context[13] )
      continue;
    context[14] = refalrts::char_left( 'e', context[7], context[8] );
    if( ! context[14] )
      continue;
    if( ! refalrts::empty_seq( context[7], context[8] ) )
      continue;
    // closed e.eX#1 as range 2
    //DEBUG: e.eX#1: 2

    refalrts::reset_allocator();
    //TRASH: {REMOVED TILE} </0 & Mu/4 (/5 'F'/9 'r'/10 'e'/11 'e'/12 'z'/13 {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ HalfReuse: </14 HalfReuse: & Freeze/6 AsIs: e.eX#1/2 AsIs: >/1 ]] }
    refalrts::reinit_open_call( context[14] );
    refalrts::reinit_name( context[6], ref_Freeze.ref.function );
    refalrts::push_stack( context[1] );
    refalrts::push_stack( context[14] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[14];
    refalrts::splice_to_freelist_open( trash_prev, res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence();

  do {
    // # Freezer e.idx
    // </0 & Mu/4 # Freezer/5 e.eX#1/2 >/1
    if( ! refalrts::ident_term(  ident_Freezer, context[5] ) )
      continue;
    // closed e.eX#1 as range 2
    //DEBUG: e.eX#1: 2

    refalrts::reset_allocator();
    //TRASH: {REMOVED TILE} </0 {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ HalfReuse: </4 HalfReuse: & Freezer/5 AsIs: e.eX#1/2 AsIs: >/1 ]] }
    refalrts::reinit_open_call( context[4] );
    refalrts::reinit_name( context[5], ref_Freezer.ref.function );
    refalrts::push_stack( context[1] );
    refalrts::push_stack( context[4] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[4];
    refalrts::splice_to_freelist_open( trash_prev, res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence();

  do {
    // ( 'Freezer' ) e.idx
    // </0 & Mu/4 (/5 'F'/9 'r'/10 'e'/11 'e'/12 'z'/13 'e'/14 'r'/15 )/6 e.eX#1/2 >/1
    context[7] = 0;
    context[8] = 0;
    if( ! refalrts::brackets_term( context[7], context[8], context[5] ) )
      continue;
    context[9] = refalrts::char_left( 'F', context[7], context[8] );
    if( ! context[9] )
      continue;
    context[10] = refalrts::char_left( 'r', context[7], context[8] );
    if( ! context[10] )
      continue;
    context[11] = refalrts::char_left( 'e', context[7], context[8] );
    if( ! context[11] )
      continue;
    context[12] = refalrts::char_left( 'e', context[7], context[8] );
    if( ! context[12] )
      continue;
    context[13] = refalrts::char_left( 'z', context[7], context[8] );
    if( ! context[13] )
      continue;
    context[14] = refalrts::char_left( 'e', context[7], context[8] );
    if( ! context[14] )
      continue;
    context[15] = refalrts::char_left( 'r', context[7], context[8] );
    if( ! context[15] )
      continue;
    if( ! refalrts::empty_seq( context[7], context[8] ) )
      continue;
    // closed e.eX#1 as range 2
    //DEBUG: e.eX#1: 2

    refalrts::reset_allocator();
    //TRASH: {REMOVED TILE} </0 & Mu/4 (/5 'F'/9 'r'/10 'e'/11 'e'/12 'z'/13 'e'/14 {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ HalfReuse: </15 HalfReuse: & Freezer/6 AsIs: e.eX#1/2 AsIs: >/1 ]] }
    refalrts::reinit_open_call( context[15] );
    refalrts::reinit_name( context[6], ref_Freezer.ref.function );
    refalrts::push_stack( context[1] );
    refalrts::push_stack( context[15] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[15];
    refalrts::splice_to_freelist_open( trash_prev, res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence();

  do {
    // # Dn e.idx
    // </0 & Mu/4 # Dn/5 e.eX#1/2 >/1
    if( ! refalrts::ident_term(  ident_Dn, context[5] ) )
      continue;
    // closed e.eX#1 as range 2
    //DEBUG: e.eX#1: 2

    refalrts::reset_allocator();
    //TRASH: {REMOVED TILE} </0 {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ HalfReuse: </4 HalfReuse: & Dn/5 AsIs: e.eX#1/2 AsIs: >/1 ]] }
    refalrts::reinit_open_call( context[4] );
    refalrts::reinit_name( context[5], ref_Dn.ref.function );
    refalrts::push_stack( context[1] );
    refalrts::push_stack( context[4] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[4];
    refalrts::splice_to_freelist_open( trash_prev, res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence();

  do {
    // ( 'Dn' ) e.idx
    // </0 & Mu/4 (/5 'D'/9 'n'/10 )/6 e.eX#1/2 >/1
    context[7] = 0;
    context[8] = 0;
    if( ! refalrts::brackets_term( context[7], context[8], context[5] ) )
      continue;
    context[9] = refalrts::char_left( 'D', context[7], context[8] );
    if( ! context[9] )
      continue;
    context[10] = refalrts::char_left( 'n', context[7], context[8] );
    if( ! context[10] )
      continue;
    if( ! refalrts::empty_seq( context[7], context[8] ) )
      continue;
    // closed e.eX#1 as range 2
    //DEBUG: e.eX#1: 2

    refalrts::reset_allocator();
    //TRASH: {REMOVED TILE} </0 & Mu/4 (/5 'D'/9 {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ HalfReuse: </10 HalfReuse: & Dn/6 AsIs: e.eX#1/2 AsIs: >/1 ]] }
    refalrts::reinit_open_call( context[10] );
    refalrts::reinit_name( context[6], ref_Dn.ref.function );
    refalrts::push_stack( context[1] );
    refalrts::push_stack( context[10] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[10];
    refalrts::splice_to_freelist_open( trash_prev, res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence();

  do {
    // # Up e.idx
    // </0 & Mu/4 # Up/5 e.eX#1/2 >/1
    if( ! refalrts::ident_term(  ident_Up, context[5] ) )
      continue;
    // closed e.eX#1 as range 2
    //DEBUG: e.eX#1: 2

    refalrts::reset_allocator();
    //TRASH: {REMOVED TILE} </0 {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ HalfReuse: </4 HalfReuse: & Up/5 AsIs: e.eX#1/2 AsIs: >/1 ]] }
    refalrts::reinit_open_call( context[4] );
    refalrts::reinit_name( context[5], ref_Up.ref.function );
    refalrts::push_stack( context[1] );
    refalrts::push_stack( context[4] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[4];
    refalrts::splice_to_freelist_open( trash_prev, res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence();

  do {
    // ( 'Up' ) e.idx
    // </0 & Mu/4 (/5 'U'/9 'p'/10 )/6 e.eX#1/2 >/1
    context[7] = 0;
    context[8] = 0;
    if( ! refalrts::brackets_term( context[7], context[8], context[5] ) )
      continue;
    context[9] = refalrts::char_left( 'U', context[7], context[8] );
    if( ! context[9] )
      continue;
    context[10] = refalrts::char_left( 'p', context[7], context[8] );
    if( ! context[10] )
      continue;
    if( ! refalrts::empty_seq( context[7], context[8] ) )
      continue;
    // closed e.eX#1 as range 2
    //DEBUG: e.eX#1: 2

    refalrts::reset_allocator();
    //TRASH: {REMOVED TILE} </0 & Mu/4 (/5 'U'/9 {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ HalfReuse: </10 HalfReuse: & Up/6 AsIs: e.eX#1/2 AsIs: >/1 ]] }
    refalrts::reinit_open_call( context[10] );
    refalrts::reinit_name( context[6], ref_Up.ref.function );
    refalrts::push_stack( context[1] );
    refalrts::push_stack( context[10] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[10];
    refalrts::splice_to_freelist_open( trash_prev, res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence();

  do {
    // # Ev-met e.idx
    // </0 & Mu/4 # Ev-met/5 e.eX#1/2 >/1
    if( ! refalrts::ident_term(  ident_Evm_met, context[5] ) )
      continue;
    // closed e.eX#1 as range 2
    //DEBUG: e.eX#1: 2

    refalrts::reset_allocator();
    //TRASH: {REMOVED TILE} </0 {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ HalfReuse: </4 HalfReuse: & Ev-met/5 AsIs: e.eX#1/2 AsIs: >/1 ]] }
    refalrts::reinit_open_call( context[4] );
    refalrts::reinit_name( context[5], ref_Evm_met.ref.function );
    refalrts::push_stack( context[1] );
    refalrts::push_stack( context[4] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[4];
    refalrts::splice_to_freelist_open( trash_prev, res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence();

  do {
    // ( 'Ev-met' ) e.idx
    // </0 & Mu/4 (/5 'E'/9 'v'/10 '-'/11 'm'/12 'e'/13 't'/14 )/6 e.eX#1/2 >/1
    context[7] = 0;
    context[8] = 0;
    if( ! refalrts::brackets_term( context[7], context[8], context[5] ) )
      continue;
    context[9] = refalrts::char_left( 'E', context[7], context[8] );
    if( ! context[9] )
      continue;
    context[10] = refalrts::char_left( 'v', context[7], context[8] );
    if( ! context[10] )
      continue;
    context[11] = refalrts::char_left( '-', context[7], context[8] );
    if( ! context[11] )
      continue;
    context[12] = refalrts::char_left( 'm', context[7], context[8] );
    if( ! context[12] )
      continue;
    context[13] = refalrts::char_left( 'e', context[7], context[8] );
    if( ! context[13] )
      continue;
    context[14] = refalrts::char_left( 't', context[7], context[8] );
    if( ! context[14] )
      continue;
    if( ! refalrts::empty_seq( context[7], context[8] ) )
      continue;
    // closed e.eX#1 as range 2
    //DEBUG: e.eX#1: 2

    refalrts::reset_allocator();
    //TRASH: {REMOVED TILE} </0 & Mu/4 (/5 'E'/9 'v'/10 '-'/11 'm'/12 'e'/13 {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ HalfReuse: </14 HalfReuse: & Ev-met/6 AsIs: e.eX#1/2 AsIs: >/1 ]] }
    refalrts::reinit_open_call( context[14] );
    refalrts::reinit_name( context[6], ref_Evm_met.ref.function );
    refalrts::push_stack( context[1] );
    refalrts::push_stack( context[14] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[14];
    refalrts::splice_to_freelist_open( trash_prev, res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence();

  do {
    // # Residue e.idx
    // </0 & Mu/4 # Residue/5 e.eX#1/2 >/1
    if( ! refalrts::ident_term(  ident_Residue, context[5] ) )
      continue;
    // closed e.eX#1 as range 2
    //DEBUG: e.eX#1: 2

    refalrts::reset_allocator();
    //TRASH: {REMOVED TILE} </0 {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ HalfReuse: </4 HalfReuse: & Residue/5 AsIs: e.eX#1/2 AsIs: >/1 ]] }
    refalrts::reinit_open_call( context[4] );
    refalrts::reinit_name( context[5], ref_Residue.ref.function );
    refalrts::push_stack( context[1] );
    refalrts::push_stack( context[4] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[4];
    refalrts::splice_to_freelist_open( trash_prev, res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence();

  do {
    // ( 'Residue' ) e.idx
    // </0 & Mu/4 (/5 'R'/9 'e'/10 's'/11 'i'/12 'd'/13 'u'/14 'e'/15 )/6 e.eX#1/2 >/1
    context[7] = 0;
    context[8] = 0;
    if( ! refalrts::brackets_term( context[7], context[8], context[5] ) )
      continue;
    context[9] = refalrts::char_left( 'R', context[7], context[8] );
    if( ! context[9] )
      continue;
    context[10] = refalrts::char_left( 'e', context[7], context[8] );
    if( ! context[10] )
      continue;
    context[11] = refalrts::char_left( 's', context[7], context[8] );
    if( ! context[11] )
      continue;
    context[12] = refalrts::char_left( 'i', context[7], context[8] );
    if( ! context[12] )
      continue;
    context[13] = refalrts::char_left( 'd', context[7], context[8] );
    if( ! context[13] )
      continue;
    context[14] = refalrts::char_left( 'u', context[7], context[8] );
    if( ! context[14] )
      continue;
    context[15] = refalrts::char_left( 'e', context[7], context[8] );
    if( ! context[15] )
      continue;
    if( ! refalrts::empty_seq( context[7], context[8] ) )
      continue;
    // closed e.eX#1 as range 2
    //DEBUG: e.eX#1: 2

    refalrts::reset_allocator();
    //TRASH: {REMOVED TILE} </0 & Mu/4 (/5 'R'/9 'e'/10 's'/11 'i'/12 'd'/13 'u'/14 {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ HalfReuse: </15 HalfReuse: & Residue/6 AsIs: e.eX#1/2 AsIs: >/1 ]] }
    refalrts::reinit_open_call( context[15] );
    refalrts::reinit_name( context[6], ref_Residue.ref.function );
    refalrts::push_stack( context[1] );
    refalrts::push_stack( context[15] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[15];
    refalrts::splice_to_freelist_open( trash_prev, res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence();

  do {
    // # GetEnv e.idx
    // </0 & Mu/4 # GetEnv/5 e.eX#1/2 >/1
    if( ! refalrts::ident_term(  ident_GetEnv, context[5] ) )
      continue;
    // closed e.eX#1 as range 2
    //DEBUG: e.eX#1: 2

    refalrts::reset_allocator();
    //TRASH: {REMOVED TILE} </0 {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ HalfReuse: </4 HalfReuse: & GetEnv/5 AsIs: e.eX#1/2 AsIs: >/1 ]] }
    refalrts::reinit_open_call( context[4] );
    refalrts::reinit_name( context[5], ref_GetEnv.ref.function );
    refalrts::push_stack( context[1] );
    refalrts::push_stack( context[4] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[4];
    refalrts::splice_to_freelist_open( trash_prev, res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence();

  do {
    // ( 'GetEnv' ) e.idx
    // </0 & Mu/4 (/5 'G'/9 'e'/10 't'/11 'E'/12 'n'/13 'v'/14 )/6 e.eX#1/2 >/1
    context[7] = 0;
    context[8] = 0;
    if( ! refalrts::brackets_term( context[7], context[8], context[5] ) )
      continue;
    context[9] = refalrts::char_left( 'G', context[7], context[8] );
    if( ! context[9] )
      continue;
    context[10] = refalrts::char_left( 'e', context[7], context[8] );
    if( ! context[10] )
      continue;
    context[11] = refalrts::char_left( 't', context[7], context[8] );
    if( ! context[11] )
      continue;
    context[12] = refalrts::char_left( 'E', context[7], context[8] );
    if( ! context[12] )
      continue;
    context[13] = refalrts::char_left( 'n', context[7], context[8] );
    if( ! context[13] )
      continue;
    context[14] = refalrts::char_left( 'v', context[7], context[8] );
    if( ! context[14] )
      continue;
    if( ! refalrts::empty_seq( context[7], context[8] ) )
      continue;
    // closed e.eX#1 as range 2
    //DEBUG: e.eX#1: 2

    refalrts::reset_allocator();
    //TRASH: {REMOVED TILE} </0 & Mu/4 (/5 'G'/9 'e'/10 't'/11 'E'/12 'n'/13 {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ HalfReuse: </14 HalfReuse: & GetEnv/6 AsIs: e.eX#1/2 AsIs: >/1 ]] }
    refalrts::reinit_open_call( context[14] );
    refalrts::reinit_name( context[6], ref_GetEnv.ref.function );
    refalrts::push_stack( context[1] );
    refalrts::push_stack( context[14] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[14];
    refalrts::splice_to_freelist_open( trash_prev, res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence();

  do {
    // # System e.idx
    // </0 & Mu/4 # System/5 e.eX#1/2 >/1
    if( ! refalrts::ident_term(  ident_System, context[5] ) )
      continue;
    // closed e.eX#1 as range 2
    //DEBUG: e.eX#1: 2

    refalrts::reset_allocator();
    //TRASH: {REMOVED TILE} </0 {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ HalfReuse: </4 HalfReuse: & System/5 AsIs: e.eX#1/2 AsIs: >/1 ]] }
    refalrts::reinit_open_call( context[4] );
    refalrts::reinit_name( context[5], ref_System.ref.function );
    refalrts::push_stack( context[1] );
    refalrts::push_stack( context[4] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[4];
    refalrts::splice_to_freelist_open( trash_prev, res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence();

  do {
    // ( 'System' ) e.idx
    // </0 & Mu/4 (/5 'S'/9 'y'/10 's'/11 't'/12 'e'/13 'm'/14 )/6 e.eX#1/2 >/1
    context[7] = 0;
    context[8] = 0;
    if( ! refalrts::brackets_term( context[7], context[8], context[5] ) )
      continue;
    context[9] = refalrts::char_left( 'S', context[7], context[8] );
    if( ! context[9] )
      continue;
    context[10] = refalrts::char_left( 'y', context[7], context[8] );
    if( ! context[10] )
      continue;
    context[11] = refalrts::char_left( 's', context[7], context[8] );
    if( ! context[11] )
      continue;
    context[12] = refalrts::char_left( 't', context[7], context[8] );
    if( ! context[12] )
      continue;
    context[13] = refalrts::char_left( 'e', context[7], context[8] );
    if( ! context[13] )
      continue;
    context[14] = refalrts::char_left( 'm', context[7], context[8] );
    if( ! context[14] )
      continue;
    if( ! refalrts::empty_seq( context[7], context[8] ) )
      continue;
    // closed e.eX#1 as range 2
    //DEBUG: e.eX#1: 2

    refalrts::reset_allocator();
    //TRASH: {REMOVED TILE} </0 & Mu/4 (/5 'S'/9 'y'/10 's'/11 't'/12 'e'/13 {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ HalfReuse: </14 HalfReuse: & System/6 AsIs: e.eX#1/2 AsIs: >/1 ]] }
    refalrts::reinit_open_call( context[14] );
    refalrts::reinit_name( context[6], ref_System.ref.function );
    refalrts::push_stack( context[1] );
    refalrts::push_stack( context[14] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[14];
    refalrts::splice_to_freelist_open( trash_prev, res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence();

  do {
    // # Exit e.idx
    // </0 & Mu/4 # Exit/5 e.eX#1/2 >/1
    if( ! refalrts::ident_term(  ident_Exit, context[5] ) )
      continue;
    // closed e.eX#1 as range 2
    //DEBUG: e.eX#1: 2

    refalrts::reset_allocator();
    //TRASH: {REMOVED TILE} </0 {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ HalfReuse: </4 HalfReuse: & Exit/5 AsIs: e.eX#1/2 AsIs: >/1 ]] }
    refalrts::reinit_open_call( context[4] );
    refalrts::reinit_name( context[5], ref_Exit.ref.function );
    refalrts::push_stack( context[1] );
    refalrts::push_stack( context[4] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[4];
    refalrts::splice_to_freelist_open( trash_prev, res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence();

  do {
    // ( 'Exit' ) e.idx
    // </0 & Mu/4 (/5 'E'/9 'x'/10 'i'/11 't'/12 )/6 e.eX#1/2 >/1
    context[7] = 0;
    context[8] = 0;
    if( ! refalrts::brackets_term( context[7], context[8], context[5] ) )
      continue;
    context[9] = refalrts::char_left( 'E', context[7], context[8] );
    if( ! context[9] )
      continue;
    context[10] = refalrts::char_left( 'x', context[7], context[8] );
    if( ! context[10] )
      continue;
    context[11] = refalrts::char_left( 'i', context[7], context[8] );
    if( ! context[11] )
      continue;
    context[12] = refalrts::char_left( 't', context[7], context[8] );
    if( ! context[12] )
      continue;
    if( ! refalrts::empty_seq( context[7], context[8] ) )
      continue;
    // closed e.eX#1 as range 2
    //DEBUG: e.eX#1: 2

    refalrts::reset_allocator();
    //TRASH: {REMOVED TILE} </0 & Mu/4 (/5 'E'/9 'x'/10 'i'/11 {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ HalfReuse: </12 HalfReuse: & Exit/6 AsIs: e.eX#1/2 AsIs: >/1 ]] }
    refalrts::reinit_open_call( context[12] );
    refalrts::reinit_name( context[6], ref_Exit.ref.function );
    refalrts::push_stack( context[1] );
    refalrts::push_stack( context[12] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[12];
    refalrts::splice_to_freelist_open( trash_prev, res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence();

  do {
    // # Close e.idx
    // </0 & Mu/4 # Close/5 e.eX#1/2 >/1
    if( ! refalrts::ident_term(  ident_Close, context[5] ) )
      continue;
    // closed e.eX#1 as range 2
    //DEBUG: e.eX#1: 2

    refalrts::reset_allocator();
    //TRASH: {REMOVED TILE} </0 {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ HalfReuse: </4 HalfReuse: & Close/5 AsIs: e.eX#1/2 AsIs: >/1 ]] }
    refalrts::reinit_open_call( context[4] );
    refalrts::reinit_name( context[5], ref_Close.ref.function );
    refalrts::push_stack( context[1] );
    refalrts::push_stack( context[4] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[4];
    refalrts::splice_to_freelist_open( trash_prev, res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence();

  do {
    // ( 'Close' ) e.idx
    // </0 & Mu/4 (/5 'C'/9 'l'/10 'o'/11 's'/12 'e'/13 )/6 e.eX#1/2 >/1
    context[7] = 0;
    context[8] = 0;
    if( ! refalrts::brackets_term( context[7], context[8], context[5] ) )
      continue;
    context[9] = refalrts::char_left( 'C', context[7], context[8] );
    if( ! context[9] )
      continue;
    context[10] = refalrts::char_left( 'l', context[7], context[8] );
    if( ! context[10] )
      continue;
    context[11] = refalrts::char_left( 'o', context[7], context[8] );
    if( ! context[11] )
      continue;
    context[12] = refalrts::char_left( 's', context[7], context[8] );
    if( ! context[12] )
      continue;
    context[13] = refalrts::char_left( 'e', context[7], context[8] );
    if( ! context[13] )
      continue;
    if( ! refalrts::empty_seq( context[7], context[8] ) )
      continue;
    // closed e.eX#1 as range 2
    //DEBUG: e.eX#1: 2

    refalrts::reset_allocator();
    //TRASH: {REMOVED TILE} </0 & Mu/4 (/5 'C'/9 'l'/10 'o'/11 's'/12 {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ HalfReuse: </13 HalfReuse: & Close/6 AsIs: e.eX#1/2 AsIs: >/1 ]] }
    refalrts::reinit_open_call( context[13] );
    refalrts::reinit_name( context[6], ref_Close.ref.function );
    refalrts::push_stack( context[1] );
    refalrts::push_stack( context[13] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[13];
    refalrts::splice_to_freelist_open( trash_prev, res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence();

  do {
    // # ExistFile e.idx
    // </0 & Mu/4 # ExistFile/5 e.eX#1/2 >/1
    if( ! refalrts::ident_term(  ident_ExistFile, context[5] ) )
      continue;
    // closed e.eX#1 as range 2
    //DEBUG: e.eX#1: 2

    refalrts::reset_allocator();
    //TRASH: {REMOVED TILE} </0 {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ HalfReuse: </4 HalfReuse: & ExistFile/5 AsIs: e.eX#1/2 AsIs: >/1 ]] }
    refalrts::reinit_open_call( context[4] );
    refalrts::reinit_name( context[5], ref_ExistFile.ref.function );
    refalrts::push_stack( context[1] );
    refalrts::push_stack( context[4] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[4];
    refalrts::splice_to_freelist_open( trash_prev, res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence();

  do {
    // ( 'ExistFile' ) e.idx
    // </0 & Mu/4 (/5 'E'/9 'x'/10 'i'/11 's'/12 't'/13 'F'/14 'i'/15 'l'/16 'e'/17 )/6 e.eX#1/2 >/1
    context[7] = 0;
    context[8] = 0;
    if( ! refalrts::brackets_term( context[7], context[8], context[5] ) )
      continue;
    context[9] = refalrts::char_left( 'E', context[7], context[8] );
    if( ! context[9] )
      continue;
    context[10] = refalrts::char_left( 'x', context[7], context[8] );
    if( ! context[10] )
      continue;
    context[11] = refalrts::char_left( 'i', context[7], context[8] );
    if( ! context[11] )
      continue;
    context[12] = refalrts::char_left( 's', context[7], context[8] );
    if( ! context[12] )
      continue;
    context[13] = refalrts::char_left( 't', context[7], context[8] );
    if( ! context[13] )
      continue;
    context[14] = refalrts::char_left( 'F', context[7], context[8] );
    if( ! context[14] )
      continue;
    context[15] = refalrts::char_left( 'i', context[7], context[8] );
    if( ! context[15] )
      continue;
    context[16] = refalrts::char_left( 'l', context[7], context[8] );
    if( ! context[16] )
      continue;
    context[17] = refalrts::char_left( 'e', context[7], context[8] );
    if( ! context[17] )
      continue;
    if( ! refalrts::empty_seq( context[7], context[8] ) )
      continue;
    // closed e.eX#1 as range 2
    //DEBUG: e.eX#1: 2

    refalrts::reset_allocator();
    //TRASH: {REMOVED TILE} </0 & Mu/4 (/5 'E'/9 'x'/10 'i'/11 's'/12 't'/13 'F'/14 'i'/15 'l'/16 {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ HalfReuse: </17 HalfReuse: & ExistFile/6 AsIs: e.eX#1/2 AsIs: >/1 ]] }
    refalrts::reinit_open_call( context[17] );
    refalrts::reinit_name( context[6], ref_ExistFile.ref.function );
    refalrts::push_stack( context[1] );
    refalrts::push_stack( context[17] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[17];
    refalrts::splice_to_freelist_open( trash_prev, res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence();

  do {
    // # GetCurrentDirectory e.idx
    // </0 & Mu/4 # GetCurrentDirectory/5 e.eX#1/2 >/1
    if( ! refalrts::ident_term(  ident_GetCurrentDirectory, context[5] ) )
      continue;
    // closed e.eX#1 as range 2
    //DEBUG: e.eX#1: 2

    refalrts::reset_allocator();
    //TRASH: {REMOVED TILE} </0 {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ HalfReuse: </4 HalfReuse: & GetCurrentDirectory/5 AsIs: e.eX#1/2 AsIs: >/1 ]] }
    refalrts::reinit_open_call( context[4] );
    refalrts::reinit_name( context[5], ref_GetCurrentDirectory.ref.function );
    refalrts::push_stack( context[1] );
    refalrts::push_stack( context[4] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[4];
    refalrts::splice_to_freelist_open( trash_prev, res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence();

  do {
    // ( 'GetCurrentDirectory' ) e.idx
    // </0 & Mu/4 (/5 'G'/9 'e'/10 't'/11 'C'/12 'u'/13 'r'/14 'r'/15 'e'/16 'n'/17 't'/18 'D'/19 'i'/20 'r'/21 'e'/22 'c'/23 't'/24 'o'/25 'r'/26 'y'/27 )/6 e.eX#1/2 >/1
    context[7] = 0;
    context[8] = 0;
    if( ! refalrts::brackets_term( context[7], context[8], context[5] ) )
      continue;
    context[9] = refalrts::char_left( 'G', context[7], context[8] );
    if( ! context[9] )
      continue;
    context[10] = refalrts::char_left( 'e', context[7], context[8] );
    if( ! context[10] )
      continue;
    context[11] = refalrts::char_left( 't', context[7], context[8] );
    if( ! context[11] )
      continue;
    context[12] = refalrts::char_left( 'C', context[7], context[8] );
    if( ! context[12] )
      continue;
    context[13] = refalrts::char_left( 'u', context[7], context[8] );
    if( ! context[13] )
      continue;
    context[14] = refalrts::char_left( 'r', context[7], context[8] );
    if( ! context[14] )
      continue;
    context[15] = refalrts::char_left( 'r', context[7], context[8] );
    if( ! context[15] )
      continue;
    context[16] = refalrts::char_left( 'e', context[7], context[8] );
    if( ! context[16] )
      continue;
    context[17] = refalrts::char_left( 'n', context[7], context[8] );
    if( ! context[17] )
      continue;
    context[18] = refalrts::char_left( 't', context[7], context[8] );
    if( ! context[18] )
      continue;
    context[19] = refalrts::char_left( 'D', context[7], context[8] );
    if( ! context[19] )
      continue;
    context[20] = refalrts::char_left( 'i', context[7], context[8] );
    if( ! context[20] )
      continue;
    context[21] = refalrts::char_left( 'r', context[7], context[8] );
    if( ! context[21] )
      continue;
    context[22] = refalrts::char_left( 'e', context[7], context[8] );
    if( ! context[22] )
      continue;
    context[23] = refalrts::char_left( 'c', context[7], context[8] );
    if( ! context[23] )
      continue;
    context[24] = refalrts::char_left( 't', context[7], context[8] );
    if( ! context[24] )
      continue;
    context[25] = refalrts::char_left( 'o', context[7], context[8] );
    if( ! context[25] )
      continue;
    context[26] = refalrts::char_left( 'r', context[7], context[8] );
    if( ! context[26] )
      continue;
    context[27] = refalrts::char_left( 'y', context[7], context[8] );
    if( ! context[27] )
      continue;
    if( ! refalrts::empty_seq( context[7], context[8] ) )
      continue;
    // closed e.eX#1 as range 2
    //DEBUG: e.eX#1: 2

    refalrts::reset_allocator();
    //TRASH: {REMOVED TILE} </0 & Mu/4 (/5 'G'/9 'e'/10 't'/11 'C'/12 'u'/13 'r'/14 'r'/15 'e'/16 'n'/17 't'/18 'D'/19 'i'/20 'r'/21 'e'/22 'c'/23 't'/24 'o'/25 'r'/26 {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ HalfReuse: </27 HalfReuse: & GetCurrentDirectory/6 AsIs: e.eX#1/2 AsIs: >/1 ]] }
    refalrts::reinit_open_call( context[27] );
    refalrts::reinit_name( context[6], ref_GetCurrentDirectory.ref.function );
    refalrts::push_stack( context[1] );
    refalrts::push_stack( context[27] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[27];
    refalrts::splice_to_freelist_open( trash_prev, res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence();

  do {
    // # RemoveFile e.idx
    // </0 & Mu/4 # RemoveFile/5 e.eX#1/2 >/1
    if( ! refalrts::ident_term(  ident_RemoveFile, context[5] ) )
      continue;
    // closed e.eX#1 as range 2
    //DEBUG: e.eX#1: 2

    refalrts::reset_allocator();
    //TRASH: {REMOVED TILE} </0 {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ HalfReuse: </4 HalfReuse: & RemoveFile/5 AsIs: e.eX#1/2 AsIs: >/1 ]] }
    refalrts::reinit_open_call( context[4] );
    refalrts::reinit_name( context[5], ref_RemoveFile.ref.function );
    refalrts::push_stack( context[1] );
    refalrts::push_stack( context[4] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[4];
    refalrts::splice_to_freelist_open( trash_prev, res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence();

  do {
    // ( 'RemoveFile' ) e.idx
    // </0 & Mu/4 (/5 'R'/9 'e'/10 'm'/11 'o'/12 'v'/13 'e'/14 'F'/15 'i'/16 'l'/17 'e'/18 )/6 e.eX#1/2 >/1
    context[7] = 0;
    context[8] = 0;
    if( ! refalrts::brackets_term( context[7], context[8], context[5] ) )
      continue;
    context[9] = refalrts::char_left( 'R', context[7], context[8] );
    if( ! context[9] )
      continue;
    context[10] = refalrts::char_left( 'e', context[7], context[8] );
    if( ! context[10] )
      continue;
    context[11] = refalrts::char_left( 'm', context[7], context[8] );
    if( ! context[11] )
      continue;
    context[12] = refalrts::char_left( 'o', context[7], context[8] );
    if( ! context[12] )
      continue;
    context[13] = refalrts::char_left( 'v', context[7], context[8] );
    if( ! context[13] )
      continue;
    context[14] = refalrts::char_left( 'e', context[7], context[8] );
    if( ! context[14] )
      continue;
    context[15] = refalrts::char_left( 'F', context[7], context[8] );
    if( ! context[15] )
      continue;
    context[16] = refalrts::char_left( 'i', context[7], context[8] );
    if( ! context[16] )
      continue;
    context[17] = refalrts::char_left( 'l', context[7], context[8] );
    if( ! context[17] )
      continue;
    context[18] = refalrts::char_left( 'e', context[7], context[8] );
    if( ! context[18] )
      continue;
    if( ! refalrts::empty_seq( context[7], context[8] ) )
      continue;
    // closed e.eX#1 as range 2
    //DEBUG: e.eX#1: 2

    refalrts::reset_allocator();
    //TRASH: {REMOVED TILE} </0 & Mu/4 (/5 'R'/9 'e'/10 'm'/11 'o'/12 'v'/13 'e'/14 'F'/15 'i'/16 'l'/17 {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ HalfReuse: </18 HalfReuse: & RemoveFile/6 AsIs: e.eX#1/2 AsIs: >/1 ]] }
    refalrts::reinit_open_call( context[18] );
    refalrts::reinit_name( context[6], ref_RemoveFile.ref.function );
    refalrts::push_stack( context[1] );
    refalrts::push_stack( context[18] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[18];
    refalrts::splice_to_freelist_open( trash_prev, res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence();

  do {
    // # Implode_Ext e.idx
    // </0 & Mu/4 # Implode_Ext/5 e.eX#1/2 >/1
    if( ! refalrts::ident_term(  ident_Implodeu_Ext, context[5] ) )
      continue;
    // closed e.eX#1 as range 2
    //DEBUG: e.eX#1: 2

    refalrts::reset_allocator();
    //TRASH: {REMOVED TILE} </0 {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ HalfReuse: </4 HalfReuse: & Implode_Ext/5 AsIs: e.eX#1/2 AsIs: >/1 ]] }
    refalrts::reinit_open_call( context[4] );
    refalrts::reinit_name( context[5], ref_Implodeu_Ext.ref.function );
    refalrts::push_stack( context[1] );
    refalrts::push_stack( context[4] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[4];
    refalrts::splice_to_freelist_open( trash_prev, res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence();

  do {
    // ( 'Implode_Ext' ) e.idx
    // </0 & Mu/4 (/5 'I'/9 'm'/10 'p'/11 'l'/12 'o'/13 'd'/14 'e'/15 '_'/16 'E'/17 'x'/18 't'/19 )/6 e.eX#1/2 >/1
    context[7] = 0;
    context[8] = 0;
    if( ! refalrts::brackets_term( context[7], context[8], context[5] ) )
      continue;
    context[9] = refalrts::char_left( 'I', context[7], context[8] );
    if( ! context[9] )
      continue;
    context[10] = refalrts::char_left( 'm', context[7], context[8] );
    if( ! context[10] )
      continue;
    context[11] = refalrts::char_left( 'p', context[7], context[8] );
    if( ! context[11] )
      continue;
    context[12] = refalrts::char_left( 'l', context[7], context[8] );
    if( ! context[12] )
      continue;
    context[13] = refalrts::char_left( 'o', context[7], context[8] );
    if( ! context[13] )
      continue;
    context[14] = refalrts::char_left( 'd', context[7], context[8] );
    if( ! context[14] )
      continue;
    context[15] = refalrts::char_left( 'e', context[7], context[8] );
    if( ! context[15] )
      continue;
    context[16] = refalrts::char_left( '_', context[7], context[8] );
    if( ! context[16] )
      continue;
    context[17] = refalrts::char_left( 'E', context[7], context[8] );
    if( ! context[17] )
      continue;
    context[18] = refalrts::char_left( 'x', context[7], context[8] );
    if( ! context[18] )
      continue;
    context[19] = refalrts::char_left( 't', context[7], context[8] );
    if( ! context[19] )
      continue;
    if( ! refalrts::empty_seq( context[7], context[8] ) )
      continue;
    // closed e.eX#1 as range 2
    //DEBUG: e.eX#1: 2

    refalrts::reset_allocator();
    //TRASH: {REMOVED TILE} </0 & Mu/4 (/5 'I'/9 'm'/10 'p'/11 'l'/12 'o'/13 'd'/14 'e'/15 '_'/16 'E'/17 'x'/18 {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ HalfReuse: </19 HalfReuse: & Implode_Ext/6 AsIs: e.eX#1/2 AsIs: >/1 ]] }
    refalrts::reinit_open_call( context[19] );
    refalrts::reinit_name( context[6], ref_Implodeu_Ext.ref.function );
    refalrts::push_stack( context[1] );
    refalrts::push_stack( context[19] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[19];
    refalrts::splice_to_freelist_open( trash_prev, res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence();

  do {
    // # Explode_Ext e.idx
    // </0 & Mu/4 # Explode_Ext/5 e.eX#1/2 >/1
    if( ! refalrts::ident_term(  ident_Explodeu_Ext, context[5] ) )
      continue;
    // closed e.eX#1 as range 2
    //DEBUG: e.eX#1: 2

    refalrts::reset_allocator();
    //TRASH: {REMOVED TILE} </0 {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ HalfReuse: </4 HalfReuse: & Explode_Ext/5 AsIs: e.eX#1/2 AsIs: >/1 ]] }
    refalrts::reinit_open_call( context[4] );
    refalrts::reinit_name( context[5], ref_Explodeu_Ext.ref.function );
    refalrts::push_stack( context[1] );
    refalrts::push_stack( context[4] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[4];
    refalrts::splice_to_freelist_open( trash_prev, res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence();

  do {
    // ( 'Explode_Ext' ) e.idx
    // </0 & Mu/4 (/5 'E'/9 'x'/10 'p'/11 'l'/12 'o'/13 'd'/14 'e'/15 '_'/16 'E'/17 'x'/18 't'/19 )/6 e.eX#1/2 >/1
    context[7] = 0;
    context[8] = 0;
    if( ! refalrts::brackets_term( context[7], context[8], context[5] ) )
      continue;
    context[9] = refalrts::char_left( 'E', context[7], context[8] );
    if( ! context[9] )
      continue;
    context[10] = refalrts::char_left( 'x', context[7], context[8] );
    if( ! context[10] )
      continue;
    context[11] = refalrts::char_left( 'p', context[7], context[8] );
    if( ! context[11] )
      continue;
    context[12] = refalrts::char_left( 'l', context[7], context[8] );
    if( ! context[12] )
      continue;
    context[13] = refalrts::char_left( 'o', context[7], context[8] );
    if( ! context[13] )
      continue;
    context[14] = refalrts::char_left( 'd', context[7], context[8] );
    if( ! context[14] )
      continue;
    context[15] = refalrts::char_left( 'e', context[7], context[8] );
    if( ! context[15] )
      continue;
    context[16] = refalrts::char_left( '_', context[7], context[8] );
    if( ! context[16] )
      continue;
    context[17] = refalrts::char_left( 'E', context[7], context[8] );
    if( ! context[17] )
      continue;
    context[18] = refalrts::char_left( 'x', context[7], context[8] );
    if( ! context[18] )
      continue;
    context[19] = refalrts::char_left( 't', context[7], context[8] );
    if( ! context[19] )
      continue;
    if( ! refalrts::empty_seq( context[7], context[8] ) )
      continue;
    // closed e.eX#1 as range 2
    //DEBUG: e.eX#1: 2

    refalrts::reset_allocator();
    //TRASH: {REMOVED TILE} </0 & Mu/4 (/5 'E'/9 'x'/10 'p'/11 'l'/12 'o'/13 'd'/14 'e'/15 '_'/16 'E'/17 'x'/18 {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ HalfReuse: </19 HalfReuse: & Explode_Ext/6 AsIs: e.eX#1/2 AsIs: >/1 ]] }
    refalrts::reinit_open_call( context[19] );
    refalrts::reinit_name( context[6], ref_Explodeu_Ext.ref.function );
    refalrts::push_stack( context[1] );
    refalrts::push_stack( context[19] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[19];
    refalrts::splice_to_freelist_open( trash_prev, res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence();

  do {
    // # TimeElapsed e.idx
    // </0 & Mu/4 # TimeElapsed/5 e.eX#1/2 >/1
    if( ! refalrts::ident_term(  ident_TimeElapsed, context[5] ) )
      continue;
    // closed e.eX#1 as range 2
    //DEBUG: e.eX#1: 2

    refalrts::reset_allocator();
    //TRASH: {REMOVED TILE} </0 {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ HalfReuse: </4 HalfReuse: & TimeElapsed/5 AsIs: e.eX#1/2 AsIs: >/1 ]] }
    refalrts::reinit_open_call( context[4] );
    refalrts::reinit_name( context[5], ref_TimeElapsed.ref.function );
    refalrts::push_stack( context[1] );
    refalrts::push_stack( context[4] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[4];
    refalrts::splice_to_freelist_open( trash_prev, res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence();

  do {
    // ( 'TimeElapsed' ) e.idx
    // </0 & Mu/4 (/5 'T'/9 'i'/10 'm'/11 'e'/12 'E'/13 'l'/14 'a'/15 'p'/16 's'/17 'e'/18 'd'/19 )/6 e.eX#1/2 >/1
    context[7] = 0;
    context[8] = 0;
    if( ! refalrts::brackets_term( context[7], context[8], context[5] ) )
      continue;
    context[9] = refalrts::char_left( 'T', context[7], context[8] );
    if( ! context[9] )
      continue;
    context[10] = refalrts::char_left( 'i', context[7], context[8] );
    if( ! context[10] )
      continue;
    context[11] = refalrts::char_left( 'm', context[7], context[8] );
    if( ! context[11] )
      continue;
    context[12] = refalrts::char_left( 'e', context[7], context[8] );
    if( ! context[12] )
      continue;
    context[13] = refalrts::char_left( 'E', context[7], context[8] );
    if( ! context[13] )
      continue;
    context[14] = refalrts::char_left( 'l', context[7], context[8] );
    if( ! context[14] )
      continue;
    context[15] = refalrts::char_left( 'a', context[7], context[8] );
    if( ! context[15] )
      continue;
    context[16] = refalrts::char_left( 'p', context[7], context[8] );
    if( ! context[16] )
      continue;
    context[17] = refalrts::char_left( 's', context[7], context[8] );
    if( ! context[17] )
      continue;
    context[18] = refalrts::char_left( 'e', context[7], context[8] );
    if( ! context[18] )
      continue;
    context[19] = refalrts::char_left( 'd', context[7], context[8] );
    if( ! context[19] )
      continue;
    if( ! refalrts::empty_seq( context[7], context[8] ) )
      continue;
    // closed e.eX#1 as range 2
    //DEBUG: e.eX#1: 2

    refalrts::reset_allocator();
    //TRASH: {REMOVED TILE} </0 & Mu/4 (/5 'T'/9 'i'/10 'm'/11 'e'/12 'E'/13 'l'/14 'a'/15 'p'/16 's'/17 'e'/18 {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ HalfReuse: </19 HalfReuse: & TimeElapsed/6 AsIs: e.eX#1/2 AsIs: >/1 ]] }
    refalrts::reinit_open_call( context[19] );
    refalrts::reinit_name( context[6], ref_TimeElapsed.ref.function );
    refalrts::push_stack( context[1] );
    refalrts::push_stack( context[19] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[19];
    refalrts::splice_to_freelist_open( trash_prev, res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence();

  do {
    // # Compare e.idx
    // </0 & Mu/4 # Compare/5 e.eX#1/2 >/1
    if( ! refalrts::ident_term(  ident_Compare, context[5] ) )
      continue;
    // closed e.eX#1 as range 2
    //DEBUG: e.eX#1: 2

    refalrts::reset_allocator();
    //TRASH: {REMOVED TILE} </0 {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ HalfReuse: </4 HalfReuse: & Compare/5 AsIs: e.eX#1/2 AsIs: >/1 ]] }
    refalrts::reinit_open_call( context[4] );
    refalrts::reinit_name( context[5], ref_Compare.ref.function );
    refalrts::push_stack( context[1] );
    refalrts::push_stack( context[4] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[4];
    refalrts::splice_to_freelist_open( trash_prev, res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence();

  do {
    // ( 'Compare' ) e.idx
    // </0 & Mu/4 (/5 'C'/9 'o'/10 'm'/11 'p'/12 'a'/13 'r'/14 'e'/15 )/6 e.eX#1/2 >/1
    context[7] = 0;
    context[8] = 0;
    if( ! refalrts::brackets_term( context[7], context[8], context[5] ) )
      continue;
    context[9] = refalrts::char_left( 'C', context[7], context[8] );
    if( ! context[9] )
      continue;
    context[10] = refalrts::char_left( 'o', context[7], context[8] );
    if( ! context[10] )
      continue;
    context[11] = refalrts::char_left( 'm', context[7], context[8] );
    if( ! context[11] )
      continue;
    context[12] = refalrts::char_left( 'p', context[7], context[8] );
    if( ! context[12] )
      continue;
    context[13] = refalrts::char_left( 'a', context[7], context[8] );
    if( ! context[13] )
      continue;
    context[14] = refalrts::char_left( 'r', context[7], context[8] );
    if( ! context[14] )
      continue;
    context[15] = refalrts::char_left( 'e', context[7], context[8] );
    if( ! context[15] )
      continue;
    if( ! refalrts::empty_seq( context[7], context[8] ) )
      continue;
    // closed e.eX#1 as range 2
    //DEBUG: e.eX#1: 2

    refalrts::reset_allocator();
    //TRASH: {REMOVED TILE} </0 & Mu/4 (/5 'C'/9 'o'/10 'm'/11 'p'/12 'a'/13 'r'/14 {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ HalfReuse: </15 HalfReuse: & Compare/6 AsIs: e.eX#1/2 AsIs: >/1 ]] }
    refalrts::reinit_open_call( context[15] );
    refalrts::reinit_name( context[6], ref_Compare.ref.function );
    refalrts::push_stack( context[1] );
    refalrts::push_stack( context[15] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[15];
    refalrts::splice_to_freelist_open( trash_prev, res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence();

  do {
    // # DeSysfun e.idx
    // </0 & Mu/4 # DeSysfun/5 e.eX#1/2 >/1
    if( ! refalrts::ident_term(  ident_DeSysfun, context[5] ) )
      continue;
    // closed e.eX#1 as range 2
    //DEBUG: e.eX#1: 2

    refalrts::reset_allocator();
    //TRASH: {REMOVED TILE} </0 {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ HalfReuse: </4 HalfReuse: & DeSysfun/5 AsIs: e.eX#1/2 AsIs: >/1 ]] }
    refalrts::reinit_open_call( context[4] );
    refalrts::reinit_name( context[5], ref_DeSysfun.ref.function );
    refalrts::push_stack( context[1] );
    refalrts::push_stack( context[4] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[4];
    refalrts::splice_to_freelist_open( trash_prev, res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence();

  do {
    // ( 'DeSysfun' ) e.idx
    // </0 & Mu/4 (/5 'D'/9 'e'/10 'S'/11 'y'/12 's'/13 'f'/14 'u'/15 'n'/16 )/6 e.eX#1/2 >/1
    context[7] = 0;
    context[8] = 0;
    if( ! refalrts::brackets_term( context[7], context[8], context[5] ) )
      continue;
    context[9] = refalrts::char_left( 'D', context[7], context[8] );
    if( ! context[9] )
      continue;
    context[10] = refalrts::char_left( 'e', context[7], context[8] );
    if( ! context[10] )
      continue;
    context[11] = refalrts::char_left( 'S', context[7], context[8] );
    if( ! context[11] )
      continue;
    context[12] = refalrts::char_left( 'y', context[7], context[8] );
    if( ! context[12] )
      continue;
    context[13] = refalrts::char_left( 's', context[7], context[8] );
    if( ! context[13] )
      continue;
    context[14] = refalrts::char_left( 'f', context[7], context[8] );
    if( ! context[14] )
      continue;
    context[15] = refalrts::char_left( 'u', context[7], context[8] );
    if( ! context[15] )
      continue;
    context[16] = refalrts::char_left( 'n', context[7], context[8] );
    if( ! context[16] )
      continue;
    if( ! refalrts::empty_seq( context[7], context[8] ) )
      continue;
    // closed e.eX#1 as range 2
    //DEBUG: e.eX#1: 2

    refalrts::reset_allocator();
    //TRASH: {REMOVED TILE} </0 & Mu/4 (/5 'D'/9 'e'/10 'S'/11 'y'/12 's'/13 'f'/14 'u'/15 {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ HalfReuse: </16 HalfReuse: & DeSysfun/6 AsIs: e.eX#1/2 AsIs: >/1 ]] }
    refalrts::reinit_open_call( context[16] );
    refalrts::reinit_name( context[6], ref_DeSysfun.ref.function );
    refalrts::push_stack( context[1] );
    refalrts::push_stack( context[16] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[16];
    refalrts::splice_to_freelist_open( trash_prev, res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence();

  do {
    // # XMLParse e.idx
    // </0 & Mu/4 # XMLParse/5 e.eX#1/2 >/1
    if( ! refalrts::ident_term(  ident_XMLParse, context[5] ) )
      continue;
    // closed e.eX#1 as range 2
    //DEBUG: e.eX#1: 2

    refalrts::reset_allocator();
    //TRASH: {REMOVED TILE} </0 {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ HalfReuse: </4 HalfReuse: & XMLParse/5 AsIs: e.eX#1/2 AsIs: >/1 ]] }
    refalrts::reinit_open_call( context[4] );
    refalrts::reinit_name( context[5], ref_XMLParse.ref.function );
    refalrts::push_stack( context[1] );
    refalrts::push_stack( context[4] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[4];
    refalrts::splice_to_freelist_open( trash_prev, res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence();

  do {
    // ( 'XMLParse' ) e.idx
    // </0 & Mu/4 (/5 'X'/9 'M'/10 'L'/11 'P'/12 'a'/13 'r'/14 's'/15 'e'/16 )/6 e.eX#1/2 >/1
    context[7] = 0;
    context[8] = 0;
    if( ! refalrts::brackets_term( context[7], context[8], context[5] ) )
      continue;
    context[9] = refalrts::char_left( 'X', context[7], context[8] );
    if( ! context[9] )
      continue;
    context[10] = refalrts::char_left( 'M', context[7], context[8] );
    if( ! context[10] )
      continue;
    context[11] = refalrts::char_left( 'L', context[7], context[8] );
    if( ! context[11] )
      continue;
    context[12] = refalrts::char_left( 'P', context[7], context[8] );
    if( ! context[12] )
      continue;
    context[13] = refalrts::char_left( 'a', context[7], context[8] );
    if( ! context[13] )
      continue;
    context[14] = refalrts::char_left( 'r', context[7], context[8] );
    if( ! context[14] )
      continue;
    context[15] = refalrts::char_left( 's', context[7], context[8] );
    if( ! context[15] )
      continue;
    context[16] = refalrts::char_left( 'e', context[7], context[8] );
    if( ! context[16] )
      continue;
    if( ! refalrts::empty_seq( context[7], context[8] ) )
      continue;
    // closed e.eX#1 as range 2
    //DEBUG: e.eX#1: 2

    refalrts::reset_allocator();
    //TRASH: {REMOVED TILE} </0 & Mu/4 (/5 'X'/9 'M'/10 'L'/11 'P'/12 'a'/13 'r'/14 's'/15 {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ HalfReuse: </16 HalfReuse: & XMLParse/6 AsIs: e.eX#1/2 AsIs: >/1 ]] }
    refalrts::reinit_open_call( context[16] );
    refalrts::reinit_name( context[6], ref_XMLParse.ref.function );
    refalrts::push_stack( context[1] );
    refalrts::push_stack( context[16] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[16];
    refalrts::splice_to_freelist_open( trash_prev, res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence();

  do {
    // # Random e.idx
    // </0 & Mu/4 # Random/5 e.eX#1/2 >/1
    if( ! refalrts::ident_term(  ident_Random, context[5] ) )
      continue;
    // closed e.eX#1 as range 2
    //DEBUG: e.eX#1: 2

    refalrts::reset_allocator();
    //TRASH: {REMOVED TILE} </0 {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ HalfReuse: </4 HalfReuse: & Random/5 AsIs: e.eX#1/2 AsIs: >/1 ]] }
    refalrts::reinit_open_call( context[4] );
    refalrts::reinit_name( context[5], ref_Random.ref.function );
    refalrts::push_stack( context[1] );
    refalrts::push_stack( context[4] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[4];
    refalrts::splice_to_freelist_open( trash_prev, res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence();

  do {
    // ( 'Random' ) e.idx
    // </0 & Mu/4 (/5 'R'/9 'a'/10 'n'/11 'd'/12 'o'/13 'm'/14 )/6 e.eX#1/2 >/1
    context[7] = 0;
    context[8] = 0;
    if( ! refalrts::brackets_term( context[7], context[8], context[5] ) )
      continue;
    context[9] = refalrts::char_left( 'R', context[7], context[8] );
    if( ! context[9] )
      continue;
    context[10] = refalrts::char_left( 'a', context[7], context[8] );
    if( ! context[10] )
      continue;
    context[11] = refalrts::char_left( 'n', context[7], context[8] );
    if( ! context[11] )
      continue;
    context[12] = refalrts::char_left( 'd', context[7], context[8] );
    if( ! context[12] )
      continue;
    context[13] = refalrts::char_left( 'o', context[7], context[8] );
    if( ! context[13] )
      continue;
    context[14] = refalrts::char_left( 'm', context[7], context[8] );
    if( ! context[14] )
      continue;
    if( ! refalrts::empty_seq( context[7], context[8] ) )
      continue;
    // closed e.eX#1 as range 2
    //DEBUG: e.eX#1: 2

    refalrts::reset_allocator();
    //TRASH: {REMOVED TILE} </0 & Mu/4 (/5 'R'/9 'a'/10 'n'/11 'd'/12 'o'/13 {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ HalfReuse: </14 HalfReuse: & Random/6 AsIs: e.eX#1/2 AsIs: >/1 ]] }
    refalrts::reinit_open_call( context[14] );
    refalrts::reinit_name( context[6], ref_Random.ref.function );
    refalrts::push_stack( context[1] );
    refalrts::push_stack( context[14] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[14];
    refalrts::splice_to_freelist_open( trash_prev, res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence();

  do {
    // # RandomDigit e.idx
    // </0 & Mu/4 # RandomDigit/5 e.eX#1/2 >/1
    if( ! refalrts::ident_term(  ident_RandomDigit, context[5] ) )
      continue;
    // closed e.eX#1 as range 2
    //DEBUG: e.eX#1: 2

    refalrts::reset_allocator();
    //TRASH: {REMOVED TILE} </0 {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ HalfReuse: </4 HalfReuse: & RandomDigit/5 AsIs: e.eX#1/2 AsIs: >/1 ]] }
    refalrts::reinit_open_call( context[4] );
    refalrts::reinit_name( context[5], ref_RandomDigit.ref.function );
    refalrts::push_stack( context[1] );
    refalrts::push_stack( context[4] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[4];
    refalrts::splice_to_freelist_open( trash_prev, res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence();

  do {
    // ( 'RandomDigit' ) e.idx
    // </0 & Mu/4 (/5 'R'/9 'a'/10 'n'/11 'd'/12 'o'/13 'm'/14 'D'/15 'i'/16 'g'/17 'i'/18 't'/19 )/6 e.eX#1/2 >/1
    context[7] = 0;
    context[8] = 0;
    if( ! refalrts::brackets_term( context[7], context[8], context[5] ) )
      continue;
    context[9] = refalrts::char_left( 'R', context[7], context[8] );
    if( ! context[9] )
      continue;
    context[10] = refalrts::char_left( 'a', context[7], context[8] );
    if( ! context[10] )
      continue;
    context[11] = refalrts::char_left( 'n', context[7], context[8] );
    if( ! context[11] )
      continue;
    context[12] = refalrts::char_left( 'd', context[7], context[8] );
    if( ! context[12] )
      continue;
    context[13] = refalrts::char_left( 'o', context[7], context[8] );
    if( ! context[13] )
      continue;
    context[14] = refalrts::char_left( 'm', context[7], context[8] );
    if( ! context[14] )
      continue;
    context[15] = refalrts::char_left( 'D', context[7], context[8] );
    if( ! context[15] )
      continue;
    context[16] = refalrts::char_left( 'i', context[7], context[8] );
    if( ! context[16] )
      continue;
    context[17] = refalrts::char_left( 'g', context[7], context[8] );
    if( ! context[17] )
      continue;
    context[18] = refalrts::char_left( 'i', context[7], context[8] );
    if( ! context[18] )
      continue;
    context[19] = refalrts::char_left( 't', context[7], context[8] );
    if( ! context[19] )
      continue;
    if( ! refalrts::empty_seq( context[7], context[8] ) )
      continue;
    // closed e.eX#1 as range 2
    //DEBUG: e.eX#1: 2

    refalrts::reset_allocator();
    //TRASH: {REMOVED TILE} </0 & Mu/4 (/5 'R'/9 'a'/10 'n'/11 'd'/12 'o'/13 'm'/14 'D'/15 'i'/16 'g'/17 'i'/18 {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ HalfReuse: </19 HalfReuse: & RandomDigit/6 AsIs: e.eX#1/2 AsIs: >/1 ]] }
    refalrts::reinit_open_call( context[19] );
    refalrts::reinit_name( context[6], ref_RandomDigit.ref.function );
    refalrts::push_stack( context[1] );
    refalrts::push_stack( context[19] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[19];
    refalrts::splice_to_freelist_open( trash_prev, res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence();

  do {
    // # Write e.idx
    // </0 & Mu/4 # Write/5 e.eX#1/2 >/1
    if( ! refalrts::ident_term(  ident_Write, context[5] ) )
      continue;
    // closed e.eX#1 as range 2
    //DEBUG: e.eX#1: 2

    refalrts::reset_allocator();
    //TRASH: {REMOVED TILE} </0 {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ HalfReuse: </4 HalfReuse: & Write/5 AsIs: e.eX#1/2 AsIs: >/1 ]] }
    refalrts::reinit_open_call( context[4] );
    refalrts::reinit_name( context[5], ref_Write.ref.function );
    refalrts::push_stack( context[1] );
    refalrts::push_stack( context[4] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[4];
    refalrts::splice_to_freelist_open( trash_prev, res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence();

  do {
    // ( 'Write' ) e.idx
    // </0 & Mu/4 (/5 'W'/9 'r'/10 'i'/11 't'/12 'e'/13 )/6 e.eX#1/2 >/1
    context[7] = 0;
    context[8] = 0;
    if( ! refalrts::brackets_term( context[7], context[8], context[5] ) )
      continue;
    context[9] = refalrts::char_left( 'W', context[7], context[8] );
    if( ! context[9] )
      continue;
    context[10] = refalrts::char_left( 'r', context[7], context[8] );
    if( ! context[10] )
      continue;
    context[11] = refalrts::char_left( 'i', context[7], context[8] );
    if( ! context[11] )
      continue;
    context[12] = refalrts::char_left( 't', context[7], context[8] );
    if( ! context[12] )
      continue;
    context[13] = refalrts::char_left( 'e', context[7], context[8] );
    if( ! context[13] )
      continue;
    if( ! refalrts::empty_seq( context[7], context[8] ) )
      continue;
    // closed e.eX#1 as range 2
    //DEBUG: e.eX#1: 2

    refalrts::reset_allocator();
    //TRASH: {REMOVED TILE} </0 & Mu/4 (/5 'W'/9 'r'/10 'i'/11 't'/12 {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ HalfReuse: </13 HalfReuse: & Write/6 AsIs: e.eX#1/2 AsIs: >/1 ]] }
    refalrts::reinit_open_call( context[13] );
    refalrts::reinit_name( context[6], ref_Write.ref.function );
    refalrts::push_stack( context[1] );
    refalrts::push_stack( context[13] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[13];
    refalrts::splice_to_freelist_open( trash_prev, res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence();

  do {
    // # ListOfBuiltin e.idx
    // </0 & Mu/4 # ListOfBuiltin/5 e.eX#1/2 >/1
    if( ! refalrts::ident_term(  ident_ListOfBuiltin, context[5] ) )
      continue;
    // closed e.eX#1 as range 2
    //DEBUG: e.eX#1: 2

    refalrts::reset_allocator();
    //TRASH: {REMOVED TILE} </0 {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ HalfReuse: </4 HalfReuse: & ListOfBuiltin/5 AsIs: e.eX#1/2 AsIs: >/1 ]] }
    refalrts::reinit_open_call( context[4] );
    refalrts::reinit_name( context[5], ref_ListOfBuiltin.ref.function );
    refalrts::push_stack( context[1] );
    refalrts::push_stack( context[4] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[4];
    refalrts::splice_to_freelist_open( trash_prev, res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence();

  do {
    // ( 'ListOfBuiltin' ) e.idx
    // </0 & Mu/4 (/5 'L'/9 'i'/10 's'/11 't'/12 'O'/13 'f'/14 'B'/15 'u'/16 'i'/17 'l'/18 't'/19 'i'/20 'n'/21 )/6 e.eX#1/2 >/1
    context[7] = 0;
    context[8] = 0;
    if( ! refalrts::brackets_term( context[7], context[8], context[5] ) )
      continue;
    context[9] = refalrts::char_left( 'L', context[7], context[8] );
    if( ! context[9] )
      continue;
    context[10] = refalrts::char_left( 'i', context[7], context[8] );
    if( ! context[10] )
      continue;
    context[11] = refalrts::char_left( 's', context[7], context[8] );
    if( ! context[11] )
      continue;
    context[12] = refalrts::char_left( 't', context[7], context[8] );
    if( ! context[12] )
      continue;
    context[13] = refalrts::char_left( 'O', context[7], context[8] );
    if( ! context[13] )
      continue;
    context[14] = refalrts::char_left( 'f', context[7], context[8] );
    if( ! context[14] )
      continue;
    context[15] = refalrts::char_left( 'B', context[7], context[8] );
    if( ! context[15] )
      continue;
    context[16] = refalrts::char_left( 'u', context[7], context[8] );
    if( ! context[16] )
      continue;
    context[17] = refalrts::char_left( 'i', context[7], context[8] );
    if( ! context[17] )
      continue;
    context[18] = refalrts::char_left( 'l', context[7], context[8] );
    if( ! context[18] )
      continue;
    context[19] = refalrts::char_left( 't', context[7], context[8] );
    if( ! context[19] )
      continue;
    context[20] = refalrts::char_left( 'i', context[7], context[8] );
    if( ! context[20] )
      continue;
    context[21] = refalrts::char_left( 'n', context[7], context[8] );
    if( ! context[21] )
      continue;
    if( ! refalrts::empty_seq( context[7], context[8] ) )
      continue;
    // closed e.eX#1 as range 2
    //DEBUG: e.eX#1: 2

    refalrts::reset_allocator();
    //TRASH: {REMOVED TILE} </0 & Mu/4 (/5 'L'/9 'i'/10 's'/11 't'/12 'O'/13 'f'/14 'B'/15 'u'/16 'i'/17 'l'/18 't'/19 'i'/20 {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ HalfReuse: </21 HalfReuse: & ListOfBuiltin/6 AsIs: e.eX#1/2 AsIs: >/1 ]] }
    refalrts::reinit_open_call( context[21] );
    refalrts::reinit_name( context[6], ref_ListOfBuiltin.ref.function );
    refalrts::push_stack( context[1] );
    refalrts::push_stack( context[21] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[21];
    refalrts::splice_to_freelist_open( trash_prev, res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence();

  do {
    // # SizeOf e.idx
    // </0 & Mu/4 # SizeOf/5 e.eX#1/2 >/1
    if( ! refalrts::ident_term(  ident_SizeOf, context[5] ) )
      continue;
    // closed e.eX#1 as range 2
    //DEBUG: e.eX#1: 2

    refalrts::reset_allocator();
    //TRASH: {REMOVED TILE} </0 {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ HalfReuse: </4 HalfReuse: & SizeOf/5 AsIs: e.eX#1/2 AsIs: >/1 ]] }
    refalrts::reinit_open_call( context[4] );
    refalrts::reinit_name( context[5], ref_SizeOf.ref.function );
    refalrts::push_stack( context[1] );
    refalrts::push_stack( context[4] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[4];
    refalrts::splice_to_freelist_open( trash_prev, res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence();

  do {
    // ( 'SizeOf' ) e.idx
    // </0 & Mu/4 (/5 'S'/9 'i'/10 'z'/11 'e'/12 'O'/13 'f'/14 )/6 e.eX#1/2 >/1
    context[7] = 0;
    context[8] = 0;
    if( ! refalrts::brackets_term( context[7], context[8], context[5] ) )
      continue;
    context[9] = refalrts::char_left( 'S', context[7], context[8] );
    if( ! context[9] )
      continue;
    context[10] = refalrts::char_left( 'i', context[7], context[8] );
    if( ! context[10] )
      continue;
    context[11] = refalrts::char_left( 'z', context[7], context[8] );
    if( ! context[11] )
      continue;
    context[12] = refalrts::char_left( 'e', context[7], context[8] );
    if( ! context[12] )
      continue;
    context[13] = refalrts::char_left( 'O', context[7], context[8] );
    if( ! context[13] )
      continue;
    context[14] = refalrts::char_left( 'f', context[7], context[8] );
    if( ! context[14] )
      continue;
    if( ! refalrts::empty_seq( context[7], context[8] ) )
      continue;
    // closed e.eX#1 as range 2
    //DEBUG: e.eX#1: 2

    refalrts::reset_allocator();
    //TRASH: {REMOVED TILE} </0 & Mu/4 (/5 'S'/9 'i'/10 'z'/11 'e'/12 'O'/13 {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ HalfReuse: </14 HalfReuse: & SizeOf/6 AsIs: e.eX#1/2 AsIs: >/1 ]] }
    refalrts::reinit_open_call( context[14] );
    refalrts::reinit_name( context[6], ref_SizeOf.ref.function );
    refalrts::push_stack( context[1] );
    refalrts::push_stack( context[14] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[14];
    refalrts::splice_to_freelist_open( trash_prev, res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence();

  do {
    // # GetPID e.idx
    // </0 & Mu/4 # GetPID/5 e.eX#1/2 >/1
    if( ! refalrts::ident_term(  ident_GetPID, context[5] ) )
      continue;
    // closed e.eX#1 as range 2
    //DEBUG: e.eX#1: 2

    refalrts::reset_allocator();
    //TRASH: {REMOVED TILE} </0 {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ HalfReuse: </4 HalfReuse: & GetPID/5 AsIs: e.eX#1/2 AsIs: >/1 ]] }
    refalrts::reinit_open_call( context[4] );
    refalrts::reinit_name( context[5], ref_GetPID.ref.function );
    refalrts::push_stack( context[1] );
    refalrts::push_stack( context[4] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[4];
    refalrts::splice_to_freelist_open( trash_prev, res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence();

  do {
    // ( 'GetPID' ) e.idx
    // </0 & Mu/4 (/5 'G'/9 'e'/10 't'/11 'P'/12 'I'/13 'D'/14 )/6 e.eX#1/2 >/1
    context[7] = 0;
    context[8] = 0;
    if( ! refalrts::brackets_term( context[7], context[8], context[5] ) )
      continue;
    context[9] = refalrts::char_left( 'G', context[7], context[8] );
    if( ! context[9] )
      continue;
    context[10] = refalrts::char_left( 'e', context[7], context[8] );
    if( ! context[10] )
      continue;
    context[11] = refalrts::char_left( 't', context[7], context[8] );
    if( ! context[11] )
      continue;
    context[12] = refalrts::char_left( 'P', context[7], context[8] );
    if( ! context[12] )
      continue;
    context[13] = refalrts::char_left( 'I', context[7], context[8] );
    if( ! context[13] )
      continue;
    context[14] = refalrts::char_left( 'D', context[7], context[8] );
    if( ! context[14] )
      continue;
    if( ! refalrts::empty_seq( context[7], context[8] ) )
      continue;
    // closed e.eX#1 as range 2
    //DEBUG: e.eX#1: 2

    refalrts::reset_allocator();
    //TRASH: {REMOVED TILE} </0 & Mu/4 (/5 'G'/9 'e'/10 't'/11 'P'/12 'I'/13 {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ HalfReuse: </14 HalfReuse: & GetPID/6 AsIs: e.eX#1/2 AsIs: >/1 ]] }
    refalrts::reinit_open_call( context[14] );
    refalrts::reinit_name( context[6], ref_GetPID.ref.function );
    refalrts::push_stack( context[1] );
    refalrts::push_stack( context[14] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[14];
    refalrts::splice_to_freelist_open( trash_prev, res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence();

  do {
    // # int4fab_1 e.idx
    // </0 & Mu/4 # int4fab_1/5 e.eX#1/2 >/1
    if( ! refalrts::ident_term(  ident_int4fabu_1, context[5] ) )
      continue;
    // closed e.eX#1 as range 2
    //DEBUG: e.eX#1: 2

    refalrts::reset_allocator();
    //TRASH: {REMOVED TILE} </0 {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ HalfReuse: </4 HalfReuse: & int4fab_1/5 AsIs: e.eX#1/2 AsIs: >/1 ]] }
    refalrts::reinit_open_call( context[4] );
    refalrts::reinit_name( context[5], ref_int4fabu_1.ref.function );
    refalrts::push_stack( context[1] );
    refalrts::push_stack( context[4] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[4];
    refalrts::splice_to_freelist_open( trash_prev, res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence();

  do {
    // ( 'int4fab_1' ) e.idx
    // </0 & Mu/4 (/5 'i'/9 'n'/10 't'/11 '4'/12 'f'/13 'a'/14 'b'/15 '_'/16 '1'/17 )/6 e.eX#1/2 >/1
    context[7] = 0;
    context[8] = 0;
    if( ! refalrts::brackets_term( context[7], context[8], context[5] ) )
      continue;
    context[9] = refalrts::char_left( 'i', context[7], context[8] );
    if( ! context[9] )
      continue;
    context[10] = refalrts::char_left( 'n', context[7], context[8] );
    if( ! context[10] )
      continue;
    context[11] = refalrts::char_left( 't', context[7], context[8] );
    if( ! context[11] )
      continue;
    context[12] = refalrts::char_left( '4', context[7], context[8] );
    if( ! context[12] )
      continue;
    context[13] = refalrts::char_left( 'f', context[7], context[8] );
    if( ! context[13] )
      continue;
    context[14] = refalrts::char_left( 'a', context[7], context[8] );
    if( ! context[14] )
      continue;
    context[15] = refalrts::char_left( 'b', context[7], context[8] );
    if( ! context[15] )
      continue;
    context[16] = refalrts::char_left( '_', context[7], context[8] );
    if( ! context[16] )
      continue;
    context[17] = refalrts::char_left( '1', context[7], context[8] );
    if( ! context[17] )
      continue;
    if( ! refalrts::empty_seq( context[7], context[8] ) )
      continue;
    // closed e.eX#1 as range 2
    //DEBUG: e.eX#1: 2

    refalrts::reset_allocator();
    //TRASH: {REMOVED TILE} </0 & Mu/4 (/5 'i'/9 'n'/10 't'/11 '4'/12 'f'/13 'a'/14 'b'/15 '_'/16 {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ HalfReuse: </17 HalfReuse: & int4fab_1/6 AsIs: e.eX#1/2 AsIs: >/1 ]] }
    refalrts::reinit_open_call( context[17] );
    refalrts::reinit_name( context[6], ref_int4fabu_1.ref.function );
    refalrts::push_stack( context[1] );
    refalrts::push_stack( context[17] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[17];
    refalrts::splice_to_freelist_open( trash_prev, res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence();

  do {
    // # GetPPID e.idx
    // </0 & Mu/4 # GetPPID/5 e.eX#1/2 >/1
    if( ! refalrts::ident_term(  ident_GetPPID, context[5] ) )
      continue;
    // closed e.eX#1 as range 2
    //DEBUG: e.eX#1: 2

    refalrts::reset_allocator();
    //TRASH: {REMOVED TILE} </0 {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ HalfReuse: </4 HalfReuse: & GetPPID/5 AsIs: e.eX#1/2 AsIs: >/1 ]] }
    refalrts::reinit_open_call( context[4] );
    refalrts::reinit_name( context[5], ref_GetPPID.ref.function );
    refalrts::push_stack( context[1] );
    refalrts::push_stack( context[4] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[4];
    refalrts::splice_to_freelist_open( trash_prev, res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence();

  do {
    // ( 'GetPPID' ) e.idx
    // </0 & Mu/4 (/5 'G'/9 'e'/10 't'/11 'P'/12 'P'/13 'I'/14 'D'/15 )/6 e.eX#1/2 >/1
    context[7] = 0;
    context[8] = 0;
    if( ! refalrts::brackets_term( context[7], context[8], context[5] ) )
      continue;
    context[9] = refalrts::char_left( 'G', context[7], context[8] );
    if( ! context[9] )
      continue;
    context[10] = refalrts::char_left( 'e', context[7], context[8] );
    if( ! context[10] )
      continue;
    context[11] = refalrts::char_left( 't', context[7], context[8] );
    if( ! context[11] )
      continue;
    context[12] = refalrts::char_left( 'P', context[7], context[8] );
    if( ! context[12] )
      continue;
    context[13] = refalrts::char_left( 'P', context[7], context[8] );
    if( ! context[13] )
      continue;
    context[14] = refalrts::char_left( 'I', context[7], context[8] );
    if( ! context[14] )
      continue;
    context[15] = refalrts::char_left( 'D', context[7], context[8] );
    if( ! context[15] )
      continue;
    if( ! refalrts::empty_seq( context[7], context[8] ) )
      continue;
    // closed e.eX#1 as range 2
    //DEBUG: e.eX#1: 2

    refalrts::reset_allocator();
    //TRASH: {REMOVED TILE} </0 & Mu/4 (/5 'G'/9 'e'/10 't'/11 'P'/12 'P'/13 'I'/14 {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ HalfReuse: </15 HalfReuse: & GetPPID/6 AsIs: e.eX#1/2 AsIs: >/1 ]] }
    refalrts::reinit_open_call( context[15] );
    refalrts::reinit_name( context[6], ref_GetPPID.ref.function );
    refalrts::push_stack( context[1] );
    refalrts::push_stack( context[15] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[15];
    refalrts::splice_to_freelist_open( trash_prev, res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence();

  do {
    // # R5-Builtins e.idx
    // </0 & Mu/4 # R5-Builtins/5 e.eX#1/2 >/1
    if( ! refalrts::ident_term(  ident_R5m_Builtins, context[5] ) )
      continue;
    // closed e.eX#1 as range 2
    //DEBUG: e.eX#1: 2

    refalrts::reset_allocator();
    //TRASH: {REMOVED TILE} </0 {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ HalfReuse: </4 HalfReuse: & R5-Builtins/5 AsIs: e.eX#1/2 AsIs: >/1 ]] }
    refalrts::reinit_open_call( context[4] );
    refalrts::reinit_name( context[5], ref_R5m_Builtins.ref.function );
    refalrts::push_stack( context[1] );
    refalrts::push_stack( context[4] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[4];
    refalrts::splice_to_freelist_open( trash_prev, res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence();

  do {
    // ( 'R5-Builtins' ) e.idx
    // </0 & Mu/4 (/5 'R'/9 '5'/10 '-'/11 'B'/12 'u'/13 'i'/14 'l'/15 't'/16 'i'/17 'n'/18 's'/19 )/6 e.eX#1/2 >/1
    context[7] = 0;
    context[8] = 0;
    if( ! refalrts::brackets_term( context[7], context[8], context[5] ) )
      continue;
    context[9] = refalrts::char_left( 'R', context[7], context[8] );
    if( ! context[9] )
      continue;
    context[10] = refalrts::char_left( '5', context[7], context[8] );
    if( ! context[10] )
      continue;
    context[11] = refalrts::char_left( '-', context[7], context[8] );
    if( ! context[11] )
      continue;
    context[12] = refalrts::char_left( 'B', context[7], context[8] );
    if( ! context[12] )
      continue;
    context[13] = refalrts::char_left( 'u', context[7], context[8] );
    if( ! context[13] )
      continue;
    context[14] = refalrts::char_left( 'i', context[7], context[8] );
    if( ! context[14] )
      continue;
    context[15] = refalrts::char_left( 'l', context[7], context[8] );
    if( ! context[15] )
      continue;
    context[16] = refalrts::char_left( 't', context[7], context[8] );
    if( ! context[16] )
      continue;
    context[17] = refalrts::char_left( 'i', context[7], context[8] );
    if( ! context[17] )
      continue;
    context[18] = refalrts::char_left( 'n', context[7], context[8] );
    if( ! context[18] )
      continue;
    context[19] = refalrts::char_left( 's', context[7], context[8] );
    if( ! context[19] )
      continue;
    if( ! refalrts::empty_seq( context[7], context[8] ) )
      continue;
    // closed e.eX#1 as range 2
    //DEBUG: e.eX#1: 2

    refalrts::reset_allocator();
    //TRASH: {REMOVED TILE} </0 & Mu/4 (/5 'R'/9 '5'/10 '-'/11 'B'/12 'u'/13 'i'/14 'l'/15 't'/16 'i'/17 'n'/18 {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ HalfReuse: </19 HalfReuse: & R5-Builtins/6 AsIs: e.eX#1/2 AsIs: >/1 ]] }
    refalrts::reinit_open_call( context[19] );
    refalrts::reinit_name( context[6], ref_R5m_Builtins.ref.function );
    refalrts::push_stack( context[1] );
    refalrts::push_stack( context[19] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[19];
    refalrts::splice_to_freelist_open( trash_prev, res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence();

  do {
    // # R5-Unique e.idx
    // </0 & Mu/4 # R5-Unique/5 e.eX#1/2 >/1
    if( ! refalrts::ident_term(  ident_R5m_Unique, context[5] ) )
      continue;
    // closed e.eX#1 as range 2
    //DEBUG: e.eX#1: 2

    refalrts::reset_allocator();
    //TRASH: {REMOVED TILE} </0 {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ HalfReuse: </4 HalfReuse: & R5-Unique/5 AsIs: e.eX#1/2 AsIs: >/1 ]] }
    refalrts::reinit_open_call( context[4] );
    refalrts::reinit_name( context[5], ref_R5m_Unique.ref.function );
    refalrts::push_stack( context[1] );
    refalrts::push_stack( context[4] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[4];
    refalrts::splice_to_freelist_open( trash_prev, res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence();

  do {
    // ( 'R5-Unique' ) e.idx
    // </0 & Mu/4 (/5 'R'/9 '5'/10 '-'/11 'U'/12 'n'/13 'i'/14 'q'/15 'u'/16 'e'/17 )/6 e.eX#1/2 >/1
    context[7] = 0;
    context[8] = 0;
    if( ! refalrts::brackets_term( context[7], context[8], context[5] ) )
      continue;
    context[9] = refalrts::char_left( 'R', context[7], context[8] );
    if( ! context[9] )
      continue;
    context[10] = refalrts::char_left( '5', context[7], context[8] );
    if( ! context[10] )
      continue;
    context[11] = refalrts::char_left( '-', context[7], context[8] );
    if( ! context[11] )
      continue;
    context[12] = refalrts::char_left( 'U', context[7], context[8] );
    if( ! context[12] )
      continue;
    context[13] = refalrts::char_left( 'n', context[7], context[8] );
    if( ! context[13] )
      continue;
    context[14] = refalrts::char_left( 'i', context[7], context[8] );
    if( ! context[14] )
      continue;
    context[15] = refalrts::char_left( 'q', context[7], context[8] );
    if( ! context[15] )
      continue;
    context[16] = refalrts::char_left( 'u', context[7], context[8] );
    if( ! context[16] )
      continue;
    context[17] = refalrts::char_left( 'e', context[7], context[8] );
    if( ! context[17] )
      continue;
    if( ! refalrts::empty_seq( context[7], context[8] ) )
      continue;
    // closed e.eX#1 as range 2
    //DEBUG: e.eX#1: 2

    refalrts::reset_allocator();
    //TRASH: {REMOVED TILE} </0 & Mu/4 (/5 'R'/9 '5'/10 '-'/11 'U'/12 'n'/13 'i'/14 'q'/15 'u'/16 {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ HalfReuse: </17 HalfReuse: & R5-Unique/6 AsIs: e.eX#1/2 AsIs: >/1 ]] }
    refalrts::reinit_open_call( context[17] );
    refalrts::reinit_name( context[6], ref_R5m_Unique.ref.function );
    refalrts::push_stack( context[1] );
    refalrts::push_stack( context[17] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[17];
    refalrts::splice_to_freelist_open( trash_prev, res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence();

  do {
    // # R5-Transform e.idx
    // </0 & Mu/4 # R5-Transform/5 e.eX#1/2 >/1
    if( ! refalrts::ident_term(  ident_R5m_Transform, context[5] ) )
      continue;
    // closed e.eX#1 as range 2
    //DEBUG: e.eX#1: 2

    refalrts::reset_allocator();
    //TRASH: {REMOVED TILE} </0 {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ HalfReuse: </4 HalfReuse: & R5-Transform/5 AsIs: e.eX#1/2 AsIs: >/1 ]] }
    refalrts::reinit_open_call( context[4] );
    refalrts::reinit_name( context[5], ref_R5m_Transform.ref.function );
    refalrts::push_stack( context[1] );
    refalrts::push_stack( context[4] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[4];
    refalrts::splice_to_freelist_open( trash_prev, res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence();

  do {
    // ( 'R5-Transform' ) e.idx
    // </0 & Mu/4 (/5 'R'/9 '5'/10 '-'/11 'T'/12 'r'/13 'a'/14 'n'/15 's'/16 'f'/17 'o'/18 'r'/19 'm'/20 )/6 e.eX#1/2 >/1
    context[7] = 0;
    context[8] = 0;
    if( ! refalrts::brackets_term( context[7], context[8], context[5] ) )
      continue;
    context[9] = refalrts::char_left( 'R', context[7], context[8] );
    if( ! context[9] )
      continue;
    context[10] = refalrts::char_left( '5', context[7], context[8] );
    if( ! context[10] )
      continue;
    context[11] = refalrts::char_left( '-', context[7], context[8] );
    if( ! context[11] )
      continue;
    context[12] = refalrts::char_left( 'T', context[7], context[8] );
    if( ! context[12] )
      continue;
    context[13] = refalrts::char_left( 'r', context[7], context[8] );
    if( ! context[13] )
      continue;
    context[14] = refalrts::char_left( 'a', context[7], context[8] );
    if( ! context[14] )
      continue;
    context[15] = refalrts::char_left( 'n', context[7], context[8] );
    if( ! context[15] )
      continue;
    context[16] = refalrts::char_left( 's', context[7], context[8] );
    if( ! context[16] )
      continue;
    context[17] = refalrts::char_left( 'f', context[7], context[8] );
    if( ! context[17] )
      continue;
    context[18] = refalrts::char_left( 'o', context[7], context[8] );
    if( ! context[18] )
      continue;
    context[19] = refalrts::char_left( 'r', context[7], context[8] );
    if( ! context[19] )
      continue;
    context[20] = refalrts::char_left( 'm', context[7], context[8] );
    if( ! context[20] )
      continue;
    if( ! refalrts::empty_seq( context[7], context[8] ) )
      continue;
    // closed e.eX#1 as range 2
    //DEBUG: e.eX#1: 2

    refalrts::reset_allocator();
    //TRASH: {REMOVED TILE} </0 & Mu/4 (/5 'R'/9 '5'/10 '-'/11 'T'/12 'r'/13 'a'/14 'n'/15 's'/16 'f'/17 'o'/18 'r'/19 {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ HalfReuse: </20 HalfReuse: & R5-Transform/6 AsIs: e.eX#1/2 AsIs: >/1 ]] }
    refalrts::reinit_open_call( context[20] );
    refalrts::reinit_name( context[6], ref_R5m_Transform.ref.function );
    refalrts::push_stack( context[1] );
    refalrts::push_stack( context[20] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[20];
    refalrts::splice_to_freelist_open( trash_prev, res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence();

  do {
    // # Transform-Step e.idx
    // </0 & Mu/4 # Transform-Step/5 e.eX#1/2 >/1
    if( ! refalrts::ident_term(  ident_Transformm_Step, context[5] ) )
      continue;
    // closed e.eX#1 as range 2
    //DEBUG: e.eX#1: 2

    refalrts::reset_allocator();
    //TRASH: {REMOVED TILE} </0 {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ HalfReuse: </4 HalfReuse: & Transform-Step/5 AsIs: e.eX#1/2 AsIs: >/1 ]] }
    refalrts::reinit_open_call( context[4] );
    refalrts::reinit_name( context[5], ref_Transformm_Step.ref.function );
    refalrts::push_stack( context[1] );
    refalrts::push_stack( context[4] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[4];
    refalrts::splice_to_freelist_open( trash_prev, res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence();

  do {
    // ( 'Transform-Step' ) e.idx
    // </0 & Mu/4 (/5 'T'/9 'r'/10 'a'/11 'n'/12 's'/13 'f'/14 'o'/15 'r'/16 'm'/17 '-'/18 'S'/19 't'/20 'e'/21 'p'/22 )/6 e.eX#1/2 >/1
    context[7] = 0;
    context[8] = 0;
    if( ! refalrts::brackets_term( context[7], context[8], context[5] ) )
      continue;
    context[9] = refalrts::char_left( 'T', context[7], context[8] );
    if( ! context[9] )
      continue;
    context[10] = refalrts::char_left( 'r', context[7], context[8] );
    if( ! context[10] )
      continue;
    context[11] = refalrts::char_left( 'a', context[7], context[8] );
    if( ! context[11] )
      continue;
    context[12] = refalrts::char_left( 'n', context[7], context[8] );
    if( ! context[12] )
      continue;
    context[13] = refalrts::char_left( 's', context[7], context[8] );
    if( ! context[13] )
      continue;
    context[14] = refalrts::char_left( 'f', context[7], context[8] );
    if( ! context[14] )
      continue;
    context[15] = refalrts::char_left( 'o', context[7], context[8] );
    if( ! context[15] )
      continue;
    context[16] = refalrts::char_left( 'r', context[7], context[8] );
    if( ! context[16] )
      continue;
    context[17] = refalrts::char_left( 'm', context[7], context[8] );
    if( ! context[17] )
      continue;
    context[18] = refalrts::char_left( '-', context[7], context[8] );
    if( ! context[18] )
      continue;
    context[19] = refalrts::char_left( 'S', context[7], context[8] );
    if( ! context[19] )
      continue;
    context[20] = refalrts::char_left( 't', context[7], context[8] );
    if( ! context[20] )
      continue;
    context[21] = refalrts::char_left( 'e', context[7], context[8] );
    if( ! context[21] )
      continue;
    context[22] = refalrts::char_left( 'p', context[7], context[8] );
    if( ! context[22] )
      continue;
    if( ! refalrts::empty_seq( context[7], context[8] ) )
      continue;
    // closed e.eX#1 as range 2
    //DEBUG: e.eX#1: 2

    refalrts::reset_allocator();
    //TRASH: {REMOVED TILE} </0 & Mu/4 (/5 'T'/9 'r'/10 'a'/11 'n'/12 's'/13 'f'/14 'o'/15 'r'/16 'm'/17 '-'/18 'S'/19 't'/20 'e'/21 {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ HalfReuse: </22 HalfReuse: & Transform-Step/6 AsIs: e.eX#1/2 AsIs: >/1 ]] }
    refalrts::reinit_open_call( context[22] );
    refalrts::reinit_name( context[6], ref_Transformm_Step.ref.function );
    refalrts::push_stack( context[1] );
    refalrts::push_stack( context[22] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[22];
    refalrts::splice_to_freelist_open( trash_prev, res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence();

  do {
    // # GetFunctionNames e.idx
    // </0 & Mu/4 # GetFunctionNames/5 e.eX#1/2 >/1
    if( ! refalrts::ident_term(  ident_GetFunctionNames, context[5] ) )
      continue;
    // closed e.eX#1 as range 2
    //DEBUG: e.eX#1: 2

    refalrts::reset_allocator();
    //TRASH: {REMOVED TILE} </0 {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ HalfReuse: </4 HalfReuse: & GetFunctionNames/5 AsIs: e.eX#1/2 AsIs: >/1 ]] }
    refalrts::reinit_open_call( context[4] );
    refalrts::reinit_name( context[5], ref_GetFunctionNames.ref.function );
    refalrts::push_stack( context[1] );
    refalrts::push_stack( context[4] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[4];
    refalrts::splice_to_freelist_open( trash_prev, res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence();

  do {
    // ( 'GetFunctionNames' ) e.idx
    // </0 & Mu/4 (/5 'G'/9 'e'/10 't'/11 'F'/12 'u'/13 'n'/14 'c'/15 't'/16 'i'/17 'o'/18 'n'/19 'N'/20 'a'/21 'm'/22 'e'/23 's'/24 )/6 e.eX#1/2 >/1
    context[7] = 0;
    context[8] = 0;
    if( ! refalrts::brackets_term( context[7], context[8], context[5] ) )
      continue;
    context[9] = refalrts::char_left( 'G', context[7], context[8] );
    if( ! context[9] )
      continue;
    context[10] = refalrts::char_left( 'e', context[7], context[8] );
    if( ! context[10] )
      continue;
    context[11] = refalrts::char_left( 't', context[7], context[8] );
    if( ! context[11] )
      continue;
    context[12] = refalrts::char_left( 'F', context[7], context[8] );
    if( ! context[12] )
      continue;
    context[13] = refalrts::char_left( 'u', context[7], context[8] );
    if( ! context[13] )
      continue;
    context[14] = refalrts::char_left( 'n', context[7], context[8] );
    if( ! context[14] )
      continue;
    context[15] = refalrts::char_left( 'c', context[7], context[8] );
    if( ! context[15] )
      continue;
    context[16] = refalrts::char_left( 't', context[7], context[8] );
    if( ! context[16] )
      continue;
    context[17] = refalrts::char_left( 'i', context[7], context[8] );
    if( ! context[17] )
      continue;
    context[18] = refalrts::char_left( 'o', context[7], context[8] );
    if( ! context[18] )
      continue;
    context[19] = refalrts::char_left( 'n', context[7], context[8] );
    if( ! context[19] )
      continue;
    context[20] = refalrts::char_left( 'N', context[7], context[8] );
    if( ! context[20] )
      continue;
    context[21] = refalrts::char_left( 'a', context[7], context[8] );
    if( ! context[21] )
      continue;
    context[22] = refalrts::char_left( 'm', context[7], context[8] );
    if( ! context[22] )
      continue;
    context[23] = refalrts::char_left( 'e', context[7], context[8] );
    if( ! context[23] )
      continue;
    context[24] = refalrts::char_left( 's', context[7], context[8] );
    if( ! context[24] )
      continue;
    if( ! refalrts::empty_seq( context[7], context[8] ) )
      continue;
    // closed e.eX#1 as range 2
    //DEBUG: e.eX#1: 2

    refalrts::reset_allocator();
    //TRASH: {REMOVED TILE} </0 & Mu/4 (/5 'G'/9 'e'/10 't'/11 'F'/12 'u'/13 'n'/14 'c'/15 't'/16 'i'/17 'o'/18 'n'/19 'N'/20 'a'/21 'm'/22 'e'/23 {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ HalfReuse: </24 HalfReuse: & GetFunctionNames/6 AsIs: e.eX#1/2 AsIs: >/1 ]] }
    refalrts::reinit_open_call( context[24] );
    refalrts::reinit_name( context[6], ref_GetFunctionNames.ref.function );
    refalrts::push_stack( context[1] );
    refalrts::push_stack( context[24] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[24];
    refalrts::splice_to_freelist_open( trash_prev, res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence();

  do {
    // # DoTransform e.idx
    // </0 & Mu/4 # DoTransform/5 e.eX#1/2 >/1
    if( ! refalrts::ident_term(  ident_DoTransform, context[5] ) )
      continue;
    // closed e.eX#1 as range 2
    //DEBUG: e.eX#1: 2

    refalrts::reset_allocator();
    //TRASH: {REMOVED TILE} </0 {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ HalfReuse: </4 HalfReuse: & DoTransform/5 AsIs: e.eX#1/2 AsIs: >/1 ]] }
    refalrts::reinit_open_call( context[4] );
    refalrts::reinit_name( context[5], ref_DoTransform.ref.function );
    refalrts::push_stack( context[1] );
    refalrts::push_stack( context[4] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[4];
    refalrts::splice_to_freelist_open( trash_prev, res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence();

  do {
    // ( 'DoTransform' ) e.idx
    // </0 & Mu/4 (/5 'D'/9 'o'/10 'T'/11 'r'/12 'a'/13 'n'/14 's'/15 'f'/16 'o'/17 'r'/18 'm'/19 )/6 e.eX#1/2 >/1
    context[7] = 0;
    context[8] = 0;
    if( ! refalrts::brackets_term( context[7], context[8], context[5] ) )
      continue;
    context[9] = refalrts::char_left( 'D', context[7], context[8] );
    if( ! context[9] )
      continue;
    context[10] = refalrts::char_left( 'o', context[7], context[8] );
    if( ! context[10] )
      continue;
    context[11] = refalrts::char_left( 'T', context[7], context[8] );
    if( ! context[11] )
      continue;
    context[12] = refalrts::char_left( 'r', context[7], context[8] );
    if( ! context[12] )
      continue;
    context[13] = refalrts::char_left( 'a', context[7], context[8] );
    if( ! context[13] )
      continue;
    context[14] = refalrts::char_left( 'n', context[7], context[8] );
    if( ! context[14] )
      continue;
    context[15] = refalrts::char_left( 's', context[7], context[8] );
    if( ! context[15] )
      continue;
    context[16] = refalrts::char_left( 'f', context[7], context[8] );
    if( ! context[16] )
      continue;
    context[17] = refalrts::char_left( 'o', context[7], context[8] );
    if( ! context[17] )
      continue;
    context[18] = refalrts::char_left( 'r', context[7], context[8] );
    if( ! context[18] )
      continue;
    context[19] = refalrts::char_left( 'm', context[7], context[8] );
    if( ! context[19] )
      continue;
    if( ! refalrts::empty_seq( context[7], context[8] ) )
      continue;
    // closed e.eX#1 as range 2
    //DEBUG: e.eX#1: 2

    refalrts::reset_allocator();
    //TRASH: {REMOVED TILE} </0 & Mu/4 (/5 'D'/9 'o'/10 'T'/11 'r'/12 'a'/13 'n'/14 's'/15 'f'/16 'o'/17 'r'/18 {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ HalfReuse: </19 HalfReuse: & DoTransform/6 AsIs: e.eX#1/2 AsIs: >/1 ]] }
    refalrts::reinit_open_call( context[19] );
    refalrts::reinit_name( context[6], ref_DoTransform.ref.function );
    refalrts::push_stack( context[1] );
    refalrts::push_stack( context[19] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[19];
    refalrts::splice_to_freelist_open( trash_prev, res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence();

  do {
    // # DoTransform_check e.idx
    // </0 & Mu/4 # DoTransform_check/5 e.eX#1/2 >/1
    if( ! refalrts::ident_term(  ident_DoTransformu_check, context[5] ) )
      continue;
    // closed e.eX#1 as range 2
    //DEBUG: e.eX#1: 2

    refalrts::reset_allocator();
    //TRASH: {REMOVED TILE} </0 {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ HalfReuse: </4 HalfReuse: & DoTransform_check/5 AsIs: e.eX#1/2 AsIs: >/1 ]] }
    refalrts::reinit_open_call( context[4] );
    refalrts::reinit_name( context[5], ref_DoTransformu_check.ref.function );
    refalrts::push_stack( context[1] );
    refalrts::push_stack( context[4] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[4];
    refalrts::splice_to_freelist_open( trash_prev, res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence();

  do {
    // ( 'DoTransform_check' ) e.idx
    // </0 & Mu/4 (/5 'D'/9 'o'/10 'T'/11 'r'/12 'a'/13 'n'/14 's'/15 'f'/16 'o'/17 'r'/18 'm'/19 '_'/20 'c'/21 'h'/22 'e'/23 'c'/24 'k'/25 )/6 e.eX#1/2 >/1
    context[7] = 0;
    context[8] = 0;
    if( ! refalrts::brackets_term( context[7], context[8], context[5] ) )
      continue;
    context[9] = refalrts::char_left( 'D', context[7], context[8] );
    if( ! context[9] )
      continue;
    context[10] = refalrts::char_left( 'o', context[7], context[8] );
    if( ! context[10] )
      continue;
    context[11] = refalrts::char_left( 'T', context[7], context[8] );
    if( ! context[11] )
      continue;
    context[12] = refalrts::char_left( 'r', context[7], context[8] );
    if( ! context[12] )
      continue;
    context[13] = refalrts::char_left( 'a', context[7], context[8] );
    if( ! context[13] )
      continue;
    context[14] = refalrts::char_left( 'n', context[7], context[8] );
    if( ! context[14] )
      continue;
    context[15] = refalrts::char_left( 's', context[7], context[8] );
    if( ! context[15] )
      continue;
    context[16] = refalrts::char_left( 'f', context[7], context[8] );
    if( ! context[16] )
      continue;
    context[17] = refalrts::char_left( 'o', context[7], context[8] );
    if( ! context[17] )
      continue;
    context[18] = refalrts::char_left( 'r', context[7], context[8] );
    if( ! context[18] )
      continue;
    context[19] = refalrts::char_left( 'm', context[7], context[8] );
    if( ! context[19] )
      continue;
    context[20] = refalrts::char_left( '_', context[7], context[8] );
    if( ! context[20] )
      continue;
    context[21] = refalrts::char_left( 'c', context[7], context[8] );
    if( ! context[21] )
      continue;
    context[22] = refalrts::char_left( 'h', context[7], context[8] );
    if( ! context[22] )
      continue;
    context[23] = refalrts::char_left( 'e', context[7], context[8] );
    if( ! context[23] )
      continue;
    context[24] = refalrts::char_left( 'c', context[7], context[8] );
    if( ! context[24] )
      continue;
    context[25] = refalrts::char_left( 'k', context[7], context[8] );
    if( ! context[25] )
      continue;
    if( ! refalrts::empty_seq( context[7], context[8] ) )
      continue;
    // closed e.eX#1 as range 2
    //DEBUG: e.eX#1: 2

    refalrts::reset_allocator();
    //TRASH: {REMOVED TILE} </0 & Mu/4 (/5 'D'/9 'o'/10 'T'/11 'r'/12 'a'/13 'n'/14 's'/15 'f'/16 'o'/17 'r'/18 'm'/19 '_'/20 'c'/21 'h'/22 'e'/23 'c'/24 {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ HalfReuse: </25 HalfReuse: & DoTransform_check/6 AsIs: e.eX#1/2 AsIs: >/1 ]] }
    refalrts::reinit_open_call( context[25] );
    refalrts::reinit_name( context[6], ref_DoTransformu_check.ref.function );
    refalrts::push_stack( context[1] );
    refalrts::push_stack( context[25] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[25];
    refalrts::splice_to_freelist_open( trash_prev, res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence();

  do {
    // # DoTransform_cont e.idx
    // </0 & Mu/4 # DoTransform_cont/5 e.eX#1/2 >/1
    if( ! refalrts::ident_term(  ident_DoTransformu_cont, context[5] ) )
      continue;
    // closed e.eX#1 as range 2
    //DEBUG: e.eX#1: 2

    refalrts::reset_allocator();
    //TRASH: {REMOVED TILE} </0 {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ HalfReuse: </4 HalfReuse: & DoTransform_cont/5 AsIs: e.eX#1/2 AsIs: >/1 ]] }
    refalrts::reinit_open_call( context[4] );
    refalrts::reinit_name( context[5], ref_DoTransformu_cont.ref.function );
    refalrts::push_stack( context[1] );
    refalrts::push_stack( context[4] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[4];
    refalrts::splice_to_freelist_open( trash_prev, res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence();

  do {
    // ( 'DoTransform_cont' ) e.idx
    // </0 & Mu/4 (/5 'D'/9 'o'/10 'T'/11 'r'/12 'a'/13 'n'/14 's'/15 'f'/16 'o'/17 'r'/18 'm'/19 '_'/20 'c'/21 'o'/22 'n'/23 't'/24 )/6 e.eX#1/2 >/1
    context[7] = 0;
    context[8] = 0;
    if( ! refalrts::brackets_term( context[7], context[8], context[5] ) )
      continue;
    context[9] = refalrts::char_left( 'D', context[7], context[8] );
    if( ! context[9] )
      continue;
    context[10] = refalrts::char_left( 'o', context[7], context[8] );
    if( ! context[10] )
      continue;
    context[11] = refalrts::char_left( 'T', context[7], context[8] );
    if( ! context[11] )
      continue;
    context[12] = refalrts::char_left( 'r', context[7], context[8] );
    if( ! context[12] )
      continue;
    context[13] = refalrts::char_left( 'a', context[7], context[8] );
    if( ! context[13] )
      continue;
    context[14] = refalrts::char_left( 'n', context[7], context[8] );
    if( ! context[14] )
      continue;
    context[15] = refalrts::char_left( 's', context[7], context[8] );
    if( ! context[15] )
      continue;
    context[16] = refalrts::char_left( 'f', context[7], context[8] );
    if( ! context[16] )
      continue;
    context[17] = refalrts::char_left( 'o', context[7], context[8] );
    if( ! context[17] )
      continue;
    context[18] = refalrts::char_left( 'r', context[7], context[8] );
    if( ! context[18] )
      continue;
    context[19] = refalrts::char_left( 'm', context[7], context[8] );
    if( ! context[19] )
      continue;
    context[20] = refalrts::char_left( '_', context[7], context[8] );
    if( ! context[20] )
      continue;
    context[21] = refalrts::char_left( 'c', context[7], context[8] );
    if( ! context[21] )
      continue;
    context[22] = refalrts::char_left( 'o', context[7], context[8] );
    if( ! context[22] )
      continue;
    context[23] = refalrts::char_left( 'n', context[7], context[8] );
    if( ! context[23] )
      continue;
    context[24] = refalrts::char_left( 't', context[7], context[8] );
    if( ! context[24] )
      continue;
    if( ! refalrts::empty_seq( context[7], context[8] ) )
      continue;
    // closed e.eX#1 as range 2
    //DEBUG: e.eX#1: 2

    refalrts::reset_allocator();
    //TRASH: {REMOVED TILE} </0 & Mu/4 (/5 'D'/9 'o'/10 'T'/11 'r'/12 'a'/13 'n'/14 's'/15 'f'/16 'o'/17 'r'/18 'm'/19 '_'/20 'c'/21 'o'/22 'n'/23 {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ HalfReuse: </24 HalfReuse: & DoTransform_cont/6 AsIs: e.eX#1/2 AsIs: >/1 ]] }
    refalrts::reinit_open_call( context[24] );
    refalrts::reinit_name( context[6], ref_DoTransformu_cont.ref.function );
    refalrts::push_stack( context[1] );
    refalrts::push_stack( context[24] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[24];
    refalrts::splice_to_freelist_open( trash_prev, res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence();

  do {
    // # UnBlock e.idx
    // </0 & Mu/4 # UnBlock/5 e.eX#1/2 >/1
    if( ! refalrts::ident_term(  ident_UnBlock, context[5] ) )
      continue;
    // closed e.eX#1 as range 2
    //DEBUG: e.eX#1: 2

    refalrts::reset_allocator();
    //TRASH: {REMOVED TILE} </0 {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ HalfReuse: </4 HalfReuse: & UnBlock/5 AsIs: e.eX#1/2 AsIs: >/1 ]] }
    refalrts::reinit_open_call( context[4] );
    refalrts::reinit_name( context[5], ref_UnBlock.ref.function );
    refalrts::push_stack( context[1] );
    refalrts::push_stack( context[4] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[4];
    refalrts::splice_to_freelist_open( trash_prev, res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence();

  do {
    // ( 'UnBlock' ) e.idx
    // </0 & Mu/4 (/5 'U'/9 'n'/10 'B'/11 'l'/12 'o'/13 'c'/14 'k'/15 )/6 e.eX#1/2 >/1
    context[7] = 0;
    context[8] = 0;
    if( ! refalrts::brackets_term( context[7], context[8], context[5] ) )
      continue;
    context[9] = refalrts::char_left( 'U', context[7], context[8] );
    if( ! context[9] )
      continue;
    context[10] = refalrts::char_left( 'n', context[7], context[8] );
    if( ! context[10] )
      continue;
    context[11] = refalrts::char_left( 'B', context[7], context[8] );
    if( ! context[11] )
      continue;
    context[12] = refalrts::char_left( 'l', context[7], context[8] );
    if( ! context[12] )
      continue;
    context[13] = refalrts::char_left( 'o', context[7], context[8] );
    if( ! context[13] )
      continue;
    context[14] = refalrts::char_left( 'c', context[7], context[8] );
    if( ! context[14] )
      continue;
    context[15] = refalrts::char_left( 'k', context[7], context[8] );
    if( ! context[15] )
      continue;
    if( ! refalrts::empty_seq( context[7], context[8] ) )
      continue;
    // closed e.eX#1 as range 2
    //DEBUG: e.eX#1: 2

    refalrts::reset_allocator();
    //TRASH: {REMOVED TILE} </0 & Mu/4 (/5 'U'/9 'n'/10 'B'/11 'l'/12 'o'/13 'c'/14 {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ HalfReuse: </15 HalfReuse: & UnBlock/6 AsIs: e.eX#1/2 AsIs: >/1 ]] }
    refalrts::reinit_open_call( context[15] );
    refalrts::reinit_name( context[6], ref_UnBlock.ref.function );
    refalrts::push_stack( context[1] );
    refalrts::push_stack( context[15] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[15];
    refalrts::splice_to_freelist_open( trash_prev, res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence();

  do {
    // # DoUnBlock e.idx
    // </0 & Mu/4 # DoUnBlock/5 e.eX#1/2 >/1
    if( ! refalrts::ident_term(  ident_DoUnBlock, context[5] ) )
      continue;
    // closed e.eX#1 as range 2
    //DEBUG: e.eX#1: 2

    refalrts::reset_allocator();
    //TRASH: {REMOVED TILE} </0 {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ HalfReuse: </4 HalfReuse: & DoUnBlock/5 AsIs: e.eX#1/2 AsIs: >/1 ]] }
    refalrts::reinit_open_call( context[4] );
    refalrts::reinit_name( context[5], ref_DoUnBlock.ref.function );
    refalrts::push_stack( context[1] );
    refalrts::push_stack( context[4] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[4];
    refalrts::splice_to_freelist_open( trash_prev, res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence();

  do {
    // ( 'DoUnBlock' ) e.idx
    // </0 & Mu/4 (/5 'D'/9 'o'/10 'U'/11 'n'/12 'B'/13 'l'/14 'o'/15 'c'/16 'k'/17 )/6 e.eX#1/2 >/1
    context[7] = 0;
    context[8] = 0;
    if( ! refalrts::brackets_term( context[7], context[8], context[5] ) )
      continue;
    context[9] = refalrts::char_left( 'D', context[7], context[8] );
    if( ! context[9] )
      continue;
    context[10] = refalrts::char_left( 'o', context[7], context[8] );
    if( ! context[10] )
      continue;
    context[11] = refalrts::char_left( 'U', context[7], context[8] );
    if( ! context[11] )
      continue;
    context[12] = refalrts::char_left( 'n', context[7], context[8] );
    if( ! context[12] )
      continue;
    context[13] = refalrts::char_left( 'B', context[7], context[8] );
    if( ! context[13] )
      continue;
    context[14] = refalrts::char_left( 'l', context[7], context[8] );
    if( ! context[14] )
      continue;
    context[15] = refalrts::char_left( 'o', context[7], context[8] );
    if( ! context[15] )
      continue;
    context[16] = refalrts::char_left( 'c', context[7], context[8] );
    if( ! context[16] )
      continue;
    context[17] = refalrts::char_left( 'k', context[7], context[8] );
    if( ! context[17] )
      continue;
    if( ! refalrts::empty_seq( context[7], context[8] ) )
      continue;
    // closed e.eX#1 as range 2
    //DEBUG: e.eX#1: 2

    refalrts::reset_allocator();
    //TRASH: {REMOVED TILE} </0 & Mu/4 (/5 'D'/9 'o'/10 'U'/11 'n'/12 'B'/13 'l'/14 'o'/15 'c'/16 {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ HalfReuse: </17 HalfReuse: & DoUnBlock/6 AsIs: e.eX#1/2 AsIs: >/1 ]] }
    refalrts::reinit_open_call( context[17] );
    refalrts::reinit_name( context[6], ref_DoUnBlock.ref.function );
    refalrts::push_stack( context[1] );
    refalrts::push_stack( context[17] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[17];
    refalrts::splice_to_freelist_open( trash_prev, res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence();

  do {
    // # DoUnBlock_check e.idx
    // </0 & Mu/4 # DoUnBlock_check/5 e.eX#1/2 >/1
    if( ! refalrts::ident_term(  ident_DoUnBlocku_check, context[5] ) )
      continue;
    // closed e.eX#1 as range 2
    //DEBUG: e.eX#1: 2

    refalrts::reset_allocator();
    //TRASH: {REMOVED TILE} </0 {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ HalfReuse: </4 HalfReuse: & DoUnBlock_check/5 AsIs: e.eX#1/2 AsIs: >/1 ]] }
    refalrts::reinit_open_call( context[4] );
    refalrts::reinit_name( context[5], ref_DoUnBlocku_check.ref.function );
    refalrts::push_stack( context[1] );
    refalrts::push_stack( context[4] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[4];
    refalrts::splice_to_freelist_open( trash_prev, res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence();

  do {
    // ( 'DoUnBlock_check' ) e.idx
    // </0 & Mu/4 (/5 'D'/9 'o'/10 'U'/11 'n'/12 'B'/13 'l'/14 'o'/15 'c'/16 'k'/17 '_'/18 'c'/19 'h'/20 'e'/21 'c'/22 'k'/23 )/6 e.eX#1/2 >/1
    context[7] = 0;
    context[8] = 0;
    if( ! refalrts::brackets_term( context[7], context[8], context[5] ) )
      continue;
    context[9] = refalrts::char_left( 'D', context[7], context[8] );
    if( ! context[9] )
      continue;
    context[10] = refalrts::char_left( 'o', context[7], context[8] );
    if( ! context[10] )
      continue;
    context[11] = refalrts::char_left( 'U', context[7], context[8] );
    if( ! context[11] )
      continue;
    context[12] = refalrts::char_left( 'n', context[7], context[8] );
    if( ! context[12] )
      continue;
    context[13] = refalrts::char_left( 'B', context[7], context[8] );
    if( ! context[13] )
      continue;
    context[14] = refalrts::char_left( 'l', context[7], context[8] );
    if( ! context[14] )
      continue;
    context[15] = refalrts::char_left( 'o', context[7], context[8] );
    if( ! context[15] )
      continue;
    context[16] = refalrts::char_left( 'c', context[7], context[8] );
    if( ! context[16] )
      continue;
    context[17] = refalrts::char_left( 'k', context[7], context[8] );
    if( ! context[17] )
      continue;
    context[18] = refalrts::char_left( '_', context[7], context[8] );
    if( ! context[18] )
      continue;
    context[19] = refalrts::char_left( 'c', context[7], context[8] );
    if( ! context[19] )
      continue;
    context[20] = refalrts::char_left( 'h', context[7], context[8] );
    if( ! context[20] )
      continue;
    context[21] = refalrts::char_left( 'e', context[7], context[8] );
    if( ! context[21] )
      continue;
    context[22] = refalrts::char_left( 'c', context[7], context[8] );
    if( ! context[22] )
      continue;
    context[23] = refalrts::char_left( 'k', context[7], context[8] );
    if( ! context[23] )
      continue;
    if( ! refalrts::empty_seq( context[7], context[8] ) )
      continue;
    // closed e.eX#1 as range 2
    //DEBUG: e.eX#1: 2

    refalrts::reset_allocator();
    //TRASH: {REMOVED TILE} </0 & Mu/4 (/5 'D'/9 'o'/10 'U'/11 'n'/12 'B'/13 'l'/14 'o'/15 'c'/16 'k'/17 '_'/18 'c'/19 'h'/20 'e'/21 'c'/22 {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ HalfReuse: </23 HalfReuse: & DoUnBlock_check/6 AsIs: e.eX#1/2 AsIs: >/1 ]] }
    refalrts::reinit_open_call( context[23] );
    refalrts::reinit_name( context[6], ref_DoUnBlocku_check.ref.function );
    refalrts::push_stack( context[1] );
    refalrts::push_stack( context[23] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[23];
    refalrts::splice_to_freelist_open( trash_prev, res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence();

  do {
    // # DoUnBlock_forward e.idx
    // </0 & Mu/4 # DoUnBlock_forward/5 e.eX#1/2 >/1
    if( ! refalrts::ident_term(  ident_DoUnBlocku_forward, context[5] ) )
      continue;
    // closed e.eX#1 as range 2
    //DEBUG: e.eX#1: 2

    refalrts::reset_allocator();
    //TRASH: {REMOVED TILE} </0 {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ HalfReuse: </4 HalfReuse: & DoUnBlock_forward/5 AsIs: e.eX#1/2 AsIs: >/1 ]] }
    refalrts::reinit_open_call( context[4] );
    refalrts::reinit_name( context[5], ref_DoUnBlocku_forward.ref.function );
    refalrts::push_stack( context[1] );
    refalrts::push_stack( context[4] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[4];
    refalrts::splice_to_freelist_open( trash_prev, res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence();

  do {
    // ( 'DoUnBlock_forward' ) e.idx
    // </0 & Mu/4 (/5 'D'/9 'o'/10 'U'/11 'n'/12 'B'/13 'l'/14 'o'/15 'c'/16 'k'/17 '_'/18 'f'/19 'o'/20 'r'/21 'w'/22 'a'/23 'r'/24 'd'/25 )/6 e.eX#1/2 >/1
    context[7] = 0;
    context[8] = 0;
    if( ! refalrts::brackets_term( context[7], context[8], context[5] ) )
      continue;
    context[9] = refalrts::char_left( 'D', context[7], context[8] );
    if( ! context[9] )
      continue;
    context[10] = refalrts::char_left( 'o', context[7], context[8] );
    if( ! context[10] )
      continue;
    context[11] = refalrts::char_left( 'U', context[7], context[8] );
    if( ! context[11] )
      continue;
    context[12] = refalrts::char_left( 'n', context[7], context[8] );
    if( ! context[12] )
      continue;
    context[13] = refalrts::char_left( 'B', context[7], context[8] );
    if( ! context[13] )
      continue;
    context[14] = refalrts::char_left( 'l', context[7], context[8] );
    if( ! context[14] )
      continue;
    context[15] = refalrts::char_left( 'o', context[7], context[8] );
    if( ! context[15] )
      continue;
    context[16] = refalrts::char_left( 'c', context[7], context[8] );
    if( ! context[16] )
      continue;
    context[17] = refalrts::char_left( 'k', context[7], context[8] );
    if( ! context[17] )
      continue;
    context[18] = refalrts::char_left( '_', context[7], context[8] );
    if( ! context[18] )
      continue;
    context[19] = refalrts::char_left( 'f', context[7], context[8] );
    if( ! context[19] )
      continue;
    context[20] = refalrts::char_left( 'o', context[7], context[8] );
    if( ! context[20] )
      continue;
    context[21] = refalrts::char_left( 'r', context[7], context[8] );
    if( ! context[21] )
      continue;
    context[22] = refalrts::char_left( 'w', context[7], context[8] );
    if( ! context[22] )
      continue;
    context[23] = refalrts::char_left( 'a', context[7], context[8] );
    if( ! context[23] )
      continue;
    context[24] = refalrts::char_left( 'r', context[7], context[8] );
    if( ! context[24] )
      continue;
    context[25] = refalrts::char_left( 'd', context[7], context[8] );
    if( ! context[25] )
      continue;
    if( ! refalrts::empty_seq( context[7], context[8] ) )
      continue;
    // closed e.eX#1 as range 2
    //DEBUG: e.eX#1: 2

    refalrts::reset_allocator();
    //TRASH: {REMOVED TILE} </0 & Mu/4 (/5 'D'/9 'o'/10 'U'/11 'n'/12 'B'/13 'l'/14 'o'/15 'c'/16 'k'/17 '_'/18 'f'/19 'o'/20 'r'/21 'w'/22 'a'/23 'r'/24 {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ HalfReuse: </25 HalfReuse: & DoUnBlock_forward/6 AsIs: e.eX#1/2 AsIs: >/1 ]] }
    refalrts::reinit_open_call( context[25] );
    refalrts::reinit_name( context[6], ref_DoUnBlocku_forward.ref.function );
    refalrts::push_stack( context[1] );
    refalrts::push_stack( context[25] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[25];
    refalrts::splice_to_freelist_open( trash_prev, res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence();

  do {
    // # DoUnBlock_next e.idx
    // </0 & Mu/4 # DoUnBlock_next/5 e.eX#1/2 >/1
    if( ! refalrts::ident_term(  ident_DoUnBlocku_next, context[5] ) )
      continue;
    // closed e.eX#1 as range 2
    //DEBUG: e.eX#1: 2

    refalrts::reset_allocator();
    //TRASH: {REMOVED TILE} </0 {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ HalfReuse: </4 HalfReuse: & DoUnBlock_next/5 AsIs: e.eX#1/2 AsIs: >/1 ]] }
    refalrts::reinit_open_call( context[4] );
    refalrts::reinit_name( context[5], ref_DoUnBlocku_next.ref.function );
    refalrts::push_stack( context[1] );
    refalrts::push_stack( context[4] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[4];
    refalrts::splice_to_freelist_open( trash_prev, res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence();

  do {
    // ( 'DoUnBlock_next' ) e.idx
    // </0 & Mu/4 (/5 'D'/9 'o'/10 'U'/11 'n'/12 'B'/13 'l'/14 'o'/15 'c'/16 'k'/17 '_'/18 'n'/19 'e'/20 'x'/21 't'/22 )/6 e.eX#1/2 >/1
    context[7] = 0;
    context[8] = 0;
    if( ! refalrts::brackets_term( context[7], context[8], context[5] ) )
      continue;
    context[9] = refalrts::char_left( 'D', context[7], context[8] );
    if( ! context[9] )
      continue;
    context[10] = refalrts::char_left( 'o', context[7], context[8] );
    if( ! context[10] )
      continue;
    context[11] = refalrts::char_left( 'U', context[7], context[8] );
    if( ! context[11] )
      continue;
    context[12] = refalrts::char_left( 'n', context[7], context[8] );
    if( ! context[12] )
      continue;
    context[13] = refalrts::char_left( 'B', context[7], context[8] );
    if( ! context[13] )
      continue;
    context[14] = refalrts::char_left( 'l', context[7], context[8] );
    if( ! context[14] )
      continue;
    context[15] = refalrts::char_left( 'o', context[7], context[8] );
    if( ! context[15] )
      continue;
    context[16] = refalrts::char_left( 'c', context[7], context[8] );
    if( ! context[16] )
      continue;
    context[17] = refalrts::char_left( 'k', context[7], context[8] );
    if( ! context[17] )
      continue;
    context[18] = refalrts::char_left( '_', context[7], context[8] );
    if( ! context[18] )
      continue;
    context[19] = refalrts::char_left( 'n', context[7], context[8] );
    if( ! context[19] )
      continue;
    context[20] = refalrts::char_left( 'e', context[7], context[8] );
    if( ! context[20] )
      continue;
    context[21] = refalrts::char_left( 'x', context[7], context[8] );
    if( ! context[21] )
      continue;
    context[22] = refalrts::char_left( 't', context[7], context[8] );
    if( ! context[22] )
      continue;
    if( ! refalrts::empty_seq( context[7], context[8] ) )
      continue;
    // closed e.eX#1 as range 2
    //DEBUG: e.eX#1: 2

    refalrts::reset_allocator();
    //TRASH: {REMOVED TILE} </0 & Mu/4 (/5 'D'/9 'o'/10 'U'/11 'n'/12 'B'/13 'l'/14 'o'/15 'c'/16 'k'/17 '_'/18 'n'/19 'e'/20 'x'/21 {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ HalfReuse: </22 HalfReuse: & DoUnBlock_next/6 AsIs: e.eX#1/2 AsIs: >/1 ]] }
    refalrts::reinit_open_call( context[22] );
    refalrts::reinit_name( context[6], ref_DoUnBlocku_next.ref.function );
    refalrts::push_stack( context[1] );
    refalrts::push_stack( context[22] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[22];
    refalrts::splice_to_freelist_open( trash_prev, res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence();

  do {
    // # DoUnBlock_cont e.idx
    // </0 & Mu/4 # DoUnBlock_cont/5 e.eX#1/2 >/1
    if( ! refalrts::ident_term(  ident_DoUnBlocku_cont, context[5] ) )
      continue;
    // closed e.eX#1 as range 2
    //DEBUG: e.eX#1: 2

    refalrts::reset_allocator();
    //TRASH: {REMOVED TILE} </0 {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ HalfReuse: </4 HalfReuse: & DoUnBlock_cont/5 AsIs: e.eX#1/2 AsIs: >/1 ]] }
    refalrts::reinit_open_call( context[4] );
    refalrts::reinit_name( context[5], ref_DoUnBlocku_cont.ref.function );
    refalrts::push_stack( context[1] );
    refalrts::push_stack( context[4] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[4];
    refalrts::splice_to_freelist_open( trash_prev, res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence();

  do {
    // ( 'DoUnBlock_cont' ) e.idx
    // </0 & Mu/4 (/5 'D'/9 'o'/10 'U'/11 'n'/12 'B'/13 'l'/14 'o'/15 'c'/16 'k'/17 '_'/18 'c'/19 'o'/20 'n'/21 't'/22 )/6 e.eX#1/2 >/1
    context[7] = 0;
    context[8] = 0;
    if( ! refalrts::brackets_term( context[7], context[8], context[5] ) )
      continue;
    context[9] = refalrts::char_left( 'D', context[7], context[8] );
    if( ! context[9] )
      continue;
    context[10] = refalrts::char_left( 'o', context[7], context[8] );
    if( ! context[10] )
      continue;
    context[11] = refalrts::char_left( 'U', context[7], context[8] );
    if( ! context[11] )
      continue;
    context[12] = refalrts::char_left( 'n', context[7], context[8] );
    if( ! context[12] )
      continue;
    context[13] = refalrts::char_left( 'B', context[7], context[8] );
    if( ! context[13] )
      continue;
    context[14] = refalrts::char_left( 'l', context[7], context[8] );
    if( ! context[14] )
      continue;
    context[15] = refalrts::char_left( 'o', context[7], context[8] );
    if( ! context[15] )
      continue;
    context[16] = refalrts::char_left( 'c', context[7], context[8] );
    if( ! context[16] )
      continue;
    context[17] = refalrts::char_left( 'k', context[7], context[8] );
    if( ! context[17] )
      continue;
    context[18] = refalrts::char_left( '_', context[7], context[8] );
    if( ! context[18] )
      continue;
    context[19] = refalrts::char_left( 'c', context[7], context[8] );
    if( ! context[19] )
      continue;
    context[20] = refalrts::char_left( 'o', context[7], context[8] );
    if( ! context[20] )
      continue;
    context[21] = refalrts::char_left( 'n', context[7], context[8] );
    if( ! context[21] )
      continue;
    context[22] = refalrts::char_left( 't', context[7], context[8] );
    if( ! context[22] )
      continue;
    if( ! refalrts::empty_seq( context[7], context[8] ) )
      continue;
    // closed e.eX#1 as range 2
    //DEBUG: e.eX#1: 2

    refalrts::reset_allocator();
    //TRASH: {REMOVED TILE} </0 & Mu/4 (/5 'D'/9 'o'/10 'U'/11 'n'/12 'B'/13 'l'/14 'o'/15 'c'/16 'k'/17 '_'/18 'c'/19 'o'/20 'n'/21 {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ HalfReuse: </22 HalfReuse: & DoUnBlock_cont/6 AsIs: e.eX#1/2 AsIs: >/1 ]] }
    refalrts::reinit_open_call( context[22] );
    refalrts::reinit_name( context[6], ref_DoUnBlocku_cont.ref.function );
    refalrts::push_stack( context[1] );
    refalrts::push_stack( context[22] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[22];
    refalrts::splice_to_freelist_open( trash_prev, res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence();

  do {
    // # DoUnBlock_check0 e.idx
    // </0 & Mu/4 # DoUnBlock_check0/5 e.eX#1/2 >/1
    if( ! refalrts::ident_term(  ident_DoUnBlocku_check0, context[5] ) )
      continue;
    // closed e.eX#1 as range 2
    //DEBUG: e.eX#1: 2

    refalrts::reset_allocator();
    //TRASH: {REMOVED TILE} </0 {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ HalfReuse: </4 HalfReuse: & DoUnBlock_check0/5 AsIs: e.eX#1/2 AsIs: >/1 ]] }
    refalrts::reinit_open_call( context[4] );
    refalrts::reinit_name( context[5], ref_DoUnBlocku_check0.ref.function );
    refalrts::push_stack( context[1] );
    refalrts::push_stack( context[4] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[4];
    refalrts::splice_to_freelist_open( trash_prev, res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence();

  do {
    // ( 'DoUnBlock_check0' ) e.idx
    // </0 & Mu/4 (/5 'D'/9 'o'/10 'U'/11 'n'/12 'B'/13 'l'/14 'o'/15 'c'/16 'k'/17 '_'/18 'c'/19 'h'/20 'e'/21 'c'/22 'k'/23 '0'/24 )/6 e.eX#1/2 >/1
    context[7] = 0;
    context[8] = 0;
    if( ! refalrts::brackets_term( context[7], context[8], context[5] ) )
      continue;
    context[9] = refalrts::char_left( 'D', context[7], context[8] );
    if( ! context[9] )
      continue;
    context[10] = refalrts::char_left( 'o', context[7], context[8] );
    if( ! context[10] )
      continue;
    context[11] = refalrts::char_left( 'U', context[7], context[8] );
    if( ! context[11] )
      continue;
    context[12] = refalrts::char_left( 'n', context[7], context[8] );
    if( ! context[12] )
      continue;
    context[13] = refalrts::char_left( 'B', context[7], context[8] );
    if( ! context[13] )
      continue;
    context[14] = refalrts::char_left( 'l', context[7], context[8] );
    if( ! context[14] )
      continue;
    context[15] = refalrts::char_left( 'o', context[7], context[8] );
    if( ! context[15] )
      continue;
    context[16] = refalrts::char_left( 'c', context[7], context[8] );
    if( ! context[16] )
      continue;
    context[17] = refalrts::char_left( 'k', context[7], context[8] );
    if( ! context[17] )
      continue;
    context[18] = refalrts::char_left( '_', context[7], context[8] );
    if( ! context[18] )
      continue;
    context[19] = refalrts::char_left( 'c', context[7], context[8] );
    if( ! context[19] )
      continue;
    context[20] = refalrts::char_left( 'h', context[7], context[8] );
    if( ! context[20] )
      continue;
    context[21] = refalrts::char_left( 'e', context[7], context[8] );
    if( ! context[21] )
      continue;
    context[22] = refalrts::char_left( 'c', context[7], context[8] );
    if( ! context[22] )
      continue;
    context[23] = refalrts::char_left( 'k', context[7], context[8] );
    if( ! context[23] )
      continue;
    context[24] = refalrts::char_left( '0', context[7], context[8] );
    if( ! context[24] )
      continue;
    if( ! refalrts::empty_seq( context[7], context[8] ) )
      continue;
    // closed e.eX#1 as range 2
    //DEBUG: e.eX#1: 2

    refalrts::reset_allocator();
    //TRASH: {REMOVED TILE} </0 & Mu/4 (/5 'D'/9 'o'/10 'U'/11 'n'/12 'B'/13 'l'/14 'o'/15 'c'/16 'k'/17 '_'/18 'c'/19 'h'/20 'e'/21 'c'/22 'k'/23 {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ HalfReuse: </24 HalfReuse: & DoUnBlock_check0/6 AsIs: e.eX#1/2 AsIs: >/1 ]] }
    refalrts::reinit_open_call( context[24] );
    refalrts::reinit_name( context[6], ref_DoUnBlocku_check0.ref.function );
    refalrts::push_stack( context[1] );
    refalrts::push_stack( context[24] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[24];
    refalrts::splice_to_freelist_open( trash_prev, res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence();

  do {
    // # DoUnBlock_cont0 e.idx
    // </0 & Mu/4 # DoUnBlock_cont0/5 e.eX#1/2 >/1
    if( ! refalrts::ident_term(  ident_DoUnBlocku_cont0, context[5] ) )
      continue;
    // closed e.eX#1 as range 2
    //DEBUG: e.eX#1: 2

    refalrts::reset_allocator();
    //TRASH: {REMOVED TILE} </0 {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ HalfReuse: </4 HalfReuse: & DoUnBlock_cont0/5 AsIs: e.eX#1/2 AsIs: >/1 ]] }
    refalrts::reinit_open_call( context[4] );
    refalrts::reinit_name( context[5], ref_DoUnBlocku_cont0.ref.function );
    refalrts::push_stack( context[1] );
    refalrts::push_stack( context[4] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[4];
    refalrts::splice_to_freelist_open( trash_prev, res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence();

  do {
    // ( 'DoUnBlock_cont0' ) e.idx
    // </0 & Mu/4 (/5 'D'/9 'o'/10 'U'/11 'n'/12 'B'/13 'l'/14 'o'/15 'c'/16 'k'/17 '_'/18 'c'/19 'o'/20 'n'/21 't'/22 '0'/23 )/6 e.eX#1/2 >/1
    context[7] = 0;
    context[8] = 0;
    if( ! refalrts::brackets_term( context[7], context[8], context[5] ) )
      continue;
    context[9] = refalrts::char_left( 'D', context[7], context[8] );
    if( ! context[9] )
      continue;
    context[10] = refalrts::char_left( 'o', context[7], context[8] );
    if( ! context[10] )
      continue;
    context[11] = refalrts::char_left( 'U', context[7], context[8] );
    if( ! context[11] )
      continue;
    context[12] = refalrts::char_left( 'n', context[7], context[8] );
    if( ! context[12] )
      continue;
    context[13] = refalrts::char_left( 'B', context[7], context[8] );
    if( ! context[13] )
      continue;
    context[14] = refalrts::char_left( 'l', context[7], context[8] );
    if( ! context[14] )
      continue;
    context[15] = refalrts::char_left( 'o', context[7], context[8] );
    if( ! context[15] )
      continue;
    context[16] = refalrts::char_left( 'c', context[7], context[8] );
    if( ! context[16] )
      continue;
    context[17] = refalrts::char_left( 'k', context[7], context[8] );
    if( ! context[17] )
      continue;
    context[18] = refalrts::char_left( '_', context[7], context[8] );
    if( ! context[18] )
      continue;
    context[19] = refalrts::char_left( 'c', context[7], context[8] );
    if( ! context[19] )
      continue;
    context[20] = refalrts::char_left( 'o', context[7], context[8] );
    if( ! context[20] )
      continue;
    context[21] = refalrts::char_left( 'n', context[7], context[8] );
    if( ! context[21] )
      continue;
    context[22] = refalrts::char_left( 't', context[7], context[8] );
    if( ! context[22] )
      continue;
    context[23] = refalrts::char_left( '0', context[7], context[8] );
    if( ! context[23] )
      continue;
    if( ! refalrts::empty_seq( context[7], context[8] ) )
      continue;
    // closed e.eX#1 as range 2
    //DEBUG: e.eX#1: 2

    refalrts::reset_allocator();
    //TRASH: {REMOVED TILE} </0 & Mu/4 (/5 'D'/9 'o'/10 'U'/11 'n'/12 'B'/13 'l'/14 'o'/15 'c'/16 'k'/17 '_'/18 'c'/19 'o'/20 'n'/21 't'/22 {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ HalfReuse: </23 HalfReuse: & DoUnBlock_cont0/6 AsIs: e.eX#1/2 AsIs: >/1 ]] }
    refalrts::reinit_open_call( context[23] );
    refalrts::reinit_name( context[6], ref_DoUnBlocku_cont0.ref.function );
    refalrts::push_stack( context[1] );
    refalrts::push_stack( context[23] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[23];
    refalrts::splice_to_freelist_open( trash_prev, res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence();

  do {
    // # DoUnBlock_check1 e.idx
    // </0 & Mu/4 # DoUnBlock_check1/5 e.eX#1/2 >/1
    if( ! refalrts::ident_term(  ident_DoUnBlocku_check1, context[5] ) )
      continue;
    // closed e.eX#1 as range 2
    //DEBUG: e.eX#1: 2

    refalrts::reset_allocator();
    //TRASH: {REMOVED TILE} </0 {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ HalfReuse: </4 HalfReuse: & DoUnBlock_check1/5 AsIs: e.eX#1/2 AsIs: >/1 ]] }
    refalrts::reinit_open_call( context[4] );
    refalrts::reinit_name( context[5], ref_DoUnBlocku_check1.ref.function );
    refalrts::push_stack( context[1] );
    refalrts::push_stack( context[4] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[4];
    refalrts::splice_to_freelist_open( trash_prev, res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence();

  do {
    // ( 'DoUnBlock_check1' ) e.idx
    // </0 & Mu/4 (/5 'D'/9 'o'/10 'U'/11 'n'/12 'B'/13 'l'/14 'o'/15 'c'/16 'k'/17 '_'/18 'c'/19 'h'/20 'e'/21 'c'/22 'k'/23 '1'/24 )/6 e.eX#1/2 >/1
    context[7] = 0;
    context[8] = 0;
    if( ! refalrts::brackets_term( context[7], context[8], context[5] ) )
      continue;
    context[9] = refalrts::char_left( 'D', context[7], context[8] );
    if( ! context[9] )
      continue;
    context[10] = refalrts::char_left( 'o', context[7], context[8] );
    if( ! context[10] )
      continue;
    context[11] = refalrts::char_left( 'U', context[7], context[8] );
    if( ! context[11] )
      continue;
    context[12] = refalrts::char_left( 'n', context[7], context[8] );
    if( ! context[12] )
      continue;
    context[13] = refalrts::char_left( 'B', context[7], context[8] );
    if( ! context[13] )
      continue;
    context[14] = refalrts::char_left( 'l', context[7], context[8] );
    if( ! context[14] )
      continue;
    context[15] = refalrts::char_left( 'o', context[7], context[8] );
    if( ! context[15] )
      continue;
    context[16] = refalrts::char_left( 'c', context[7], context[8] );
    if( ! context[16] )
      continue;
    context[17] = refalrts::char_left( 'k', context[7], context[8] );
    if( ! context[17] )
      continue;
    context[18] = refalrts::char_left( '_', context[7], context[8] );
    if( ! context[18] )
      continue;
    context[19] = refalrts::char_left( 'c', context[7], context[8] );
    if( ! context[19] )
      continue;
    context[20] = refalrts::char_left( 'h', context[7], context[8] );
    if( ! context[20] )
      continue;
    context[21] = refalrts::char_left( 'e', context[7], context[8] );
    if( ! context[21] )
      continue;
    context[22] = refalrts::char_left( 'c', context[7], context[8] );
    if( ! context[22] )
      continue;
    context[23] = refalrts::char_left( 'k', context[7], context[8] );
    if( ! context[23] )
      continue;
    context[24] = refalrts::char_left( '1', context[7], context[8] );
    if( ! context[24] )
      continue;
    if( ! refalrts::empty_seq( context[7], context[8] ) )
      continue;
    // closed e.eX#1 as range 2
    //DEBUG: e.eX#1: 2

    refalrts::reset_allocator();
    //TRASH: {REMOVED TILE} </0 & Mu/4 (/5 'D'/9 'o'/10 'U'/11 'n'/12 'B'/13 'l'/14 'o'/15 'c'/16 'k'/17 '_'/18 'c'/19 'h'/20 'e'/21 'c'/22 'k'/23 {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ HalfReuse: </24 HalfReuse: & DoUnBlock_check1/6 AsIs: e.eX#1/2 AsIs: >/1 ]] }
    refalrts::reinit_open_call( context[24] );
    refalrts::reinit_name( context[6], ref_DoUnBlocku_check1.ref.function );
    refalrts::push_stack( context[1] );
    refalrts::push_stack( context[24] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[24];
    refalrts::splice_to_freelist_open( trash_prev, res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence();

  do {
    // # DoUnBlock_cont1 e.idx
    // </0 & Mu/4 # DoUnBlock_cont1/5 e.eX#1/2 >/1
    if( ! refalrts::ident_term(  ident_DoUnBlocku_cont1, context[5] ) )
      continue;
    // closed e.eX#1 as range 2
    //DEBUG: e.eX#1: 2

    refalrts::reset_allocator();
    //TRASH: {REMOVED TILE} </0 {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ HalfReuse: </4 HalfReuse: & DoUnBlock_cont1/5 AsIs: e.eX#1/2 AsIs: >/1 ]] }
    refalrts::reinit_open_call( context[4] );
    refalrts::reinit_name( context[5], ref_DoUnBlocku_cont1.ref.function );
    refalrts::push_stack( context[1] );
    refalrts::push_stack( context[4] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[4];
    refalrts::splice_to_freelist_open( trash_prev, res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence();

  do {
    // ( 'DoUnBlock_cont1' ) e.idx
    // </0 & Mu/4 (/5 'D'/9 'o'/10 'U'/11 'n'/12 'B'/13 'l'/14 'o'/15 'c'/16 'k'/17 '_'/18 'c'/19 'o'/20 'n'/21 't'/22 '1'/23 )/6 e.eX#1/2 >/1
    context[7] = 0;
    context[8] = 0;
    if( ! refalrts::brackets_term( context[7], context[8], context[5] ) )
      continue;
    context[9] = refalrts::char_left( 'D', context[7], context[8] );
    if( ! context[9] )
      continue;
    context[10] = refalrts::char_left( 'o', context[7], context[8] );
    if( ! context[10] )
      continue;
    context[11] = refalrts::char_left( 'U', context[7], context[8] );
    if( ! context[11] )
      continue;
    context[12] = refalrts::char_left( 'n', context[7], context[8] );
    if( ! context[12] )
      continue;
    context[13] = refalrts::char_left( 'B', context[7], context[8] );
    if( ! context[13] )
      continue;
    context[14] = refalrts::char_left( 'l', context[7], context[8] );
    if( ! context[14] )
      continue;
    context[15] = refalrts::char_left( 'o', context[7], context[8] );
    if( ! context[15] )
      continue;
    context[16] = refalrts::char_left( 'c', context[7], context[8] );
    if( ! context[16] )
      continue;
    context[17] = refalrts::char_left( 'k', context[7], context[8] );
    if( ! context[17] )
      continue;
    context[18] = refalrts::char_left( '_', context[7], context[8] );
    if( ! context[18] )
      continue;
    context[19] = refalrts::char_left( 'c', context[7], context[8] );
    if( ! context[19] )
      continue;
    context[20] = refalrts::char_left( 'o', context[7], context[8] );
    if( ! context[20] )
      continue;
    context[21] = refalrts::char_left( 'n', context[7], context[8] );
    if( ! context[21] )
      continue;
    context[22] = refalrts::char_left( 't', context[7], context[8] );
    if( ! context[22] )
      continue;
    context[23] = refalrts::char_left( '1', context[7], context[8] );
    if( ! context[23] )
      continue;
    if( ! refalrts::empty_seq( context[7], context[8] ) )
      continue;
    // closed e.eX#1 as range 2
    //DEBUG: e.eX#1: 2

    refalrts::reset_allocator();
    //TRASH: {REMOVED TILE} </0 & Mu/4 (/5 'D'/9 'o'/10 'U'/11 'n'/12 'B'/13 'l'/14 'o'/15 'c'/16 'k'/17 '_'/18 'c'/19 'o'/20 'n'/21 't'/22 {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ HalfReuse: </23 HalfReuse: & DoUnBlock_cont1/6 AsIs: e.eX#1/2 AsIs: >/1 ]] }
    refalrts::reinit_open_call( context[23] );
    refalrts::reinit_name( context[6], ref_DoUnBlocku_cont1.ref.function );
    refalrts::push_stack( context[1] );
    refalrts::push_stack( context[23] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[23];
    refalrts::splice_to_freelist_open( trash_prev, res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence();

  do {
    // # DoUnBlock-NextFunction e.idx
    // </0 & Mu/4 # DoUnBlock-NextFunction/5 e.eX#1/2 >/1
    if( ! refalrts::ident_term(  ident_DoUnBlockm_NextFunction, context[5] ) )
      continue;
    // closed e.eX#1 as range 2
    //DEBUG: e.eX#1: 2

    refalrts::reset_allocator();
    //TRASH: {REMOVED TILE} </0 {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ HalfReuse: </4 HalfReuse: & DoUnBlock-NextFunction/5 AsIs: e.eX#1/2 AsIs: >/1 ]] }
    refalrts::reinit_open_call( context[4] );
    refalrts::reinit_name( context[5], ref_DoUnBlockm_NextFunction.ref.function );
    refalrts::push_stack( context[1] );
    refalrts::push_stack( context[4] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[4];
    refalrts::splice_to_freelist_open( trash_prev, res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence();

  do {
    // ( 'DoUnBlock-NextFunction' ) e.idx
    // </0 & Mu/4 (/5 'D'/9 'o'/10 'U'/11 'n'/12 'B'/13 'l'/14 'o'/15 'c'/16 'k'/17 '-'/18 'N'/19 'e'/20 'x'/21 't'/22 'F'/23 'u'/24 'n'/25 'c'/26 't'/27 'i'/28 'o'/29 'n'/30 )/6 e.eX#1/2 >/1
    context[7] = 0;
    context[8] = 0;
    if( ! refalrts::brackets_term( context[7], context[8], context[5] ) )
      continue;
    context[9] = refalrts::char_left( 'D', context[7], context[8] );
    if( ! context[9] )
      continue;
    context[10] = refalrts::char_left( 'o', context[7], context[8] );
    if( ! context[10] )
      continue;
    context[11] = refalrts::char_left( 'U', context[7], context[8] );
    if( ! context[11] )
      continue;
    context[12] = refalrts::char_left( 'n', context[7], context[8] );
    if( ! context[12] )
      continue;
    context[13] = refalrts::char_left( 'B', context[7], context[8] );
    if( ! context[13] )
      continue;
    context[14] = refalrts::char_left( 'l', context[7], context[8] );
    if( ! context[14] )
      continue;
    context[15] = refalrts::char_left( 'o', context[7], context[8] );
    if( ! context[15] )
      continue;
    context[16] = refalrts::char_left( 'c', context[7], context[8] );
    if( ! context[16] )
      continue;
    context[17] = refalrts::char_left( 'k', context[7], context[8] );
    if( ! context[17] )
      continue;
    context[18] = refalrts::char_left( '-', context[7], context[8] );
    if( ! context[18] )
      continue;
    context[19] = refalrts::char_left( 'N', context[7], context[8] );
    if( ! context[19] )
      continue;
    context[20] = refalrts::char_left( 'e', context[7], context[8] );
    if( ! context[20] )
      continue;
    context[21] = refalrts::char_left( 'x', context[7], context[8] );
    if( ! context[21] )
      continue;
    context[22] = refalrts::char_left( 't', context[7], context[8] );
    if( ! context[22] )
      continue;
    context[23] = refalrts::char_left( 'F', context[7], context[8] );
    if( ! context[23] )
      continue;
    context[24] = refalrts::char_left( 'u', context[7], context[8] );
    if( ! context[24] )
      continue;
    context[25] = refalrts::char_left( 'n', context[7], context[8] );
    if( ! context[25] )
      continue;
    context[26] = refalrts::char_left( 'c', context[7], context[8] );
    if( ! context[26] )
      continue;
    context[27] = refalrts::char_left( 't', context[7], context[8] );
    if( ! context[27] )
      continue;
    context[28] = refalrts::char_left( 'i', context[7], context[8] );
    if( ! context[28] )
      continue;
    context[29] = refalrts::char_left( 'o', context[7], context[8] );
    if( ! context[29] )
      continue;
    context[30] = refalrts::char_left( 'n', context[7], context[8] );
    if( ! context[30] )
      continue;
    if( ! refalrts::empty_seq( context[7], context[8] ) )
      continue;
    // closed e.eX#1 as range 2
    //DEBUG: e.eX#1: 2

    refalrts::reset_allocator();
    //TRASH: {REMOVED TILE} </0 & Mu/4 (/5 'D'/9 'o'/10 'U'/11 'n'/12 'B'/13 'l'/14 'o'/15 'c'/16 'k'/17 '-'/18 'N'/19 'e'/20 'x'/21 't'/22 'F'/23 'u'/24 'n'/25 'c'/26 't'/27 'i'/28 'o'/29 {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ HalfReuse: </30 HalfReuse: & DoUnBlock-NextFunction/6 AsIs: e.eX#1/2 AsIs: >/1 ]] }
    refalrts::reinit_open_call( context[30] );
    refalrts::reinit_name( context[6], ref_DoUnBlockm_NextFunction.ref.function );
    refalrts::push_stack( context[1] );
    refalrts::push_stack( context[30] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[30];
    refalrts::splice_to_freelist_open( trash_prev, res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence();

  do {
    // # WithBlock e.idx
    // </0 & Mu/4 # WithBlock/5 e.eX#1/2 >/1
    if( ! refalrts::ident_term(  ident_WithBlock, context[5] ) )
      continue;
    // closed e.eX#1 as range 2
    //DEBUG: e.eX#1: 2

    refalrts::reset_allocator();
    //TRASH: {REMOVED TILE} </0 {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ HalfReuse: </4 HalfReuse: & WithBlock/5 AsIs: e.eX#1/2 AsIs: >/1 ]] }
    refalrts::reinit_open_call( context[4] );
    refalrts::reinit_name( context[5], ref_WithBlock.ref.function );
    refalrts::push_stack( context[1] );
    refalrts::push_stack( context[4] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[4];
    refalrts::splice_to_freelist_open( trash_prev, res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence();

  do {
    // ( 'WithBlock' ) e.idx
    // </0 & Mu/4 (/5 'W'/9 'i'/10 't'/11 'h'/12 'B'/13 'l'/14 'o'/15 'c'/16 'k'/17 )/6 e.eX#1/2 >/1
    context[7] = 0;
    context[8] = 0;
    if( ! refalrts::brackets_term( context[7], context[8], context[5] ) )
      continue;
    context[9] = refalrts::char_left( 'W', context[7], context[8] );
    if( ! context[9] )
      continue;
    context[10] = refalrts::char_left( 'i', context[7], context[8] );
    if( ! context[10] )
      continue;
    context[11] = refalrts::char_left( 't', context[7], context[8] );
    if( ! context[11] )
      continue;
    context[12] = refalrts::char_left( 'h', context[7], context[8] );
    if( ! context[12] )
      continue;
    context[13] = refalrts::char_left( 'B', context[7], context[8] );
    if( ! context[13] )
      continue;
    context[14] = refalrts::char_left( 'l', context[7], context[8] );
    if( ! context[14] )
      continue;
    context[15] = refalrts::char_left( 'o', context[7], context[8] );
    if( ! context[15] )
      continue;
    context[16] = refalrts::char_left( 'c', context[7], context[8] );
    if( ! context[16] )
      continue;
    context[17] = refalrts::char_left( 'k', context[7], context[8] );
    if( ! context[17] )
      continue;
    if( ! refalrts::empty_seq( context[7], context[8] ) )
      continue;
    // closed e.eX#1 as range 2
    //DEBUG: e.eX#1: 2

    refalrts::reset_allocator();
    //TRASH: {REMOVED TILE} </0 & Mu/4 (/5 'W'/9 'i'/10 't'/11 'h'/12 'B'/13 'l'/14 'o'/15 'c'/16 {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ HalfReuse: </17 HalfReuse: & WithBlock/6 AsIs: e.eX#1/2 AsIs: >/1 ]] }
    refalrts::reinit_open_call( context[17] );
    refalrts::reinit_name( context[6], ref_WithBlock.ref.function );
    refalrts::push_stack( context[1] );
    refalrts::push_stack( context[17] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[17];
    refalrts::splice_to_freelist_open( trash_prev, res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence();

  do {
    // # DoWithBlock e.idx
    // </0 & Mu/4 # DoWithBlock/5 e.eX#1/2 >/1
    if( ! refalrts::ident_term(  ident_DoWithBlock, context[5] ) )
      continue;
    // closed e.eX#1 as range 2
    //DEBUG: e.eX#1: 2

    refalrts::reset_allocator();
    //TRASH: {REMOVED TILE} </0 {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ HalfReuse: </4 HalfReuse: & DoWithBlock/5 AsIs: e.eX#1/2 AsIs: >/1 ]] }
    refalrts::reinit_open_call( context[4] );
    refalrts::reinit_name( context[5], ref_DoWithBlock.ref.function );
    refalrts::push_stack( context[1] );
    refalrts::push_stack( context[4] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[4];
    refalrts::splice_to_freelist_open( trash_prev, res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence();

  do {
    // ( 'DoWithBlock' ) e.idx
    // </0 & Mu/4 (/5 'D'/9 'o'/10 'W'/11 'i'/12 't'/13 'h'/14 'B'/15 'l'/16 'o'/17 'c'/18 'k'/19 )/6 e.eX#1/2 >/1
    context[7] = 0;
    context[8] = 0;
    if( ! refalrts::brackets_term( context[7], context[8], context[5] ) )
      continue;
    context[9] = refalrts::char_left( 'D', context[7], context[8] );
    if( ! context[9] )
      continue;
    context[10] = refalrts::char_left( 'o', context[7], context[8] );
    if( ! context[10] )
      continue;
    context[11] = refalrts::char_left( 'W', context[7], context[8] );
    if( ! context[11] )
      continue;
    context[12] = refalrts::char_left( 'i', context[7], context[8] );
    if( ! context[12] )
      continue;
    context[13] = refalrts::char_left( 't', context[7], context[8] );
    if( ! context[13] )
      continue;
    context[14] = refalrts::char_left( 'h', context[7], context[8] );
    if( ! context[14] )
      continue;
    context[15] = refalrts::char_left( 'B', context[7], context[8] );
    if( ! context[15] )
      continue;
    context[16] = refalrts::char_left( 'l', context[7], context[8] );
    if( ! context[16] )
      continue;
    context[17] = refalrts::char_left( 'o', context[7], context[8] );
    if( ! context[17] )
      continue;
    context[18] = refalrts::char_left( 'c', context[7], context[8] );
    if( ! context[18] )
      continue;
    context[19] = refalrts::char_left( 'k', context[7], context[8] );
    if( ! context[19] )
      continue;
    if( ! refalrts::empty_seq( context[7], context[8] ) )
      continue;
    // closed e.eX#1 as range 2
    //DEBUG: e.eX#1: 2

    refalrts::reset_allocator();
    //TRASH: {REMOVED TILE} </0 & Mu/4 (/5 'D'/9 'o'/10 'W'/11 'i'/12 't'/13 'h'/14 'B'/15 'l'/16 'o'/17 'c'/18 {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ HalfReuse: </19 HalfReuse: & DoWithBlock/6 AsIs: e.eX#1/2 AsIs: >/1 ]] }
    refalrts::reinit_open_call( context[19] );
    refalrts::reinit_name( context[6], ref_DoWithBlock.ref.function );
    refalrts::push_stack( context[1] );
    refalrts::push_stack( context[19] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[19];
    refalrts::splice_to_freelist_open( trash_prev, res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence();

  do {
    // # BlockScopeVars e.idx
    // </0 & Mu/4 # BlockScopeVars/5 e.eX#1/2 >/1
    if( ! refalrts::ident_term(  ident_BlockScopeVars, context[5] ) )
      continue;
    // closed e.eX#1 as range 2
    //DEBUG: e.eX#1: 2

    refalrts::reset_allocator();
    //TRASH: {REMOVED TILE} </0 {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ HalfReuse: </4 HalfReuse: & BlockScopeVars/5 AsIs: e.eX#1/2 AsIs: >/1 ]] }
    refalrts::reinit_open_call( context[4] );
    refalrts::reinit_name( context[5], ref_BlockScopeVars.ref.function );
    refalrts::push_stack( context[1] );
    refalrts::push_stack( context[4] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[4];
    refalrts::splice_to_freelist_open( trash_prev, res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence();

  do {
    // ( 'BlockScopeVars' ) e.idx
    // </0 & Mu/4 (/5 'B'/9 'l'/10 'o'/11 'c'/12 'k'/13 'S'/14 'c'/15 'o'/16 'p'/17 'e'/18 'V'/19 'a'/20 'r'/21 's'/22 )/6 e.eX#1/2 >/1
    context[7] = 0;
    context[8] = 0;
    if( ! refalrts::brackets_term( context[7], context[8], context[5] ) )
      continue;
    context[9] = refalrts::char_left( 'B', context[7], context[8] );
    if( ! context[9] )
      continue;
    context[10] = refalrts::char_left( 'l', context[7], context[8] );
    if( ! context[10] )
      continue;
    context[11] = refalrts::char_left( 'o', context[7], context[8] );
    if( ! context[11] )
      continue;
    context[12] = refalrts::char_left( 'c', context[7], context[8] );
    if( ! context[12] )
      continue;
    context[13] = refalrts::char_left( 'k', context[7], context[8] );
    if( ! context[13] )
      continue;
    context[14] = refalrts::char_left( 'S', context[7], context[8] );
    if( ! context[14] )
      continue;
    context[15] = refalrts::char_left( 'c', context[7], context[8] );
    if( ! context[15] )
      continue;
    context[16] = refalrts::char_left( 'o', context[7], context[8] );
    if( ! context[16] )
      continue;
    context[17] = refalrts::char_left( 'p', context[7], context[8] );
    if( ! context[17] )
      continue;
    context[18] = refalrts::char_left( 'e', context[7], context[8] );
    if( ! context[18] )
      continue;
    context[19] = refalrts::char_left( 'V', context[7], context[8] );
    if( ! context[19] )
      continue;
    context[20] = refalrts::char_left( 'a', context[7], context[8] );
    if( ! context[20] )
      continue;
    context[21] = refalrts::char_left( 'r', context[7], context[8] );
    if( ! context[21] )
      continue;
    context[22] = refalrts::char_left( 's', context[7], context[8] );
    if( ! context[22] )
      continue;
    if( ! refalrts::empty_seq( context[7], context[8] ) )
      continue;
    // closed e.eX#1 as range 2
    //DEBUG: e.eX#1: 2

    refalrts::reset_allocator();
    //TRASH: {REMOVED TILE} </0 & Mu/4 (/5 'B'/9 'l'/10 'o'/11 'c'/12 'k'/13 'S'/14 'c'/15 'o'/16 'p'/17 'e'/18 'V'/19 'a'/20 'r'/21 {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ HalfReuse: </22 HalfReuse: & BlockScopeVars/6 AsIs: e.eX#1/2 AsIs: >/1 ]] }
    refalrts::reinit_open_call( context[22] );
    refalrts::reinit_name( context[6], ref_BlockScopeVars.ref.function );
    refalrts::push_stack( context[1] );
    refalrts::push_stack( context[22] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[22];
    refalrts::splice_to_freelist_open( trash_prev, res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence();

  do {
    // # transformer_MakeVariables e.idx
    // </0 & Mu/4 # transformer_MakeVariables/5 e.eX#1/2 >/1
    if( ! refalrts::ident_term(  ident_transformeru_MakeVariables, context[5] ) )
      continue;
    // closed e.eX#1 as range 2
    //DEBUG: e.eX#1: 2

    refalrts::reset_allocator();
    //TRASH: {REMOVED TILE} </0 {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ HalfReuse: </4 HalfReuse: & transformer_MakeVariables/5 AsIs: e.eX#1/2 AsIs: >/1 ]] }
    refalrts::reinit_open_call( context[4] );
    refalrts::reinit_name( context[5], ref_transformeru_MakeVariables.ref.function );
    refalrts::push_stack( context[1] );
    refalrts::push_stack( context[4] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[4];
    refalrts::splice_to_freelist_open( trash_prev, res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence();

  do {
    // ( 'transformer_MakeVariables' ) e.idx
    // </0 & Mu/4 (/5 't'/9 'r'/10 'a'/11 'n'/12 's'/13 'f'/14 'o'/15 'r'/16 'm'/17 'e'/18 'r'/19 '_'/20 'M'/21 'a'/22 'k'/23 'e'/24 'V'/25 'a'/26 'r'/27 'i'/28 'a'/29 'b'/30 'l'/31 'e'/32 's'/33 )/6 e.eX#1/2 >/1
    context[7] = 0;
    context[8] = 0;
    if( ! refalrts::brackets_term( context[7], context[8], context[5] ) )
      continue;
    context[9] = refalrts::char_left( 't', context[7], context[8] );
    if( ! context[9] )
      continue;
    context[10] = refalrts::char_left( 'r', context[7], context[8] );
    if( ! context[10] )
      continue;
    context[11] = refalrts::char_left( 'a', context[7], context[8] );
    if( ! context[11] )
      continue;
    context[12] = refalrts::char_left( 'n', context[7], context[8] );
    if( ! context[12] )
      continue;
    context[13] = refalrts::char_left( 's', context[7], context[8] );
    if( ! context[13] )
      continue;
    context[14] = refalrts::char_left( 'f', context[7], context[8] );
    if( ! context[14] )
      continue;
    context[15] = refalrts::char_left( 'o', context[7], context[8] );
    if( ! context[15] )
      continue;
    context[16] = refalrts::char_left( 'r', context[7], context[8] );
    if( ! context[16] )
      continue;
    context[17] = refalrts::char_left( 'm', context[7], context[8] );
    if( ! context[17] )
      continue;
    context[18] = refalrts::char_left( 'e', context[7], context[8] );
    if( ! context[18] )
      continue;
    context[19] = refalrts::char_left( 'r', context[7], context[8] );
    if( ! context[19] )
      continue;
    context[20] = refalrts::char_left( '_', context[7], context[8] );
    if( ! context[20] )
      continue;
    context[21] = refalrts::char_left( 'M', context[7], context[8] );
    if( ! context[21] )
      continue;
    context[22] = refalrts::char_left( 'a', context[7], context[8] );
    if( ! context[22] )
      continue;
    context[23] = refalrts::char_left( 'k', context[7], context[8] );
    if( ! context[23] )
      continue;
    context[24] = refalrts::char_left( 'e', context[7], context[8] );
    if( ! context[24] )
      continue;
    context[25] = refalrts::char_left( 'V', context[7], context[8] );
    if( ! context[25] )
      continue;
    context[26] = refalrts::char_left( 'a', context[7], context[8] );
    if( ! context[26] )
      continue;
    context[27] = refalrts::char_left( 'r', context[7], context[8] );
    if( ! context[27] )
      continue;
    context[28] = refalrts::char_left( 'i', context[7], context[8] );
    if( ! context[28] )
      continue;
    context[29] = refalrts::char_left( 'a', context[7], context[8] );
    if( ! context[29] )
      continue;
    context[30] = refalrts::char_left( 'b', context[7], context[8] );
    if( ! context[30] )
      continue;
    context[31] = refalrts::char_left( 'l', context[7], context[8] );
    if( ! context[31] )
      continue;
    context[32] = refalrts::char_left( 'e', context[7], context[8] );
    if( ! context[32] )
      continue;
    context[33] = refalrts::char_left( 's', context[7], context[8] );
    if( ! context[33] )
      continue;
    if( ! refalrts::empty_seq( context[7], context[8] ) )
      continue;
    // closed e.eX#1 as range 2
    //DEBUG: e.eX#1: 2

    refalrts::reset_allocator();
    //TRASH: {REMOVED TILE} </0 & Mu/4 (/5 't'/9 'r'/10 'a'/11 'n'/12 's'/13 'f'/14 'o'/15 'r'/16 'm'/17 'e'/18 'r'/19 '_'/20 'M'/21 'a'/22 'k'/23 'e'/24 'V'/25 'a'/26 'r'/27 'i'/28 'a'/29 'b'/30 'l'/31 'e'/32 {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ HalfReuse: </33 HalfReuse: & transformer_MakeVariables/6 AsIs: e.eX#1/2 AsIs: >/1 ]] }
    refalrts::reinit_open_call( context[33] );
    refalrts::reinit_name( context[6], ref_transformeru_MakeVariables.ref.function );
    refalrts::push_stack( context[1] );
    refalrts::push_stack( context[33] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[33];
    refalrts::splice_to_freelist_open( trash_prev, res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence();

  do {
    // # transformer_AddScopeVars e.idx
    // </0 & Mu/4 # transformer_AddScopeVars/5 e.eX#1/2 >/1
    if( ! refalrts::ident_term(  ident_transformeru_AddScopeVars, context[5] ) )
      continue;
    // closed e.eX#1 as range 2
    //DEBUG: e.eX#1: 2

    refalrts::reset_allocator();
    //TRASH: {REMOVED TILE} </0 {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ HalfReuse: </4 HalfReuse: & transformer_AddScopeVars/5 AsIs: e.eX#1/2 AsIs: >/1 ]] }
    refalrts::reinit_open_call( context[4] );
    refalrts::reinit_name( context[5], ref_transformeru_AddScopeVars.ref.function );
    refalrts::push_stack( context[1] );
    refalrts::push_stack( context[4] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[4];
    refalrts::splice_to_freelist_open( trash_prev, res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence();

  do {
    // ( 'transformer_AddScopeVars' ) e.idx
    // </0 & Mu/4 (/5 't'/9 'r'/10 'a'/11 'n'/12 's'/13 'f'/14 'o'/15 'r'/16 'm'/17 'e'/18 'r'/19 '_'/20 'A'/21 'd'/22 'd'/23 'S'/24 'c'/25 'o'/26 'p'/27 'e'/28 'V'/29 'a'/30 'r'/31 's'/32 )/6 e.eX#1/2 >/1
    context[7] = 0;
    context[8] = 0;
    if( ! refalrts::brackets_term( context[7], context[8], context[5] ) )
      continue;
    context[9] = refalrts::char_left( 't', context[7], context[8] );
    if( ! context[9] )
      continue;
    context[10] = refalrts::char_left( 'r', context[7], context[8] );
    if( ! context[10] )
      continue;
    context[11] = refalrts::char_left( 'a', context[7], context[8] );
    if( ! context[11] )
      continue;
    context[12] = refalrts::char_left( 'n', context[7], context[8] );
    if( ! context[12] )
      continue;
    context[13] = refalrts::char_left( 's', context[7], context[8] );
    if( ! context[13] )
      continue;
    context[14] = refalrts::char_left( 'f', context[7], context[8] );
    if( ! context[14] )
      continue;
    context[15] = refalrts::char_left( 'o', context[7], context[8] );
    if( ! context[15] )
      continue;
    context[16] = refalrts::char_left( 'r', context[7], context[8] );
    if( ! context[16] )
      continue;
    context[17] = refalrts::char_left( 'm', context[7], context[8] );
    if( ! context[17] )
      continue;
    context[18] = refalrts::char_left( 'e', context[7], context[8] );
    if( ! context[18] )
      continue;
    context[19] = refalrts::char_left( 'r', context[7], context[8] );
    if( ! context[19] )
      continue;
    context[20] = refalrts::char_left( '_', context[7], context[8] );
    if( ! context[20] )
      continue;
    context[21] = refalrts::char_left( 'A', context[7], context[8] );
    if( ! context[21] )
      continue;
    context[22] = refalrts::char_left( 'd', context[7], context[8] );
    if( ! context[22] )
      continue;
    context[23] = refalrts::char_left( 'd', context[7], context[8] );
    if( ! context[23] )
      continue;
    context[24] = refalrts::char_left( 'S', context[7], context[8] );
    if( ! context[24] )
      continue;
    context[25] = refalrts::char_left( 'c', context[7], context[8] );
    if( ! context[25] )
      continue;
    context[26] = refalrts::char_left( 'o', context[7], context[8] );
    if( ! context[26] )
      continue;
    context[27] = refalrts::char_left( 'p', context[7], context[8] );
    if( ! context[27] )
      continue;
    context[28] = refalrts::char_left( 'e', context[7], context[8] );
    if( ! context[28] )
      continue;
    context[29] = refalrts::char_left( 'V', context[7], context[8] );
    if( ! context[29] )
      continue;
    context[30] = refalrts::char_left( 'a', context[7], context[8] );
    if( ! context[30] )
      continue;
    context[31] = refalrts::char_left( 'r', context[7], context[8] );
    if( ! context[31] )
      continue;
    context[32] = refalrts::char_left( 's', context[7], context[8] );
    if( ! context[32] )
      continue;
    if( ! refalrts::empty_seq( context[7], context[8] ) )
      continue;
    // closed e.eX#1 as range 2
    //DEBUG: e.eX#1: 2

    refalrts::reset_allocator();
    //TRASH: {REMOVED TILE} </0 & Mu/4 (/5 't'/9 'r'/10 'a'/11 'n'/12 's'/13 'f'/14 'o'/15 'r'/16 'm'/17 'e'/18 'r'/19 '_'/20 'A'/21 'd'/22 'd'/23 'S'/24 'c'/25 'o'/26 'p'/27 'e'/28 'V'/29 'a'/30 'r'/31 {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ HalfReuse: </32 HalfReuse: & transformer_AddScopeVars/6 AsIs: e.eX#1/2 AsIs: >/1 ]] }
    refalrts::reinit_open_call( context[32] );
    refalrts::reinit_name( context[6], ref_transformeru_AddScopeVars.ref.function );
    refalrts::push_stack( context[1] );
    refalrts::push_stack( context[32] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[32];
    refalrts::splice_to_freelist_open( trash_prev, res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence();

  do {
    // # UnCondition e.idx
    // </0 & Mu/4 # UnCondition/5 e.eX#1/2 >/1
    if( ! refalrts::ident_term(  ident_UnCondition, context[5] ) )
      continue;
    // closed e.eX#1 as range 2
    //DEBUG: e.eX#1: 2

    refalrts::reset_allocator();
    //TRASH: {REMOVED TILE} </0 {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ HalfReuse: </4 HalfReuse: & UnCondition/5 AsIs: e.eX#1/2 AsIs: >/1 ]] }
    refalrts::reinit_open_call( context[4] );
    refalrts::reinit_name( context[5], ref_UnCondition.ref.function );
    refalrts::push_stack( context[1] );
    refalrts::push_stack( context[4] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[4];
    refalrts::splice_to_freelist_open( trash_prev, res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence();

  do {
    // ( 'UnCondition' ) e.idx
    // </0 & Mu/4 (/5 'U'/9 'n'/10 'C'/11 'o'/12 'n'/13 'd'/14 'i'/15 't'/16 'i'/17 'o'/18 'n'/19 )/6 e.eX#1/2 >/1
    context[7] = 0;
    context[8] = 0;
    if( ! refalrts::brackets_term( context[7], context[8], context[5] ) )
      continue;
    context[9] = refalrts::char_left( 'U', context[7], context[8] );
    if( ! context[9] )
      continue;
    context[10] = refalrts::char_left( 'n', context[7], context[8] );
    if( ! context[10] )
      continue;
    context[11] = refalrts::char_left( 'C', context[7], context[8] );
    if( ! context[11] )
      continue;
    context[12] = refalrts::char_left( 'o', context[7], context[8] );
    if( ! context[12] )
      continue;
    context[13] = refalrts::char_left( 'n', context[7], context[8] );
    if( ! context[13] )
      continue;
    context[14] = refalrts::char_left( 'd', context[7], context[8] );
    if( ! context[14] )
      continue;
    context[15] = refalrts::char_left( 'i', context[7], context[8] );
    if( ! context[15] )
      continue;
    context[16] = refalrts::char_left( 't', context[7], context[8] );
    if( ! context[16] )
      continue;
    context[17] = refalrts::char_left( 'i', context[7], context[8] );
    if( ! context[17] )
      continue;
    context[18] = refalrts::char_left( 'o', context[7], context[8] );
    if( ! context[18] )
      continue;
    context[19] = refalrts::char_left( 'n', context[7], context[8] );
    if( ! context[19] )
      continue;
    if( ! refalrts::empty_seq( context[7], context[8] ) )
      continue;
    // closed e.eX#1 as range 2
    //DEBUG: e.eX#1: 2

    refalrts::reset_allocator();
    //TRASH: {REMOVED TILE} </0 & Mu/4 (/5 'U'/9 'n'/10 'C'/11 'o'/12 'n'/13 'd'/14 'i'/15 't'/16 'i'/17 'o'/18 {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ HalfReuse: </19 HalfReuse: & UnCondition/6 AsIs: e.eX#1/2 AsIs: >/1 ]] }
    refalrts::reinit_open_call( context[19] );
    refalrts::reinit_name( context[6], ref_UnCondition.ref.function );
    refalrts::push_stack( context[1] );
    refalrts::push_stack( context[19] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[19];
    refalrts::splice_to_freelist_open( trash_prev, res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence();

  do {
    // # DoUnCondition e.idx
    // </0 & Mu/4 # DoUnCondition/5 e.eX#1/2 >/1
    if( ! refalrts::ident_term(  ident_DoUnCondition, context[5] ) )
      continue;
    // closed e.eX#1 as range 2
    //DEBUG: e.eX#1: 2

    refalrts::reset_allocator();
    //TRASH: {REMOVED TILE} </0 {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ HalfReuse: </4 HalfReuse: & DoUnCondition/5 AsIs: e.eX#1/2 AsIs: >/1 ]] }
    refalrts::reinit_open_call( context[4] );
    refalrts::reinit_name( context[5], ref_DoUnCondition.ref.function );
    refalrts::push_stack( context[1] );
    refalrts::push_stack( context[4] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[4];
    refalrts::splice_to_freelist_open( trash_prev, res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence();

  do {
    // ( 'DoUnCondition' ) e.idx
    // </0 & Mu/4 (/5 'D'/9 'o'/10 'U'/11 'n'/12 'C'/13 'o'/14 'n'/15 'd'/16 'i'/17 't'/18 'i'/19 'o'/20 'n'/21 )/6 e.eX#1/2 >/1
    context[7] = 0;
    context[8] = 0;
    if( ! refalrts::brackets_term( context[7], context[8], context[5] ) )
      continue;
    context[9] = refalrts::char_left( 'D', context[7], context[8] );
    if( ! context[9] )
      continue;
    context[10] = refalrts::char_left( 'o', context[7], context[8] );
    if( ! context[10] )
      continue;
    context[11] = refalrts::char_left( 'U', context[7], context[8] );
    if( ! context[11] )
      continue;
    context[12] = refalrts::char_left( 'n', context[7], context[8] );
    if( ! context[12] )
      continue;
    context[13] = refalrts::char_left( 'C', context[7], context[8] );
    if( ! context[13] )
      continue;
    context[14] = refalrts::char_left( 'o', context[7], context[8] );
    if( ! context[14] )
      continue;
    context[15] = refalrts::char_left( 'n', context[7], context[8] );
    if( ! context[15] )
      continue;
    context[16] = refalrts::char_left( 'd', context[7], context[8] );
    if( ! context[16] )
      continue;
    context[17] = refalrts::char_left( 'i', context[7], context[8] );
    if( ! context[17] )
      continue;
    context[18] = refalrts::char_left( 't', context[7], context[8] );
    if( ! context[18] )
      continue;
    context[19] = refalrts::char_left( 'i', context[7], context[8] );
    if( ! context[19] )
      continue;
    context[20] = refalrts::char_left( 'o', context[7], context[8] );
    if( ! context[20] )
      continue;
    context[21] = refalrts::char_left( 'n', context[7], context[8] );
    if( ! context[21] )
      continue;
    if( ! refalrts::empty_seq( context[7], context[8] ) )
      continue;
    // closed e.eX#1 as range 2
    //DEBUG: e.eX#1: 2

    refalrts::reset_allocator();
    //TRASH: {REMOVED TILE} </0 & Mu/4 (/5 'D'/9 'o'/10 'U'/11 'n'/12 'C'/13 'o'/14 'n'/15 'd'/16 'i'/17 't'/18 'i'/19 'o'/20 {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ HalfReuse: </21 HalfReuse: & DoUnCondition/6 AsIs: e.eX#1/2 AsIs: >/1 ]] }
    refalrts::reinit_open_call( context[21] );
    refalrts::reinit_name( context[6], ref_DoUnCondition.ref.function );
    refalrts::push_stack( context[1] );
    refalrts::push_stack( context[21] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[21];
    refalrts::splice_to_freelist_open( trash_prev, res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence();

  do {
    // # DoUnCondition_check e.idx
    // </0 & Mu/4 # DoUnCondition_check/5 e.eX#1/2 >/1
    if( ! refalrts::ident_term(  ident_DoUnConditionu_check, context[5] ) )
      continue;
    // closed e.eX#1 as range 2
    //DEBUG: e.eX#1: 2

    refalrts::reset_allocator();
    //TRASH: {REMOVED TILE} </0 {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ HalfReuse: </4 HalfReuse: & DoUnCondition_check/5 AsIs: e.eX#1/2 AsIs: >/1 ]] }
    refalrts::reinit_open_call( context[4] );
    refalrts::reinit_name( context[5], ref_DoUnConditionu_check.ref.function );
    refalrts::push_stack( context[1] );
    refalrts::push_stack( context[4] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[4];
    refalrts::splice_to_freelist_open( trash_prev, res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence();

  do {
    // ( 'DoUnCondition_check' ) e.idx
    // </0 & Mu/4 (/5 'D'/9 'o'/10 'U'/11 'n'/12 'C'/13 'o'/14 'n'/15 'd'/16 'i'/17 't'/18 'i'/19 'o'/20 'n'/21 '_'/22 'c'/23 'h'/24 'e'/25 'c'/26 'k'/27 )/6 e.eX#1/2 >/1
    context[7] = 0;
    context[8] = 0;
    if( ! refalrts::brackets_term( context[7], context[8], context[5] ) )
      continue;
    context[9] = refalrts::char_left( 'D', context[7], context[8] );
    if( ! context[9] )
      continue;
    context[10] = refalrts::char_left( 'o', context[7], context[8] );
    if( ! context[10] )
      continue;
    context[11] = refalrts::char_left( 'U', context[7], context[8] );
    if( ! context[11] )
      continue;
    context[12] = refalrts::char_left( 'n', context[7], context[8] );
    if( ! context[12] )
      continue;
    context[13] = refalrts::char_left( 'C', context[7], context[8] );
    if( ! context[13] )
      continue;
    context[14] = refalrts::char_left( 'o', context[7], context[8] );
    if( ! context[14] )
      continue;
    context[15] = refalrts::char_left( 'n', context[7], context[8] );
    if( ! context[15] )
      continue;
    context[16] = refalrts::char_left( 'd', context[7], context[8] );
    if( ! context[16] )
      continue;
    context[17] = refalrts::char_left( 'i', context[7], context[8] );
    if( ! context[17] )
      continue;
    context[18] = refalrts::char_left( 't', context[7], context[8] );
    if( ! context[18] )
      continue;
    context[19] = refalrts::char_left( 'i', context[7], context[8] );
    if( ! context[19] )
      continue;
    context[20] = refalrts::char_left( 'o', context[7], context[8] );
    if( ! context[20] )
      continue;
    context[21] = refalrts::char_left( 'n', context[7], context[8] );
    if( ! context[21] )
      continue;
    context[22] = refalrts::char_left( '_', context[7], context[8] );
    if( ! context[22] )
      continue;
    context[23] = refalrts::char_left( 'c', context[7], context[8] );
    if( ! context[23] )
      continue;
    context[24] = refalrts::char_left( 'h', context[7], context[8] );
    if( ! context[24] )
      continue;
    context[25] = refalrts::char_left( 'e', context[7], context[8] );
    if( ! context[25] )
      continue;
    context[26] = refalrts::char_left( 'c', context[7], context[8] );
    if( ! context[26] )
      continue;
    context[27] = refalrts::char_left( 'k', context[7], context[8] );
    if( ! context[27] )
      continue;
    if( ! refalrts::empty_seq( context[7], context[8] ) )
      continue;
    // closed e.eX#1 as range 2
    //DEBUG: e.eX#1: 2

    refalrts::reset_allocator();
    //TRASH: {REMOVED TILE} </0 & Mu/4 (/5 'D'/9 'o'/10 'U'/11 'n'/12 'C'/13 'o'/14 'n'/15 'd'/16 'i'/17 't'/18 'i'/19 'o'/20 'n'/21 '_'/22 'c'/23 'h'/24 'e'/25 'c'/26 {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ HalfReuse: </27 HalfReuse: & DoUnCondition_check/6 AsIs: e.eX#1/2 AsIs: >/1 ]] }
    refalrts::reinit_open_call( context[27] );
    refalrts::reinit_name( context[6], ref_DoUnConditionu_check.ref.function );
    refalrts::push_stack( context[1] );
    refalrts::push_stack( context[27] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[27];
    refalrts::splice_to_freelist_open( trash_prev, res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence();

  do {
    // # DoUnCondition_forward e.idx
    // </0 & Mu/4 # DoUnCondition_forward/5 e.eX#1/2 >/1
    if( ! refalrts::ident_term(  ident_DoUnConditionu_forward, context[5] ) )
      continue;
    // closed e.eX#1 as range 2
    //DEBUG: e.eX#1: 2

    refalrts::reset_allocator();
    //TRASH: {REMOVED TILE} </0 {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ HalfReuse: </4 HalfReuse: & DoUnCondition_forward/5 AsIs: e.eX#1/2 AsIs: >/1 ]] }
    refalrts::reinit_open_call( context[4] );
    refalrts::reinit_name( context[5], ref_DoUnConditionu_forward.ref.function );
    refalrts::push_stack( context[1] );
    refalrts::push_stack( context[4] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[4];
    refalrts::splice_to_freelist_open( trash_prev, res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence();

  do {
    // ( 'DoUnCondition_forward' ) e.idx
    // </0 & Mu/4 (/5 'D'/9 'o'/10 'U'/11 'n'/12 'C'/13 'o'/14 'n'/15 'd'/16 'i'/17 't'/18 'i'/19 'o'/20 'n'/21 '_'/22 'f'/23 'o'/24 'r'/25 'w'/26 'a'/27 'r'/28 'd'/29 )/6 e.eX#1/2 >/1
    context[7] = 0;
    context[8] = 0;
    if( ! refalrts::brackets_term( context[7], context[8], context[5] ) )
      continue;
    context[9] = refalrts::char_left( 'D', context[7], context[8] );
    if( ! context[9] )
      continue;
    context[10] = refalrts::char_left( 'o', context[7], context[8] );
    if( ! context[10] )
      continue;
    context[11] = refalrts::char_left( 'U', context[7], context[8] );
    if( ! context[11] )
      continue;
    context[12] = refalrts::char_left( 'n', context[7], context[8] );
    if( ! context[12] )
      continue;
    context[13] = refalrts::char_left( 'C', context[7], context[8] );
    if( ! context[13] )
      continue;
    context[14] = refalrts::char_left( 'o', context[7], context[8] );
    if( ! context[14] )
      continue;
    context[15] = refalrts::char_left( 'n', context[7], context[8] );
    if( ! context[15] )
      continue;
    context[16] = refalrts::char_left( 'd', context[7], context[8] );
    if( ! context[16] )
      continue;
    context[17] = refalrts::char_left( 'i', context[7], context[8] );
    if( ! context[17] )
      continue;
    context[18] = refalrts::char_left( 't', context[7], context[8] );
    if( ! context[18] )
      continue;
    context[19] = refalrts::char_left( 'i', context[7], context[8] );
    if( ! context[19] )
      continue;
    context[20] = refalrts::char_left( 'o', context[7], context[8] );
    if( ! context[20] )
      continue;
    context[21] = refalrts::char_left( 'n', context[7], context[8] );
    if( ! context[21] )
      continue;
    context[22] = refalrts::char_left( '_', context[7], context[8] );
    if( ! context[22] )
      continue;
    context[23] = refalrts::char_left( 'f', context[7], context[8] );
    if( ! context[23] )
      continue;
    context[24] = refalrts::char_left( 'o', context[7], context[8] );
    if( ! context[24] )
      continue;
    context[25] = refalrts::char_left( 'r', context[7], context[8] );
    if( ! context[25] )
      continue;
    context[26] = refalrts::char_left( 'w', context[7], context[8] );
    if( ! context[26] )
      continue;
    context[27] = refalrts::char_left( 'a', context[7], context[8] );
    if( ! context[27] )
      continue;
    context[28] = refalrts::char_left( 'r', context[7], context[8] );
    if( ! context[28] )
      continue;
    context[29] = refalrts::char_left( 'd', context[7], context[8] );
    if( ! context[29] )
      continue;
    if( ! refalrts::empty_seq( context[7], context[8] ) )
      continue;
    // closed e.eX#1 as range 2
    //DEBUG: e.eX#1: 2

    refalrts::reset_allocator();
    //TRASH: {REMOVED TILE} </0 & Mu/4 (/5 'D'/9 'o'/10 'U'/11 'n'/12 'C'/13 'o'/14 'n'/15 'd'/16 'i'/17 't'/18 'i'/19 'o'/20 'n'/21 '_'/22 'f'/23 'o'/24 'r'/25 'w'/26 'a'/27 'r'/28 {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ HalfReuse: </29 HalfReuse: & DoUnCondition_forward/6 AsIs: e.eX#1/2 AsIs: >/1 ]] }
    refalrts::reinit_open_call( context[29] );
    refalrts::reinit_name( context[6], ref_DoUnConditionu_forward.ref.function );
    refalrts::push_stack( context[1] );
    refalrts::push_stack( context[29] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[29];
    refalrts::splice_to_freelist_open( trash_prev, res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence();

  do {
    // # DoUnCondition_next e.idx
    // </0 & Mu/4 # DoUnCondition_next/5 e.eX#1/2 >/1
    if( ! refalrts::ident_term(  ident_DoUnConditionu_next, context[5] ) )
      continue;
    // closed e.eX#1 as range 2
    //DEBUG: e.eX#1: 2

    refalrts::reset_allocator();
    //TRASH: {REMOVED TILE} </0 {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ HalfReuse: </4 HalfReuse: & DoUnCondition_next/5 AsIs: e.eX#1/2 AsIs: >/1 ]] }
    refalrts::reinit_open_call( context[4] );
    refalrts::reinit_name( context[5], ref_DoUnConditionu_next.ref.function );
    refalrts::push_stack( context[1] );
    refalrts::push_stack( context[4] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[4];
    refalrts::splice_to_freelist_open( trash_prev, res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence();

  do {
    // ( 'DoUnCondition_next' ) e.idx
    // </0 & Mu/4 (/5 'D'/9 'o'/10 'U'/11 'n'/12 'C'/13 'o'/14 'n'/15 'd'/16 'i'/17 't'/18 'i'/19 'o'/20 'n'/21 '_'/22 'n'/23 'e'/24 'x'/25 't'/26 )/6 e.eX#1/2 >/1
    context[7] = 0;
    context[8] = 0;
    if( ! refalrts::brackets_term( context[7], context[8], context[5] ) )
      continue;
    context[9] = refalrts::char_left( 'D', context[7], context[8] );
    if( ! context[9] )
      continue;
    context[10] = refalrts::char_left( 'o', context[7], context[8] );
    if( ! context[10] )
      continue;
    context[11] = refalrts::char_left( 'U', context[7], context[8] );
    if( ! context[11] )
      continue;
    context[12] = refalrts::char_left( 'n', context[7], context[8] );
    if( ! context[12] )
      continue;
    context[13] = refalrts::char_left( 'C', context[7], context[8] );
    if( ! context[13] )
      continue;
    context[14] = refalrts::char_left( 'o', context[7], context[8] );
    if( ! context[14] )
      continue;
    context[15] = refalrts::char_left( 'n', context[7], context[8] );
    if( ! context[15] )
      continue;
    context[16] = refalrts::char_left( 'd', context[7], context[8] );
    if( ! context[16] )
      continue;
    context[17] = refalrts::char_left( 'i', context[7], context[8] );
    if( ! context[17] )
      continue;
    context[18] = refalrts::char_left( 't', context[7], context[8] );
    if( ! context[18] )
      continue;
    context[19] = refalrts::char_left( 'i', context[7], context[8] );
    if( ! context[19] )
      continue;
    context[20] = refalrts::char_left( 'o', context[7], context[8] );
    if( ! context[20] )
      continue;
    context[21] = refalrts::char_left( 'n', context[7], context[8] );
    if( ! context[21] )
      continue;
    context[22] = refalrts::char_left( '_', context[7], context[8] );
    if( ! context[22] )
      continue;
    context[23] = refalrts::char_left( 'n', context[7], context[8] );
    if( ! context[23] )
      continue;
    context[24] = refalrts::char_left( 'e', context[7], context[8] );
    if( ! context[24] )
      continue;
    context[25] = refalrts::char_left( 'x', context[7], context[8] );
    if( ! context[25] )
      continue;
    context[26] = refalrts::char_left( 't', context[7], context[8] );
    if( ! context[26] )
      continue;
    if( ! refalrts::empty_seq( context[7], context[8] ) )
      continue;
    // closed e.eX#1 as range 2
    //DEBUG: e.eX#1: 2

    refalrts::reset_allocator();
    //TRASH: {REMOVED TILE} </0 & Mu/4 (/5 'D'/9 'o'/10 'U'/11 'n'/12 'C'/13 'o'/14 'n'/15 'd'/16 'i'/17 't'/18 'i'/19 'o'/20 'n'/21 '_'/22 'n'/23 'e'/24 'x'/25 {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ HalfReuse: </26 HalfReuse: & DoUnCondition_next/6 AsIs: e.eX#1/2 AsIs: >/1 ]] }
    refalrts::reinit_open_call( context[26] );
    refalrts::reinit_name( context[6], ref_DoUnConditionu_next.ref.function );
    refalrts::push_stack( context[1] );
    refalrts::push_stack( context[26] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[26];
    refalrts::splice_to_freelist_open( trash_prev, res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence();

  do {
    // # DoUnCondition_cont e.idx
    // </0 & Mu/4 # DoUnCondition_cont/5 e.eX#1/2 >/1
    if( ! refalrts::ident_term(  ident_DoUnConditionu_cont, context[5] ) )
      continue;
    // closed e.eX#1 as range 2
    //DEBUG: e.eX#1: 2

    refalrts::reset_allocator();
    //TRASH: {REMOVED TILE} </0 {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ HalfReuse: </4 HalfReuse: & DoUnCondition_cont/5 AsIs: e.eX#1/2 AsIs: >/1 ]] }
    refalrts::reinit_open_call( context[4] );
    refalrts::reinit_name( context[5], ref_DoUnConditionu_cont.ref.function );
    refalrts::push_stack( context[1] );
    refalrts::push_stack( context[4] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[4];
    refalrts::splice_to_freelist_open( trash_prev, res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence();

  do {
    // ( 'DoUnCondition_cont' ) e.idx
    // </0 & Mu/4 (/5 'D'/9 'o'/10 'U'/11 'n'/12 'C'/13 'o'/14 'n'/15 'd'/16 'i'/17 't'/18 'i'/19 'o'/20 'n'/21 '_'/22 'c'/23 'o'/24 'n'/25 't'/26 )/6 e.eX#1/2 >/1
    context[7] = 0;
    context[8] = 0;
    if( ! refalrts::brackets_term( context[7], context[8], context[5] ) )
      continue;
    context[9] = refalrts::char_left( 'D', context[7], context[8] );
    if( ! context[9] )
      continue;
    context[10] = refalrts::char_left( 'o', context[7], context[8] );
    if( ! context[10] )
      continue;
    context[11] = refalrts::char_left( 'U', context[7], context[8] );
    if( ! context[11] )
      continue;
    context[12] = refalrts::char_left( 'n', context[7], context[8] );
    if( ! context[12] )
      continue;
    context[13] = refalrts::char_left( 'C', context[7], context[8] );
    if( ! context[13] )
      continue;
    context[14] = refalrts::char_left( 'o', context[7], context[8] );
    if( ! context[14] )
      continue;
    context[15] = refalrts::char_left( 'n', context[7], context[8] );
    if( ! context[15] )
      continue;
    context[16] = refalrts::char_left( 'd', context[7], context[8] );
    if( ! context[16] )
      continue;
    context[17] = refalrts::char_left( 'i', context[7], context[8] );
    if( ! context[17] )
      continue;
    context[18] = refalrts::char_left( 't', context[7], context[8] );
    if( ! context[18] )
      continue;
    context[19] = refalrts::char_left( 'i', context[7], context[8] );
    if( ! context[19] )
      continue;
    context[20] = refalrts::char_left( 'o', context[7], context[8] );
    if( ! context[20] )
      continue;
    context[21] = refalrts::char_left( 'n', context[7], context[8] );
    if( ! context[21] )
      continue;
    context[22] = refalrts::char_left( '_', context[7], context[8] );
    if( ! context[22] )
      continue;
    context[23] = refalrts::char_left( 'c', context[7], context[8] );
    if( ! context[23] )
      continue;
    context[24] = refalrts::char_left( 'o', context[7], context[8] );
    if( ! context[24] )
      continue;
    context[25] = refalrts::char_left( 'n', context[7], context[8] );
    if( ! context[25] )
      continue;
    context[26] = refalrts::char_left( 't', context[7], context[8] );
    if( ! context[26] )
      continue;
    if( ! refalrts::empty_seq( context[7], context[8] ) )
      continue;
    // closed e.eX#1 as range 2
    //DEBUG: e.eX#1: 2

    refalrts::reset_allocator();
    //TRASH: {REMOVED TILE} </0 & Mu/4 (/5 'D'/9 'o'/10 'U'/11 'n'/12 'C'/13 'o'/14 'n'/15 'd'/16 'i'/17 't'/18 'i'/19 'o'/20 'n'/21 '_'/22 'c'/23 'o'/24 'n'/25 {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ HalfReuse: </26 HalfReuse: & DoUnCondition_cont/6 AsIs: e.eX#1/2 AsIs: >/1 ]] }
    refalrts::reinit_open_call( context[26] );
    refalrts::reinit_name( context[6], ref_DoUnConditionu_cont.ref.function );
    refalrts::push_stack( context[1] );
    refalrts::push_stack( context[26] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[26];
    refalrts::splice_to_freelist_open( trash_prev, res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence();

  do {
    // # DoUnCondition-NextFunction e.idx
    // </0 & Mu/4 # DoUnCondition-NextFunction/5 e.eX#1/2 >/1
    if( ! refalrts::ident_term(  ident_DoUnConditionm_NextFunction, context[5] ) )
      continue;
    // closed e.eX#1 as range 2
    //DEBUG: e.eX#1: 2

    refalrts::reset_allocator();
    //TRASH: {REMOVED TILE} </0 {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ HalfReuse: </4 HalfReuse: & DoUnCondition-NextFunction/5 AsIs: e.eX#1/2 AsIs: >/1 ]] }
    refalrts::reinit_open_call( context[4] );
    refalrts::reinit_name( context[5], ref_DoUnConditionm_NextFunction.ref.function );
    refalrts::push_stack( context[1] );
    refalrts::push_stack( context[4] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[4];
    refalrts::splice_to_freelist_open( trash_prev, res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence();

  do {
    // ( 'DoUnCondition-NextFunction' ) e.idx
    // </0 & Mu/4 (/5 'D'/9 'o'/10 'U'/11 'n'/12 'C'/13 'o'/14 'n'/15 'd'/16 'i'/17 't'/18 'i'/19 'o'/20 'n'/21 '-'/22 'N'/23 'e'/24 'x'/25 't'/26 'F'/27 'u'/28 'n'/29 'c'/30 't'/31 'i'/32 'o'/33 'n'/34 )/6 e.eX#1/2 >/1
    context[7] = 0;
    context[8] = 0;
    if( ! refalrts::brackets_term( context[7], context[8], context[5] ) )
      continue;
    context[9] = refalrts::char_left( 'D', context[7], context[8] );
    if( ! context[9] )
      continue;
    context[10] = refalrts::char_left( 'o', context[7], context[8] );
    if( ! context[10] )
      continue;
    context[11] = refalrts::char_left( 'U', context[7], context[8] );
    if( ! context[11] )
      continue;
    context[12] = refalrts::char_left( 'n', context[7], context[8] );
    if( ! context[12] )
      continue;
    context[13] = refalrts::char_left( 'C', context[7], context[8] );
    if( ! context[13] )
      continue;
    context[14] = refalrts::char_left( 'o', context[7], context[8] );
    if( ! context[14] )
      continue;
    context[15] = refalrts::char_left( 'n', context[7], context[8] );
    if( ! context[15] )
      continue;
    context[16] = refalrts::char_left( 'd', context[7], context[8] );
    if( ! context[16] )
      continue;
    context[17] = refalrts::char_left( 'i', context[7], context[8] );
    if( ! context[17] )
      continue;
    context[18] = refalrts::char_left( 't', context[7], context[8] );
    if( ! context[18] )
      continue;
    context[19] = refalrts::char_left( 'i', context[7], context[8] );
    if( ! context[19] )
      continue;
    context[20] = refalrts::char_left( 'o', context[7], context[8] );
    if( ! context[20] )
      continue;
    context[21] = refalrts::char_left( 'n', context[7], context[8] );
    if( ! context[21] )
      continue;
    context[22] = refalrts::char_left( '-', context[7], context[8] );
    if( ! context[22] )
      continue;
    context[23] = refalrts::char_left( 'N', context[7], context[8] );
    if( ! context[23] )
      continue;
    context[24] = refalrts::char_left( 'e', context[7], context[8] );
    if( ! context[24] )
      continue;
    context[25] = refalrts::char_left( 'x', context[7], context[8] );
    if( ! context[25] )
      continue;
    context[26] = refalrts::char_left( 't', context[7], context[8] );
    if( ! context[26] )
      continue;
    context[27] = refalrts::char_left( 'F', context[7], context[8] );
    if( ! context[27] )
      continue;
    context[28] = refalrts::char_left( 'u', context[7], context[8] );
    if( ! context[28] )
      continue;
    context[29] = refalrts::char_left( 'n', context[7], context[8] );
    if( ! context[29] )
      continue;
    context[30] = refalrts::char_left( 'c', context[7], context[8] );
    if( ! context[30] )
      continue;
    context[31] = refalrts::char_left( 't', context[7], context[8] );
    if( ! context[31] )
      continue;
    context[32] = refalrts::char_left( 'i', context[7], context[8] );
    if( ! context[32] )
      continue;
    context[33] = refalrts::char_left( 'o', context[7], context[8] );
    if( ! context[33] )
      continue;
    context[34] = refalrts::char_left( 'n', context[7], context[8] );
    if( ! context[34] )
      continue;
    if( ! refalrts::empty_seq( context[7], context[8] ) )
      continue;
    // closed e.eX#1 as range 2
    //DEBUG: e.eX#1: 2

    refalrts::reset_allocator();
    //TRASH: {REMOVED TILE} </0 & Mu/4 (/5 'D'/9 'o'/10 'U'/11 'n'/12 'C'/13 'o'/14 'n'/15 'd'/16 'i'/17 't'/18 'i'/19 'o'/20 'n'/21 '-'/22 'N'/23 'e'/24 'x'/25 't'/26 'F'/27 'u'/28 'n'/29 'c'/30 't'/31 'i'/32 'o'/33 {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ HalfReuse: </34 HalfReuse: & DoUnCondition-NextFunction/6 AsIs: e.eX#1/2 AsIs: >/1 ]] }
    refalrts::reinit_open_call( context[34] );
    refalrts::reinit_name( context[6], ref_DoUnConditionm_NextFunction.ref.function );
    refalrts::push_stack( context[1] );
    refalrts::push_stack( context[34] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[34];
    refalrts::splice_to_freelist_open( trash_prev, res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence();

  do {
    // # UnConditionSentence e.idx
    // </0 & Mu/4 # UnConditionSentence/5 e.eX#1/2 >/1
    if( ! refalrts::ident_term(  ident_UnConditionSentence, context[5] ) )
      continue;
    // closed e.eX#1 as range 2
    //DEBUG: e.eX#1: 2

    refalrts::reset_allocator();
    //TRASH: {REMOVED TILE} </0 {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ HalfReuse: </4 HalfReuse: & UnConditionSentence/5 AsIs: e.eX#1/2 AsIs: >/1 ]] }
    refalrts::reinit_open_call( context[4] );
    refalrts::reinit_name( context[5], ref_UnConditionSentence.ref.function );
    refalrts::push_stack( context[1] );
    refalrts::push_stack( context[4] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[4];
    refalrts::splice_to_freelist_open( trash_prev, res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence();

  do {
    // ( 'UnConditionSentence' ) e.idx
    // </0 & Mu/4 (/5 'U'/9 'n'/10 'C'/11 'o'/12 'n'/13 'd'/14 'i'/15 't'/16 'i'/17 'o'/18 'n'/19 'S'/20 'e'/21 'n'/22 't'/23 'e'/24 'n'/25 'c'/26 'e'/27 )/6 e.eX#1/2 >/1
    context[7] = 0;
    context[8] = 0;
    if( ! refalrts::brackets_term( context[7], context[8], context[5] ) )
      continue;
    context[9] = refalrts::char_left( 'U', context[7], context[8] );
    if( ! context[9] )
      continue;
    context[10] = refalrts::char_left( 'n', context[7], context[8] );
    if( ! context[10] )
      continue;
    context[11] = refalrts::char_left( 'C', context[7], context[8] );
    if( ! context[11] )
      continue;
    context[12] = refalrts::char_left( 'o', context[7], context[8] );
    if( ! context[12] )
      continue;
    context[13] = refalrts::char_left( 'n', context[7], context[8] );
    if( ! context[13] )
      continue;
    context[14] = refalrts::char_left( 'd', context[7], context[8] );
    if( ! context[14] )
      continue;
    context[15] = refalrts::char_left( 'i', context[7], context[8] );
    if( ! context[15] )
      continue;
    context[16] = refalrts::char_left( 't', context[7], context[8] );
    if( ! context[16] )
      continue;
    context[17] = refalrts::char_left( 'i', context[7], context[8] );
    if( ! context[17] )
      continue;
    context[18] = refalrts::char_left( 'o', context[7], context[8] );
    if( ! context[18] )
      continue;
    context[19] = refalrts::char_left( 'n', context[7], context[8] );
    if( ! context[19] )
      continue;
    context[20] = refalrts::char_left( 'S', context[7], context[8] );
    if( ! context[20] )
      continue;
    context[21] = refalrts::char_left( 'e', context[7], context[8] );
    if( ! context[21] )
      continue;
    context[22] = refalrts::char_left( 'n', context[7], context[8] );
    if( ! context[22] )
      continue;
    context[23] = refalrts::char_left( 't', context[7], context[8] );
    if( ! context[23] )
      continue;
    context[24] = refalrts::char_left( 'e', context[7], context[8] );
    if( ! context[24] )
      continue;
    context[25] = refalrts::char_left( 'n', context[7], context[8] );
    if( ! context[25] )
      continue;
    context[26] = refalrts::char_left( 'c', context[7], context[8] );
    if( ! context[26] )
      continue;
    context[27] = refalrts::char_left( 'e', context[7], context[8] );
    if( ! context[27] )
      continue;
    if( ! refalrts::empty_seq( context[7], context[8] ) )
      continue;
    // closed e.eX#1 as range 2
    //DEBUG: e.eX#1: 2

    refalrts::reset_allocator();
    //TRASH: {REMOVED TILE} </0 & Mu/4 (/5 'U'/9 'n'/10 'C'/11 'o'/12 'n'/13 'd'/14 'i'/15 't'/16 'i'/17 'o'/18 'n'/19 'S'/20 'e'/21 'n'/22 't'/23 'e'/24 'n'/25 'c'/26 {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ HalfReuse: </27 HalfReuse: & UnConditionSentence/6 AsIs: e.eX#1/2 AsIs: >/1 ]] }
    refalrts::reinit_open_call( context[27] );
    refalrts::reinit_name( context[6], ref_UnConditionSentence.ref.function );
    refalrts::push_stack( context[1] );
    refalrts::push_stack( context[27] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[27];
    refalrts::splice_to_freelist_open( trash_prev, res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence();

  do {
    // # UnConditionSentence0 e.idx
    // </0 & Mu/4 # UnConditionSentence0/5 e.eX#1/2 >/1
    if( ! refalrts::ident_term(  ident_UnConditionSentence0, context[5] ) )
      continue;
    // closed e.eX#1 as range 2
    //DEBUG: e.eX#1: 2

    refalrts::reset_allocator();
    //TRASH: {REMOVED TILE} </0 {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ HalfReuse: </4 HalfReuse: & UnConditionSentence0/5 AsIs: e.eX#1/2 AsIs: >/1 ]] }
    refalrts::reinit_open_call( context[4] );
    refalrts::reinit_name( context[5], ref_UnConditionSentence0.ref.function );
    refalrts::push_stack( context[1] );
    refalrts::push_stack( context[4] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[4];
    refalrts::splice_to_freelist_open( trash_prev, res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence();

  do {
    // ( 'UnConditionSentence0' ) e.idx
    // </0 & Mu/4 (/5 'U'/9 'n'/10 'C'/11 'o'/12 'n'/13 'd'/14 'i'/15 't'/16 'i'/17 'o'/18 'n'/19 'S'/20 'e'/21 'n'/22 't'/23 'e'/24 'n'/25 'c'/26 'e'/27 '0'/28 )/6 e.eX#1/2 >/1
    context[7] = 0;
    context[8] = 0;
    if( ! refalrts::brackets_term( context[7], context[8], context[5] ) )
      continue;
    context[9] = refalrts::char_left( 'U', context[7], context[8] );
    if( ! context[9] )
      continue;
    context[10] = refalrts::char_left( 'n', context[7], context[8] );
    if( ! context[10] )
      continue;
    context[11] = refalrts::char_left( 'C', context[7], context[8] );
    if( ! context[11] )
      continue;
    context[12] = refalrts::char_left( 'o', context[7], context[8] );
    if( ! context[12] )
      continue;
    context[13] = refalrts::char_left( 'n', context[7], context[8] );
    if( ! context[13] )
      continue;
    context[14] = refalrts::char_left( 'd', context[7], context[8] );
    if( ! context[14] )
      continue;
    context[15] = refalrts::char_left( 'i', context[7], context[8] );
    if( ! context[15] )
      continue;
    context[16] = refalrts::char_left( 't', context[7], context[8] );
    if( ! context[16] )
      continue;
    context[17] = refalrts::char_left( 'i', context[7], context[8] );
    if( ! context[17] )
      continue;
    context[18] = refalrts::char_left( 'o', context[7], context[8] );
    if( ! context[18] )
      continue;
    context[19] = refalrts::char_left( 'n', context[7], context[8] );
    if( ! context[19] )
      continue;
    context[20] = refalrts::char_left( 'S', context[7], context[8] );
    if( ! context[20] )
      continue;
    context[21] = refalrts::char_left( 'e', context[7], context[8] );
    if( ! context[21] )
      continue;
    context[22] = refalrts::char_left( 'n', context[7], context[8] );
    if( ! context[22] )
      continue;
    context[23] = refalrts::char_left( 't', context[7], context[8] );
    if( ! context[23] )
      continue;
    context[24] = refalrts::char_left( 'e', context[7], context[8] );
    if( ! context[24] )
      continue;
    context[25] = refalrts::char_left( 'n', context[7], context[8] );
    if( ! context[25] )
      continue;
    context[26] = refalrts::char_left( 'c', context[7], context[8] );
    if( ! context[26] )
      continue;
    context[27] = refalrts::char_left( 'e', context[7], context[8] );
    if( ! context[27] )
      continue;
    context[28] = refalrts::char_left( '0', context[7], context[8] );
    if( ! context[28] )
      continue;
    if( ! refalrts::empty_seq( context[7], context[8] ) )
      continue;
    // closed e.eX#1 as range 2
    //DEBUG: e.eX#1: 2

    refalrts::reset_allocator();
    //TRASH: {REMOVED TILE} </0 & Mu/4 (/5 'U'/9 'n'/10 'C'/11 'o'/12 'n'/13 'd'/14 'i'/15 't'/16 'i'/17 'o'/18 'n'/19 'S'/20 'e'/21 'n'/22 't'/23 'e'/24 'n'/25 'c'/26 'e'/27 {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ HalfReuse: </28 HalfReuse: & UnConditionSentence0/6 AsIs: e.eX#1/2 AsIs: >/1 ]] }
    refalrts::reinit_open_call( context[28] );
    refalrts::reinit_name( context[6], ref_UnConditionSentence0.ref.function );
    refalrts::push_stack( context[1] );
    refalrts::push_stack( context[28] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[28];
    refalrts::splice_to_freelist_open( trash_prev, res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence();

  do {
    // # UnConditionSentence-Aux e.idx
    // </0 & Mu/4 # UnConditionSentence-Aux/5 e.eX#1/2 >/1
    if( ! refalrts::ident_term(  ident_UnConditionSentencem_Aux, context[5] ) )
      continue;
    // closed e.eX#1 as range 2
    //DEBUG: e.eX#1: 2

    refalrts::reset_allocator();
    //TRASH: {REMOVED TILE} </0 {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ HalfReuse: </4 HalfReuse: & UnConditionSentence-Aux/5 AsIs: e.eX#1/2 AsIs: >/1 ]] }
    refalrts::reinit_open_call( context[4] );
    refalrts::reinit_name( context[5], ref_UnConditionSentencem_Aux.ref.function );
    refalrts::push_stack( context[1] );
    refalrts::push_stack( context[4] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[4];
    refalrts::splice_to_freelist_open( trash_prev, res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence();

  do {
    // ( 'UnConditionSentence-Aux' ) e.idx
    // </0 & Mu/4 (/5 'U'/9 'n'/10 'C'/11 'o'/12 'n'/13 'd'/14 'i'/15 't'/16 'i'/17 'o'/18 'n'/19 'S'/20 'e'/21 'n'/22 't'/23 'e'/24 'n'/25 'c'/26 'e'/27 '-'/28 'A'/29 'u'/30 'x'/31 )/6 e.eX#1/2 >/1
    context[7] = 0;
    context[8] = 0;
    if( ! refalrts::brackets_term( context[7], context[8], context[5] ) )
      continue;
    context[9] = refalrts::char_left( 'U', context[7], context[8] );
    if( ! context[9] )
      continue;
    context[10] = refalrts::char_left( 'n', context[7], context[8] );
    if( ! context[10] )
      continue;
    context[11] = refalrts::char_left( 'C', context[7], context[8] );
    if( ! context[11] )
      continue;
    context[12] = refalrts::char_left( 'o', context[7], context[8] );
    if( ! context[12] )
      continue;
    context[13] = refalrts::char_left( 'n', context[7], context[8] );
    if( ! context[13] )
      continue;
    context[14] = refalrts::char_left( 'd', context[7], context[8] );
    if( ! context[14] )
      continue;
    context[15] = refalrts::char_left( 'i', context[7], context[8] );
    if( ! context[15] )
      continue;
    context[16] = refalrts::char_left( 't', context[7], context[8] );
    if( ! context[16] )
      continue;
    context[17] = refalrts::char_left( 'i', context[7], context[8] );
    if( ! context[17] )
      continue;
    context[18] = refalrts::char_left( 'o', context[7], context[8] );
    if( ! context[18] )
      continue;
    context[19] = refalrts::char_left( 'n', context[7], context[8] );
    if( ! context[19] )
      continue;
    context[20] = refalrts::char_left( 'S', context[7], context[8] );
    if( ! context[20] )
      continue;
    context[21] = refalrts::char_left( 'e', context[7], context[8] );
    if( ! context[21] )
      continue;
    context[22] = refalrts::char_left( 'n', context[7], context[8] );
    if( ! context[22] )
      continue;
    context[23] = refalrts::char_left( 't', context[7], context[8] );
    if( ! context[23] )
      continue;
    context[24] = refalrts::char_left( 'e', context[7], context[8] );
    if( ! context[24] )
      continue;
    context[25] = refalrts::char_left( 'n', context[7], context[8] );
    if( ! context[25] )
      continue;
    context[26] = refalrts::char_left( 'c', context[7], context[8] );
    if( ! context[26] )
      continue;
    context[27] = refalrts::char_left( 'e', context[7], context[8] );
    if( ! context[27] )
      continue;
    context[28] = refalrts::char_left( '-', context[7], context[8] );
    if( ! context[28] )
      continue;
    context[29] = refalrts::char_left( 'A', context[7], context[8] );
    if( ! context[29] )
      continue;
    context[30] = refalrts::char_left( 'u', context[7], context[8] );
    if( ! context[30] )
      continue;
    context[31] = refalrts::char_left( 'x', context[7], context[8] );
    if( ! context[31] )
      continue;
    if( ! refalrts::empty_seq( context[7], context[8] ) )
      continue;
    // closed e.eX#1 as range 2
    //DEBUG: e.eX#1: 2

    refalrts::reset_allocator();
    //TRASH: {REMOVED TILE} </0 & Mu/4 (/5 'U'/9 'n'/10 'C'/11 'o'/12 'n'/13 'd'/14 'i'/15 't'/16 'i'/17 'o'/18 'n'/19 'S'/20 'e'/21 'n'/22 't'/23 'e'/24 'n'/25 'c'/26 'e'/27 '-'/28 'A'/29 'u'/30 {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ HalfReuse: </31 HalfReuse: & UnConditionSentence-Aux/6 AsIs: e.eX#1/2 AsIs: >/1 ]] }
    refalrts::reinit_open_call( context[31] );
    refalrts::reinit_name( context[6], ref_UnConditionSentencem_Aux.ref.function );
    refalrts::push_stack( context[1] );
    refalrts::push_stack( context[31] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[31];
    refalrts::splice_to_freelist_open( trash_prev, res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence();

  do {
    // # UnConditionSentence-Aux_check e.idx
    // </0 & Mu/4 # UnConditionSentence-Aux_check/5 e.eX#1/2 >/1
    if( ! refalrts::ident_term(  ident_UnConditionSentencem_Auxu_check, context[5] ) )
      continue;
    // closed e.eX#1 as range 2
    //DEBUG: e.eX#1: 2

    refalrts::reset_allocator();
    //TRASH: {REMOVED TILE} </0 {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ HalfReuse: </4 HalfReuse: & UnConditionSentence-Aux_check/5 AsIs: e.eX#1/2 AsIs: >/1 ]] }
    refalrts::reinit_open_call( context[4] );
    refalrts::reinit_name( context[5], ref_UnConditionSentencem_Auxu_check.ref.function );
    refalrts::push_stack( context[1] );
    refalrts::push_stack( context[4] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[4];
    refalrts::splice_to_freelist_open( trash_prev, res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence();

  do {
    // ( 'UnConditionSentence-Aux_check' ) e.idx
    // </0 & Mu/4 (/5 'U'/9 'n'/10 'C'/11 'o'/12 'n'/13 'd'/14 'i'/15 't'/16 'i'/17 'o'/18 'n'/19 'S'/20 'e'/21 'n'/22 't'/23 'e'/24 'n'/25 'c'/26 'e'/27 '-'/28 'A'/29 'u'/30 'x'/31 '_'/32 'c'/33 'h'/34 'e'/35 'c'/36 'k'/37 )/6 e.eX#1/2 >/1
    context[7] = 0;
    context[8] = 0;
    if( ! refalrts::brackets_term( context[7], context[8], context[5] ) )
      continue;
    context[9] = refalrts::char_left( 'U', context[7], context[8] );
    if( ! context[9] )
      continue;
    context[10] = refalrts::char_left( 'n', context[7], context[8] );
    if( ! context[10] )
      continue;
    context[11] = refalrts::char_left( 'C', context[7], context[8] );
    if( ! context[11] )
      continue;
    context[12] = refalrts::char_left( 'o', context[7], context[8] );
    if( ! context[12] )
      continue;
    context[13] = refalrts::char_left( 'n', context[7], context[8] );
    if( ! context[13] )
      continue;
    context[14] = refalrts::char_left( 'd', context[7], context[8] );
    if( ! context[14] )
      continue;
    context[15] = refalrts::char_left( 'i', context[7], context[8] );
    if( ! context[15] )
      continue;
    context[16] = refalrts::char_left( 't', context[7], context[8] );
    if( ! context[16] )
      continue;
    context[17] = refalrts::char_left( 'i', context[7], context[8] );
    if( ! context[17] )
      continue;
    context[18] = refalrts::char_left( 'o', context[7], context[8] );
    if( ! context[18] )
      continue;
    context[19] = refalrts::char_left( 'n', context[7], context[8] );
    if( ! context[19] )
      continue;
    context[20] = refalrts::char_left( 'S', context[7], context[8] );
    if( ! context[20] )
      continue;
    context[21] = refalrts::char_left( 'e', context[7], context[8] );
    if( ! context[21] )
      continue;
    context[22] = refalrts::char_left( 'n', context[7], context[8] );
    if( ! context[22] )
      continue;
    context[23] = refalrts::char_left( 't', context[7], context[8] );
    if( ! context[23] )
      continue;
    context[24] = refalrts::char_left( 'e', context[7], context[8] );
    if( ! context[24] )
      continue;
    context[25] = refalrts::char_left( 'n', context[7], context[8] );
    if( ! context[25] )
      continue;
    context[26] = refalrts::char_left( 'c', context[7], context[8] );
    if( ! context[26] )
      continue;
    context[27] = refalrts::char_left( 'e', context[7], context[8] );
    if( ! context[27] )
      continue;
    context[28] = refalrts::char_left( '-', context[7], context[8] );
    if( ! context[28] )
      continue;
    context[29] = refalrts::char_left( 'A', context[7], context[8] );
    if( ! context[29] )
      continue;
    context[30] = refalrts::char_left( 'u', context[7], context[8] );
    if( ! context[30] )
      continue;
    context[31] = refalrts::char_left( 'x', context[7], context[8] );
    if( ! context[31] )
      continue;
    context[32] = refalrts::char_left( '_', context[7], context[8] );
    if( ! context[32] )
      continue;
    context[33] = refalrts::char_left( 'c', context[7], context[8] );
    if( ! context[33] )
      continue;
    context[34] = refalrts::char_left( 'h', context[7], context[8] );
    if( ! context[34] )
      continue;
    context[35] = refalrts::char_left( 'e', context[7], context[8] );
    if( ! context[35] )
      continue;
    context[36] = refalrts::char_left( 'c', context[7], context[8] );
    if( ! context[36] )
      continue;
    context[37] = refalrts::char_left( 'k', context[7], context[8] );
    if( ! context[37] )
      continue;
    if( ! refalrts::empty_seq( context[7], context[8] ) )
      continue;
    // closed e.eX#1 as range 2
    //DEBUG: e.eX#1: 2

    refalrts::reset_allocator();
    //TRASH: {REMOVED TILE} </0 & Mu/4 (/5 'U'/9 'n'/10 'C'/11 'o'/12 'n'/13 'd'/14 'i'/15 't'/16 'i'/17 'o'/18 'n'/19 'S'/20 'e'/21 'n'/22 't'/23 'e'/24 'n'/25 'c'/26 'e'/27 '-'/28 'A'/29 'u'/30 'x'/31 '_'/32 'c'/33 'h'/34 'e'/35 'c'/36 {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ HalfReuse: </37 HalfReuse: & UnConditionSentence-Aux_check/6 AsIs: e.eX#1/2 AsIs: >/1 ]] }
    refalrts::reinit_open_call( context[37] );
    refalrts::reinit_name( context[6], ref_UnConditionSentencem_Auxu_check.ref.function );
    refalrts::push_stack( context[1] );
    refalrts::push_stack( context[37] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[37];
    refalrts::splice_to_freelist_open( trash_prev, res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence();

  do {
    // # UnConditionSentence-Aux_check0 e.idx
    // </0 & Mu/4 # UnConditionSentence-Aux_check0/5 e.eX#1/2 >/1
    if( ! refalrts::ident_term(  ident_UnConditionSentencem_Auxu_check0, context[5] ) )
      continue;
    // closed e.eX#1 as range 2
    //DEBUG: e.eX#1: 2

    refalrts::reset_allocator();
    //TRASH: {REMOVED TILE} </0 {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ HalfReuse: </4 HalfReuse: & UnConditionSentence-Aux_check0/5 AsIs: e.eX#1/2 AsIs: >/1 ]] }
    refalrts::reinit_open_call( context[4] );
    refalrts::reinit_name( context[5], ref_UnConditionSentencem_Auxu_check0.ref.function );
    refalrts::push_stack( context[1] );
    refalrts::push_stack( context[4] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[4];
    refalrts::splice_to_freelist_open( trash_prev, res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence();

  do {
    // ( 'UnConditionSentence-Aux_check0' ) e.idx
    // </0 & Mu/4 (/5 'U'/9 'n'/10 'C'/11 'o'/12 'n'/13 'd'/14 'i'/15 't'/16 'i'/17 'o'/18 'n'/19 'S'/20 'e'/21 'n'/22 't'/23 'e'/24 'n'/25 'c'/26 'e'/27 '-'/28 'A'/29 'u'/30 'x'/31 '_'/32 'c'/33 'h'/34 'e'/35 'c'/36 'k'/37 '0'/38 )/6 e.eX#1/2 >/1
    context[7] = 0;
    context[8] = 0;
    if( ! refalrts::brackets_term( context[7], context[8], context[5] ) )
      continue;
    context[9] = refalrts::char_left( 'U', context[7], context[8] );
    if( ! context[9] )
      continue;
    context[10] = refalrts::char_left( 'n', context[7], context[8] );
    if( ! context[10] )
      continue;
    context[11] = refalrts::char_left( 'C', context[7], context[8] );
    if( ! context[11] )
      continue;
    context[12] = refalrts::char_left( 'o', context[7], context[8] );
    if( ! context[12] )
      continue;
    context[13] = refalrts::char_left( 'n', context[7], context[8] );
    if( ! context[13] )
      continue;
    context[14] = refalrts::char_left( 'd', context[7], context[8] );
    if( ! context[14] )
      continue;
    context[15] = refalrts::char_left( 'i', context[7], context[8] );
    if( ! context[15] )
      continue;
    context[16] = refalrts::char_left( 't', context[7], context[8] );
    if( ! context[16] )
      continue;
    context[17] = refalrts::char_left( 'i', context[7], context[8] );
    if( ! context[17] )
      continue;
    context[18] = refalrts::char_left( 'o', context[7], context[8] );
    if( ! context[18] )
      continue;
    context[19] = refalrts::char_left( 'n', context[7], context[8] );
    if( ! context[19] )
      continue;
    context[20] = refalrts::char_left( 'S', context[7], context[8] );
    if( ! context[20] )
      continue;
    context[21] = refalrts::char_left( 'e', context[7], context[8] );
    if( ! context[21] )
      continue;
    context[22] = refalrts::char_left( 'n', context[7], context[8] );
    if( ! context[22] )
      continue;
    context[23] = refalrts::char_left( 't', context[7], context[8] );
    if( ! context[23] )
      continue;
    context[24] = refalrts::char_left( 'e', context[7], context[8] );
    if( ! context[24] )
      continue;
    context[25] = refalrts::char_left( 'n', context[7], context[8] );
    if( ! context[25] )
      continue;
    context[26] = refalrts::char_left( 'c', context[7], context[8] );
    if( ! context[26] )
      continue;
    context[27] = refalrts::char_left( 'e', context[7], context[8] );
    if( ! context[27] )
      continue;
    context[28] = refalrts::char_left( '-', context[7], context[8] );
    if( ! context[28] )
      continue;
    context[29] = refalrts::char_left( 'A', context[7], context[8] );
    if( ! context[29] )
      continue;
    context[30] = refalrts::char_left( 'u', context[7], context[8] );
    if( ! context[30] )
      continue;
    context[31] = refalrts::char_left( 'x', context[7], context[8] );
    if( ! context[31] )
      continue;
    context[32] = refalrts::char_left( '_', context[7], context[8] );
    if( ! context[32] )
      continue;
    context[33] = refalrts::char_left( 'c', context[7], context[8] );
    if( ! context[33] )
      continue;
    context[34] = refalrts::char_left( 'h', context[7], context[8] );
    if( ! context[34] )
      continue;
    context[35] = refalrts::char_left( 'e', context[7], context[8] );
    if( ! context[35] )
      continue;
    context[36] = refalrts::char_left( 'c', context[7], context[8] );
    if( ! context[36] )
      continue;
    context[37] = refalrts::char_left( 'k', context[7], context[8] );
    if( ! context[37] )
      continue;
    context[38] = refalrts::char_left( '0', context[7], context[8] );
    if( ! context[38] )
      continue;
    if( ! refalrts::empty_seq( context[7], context[8] ) )
      continue;
    // closed e.eX#1 as range 2
    //DEBUG: e.eX#1: 2

    refalrts::reset_allocator();
    //TRASH: {REMOVED TILE} </0 & Mu/4 (/5 'U'/9 'n'/10 'C'/11 'o'/12 'n'/13 'd'/14 'i'/15 't'/16 'i'/17 'o'/18 'n'/19 'S'/20 'e'/21 'n'/22 't'/23 'e'/24 'n'/25 'c'/26 'e'/27 '-'/28 'A'/29 'u'/30 'x'/31 '_'/32 'c'/33 'h'/34 'e'/35 'c'/36 'k'/37 {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ HalfReuse: </38 HalfReuse: & UnConditionSentence-Aux_check0/6 AsIs: e.eX#1/2 AsIs: >/1 ]] }
    refalrts::reinit_open_call( context[38] );
    refalrts::reinit_name( context[6], ref_UnConditionSentencem_Auxu_check0.ref.function );
    refalrts::push_stack( context[1] );
    refalrts::push_stack( context[38] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[38];
    refalrts::splice_to_freelist_open( trash_prev, res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence();

  do {
    // # AnalyzeContinuation e.idx
    // </0 & Mu/4 # AnalyzeContinuation/5 e.eX#1/2 >/1
    if( ! refalrts::ident_term(  ident_AnalyzeContinuation, context[5] ) )
      continue;
    // closed e.eX#1 as range 2
    //DEBUG: e.eX#1: 2

    refalrts::reset_allocator();
    //TRASH: {REMOVED TILE} </0 {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ HalfReuse: </4 HalfReuse: & AnalyzeContinuation/5 AsIs: e.eX#1/2 AsIs: >/1 ]] }
    refalrts::reinit_open_call( context[4] );
    refalrts::reinit_name( context[5], ref_AnalyzeContinuation.ref.function );
    refalrts::push_stack( context[1] );
    refalrts::push_stack( context[4] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[4];
    refalrts::splice_to_freelist_open( trash_prev, res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence();

  do {
    // ( 'AnalyzeContinuation' ) e.idx
    // </0 & Mu/4 (/5 'A'/9 'n'/10 'a'/11 'l'/12 'y'/13 'z'/14 'e'/15 'C'/16 'o'/17 'n'/18 't'/19 'i'/20 'n'/21 'u'/22 'a'/23 't'/24 'i'/25 'o'/26 'n'/27 )/6 e.eX#1/2 >/1
    context[7] = 0;
    context[8] = 0;
    if( ! refalrts::brackets_term( context[7], context[8], context[5] ) )
      continue;
    context[9] = refalrts::char_left( 'A', context[7], context[8] );
    if( ! context[9] )
      continue;
    context[10] = refalrts::char_left( 'n', context[7], context[8] );
    if( ! context[10] )
      continue;
    context[11] = refalrts::char_left( 'a', context[7], context[8] );
    if( ! context[11] )
      continue;
    context[12] = refalrts::char_left( 'l', context[7], context[8] );
    if( ! context[12] )
      continue;
    context[13] = refalrts::char_left( 'y', context[7], context[8] );
    if( ! context[13] )
      continue;
    context[14] = refalrts::char_left( 'z', context[7], context[8] );
    if( ! context[14] )
      continue;
    context[15] = refalrts::char_left( 'e', context[7], context[8] );
    if( ! context[15] )
      continue;
    context[16] = refalrts::char_left( 'C', context[7], context[8] );
    if( ! context[16] )
      continue;
    context[17] = refalrts::char_left( 'o', context[7], context[8] );
    if( ! context[17] )
      continue;
    context[18] = refalrts::char_left( 'n', context[7], context[8] );
    if( ! context[18] )
      continue;
    context[19] = refalrts::char_left( 't', context[7], context[8] );
    if( ! context[19] )
      continue;
    context[20] = refalrts::char_left( 'i', context[7], context[8] );
    if( ! context[20] )
      continue;
    context[21] = refalrts::char_left( 'n', context[7], context[8] );
    if( ! context[21] )
      continue;
    context[22] = refalrts::char_left( 'u', context[7], context[8] );
    if( ! context[22] )
      continue;
    context[23] = refalrts::char_left( 'a', context[7], context[8] );
    if( ! context[23] )
      continue;
    context[24] = refalrts::char_left( 't', context[7], context[8] );
    if( ! context[24] )
      continue;
    context[25] = refalrts::char_left( 'i', context[7], context[8] );
    if( ! context[25] )
      continue;
    context[26] = refalrts::char_left( 'o', context[7], context[8] );
    if( ! context[26] )
      continue;
    context[27] = refalrts::char_left( 'n', context[7], context[8] );
    if( ! context[27] )
      continue;
    if( ! refalrts::empty_seq( context[7], context[8] ) )
      continue;
    // closed e.eX#1 as range 2
    //DEBUG: e.eX#1: 2

    refalrts::reset_allocator();
    //TRASH: {REMOVED TILE} </0 & Mu/4 (/5 'A'/9 'n'/10 'a'/11 'l'/12 'y'/13 'z'/14 'e'/15 'C'/16 'o'/17 'n'/18 't'/19 'i'/20 'n'/21 'u'/22 'a'/23 't'/24 'i'/25 'o'/26 {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ HalfReuse: </27 HalfReuse: & AnalyzeContinuation/6 AsIs: e.eX#1/2 AsIs: >/1 ]] }
    refalrts::reinit_open_call( context[27] );
    refalrts::reinit_name( context[6], ref_AnalyzeContinuation.ref.function );
    refalrts::push_stack( context[1] );
    refalrts::push_stack( context[27] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[27];
    refalrts::splice_to_freelist_open( trash_prev, res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence();

  do {
    // # AnalyzeContinuation_check e.idx
    // </0 & Mu/4 # AnalyzeContinuation_check/5 e.eX#1/2 >/1
    if( ! refalrts::ident_term(  ident_AnalyzeContinuationu_check, context[5] ) )
      continue;
    // closed e.eX#1 as range 2
    //DEBUG: e.eX#1: 2

    refalrts::reset_allocator();
    //TRASH: {REMOVED TILE} </0 {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ HalfReuse: </4 HalfReuse: & AnalyzeContinuation_check/5 AsIs: e.eX#1/2 AsIs: >/1 ]] }
    refalrts::reinit_open_call( context[4] );
    refalrts::reinit_name( context[5], ref_AnalyzeContinuationu_check.ref.function );
    refalrts::push_stack( context[1] );
    refalrts::push_stack( context[4] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[4];
    refalrts::splice_to_freelist_open( trash_prev, res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence();

  do {
    // ( 'AnalyzeContinuation_check' ) e.idx
    // </0 & Mu/4 (/5 'A'/9 'n'/10 'a'/11 'l'/12 'y'/13 'z'/14 'e'/15 'C'/16 'o'/17 'n'/18 't'/19 'i'/20 'n'/21 'u'/22 'a'/23 't'/24 'i'/25 'o'/26 'n'/27 '_'/28 'c'/29 'h'/30 'e'/31 'c'/32 'k'/33 )/6 e.eX#1/2 >/1
    context[7] = 0;
    context[8] = 0;
    if( ! refalrts::brackets_term( context[7], context[8], context[5] ) )
      continue;
    context[9] = refalrts::char_left( 'A', context[7], context[8] );
    if( ! context[9] )
      continue;
    context[10] = refalrts::char_left( 'n', context[7], context[8] );
    if( ! context[10] )
      continue;
    context[11] = refalrts::char_left( 'a', context[7], context[8] );
    if( ! context[11] )
      continue;
    context[12] = refalrts::char_left( 'l', context[7], context[8] );
    if( ! context[12] )
      continue;
    context[13] = refalrts::char_left( 'y', context[7], context[8] );
    if( ! context[13] )
      continue;
    context[14] = refalrts::char_left( 'z', context[7], context[8] );
    if( ! context[14] )
      continue;
    context[15] = refalrts::char_left( 'e', context[7], context[8] );
    if( ! context[15] )
      continue;
    context[16] = refalrts::char_left( 'C', context[7], context[8] );
    if( ! context[16] )
      continue;
    context[17] = refalrts::char_left( 'o', context[7], context[8] );
    if( ! context[17] )
      continue;
    context[18] = refalrts::char_left( 'n', context[7], context[8] );
    if( ! context[18] )
      continue;
    context[19] = refalrts::char_left( 't', context[7], context[8] );
    if( ! context[19] )
      continue;
    context[20] = refalrts::char_left( 'i', context[7], context[8] );
    if( ! context[20] )
      continue;
    context[21] = refalrts::char_left( 'n', context[7], context[8] );
    if( ! context[21] )
      continue;
    context[22] = refalrts::char_left( 'u', context[7], context[8] );
    if( ! context[22] )
      continue;
    context[23] = refalrts::char_left( 'a', context[7], context[8] );
    if( ! context[23] )
      continue;
    context[24] = refalrts::char_left( 't', context[7], context[8] );
    if( ! context[24] )
      continue;
    context[25] = refalrts::char_left( 'i', context[7], context[8] );
    if( ! context[25] )
      continue;
    context[26] = refalrts::char_left( 'o', context[7], context[8] );
    if( ! context[26] )
      continue;
    context[27] = refalrts::char_left( 'n', context[7], context[8] );
    if( ! context[27] )
      continue;
    context[28] = refalrts::char_left( '_', context[7], context[8] );
    if( ! context[28] )
      continue;
    context[29] = refalrts::char_left( 'c', context[7], context[8] );
    if( ! context[29] )
      continue;
    context[30] = refalrts::char_left( 'h', context[7], context[8] );
    if( ! context[30] )
      continue;
    context[31] = refalrts::char_left( 'e', context[7], context[8] );
    if( ! context[31] )
      continue;
    context[32] = refalrts::char_left( 'c', context[7], context[8] );
    if( ! context[32] )
      continue;
    context[33] = refalrts::char_left( 'k', context[7], context[8] );
    if( ! context[33] )
      continue;
    if( ! refalrts::empty_seq( context[7], context[8] ) )
      continue;
    // closed e.eX#1 as range 2
    //DEBUG: e.eX#1: 2

    refalrts::reset_allocator();
    //TRASH: {REMOVED TILE} </0 & Mu/4 (/5 'A'/9 'n'/10 'a'/11 'l'/12 'y'/13 'z'/14 'e'/15 'C'/16 'o'/17 'n'/18 't'/19 'i'/20 'n'/21 'u'/22 'a'/23 't'/24 'i'/25 'o'/26 'n'/27 '_'/28 'c'/29 'h'/30 'e'/31 'c'/32 {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ HalfReuse: </33 HalfReuse: & AnalyzeContinuation_check/6 AsIs: e.eX#1/2 AsIs: >/1 ]] }
    refalrts::reinit_open_call( context[33] );
    refalrts::reinit_name( context[6], ref_AnalyzeContinuationu_check.ref.function );
    refalrts::push_stack( context[1] );
    refalrts::push_stack( context[33] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[33];
    refalrts::splice_to_freelist_open( trash_prev, res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence();

  do {
    // # MakeContinuationSentence e.idx
    // </0 & Mu/4 # MakeContinuationSentence/5 e.eX#1/2 >/1
    if( ! refalrts::ident_term(  ident_MakeContinuationSentence, context[5] ) )
      continue;
    // closed e.eX#1 as range 2
    //DEBUG: e.eX#1: 2

    refalrts::reset_allocator();
    //TRASH: {REMOVED TILE} </0 {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ HalfReuse: </4 HalfReuse: & MakeContinuationSentence/5 AsIs: e.eX#1/2 AsIs: >/1 ]] }
    refalrts::reinit_open_call( context[4] );
    refalrts::reinit_name( context[5], ref_MakeContinuationSentence.ref.function );
    refalrts::push_stack( context[1] );
    refalrts::push_stack( context[4] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[4];
    refalrts::splice_to_freelist_open( trash_prev, res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence();

  do {
    // ( 'MakeContinuationSentence' ) e.idx
    // </0 & Mu/4 (/5 'M'/9 'a'/10 'k'/11 'e'/12 'C'/13 'o'/14 'n'/15 't'/16 'i'/17 'n'/18 'u'/19 'a'/20 't'/21 'i'/22 'o'/23 'n'/24 'S'/25 'e'/26 'n'/27 't'/28 'e'/29 'n'/30 'c'/31 'e'/32 )/6 e.eX#1/2 >/1
    context[7] = 0;
    context[8] = 0;
    if( ! refalrts::brackets_term( context[7], context[8], context[5] ) )
      continue;
    context[9] = refalrts::char_left( 'M', context[7], context[8] );
    if( ! context[9] )
      continue;
    context[10] = refalrts::char_left( 'a', context[7], context[8] );
    if( ! context[10] )
      continue;
    context[11] = refalrts::char_left( 'k', context[7], context[8] );
    if( ! context[11] )
      continue;
    context[12] = refalrts::char_left( 'e', context[7], context[8] );
    if( ! context[12] )
      continue;
    context[13] = refalrts::char_left( 'C', context[7], context[8] );
    if( ! context[13] )
      continue;
    context[14] = refalrts::char_left( 'o', context[7], context[8] );
    if( ! context[14] )
      continue;
    context[15] = refalrts::char_left( 'n', context[7], context[8] );
    if( ! context[15] )
      continue;
    context[16] = refalrts::char_left( 't', context[7], context[8] );
    if( ! context[16] )
      continue;
    context[17] = refalrts::char_left( 'i', context[7], context[8] );
    if( ! context[17] )
      continue;
    context[18] = refalrts::char_left( 'n', context[7], context[8] );
    if( ! context[18] )
      continue;
    context[19] = refalrts::char_left( 'u', context[7], context[8] );
    if( ! context[19] )
      continue;
    context[20] = refalrts::char_left( 'a', context[7], context[8] );
    if( ! context[20] )
      continue;
    context[21] = refalrts::char_left( 't', context[7], context[8] );
    if( ! context[21] )
      continue;
    context[22] = refalrts::char_left( 'i', context[7], context[8] );
    if( ! context[22] )
      continue;
    context[23] = refalrts::char_left( 'o', context[7], context[8] );
    if( ! context[23] )
      continue;
    context[24] = refalrts::char_left( 'n', context[7], context[8] );
    if( ! context[24] )
      continue;
    context[25] = refalrts::char_left( 'S', context[7], context[8] );
    if( ! context[25] )
      continue;
    context[26] = refalrts::char_left( 'e', context[7], context[8] );
    if( ! context[26] )
      continue;
    context[27] = refalrts::char_left( 'n', context[7], context[8] );
    if( ! context[27] )
      continue;
    context[28] = refalrts::char_left( 't', context[7], context[8] );
    if( ! context[28] )
      continue;
    context[29] = refalrts::char_left( 'e', context[7], context[8] );
    if( ! context[29] )
      continue;
    context[30] = refalrts::char_left( 'n', context[7], context[8] );
    if( ! context[30] )
      continue;
    context[31] = refalrts::char_left( 'c', context[7], context[8] );
    if( ! context[31] )
      continue;
    context[32] = refalrts::char_left( 'e', context[7], context[8] );
    if( ! context[32] )
      continue;
    if( ! refalrts::empty_seq( context[7], context[8] ) )
      continue;
    // closed e.eX#1 as range 2
    //DEBUG: e.eX#1: 2

    refalrts::reset_allocator();
    //TRASH: {REMOVED TILE} </0 & Mu/4 (/5 'M'/9 'a'/10 'k'/11 'e'/12 'C'/13 'o'/14 'n'/15 't'/16 'i'/17 'n'/18 'u'/19 'a'/20 't'/21 'i'/22 'o'/23 'n'/24 'S'/25 'e'/26 'n'/27 't'/28 'e'/29 'n'/30 'c'/31 {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ HalfReuse: </32 HalfReuse: & MakeContinuationSentence/6 AsIs: e.eX#1/2 AsIs: >/1 ]] }
    refalrts::reinit_open_call( context[32] );
    refalrts::reinit_name( context[6], ref_MakeContinuationSentence.ref.function );
    refalrts::push_stack( context[1] );
    refalrts::push_stack( context[32] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[32];
    refalrts::splice_to_freelist_open( trash_prev, res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence();

  do {
    // # PatternSteps e.idx
    // </0 & Mu/4 # PatternSteps/5 e.eX#1/2 >/1
    if( ! refalrts::ident_term(  ident_PatternSteps, context[5] ) )
      continue;
    // closed e.eX#1 as range 2
    //DEBUG: e.eX#1: 2

    refalrts::reset_allocator();
    //TRASH: {REMOVED TILE} </0 {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ HalfReuse: </4 HalfReuse: & PatternSteps/5 AsIs: e.eX#1/2 AsIs: >/1 ]] }
    refalrts::reinit_open_call( context[4] );
    refalrts::reinit_name( context[5], ref_PatternSteps.ref.function );
    refalrts::push_stack( context[1] );
    refalrts::push_stack( context[4] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[4];
    refalrts::splice_to_freelist_open( trash_prev, res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence();

  do {
    // ( 'PatternSteps' ) e.idx
    // </0 & Mu/4 (/5 'P'/9 'a'/10 't'/11 't'/12 'e'/13 'r'/14 'n'/15 'S'/16 't'/17 'e'/18 'p'/19 's'/20 )/6 e.eX#1/2 >/1
    context[7] = 0;
    context[8] = 0;
    if( ! refalrts::brackets_term( context[7], context[8], context[5] ) )
      continue;
    context[9] = refalrts::char_left( 'P', context[7], context[8] );
    if( ! context[9] )
      continue;
    context[10] = refalrts::char_left( 'a', context[7], context[8] );
    if( ! context[10] )
      continue;
    context[11] = refalrts::char_left( 't', context[7], context[8] );
    if( ! context[11] )
      continue;
    context[12] = refalrts::char_left( 't', context[7], context[8] );
    if( ! context[12] )
      continue;
    context[13] = refalrts::char_left( 'e', context[7], context[8] );
    if( ! context[13] )
      continue;
    context[14] = refalrts::char_left( 'r', context[7], context[8] );
    if( ! context[14] )
      continue;
    context[15] = refalrts::char_left( 'n', context[7], context[8] );
    if( ! context[15] )
      continue;
    context[16] = refalrts::char_left( 'S', context[7], context[8] );
    if( ! context[16] )
      continue;
    context[17] = refalrts::char_left( 't', context[7], context[8] );
    if( ! context[17] )
      continue;
    context[18] = refalrts::char_left( 'e', context[7], context[8] );
    if( ! context[18] )
      continue;
    context[19] = refalrts::char_left( 'p', context[7], context[8] );
    if( ! context[19] )
      continue;
    context[20] = refalrts::char_left( 's', context[7], context[8] );
    if( ! context[20] )
      continue;
    if( ! refalrts::empty_seq( context[7], context[8] ) )
      continue;
    // closed e.eX#1 as range 2
    //DEBUG: e.eX#1: 2

    refalrts::reset_allocator();
    //TRASH: {REMOVED TILE} </0 & Mu/4 (/5 'P'/9 'a'/10 't'/11 't'/12 'e'/13 'r'/14 'n'/15 'S'/16 't'/17 'e'/18 'p'/19 {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ HalfReuse: </20 HalfReuse: & PatternSteps/6 AsIs: e.eX#1/2 AsIs: >/1 ]] }
    refalrts::reinit_open_call( context[20] );
    refalrts::reinit_name( context[6], ref_PatternSteps.ref.function );
    refalrts::push_stack( context[1] );
    refalrts::push_stack( context[20] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[20];
    refalrts::splice_to_freelist_open( trash_prev, res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence();

  do {
    // # DoPatternSteps e.idx
    // </0 & Mu/4 # DoPatternSteps/5 e.eX#1/2 >/1
    if( ! refalrts::ident_term(  ident_DoPatternSteps, context[5] ) )
      continue;
    // closed e.eX#1 as range 2
    //DEBUG: e.eX#1: 2

    refalrts::reset_allocator();
    //TRASH: {REMOVED TILE} </0 {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ HalfReuse: </4 HalfReuse: & DoPatternSteps/5 AsIs: e.eX#1/2 AsIs: >/1 ]] }
    refalrts::reinit_open_call( context[4] );
    refalrts::reinit_name( context[5], ref_DoPatternSteps.ref.function );
    refalrts::push_stack( context[1] );
    refalrts::push_stack( context[4] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[4];
    refalrts::splice_to_freelist_open( trash_prev, res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence();

  do {
    // ( 'DoPatternSteps' ) e.idx
    // </0 & Mu/4 (/5 'D'/9 'o'/10 'P'/11 'a'/12 't'/13 't'/14 'e'/15 'r'/16 'n'/17 'S'/18 't'/19 'e'/20 'p'/21 's'/22 )/6 e.eX#1/2 >/1
    context[7] = 0;
    context[8] = 0;
    if( ! refalrts::brackets_term( context[7], context[8], context[5] ) )
      continue;
    context[9] = refalrts::char_left( 'D', context[7], context[8] );
    if( ! context[9] )
      continue;
    context[10] = refalrts::char_left( 'o', context[7], context[8] );
    if( ! context[10] )
      continue;
    context[11] = refalrts::char_left( 'P', context[7], context[8] );
    if( ! context[11] )
      continue;
    context[12] = refalrts::char_left( 'a', context[7], context[8] );
    if( ! context[12] )
      continue;
    context[13] = refalrts::char_left( 't', context[7], context[8] );
    if( ! context[13] )
      continue;
    context[14] = refalrts::char_left( 't', context[7], context[8] );
    if( ! context[14] )
      continue;
    context[15] = refalrts::char_left( 'e', context[7], context[8] );
    if( ! context[15] )
      continue;
    context[16] = refalrts::char_left( 'r', context[7], context[8] );
    if( ! context[16] )
      continue;
    context[17] = refalrts::char_left( 'n', context[7], context[8] );
    if( ! context[17] )
      continue;
    context[18] = refalrts::char_left( 'S', context[7], context[8] );
    if( ! context[18] )
      continue;
    context[19] = refalrts::char_left( 't', context[7], context[8] );
    if( ! context[19] )
      continue;
    context[20] = refalrts::char_left( 'e', context[7], context[8] );
    if( ! context[20] )
      continue;
    context[21] = refalrts::char_left( 'p', context[7], context[8] );
    if( ! context[21] )
      continue;
    context[22] = refalrts::char_left( 's', context[7], context[8] );
    if( ! context[22] )
      continue;
    if( ! refalrts::empty_seq( context[7], context[8] ) )
      continue;
    // closed e.eX#1 as range 2
    //DEBUG: e.eX#1: 2

    refalrts::reset_allocator();
    //TRASH: {REMOVED TILE} </0 & Mu/4 (/5 'D'/9 'o'/10 'P'/11 'a'/12 't'/13 't'/14 'e'/15 'r'/16 'n'/17 'S'/18 't'/19 'e'/20 'p'/21 {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ HalfReuse: </22 HalfReuse: & DoPatternSteps/6 AsIs: e.eX#1/2 AsIs: >/1 ]] }
    refalrts::reinit_open_call( context[22] );
    refalrts::reinit_name( context[6], ref_DoPatternSteps.ref.function );
    refalrts::push_stack( context[1] );
    refalrts::push_stack( context[22] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[22];
    refalrts::splice_to_freelist_open( trash_prev, res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence();

  do {
    // # DoPatternSteps0 e.idx
    // </0 & Mu/4 # DoPatternSteps0/5 e.eX#1/2 >/1
    if( ! refalrts::ident_term(  ident_DoPatternSteps0, context[5] ) )
      continue;
    // closed e.eX#1 as range 2
    //DEBUG: e.eX#1: 2

    refalrts::reset_allocator();
    //TRASH: {REMOVED TILE} </0 {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ HalfReuse: </4 HalfReuse: & DoPatternSteps0/5 AsIs: e.eX#1/2 AsIs: >/1 ]] }
    refalrts::reinit_open_call( context[4] );
    refalrts::reinit_name( context[5], ref_DoPatternSteps0.ref.function );
    refalrts::push_stack( context[1] );
    refalrts::push_stack( context[4] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[4];
    refalrts::splice_to_freelist_open( trash_prev, res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence();

  do {
    // ( 'DoPatternSteps0' ) e.idx
    // </0 & Mu/4 (/5 'D'/9 'o'/10 'P'/11 'a'/12 't'/13 't'/14 'e'/15 'r'/16 'n'/17 'S'/18 't'/19 'e'/20 'p'/21 's'/22 '0'/23 )/6 e.eX#1/2 >/1
    context[7] = 0;
    context[8] = 0;
    if( ! refalrts::brackets_term( context[7], context[8], context[5] ) )
      continue;
    context[9] = refalrts::char_left( 'D', context[7], context[8] );
    if( ! context[9] )
      continue;
    context[10] = refalrts::char_left( 'o', context[7], context[8] );
    if( ! context[10] )
      continue;
    context[11] = refalrts::char_left( 'P', context[7], context[8] );
    if( ! context[11] )
      continue;
    context[12] = refalrts::char_left( 'a', context[7], context[8] );
    if( ! context[12] )
      continue;
    context[13] = refalrts::char_left( 't', context[7], context[8] );
    if( ! context[13] )
      continue;
    context[14] = refalrts::char_left( 't', context[7], context[8] );
    if( ! context[14] )
      continue;
    context[15] = refalrts::char_left( 'e', context[7], context[8] );
    if( ! context[15] )
      continue;
    context[16] = refalrts::char_left( 'r', context[7], context[8] );
    if( ! context[16] )
      continue;
    context[17] = refalrts::char_left( 'n', context[7], context[8] );
    if( ! context[17] )
      continue;
    context[18] = refalrts::char_left( 'S', context[7], context[8] );
    if( ! context[18] )
      continue;
    context[19] = refalrts::char_left( 't', context[7], context[8] );
    if( ! context[19] )
      continue;
    context[20] = refalrts::char_left( 'e', context[7], context[8] );
    if( ! context[20] )
      continue;
    context[21] = refalrts::char_left( 'p', context[7], context[8] );
    if( ! context[21] )
      continue;
    context[22] = refalrts::char_left( 's', context[7], context[8] );
    if( ! context[22] )
      continue;
    context[23] = refalrts::char_left( '0', context[7], context[8] );
    if( ! context[23] )
      continue;
    if( ! refalrts::empty_seq( context[7], context[8] ) )
      continue;
    // closed e.eX#1 as range 2
    //DEBUG: e.eX#1: 2

    refalrts::reset_allocator();
    //TRASH: {REMOVED TILE} </0 & Mu/4 (/5 'D'/9 'o'/10 'P'/11 'a'/12 't'/13 't'/14 'e'/15 'r'/16 'n'/17 'S'/18 't'/19 'e'/20 'p'/21 's'/22 {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ HalfReuse: </23 HalfReuse: & DoPatternSteps0/6 AsIs: e.eX#1/2 AsIs: >/1 ]] }
    refalrts::reinit_open_call( context[23] );
    refalrts::reinit_name( context[6], ref_DoPatternSteps0.ref.function );
    refalrts::push_stack( context[1] );
    refalrts::push_stack( context[23] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[23];
    refalrts::splice_to_freelist_open( trash_prev, res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence();

  do {
    // # DoPatternSteps0_check e.idx
    // </0 & Mu/4 # DoPatternSteps0_check/5 e.eX#1/2 >/1
    if( ! refalrts::ident_term(  ident_DoPatternSteps0u_check, context[5] ) )
      continue;
    // closed e.eX#1 as range 2
    //DEBUG: e.eX#1: 2

    refalrts::reset_allocator();
    //TRASH: {REMOVED TILE} </0 {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ HalfReuse: </4 HalfReuse: & DoPatternSteps0_check/5 AsIs: e.eX#1/2 AsIs: >/1 ]] }
    refalrts::reinit_open_call( context[4] );
    refalrts::reinit_name( context[5], ref_DoPatternSteps0u_check.ref.function );
    refalrts::push_stack( context[1] );
    refalrts::push_stack( context[4] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[4];
    refalrts::splice_to_freelist_open( trash_prev, res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence();

  do {
    // ( 'DoPatternSteps0_check' ) e.idx
    // </0 & Mu/4 (/5 'D'/9 'o'/10 'P'/11 'a'/12 't'/13 't'/14 'e'/15 'r'/16 'n'/17 'S'/18 't'/19 'e'/20 'p'/21 's'/22 '0'/23 '_'/24 'c'/25 'h'/26 'e'/27 'c'/28 'k'/29 )/6 e.eX#1/2 >/1
    context[7] = 0;
    context[8] = 0;
    if( ! refalrts::brackets_term( context[7], context[8], context[5] ) )
      continue;
    context[9] = refalrts::char_left( 'D', context[7], context[8] );
    if( ! context[9] )
      continue;
    context[10] = refalrts::char_left( 'o', context[7], context[8] );
    if( ! context[10] )
      continue;
    context[11] = refalrts::char_left( 'P', context[7], context[8] );
    if( ! context[11] )
      continue;
    context[12] = refalrts::char_left( 'a', context[7], context[8] );
    if( ! context[12] )
      continue;
    context[13] = refalrts::char_left( 't', context[7], context[8] );
    if( ! context[13] )
      continue;
    context[14] = refalrts::char_left( 't', context[7], context[8] );
    if( ! context[14] )
      continue;
    context[15] = refalrts::char_left( 'e', context[7], context[8] );
    if( ! context[15] )
      continue;
    context[16] = refalrts::char_left( 'r', context[7], context[8] );
    if( ! context[16] )
      continue;
    context[17] = refalrts::char_left( 'n', context[7], context[8] );
    if( ! context[17] )
      continue;
    context[18] = refalrts::char_left( 'S', context[7], context[8] );
    if( ! context[18] )
      continue;
    context[19] = refalrts::char_left( 't', context[7], context[8] );
    if( ! context[19] )
      continue;
    context[20] = refalrts::char_left( 'e', context[7], context[8] );
    if( ! context[20] )
      continue;
    context[21] = refalrts::char_left( 'p', context[7], context[8] );
    if( ! context[21] )
      continue;
    context[22] = refalrts::char_left( 's', context[7], context[8] );
    if( ! context[22] )
      continue;
    context[23] = refalrts::char_left( '0', context[7], context[8] );
    if( ! context[23] )
      continue;
    context[24] = refalrts::char_left( '_', context[7], context[8] );
    if( ! context[24] )
      continue;
    context[25] = refalrts::char_left( 'c', context[7], context[8] );
    if( ! context[25] )
      continue;
    context[26] = refalrts::char_left( 'h', context[7], context[8] );
    if( ! context[26] )
      continue;
    context[27] = refalrts::char_left( 'e', context[7], context[8] );
    if( ! context[27] )
      continue;
    context[28] = refalrts::char_left( 'c', context[7], context[8] );
    if( ! context[28] )
      continue;
    context[29] = refalrts::char_left( 'k', context[7], context[8] );
    if( ! context[29] )
      continue;
    if( ! refalrts::empty_seq( context[7], context[8] ) )
      continue;
    // closed e.eX#1 as range 2
    //DEBUG: e.eX#1: 2

    refalrts::reset_allocator();
    //TRASH: {REMOVED TILE} </0 & Mu/4 (/5 'D'/9 'o'/10 'P'/11 'a'/12 't'/13 't'/14 'e'/15 'r'/16 'n'/17 'S'/18 't'/19 'e'/20 'p'/21 's'/22 '0'/23 '_'/24 'c'/25 'h'/26 'e'/27 'c'/28 {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ HalfReuse: </29 HalfReuse: & DoPatternSteps0_check/6 AsIs: e.eX#1/2 AsIs: >/1 ]] }
    refalrts::reinit_open_call( context[29] );
    refalrts::reinit_name( context[6], ref_DoPatternSteps0u_check.ref.function );
    refalrts::push_stack( context[1] );
    refalrts::push_stack( context[29] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[29];
    refalrts::splice_to_freelist_open( trash_prev, res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence();

  do {
    // # DoPatternSteps0_forward e.idx
    // </0 & Mu/4 # DoPatternSteps0_forward/5 e.eX#1/2 >/1
    if( ! refalrts::ident_term(  ident_DoPatternSteps0u_forward, context[5] ) )
      continue;
    // closed e.eX#1 as range 2
    //DEBUG: e.eX#1: 2

    refalrts::reset_allocator();
    //TRASH: {REMOVED TILE} </0 {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ HalfReuse: </4 HalfReuse: & DoPatternSteps0_forward/5 AsIs: e.eX#1/2 AsIs: >/1 ]] }
    refalrts::reinit_open_call( context[4] );
    refalrts::reinit_name( context[5], ref_DoPatternSteps0u_forward.ref.function );
    refalrts::push_stack( context[1] );
    refalrts::push_stack( context[4] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[4];
    refalrts::splice_to_freelist_open( trash_prev, res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence();

  do {
    // ( 'DoPatternSteps0_forward' ) e.idx
    // </0 & Mu/4 (/5 'D'/9 'o'/10 'P'/11 'a'/12 't'/13 't'/14 'e'/15 'r'/16 'n'/17 'S'/18 't'/19 'e'/20 'p'/21 's'/22 '0'/23 '_'/24 'f'/25 'o'/26 'r'/27 'w'/28 'a'/29 'r'/30 'd'/31 )/6 e.eX#1/2 >/1
    context[7] = 0;
    context[8] = 0;
    if( ! refalrts::brackets_term( context[7], context[8], context[5] ) )
      continue;
    context[9] = refalrts::char_left( 'D', context[7], context[8] );
    if( ! context[9] )
      continue;
    context[10] = refalrts::char_left( 'o', context[7], context[8] );
    if( ! context[10] )
      continue;
    context[11] = refalrts::char_left( 'P', context[7], context[8] );
    if( ! context[11] )
      continue;
    context[12] = refalrts::char_left( 'a', context[7], context[8] );
    if( ! context[12] )
      continue;
    context[13] = refalrts::char_left( 't', context[7], context[8] );
    if( ! context[13] )
      continue;
    context[14] = refalrts::char_left( 't', context[7], context[8] );
    if( ! context[14] )
      continue;
    context[15] = refalrts::char_left( 'e', context[7], context[8] );
    if( ! context[15] )
      continue;
    context[16] = refalrts::char_left( 'r', context[7], context[8] );
    if( ! context[16] )
      continue;
    context[17] = refalrts::char_left( 'n', context[7], context[8] );
    if( ! context[17] )
      continue;
    context[18] = refalrts::char_left( 'S', context[7], context[8] );
    if( ! context[18] )
      continue;
    context[19] = refalrts::char_left( 't', context[7], context[8] );
    if( ! context[19] )
      continue;
    context[20] = refalrts::char_left( 'e', context[7], context[8] );
    if( ! context[20] )
      continue;
    context[21] = refalrts::char_left( 'p', context[7], context[8] );
    if( ! context[21] )
      continue;
    context[22] = refalrts::char_left( 's', context[7], context[8] );
    if( ! context[22] )
      continue;
    context[23] = refalrts::char_left( '0', context[7], context[8] );
    if( ! context[23] )
      continue;
    context[24] = refalrts::char_left( '_', context[7], context[8] );
    if( ! context[24] )
      continue;
    context[25] = refalrts::char_left( 'f', context[7], context[8] );
    if( ! context[25] )
      continue;
    context[26] = refalrts::char_left( 'o', context[7], context[8] );
    if( ! context[26] )
      continue;
    context[27] = refalrts::char_left( 'r', context[7], context[8] );
    if( ! context[27] )
      continue;
    context[28] = refalrts::char_left( 'w', context[7], context[8] );
    if( ! context[28] )
      continue;
    context[29] = refalrts::char_left( 'a', context[7], context[8] );
    if( ! context[29] )
      continue;
    context[30] = refalrts::char_left( 'r', context[7], context[8] );
    if( ! context[30] )
      continue;
    context[31] = refalrts::char_left( 'd', context[7], context[8] );
    if( ! context[31] )
      continue;
    if( ! refalrts::empty_seq( context[7], context[8] ) )
      continue;
    // closed e.eX#1 as range 2
    //DEBUG: e.eX#1: 2

    refalrts::reset_allocator();
    //TRASH: {REMOVED TILE} </0 & Mu/4 (/5 'D'/9 'o'/10 'P'/11 'a'/12 't'/13 't'/14 'e'/15 'r'/16 'n'/17 'S'/18 't'/19 'e'/20 'p'/21 's'/22 '0'/23 '_'/24 'f'/25 'o'/26 'r'/27 'w'/28 'a'/29 'r'/30 {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ HalfReuse: </31 HalfReuse: & DoPatternSteps0_forward/6 AsIs: e.eX#1/2 AsIs: >/1 ]] }
    refalrts::reinit_open_call( context[31] );
    refalrts::reinit_name( context[6], ref_DoPatternSteps0u_forward.ref.function );
    refalrts::push_stack( context[1] );
    refalrts::push_stack( context[31] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[31];
    refalrts::splice_to_freelist_open( trash_prev, res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence();

  do {
    // # DoPatternSteps0_next e.idx
    // </0 & Mu/4 # DoPatternSteps0_next/5 e.eX#1/2 >/1
    if( ! refalrts::ident_term(  ident_DoPatternSteps0u_next, context[5] ) )
      continue;
    // closed e.eX#1 as range 2
    //DEBUG: e.eX#1: 2

    refalrts::reset_allocator();
    //TRASH: {REMOVED TILE} </0 {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ HalfReuse: </4 HalfReuse: & DoPatternSteps0_next/5 AsIs: e.eX#1/2 AsIs: >/1 ]] }
    refalrts::reinit_open_call( context[4] );
    refalrts::reinit_name( context[5], ref_DoPatternSteps0u_next.ref.function );
    refalrts::push_stack( context[1] );
    refalrts::push_stack( context[4] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[4];
    refalrts::splice_to_freelist_open( trash_prev, res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence();

  do {
    // ( 'DoPatternSteps0_next' ) e.idx
    // </0 & Mu/4 (/5 'D'/9 'o'/10 'P'/11 'a'/12 't'/13 't'/14 'e'/15 'r'/16 'n'/17 'S'/18 't'/19 'e'/20 'p'/21 's'/22 '0'/23 '_'/24 'n'/25 'e'/26 'x'/27 't'/28 )/6 e.eX#1/2 >/1
    context[7] = 0;
    context[8] = 0;
    if( ! refalrts::brackets_term( context[7], context[8], context[5] ) )
      continue;
    context[9] = refalrts::char_left( 'D', context[7], context[8] );
    if( ! context[9] )
      continue;
    context[10] = refalrts::char_left( 'o', context[7], context[8] );
    if( ! context[10] )
      continue;
    context[11] = refalrts::char_left( 'P', context[7], context[8] );
    if( ! context[11] )
      continue;
    context[12] = refalrts::char_left( 'a', context[7], context[8] );
    if( ! context[12] )
      continue;
    context[13] = refalrts::char_left( 't', context[7], context[8] );
    if( ! context[13] )
      continue;
    context[14] = refalrts::char_left( 't', context[7], context[8] );
    if( ! context[14] )
      continue;
    context[15] = refalrts::char_left( 'e', context[7], context[8] );
    if( ! context[15] )
      continue;
    context[16] = refalrts::char_left( 'r', context[7], context[8] );
    if( ! context[16] )
      continue;
    context[17] = refalrts::char_left( 'n', context[7], context[8] );
    if( ! context[17] )
      continue;
    context[18] = refalrts::char_left( 'S', context[7], context[8] );
    if( ! context[18] )
      continue;
    context[19] = refalrts::char_left( 't', context[7], context[8] );
    if( ! context[19] )
      continue;
    context[20] = refalrts::char_left( 'e', context[7], context[8] );
    if( ! context[20] )
      continue;
    context[21] = refalrts::char_left( 'p', context[7], context[8] );
    if( ! context[21] )
      continue;
    context[22] = refalrts::char_left( 's', context[7], context[8] );
    if( ! context[22] )
      continue;
    context[23] = refalrts::char_left( '0', context[7], context[8] );
    if( ! context[23] )
      continue;
    context[24] = refalrts::char_left( '_', context[7], context[8] );
    if( ! context[24] )
      continue;
    context[25] = refalrts::char_left( 'n', context[7], context[8] );
    if( ! context[25] )
      continue;
    context[26] = refalrts::char_left( 'e', context[7], context[8] );
    if( ! context[26] )
      continue;
    context[27] = refalrts::char_left( 'x', context[7], context[8] );
    if( ! context[27] )
      continue;
    context[28] = refalrts::char_left( 't', context[7], context[8] );
    if( ! context[28] )
      continue;
    if( ! refalrts::empty_seq( context[7], context[8] ) )
      continue;
    // closed e.eX#1 as range 2
    //DEBUG: e.eX#1: 2

    refalrts::reset_allocator();
    //TRASH: {REMOVED TILE} </0 & Mu/4 (/5 'D'/9 'o'/10 'P'/11 'a'/12 't'/13 't'/14 'e'/15 'r'/16 'n'/17 'S'/18 't'/19 'e'/20 'p'/21 's'/22 '0'/23 '_'/24 'n'/25 'e'/26 'x'/27 {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ HalfReuse: </28 HalfReuse: & DoPatternSteps0_next/6 AsIs: e.eX#1/2 AsIs: >/1 ]] }
    refalrts::reinit_open_call( context[28] );
    refalrts::reinit_name( context[6], ref_DoPatternSteps0u_next.ref.function );
    refalrts::push_stack( context[1] );
    refalrts::push_stack( context[28] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[28];
    refalrts::splice_to_freelist_open( trash_prev, res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence();

  do {
    // # DoPatternSteps0_cont e.idx
    // </0 & Mu/4 # DoPatternSteps0_cont/5 e.eX#1/2 >/1
    if( ! refalrts::ident_term(  ident_DoPatternSteps0u_cont, context[5] ) )
      continue;
    // closed e.eX#1 as range 2
    //DEBUG: e.eX#1: 2

    refalrts::reset_allocator();
    //TRASH: {REMOVED TILE} </0 {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ HalfReuse: </4 HalfReuse: & DoPatternSteps0_cont/5 AsIs: e.eX#1/2 AsIs: >/1 ]] }
    refalrts::reinit_open_call( context[4] );
    refalrts::reinit_name( context[5], ref_DoPatternSteps0u_cont.ref.function );
    refalrts::push_stack( context[1] );
    refalrts::push_stack( context[4] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[4];
    refalrts::splice_to_freelist_open( trash_prev, res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence();

  do {
    // ( 'DoPatternSteps0_cont' ) e.idx
    // </0 & Mu/4 (/5 'D'/9 'o'/10 'P'/11 'a'/12 't'/13 't'/14 'e'/15 'r'/16 'n'/17 'S'/18 't'/19 'e'/20 'p'/21 's'/22 '0'/23 '_'/24 'c'/25 'o'/26 'n'/27 't'/28 )/6 e.eX#1/2 >/1
    context[7] = 0;
    context[8] = 0;
    if( ! refalrts::brackets_term( context[7], context[8], context[5] ) )
      continue;
    context[9] = refalrts::char_left( 'D', context[7], context[8] );
    if( ! context[9] )
      continue;
    context[10] = refalrts::char_left( 'o', context[7], context[8] );
    if( ! context[10] )
      continue;
    context[11] = refalrts::char_left( 'P', context[7], context[8] );
    if( ! context[11] )
      continue;
    context[12] = refalrts::char_left( 'a', context[7], context[8] );
    if( ! context[12] )
      continue;
    context[13] = refalrts::char_left( 't', context[7], context[8] );
    if( ! context[13] )
      continue;
    context[14] = refalrts::char_left( 't', context[7], context[8] );
    if( ! context[14] )
      continue;
    context[15] = refalrts::char_left( 'e', context[7], context[8] );
    if( ! context[15] )
      continue;
    context[16] = refalrts::char_left( 'r', context[7], context[8] );
    if( ! context[16] )
      continue;
    context[17] = refalrts::char_left( 'n', context[7], context[8] );
    if( ! context[17] )
      continue;
    context[18] = refalrts::char_left( 'S', context[7], context[8] );
    if( ! context[18] )
      continue;
    context[19] = refalrts::char_left( 't', context[7], context[8] );
    if( ! context[19] )
      continue;
    context[20] = refalrts::char_left( 'e', context[7], context[8] );
    if( ! context[20] )
      continue;
    context[21] = refalrts::char_left( 'p', context[7], context[8] );
    if( ! context[21] )
      continue;
    context[22] = refalrts::char_left( 's', context[7], context[8] );
    if( ! context[22] )
      continue;
    context[23] = refalrts::char_left( '0', context[7], context[8] );
    if( ! context[23] )
      continue;
    context[24] = refalrts::char_left( '_', context[7], context[8] );
    if( ! context[24] )
      continue;
    context[25] = refalrts::char_left( 'c', context[7], context[8] );
    if( ! context[25] )
      continue;
    context[26] = refalrts::char_left( 'o', context[7], context[8] );
    if( ! context[26] )
      continue;
    context[27] = refalrts::char_left( 'n', context[7], context[8] );
    if( ! context[27] )
      continue;
    context[28] = refalrts::char_left( 't', context[7], context[8] );
    if( ! context[28] )
      continue;
    if( ! refalrts::empty_seq( context[7], context[8] ) )
      continue;
    // closed e.eX#1 as range 2
    //DEBUG: e.eX#1: 2

    refalrts::reset_allocator();
    //TRASH: {REMOVED TILE} </0 & Mu/4 (/5 'D'/9 'o'/10 'P'/11 'a'/12 't'/13 't'/14 'e'/15 'r'/16 'n'/17 'S'/18 't'/19 'e'/20 'p'/21 's'/22 '0'/23 '_'/24 'c'/25 'o'/26 'n'/27 {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ HalfReuse: </28 HalfReuse: & DoPatternSteps0_cont/6 AsIs: e.eX#1/2 AsIs: >/1 ]] }
    refalrts::reinit_open_call( context[28] );
    refalrts::reinit_name( context[6], ref_DoPatternSteps0u_cont.ref.function );
    refalrts::push_stack( context[1] );
    refalrts::push_stack( context[28] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[28];
    refalrts::splice_to_freelist_open( trash_prev, res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence();

  do {
    // # DoPatternSteps0_check0 e.idx
    // </0 & Mu/4 # DoPatternSteps0_check0/5 e.eX#1/2 >/1
    if( ! refalrts::ident_term(  ident_DoPatternSteps0u_check0, context[5] ) )
      continue;
    // closed e.eX#1 as range 2
    //DEBUG: e.eX#1: 2

    refalrts::reset_allocator();
    //TRASH: {REMOVED TILE} </0 {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ HalfReuse: </4 HalfReuse: & DoPatternSteps0_check0/5 AsIs: e.eX#1/2 AsIs: >/1 ]] }
    refalrts::reinit_open_call( context[4] );
    refalrts::reinit_name( context[5], ref_DoPatternSteps0u_check0.ref.function );
    refalrts::push_stack( context[1] );
    refalrts::push_stack( context[4] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[4];
    refalrts::splice_to_freelist_open( trash_prev, res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence();

  do {
    // ( 'DoPatternSteps0_check0' ) e.idx
    // </0 & Mu/4 (/5 'D'/9 'o'/10 'P'/11 'a'/12 't'/13 't'/14 'e'/15 'r'/16 'n'/17 'S'/18 't'/19 'e'/20 'p'/21 's'/22 '0'/23 '_'/24 'c'/25 'h'/26 'e'/27 'c'/28 'k'/29 '0'/30 )/6 e.eX#1/2 >/1
    context[7] = 0;
    context[8] = 0;
    if( ! refalrts::brackets_term( context[7], context[8], context[5] ) )
      continue;
    context[9] = refalrts::char_left( 'D', context[7], context[8] );
    if( ! context[9] )
      continue;
    context[10] = refalrts::char_left( 'o', context[7], context[8] );
    if( ! context[10] )
      continue;
    context[11] = refalrts::char_left( 'P', context[7], context[8] );
    if( ! context[11] )
      continue;
    context[12] = refalrts::char_left( 'a', context[7], context[8] );
    if( ! context[12] )
      continue;
    context[13] = refalrts::char_left( 't', context[7], context[8] );
    if( ! context[13] )
      continue;
    context[14] = refalrts::char_left( 't', context[7], context[8] );
    if( ! context[14] )
      continue;
    context[15] = refalrts::char_left( 'e', context[7], context[8] );
    if( ! context[15] )
      continue;
    context[16] = refalrts::char_left( 'r', context[7], context[8] );
    if( ! context[16] )
      continue;
    context[17] = refalrts::char_left( 'n', context[7], context[8] );
    if( ! context[17] )
      continue;
    context[18] = refalrts::char_left( 'S', context[7], context[8] );
    if( ! context[18] )
      continue;
    context[19] = refalrts::char_left( 't', context[7], context[8] );
    if( ! context[19] )
      continue;
    context[20] = refalrts::char_left( 'e', context[7], context[8] );
    if( ! context[20] )
      continue;
    context[21] = refalrts::char_left( 'p', context[7], context[8] );
    if( ! context[21] )
      continue;
    context[22] = refalrts::char_left( 's', context[7], context[8] );
    if( ! context[22] )
      continue;
    context[23] = refalrts::char_left( '0', context[7], context[8] );
    if( ! context[23] )
      continue;
    context[24] = refalrts::char_left( '_', context[7], context[8] );
    if( ! context[24] )
      continue;
    context[25] = refalrts::char_left( 'c', context[7], context[8] );
    if( ! context[25] )
      continue;
    context[26] = refalrts::char_left( 'h', context[7], context[8] );
    if( ! context[26] )
      continue;
    context[27] = refalrts::char_left( 'e', context[7], context[8] );
    if( ! context[27] )
      continue;
    context[28] = refalrts::char_left( 'c', context[7], context[8] );
    if( ! context[28] )
      continue;
    context[29] = refalrts::char_left( 'k', context[7], context[8] );
    if( ! context[29] )
      continue;
    context[30] = refalrts::char_left( '0', context[7], context[8] );
    if( ! context[30] )
      continue;
    if( ! refalrts::empty_seq( context[7], context[8] ) )
      continue;
    // closed e.eX#1 as range 2
    //DEBUG: e.eX#1: 2

    refalrts::reset_allocator();
    //TRASH: {REMOVED TILE} </0 & Mu/4 (/5 'D'/9 'o'/10 'P'/11 'a'/12 't'/13 't'/14 'e'/15 'r'/16 'n'/17 'S'/18 't'/19 'e'/20 'p'/21 's'/22 '0'/23 '_'/24 'c'/25 'h'/26 'e'/27 'c'/28 'k'/29 {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ HalfReuse: </30 HalfReuse: & DoPatternSteps0_check0/6 AsIs: e.eX#1/2 AsIs: >/1 ]] }
    refalrts::reinit_open_call( context[30] );
    refalrts::reinit_name( context[6], ref_DoPatternSteps0u_check0.ref.function );
    refalrts::push_stack( context[1] );
    refalrts::push_stack( context[30] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[30];
    refalrts::splice_to_freelist_open( trash_prev, res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence();

  do {
    // # DoPatternSteps0_forward0 e.idx
    // </0 & Mu/4 # DoPatternSteps0_forward0/5 e.eX#1/2 >/1
    if( ! refalrts::ident_term(  ident_DoPatternSteps0u_forward0, context[5] ) )
      continue;
    // closed e.eX#1 as range 2
    //DEBUG: e.eX#1: 2

    refalrts::reset_allocator();
    //TRASH: {REMOVED TILE} </0 {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ HalfReuse: </4 HalfReuse: & DoPatternSteps0_forward0/5 AsIs: e.eX#1/2 AsIs: >/1 ]] }
    refalrts::reinit_open_call( context[4] );
    refalrts::reinit_name( context[5], ref_DoPatternSteps0u_forward0.ref.function );
    refalrts::push_stack( context[1] );
    refalrts::push_stack( context[4] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[4];
    refalrts::splice_to_freelist_open( trash_prev, res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence();

  do {
    // ( 'DoPatternSteps0_forward0' ) e.idx
    // </0 & Mu/4 (/5 'D'/9 'o'/10 'P'/11 'a'/12 't'/13 't'/14 'e'/15 'r'/16 'n'/17 'S'/18 't'/19 'e'/20 'p'/21 's'/22 '0'/23 '_'/24 'f'/25 'o'/26 'r'/27 'w'/28 'a'/29 'r'/30 'd'/31 '0'/32 )/6 e.eX#1/2 >/1
    context[7] = 0;
    context[8] = 0;
    if( ! refalrts::brackets_term( context[7], context[8], context[5] ) )
      continue;
    context[9] = refalrts::char_left( 'D', context[7], context[8] );
    if( ! context[9] )
      continue;
    context[10] = refalrts::char_left( 'o', context[7], context[8] );
    if( ! context[10] )
      continue;
    context[11] = refalrts::char_left( 'P', context[7], context[8] );
    if( ! context[11] )
      continue;
    context[12] = refalrts::char_left( 'a', context[7], context[8] );
    if( ! context[12] )
      continue;
    context[13] = refalrts::char_left( 't', context[7], context[8] );
    if( ! context[13] )
      continue;
    context[14] = refalrts::char_left( 't', context[7], context[8] );
    if( ! context[14] )
      continue;
    context[15] = refalrts::char_left( 'e', context[7], context[8] );
    if( ! context[15] )
      continue;
    context[16] = refalrts::char_left( 'r', context[7], context[8] );
    if( ! context[16] )
      continue;
    context[17] = refalrts::char_left( 'n', context[7], context[8] );
    if( ! context[17] )
      continue;
    context[18] = refalrts::char_left( 'S', context[7], context[8] );
    if( ! context[18] )
      continue;
    context[19] = refalrts::char_left( 't', context[7], context[8] );
    if( ! context[19] )
      continue;
    context[20] = refalrts::char_left( 'e', context[7], context[8] );
    if( ! context[20] )
      continue;
    context[21] = refalrts::char_left( 'p', context[7], context[8] );
    if( ! context[21] )
      continue;
    context[22] = refalrts::char_left( 's', context[7], context[8] );
    if( ! context[22] )
      continue;
    context[23] = refalrts::char_left( '0', context[7], context[8] );
    if( ! context[23] )
      continue;
    context[24] = refalrts::char_left( '_', context[7], context[8] );
    if( ! context[24] )
      continue;
    context[25] = refalrts::char_left( 'f', context[7], context[8] );
    if( ! context[25] )
      continue;
    context[26] = refalrts::char_left( 'o', context[7], context[8] );
    if( ! context[26] )
      continue;
    context[27] = refalrts::char_left( 'r', context[7], context[8] );
    if( ! context[27] )
      continue;
    context[28] = refalrts::char_left( 'w', context[7], context[8] );
    if( ! context[28] )
      continue;
    context[29] = refalrts::char_left( 'a', context[7], context[8] );
    if( ! context[29] )
      continue;
    context[30] = refalrts::char_left( 'r', context[7], context[8] );
    if( ! context[30] )
      continue;
    context[31] = refalrts::char_left( 'd', context[7], context[8] );
    if( ! context[31] )
      continue;
    context[32] = refalrts::char_left( '0', context[7], context[8] );
    if( ! context[32] )
      continue;
    if( ! refalrts::empty_seq( context[7], context[8] ) )
      continue;
    // closed e.eX#1 as range 2
    //DEBUG: e.eX#1: 2

    refalrts::reset_allocator();
    //TRASH: {REMOVED TILE} </0 & Mu/4 (/5 'D'/9 'o'/10 'P'/11 'a'/12 't'/13 't'/14 'e'/15 'r'/16 'n'/17 'S'/18 't'/19 'e'/20 'p'/21 's'/22 '0'/23 '_'/24 'f'/25 'o'/26 'r'/27 'w'/28 'a'/29 'r'/30 'd'/31 {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ HalfReuse: </32 HalfReuse: & DoPatternSteps0_forward0/6 AsIs: e.eX#1/2 AsIs: >/1 ]] }
    refalrts::reinit_open_call( context[32] );
    refalrts::reinit_name( context[6], ref_DoPatternSteps0u_forward0.ref.function );
    refalrts::push_stack( context[1] );
    refalrts::push_stack( context[32] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[32];
    refalrts::splice_to_freelist_open( trash_prev, res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence();

  do {
    // # DoPatternSteps0_next0 e.idx
    // </0 & Mu/4 # DoPatternSteps0_next0/5 e.eX#1/2 >/1
    if( ! refalrts::ident_term(  ident_DoPatternSteps0u_next0, context[5] ) )
      continue;
    // closed e.eX#1 as range 2
    //DEBUG: e.eX#1: 2

    refalrts::reset_allocator();
    //TRASH: {REMOVED TILE} </0 {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ HalfReuse: </4 HalfReuse: & DoPatternSteps0_next0/5 AsIs: e.eX#1/2 AsIs: >/1 ]] }
    refalrts::reinit_open_call( context[4] );
    refalrts::reinit_name( context[5], ref_DoPatternSteps0u_next0.ref.function );
    refalrts::push_stack( context[1] );
    refalrts::push_stack( context[4] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[4];
    refalrts::splice_to_freelist_open( trash_prev, res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence();

  do {
    // ( 'DoPatternSteps0_next0' ) e.idx
    // </0 & Mu/4 (/5 'D'/9 'o'/10 'P'/11 'a'/12 't'/13 't'/14 'e'/15 'r'/16 'n'/17 'S'/18 't'/19 'e'/20 'p'/21 's'/22 '0'/23 '_'/24 'n'/25 'e'/26 'x'/27 't'/28 '0'/29 )/6 e.eX#1/2 >/1
    context[7] = 0;
    context[8] = 0;
    if( ! refalrts::brackets_term( context[7], context[8], context[5] ) )
      continue;
    context[9] = refalrts::char_left( 'D', context[7], context[8] );
    if( ! context[9] )
      continue;
    context[10] = refalrts::char_left( 'o', context[7], context[8] );
    if( ! context[10] )
      continue;
    context[11] = refalrts::char_left( 'P', context[7], context[8] );
    if( ! context[11] )
      continue;
    context[12] = refalrts::char_left( 'a', context[7], context[8] );
    if( ! context[12] )
      continue;
    context[13] = refalrts::char_left( 't', context[7], context[8] );
    if( ! context[13] )
      continue;
    context[14] = refalrts::char_left( 't', context[7], context[8] );
    if( ! context[14] )
      continue;
    context[15] = refalrts::char_left( 'e', context[7], context[8] );
    if( ! context[15] )
      continue;
    context[16] = refalrts::char_left( 'r', context[7], context[8] );
    if( ! context[16] )
      continue;
    context[17] = refalrts::char_left( 'n', context[7], context[8] );
    if( ! context[17] )
      continue;
    context[18] = refalrts::char_left( 'S', context[7], context[8] );
    if( ! context[18] )
      continue;
    context[19] = refalrts::char_left( 't', context[7], context[8] );
    if( ! context[19] )
      continue;
    context[20] = refalrts::char_left( 'e', context[7], context[8] );
    if( ! context[20] )
      continue;
    context[21] = refalrts::char_left( 'p', context[7], context[8] );
    if( ! context[21] )
      continue;
    context[22] = refalrts::char_left( 's', context[7], context[8] );
    if( ! context[22] )
      continue;
    context[23] = refalrts::char_left( '0', context[7], context[8] );
    if( ! context[23] )
      continue;
    context[24] = refalrts::char_left( '_', context[7], context[8] );
    if( ! context[24] )
      continue;
    context[25] = refalrts::char_left( 'n', context[7], context[8] );
    if( ! context[25] )
      continue;
    context[26] = refalrts::char_left( 'e', context[7], context[8] );
    if( ! context[26] )
      continue;
    context[27] = refalrts::char_left( 'x', context[7], context[8] );
    if( ! context[27] )
      continue;
    context[28] = refalrts::char_left( 't', context[7], context[8] );
    if( ! context[28] )
      continue;
    context[29] = refalrts::char_left( '0', context[7], context[8] );
    if( ! context[29] )
      continue;
    if( ! refalrts::empty_seq( context[7], context[8] ) )
      continue;
    // closed e.eX#1 as range 2
    //DEBUG: e.eX#1: 2

    refalrts::reset_allocator();
    //TRASH: {REMOVED TILE} </0 & Mu/4 (/5 'D'/9 'o'/10 'P'/11 'a'/12 't'/13 't'/14 'e'/15 'r'/16 'n'/17 'S'/18 't'/19 'e'/20 'p'/21 's'/22 '0'/23 '_'/24 'n'/25 'e'/26 'x'/27 't'/28 {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ HalfReuse: </29 HalfReuse: & DoPatternSteps0_next0/6 AsIs: e.eX#1/2 AsIs: >/1 ]] }
    refalrts::reinit_open_call( context[29] );
    refalrts::reinit_name( context[6], ref_DoPatternSteps0u_next0.ref.function );
    refalrts::push_stack( context[1] );
    refalrts::push_stack( context[29] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[29];
    refalrts::splice_to_freelist_open( trash_prev, res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence();

  do {
    // # DoPatternSteps0_cont0 e.idx
    // </0 & Mu/4 # DoPatternSteps0_cont0/5 e.eX#1/2 >/1
    if( ! refalrts::ident_term(  ident_DoPatternSteps0u_cont0, context[5] ) )
      continue;
    // closed e.eX#1 as range 2
    //DEBUG: e.eX#1: 2

    refalrts::reset_allocator();
    //TRASH: {REMOVED TILE} </0 {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ HalfReuse: </4 HalfReuse: & DoPatternSteps0_cont0/5 AsIs: e.eX#1/2 AsIs: >/1 ]] }
    refalrts::reinit_open_call( context[4] );
    refalrts::reinit_name( context[5], ref_DoPatternSteps0u_cont0.ref.function );
    refalrts::push_stack( context[1] );
    refalrts::push_stack( context[4] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[4];
    refalrts::splice_to_freelist_open( trash_prev, res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence();

  do {
    // ( 'DoPatternSteps0_cont0' ) e.idx
    // </0 & Mu/4 (/5 'D'/9 'o'/10 'P'/11 'a'/12 't'/13 't'/14 'e'/15 'r'/16 'n'/17 'S'/18 't'/19 'e'/20 'p'/21 's'/22 '0'/23 '_'/24 'c'/25 'o'/26 'n'/27 't'/28 '0'/29 )/6 e.eX#1/2 >/1
    context[7] = 0;
    context[8] = 0;
    if( ! refalrts::brackets_term( context[7], context[8], context[5] ) )
      continue;
    context[9] = refalrts::char_left( 'D', context[7], context[8] );
    if( ! context[9] )
      continue;
    context[10] = refalrts::char_left( 'o', context[7], context[8] );
    if( ! context[10] )
      continue;
    context[11] = refalrts::char_left( 'P', context[7], context[8] );
    if( ! context[11] )
      continue;
    context[12] = refalrts::char_left( 'a', context[7], context[8] );
    if( ! context[12] )
      continue;
    context[13] = refalrts::char_left( 't', context[7], context[8] );
    if( ! context[13] )
      continue;
    context[14] = refalrts::char_left( 't', context[7], context[8] );
    if( ! context[14] )
      continue;
    context[15] = refalrts::char_left( 'e', context[7], context[8] );
    if( ! context[15] )
      continue;
    context[16] = refalrts::char_left( 'r', context[7], context[8] );
    if( ! context[16] )
      continue;
    context[17] = refalrts::char_left( 'n', context[7], context[8] );
    if( ! context[17] )
      continue;
    context[18] = refalrts::char_left( 'S', context[7], context[8] );
    if( ! context[18] )
      continue;
    context[19] = refalrts::char_left( 't', context[7], context[8] );
    if( ! context[19] )
      continue;
    context[20] = refalrts::char_left( 'e', context[7], context[8] );
    if( ! context[20] )
      continue;
    context[21] = refalrts::char_left( 'p', context[7], context[8] );
    if( ! context[21] )
      continue;
    context[22] = refalrts::char_left( 's', context[7], context[8] );
    if( ! context[22] )
      continue;
    context[23] = refalrts::char_left( '0', context[7], context[8] );
    if( ! context[23] )
      continue;
    context[24] = refalrts::char_left( '_', context[7], context[8] );
    if( ! context[24] )
      continue;
    context[25] = refalrts::char_left( 'c', context[7], context[8] );
    if( ! context[25] )
      continue;
    context[26] = refalrts::char_left( 'o', context[7], context[8] );
    if( ! context[26] )
      continue;
    context[27] = refalrts::char_left( 'n', context[7], context[8] );
    if( ! context[27] )
      continue;
    context[28] = refalrts::char_left( 't', context[7], context[8] );
    if( ! context[28] )
      continue;
    context[29] = refalrts::char_left( '0', context[7], context[8] );
    if( ! context[29] )
      continue;
    if( ! refalrts::empty_seq( context[7], context[8] ) )
      continue;
    // closed e.eX#1 as range 2
    //DEBUG: e.eX#1: 2

    refalrts::reset_allocator();
    //TRASH: {REMOVED TILE} </0 & Mu/4 (/5 'D'/9 'o'/10 'P'/11 'a'/12 't'/13 't'/14 'e'/15 'r'/16 'n'/17 'S'/18 't'/19 'e'/20 'p'/21 's'/22 '0'/23 '_'/24 'c'/25 'o'/26 'n'/27 't'/28 {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ HalfReuse: </29 HalfReuse: & DoPatternSteps0_cont0/6 AsIs: e.eX#1/2 AsIs: >/1 ]] }
    refalrts::reinit_open_call( context[29] );
    refalrts::reinit_name( context[6], ref_DoPatternSteps0u_cont0.ref.function );
    refalrts::push_stack( context[1] );
    refalrts::push_stack( context[29] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[29];
    refalrts::splice_to_freelist_open( trash_prev, res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence();

  do {
    // # HardItem e.idx
    // </0 & Mu/4 # HardItem/5 e.eX#1/2 >/1
    if( ! refalrts::ident_term(  ident_HardItem, context[5] ) )
      continue;
    // closed e.eX#1 as range 2
    //DEBUG: e.eX#1: 2

    refalrts::reset_allocator();
    //TRASH: {REMOVED TILE} </0 {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ HalfReuse: </4 HalfReuse: & HardItem/5 AsIs: e.eX#1/2 AsIs: >/1 ]] }
    refalrts::reinit_open_call( context[4] );
    refalrts::reinit_name( context[5], ref_HardItem.ref.function );
    refalrts::push_stack( context[1] );
    refalrts::push_stack( context[4] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[4];
    refalrts::splice_to_freelist_open( trash_prev, res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence();

  do {
    // ( 'HardItem' ) e.idx
    // </0 & Mu/4 (/5 'H'/9 'a'/10 'r'/11 'd'/12 'I'/13 't'/14 'e'/15 'm'/16 )/6 e.eX#1/2 >/1
    context[7] = 0;
    context[8] = 0;
    if( ! refalrts::brackets_term( context[7], context[8], context[5] ) )
      continue;
    context[9] = refalrts::char_left( 'H', context[7], context[8] );
    if( ! context[9] )
      continue;
    context[10] = refalrts::char_left( 'a', context[7], context[8] );
    if( ! context[10] )
      continue;
    context[11] = refalrts::char_left( 'r', context[7], context[8] );
    if( ! context[11] )
      continue;
    context[12] = refalrts::char_left( 'd', context[7], context[8] );
    if( ! context[12] )
      continue;
    context[13] = refalrts::char_left( 'I', context[7], context[8] );
    if( ! context[13] )
      continue;
    context[14] = refalrts::char_left( 't', context[7], context[8] );
    if( ! context[14] )
      continue;
    context[15] = refalrts::char_left( 'e', context[7], context[8] );
    if( ! context[15] )
      continue;
    context[16] = refalrts::char_left( 'm', context[7], context[8] );
    if( ! context[16] )
      continue;
    if( ! refalrts::empty_seq( context[7], context[8] ) )
      continue;
    // closed e.eX#1 as range 2
    //DEBUG: e.eX#1: 2

    refalrts::reset_allocator();
    //TRASH: {REMOVED TILE} </0 & Mu/4 (/5 'H'/9 'a'/10 'r'/11 'd'/12 'I'/13 't'/14 'e'/15 {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ HalfReuse: </16 HalfReuse: & HardItem/6 AsIs: e.eX#1/2 AsIs: >/1 ]] }
    refalrts::reinit_open_call( context[16] );
    refalrts::reinit_name( context[6], ref_HardItem.ref.function );
    refalrts::push_stack( context[1] );
    refalrts::push_stack( context[16] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[16];
    refalrts::splice_to_freelist_open( trash_prev, res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence();

  do {
    // # transformer_BindBrackets e.idx
    // </0 & Mu/4 # transformer_BindBrackets/5 e.eX#1/2 >/1
    if( ! refalrts::ident_term(  ident_transformeru_BindBrackets, context[5] ) )
      continue;
    // closed e.eX#1 as range 2
    //DEBUG: e.eX#1: 2

    refalrts::reset_allocator();
    //TRASH: {REMOVED TILE} </0 {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ HalfReuse: </4 HalfReuse: & transformer_BindBrackets/5 AsIs: e.eX#1/2 AsIs: >/1 ]] }
    refalrts::reinit_open_call( context[4] );
    refalrts::reinit_name( context[5], ref_transformeru_BindBrackets.ref.function );
    refalrts::push_stack( context[1] );
    refalrts::push_stack( context[4] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[4];
    refalrts::splice_to_freelist_open( trash_prev, res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence();

  do {
    // ( 'transformer_BindBrackets' ) e.idx
    // </0 & Mu/4 (/5 't'/9 'r'/10 'a'/11 'n'/12 's'/13 'f'/14 'o'/15 'r'/16 'm'/17 'e'/18 'r'/19 '_'/20 'B'/21 'i'/22 'n'/23 'd'/24 'B'/25 'r'/26 'a'/27 'c'/28 'k'/29 'e'/30 't'/31 's'/32 )/6 e.eX#1/2 >/1
    context[7] = 0;
    context[8] = 0;
    if( ! refalrts::brackets_term( context[7], context[8], context[5] ) )
      continue;
    context[9] = refalrts::char_left( 't', context[7], context[8] );
    if( ! context[9] )
      continue;
    context[10] = refalrts::char_left( 'r', context[7], context[8] );
    if( ! context[10] )
      continue;
    context[11] = refalrts::char_left( 'a', context[7], context[8] );
    if( ! context[11] )
      continue;
    context[12] = refalrts::char_left( 'n', context[7], context[8] );
    if( ! context[12] )
      continue;
    context[13] = refalrts::char_left( 's', context[7], context[8] );
    if( ! context[13] )
      continue;
    context[14] = refalrts::char_left( 'f', context[7], context[8] );
    if( ! context[14] )
      continue;
    context[15] = refalrts::char_left( 'o', context[7], context[8] );
    if( ! context[15] )
      continue;
    context[16] = refalrts::char_left( 'r', context[7], context[8] );
    if( ! context[16] )
      continue;
    context[17] = refalrts::char_left( 'm', context[7], context[8] );
    if( ! context[17] )
      continue;
    context[18] = refalrts::char_left( 'e', context[7], context[8] );
    if( ! context[18] )
      continue;
    context[19] = refalrts::char_left( 'r', context[7], context[8] );
    if( ! context[19] )
      continue;
    context[20] = refalrts::char_left( '_', context[7], context[8] );
    if( ! context[20] )
      continue;
    context[21] = refalrts::char_left( 'B', context[7], context[8] );
    if( ! context[21] )
      continue;
    context[22] = refalrts::char_left( 'i', context[7], context[8] );
    if( ! context[22] )
      continue;
    context[23] = refalrts::char_left( 'n', context[7], context[8] );
    if( ! context[23] )
      continue;
    context[24] = refalrts::char_left( 'd', context[7], context[8] );
    if( ! context[24] )
      continue;
    context[25] = refalrts::char_left( 'B', context[7], context[8] );
    if( ! context[25] )
      continue;
    context[26] = refalrts::char_left( 'r', context[7], context[8] );
    if( ! context[26] )
      continue;
    context[27] = refalrts::char_left( 'a', context[7], context[8] );
    if( ! context[27] )
      continue;
    context[28] = refalrts::char_left( 'c', context[7], context[8] );
    if( ! context[28] )
      continue;
    context[29] = refalrts::char_left( 'k', context[7], context[8] );
    if( ! context[29] )
      continue;
    context[30] = refalrts::char_left( 'e', context[7], context[8] );
    if( ! context[30] )
      continue;
    context[31] = refalrts::char_left( 't', context[7], context[8] );
    if( ! context[31] )
      continue;
    context[32] = refalrts::char_left( 's', context[7], context[8] );
    if( ! context[32] )
      continue;
    if( ! refalrts::empty_seq( context[7], context[8] ) )
      continue;
    // closed e.eX#1 as range 2
    //DEBUG: e.eX#1: 2

    refalrts::reset_allocator();
    //TRASH: {REMOVED TILE} </0 & Mu/4 (/5 't'/9 'r'/10 'a'/11 'n'/12 's'/13 'f'/14 'o'/15 'r'/16 'm'/17 'e'/18 'r'/19 '_'/20 'B'/21 'i'/22 'n'/23 'd'/24 'B'/25 'r'/26 'a'/27 'c'/28 'k'/29 'e'/30 't'/31 {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ HalfReuse: </32 HalfReuse: & transformer_BindBrackets/6 AsIs: e.eX#1/2 AsIs: >/1 ]] }
    refalrts::reinit_open_call( context[32] );
    refalrts::reinit_name( context[6], ref_transformeru_BindBrackets.ref.function );
    refalrts::push_stack( context[1] );
    refalrts::push_stack( context[32] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[32];
    refalrts::splice_to_freelist_open( trash_prev, res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence();

  do {
    // # DoBindBrackets e.idx
    // </0 & Mu/4 # DoBindBrackets/5 e.eX#1/2 >/1
    if( ! refalrts::ident_term(  ident_DoBindBrackets, context[5] ) )
      continue;
    // closed e.eX#1 as range 2
    //DEBUG: e.eX#1: 2

    refalrts::reset_allocator();
    //TRASH: {REMOVED TILE} </0 {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ HalfReuse: </4 HalfReuse: & DoBindBrackets/5 AsIs: e.eX#1/2 AsIs: >/1 ]] }
    refalrts::reinit_open_call( context[4] );
    refalrts::reinit_name( context[5], ref_DoBindBrackets.ref.function );
    refalrts::push_stack( context[1] );
    refalrts::push_stack( context[4] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[4];
    refalrts::splice_to_freelist_open( trash_prev, res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence();

  do {
    // ( 'DoBindBrackets' ) e.idx
    // </0 & Mu/4 (/5 'D'/9 'o'/10 'B'/11 'i'/12 'n'/13 'd'/14 'B'/15 'r'/16 'a'/17 'c'/18 'k'/19 'e'/20 't'/21 's'/22 )/6 e.eX#1/2 >/1
    context[7] = 0;
    context[8] = 0;
    if( ! refalrts::brackets_term( context[7], context[8], context[5] ) )
      continue;
    context[9] = refalrts::char_left( 'D', context[7], context[8] );
    if( ! context[9] )
      continue;
    context[10] = refalrts::char_left( 'o', context[7], context[8] );
    if( ! context[10] )
      continue;
    context[11] = refalrts::char_left( 'B', context[7], context[8] );
    if( ! context[11] )
      continue;
    context[12] = refalrts::char_left( 'i', context[7], context[8] );
    if( ! context[12] )
      continue;
    context[13] = refalrts::char_left( 'n', context[7], context[8] );
    if( ! context[13] )
      continue;
    context[14] = refalrts::char_left( 'd', context[7], context[8] );
    if( ! context[14] )
      continue;
    context[15] = refalrts::char_left( 'B', context[7], context[8] );
    if( ! context[15] )
      continue;
    context[16] = refalrts::char_left( 'r', context[7], context[8] );
    if( ! context[16] )
      continue;
    context[17] = refalrts::char_left( 'a', context[7], context[8] );
    if( ! context[17] )
      continue;
    context[18] = refalrts::char_left( 'c', context[7], context[8] );
    if( ! context[18] )
      continue;
    context[19] = refalrts::char_left( 'k', context[7], context[8] );
    if( ! context[19] )
      continue;
    context[20] = refalrts::char_left( 'e', context[7], context[8] );
    if( ! context[20] )
      continue;
    context[21] = refalrts::char_left( 't', context[7], context[8] );
    if( ! context[21] )
      continue;
    context[22] = refalrts::char_left( 's', context[7], context[8] );
    if( ! context[22] )
      continue;
    if( ! refalrts::empty_seq( context[7], context[8] ) )
      continue;
    // closed e.eX#1 as range 2
    //DEBUG: e.eX#1: 2

    refalrts::reset_allocator();
    //TRASH: {REMOVED TILE} </0 & Mu/4 (/5 'D'/9 'o'/10 'B'/11 'i'/12 'n'/13 'd'/14 'B'/15 'r'/16 'a'/17 'c'/18 'k'/19 'e'/20 't'/21 {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ HalfReuse: </22 HalfReuse: & DoBindBrackets/6 AsIs: e.eX#1/2 AsIs: >/1 ]] }
    refalrts::reinit_open_call( context[22] );
    refalrts::reinit_name( context[6], ref_DoBindBrackets.ref.function );
    refalrts::push_stack( context[1] );
    refalrts::push_stack( context[22] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[22];
    refalrts::splice_to_freelist_open( trash_prev, res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence();

  do {
    // # DoBindBrackets_check e.idx
    // </0 & Mu/4 # DoBindBrackets_check/5 e.eX#1/2 >/1
    if( ! refalrts::ident_term(  ident_DoBindBracketsu_check, context[5] ) )
      continue;
    // closed e.eX#1 as range 2
    //DEBUG: e.eX#1: 2

    refalrts::reset_allocator();
    //TRASH: {REMOVED TILE} </0 {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ HalfReuse: </4 HalfReuse: & DoBindBrackets_check/5 AsIs: e.eX#1/2 AsIs: >/1 ]] }
    refalrts::reinit_open_call( context[4] );
    refalrts::reinit_name( context[5], ref_DoBindBracketsu_check.ref.function );
    refalrts::push_stack( context[1] );
    refalrts::push_stack( context[4] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[4];
    refalrts::splice_to_freelist_open( trash_prev, res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence();

  do {
    // ( 'DoBindBrackets_check' ) e.idx
    // </0 & Mu/4 (/5 'D'/9 'o'/10 'B'/11 'i'/12 'n'/13 'd'/14 'B'/15 'r'/16 'a'/17 'c'/18 'k'/19 'e'/20 't'/21 's'/22 '_'/23 'c'/24 'h'/25 'e'/26 'c'/27 'k'/28 )/6 e.eX#1/2 >/1
    context[7] = 0;
    context[8] = 0;
    if( ! refalrts::brackets_term( context[7], context[8], context[5] ) )
      continue;
    context[9] = refalrts::char_left( 'D', context[7], context[8] );
    if( ! context[9] )
      continue;
    context[10] = refalrts::char_left( 'o', context[7], context[8] );
    if( ! context[10] )
      continue;
    context[11] = refalrts::char_left( 'B', context[7], context[8] );
    if( ! context[11] )
      continue;
    context[12] = refalrts::char_left( 'i', context[7], context[8] );
    if( ! context[12] )
      continue;
    context[13] = refalrts::char_left( 'n', context[7], context[8] );
    if( ! context[13] )
      continue;
    context[14] = refalrts::char_left( 'd', context[7], context[8] );
    if( ! context[14] )
      continue;
    context[15] = refalrts::char_left( 'B', context[7], context[8] );
    if( ! context[15] )
      continue;
    context[16] = refalrts::char_left( 'r', context[7], context[8] );
    if( ! context[16] )
      continue;
    context[17] = refalrts::char_left( 'a', context[7], context[8] );
    if( ! context[17] )
      continue;
    context[18] = refalrts::char_left( 'c', context[7], context[8] );
    if( ! context[18] )
      continue;
    context[19] = refalrts::char_left( 'k', context[7], context[8] );
    if( ! context[19] )
      continue;
    context[20] = refalrts::char_left( 'e', context[7], context[8] );
    if( ! context[20] )
      continue;
    context[21] = refalrts::char_left( 't', context[7], context[8] );
    if( ! context[21] )
      continue;
    context[22] = refalrts::char_left( 's', context[7], context[8] );
    if( ! context[22] )
      continue;
    context[23] = refalrts::char_left( '_', context[7], context[8] );
    if( ! context[23] )
      continue;
    context[24] = refalrts::char_left( 'c', context[7], context[8] );
    if( ! context[24] )
      continue;
    context[25] = refalrts::char_left( 'h', context[7], context[8] );
    if( ! context[25] )
      continue;
    context[26] = refalrts::char_left( 'e', context[7], context[8] );
    if( ! context[26] )
      continue;
    context[27] = refalrts::char_left( 'c', context[7], context[8] );
    if( ! context[27] )
      continue;
    context[28] = refalrts::char_left( 'k', context[7], context[8] );
    if( ! context[28] )
      continue;
    if( ! refalrts::empty_seq( context[7], context[8] ) )
      continue;
    // closed e.eX#1 as range 2
    //DEBUG: e.eX#1: 2

    refalrts::reset_allocator();
    //TRASH: {REMOVED TILE} </0 & Mu/4 (/5 'D'/9 'o'/10 'B'/11 'i'/12 'n'/13 'd'/14 'B'/15 'r'/16 'a'/17 'c'/18 'k'/19 'e'/20 't'/21 's'/22 '_'/23 'c'/24 'h'/25 'e'/26 'c'/27 {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ HalfReuse: </28 HalfReuse: & DoBindBrackets_check/6 AsIs: e.eX#1/2 AsIs: >/1 ]] }
    refalrts::reinit_open_call( context[28] );
    refalrts::reinit_name( context[6], ref_DoBindBracketsu_check.ref.function );
    refalrts::push_stack( context[1] );
    refalrts::push_stack( context[28] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[28];
    refalrts::splice_to_freelist_open( trash_prev, res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence();

  do {
    // # DoBindBrackets_cont e.idx
    // </0 & Mu/4 # DoBindBrackets_cont/5 e.eX#1/2 >/1
    if( ! refalrts::ident_term(  ident_DoBindBracketsu_cont, context[5] ) )
      continue;
    // closed e.eX#1 as range 2
    //DEBUG: e.eX#1: 2

    refalrts::reset_allocator();
    //TRASH: {REMOVED TILE} </0 {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ HalfReuse: </4 HalfReuse: & DoBindBrackets_cont/5 AsIs: e.eX#1/2 AsIs: >/1 ]] }
    refalrts::reinit_open_call( context[4] );
    refalrts::reinit_name( context[5], ref_DoBindBracketsu_cont.ref.function );
    refalrts::push_stack( context[1] );
    refalrts::push_stack( context[4] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[4];
    refalrts::splice_to_freelist_open( trash_prev, res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence();

  do {
    // ( 'DoBindBrackets_cont' ) e.idx
    // </0 & Mu/4 (/5 'D'/9 'o'/10 'B'/11 'i'/12 'n'/13 'd'/14 'B'/15 'r'/16 'a'/17 'c'/18 'k'/19 'e'/20 't'/21 's'/22 '_'/23 'c'/24 'o'/25 'n'/26 't'/27 )/6 e.eX#1/2 >/1
    context[7] = 0;
    context[8] = 0;
    if( ! refalrts::brackets_term( context[7], context[8], context[5] ) )
      continue;
    context[9] = refalrts::char_left( 'D', context[7], context[8] );
    if( ! context[9] )
      continue;
    context[10] = refalrts::char_left( 'o', context[7], context[8] );
    if( ! context[10] )
      continue;
    context[11] = refalrts::char_left( 'B', context[7], context[8] );
    if( ! context[11] )
      continue;
    context[12] = refalrts::char_left( 'i', context[7], context[8] );
    if( ! context[12] )
      continue;
    context[13] = refalrts::char_left( 'n', context[7], context[8] );
    if( ! context[13] )
      continue;
    context[14] = refalrts::char_left( 'd', context[7], context[8] );
    if( ! context[14] )
      continue;
    context[15] = refalrts::char_left( 'B', context[7], context[8] );
    if( ! context[15] )
      continue;
    context[16] = refalrts::char_left( 'r', context[7], context[8] );
    if( ! context[16] )
      continue;
    context[17] = refalrts::char_left( 'a', context[7], context[8] );
    if( ! context[17] )
      continue;
    context[18] = refalrts::char_left( 'c', context[7], context[8] );
    if( ! context[18] )
      continue;
    context[19] = refalrts::char_left( 'k', context[7], context[8] );
    if( ! context[19] )
      continue;
    context[20] = refalrts::char_left( 'e', context[7], context[8] );
    if( ! context[20] )
      continue;
    context[21] = refalrts::char_left( 't', context[7], context[8] );
    if( ! context[21] )
      continue;
    context[22] = refalrts::char_left( 's', context[7], context[8] );
    if( ! context[22] )
      continue;
    context[23] = refalrts::char_left( '_', context[7], context[8] );
    if( ! context[23] )
      continue;
    context[24] = refalrts::char_left( 'c', context[7], context[8] );
    if( ! context[24] )
      continue;
    context[25] = refalrts::char_left( 'o', context[7], context[8] );
    if( ! context[25] )
      continue;
    context[26] = refalrts::char_left( 'n', context[7], context[8] );
    if( ! context[26] )
      continue;
    context[27] = refalrts::char_left( 't', context[7], context[8] );
    if( ! context[27] )
      continue;
    if( ! refalrts::empty_seq( context[7], context[8] ) )
      continue;
    // closed e.eX#1 as range 2
    //DEBUG: e.eX#1: 2

    refalrts::reset_allocator();
    //TRASH: {REMOVED TILE} </0 & Mu/4 (/5 'D'/9 'o'/10 'B'/11 'i'/12 'n'/13 'd'/14 'B'/15 'r'/16 'a'/17 'c'/18 'k'/19 'e'/20 't'/21 's'/22 '_'/23 'c'/24 'o'/25 'n'/26 {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ HalfReuse: </27 HalfReuse: & DoBindBrackets_cont/6 AsIs: e.eX#1/2 AsIs: >/1 ]] }
    refalrts::reinit_open_call( context[27] );
    refalrts::reinit_name( context[6], ref_DoBindBracketsu_cont.ref.function );
    refalrts::push_stack( context[1] );
    refalrts::push_stack( context[27] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[27];
    refalrts::splice_to_freelist_open( trash_prev, res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence();

  do {
    // # T1 e.idx
    // </0 & Mu/4 # T1/5 e.eX#1/2 >/1
    if( ! refalrts::ident_term(  ident_T1, context[5] ) )
      continue;
    // closed e.eX#1 as range 2
    //DEBUG: e.eX#1: 2

    refalrts::reset_allocator();
    //TRASH: {REMOVED TILE} </0 {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ HalfReuse: </4 HalfReuse: & T1/5 AsIs: e.eX#1/2 AsIs: >/1 ]] }
    refalrts::reinit_open_call( context[4] );
    refalrts::reinit_name( context[5], ref_T1.ref.function );
    refalrts::push_stack( context[1] );
    refalrts::push_stack( context[4] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[4];
    refalrts::splice_to_freelist_open( trash_prev, res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence();

  do {
    // ( 'T1' ) e.idx
    // </0 & Mu/4 (/5 'T'/9 '1'/10 )/6 e.eX#1/2 >/1
    context[7] = 0;
    context[8] = 0;
    if( ! refalrts::brackets_term( context[7], context[8], context[5] ) )
      continue;
    context[9] = refalrts::char_left( 'T', context[7], context[8] );
    if( ! context[9] )
      continue;
    context[10] = refalrts::char_left( '1', context[7], context[8] );
    if( ! context[10] )
      continue;
    if( ! refalrts::empty_seq( context[7], context[8] ) )
      continue;
    // closed e.eX#1 as range 2
    //DEBUG: e.eX#1: 2

    refalrts::reset_allocator();
    //TRASH: {REMOVED TILE} </0 & Mu/4 (/5 'T'/9 {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ HalfReuse: </10 HalfReuse: & T1/6 AsIs: e.eX#1/2 AsIs: >/1 ]] }
    refalrts::reinit_open_call( context[10] );
    refalrts::reinit_name( context[6], ref_T1.ref.function );
    refalrts::push_stack( context[1] );
    refalrts::push_stack( context[10] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[10];
    refalrts::splice_to_freelist_open( trash_prev, res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence();

  do {
    // # T1_check e.idx
    // </0 & Mu/4 # T1_check/5 e.eX#1/2 >/1
    if( ! refalrts::ident_term(  ident_T1u_check, context[5] ) )
      continue;
    // closed e.eX#1 as range 2
    //DEBUG: e.eX#1: 2

    refalrts::reset_allocator();
    //TRASH: {REMOVED TILE} </0 {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ HalfReuse: </4 HalfReuse: & T1_check/5 AsIs: e.eX#1/2 AsIs: >/1 ]] }
    refalrts::reinit_open_call( context[4] );
    refalrts::reinit_name( context[5], ref_T1u_check.ref.function );
    refalrts::push_stack( context[1] );
    refalrts::push_stack( context[4] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[4];
    refalrts::splice_to_freelist_open( trash_prev, res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence();

  do {
    // ( 'T1_check' ) e.idx
    // </0 & Mu/4 (/5 'T'/9 '1'/10 '_'/11 'c'/12 'h'/13 'e'/14 'c'/15 'k'/16 )/6 e.eX#1/2 >/1
    context[7] = 0;
    context[8] = 0;
    if( ! refalrts::brackets_term( context[7], context[8], context[5] ) )
      continue;
    context[9] = refalrts::char_left( 'T', context[7], context[8] );
    if( ! context[9] )
      continue;
    context[10] = refalrts::char_left( '1', context[7], context[8] );
    if( ! context[10] )
      continue;
    context[11] = refalrts::char_left( '_', context[7], context[8] );
    if( ! context[11] )
      continue;
    context[12] = refalrts::char_left( 'c', context[7], context[8] );
    if( ! context[12] )
      continue;
    context[13] = refalrts::char_left( 'h', context[7], context[8] );
    if( ! context[13] )
      continue;
    context[14] = refalrts::char_left( 'e', context[7], context[8] );
    if( ! context[14] )
      continue;
    context[15] = refalrts::char_left( 'c', context[7], context[8] );
    if( ! context[15] )
      continue;
    context[16] = refalrts::char_left( 'k', context[7], context[8] );
    if( ! context[16] )
      continue;
    if( ! refalrts::empty_seq( context[7], context[8] ) )
      continue;
    // closed e.eX#1 as range 2
    //DEBUG: e.eX#1: 2

    refalrts::reset_allocator();
    //TRASH: {REMOVED TILE} </0 & Mu/4 (/5 'T'/9 '1'/10 '_'/11 'c'/12 'h'/13 'e'/14 'c'/15 {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ HalfReuse: </16 HalfReuse: & T1_check/6 AsIs: e.eX#1/2 AsIs: >/1 ]] }
    refalrts::reinit_open_call( context[16] );
    refalrts::reinit_name( context[6], ref_T1u_check.ref.function );
    refalrts::push_stack( context[1] );
    refalrts::push_stack( context[16] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[16];
    refalrts::splice_to_freelist_open( trash_prev, res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence();

  do {
    // # T1_forward e.idx
    // </0 & Mu/4 # T1_forward/5 e.eX#1/2 >/1
    if( ! refalrts::ident_term(  ident_T1u_forward, context[5] ) )
      continue;
    // closed e.eX#1 as range 2
    //DEBUG: e.eX#1: 2

    refalrts::reset_allocator();
    //TRASH: {REMOVED TILE} </0 {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ HalfReuse: </4 HalfReuse: & T1_forward/5 AsIs: e.eX#1/2 AsIs: >/1 ]] }
    refalrts::reinit_open_call( context[4] );
    refalrts::reinit_name( context[5], ref_T1u_forward.ref.function );
    refalrts::push_stack( context[1] );
    refalrts::push_stack( context[4] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[4];
    refalrts::splice_to_freelist_open( trash_prev, res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence();

  do {
    // ( 'T1_forward' ) e.idx
    // </0 & Mu/4 (/5 'T'/9 '1'/10 '_'/11 'f'/12 'o'/13 'r'/14 'w'/15 'a'/16 'r'/17 'd'/18 )/6 e.eX#1/2 >/1
    context[7] = 0;
    context[8] = 0;
    if( ! refalrts::brackets_term( context[7], context[8], context[5] ) )
      continue;
    context[9] = refalrts::char_left( 'T', context[7], context[8] );
    if( ! context[9] )
      continue;
    context[10] = refalrts::char_left( '1', context[7], context[8] );
    if( ! context[10] )
      continue;
    context[11] = refalrts::char_left( '_', context[7], context[8] );
    if( ! context[11] )
      continue;
    context[12] = refalrts::char_left( 'f', context[7], context[8] );
    if( ! context[12] )
      continue;
    context[13] = refalrts::char_left( 'o', context[7], context[8] );
    if( ! context[13] )
      continue;
    context[14] = refalrts::char_left( 'r', context[7], context[8] );
    if( ! context[14] )
      continue;
    context[15] = refalrts::char_left( 'w', context[7], context[8] );
    if( ! context[15] )
      continue;
    context[16] = refalrts::char_left( 'a', context[7], context[8] );
    if( ! context[16] )
      continue;
    context[17] = refalrts::char_left( 'r', context[7], context[8] );
    if( ! context[17] )
      continue;
    context[18] = refalrts::char_left( 'd', context[7], context[8] );
    if( ! context[18] )
      continue;
    if( ! refalrts::empty_seq( context[7], context[8] ) )
      continue;
    // closed e.eX#1 as range 2
    //DEBUG: e.eX#1: 2

    refalrts::reset_allocator();
    //TRASH: {REMOVED TILE} </0 & Mu/4 (/5 'T'/9 '1'/10 '_'/11 'f'/12 'o'/13 'r'/14 'w'/15 'a'/16 'r'/17 {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ HalfReuse: </18 HalfReuse: & T1_forward/6 AsIs: e.eX#1/2 AsIs: >/1 ]] }
    refalrts::reinit_open_call( context[18] );
    refalrts::reinit_name( context[6], ref_T1u_forward.ref.function );
    refalrts::push_stack( context[1] );
    refalrts::push_stack( context[18] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[18];
    refalrts::splice_to_freelist_open( trash_prev, res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence();

  do {
    // # T1_next e.idx
    // </0 & Mu/4 # T1_next/5 e.eX#1/2 >/1
    if( ! refalrts::ident_term(  ident_T1u_next, context[5] ) )
      continue;
    // closed e.eX#1 as range 2
    //DEBUG: e.eX#1: 2

    refalrts::reset_allocator();
    //TRASH: {REMOVED TILE} </0 {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ HalfReuse: </4 HalfReuse: & T1_next/5 AsIs: e.eX#1/2 AsIs: >/1 ]] }
    refalrts::reinit_open_call( context[4] );
    refalrts::reinit_name( context[5], ref_T1u_next.ref.function );
    refalrts::push_stack( context[1] );
    refalrts::push_stack( context[4] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[4];
    refalrts::splice_to_freelist_open( trash_prev, res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence();

  do {
    // ( 'T1_next' ) e.idx
    // </0 & Mu/4 (/5 'T'/9 '1'/10 '_'/11 'n'/12 'e'/13 'x'/14 't'/15 )/6 e.eX#1/2 >/1
    context[7] = 0;
    context[8] = 0;
    if( ! refalrts::brackets_term( context[7], context[8], context[5] ) )
      continue;
    context[9] = refalrts::char_left( 'T', context[7], context[8] );
    if( ! context[9] )
      continue;
    context[10] = refalrts::char_left( '1', context[7], context[8] );
    if( ! context[10] )
      continue;
    context[11] = refalrts::char_left( '_', context[7], context[8] );
    if( ! context[11] )
      continue;
    context[12] = refalrts::char_left( 'n', context[7], context[8] );
    if( ! context[12] )
      continue;
    context[13] = refalrts::char_left( 'e', context[7], context[8] );
    if( ! context[13] )
      continue;
    context[14] = refalrts::char_left( 'x', context[7], context[8] );
    if( ! context[14] )
      continue;
    context[15] = refalrts::char_left( 't', context[7], context[8] );
    if( ! context[15] )
      continue;
    if( ! refalrts::empty_seq( context[7], context[8] ) )
      continue;
    // closed e.eX#1 as range 2
    //DEBUG: e.eX#1: 2

    refalrts::reset_allocator();
    //TRASH: {REMOVED TILE} </0 & Mu/4 (/5 'T'/9 '1'/10 '_'/11 'n'/12 'e'/13 'x'/14 {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ HalfReuse: </15 HalfReuse: & T1_next/6 AsIs: e.eX#1/2 AsIs: >/1 ]] }
    refalrts::reinit_open_call( context[15] );
    refalrts::reinit_name( context[6], ref_T1u_next.ref.function );
    refalrts::push_stack( context[1] );
    refalrts::push_stack( context[15] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[15];
    refalrts::splice_to_freelist_open( trash_prev, res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence();

  do {
    // # T1_check0 e.idx
    // </0 & Mu/4 # T1_check0/5 e.eX#1/2 >/1
    if( ! refalrts::ident_term(  ident_T1u_check0, context[5] ) )
      continue;
    // closed e.eX#1 as range 2
    //DEBUG: e.eX#1: 2

    refalrts::reset_allocator();
    //TRASH: {REMOVED TILE} </0 {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ HalfReuse: </4 HalfReuse: & T1_check0/5 AsIs: e.eX#1/2 AsIs: >/1 ]] }
    refalrts::reinit_open_call( context[4] );
    refalrts::reinit_name( context[5], ref_T1u_check0.ref.function );
    refalrts::push_stack( context[1] );
    refalrts::push_stack( context[4] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[4];
    refalrts::splice_to_freelist_open( trash_prev, res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence();

  do {
    // ( 'T1_check0' ) e.idx
    // </0 & Mu/4 (/5 'T'/9 '1'/10 '_'/11 'c'/12 'h'/13 'e'/14 'c'/15 'k'/16 '0'/17 )/6 e.eX#1/2 >/1
    context[7] = 0;
    context[8] = 0;
    if( ! refalrts::brackets_term( context[7], context[8], context[5] ) )
      continue;
    context[9] = refalrts::char_left( 'T', context[7], context[8] );
    if( ! context[9] )
      continue;
    context[10] = refalrts::char_left( '1', context[7], context[8] );
    if( ! context[10] )
      continue;
    context[11] = refalrts::char_left( '_', context[7], context[8] );
    if( ! context[11] )
      continue;
    context[12] = refalrts::char_left( 'c', context[7], context[8] );
    if( ! context[12] )
      continue;
    context[13] = refalrts::char_left( 'h', context[7], context[8] );
    if( ! context[13] )
      continue;
    context[14] = refalrts::char_left( 'e', context[7], context[8] );
    if( ! context[14] )
      continue;
    context[15] = refalrts::char_left( 'c', context[7], context[8] );
    if( ! context[15] )
      continue;
    context[16] = refalrts::char_left( 'k', context[7], context[8] );
    if( ! context[16] )
      continue;
    context[17] = refalrts::char_left( '0', context[7], context[8] );
    if( ! context[17] )
      continue;
    if( ! refalrts::empty_seq( context[7], context[8] ) )
      continue;
    // closed e.eX#1 as range 2
    //DEBUG: e.eX#1: 2

    refalrts::reset_allocator();
    //TRASH: {REMOVED TILE} </0 & Mu/4 (/5 'T'/9 '1'/10 '_'/11 'c'/12 'h'/13 'e'/14 'c'/15 'k'/16 {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ HalfReuse: </17 HalfReuse: & T1_check0/6 AsIs: e.eX#1/2 AsIs: >/1 ]] }
    refalrts::reinit_open_call( context[17] );
    refalrts::reinit_name( context[6], ref_T1u_check0.ref.function );
    refalrts::push_stack( context[1] );
    refalrts::push_stack( context[17] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[17];
    refalrts::splice_to_freelist_open( trash_prev, res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence();

  do {
    // # T1_cont e.idx
    // </0 & Mu/4 # T1_cont/5 e.eX#1/2 >/1
    if( ! refalrts::ident_term(  ident_T1u_cont, context[5] ) )
      continue;
    // closed e.eX#1 as range 2
    //DEBUG: e.eX#1: 2

    refalrts::reset_allocator();
    //TRASH: {REMOVED TILE} </0 {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ HalfReuse: </4 HalfReuse: & T1_cont/5 AsIs: e.eX#1/2 AsIs: >/1 ]] }
    refalrts::reinit_open_call( context[4] );
    refalrts::reinit_name( context[5], ref_T1u_cont.ref.function );
    refalrts::push_stack( context[1] );
    refalrts::push_stack( context[4] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[4];
    refalrts::splice_to_freelist_open( trash_prev, res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence();

  do {
    // ( 'T1_cont' ) e.idx
    // </0 & Mu/4 (/5 'T'/9 '1'/10 '_'/11 'c'/12 'o'/13 'n'/14 't'/15 )/6 e.eX#1/2 >/1
    context[7] = 0;
    context[8] = 0;
    if( ! refalrts::brackets_term( context[7], context[8], context[5] ) )
      continue;
    context[9] = refalrts::char_left( 'T', context[7], context[8] );
    if( ! context[9] )
      continue;
    context[10] = refalrts::char_left( '1', context[7], context[8] );
    if( ! context[10] )
      continue;
    context[11] = refalrts::char_left( '_', context[7], context[8] );
    if( ! context[11] )
      continue;
    context[12] = refalrts::char_left( 'c', context[7], context[8] );
    if( ! context[12] )
      continue;
    context[13] = refalrts::char_left( 'o', context[7], context[8] );
    if( ! context[13] )
      continue;
    context[14] = refalrts::char_left( 'n', context[7], context[8] );
    if( ! context[14] )
      continue;
    context[15] = refalrts::char_left( 't', context[7], context[8] );
    if( ! context[15] )
      continue;
    if( ! refalrts::empty_seq( context[7], context[8] ) )
      continue;
    // closed e.eX#1 as range 2
    //DEBUG: e.eX#1: 2

    refalrts::reset_allocator();
    //TRASH: {REMOVED TILE} </0 & Mu/4 (/5 'T'/9 '1'/10 '_'/11 'c'/12 'o'/13 'n'/14 {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ HalfReuse: </15 HalfReuse: & T1_cont/6 AsIs: e.eX#1/2 AsIs: >/1 ]] }
    refalrts::reinit_open_call( context[15] );
    refalrts::reinit_name( context[6], ref_T1u_cont.ref.function );
    refalrts::push_stack( context[1] );
    refalrts::push_stack( context[15] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[15];
    refalrts::splice_to_freelist_open( trash_prev, res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence();

  do {
    // # T1_check1 e.idx
    // </0 & Mu/4 # T1_check1/5 e.eX#1/2 >/1
    if( ! refalrts::ident_term(  ident_T1u_check1, context[5] ) )
      continue;
    // closed e.eX#1 as range 2
    //DEBUG: e.eX#1: 2

    refalrts::reset_allocator();
    //TRASH: {REMOVED TILE} </0 {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ HalfReuse: </4 HalfReuse: & T1_check1/5 AsIs: e.eX#1/2 AsIs: >/1 ]] }
    refalrts::reinit_open_call( context[4] );
    refalrts::reinit_name( context[5], ref_T1u_check1.ref.function );
    refalrts::push_stack( context[1] );
    refalrts::push_stack( context[4] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[4];
    refalrts::splice_to_freelist_open( trash_prev, res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence();

  do {
    // ( 'T1_check1' ) e.idx
    // </0 & Mu/4 (/5 'T'/9 '1'/10 '_'/11 'c'/12 'h'/13 'e'/14 'c'/15 'k'/16 '1'/17 )/6 e.eX#1/2 >/1
    context[7] = 0;
    context[8] = 0;
    if( ! refalrts::brackets_term( context[7], context[8], context[5] ) )
      continue;
    context[9] = refalrts::char_left( 'T', context[7], context[8] );
    if( ! context[9] )
      continue;
    context[10] = refalrts::char_left( '1', context[7], context[8] );
    if( ! context[10] )
      continue;
    context[11] = refalrts::char_left( '_', context[7], context[8] );
    if( ! context[11] )
      continue;
    context[12] = refalrts::char_left( 'c', context[7], context[8] );
    if( ! context[12] )
      continue;
    context[13] = refalrts::char_left( 'h', context[7], context[8] );
    if( ! context[13] )
      continue;
    context[14] = refalrts::char_left( 'e', context[7], context[8] );
    if( ! context[14] )
      continue;
    context[15] = refalrts::char_left( 'c', context[7], context[8] );
    if( ! context[15] )
      continue;
    context[16] = refalrts::char_left( 'k', context[7], context[8] );
    if( ! context[16] )
      continue;
    context[17] = refalrts::char_left( '1', context[7], context[8] );
    if( ! context[17] )
      continue;
    if( ! refalrts::empty_seq( context[7], context[8] ) )
      continue;
    // closed e.eX#1 as range 2
    //DEBUG: e.eX#1: 2

    refalrts::reset_allocator();
    //TRASH: {REMOVED TILE} </0 & Mu/4 (/5 'T'/9 '1'/10 '_'/11 'c'/12 'h'/13 'e'/14 'c'/15 'k'/16 {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ HalfReuse: </17 HalfReuse: & T1_check1/6 AsIs: e.eX#1/2 AsIs: >/1 ]] }
    refalrts::reinit_open_call( context[17] );
    refalrts::reinit_name( context[6], ref_T1u_check1.ref.function );
    refalrts::push_stack( context[1] );
    refalrts::push_stack( context[17] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[17];
    refalrts::splice_to_freelist_open( trash_prev, res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence();

  do {
    // # T1_cont0 e.idx
    // </0 & Mu/4 # T1_cont0/5 e.eX#1/2 >/1
    if( ! refalrts::ident_term(  ident_T1u_cont0, context[5] ) )
      continue;
    // closed e.eX#1 as range 2
    //DEBUG: e.eX#1: 2

    refalrts::reset_allocator();
    //TRASH: {REMOVED TILE} </0 {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ HalfReuse: </4 HalfReuse: & T1_cont0/5 AsIs: e.eX#1/2 AsIs: >/1 ]] }
    refalrts::reinit_open_call( context[4] );
    refalrts::reinit_name( context[5], ref_T1u_cont0.ref.function );
    refalrts::push_stack( context[1] );
    refalrts::push_stack( context[4] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[4];
    refalrts::splice_to_freelist_open( trash_prev, res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence();

  do {
    // ( 'T1_cont0' ) e.idx
    // </0 & Mu/4 (/5 'T'/9 '1'/10 '_'/11 'c'/12 'o'/13 'n'/14 't'/15 '0'/16 )/6 e.eX#1/2 >/1
    context[7] = 0;
    context[8] = 0;
    if( ! refalrts::brackets_term( context[7], context[8], context[5] ) )
      continue;
    context[9] = refalrts::char_left( 'T', context[7], context[8] );
    if( ! context[9] )
      continue;
    context[10] = refalrts::char_left( '1', context[7], context[8] );
    if( ! context[10] )
      continue;
    context[11] = refalrts::char_left( '_', context[7], context[8] );
    if( ! context[11] )
      continue;
    context[12] = refalrts::char_left( 'c', context[7], context[8] );
    if( ! context[12] )
      continue;
    context[13] = refalrts::char_left( 'o', context[7], context[8] );
    if( ! context[13] )
      continue;
    context[14] = refalrts::char_left( 'n', context[7], context[8] );
    if( ! context[14] )
      continue;
    context[15] = refalrts::char_left( 't', context[7], context[8] );
    if( ! context[15] )
      continue;
    context[16] = refalrts::char_left( '0', context[7], context[8] );
    if( ! context[16] )
      continue;
    if( ! refalrts::empty_seq( context[7], context[8] ) )
      continue;
    // closed e.eX#1 as range 2
    //DEBUG: e.eX#1: 2

    refalrts::reset_allocator();
    //TRASH: {REMOVED TILE} </0 & Mu/4 (/5 'T'/9 '1'/10 '_'/11 'c'/12 'o'/13 'n'/14 't'/15 {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ HalfReuse: </16 HalfReuse: & T1_cont0/6 AsIs: e.eX#1/2 AsIs: >/1 ]] }
    refalrts::reinit_open_call( context[16] );
    refalrts::reinit_name( context[6], ref_T1u_cont0.ref.function );
    refalrts::push_stack( context[1] );
    refalrts::push_stack( context[16] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[16];
    refalrts::splice_to_freelist_open( trash_prev, res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence();

  do {
    // # PassiveHoles e.idx
    // </0 & Mu/4 # PassiveHoles/5 e.eX#1/2 >/1
    if( ! refalrts::ident_term(  ident_PassiveHoles, context[5] ) )
      continue;
    // closed e.eX#1 as range 2
    //DEBUG: e.eX#1: 2

    refalrts::reset_allocator();
    //TRASH: {REMOVED TILE} </0 {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ HalfReuse: </4 HalfReuse: & PassiveHoles/5 AsIs: e.eX#1/2 AsIs: >/1 ]] }
    refalrts::reinit_open_call( context[4] );
    refalrts::reinit_name( context[5], ref_PassiveHoles.ref.function );
    refalrts::push_stack( context[1] );
    refalrts::push_stack( context[4] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[4];
    refalrts::splice_to_freelist_open( trash_prev, res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence();

  do {
    // ( 'PassiveHoles' ) e.idx
    // </0 & Mu/4 (/5 'P'/9 'a'/10 's'/11 's'/12 'i'/13 'v'/14 'e'/15 'H'/16 'o'/17 'l'/18 'e'/19 's'/20 )/6 e.eX#1/2 >/1
    context[7] = 0;
    context[8] = 0;
    if( ! refalrts::brackets_term( context[7], context[8], context[5] ) )
      continue;
    context[9] = refalrts::char_left( 'P', context[7], context[8] );
    if( ! context[9] )
      continue;
    context[10] = refalrts::char_left( 'a', context[7], context[8] );
    if( ! context[10] )
      continue;
    context[11] = refalrts::char_left( 's', context[7], context[8] );
    if( ! context[11] )
      continue;
    context[12] = refalrts::char_left( 's', context[7], context[8] );
    if( ! context[12] )
      continue;
    context[13] = refalrts::char_left( 'i', context[7], context[8] );
    if( ! context[13] )
      continue;
    context[14] = refalrts::char_left( 'v', context[7], context[8] );
    if( ! context[14] )
      continue;
    context[15] = refalrts::char_left( 'e', context[7], context[8] );
    if( ! context[15] )
      continue;
    context[16] = refalrts::char_left( 'H', context[7], context[8] );
    if( ! context[16] )
      continue;
    context[17] = refalrts::char_left( 'o', context[7], context[8] );
    if( ! context[17] )
      continue;
    context[18] = refalrts::char_left( 'l', context[7], context[8] );
    if( ! context[18] )
      continue;
    context[19] = refalrts::char_left( 'e', context[7], context[8] );
    if( ! context[19] )
      continue;
    context[20] = refalrts::char_left( 's', context[7], context[8] );
    if( ! context[20] )
      continue;
    if( ! refalrts::empty_seq( context[7], context[8] ) )
      continue;
    // closed e.eX#1 as range 2
    //DEBUG: e.eX#1: 2

    refalrts::reset_allocator();
    //TRASH: {REMOVED TILE} </0 & Mu/4 (/5 'P'/9 'a'/10 's'/11 's'/12 'i'/13 'v'/14 'e'/15 'H'/16 'o'/17 'l'/18 'e'/19 {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ HalfReuse: </20 HalfReuse: & PassiveHoles/6 AsIs: e.eX#1/2 AsIs: >/1 ]] }
    refalrts::reinit_open_call( context[20] );
    refalrts::reinit_name( context[6], ref_PassiveHoles.ref.function );
    refalrts::push_stack( context[1] );
    refalrts::push_stack( context[20] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[20];
    refalrts::splice_to_freelist_open( trash_prev, res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence();

  do {
    // # PassiveHoles_check e.idx
    // </0 & Mu/4 # PassiveHoles_check/5 e.eX#1/2 >/1
    if( ! refalrts::ident_term(  ident_PassiveHolesu_check, context[5] ) )
      continue;
    // closed e.eX#1 as range 2
    //DEBUG: e.eX#1: 2

    refalrts::reset_allocator();
    //TRASH: {REMOVED TILE} </0 {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ HalfReuse: </4 HalfReuse: & PassiveHoles_check/5 AsIs: e.eX#1/2 AsIs: >/1 ]] }
    refalrts::reinit_open_call( context[4] );
    refalrts::reinit_name( context[5], ref_PassiveHolesu_check.ref.function );
    refalrts::push_stack( context[1] );
    refalrts::push_stack( context[4] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[4];
    refalrts::splice_to_freelist_open( trash_prev, res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence();

  do {
    // ( 'PassiveHoles_check' ) e.idx
    // </0 & Mu/4 (/5 'P'/9 'a'/10 's'/11 's'/12 'i'/13 'v'/14 'e'/15 'H'/16 'o'/17 'l'/18 'e'/19 's'/20 '_'/21 'c'/22 'h'/23 'e'/24 'c'/25 'k'/26 )/6 e.eX#1/2 >/1
    context[7] = 0;
    context[8] = 0;
    if( ! refalrts::brackets_term( context[7], context[8], context[5] ) )
      continue;
    context[9] = refalrts::char_left( 'P', context[7], context[8] );
    if( ! context[9] )
      continue;
    context[10] = refalrts::char_left( 'a', context[7], context[8] );
    if( ! context[10] )
      continue;
    context[11] = refalrts::char_left( 's', context[7], context[8] );
    if( ! context[11] )
      continue;
    context[12] = refalrts::char_left( 's', context[7], context[8] );
    if( ! context[12] )
      continue;
    context[13] = refalrts::char_left( 'i', context[7], context[8] );
    if( ! context[13] )
      continue;
    context[14] = refalrts::char_left( 'v', context[7], context[8] );
    if( ! context[14] )
      continue;
    context[15] = refalrts::char_left( 'e', context[7], context[8] );
    if( ! context[15] )
      continue;
    context[16] = refalrts::char_left( 'H', context[7], context[8] );
    if( ! context[16] )
      continue;
    context[17] = refalrts::char_left( 'o', context[7], context[8] );
    if( ! context[17] )
      continue;
    context[18] = refalrts::char_left( 'l', context[7], context[8] );
    if( ! context[18] )
      continue;
    context[19] = refalrts::char_left( 'e', context[7], context[8] );
    if( ! context[19] )
      continue;
    context[20] = refalrts::char_left( 's', context[7], context[8] );
    if( ! context[20] )
      continue;
    context[21] = refalrts::char_left( '_', context[7], context[8] );
    if( ! context[21] )
      continue;
    context[22] = refalrts::char_left( 'c', context[7], context[8] );
    if( ! context[22] )
      continue;
    context[23] = refalrts::char_left( 'h', context[7], context[8] );
    if( ! context[23] )
      continue;
    context[24] = refalrts::char_left( 'e', context[7], context[8] );
    if( ! context[24] )
      continue;
    context[25] = refalrts::char_left( 'c', context[7], context[8] );
    if( ! context[25] )
      continue;
    context[26] = refalrts::char_left( 'k', context[7], context[8] );
    if( ! context[26] )
      continue;
    if( ! refalrts::empty_seq( context[7], context[8] ) )
      continue;
    // closed e.eX#1 as range 2
    //DEBUG: e.eX#1: 2

    refalrts::reset_allocator();
    //TRASH: {REMOVED TILE} </0 & Mu/4 (/5 'P'/9 'a'/10 's'/11 's'/12 'i'/13 'v'/14 'e'/15 'H'/16 'o'/17 'l'/18 'e'/19 's'/20 '_'/21 'c'/22 'h'/23 'e'/24 'c'/25 {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ HalfReuse: </26 HalfReuse: & PassiveHoles_check/6 AsIs: e.eX#1/2 AsIs: >/1 ]] }
    refalrts::reinit_open_call( context[26] );
    refalrts::reinit_name( context[6], ref_PassiveHolesu_check.ref.function );
    refalrts::push_stack( context[1] );
    refalrts::push_stack( context[26] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[26];
    refalrts::splice_to_freelist_open( trash_prev, res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence();

  do {
    // # PassiveHoles_forward e.idx
    // </0 & Mu/4 # PassiveHoles_forward/5 e.eX#1/2 >/1
    if( ! refalrts::ident_term(  ident_PassiveHolesu_forward, context[5] ) )
      continue;
    // closed e.eX#1 as range 2
    //DEBUG: e.eX#1: 2

    refalrts::reset_allocator();
    //TRASH: {REMOVED TILE} </0 {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ HalfReuse: </4 HalfReuse: & PassiveHoles_forward/5 AsIs: e.eX#1/2 AsIs: >/1 ]] }
    refalrts::reinit_open_call( context[4] );
    refalrts::reinit_name( context[5], ref_PassiveHolesu_forward.ref.function );
    refalrts::push_stack( context[1] );
    refalrts::push_stack( context[4] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[4];
    refalrts::splice_to_freelist_open( trash_prev, res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence();

  do {
    // ( 'PassiveHoles_forward' ) e.idx
    // </0 & Mu/4 (/5 'P'/9 'a'/10 's'/11 's'/12 'i'/13 'v'/14 'e'/15 'H'/16 'o'/17 'l'/18 'e'/19 's'/20 '_'/21 'f'/22 'o'/23 'r'/24 'w'/25 'a'/26 'r'/27 'd'/28 )/6 e.eX#1/2 >/1
    context[7] = 0;
    context[8] = 0;
    if( ! refalrts::brackets_term( context[7], context[8], context[5] ) )
      continue;
    context[9] = refalrts::char_left( 'P', context[7], context[8] );
    if( ! context[9] )
      continue;
    context[10] = refalrts::char_left( 'a', context[7], context[8] );
    if( ! context[10] )
      continue;
    context[11] = refalrts::char_left( 's', context[7], context[8] );
    if( ! context[11] )
      continue;
    context[12] = refalrts::char_left( 's', context[7], context[8] );
    if( ! context[12] )
      continue;
    context[13] = refalrts::char_left( 'i', context[7], context[8] );
    if( ! context[13] )
      continue;
    context[14] = refalrts::char_left( 'v', context[7], context[8] );
    if( ! context[14] )
      continue;
    context[15] = refalrts::char_left( 'e', context[7], context[8] );
    if( ! context[15] )
      continue;
    context[16] = refalrts::char_left( 'H', context[7], context[8] );
    if( ! context[16] )
      continue;
    context[17] = refalrts::char_left( 'o', context[7], context[8] );
    if( ! context[17] )
      continue;
    context[18] = refalrts::char_left( 'l', context[7], context[8] );
    if( ! context[18] )
      continue;
    context[19] = refalrts::char_left( 'e', context[7], context[8] );
    if( ! context[19] )
      continue;
    context[20] = refalrts::char_left( 's', context[7], context[8] );
    if( ! context[20] )
      continue;
    context[21] = refalrts::char_left( '_', context[7], context[8] );
    if( ! context[21] )
      continue;
    context[22] = refalrts::char_left( 'f', context[7], context[8] );
    if( ! context[22] )
      continue;
    context[23] = refalrts::char_left( 'o', context[7], context[8] );
    if( ! context[23] )
      continue;
    context[24] = refalrts::char_left( 'r', context[7], context[8] );
    if( ! context[24] )
      continue;
    context[25] = refalrts::char_left( 'w', context[7], context[8] );
    if( ! context[25] )
      continue;
    context[26] = refalrts::char_left( 'a', context[7], context[8] );
    if( ! context[26] )
      continue;
    context[27] = refalrts::char_left( 'r', context[7], context[8] );
    if( ! context[27] )
      continue;
    context[28] = refalrts::char_left( 'd', context[7], context[8] );
    if( ! context[28] )
      continue;
    if( ! refalrts::empty_seq( context[7], context[8] ) )
      continue;
    // closed e.eX#1 as range 2
    //DEBUG: e.eX#1: 2

    refalrts::reset_allocator();
    //TRASH: {REMOVED TILE} </0 & Mu/4 (/5 'P'/9 'a'/10 's'/11 's'/12 'i'/13 'v'/14 'e'/15 'H'/16 'o'/17 'l'/18 'e'/19 's'/20 '_'/21 'f'/22 'o'/23 'r'/24 'w'/25 'a'/26 'r'/27 {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ HalfReuse: </28 HalfReuse: & PassiveHoles_forward/6 AsIs: e.eX#1/2 AsIs: >/1 ]] }
    refalrts::reinit_open_call( context[28] );
    refalrts::reinit_name( context[6], ref_PassiveHolesu_forward.ref.function );
    refalrts::push_stack( context[1] );
    refalrts::push_stack( context[28] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[28];
    refalrts::splice_to_freelist_open( trash_prev, res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence();

  do {
    // # PassiveHoles_next e.idx
    // </0 & Mu/4 # PassiveHoles_next/5 e.eX#1/2 >/1
    if( ! refalrts::ident_term(  ident_PassiveHolesu_next, context[5] ) )
      continue;
    // closed e.eX#1 as range 2
    //DEBUG: e.eX#1: 2

    refalrts::reset_allocator();
    //TRASH: {REMOVED TILE} </0 {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ HalfReuse: </4 HalfReuse: & PassiveHoles_next/5 AsIs: e.eX#1/2 AsIs: >/1 ]] }
    refalrts::reinit_open_call( context[4] );
    refalrts::reinit_name( context[5], ref_PassiveHolesu_next.ref.function );
    refalrts::push_stack( context[1] );
    refalrts::push_stack( context[4] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[4];
    refalrts::splice_to_freelist_open( trash_prev, res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence();

  do {
    // ( 'PassiveHoles_next' ) e.idx
    // </0 & Mu/4 (/5 'P'/9 'a'/10 's'/11 's'/12 'i'/13 'v'/14 'e'/15 'H'/16 'o'/17 'l'/18 'e'/19 's'/20 '_'/21 'n'/22 'e'/23 'x'/24 't'/25 )/6 e.eX#1/2 >/1
    context[7] = 0;
    context[8] = 0;
    if( ! refalrts::brackets_term( context[7], context[8], context[5] ) )
      continue;
    context[9] = refalrts::char_left( 'P', context[7], context[8] );
    if( ! context[9] )
      continue;
    context[10] = refalrts::char_left( 'a', context[7], context[8] );
    if( ! context[10] )
      continue;
    context[11] = refalrts::char_left( 's', context[7], context[8] );
    if( ! context[11] )
      continue;
    context[12] = refalrts::char_left( 's', context[7], context[8] );
    if( ! context[12] )
      continue;
    context[13] = refalrts::char_left( 'i', context[7], context[8] );
    if( ! context[13] )
      continue;
    context[14] = refalrts::char_left( 'v', context[7], context[8] );
    if( ! context[14] )
      continue;
    context[15] = refalrts::char_left( 'e', context[7], context[8] );
    if( ! context[15] )
      continue;
    context[16] = refalrts::char_left( 'H', context[7], context[8] );
    if( ! context[16] )
      continue;
    context[17] = refalrts::char_left( 'o', context[7], context[8] );
    if( ! context[17] )
      continue;
    context[18] = refalrts::char_left( 'l', context[7], context[8] );
    if( ! context[18] )
      continue;
    context[19] = refalrts::char_left( 'e', context[7], context[8] );
    if( ! context[19] )
      continue;
    context[20] = refalrts::char_left( 's', context[7], context[8] );
    if( ! context[20] )
      continue;
    context[21] = refalrts::char_left( '_', context[7], context[8] );
    if( ! context[21] )
      continue;
    context[22] = refalrts::char_left( 'n', context[7], context[8] );
    if( ! context[22] )
      continue;
    context[23] = refalrts::char_left( 'e', context[7], context[8] );
    if( ! context[23] )
      continue;
    context[24] = refalrts::char_left( 'x', context[7], context[8] );
    if( ! context[24] )
      continue;
    context[25] = refalrts::char_left( 't', context[7], context[8] );
    if( ! context[25] )
      continue;
    if( ! refalrts::empty_seq( context[7], context[8] ) )
      continue;
    // closed e.eX#1 as range 2
    //DEBUG: e.eX#1: 2

    refalrts::reset_allocator();
    //TRASH: {REMOVED TILE} </0 & Mu/4 (/5 'P'/9 'a'/10 's'/11 's'/12 'i'/13 'v'/14 'e'/15 'H'/16 'o'/17 'l'/18 'e'/19 's'/20 '_'/21 'n'/22 'e'/23 'x'/24 {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ HalfReuse: </25 HalfReuse: & PassiveHoles_next/6 AsIs: e.eX#1/2 AsIs: >/1 ]] }
    refalrts::reinit_open_call( context[25] );
    refalrts::reinit_name( context[6], ref_PassiveHolesu_next.ref.function );
    refalrts::push_stack( context[1] );
    refalrts::push_stack( context[25] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[25];
    refalrts::splice_to_freelist_open( trash_prev, res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence();

  do {
    // # PassiveHoles_cont e.idx
    // </0 & Mu/4 # PassiveHoles_cont/5 e.eX#1/2 >/1
    if( ! refalrts::ident_term(  ident_PassiveHolesu_cont, context[5] ) )
      continue;
    // closed e.eX#1 as range 2
    //DEBUG: e.eX#1: 2

    refalrts::reset_allocator();
    //TRASH: {REMOVED TILE} </0 {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ HalfReuse: </4 HalfReuse: & PassiveHoles_cont/5 AsIs: e.eX#1/2 AsIs: >/1 ]] }
    refalrts::reinit_open_call( context[4] );
    refalrts::reinit_name( context[5], ref_PassiveHolesu_cont.ref.function );
    refalrts::push_stack( context[1] );
    refalrts::push_stack( context[4] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[4];
    refalrts::splice_to_freelist_open( trash_prev, res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence();

  do {
    // ( 'PassiveHoles_cont' ) e.idx
    // </0 & Mu/4 (/5 'P'/9 'a'/10 's'/11 's'/12 'i'/13 'v'/14 'e'/15 'H'/16 'o'/17 'l'/18 'e'/19 's'/20 '_'/21 'c'/22 'o'/23 'n'/24 't'/25 )/6 e.eX#1/2 >/1
    context[7] = 0;
    context[8] = 0;
    if( ! refalrts::brackets_term( context[7], context[8], context[5] ) )
      continue;
    context[9] = refalrts::char_left( 'P', context[7], context[8] );
    if( ! context[9] )
      continue;
    context[10] = refalrts::char_left( 'a', context[7], context[8] );
    if( ! context[10] )
      continue;
    context[11] = refalrts::char_left( 's', context[7], context[8] );
    if( ! context[11] )
      continue;
    context[12] = refalrts::char_left( 's', context[7], context[8] );
    if( ! context[12] )
      continue;
    context[13] = refalrts::char_left( 'i', context[7], context[8] );
    if( ! context[13] )
      continue;
    context[14] = refalrts::char_left( 'v', context[7], context[8] );
    if( ! context[14] )
      continue;
    context[15] = refalrts::char_left( 'e', context[7], context[8] );
    if( ! context[15] )
      continue;
    context[16] = refalrts::char_left( 'H', context[7], context[8] );
    if( ! context[16] )
      continue;
    context[17] = refalrts::char_left( 'o', context[7], context[8] );
    if( ! context[17] )
      continue;
    context[18] = refalrts::char_left( 'l', context[7], context[8] );
    if( ! context[18] )
      continue;
    context[19] = refalrts::char_left( 'e', context[7], context[8] );
    if( ! context[19] )
      continue;
    context[20] = refalrts::char_left( 's', context[7], context[8] );
    if( ! context[20] )
      continue;
    context[21] = refalrts::char_left( '_', context[7], context[8] );
    if( ! context[21] )
      continue;
    context[22] = refalrts::char_left( 'c', context[7], context[8] );
    if( ! context[22] )
      continue;
    context[23] = refalrts::char_left( 'o', context[7], context[8] );
    if( ! context[23] )
      continue;
    context[24] = refalrts::char_left( 'n', context[7], context[8] );
    if( ! context[24] )
      continue;
    context[25] = refalrts::char_left( 't', context[7], context[8] );
    if( ! context[25] )
      continue;
    if( ! refalrts::empty_seq( context[7], context[8] ) )
      continue;
    // closed e.eX#1 as range 2
    //DEBUG: e.eX#1: 2

    refalrts::reset_allocator();
    //TRASH: {REMOVED TILE} </0 & Mu/4 (/5 'P'/9 'a'/10 's'/11 's'/12 'i'/13 'v'/14 'e'/15 'H'/16 'o'/17 'l'/18 'e'/19 's'/20 '_'/21 'c'/22 'o'/23 'n'/24 {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ HalfReuse: </25 HalfReuse: & PassiveHoles_cont/6 AsIs: e.eX#1/2 AsIs: >/1 ]] }
    refalrts::reinit_open_call( context[25] );
    refalrts::reinit_name( context[6], ref_PassiveHolesu_cont.ref.function );
    refalrts::push_stack( context[1] );
    refalrts::push_stack( context[25] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[25];
    refalrts::splice_to_freelist_open( trash_prev, res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence();

  do {
    // # T2 e.idx
    // </0 & Mu/4 # T2/5 e.eX#1/2 >/1
    if( ! refalrts::ident_term(  ident_T2, context[5] ) )
      continue;
    // closed e.eX#1 as range 2
    //DEBUG: e.eX#1: 2

    refalrts::reset_allocator();
    //TRASH: {REMOVED TILE} </0 {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ HalfReuse: </4 HalfReuse: & T2/5 AsIs: e.eX#1/2 AsIs: >/1 ]] }
    refalrts::reinit_open_call( context[4] );
    refalrts::reinit_name( context[5], ref_T2.ref.function );
    refalrts::push_stack( context[1] );
    refalrts::push_stack( context[4] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[4];
    refalrts::splice_to_freelist_open( trash_prev, res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence();

  do {
    // ( 'T2' ) e.idx
    // </0 & Mu/4 (/5 'T'/9 '2'/10 )/6 e.eX#1/2 >/1
    context[7] = 0;
    context[8] = 0;
    if( ! refalrts::brackets_term( context[7], context[8], context[5] ) )
      continue;
    context[9] = refalrts::char_left( 'T', context[7], context[8] );
    if( ! context[9] )
      continue;
    context[10] = refalrts::char_left( '2', context[7], context[8] );
    if( ! context[10] )
      continue;
    if( ! refalrts::empty_seq( context[7], context[8] ) )
      continue;
    // closed e.eX#1 as range 2
    //DEBUG: e.eX#1: 2

    refalrts::reset_allocator();
    //TRASH: {REMOVED TILE} </0 & Mu/4 (/5 'T'/9 {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ HalfReuse: </10 HalfReuse: & T2/6 AsIs: e.eX#1/2 AsIs: >/1 ]] }
    refalrts::reinit_open_call( context[10] );
    refalrts::reinit_name( context[6], ref_T2.ref.function );
    refalrts::push_stack( context[1] );
    refalrts::push_stack( context[10] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[10];
    refalrts::splice_to_freelist_open( trash_prev, res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence();

  do {
    // # T2_check e.idx
    // </0 & Mu/4 # T2_check/5 e.eX#1/2 >/1
    if( ! refalrts::ident_term(  ident_T2u_check, context[5] ) )
      continue;
    // closed e.eX#1 as range 2
    //DEBUG: e.eX#1: 2

    refalrts::reset_allocator();
    //TRASH: {REMOVED TILE} </0 {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ HalfReuse: </4 HalfReuse: & T2_check/5 AsIs: e.eX#1/2 AsIs: >/1 ]] }
    refalrts::reinit_open_call( context[4] );
    refalrts::reinit_name( context[5], ref_T2u_check.ref.function );
    refalrts::push_stack( context[1] );
    refalrts::push_stack( context[4] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[4];
    refalrts::splice_to_freelist_open( trash_prev, res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence();

  do {
    // ( 'T2_check' ) e.idx
    // </0 & Mu/4 (/5 'T'/9 '2'/10 '_'/11 'c'/12 'h'/13 'e'/14 'c'/15 'k'/16 )/6 e.eX#1/2 >/1
    context[7] = 0;
    context[8] = 0;
    if( ! refalrts::brackets_term( context[7], context[8], context[5] ) )
      continue;
    context[9] = refalrts::char_left( 'T', context[7], context[8] );
    if( ! context[9] )
      continue;
    context[10] = refalrts::char_left( '2', context[7], context[8] );
    if( ! context[10] )
      continue;
    context[11] = refalrts::char_left( '_', context[7], context[8] );
    if( ! context[11] )
      continue;
    context[12] = refalrts::char_left( 'c', context[7], context[8] );
    if( ! context[12] )
      continue;
    context[13] = refalrts::char_left( 'h', context[7], context[8] );
    if( ! context[13] )
      continue;
    context[14] = refalrts::char_left( 'e', context[7], context[8] );
    if( ! context[14] )
      continue;
    context[15] = refalrts::char_left( 'c', context[7], context[8] );
    if( ! context[15] )
      continue;
    context[16] = refalrts::char_left( 'k', context[7], context[8] );
    if( ! context[16] )
      continue;
    if( ! refalrts::empty_seq( context[7], context[8] ) )
      continue;
    // closed e.eX#1 as range 2
    //DEBUG: e.eX#1: 2

    refalrts::reset_allocator();
    //TRASH: {REMOVED TILE} </0 & Mu/4 (/5 'T'/9 '2'/10 '_'/11 'c'/12 'h'/13 'e'/14 'c'/15 {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ HalfReuse: </16 HalfReuse: & T2_check/6 AsIs: e.eX#1/2 AsIs: >/1 ]] }
    refalrts::reinit_open_call( context[16] );
    refalrts::reinit_name( context[6], ref_T2u_check.ref.function );
    refalrts::push_stack( context[1] );
    refalrts::push_stack( context[16] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[16];
    refalrts::splice_to_freelist_open( trash_prev, res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence();

  do {
    // # T2_forward e.idx
    // </0 & Mu/4 # T2_forward/5 e.eX#1/2 >/1
    if( ! refalrts::ident_term(  ident_T2u_forward, context[5] ) )
      continue;
    // closed e.eX#1 as range 2
    //DEBUG: e.eX#1: 2

    refalrts::reset_allocator();
    //TRASH: {REMOVED TILE} </0 {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ HalfReuse: </4 HalfReuse: & T2_forward/5 AsIs: e.eX#1/2 AsIs: >/1 ]] }
    refalrts::reinit_open_call( context[4] );
    refalrts::reinit_name( context[5], ref_T2u_forward.ref.function );
    refalrts::push_stack( context[1] );
    refalrts::push_stack( context[4] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[4];
    refalrts::splice_to_freelist_open( trash_prev, res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence();

  do {
    // ( 'T2_forward' ) e.idx
    // </0 & Mu/4 (/5 'T'/9 '2'/10 '_'/11 'f'/12 'o'/13 'r'/14 'w'/15 'a'/16 'r'/17 'd'/18 )/6 e.eX#1/2 >/1
    context[7] = 0;
    context[8] = 0;
    if( ! refalrts::brackets_term( context[7], context[8], context[5] ) )
      continue;
    context[9] = refalrts::char_left( 'T', context[7], context[8] );
    if( ! context[9] )
      continue;
    context[10] = refalrts::char_left( '2', context[7], context[8] );
    if( ! context[10] )
      continue;
    context[11] = refalrts::char_left( '_', context[7], context[8] );
    if( ! context[11] )
      continue;
    context[12] = refalrts::char_left( 'f', context[7], context[8] );
    if( ! context[12] )
      continue;
    context[13] = refalrts::char_left( 'o', context[7], context[8] );
    if( ! context[13] )
      continue;
    context[14] = refalrts::char_left( 'r', context[7], context[8] );
    if( ! context[14] )
      continue;
    context[15] = refalrts::char_left( 'w', context[7], context[8] );
    if( ! context[15] )
      continue;
    context[16] = refalrts::char_left( 'a', context[7], context[8] );
    if( ! context[16] )
      continue;
    context[17] = refalrts::char_left( 'r', context[7], context[8] );
    if( ! context[17] )
      continue;
    context[18] = refalrts::char_left( 'd', context[7], context[8] );
    if( ! context[18] )
      continue;
    if( ! refalrts::empty_seq( context[7], context[8] ) )
      continue;
    // closed e.eX#1 as range 2
    //DEBUG: e.eX#1: 2

    refalrts::reset_allocator();
    //TRASH: {REMOVED TILE} </0 & Mu/4 (/5 'T'/9 '2'/10 '_'/11 'f'/12 'o'/13 'r'/14 'w'/15 'a'/16 'r'/17 {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ HalfReuse: </18 HalfReuse: & T2_forward/6 AsIs: e.eX#1/2 AsIs: >/1 ]] }
    refalrts::reinit_open_call( context[18] );
    refalrts::reinit_name( context[6], ref_T2u_forward.ref.function );
    refalrts::push_stack( context[1] );
    refalrts::push_stack( context[18] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[18];
    refalrts::splice_to_freelist_open( trash_prev, res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence();

  do {
    // # T2_next e.idx
    // </0 & Mu/4 # T2_next/5 e.eX#1/2 >/1
    if( ! refalrts::ident_term(  ident_T2u_next, context[5] ) )
      continue;
    // closed e.eX#1 as range 2
    //DEBUG: e.eX#1: 2

    refalrts::reset_allocator();
    //TRASH: {REMOVED TILE} </0 {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ HalfReuse: </4 HalfReuse: & T2_next/5 AsIs: e.eX#1/2 AsIs: >/1 ]] }
    refalrts::reinit_open_call( context[4] );
    refalrts::reinit_name( context[5], ref_T2u_next.ref.function );
    refalrts::push_stack( context[1] );
    refalrts::push_stack( context[4] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[4];
    refalrts::splice_to_freelist_open( trash_prev, res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence();

  do {
    // ( 'T2_next' ) e.idx
    // </0 & Mu/4 (/5 'T'/9 '2'/10 '_'/11 'n'/12 'e'/13 'x'/14 't'/15 )/6 e.eX#1/2 >/1
    context[7] = 0;
    context[8] = 0;
    if( ! refalrts::brackets_term( context[7], context[8], context[5] ) )
      continue;
    context[9] = refalrts::char_left( 'T', context[7], context[8] );
    if( ! context[9] )
      continue;
    context[10] = refalrts::char_left( '2', context[7], context[8] );
    if( ! context[10] )
      continue;
    context[11] = refalrts::char_left( '_', context[7], context[8] );
    if( ! context[11] )
      continue;
    context[12] = refalrts::char_left( 'n', context[7], context[8] );
    if( ! context[12] )
      continue;
    context[13] = refalrts::char_left( 'e', context[7], context[8] );
    if( ! context[13] )
      continue;
    context[14] = refalrts::char_left( 'x', context[7], context[8] );
    if( ! context[14] )
      continue;
    context[15] = refalrts::char_left( 't', context[7], context[8] );
    if( ! context[15] )
      continue;
    if( ! refalrts::empty_seq( context[7], context[8] ) )
      continue;
    // closed e.eX#1 as range 2
    //DEBUG: e.eX#1: 2

    refalrts::reset_allocator();
    //TRASH: {REMOVED TILE} </0 & Mu/4 (/5 'T'/9 '2'/10 '_'/11 'n'/12 'e'/13 'x'/14 {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ HalfReuse: </15 HalfReuse: & T2_next/6 AsIs: e.eX#1/2 AsIs: >/1 ]] }
    refalrts::reinit_open_call( context[15] );
    refalrts::reinit_name( context[6], ref_T2u_next.ref.function );
    refalrts::push_stack( context[1] );
    refalrts::push_stack( context[15] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[15];
    refalrts::splice_to_freelist_open( trash_prev, res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence();

  do {
    // # T2_check0 e.idx
    // </0 & Mu/4 # T2_check0/5 e.eX#1/2 >/1
    if( ! refalrts::ident_term(  ident_T2u_check0, context[5] ) )
      continue;
    // closed e.eX#1 as range 2
    //DEBUG: e.eX#1: 2

    refalrts::reset_allocator();
    //TRASH: {REMOVED TILE} </0 {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ HalfReuse: </4 HalfReuse: & T2_check0/5 AsIs: e.eX#1/2 AsIs: >/1 ]] }
    refalrts::reinit_open_call( context[4] );
    refalrts::reinit_name( context[5], ref_T2u_check0.ref.function );
    refalrts::push_stack( context[1] );
    refalrts::push_stack( context[4] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[4];
    refalrts::splice_to_freelist_open( trash_prev, res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence();

  do {
    // ( 'T2_check0' ) e.idx
    // </0 & Mu/4 (/5 'T'/9 '2'/10 '_'/11 'c'/12 'h'/13 'e'/14 'c'/15 'k'/16 '0'/17 )/6 e.eX#1/2 >/1
    context[7] = 0;
    context[8] = 0;
    if( ! refalrts::brackets_term( context[7], context[8], context[5] ) )
      continue;
    context[9] = refalrts::char_left( 'T', context[7], context[8] );
    if( ! context[9] )
      continue;
    context[10] = refalrts::char_left( '2', context[7], context[8] );
    if( ! context[10] )
      continue;
    context[11] = refalrts::char_left( '_', context[7], context[8] );
    if( ! context[11] )
      continue;
    context[12] = refalrts::char_left( 'c', context[7], context[8] );
    if( ! context[12] )
      continue;
    context[13] = refalrts::char_left( 'h', context[7], context[8] );
    if( ! context[13] )
      continue;
    context[14] = refalrts::char_left( 'e', context[7], context[8] );
    if( ! context[14] )
      continue;
    context[15] = refalrts::char_left( 'c', context[7], context[8] );
    if( ! context[15] )
      continue;
    context[16] = refalrts::char_left( 'k', context[7], context[8] );
    if( ! context[16] )
      continue;
    context[17] = refalrts::char_left( '0', context[7], context[8] );
    if( ! context[17] )
      continue;
    if( ! refalrts::empty_seq( context[7], context[8] ) )
      continue;
    // closed e.eX#1 as range 2
    //DEBUG: e.eX#1: 2

    refalrts::reset_allocator();
    //TRASH: {REMOVED TILE} </0 & Mu/4 (/5 'T'/9 '2'/10 '_'/11 'c'/12 'h'/13 'e'/14 'c'/15 'k'/16 {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ HalfReuse: </17 HalfReuse: & T2_check0/6 AsIs: e.eX#1/2 AsIs: >/1 ]] }
    refalrts::reinit_open_call( context[17] );
    refalrts::reinit_name( context[6], ref_T2u_check0.ref.function );
    refalrts::push_stack( context[1] );
    refalrts::push_stack( context[17] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[17];
    refalrts::splice_to_freelist_open( trash_prev, res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence();

  do {
    // # T2_cont e.idx
    // </0 & Mu/4 # T2_cont/5 e.eX#1/2 >/1
    if( ! refalrts::ident_term(  ident_T2u_cont, context[5] ) )
      continue;
    // closed e.eX#1 as range 2
    //DEBUG: e.eX#1: 2

    refalrts::reset_allocator();
    //TRASH: {REMOVED TILE} </0 {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ HalfReuse: </4 HalfReuse: & T2_cont/5 AsIs: e.eX#1/2 AsIs: >/1 ]] }
    refalrts::reinit_open_call( context[4] );
    refalrts::reinit_name( context[5], ref_T2u_cont.ref.function );
    refalrts::push_stack( context[1] );
    refalrts::push_stack( context[4] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[4];
    refalrts::splice_to_freelist_open( trash_prev, res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence();

  do {
    // ( 'T2_cont' ) e.idx
    // </0 & Mu/4 (/5 'T'/9 '2'/10 '_'/11 'c'/12 'o'/13 'n'/14 't'/15 )/6 e.eX#1/2 >/1
    context[7] = 0;
    context[8] = 0;
    if( ! refalrts::brackets_term( context[7], context[8], context[5] ) )
      continue;
    context[9] = refalrts::char_left( 'T', context[7], context[8] );
    if( ! context[9] )
      continue;
    context[10] = refalrts::char_left( '2', context[7], context[8] );
    if( ! context[10] )
      continue;
    context[11] = refalrts::char_left( '_', context[7], context[8] );
    if( ! context[11] )
      continue;
    context[12] = refalrts::char_left( 'c', context[7], context[8] );
    if( ! context[12] )
      continue;
    context[13] = refalrts::char_left( 'o', context[7], context[8] );
    if( ! context[13] )
      continue;
    context[14] = refalrts::char_left( 'n', context[7], context[8] );
    if( ! context[14] )
      continue;
    context[15] = refalrts::char_left( 't', context[7], context[8] );
    if( ! context[15] )
      continue;
    if( ! refalrts::empty_seq( context[7], context[8] ) )
      continue;
    // closed e.eX#1 as range 2
    //DEBUG: e.eX#1: 2

    refalrts::reset_allocator();
    //TRASH: {REMOVED TILE} </0 & Mu/4 (/5 'T'/9 '2'/10 '_'/11 'c'/12 'o'/13 'n'/14 {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ HalfReuse: </15 HalfReuse: & T2_cont/6 AsIs: e.eX#1/2 AsIs: >/1 ]] }
    refalrts::reinit_open_call( context[15] );
    refalrts::reinit_name( context[6], ref_T2u_cont.ref.function );
    refalrts::push_stack( context[1] );
    refalrts::push_stack( context[15] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[15];
    refalrts::splice_to_freelist_open( trash_prev, res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence();

  do {
    // # T2_check1 e.idx
    // </0 & Mu/4 # T2_check1/5 e.eX#1/2 >/1
    if( ! refalrts::ident_term(  ident_T2u_check1, context[5] ) )
      continue;
    // closed e.eX#1 as range 2
    //DEBUG: e.eX#1: 2

    refalrts::reset_allocator();
    //TRASH: {REMOVED TILE} </0 {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ HalfReuse: </4 HalfReuse: & T2_check1/5 AsIs: e.eX#1/2 AsIs: >/1 ]] }
    refalrts::reinit_open_call( context[4] );
    refalrts::reinit_name( context[5], ref_T2u_check1.ref.function );
    refalrts::push_stack( context[1] );
    refalrts::push_stack( context[4] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[4];
    refalrts::splice_to_freelist_open( trash_prev, res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence();

  do {
    // ( 'T2_check1' ) e.idx
    // </0 & Mu/4 (/5 'T'/9 '2'/10 '_'/11 'c'/12 'h'/13 'e'/14 'c'/15 'k'/16 '1'/17 )/6 e.eX#1/2 >/1
    context[7] = 0;
    context[8] = 0;
    if( ! refalrts::brackets_term( context[7], context[8], context[5] ) )
      continue;
    context[9] = refalrts::char_left( 'T', context[7], context[8] );
    if( ! context[9] )
      continue;
    context[10] = refalrts::char_left( '2', context[7], context[8] );
    if( ! context[10] )
      continue;
    context[11] = refalrts::char_left( '_', context[7], context[8] );
    if( ! context[11] )
      continue;
    context[12] = refalrts::char_left( 'c', context[7], context[8] );
    if( ! context[12] )
      continue;
    context[13] = refalrts::char_left( 'h', context[7], context[8] );
    if( ! context[13] )
      continue;
    context[14] = refalrts::char_left( 'e', context[7], context[8] );
    if( ! context[14] )
      continue;
    context[15] = refalrts::char_left( 'c', context[7], context[8] );
    if( ! context[15] )
      continue;
    context[16] = refalrts::char_left( 'k', context[7], context[8] );
    if( ! context[16] )
      continue;
    context[17] = refalrts::char_left( '1', context[7], context[8] );
    if( ! context[17] )
      continue;
    if( ! refalrts::empty_seq( context[7], context[8] ) )
      continue;
    // closed e.eX#1 as range 2
    //DEBUG: e.eX#1: 2

    refalrts::reset_allocator();
    //TRASH: {REMOVED TILE} </0 & Mu/4 (/5 'T'/9 '2'/10 '_'/11 'c'/12 'h'/13 'e'/14 'c'/15 'k'/16 {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ HalfReuse: </17 HalfReuse: & T2_check1/6 AsIs: e.eX#1/2 AsIs: >/1 ]] }
    refalrts::reinit_open_call( context[17] );
    refalrts::reinit_name( context[6], ref_T2u_check1.ref.function );
    refalrts::push_stack( context[1] );
    refalrts::push_stack( context[17] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[17];
    refalrts::splice_to_freelist_open( trash_prev, res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence();

  do {
    // # T2_cont0 e.idx
    // </0 & Mu/4 # T2_cont0/5 e.eX#1/2 >/1
    if( ! refalrts::ident_term(  ident_T2u_cont0, context[5] ) )
      continue;
    // closed e.eX#1 as range 2
    //DEBUG: e.eX#1: 2

    refalrts::reset_allocator();
    //TRASH: {REMOVED TILE} </0 {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ HalfReuse: </4 HalfReuse: & T2_cont0/5 AsIs: e.eX#1/2 AsIs: >/1 ]] }
    refalrts::reinit_open_call( context[4] );
    refalrts::reinit_name( context[5], ref_T2u_cont0.ref.function );
    refalrts::push_stack( context[1] );
    refalrts::push_stack( context[4] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[4];
    refalrts::splice_to_freelist_open( trash_prev, res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence();

  do {
    // ( 'T2_cont0' ) e.idx
    // </0 & Mu/4 (/5 'T'/9 '2'/10 '_'/11 'c'/12 'o'/13 'n'/14 't'/15 '0'/16 )/6 e.eX#1/2 >/1
    context[7] = 0;
    context[8] = 0;
    if( ! refalrts::brackets_term( context[7], context[8], context[5] ) )
      continue;
    context[9] = refalrts::char_left( 'T', context[7], context[8] );
    if( ! context[9] )
      continue;
    context[10] = refalrts::char_left( '2', context[7], context[8] );
    if( ! context[10] )
      continue;
    context[11] = refalrts::char_left( '_', context[7], context[8] );
    if( ! context[11] )
      continue;
    context[12] = refalrts::char_left( 'c', context[7], context[8] );
    if( ! context[12] )
      continue;
    context[13] = refalrts::char_left( 'o', context[7], context[8] );
    if( ! context[13] )
      continue;
    context[14] = refalrts::char_left( 'n', context[7], context[8] );
    if( ! context[14] )
      continue;
    context[15] = refalrts::char_left( 't', context[7], context[8] );
    if( ! context[15] )
      continue;
    context[16] = refalrts::char_left( '0', context[7], context[8] );
    if( ! context[16] )
      continue;
    if( ! refalrts::empty_seq( context[7], context[8] ) )
      continue;
    // closed e.eX#1 as range 2
    //DEBUG: e.eX#1: 2

    refalrts::reset_allocator();
    //TRASH: {REMOVED TILE} </0 & Mu/4 (/5 'T'/9 '2'/10 '_'/11 'c'/12 'o'/13 'n'/14 't'/15 {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ HalfReuse: </16 HalfReuse: & T2_cont0/6 AsIs: e.eX#1/2 AsIs: >/1 ]] }
    refalrts::reinit_open_call( context[16] );
    refalrts::reinit_name( context[6], ref_T2u_cont0.ref.function );
    refalrts::push_stack( context[1] );
    refalrts::push_stack( context[16] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[16];
    refalrts::splice_to_freelist_open( trash_prev, res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence();

  do {
    // # T3 e.idx
    // </0 & Mu/4 # T3/5 e.eX#1/2 >/1
    if( ! refalrts::ident_term(  ident_T3, context[5] ) )
      continue;
    // closed e.eX#1 as range 2
    //DEBUG: e.eX#1: 2

    refalrts::reset_allocator();
    //TRASH: {REMOVED TILE} </0 {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ HalfReuse: </4 HalfReuse: & T3/5 AsIs: e.eX#1/2 AsIs: >/1 ]] }
    refalrts::reinit_open_call( context[4] );
    refalrts::reinit_name( context[5], ref_T3.ref.function );
    refalrts::push_stack( context[1] );
    refalrts::push_stack( context[4] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[4];
    refalrts::splice_to_freelist_open( trash_prev, res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence();

  do {
    // ( 'T3' ) e.idx
    // </0 & Mu/4 (/5 'T'/9 '3'/10 )/6 e.eX#1/2 >/1
    context[7] = 0;
    context[8] = 0;
    if( ! refalrts::brackets_term( context[7], context[8], context[5] ) )
      continue;
    context[9] = refalrts::char_left( 'T', context[7], context[8] );
    if( ! context[9] )
      continue;
    context[10] = refalrts::char_left( '3', context[7], context[8] );
    if( ! context[10] )
      continue;
    if( ! refalrts::empty_seq( context[7], context[8] ) )
      continue;
    // closed e.eX#1 as range 2
    //DEBUG: e.eX#1: 2

    refalrts::reset_allocator();
    //TRASH: {REMOVED TILE} </0 & Mu/4 (/5 'T'/9 {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ HalfReuse: </10 HalfReuse: & T3/6 AsIs: e.eX#1/2 AsIs: >/1 ]] }
    refalrts::reinit_open_call( context[10] );
    refalrts::reinit_name( context[6], ref_T3.ref.function );
    refalrts::push_stack( context[1] );
    refalrts::push_stack( context[10] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[10];
    refalrts::splice_to_freelist_open( trash_prev, res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence();

  do {
    // # T3_check e.idx
    // </0 & Mu/4 # T3_check/5 e.eX#1/2 >/1
    if( ! refalrts::ident_term(  ident_T3u_check, context[5] ) )
      continue;
    // closed e.eX#1 as range 2
    //DEBUG: e.eX#1: 2

    refalrts::reset_allocator();
    //TRASH: {REMOVED TILE} </0 {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ HalfReuse: </4 HalfReuse: & T3_check/5 AsIs: e.eX#1/2 AsIs: >/1 ]] }
    refalrts::reinit_open_call( context[4] );
    refalrts::reinit_name( context[5], ref_T3u_check.ref.function );
    refalrts::push_stack( context[1] );
    refalrts::push_stack( context[4] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[4];
    refalrts::splice_to_freelist_open( trash_prev, res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence();

  do {
    // ( 'T3_check' ) e.idx
    // </0 & Mu/4 (/5 'T'/9 '3'/10 '_'/11 'c'/12 'h'/13 'e'/14 'c'/15 'k'/16 )/6 e.eX#1/2 >/1
    context[7] = 0;
    context[8] = 0;
    if( ! refalrts::brackets_term( context[7], context[8], context[5] ) )
      continue;
    context[9] = refalrts::char_left( 'T', context[7], context[8] );
    if( ! context[9] )
      continue;
    context[10] = refalrts::char_left( '3', context[7], context[8] );
    if( ! context[10] )
      continue;
    context[11] = refalrts::char_left( '_', context[7], context[8] );
    if( ! context[11] )
      continue;
    context[12] = refalrts::char_left( 'c', context[7], context[8] );
    if( ! context[12] )
      continue;
    context[13] = refalrts::char_left( 'h', context[7], context[8] );
    if( ! context[13] )
      continue;
    context[14] = refalrts::char_left( 'e', context[7], context[8] );
    if( ! context[14] )
      continue;
    context[15] = refalrts::char_left( 'c', context[7], context[8] );
    if( ! context[15] )
      continue;
    context[16] = refalrts::char_left( 'k', context[7], context[8] );
    if( ! context[16] )
      continue;
    if( ! refalrts::empty_seq( context[7], context[8] ) )
      continue;
    // closed e.eX#1 as range 2
    //DEBUG: e.eX#1: 2

    refalrts::reset_allocator();
    //TRASH: {REMOVED TILE} </0 & Mu/4 (/5 'T'/9 '3'/10 '_'/11 'c'/12 'h'/13 'e'/14 'c'/15 {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ HalfReuse: </16 HalfReuse: & T3_check/6 AsIs: e.eX#1/2 AsIs: >/1 ]] }
    refalrts::reinit_open_call( context[16] );
    refalrts::reinit_name( context[6], ref_T3u_check.ref.function );
    refalrts::push_stack( context[1] );
    refalrts::push_stack( context[16] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[16];
    refalrts::splice_to_freelist_open( trash_prev, res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence();

  do {
    // # T3_forward e.idx
    // </0 & Mu/4 # T3_forward/5 e.eX#1/2 >/1
    if( ! refalrts::ident_term(  ident_T3u_forward, context[5] ) )
      continue;
    // closed e.eX#1 as range 2
    //DEBUG: e.eX#1: 2

    refalrts::reset_allocator();
    //TRASH: {REMOVED TILE} </0 {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ HalfReuse: </4 HalfReuse: & T3_forward/5 AsIs: e.eX#1/2 AsIs: >/1 ]] }
    refalrts::reinit_open_call( context[4] );
    refalrts::reinit_name( context[5], ref_T3u_forward.ref.function );
    refalrts::push_stack( context[1] );
    refalrts::push_stack( context[4] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[4];
    refalrts::splice_to_freelist_open( trash_prev, res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence();

  do {
    // ( 'T3_forward' ) e.idx
    // </0 & Mu/4 (/5 'T'/9 '3'/10 '_'/11 'f'/12 'o'/13 'r'/14 'w'/15 'a'/16 'r'/17 'd'/18 )/6 e.eX#1/2 >/1
    context[7] = 0;
    context[8] = 0;
    if( ! refalrts::brackets_term( context[7], context[8], context[5] ) )
      continue;
    context[9] = refalrts::char_left( 'T', context[7], context[8] );
    if( ! context[9] )
      continue;
    context[10] = refalrts::char_left( '3', context[7], context[8] );
    if( ! context[10] )
      continue;
    context[11] = refalrts::char_left( '_', context[7], context[8] );
    if( ! context[11] )
      continue;
    context[12] = refalrts::char_left( 'f', context[7], context[8] );
    if( ! context[12] )
      continue;
    context[13] = refalrts::char_left( 'o', context[7], context[8] );
    if( ! context[13] )
      continue;
    context[14] = refalrts::char_left( 'r', context[7], context[8] );
    if( ! context[14] )
      continue;
    context[15] = refalrts::char_left( 'w', context[7], context[8] );
    if( ! context[15] )
      continue;
    context[16] = refalrts::char_left( 'a', context[7], context[8] );
    if( ! context[16] )
      continue;
    context[17] = refalrts::char_left( 'r', context[7], context[8] );
    if( ! context[17] )
      continue;
    context[18] = refalrts::char_left( 'd', context[7], context[8] );
    if( ! context[18] )
      continue;
    if( ! refalrts::empty_seq( context[7], context[8] ) )
      continue;
    // closed e.eX#1 as range 2
    //DEBUG: e.eX#1: 2

    refalrts::reset_allocator();
    //TRASH: {REMOVED TILE} </0 & Mu/4 (/5 'T'/9 '3'/10 '_'/11 'f'/12 'o'/13 'r'/14 'w'/15 'a'/16 'r'/17 {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ HalfReuse: </18 HalfReuse: & T3_forward/6 AsIs: e.eX#1/2 AsIs: >/1 ]] }
    refalrts::reinit_open_call( context[18] );
    refalrts::reinit_name( context[6], ref_T3u_forward.ref.function );
    refalrts::push_stack( context[1] );
    refalrts::push_stack( context[18] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[18];
    refalrts::splice_to_freelist_open( trash_prev, res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence();

  do {
    // # T3_next e.idx
    // </0 & Mu/4 # T3_next/5 e.eX#1/2 >/1
    if( ! refalrts::ident_term(  ident_T3u_next, context[5] ) )
      continue;
    // closed e.eX#1 as range 2
    //DEBUG: e.eX#1: 2

    refalrts::reset_allocator();
    //TRASH: {REMOVED TILE} </0 {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ HalfReuse: </4 HalfReuse: & T3_next/5 AsIs: e.eX#1/2 AsIs: >/1 ]] }
    refalrts::reinit_open_call( context[4] );
    refalrts::reinit_name( context[5], ref_T3u_next.ref.function );
    refalrts::push_stack( context[1] );
    refalrts::push_stack( context[4] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[4];
    refalrts::splice_to_freelist_open( trash_prev, res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence();

  do {
    // ( 'T3_next' ) e.idx
    // </0 & Mu/4 (/5 'T'/9 '3'/10 '_'/11 'n'/12 'e'/13 'x'/14 't'/15 )/6 e.eX#1/2 >/1
    context[7] = 0;
    context[8] = 0;
    if( ! refalrts::brackets_term( context[7], context[8], context[5] ) )
      continue;
    context[9] = refalrts::char_left( 'T', context[7], context[8] );
    if( ! context[9] )
      continue;
    context[10] = refalrts::char_left( '3', context[7], context[8] );
    if( ! context[10] )
      continue;
    context[11] = refalrts::char_left( '_', context[7], context[8] );
    if( ! context[11] )
      continue;
    context[12] = refalrts::char_left( 'n', context[7], context[8] );
    if( ! context[12] )
      continue;
    context[13] = refalrts::char_left( 'e', context[7], context[8] );
    if( ! context[13] )
      continue;
    context[14] = refalrts::char_left( 'x', context[7], context[8] );
    if( ! context[14] )
      continue;
    context[15] = refalrts::char_left( 't', context[7], context[8] );
    if( ! context[15] )
      continue;
    if( ! refalrts::empty_seq( context[7], context[8] ) )
      continue;
    // closed e.eX#1 as range 2
    //DEBUG: e.eX#1: 2

    refalrts::reset_allocator();
    //TRASH: {REMOVED TILE} </0 & Mu/4 (/5 'T'/9 '3'/10 '_'/11 'n'/12 'e'/13 'x'/14 {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ HalfReuse: </15 HalfReuse: & T3_next/6 AsIs: e.eX#1/2 AsIs: >/1 ]] }
    refalrts::reinit_open_call( context[15] );
    refalrts::reinit_name( context[6], ref_T3u_next.ref.function );
    refalrts::push_stack( context[1] );
    refalrts::push_stack( context[15] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[15];
    refalrts::splice_to_freelist_open( trash_prev, res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence();

  do {
    // # T4 e.idx
    // </0 & Mu/4 # T4/5 e.eX#1/2 >/1
    if( ! refalrts::ident_term(  ident_T4, context[5] ) )
      continue;
    // closed e.eX#1 as range 2
    //DEBUG: e.eX#1: 2

    refalrts::reset_allocator();
    //TRASH: {REMOVED TILE} </0 {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ HalfReuse: </4 HalfReuse: & T4/5 AsIs: e.eX#1/2 AsIs: >/1 ]] }
    refalrts::reinit_open_call( context[4] );
    refalrts::reinit_name( context[5], ref_T4.ref.function );
    refalrts::push_stack( context[1] );
    refalrts::push_stack( context[4] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[4];
    refalrts::splice_to_freelist_open( trash_prev, res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence();

  do {
    // ( 'T4' ) e.idx
    // </0 & Mu/4 (/5 'T'/9 '4'/10 )/6 e.eX#1/2 >/1
    context[7] = 0;
    context[8] = 0;
    if( ! refalrts::brackets_term( context[7], context[8], context[5] ) )
      continue;
    context[9] = refalrts::char_left( 'T', context[7], context[8] );
    if( ! context[9] )
      continue;
    context[10] = refalrts::char_left( '4', context[7], context[8] );
    if( ! context[10] )
      continue;
    if( ! refalrts::empty_seq( context[7], context[8] ) )
      continue;
    // closed e.eX#1 as range 2
    //DEBUG: e.eX#1: 2

    refalrts::reset_allocator();
    //TRASH: {REMOVED TILE} </0 & Mu/4 (/5 'T'/9 {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ HalfReuse: </10 HalfReuse: & T4/6 AsIs: e.eX#1/2 AsIs: >/1 ]] }
    refalrts::reinit_open_call( context[10] );
    refalrts::reinit_name( context[6], ref_T4.ref.function );
    refalrts::push_stack( context[1] );
    refalrts::push_stack( context[10] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[10];
    refalrts::splice_to_freelist_open( trash_prev, res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence();

  do {
    // # T4_check e.idx
    // </0 & Mu/4 # T4_check/5 e.eX#1/2 >/1
    if( ! refalrts::ident_term(  ident_T4u_check, context[5] ) )
      continue;
    // closed e.eX#1 as range 2
    //DEBUG: e.eX#1: 2

    refalrts::reset_allocator();
    //TRASH: {REMOVED TILE} </0 {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ HalfReuse: </4 HalfReuse: & T4_check/5 AsIs: e.eX#1/2 AsIs: >/1 ]] }
    refalrts::reinit_open_call( context[4] );
    refalrts::reinit_name( context[5], ref_T4u_check.ref.function );
    refalrts::push_stack( context[1] );
    refalrts::push_stack( context[4] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[4];
    refalrts::splice_to_freelist_open( trash_prev, res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence();

  do {
    // ( 'T4_check' ) e.idx
    // </0 & Mu/4 (/5 'T'/9 '4'/10 '_'/11 'c'/12 'h'/13 'e'/14 'c'/15 'k'/16 )/6 e.eX#1/2 >/1
    context[7] = 0;
    context[8] = 0;
    if( ! refalrts::brackets_term( context[7], context[8], context[5] ) )
      continue;
    context[9] = refalrts::char_left( 'T', context[7], context[8] );
    if( ! context[9] )
      continue;
    context[10] = refalrts::char_left( '4', context[7], context[8] );
    if( ! context[10] )
      continue;
    context[11] = refalrts::char_left( '_', context[7], context[8] );
    if( ! context[11] )
      continue;
    context[12] = refalrts::char_left( 'c', context[7], context[8] );
    if( ! context[12] )
      continue;
    context[13] = refalrts::char_left( 'h', context[7], context[8] );
    if( ! context[13] )
      continue;
    context[14] = refalrts::char_left( 'e', context[7], context[8] );
    if( ! context[14] )
      continue;
    context[15] = refalrts::char_left( 'c', context[7], context[8] );
    if( ! context[15] )
      continue;
    context[16] = refalrts::char_left( 'k', context[7], context[8] );
    if( ! context[16] )
      continue;
    if( ! refalrts::empty_seq( context[7], context[8] ) )
      continue;
    // closed e.eX#1 as range 2
    //DEBUG: e.eX#1: 2

    refalrts::reset_allocator();
    //TRASH: {REMOVED TILE} </0 & Mu/4 (/5 'T'/9 '4'/10 '_'/11 'c'/12 'h'/13 'e'/14 'c'/15 {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ HalfReuse: </16 HalfReuse: & T4_check/6 AsIs: e.eX#1/2 AsIs: >/1 ]] }
    refalrts::reinit_open_call( context[16] );
    refalrts::reinit_name( context[6], ref_T4u_check.ref.function );
    refalrts::push_stack( context[1] );
    refalrts::push_stack( context[16] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[16];
    refalrts::splice_to_freelist_open( trash_prev, res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence();

  do {
    // # T4_forward e.idx
    // </0 & Mu/4 # T4_forward/5 e.eX#1/2 >/1
    if( ! refalrts::ident_term(  ident_T4u_forward, context[5] ) )
      continue;
    // closed e.eX#1 as range 2
    //DEBUG: e.eX#1: 2

    refalrts::reset_allocator();
    //TRASH: {REMOVED TILE} </0 {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ HalfReuse: </4 HalfReuse: & T4_forward/5 AsIs: e.eX#1/2 AsIs: >/1 ]] }
    refalrts::reinit_open_call( context[4] );
    refalrts::reinit_name( context[5], ref_T4u_forward.ref.function );
    refalrts::push_stack( context[1] );
    refalrts::push_stack( context[4] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[4];
    refalrts::splice_to_freelist_open( trash_prev, res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence();

  do {
    // ( 'T4_forward' ) e.idx
    // </0 & Mu/4 (/5 'T'/9 '4'/10 '_'/11 'f'/12 'o'/13 'r'/14 'w'/15 'a'/16 'r'/17 'd'/18 )/6 e.eX#1/2 >/1
    context[7] = 0;
    context[8] = 0;
    if( ! refalrts::brackets_term( context[7], context[8], context[5] ) )
      continue;
    context[9] = refalrts::char_left( 'T', context[7], context[8] );
    if( ! context[9] )
      continue;
    context[10] = refalrts::char_left( '4', context[7], context[8] );
    if( ! context[10] )
      continue;
    context[11] = refalrts::char_left( '_', context[7], context[8] );
    if( ! context[11] )
      continue;
    context[12] = refalrts::char_left( 'f', context[7], context[8] );
    if( ! context[12] )
      continue;
    context[13] = refalrts::char_left( 'o', context[7], context[8] );
    if( ! context[13] )
      continue;
    context[14] = refalrts::char_left( 'r', context[7], context[8] );
    if( ! context[14] )
      continue;
    context[15] = refalrts::char_left( 'w', context[7], context[8] );
    if( ! context[15] )
      continue;
    context[16] = refalrts::char_left( 'a', context[7], context[8] );
    if( ! context[16] )
      continue;
    context[17] = refalrts::char_left( 'r', context[7], context[8] );
    if( ! context[17] )
      continue;
    context[18] = refalrts::char_left( 'd', context[7], context[8] );
    if( ! context[18] )
      continue;
    if( ! refalrts::empty_seq( context[7], context[8] ) )
      continue;
    // closed e.eX#1 as range 2
    //DEBUG: e.eX#1: 2

    refalrts::reset_allocator();
    //TRASH: {REMOVED TILE} </0 & Mu/4 (/5 'T'/9 '4'/10 '_'/11 'f'/12 'o'/13 'r'/14 'w'/15 'a'/16 'r'/17 {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ HalfReuse: </18 HalfReuse: & T4_forward/6 AsIs: e.eX#1/2 AsIs: >/1 ]] }
    refalrts::reinit_open_call( context[18] );
    refalrts::reinit_name( context[6], ref_T4u_forward.ref.function );
    refalrts::push_stack( context[1] );
    refalrts::push_stack( context[18] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[18];
    refalrts::splice_to_freelist_open( trash_prev, res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence();

  do {
    // # T4_next e.idx
    // </0 & Mu/4 # T4_next/5 e.eX#1/2 >/1
    if( ! refalrts::ident_term(  ident_T4u_next, context[5] ) )
      continue;
    // closed e.eX#1 as range 2
    //DEBUG: e.eX#1: 2

    refalrts::reset_allocator();
    //TRASH: {REMOVED TILE} </0 {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ HalfReuse: </4 HalfReuse: & T4_next/5 AsIs: e.eX#1/2 AsIs: >/1 ]] }
    refalrts::reinit_open_call( context[4] );
    refalrts::reinit_name( context[5], ref_T4u_next.ref.function );
    refalrts::push_stack( context[1] );
    refalrts::push_stack( context[4] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[4];
    refalrts::splice_to_freelist_open( trash_prev, res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence();

  do {
    // ( 'T4_next' ) e.idx
    // </0 & Mu/4 (/5 'T'/9 '4'/10 '_'/11 'n'/12 'e'/13 'x'/14 't'/15 )/6 e.eX#1/2 >/1
    context[7] = 0;
    context[8] = 0;
    if( ! refalrts::brackets_term( context[7], context[8], context[5] ) )
      continue;
    context[9] = refalrts::char_left( 'T', context[7], context[8] );
    if( ! context[9] )
      continue;
    context[10] = refalrts::char_left( '4', context[7], context[8] );
    if( ! context[10] )
      continue;
    context[11] = refalrts::char_left( '_', context[7], context[8] );
    if( ! context[11] )
      continue;
    context[12] = refalrts::char_left( 'n', context[7], context[8] );
    if( ! context[12] )
      continue;
    context[13] = refalrts::char_left( 'e', context[7], context[8] );
    if( ! context[13] )
      continue;
    context[14] = refalrts::char_left( 'x', context[7], context[8] );
    if( ! context[14] )
      continue;
    context[15] = refalrts::char_left( 't', context[7], context[8] );
    if( ! context[15] )
      continue;
    if( ! refalrts::empty_seq( context[7], context[8] ) )
      continue;
    // closed e.eX#1 as range 2
    //DEBUG: e.eX#1: 2

    refalrts::reset_allocator();
    //TRASH: {REMOVED TILE} </0 & Mu/4 (/5 'T'/9 '4'/10 '_'/11 'n'/12 'e'/13 'x'/14 {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ HalfReuse: </15 HalfReuse: & T4_next/6 AsIs: e.eX#1/2 AsIs: >/1 ]] }
    refalrts::reinit_open_call( context[15] );
    refalrts::reinit_name( context[6], ref_T4u_next.ref.function );
    refalrts::push_stack( context[1] );
    refalrts::push_stack( context[15] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[15];
    refalrts::splice_to_freelist_open( trash_prev, res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence();

  do {
    // # T5 e.idx
    // </0 & Mu/4 # T5/5 e.eX#1/2 >/1
    if( ! refalrts::ident_term(  ident_T5, context[5] ) )
      continue;
    // closed e.eX#1 as range 2
    //DEBUG: e.eX#1: 2

    refalrts::reset_allocator();
    //TRASH: {REMOVED TILE} </0 {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ HalfReuse: </4 HalfReuse: & T5/5 AsIs: e.eX#1/2 AsIs: >/1 ]] }
    refalrts::reinit_open_call( context[4] );
    refalrts::reinit_name( context[5], ref_T5.ref.function );
    refalrts::push_stack( context[1] );
    refalrts::push_stack( context[4] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[4];
    refalrts::splice_to_freelist_open( trash_prev, res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence();

  do {
    // ( 'T5' ) e.idx
    // </0 & Mu/4 (/5 'T'/9 '5'/10 )/6 e.eX#1/2 >/1
    context[7] = 0;
    context[8] = 0;
    if( ! refalrts::brackets_term( context[7], context[8], context[5] ) )
      continue;
    context[9] = refalrts::char_left( 'T', context[7], context[8] );
    if( ! context[9] )
      continue;
    context[10] = refalrts::char_left( '5', context[7], context[8] );
    if( ! context[10] )
      continue;
    if( ! refalrts::empty_seq( context[7], context[8] ) )
      continue;
    // closed e.eX#1 as range 2
    //DEBUG: e.eX#1: 2

    refalrts::reset_allocator();
    //TRASH: {REMOVED TILE} </0 & Mu/4 (/5 'T'/9 {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ HalfReuse: </10 HalfReuse: & T5/6 AsIs: e.eX#1/2 AsIs: >/1 ]] }
    refalrts::reinit_open_call( context[10] );
    refalrts::reinit_name( context[6], ref_T5.ref.function );
    refalrts::push_stack( context[1] );
    refalrts::push_stack( context[10] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[10];
    refalrts::splice_to_freelist_open( trash_prev, res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence();

  do {
    // # T5_check e.idx
    // </0 & Mu/4 # T5_check/5 e.eX#1/2 >/1
    if( ! refalrts::ident_term(  ident_T5u_check, context[5] ) )
      continue;
    // closed e.eX#1 as range 2
    //DEBUG: e.eX#1: 2

    refalrts::reset_allocator();
    //TRASH: {REMOVED TILE} </0 {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ HalfReuse: </4 HalfReuse: & T5_check/5 AsIs: e.eX#1/2 AsIs: >/1 ]] }
    refalrts::reinit_open_call( context[4] );
    refalrts::reinit_name( context[5], ref_T5u_check.ref.function );
    refalrts::push_stack( context[1] );
    refalrts::push_stack( context[4] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[4];
    refalrts::splice_to_freelist_open( trash_prev, res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence();

  do {
    // ( 'T5_check' ) e.idx
    // </0 & Mu/4 (/5 'T'/9 '5'/10 '_'/11 'c'/12 'h'/13 'e'/14 'c'/15 'k'/16 )/6 e.eX#1/2 >/1
    context[7] = 0;
    context[8] = 0;
    if( ! refalrts::brackets_term( context[7], context[8], context[5] ) )
      continue;
    context[9] = refalrts::char_left( 'T', context[7], context[8] );
    if( ! context[9] )
      continue;
    context[10] = refalrts::char_left( '5', context[7], context[8] );
    if( ! context[10] )
      continue;
    context[11] = refalrts::char_left( '_', context[7], context[8] );
    if( ! context[11] )
      continue;
    context[12] = refalrts::char_left( 'c', context[7], context[8] );
    if( ! context[12] )
      continue;
    context[13] = refalrts::char_left( 'h', context[7], context[8] );
    if( ! context[13] )
      continue;
    context[14] = refalrts::char_left( 'e', context[7], context[8] );
    if( ! context[14] )
      continue;
    context[15] = refalrts::char_left( 'c', context[7], context[8] );
    if( ! context[15] )
      continue;
    context[16] = refalrts::char_left( 'k', context[7], context[8] );
    if( ! context[16] )
      continue;
    if( ! refalrts::empty_seq( context[7], context[8] ) )
      continue;
    // closed e.eX#1 as range 2
    //DEBUG: e.eX#1: 2

    refalrts::reset_allocator();
    //TRASH: {REMOVED TILE} </0 & Mu/4 (/5 'T'/9 '5'/10 '_'/11 'c'/12 'h'/13 'e'/14 'c'/15 {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ HalfReuse: </16 HalfReuse: & T5_check/6 AsIs: e.eX#1/2 AsIs: >/1 ]] }
    refalrts::reinit_open_call( context[16] );
    refalrts::reinit_name( context[6], ref_T5u_check.ref.function );
    refalrts::push_stack( context[1] );
    refalrts::push_stack( context[16] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[16];
    refalrts::splice_to_freelist_open( trash_prev, res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence();

  do {
    // # T5_forward e.idx
    // </0 & Mu/4 # T5_forward/5 e.eX#1/2 >/1
    if( ! refalrts::ident_term(  ident_T5u_forward, context[5] ) )
      continue;
    // closed e.eX#1 as range 2
    //DEBUG: e.eX#1: 2

    refalrts::reset_allocator();
    //TRASH: {REMOVED TILE} </0 {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ HalfReuse: </4 HalfReuse: & T5_forward/5 AsIs: e.eX#1/2 AsIs: >/1 ]] }
    refalrts::reinit_open_call( context[4] );
    refalrts::reinit_name( context[5], ref_T5u_forward.ref.function );
    refalrts::push_stack( context[1] );
    refalrts::push_stack( context[4] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[4];
    refalrts::splice_to_freelist_open( trash_prev, res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence();

  do {
    // ( 'T5_forward' ) e.idx
    // </0 & Mu/4 (/5 'T'/9 '5'/10 '_'/11 'f'/12 'o'/13 'r'/14 'w'/15 'a'/16 'r'/17 'd'/18 )/6 e.eX#1/2 >/1
    context[7] = 0;
    context[8] = 0;
    if( ! refalrts::brackets_term( context[7], context[8], context[5] ) )
      continue;
    context[9] = refalrts::char_left( 'T', context[7], context[8] );
    if( ! context[9] )
      continue;
    context[10] = refalrts::char_left( '5', context[7], context[8] );
    if( ! context[10] )
      continue;
    context[11] = refalrts::char_left( '_', context[7], context[8] );
    if( ! context[11] )
      continue;
    context[12] = refalrts::char_left( 'f', context[7], context[8] );
    if( ! context[12] )
      continue;
    context[13] = refalrts::char_left( 'o', context[7], context[8] );
    if( ! context[13] )
      continue;
    context[14] = refalrts::char_left( 'r', context[7], context[8] );
    if( ! context[14] )
      continue;
    context[15] = refalrts::char_left( 'w', context[7], context[8] );
    if( ! context[15] )
      continue;
    context[16] = refalrts::char_left( 'a', context[7], context[8] );
    if( ! context[16] )
      continue;
    context[17] = refalrts::char_left( 'r', context[7], context[8] );
    if( ! context[17] )
      continue;
    context[18] = refalrts::char_left( 'd', context[7], context[8] );
    if( ! context[18] )
      continue;
    if( ! refalrts::empty_seq( context[7], context[8] ) )
      continue;
    // closed e.eX#1 as range 2
    //DEBUG: e.eX#1: 2

    refalrts::reset_allocator();
    //TRASH: {REMOVED TILE} </0 & Mu/4 (/5 'T'/9 '5'/10 '_'/11 'f'/12 'o'/13 'r'/14 'w'/15 'a'/16 'r'/17 {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ HalfReuse: </18 HalfReuse: & T5_forward/6 AsIs: e.eX#1/2 AsIs: >/1 ]] }
    refalrts::reinit_open_call( context[18] );
    refalrts::reinit_name( context[6], ref_T5u_forward.ref.function );
    refalrts::push_stack( context[1] );
    refalrts::push_stack( context[18] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[18];
    refalrts::splice_to_freelist_open( trash_prev, res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence();

  do {
    // # T5_next e.idx
    // </0 & Mu/4 # T5_next/5 e.eX#1/2 >/1
    if( ! refalrts::ident_term(  ident_T5u_next, context[5] ) )
      continue;
    // closed e.eX#1 as range 2
    //DEBUG: e.eX#1: 2

    refalrts::reset_allocator();
    //TRASH: {REMOVED TILE} </0 {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ HalfReuse: </4 HalfReuse: & T5_next/5 AsIs: e.eX#1/2 AsIs: >/1 ]] }
    refalrts::reinit_open_call( context[4] );
    refalrts::reinit_name( context[5], ref_T5u_next.ref.function );
    refalrts::push_stack( context[1] );
    refalrts::push_stack( context[4] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[4];
    refalrts::splice_to_freelist_open( trash_prev, res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence();

  do {
    // ( 'T5_next' ) e.idx
    // </0 & Mu/4 (/5 'T'/9 '5'/10 '_'/11 'n'/12 'e'/13 'x'/14 't'/15 )/6 e.eX#1/2 >/1
    context[7] = 0;
    context[8] = 0;
    if( ! refalrts::brackets_term( context[7], context[8], context[5] ) )
      continue;
    context[9] = refalrts::char_left( 'T', context[7], context[8] );
    if( ! context[9] )
      continue;
    context[10] = refalrts::char_left( '5', context[7], context[8] );
    if( ! context[10] )
      continue;
    context[11] = refalrts::char_left( '_', context[7], context[8] );
    if( ! context[11] )
      continue;
    context[12] = refalrts::char_left( 'n', context[7], context[8] );
    if( ! context[12] )
      continue;
    context[13] = refalrts::char_left( 'e', context[7], context[8] );
    if( ! context[13] )
      continue;
    context[14] = refalrts::char_left( 'x', context[7], context[8] );
    if( ! context[14] )
      continue;
    context[15] = refalrts::char_left( 't', context[7], context[8] );
    if( ! context[15] )
      continue;
    if( ! refalrts::empty_seq( context[7], context[8] ) )
      continue;
    // closed e.eX#1 as range 2
    //DEBUG: e.eX#1: 2

    refalrts::reset_allocator();
    //TRASH: {REMOVED TILE} </0 & Mu/4 (/5 'T'/9 '5'/10 '_'/11 'n'/12 'e'/13 'x'/14 {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ HalfReuse: </15 HalfReuse: & T5_next/6 AsIs: e.eX#1/2 AsIs: >/1 ]] }
    refalrts::reinit_open_call( context[15] );
    refalrts::reinit_name( context[6], ref_T5u_next.ref.function );
    refalrts::push_stack( context[1] );
    refalrts::push_stack( context[15] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[15];
    refalrts::splice_to_freelist_open( trash_prev, res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence();

  do {
    // # T5-UnHole e.idx
    // </0 & Mu/4 # T5-UnHole/5 e.eX#1/2 >/1
    if( ! refalrts::ident_term(  ident_T5m_UnHole, context[5] ) )
      continue;
    // closed e.eX#1 as range 2
    //DEBUG: e.eX#1: 2

    refalrts::reset_allocator();
    //TRASH: {REMOVED TILE} </0 {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ HalfReuse: </4 HalfReuse: & T5-UnHole/5 AsIs: e.eX#1/2 AsIs: >/1 ]] }
    refalrts::reinit_open_call( context[4] );
    refalrts::reinit_name( context[5], ref_T5m_UnHole.ref.function );
    refalrts::push_stack( context[1] );
    refalrts::push_stack( context[4] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[4];
    refalrts::splice_to_freelist_open( trash_prev, res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence();

  do {
    // ( 'T5-UnHole' ) e.idx
    // </0 & Mu/4 (/5 'T'/9 '5'/10 '-'/11 'U'/12 'n'/13 'H'/14 'o'/15 'l'/16 'e'/17 )/6 e.eX#1/2 >/1
    context[7] = 0;
    context[8] = 0;
    if( ! refalrts::brackets_term( context[7], context[8], context[5] ) )
      continue;
    context[9] = refalrts::char_left( 'T', context[7], context[8] );
    if( ! context[9] )
      continue;
    context[10] = refalrts::char_left( '5', context[7], context[8] );
    if( ! context[10] )
      continue;
    context[11] = refalrts::char_left( '-', context[7], context[8] );
    if( ! context[11] )
      continue;
    context[12] = refalrts::char_left( 'U', context[7], context[8] );
    if( ! context[12] )
      continue;
    context[13] = refalrts::char_left( 'n', context[7], context[8] );
    if( ! context[13] )
      continue;
    context[14] = refalrts::char_left( 'H', context[7], context[8] );
    if( ! context[14] )
      continue;
    context[15] = refalrts::char_left( 'o', context[7], context[8] );
    if( ! context[15] )
      continue;
    context[16] = refalrts::char_left( 'l', context[7], context[8] );
    if( ! context[16] )
      continue;
    context[17] = refalrts::char_left( 'e', context[7], context[8] );
    if( ! context[17] )
      continue;
    if( ! refalrts::empty_seq( context[7], context[8] ) )
      continue;
    // closed e.eX#1 as range 2
    //DEBUG: e.eX#1: 2

    refalrts::reset_allocator();
    //TRASH: {REMOVED TILE} </0 & Mu/4 (/5 'T'/9 '5'/10 '-'/11 'U'/12 'n'/13 'H'/14 'o'/15 'l'/16 {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ HalfReuse: </17 HalfReuse: & T5-UnHole/6 AsIs: e.eX#1/2 AsIs: >/1 ]] }
    refalrts::reinit_open_call( context[17] );
    refalrts::reinit_name( context[6], ref_T5m_UnHole.ref.function );
    refalrts::push_stack( context[1] );
    refalrts::push_stack( context[17] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[17];
    refalrts::splice_to_freelist_open( trash_prev, res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence();

  do {
    // # T5-sub e.idx
    // </0 & Mu/4 # T5-sub/5 e.eX#1/2 >/1
    if( ! refalrts::ident_term(  ident_T5m_sub, context[5] ) )
      continue;
    // closed e.eX#1 as range 2
    //DEBUG: e.eX#1: 2

    refalrts::reset_allocator();
    //TRASH: {REMOVED TILE} </0 {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ HalfReuse: </4 HalfReuse: & T5-sub/5 AsIs: e.eX#1/2 AsIs: >/1 ]] }
    refalrts::reinit_open_call( context[4] );
    refalrts::reinit_name( context[5], ref_T5m_sub.ref.function );
    refalrts::push_stack( context[1] );
    refalrts::push_stack( context[4] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[4];
    refalrts::splice_to_freelist_open( trash_prev, res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence();

  do {
    // ( 'T5-sub' ) e.idx
    // </0 & Mu/4 (/5 'T'/9 '5'/10 '-'/11 's'/12 'u'/13 'b'/14 )/6 e.eX#1/2 >/1
    context[7] = 0;
    context[8] = 0;
    if( ! refalrts::brackets_term( context[7], context[8], context[5] ) )
      continue;
    context[9] = refalrts::char_left( 'T', context[7], context[8] );
    if( ! context[9] )
      continue;
    context[10] = refalrts::char_left( '5', context[7], context[8] );
    if( ! context[10] )
      continue;
    context[11] = refalrts::char_left( '-', context[7], context[8] );
    if( ! context[11] )
      continue;
    context[12] = refalrts::char_left( 's', context[7], context[8] );
    if( ! context[12] )
      continue;
    context[13] = refalrts::char_left( 'u', context[7], context[8] );
    if( ! context[13] )
      continue;
    context[14] = refalrts::char_left( 'b', context[7], context[8] );
    if( ! context[14] )
      continue;
    if( ! refalrts::empty_seq( context[7], context[8] ) )
      continue;
    // closed e.eX#1 as range 2
    //DEBUG: e.eX#1: 2

    refalrts::reset_allocator();
    //TRASH: {REMOVED TILE} </0 & Mu/4 (/5 'T'/9 '5'/10 '-'/11 's'/12 'u'/13 {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ HalfReuse: </14 HalfReuse: & T5-sub/6 AsIs: e.eX#1/2 AsIs: >/1 ]] }
    refalrts::reinit_open_call( context[14] );
    refalrts::reinit_name( context[6], ref_T5m_sub.ref.function );
    refalrts::push_stack( context[1] );
    refalrts::push_stack( context[14] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[14];
    refalrts::splice_to_freelist_open( trash_prev, res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence();

  do {
    // # T5-sub_check e.idx
    // </0 & Mu/4 # T5-sub_check/5 e.eX#1/2 >/1
    if( ! refalrts::ident_term(  ident_T5m_subu_check, context[5] ) )
      continue;
    // closed e.eX#1 as range 2
    //DEBUG: e.eX#1: 2

    refalrts::reset_allocator();
    //TRASH: {REMOVED TILE} </0 {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ HalfReuse: </4 HalfReuse: & T5-sub_check/5 AsIs: e.eX#1/2 AsIs: >/1 ]] }
    refalrts::reinit_open_call( context[4] );
    refalrts::reinit_name( context[5], ref_T5m_subu_check.ref.function );
    refalrts::push_stack( context[1] );
    refalrts::push_stack( context[4] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[4];
    refalrts::splice_to_freelist_open( trash_prev, res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence();

  do {
    // ( 'T5-sub_check' ) e.idx
    // </0 & Mu/4 (/5 'T'/9 '5'/10 '-'/11 's'/12 'u'/13 'b'/14 '_'/15 'c'/16 'h'/17 'e'/18 'c'/19 'k'/20 )/6 e.eX#1/2 >/1
    context[7] = 0;
    context[8] = 0;
    if( ! refalrts::brackets_term( context[7], context[8], context[5] ) )
      continue;
    context[9] = refalrts::char_left( 'T', context[7], context[8] );
    if( ! context[9] )
      continue;
    context[10] = refalrts::char_left( '5', context[7], context[8] );
    if( ! context[10] )
      continue;
    context[11] = refalrts::char_left( '-', context[7], context[8] );
    if( ! context[11] )
      continue;
    context[12] = refalrts::char_left( 's', context[7], context[8] );
    if( ! context[12] )
      continue;
    context[13] = refalrts::char_left( 'u', context[7], context[8] );
    if( ! context[13] )
      continue;
    context[14] = refalrts::char_left( 'b', context[7], context[8] );
    if( ! context[14] )
      continue;
    context[15] = refalrts::char_left( '_', context[7], context[8] );
    if( ! context[15] )
      continue;
    context[16] = refalrts::char_left( 'c', context[7], context[8] );
    if( ! context[16] )
      continue;
    context[17] = refalrts::char_left( 'h', context[7], context[8] );
    if( ! context[17] )
      continue;
    context[18] = refalrts::char_left( 'e', context[7], context[8] );
    if( ! context[18] )
      continue;
    context[19] = refalrts::char_left( 'c', context[7], context[8] );
    if( ! context[19] )
      continue;
    context[20] = refalrts::char_left( 'k', context[7], context[8] );
    if( ! context[20] )
      continue;
    if( ! refalrts::empty_seq( context[7], context[8] ) )
      continue;
    // closed e.eX#1 as range 2
    //DEBUG: e.eX#1: 2

    refalrts::reset_allocator();
    //TRASH: {REMOVED TILE} </0 & Mu/4 (/5 'T'/9 '5'/10 '-'/11 's'/12 'u'/13 'b'/14 '_'/15 'c'/16 'h'/17 'e'/18 'c'/19 {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ HalfReuse: </20 HalfReuse: & T5-sub_check/6 AsIs: e.eX#1/2 AsIs: >/1 ]] }
    refalrts::reinit_open_call( context[20] );
    refalrts::reinit_name( context[6], ref_T5m_subu_check.ref.function );
    refalrts::push_stack( context[1] );
    refalrts::push_stack( context[20] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[20];
    refalrts::splice_to_freelist_open( trash_prev, res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence();

  do {
    // # T5-sub_check0 e.idx
    // </0 & Mu/4 # T5-sub_check0/5 e.eX#1/2 >/1
    if( ! refalrts::ident_term(  ident_T5m_subu_check0, context[5] ) )
      continue;
    // closed e.eX#1 as range 2
    //DEBUG: e.eX#1: 2

    refalrts::reset_allocator();
    //TRASH: {REMOVED TILE} </0 {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ HalfReuse: </4 HalfReuse: & T5-sub_check0/5 AsIs: e.eX#1/2 AsIs: >/1 ]] }
    refalrts::reinit_open_call( context[4] );
    refalrts::reinit_name( context[5], ref_T5m_subu_check0.ref.function );
    refalrts::push_stack( context[1] );
    refalrts::push_stack( context[4] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[4];
    refalrts::splice_to_freelist_open( trash_prev, res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence();

  do {
    // ( 'T5-sub_check0' ) e.idx
    // </0 & Mu/4 (/5 'T'/9 '5'/10 '-'/11 's'/12 'u'/13 'b'/14 '_'/15 'c'/16 'h'/17 'e'/18 'c'/19 'k'/20 '0'/21 )/6 e.eX#1/2 >/1
    context[7] = 0;
    context[8] = 0;
    if( ! refalrts::brackets_term( context[7], context[8], context[5] ) )
      continue;
    context[9] = refalrts::char_left( 'T', context[7], context[8] );
    if( ! context[9] )
      continue;
    context[10] = refalrts::char_left( '5', context[7], context[8] );
    if( ! context[10] )
      continue;
    context[11] = refalrts::char_left( '-', context[7], context[8] );
    if( ! context[11] )
      continue;
    context[12] = refalrts::char_left( 's', context[7], context[8] );
    if( ! context[12] )
      continue;
    context[13] = refalrts::char_left( 'u', context[7], context[8] );
    if( ! context[13] )
      continue;
    context[14] = refalrts::char_left( 'b', context[7], context[8] );
    if( ! context[14] )
      continue;
    context[15] = refalrts::char_left( '_', context[7], context[8] );
    if( ! context[15] )
      continue;
    context[16] = refalrts::char_left( 'c', context[7], context[8] );
    if( ! context[16] )
      continue;
    context[17] = refalrts::char_left( 'h', context[7], context[8] );
    if( ! context[17] )
      continue;
    context[18] = refalrts::char_left( 'e', context[7], context[8] );
    if( ! context[18] )
      continue;
    context[19] = refalrts::char_left( 'c', context[7], context[8] );
    if( ! context[19] )
      continue;
    context[20] = refalrts::char_left( 'k', context[7], context[8] );
    if( ! context[20] )
      continue;
    context[21] = refalrts::char_left( '0', context[7], context[8] );
    if( ! context[21] )
      continue;
    if( ! refalrts::empty_seq( context[7], context[8] ) )
      continue;
    // closed e.eX#1 as range 2
    //DEBUG: e.eX#1: 2

    refalrts::reset_allocator();
    //TRASH: {REMOVED TILE} </0 & Mu/4 (/5 'T'/9 '5'/10 '-'/11 's'/12 'u'/13 'b'/14 '_'/15 'c'/16 'h'/17 'e'/18 'c'/19 'k'/20 {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ HalfReuse: </21 HalfReuse: & T5-sub_check0/6 AsIs: e.eX#1/2 AsIs: >/1 ]] }
    refalrts::reinit_open_call( context[21] );
    refalrts::reinit_name( context[6], ref_T5m_subu_check0.ref.function );
    refalrts::push_stack( context[1] );
    refalrts::push_stack( context[21] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[21];
    refalrts::splice_to_freelist_open( trash_prev, res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence();

  do {
    // # Substitute e.idx
    // </0 & Mu/4 # Substitute/5 e.eX#1/2 >/1
    if( ! refalrts::ident_term(  ident_Substitute, context[5] ) )
      continue;
    // closed e.eX#1 as range 2
    //DEBUG: e.eX#1: 2

    refalrts::reset_allocator();
    //TRASH: {REMOVED TILE} </0 {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ HalfReuse: </4 HalfReuse: & Substitute/5 AsIs: e.eX#1/2 AsIs: >/1 ]] }
    refalrts::reinit_open_call( context[4] );
    refalrts::reinit_name( context[5], ref_Substitute.ref.function );
    refalrts::push_stack( context[1] );
    refalrts::push_stack( context[4] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[4];
    refalrts::splice_to_freelist_open( trash_prev, res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence();

  do {
    // ( 'Substitute' ) e.idx
    // </0 & Mu/4 (/5 'S'/9 'u'/10 'b'/11 's'/12 't'/13 'i'/14 't'/15 'u'/16 't'/17 'e'/18 )/6 e.eX#1/2 >/1
    context[7] = 0;
    context[8] = 0;
    if( ! refalrts::brackets_term( context[7], context[8], context[5] ) )
      continue;
    context[9] = refalrts::char_left( 'S', context[7], context[8] );
    if( ! context[9] )
      continue;
    context[10] = refalrts::char_left( 'u', context[7], context[8] );
    if( ! context[10] )
      continue;
    context[11] = refalrts::char_left( 'b', context[7], context[8] );
    if( ! context[11] )
      continue;
    context[12] = refalrts::char_left( 's', context[7], context[8] );
    if( ! context[12] )
      continue;
    context[13] = refalrts::char_left( 't', context[7], context[8] );
    if( ! context[13] )
      continue;
    context[14] = refalrts::char_left( 'i', context[7], context[8] );
    if( ! context[14] )
      continue;
    context[15] = refalrts::char_left( 't', context[7], context[8] );
    if( ! context[15] )
      continue;
    context[16] = refalrts::char_left( 'u', context[7], context[8] );
    if( ! context[16] )
      continue;
    context[17] = refalrts::char_left( 't', context[7], context[8] );
    if( ! context[17] )
      continue;
    context[18] = refalrts::char_left( 'e', context[7], context[8] );
    if( ! context[18] )
      continue;
    if( ! refalrts::empty_seq( context[7], context[8] ) )
      continue;
    // closed e.eX#1 as range 2
    //DEBUG: e.eX#1: 2

    refalrts::reset_allocator();
    //TRASH: {REMOVED TILE} </0 & Mu/4 (/5 'S'/9 'u'/10 'b'/11 's'/12 't'/13 'i'/14 't'/15 'u'/16 't'/17 {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ HalfReuse: </18 HalfReuse: & Substitute/6 AsIs: e.eX#1/2 AsIs: >/1 ]] }
    refalrts::reinit_open_call( context[18] );
    refalrts::reinit_name( context[6], ref_Substitute.ref.function );
    refalrts::push_stack( context[1] );
    refalrts::push_stack( context[18] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[18];
    refalrts::splice_to_freelist_open( trash_prev, res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence();

  do {
    // # T6 e.idx
    // </0 & Mu/4 # T6/5 e.eX#1/2 >/1
    if( ! refalrts::ident_term(  ident_T6, context[5] ) )
      continue;
    // closed e.eX#1 as range 2
    //DEBUG: e.eX#1: 2

    refalrts::reset_allocator();
    //TRASH: {REMOVED TILE} </0 {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ HalfReuse: </4 HalfReuse: & T6/5 AsIs: e.eX#1/2 AsIs: >/1 ]] }
    refalrts::reinit_open_call( context[4] );
    refalrts::reinit_name( context[5], ref_T6.ref.function );
    refalrts::push_stack( context[1] );
    refalrts::push_stack( context[4] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[4];
    refalrts::splice_to_freelist_open( trash_prev, res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence();

  do {
    // ( 'T6' ) e.idx
    // </0 & Mu/4 (/5 'T'/9 '6'/10 )/6 e.eX#1/2 >/1
    context[7] = 0;
    context[8] = 0;
    if( ! refalrts::brackets_term( context[7], context[8], context[5] ) )
      continue;
    context[9] = refalrts::char_left( 'T', context[7], context[8] );
    if( ! context[9] )
      continue;
    context[10] = refalrts::char_left( '6', context[7], context[8] );
    if( ! context[10] )
      continue;
    if( ! refalrts::empty_seq( context[7], context[8] ) )
      continue;
    // closed e.eX#1 as range 2
    //DEBUG: e.eX#1: 2

    refalrts::reset_allocator();
    //TRASH: {REMOVED TILE} </0 & Mu/4 (/5 'T'/9 {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ HalfReuse: </10 HalfReuse: & T6/6 AsIs: e.eX#1/2 AsIs: >/1 ]] }
    refalrts::reinit_open_call( context[10] );
    refalrts::reinit_name( context[6], ref_T6.ref.function );
    refalrts::push_stack( context[1] );
    refalrts::push_stack( context[10] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[10];
    refalrts::splice_to_freelist_open( trash_prev, res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence();

  do {
    // # T6_check e.idx
    // </0 & Mu/4 # T6_check/5 e.eX#1/2 >/1
    if( ! refalrts::ident_term(  ident_T6u_check, context[5] ) )
      continue;
    // closed e.eX#1 as range 2
    //DEBUG: e.eX#1: 2

    refalrts::reset_allocator();
    //TRASH: {REMOVED TILE} </0 {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ HalfReuse: </4 HalfReuse: & T6_check/5 AsIs: e.eX#1/2 AsIs: >/1 ]] }
    refalrts::reinit_open_call( context[4] );
    refalrts::reinit_name( context[5], ref_T6u_check.ref.function );
    refalrts::push_stack( context[1] );
    refalrts::push_stack( context[4] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[4];
    refalrts::splice_to_freelist_open( trash_prev, res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence();

  do {
    // ( 'T6_check' ) e.idx
    // </0 & Mu/4 (/5 'T'/9 '6'/10 '_'/11 'c'/12 'h'/13 'e'/14 'c'/15 'k'/16 )/6 e.eX#1/2 >/1
    context[7] = 0;
    context[8] = 0;
    if( ! refalrts::brackets_term( context[7], context[8], context[5] ) )
      continue;
    context[9] = refalrts::char_left( 'T', context[7], context[8] );
    if( ! context[9] )
      continue;
    context[10] = refalrts::char_left( '6', context[7], context[8] );
    if( ! context[10] )
      continue;
    context[11] = refalrts::char_left( '_', context[7], context[8] );
    if( ! context[11] )
      continue;
    context[12] = refalrts::char_left( 'c', context[7], context[8] );
    if( ! context[12] )
      continue;
    context[13] = refalrts::char_left( 'h', context[7], context[8] );
    if( ! context[13] )
      continue;
    context[14] = refalrts::char_left( 'e', context[7], context[8] );
    if( ! context[14] )
      continue;
    context[15] = refalrts::char_left( 'c', context[7], context[8] );
    if( ! context[15] )
      continue;
    context[16] = refalrts::char_left( 'k', context[7], context[8] );
    if( ! context[16] )
      continue;
    if( ! refalrts::empty_seq( context[7], context[8] ) )
      continue;
    // closed e.eX#1 as range 2
    //DEBUG: e.eX#1: 2

    refalrts::reset_allocator();
    //TRASH: {REMOVED TILE} </0 & Mu/4 (/5 'T'/9 '6'/10 '_'/11 'c'/12 'h'/13 'e'/14 'c'/15 {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ HalfReuse: </16 HalfReuse: & T6_check/6 AsIs: e.eX#1/2 AsIs: >/1 ]] }
    refalrts::reinit_open_call( context[16] );
    refalrts::reinit_name( context[6], ref_T6u_check.ref.function );
    refalrts::push_stack( context[1] );
    refalrts::push_stack( context[16] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[16];
    refalrts::splice_to_freelist_open( trash_prev, res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence();

  do {
    // # T6_forward e.idx
    // </0 & Mu/4 # T6_forward/5 e.eX#1/2 >/1
    if( ! refalrts::ident_term(  ident_T6u_forward, context[5] ) )
      continue;
    // closed e.eX#1 as range 2
    //DEBUG: e.eX#1: 2

    refalrts::reset_allocator();
    //TRASH: {REMOVED TILE} </0 {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ HalfReuse: </4 HalfReuse: & T6_forward/5 AsIs: e.eX#1/2 AsIs: >/1 ]] }
    refalrts::reinit_open_call( context[4] );
    refalrts::reinit_name( context[5], ref_T6u_forward.ref.function );
    refalrts::push_stack( context[1] );
    refalrts::push_stack( context[4] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[4];
    refalrts::splice_to_freelist_open( trash_prev, res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence();

  do {
    // ( 'T6_forward' ) e.idx
    // </0 & Mu/4 (/5 'T'/9 '6'/10 '_'/11 'f'/12 'o'/13 'r'/14 'w'/15 'a'/16 'r'/17 'd'/18 )/6 e.eX#1/2 >/1
    context[7] = 0;
    context[8] = 0;
    if( ! refalrts::brackets_term( context[7], context[8], context[5] ) )
      continue;
    context[9] = refalrts::char_left( 'T', context[7], context[8] );
    if( ! context[9] )
      continue;
    context[10] = refalrts::char_left( '6', context[7], context[8] );
    if( ! context[10] )
      continue;
    context[11] = refalrts::char_left( '_', context[7], context[8] );
    if( ! context[11] )
      continue;
    context[12] = refalrts::char_left( 'f', context[7], context[8] );
    if( ! context[12] )
      continue;
    context[13] = refalrts::char_left( 'o', context[7], context[8] );
    if( ! context[13] )
      continue;
    context[14] = refalrts::char_left( 'r', context[7], context[8] );
    if( ! context[14] )
      continue;
    context[15] = refalrts::char_left( 'w', context[7], context[8] );
    if( ! context[15] )
      continue;
    context[16] = refalrts::char_left( 'a', context[7], context[8] );
    if( ! context[16] )
      continue;
    context[17] = refalrts::char_left( 'r', context[7], context[8] );
    if( ! context[17] )
      continue;
    context[18] = refalrts::char_left( 'd', context[7], context[8] );
    if( ! context[18] )
      continue;
    if( ! refalrts::empty_seq( context[7], context[8] ) )
      continue;
    // closed e.eX#1 as range 2
    //DEBUG: e.eX#1: 2

    refalrts::reset_allocator();
    //TRASH: {REMOVED TILE} </0 & Mu/4 (/5 'T'/9 '6'/10 '_'/11 'f'/12 'o'/13 'r'/14 'w'/15 'a'/16 'r'/17 {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ HalfReuse: </18 HalfReuse: & T6_forward/6 AsIs: e.eX#1/2 AsIs: >/1 ]] }
    refalrts::reinit_open_call( context[18] );
    refalrts::reinit_name( context[6], ref_T6u_forward.ref.function );
    refalrts::push_stack( context[1] );
    refalrts::push_stack( context[18] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[18];
    refalrts::splice_to_freelist_open( trash_prev, res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence();

  do {
    // # T6_next e.idx
    // </0 & Mu/4 # T6_next/5 e.eX#1/2 >/1
    if( ! refalrts::ident_term(  ident_T6u_next, context[5] ) )
      continue;
    // closed e.eX#1 as range 2
    //DEBUG: e.eX#1: 2

    refalrts::reset_allocator();
    //TRASH: {REMOVED TILE} </0 {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ HalfReuse: </4 HalfReuse: & T6_next/5 AsIs: e.eX#1/2 AsIs: >/1 ]] }
    refalrts::reinit_open_call( context[4] );
    refalrts::reinit_name( context[5], ref_T6u_next.ref.function );
    refalrts::push_stack( context[1] );
    refalrts::push_stack( context[4] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[4];
    refalrts::splice_to_freelist_open( trash_prev, res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence();

  do {
    // ( 'T6_next' ) e.idx
    // </0 & Mu/4 (/5 'T'/9 '6'/10 '_'/11 'n'/12 'e'/13 'x'/14 't'/15 )/6 e.eX#1/2 >/1
    context[7] = 0;
    context[8] = 0;
    if( ! refalrts::brackets_term( context[7], context[8], context[5] ) )
      continue;
    context[9] = refalrts::char_left( 'T', context[7], context[8] );
    if( ! context[9] )
      continue;
    context[10] = refalrts::char_left( '6', context[7], context[8] );
    if( ! context[10] )
      continue;
    context[11] = refalrts::char_left( '_', context[7], context[8] );
    if( ! context[11] )
      continue;
    context[12] = refalrts::char_left( 'n', context[7], context[8] );
    if( ! context[12] )
      continue;
    context[13] = refalrts::char_left( 'e', context[7], context[8] );
    if( ! context[13] )
      continue;
    context[14] = refalrts::char_left( 'x', context[7], context[8] );
    if( ! context[14] )
      continue;
    context[15] = refalrts::char_left( 't', context[7], context[8] );
    if( ! context[15] )
      continue;
    if( ! refalrts::empty_seq( context[7], context[8] ) )
      continue;
    // closed e.eX#1 as range 2
    //DEBUG: e.eX#1: 2

    refalrts::reset_allocator();
    //TRASH: {REMOVED TILE} </0 & Mu/4 (/5 'T'/9 '6'/10 '_'/11 'n'/12 'e'/13 'x'/14 {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ HalfReuse: </15 HalfReuse: & T6_next/6 AsIs: e.eX#1/2 AsIs: >/1 ]] }
    refalrts::reinit_open_call( context[15] );
    refalrts::reinit_name( context[6], ref_T6u_next.ref.function );
    refalrts::push_stack( context[1] );
    refalrts::push_stack( context[15] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[15];
    refalrts::splice_to_freelist_open( trash_prev, res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence();

  do {
    // # T6_check0 e.idx
    // </0 & Mu/4 # T6_check0/5 e.eX#1/2 >/1
    if( ! refalrts::ident_term(  ident_T6u_check0, context[5] ) )
      continue;
    // closed e.eX#1 as range 2
    //DEBUG: e.eX#1: 2

    refalrts::reset_allocator();
    //TRASH: {REMOVED TILE} </0 {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ HalfReuse: </4 HalfReuse: & T6_check0/5 AsIs: e.eX#1/2 AsIs: >/1 ]] }
    refalrts::reinit_open_call( context[4] );
    refalrts::reinit_name( context[5], ref_T6u_check0.ref.function );
    refalrts::push_stack( context[1] );
    refalrts::push_stack( context[4] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[4];
    refalrts::splice_to_freelist_open( trash_prev, res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence();

  do {
    // ( 'T6_check0' ) e.idx
    // </0 & Mu/4 (/5 'T'/9 '6'/10 '_'/11 'c'/12 'h'/13 'e'/14 'c'/15 'k'/16 '0'/17 )/6 e.eX#1/2 >/1
    context[7] = 0;
    context[8] = 0;
    if( ! refalrts::brackets_term( context[7], context[8], context[5] ) )
      continue;
    context[9] = refalrts::char_left( 'T', context[7], context[8] );
    if( ! context[9] )
      continue;
    context[10] = refalrts::char_left( '6', context[7], context[8] );
    if( ! context[10] )
      continue;
    context[11] = refalrts::char_left( '_', context[7], context[8] );
    if( ! context[11] )
      continue;
    context[12] = refalrts::char_left( 'c', context[7], context[8] );
    if( ! context[12] )
      continue;
    context[13] = refalrts::char_left( 'h', context[7], context[8] );
    if( ! context[13] )
      continue;
    context[14] = refalrts::char_left( 'e', context[7], context[8] );
    if( ! context[14] )
      continue;
    context[15] = refalrts::char_left( 'c', context[7], context[8] );
    if( ! context[15] )
      continue;
    context[16] = refalrts::char_left( 'k', context[7], context[8] );
    if( ! context[16] )
      continue;
    context[17] = refalrts::char_left( '0', context[7], context[8] );
    if( ! context[17] )
      continue;
    if( ! refalrts::empty_seq( context[7], context[8] ) )
      continue;
    // closed e.eX#1 as range 2
    //DEBUG: e.eX#1: 2

    refalrts::reset_allocator();
    //TRASH: {REMOVED TILE} </0 & Mu/4 (/5 'T'/9 '6'/10 '_'/11 'c'/12 'h'/13 'e'/14 'c'/15 'k'/16 {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ HalfReuse: </17 HalfReuse: & T6_check0/6 AsIs: e.eX#1/2 AsIs: >/1 ]] }
    refalrts::reinit_open_call( context[17] );
    refalrts::reinit_name( context[6], ref_T6u_check0.ref.function );
    refalrts::push_stack( context[1] );
    refalrts::push_stack( context[17] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[17];
    refalrts::splice_to_freelist_open( trash_prev, res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence();

  do {
    // # T6_cont e.idx
    // </0 & Mu/4 # T6_cont/5 e.eX#1/2 >/1
    if( ! refalrts::ident_term(  ident_T6u_cont, context[5] ) )
      continue;
    // closed e.eX#1 as range 2
    //DEBUG: e.eX#1: 2

    refalrts::reset_allocator();
    //TRASH: {REMOVED TILE} </0 {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ HalfReuse: </4 HalfReuse: & T6_cont/5 AsIs: e.eX#1/2 AsIs: >/1 ]] }
    refalrts::reinit_open_call( context[4] );
    refalrts::reinit_name( context[5], ref_T6u_cont.ref.function );
    refalrts::push_stack( context[1] );
    refalrts::push_stack( context[4] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[4];
    refalrts::splice_to_freelist_open( trash_prev, res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence();

  do {
    // ( 'T6_cont' ) e.idx
    // </0 & Mu/4 (/5 'T'/9 '6'/10 '_'/11 'c'/12 'o'/13 'n'/14 't'/15 )/6 e.eX#1/2 >/1
    context[7] = 0;
    context[8] = 0;
    if( ! refalrts::brackets_term( context[7], context[8], context[5] ) )
      continue;
    context[9] = refalrts::char_left( 'T', context[7], context[8] );
    if( ! context[9] )
      continue;
    context[10] = refalrts::char_left( '6', context[7], context[8] );
    if( ! context[10] )
      continue;
    context[11] = refalrts::char_left( '_', context[7], context[8] );
    if( ! context[11] )
      continue;
    context[12] = refalrts::char_left( 'c', context[7], context[8] );
    if( ! context[12] )
      continue;
    context[13] = refalrts::char_left( 'o', context[7], context[8] );
    if( ! context[13] )
      continue;
    context[14] = refalrts::char_left( 'n', context[7], context[8] );
    if( ! context[14] )
      continue;
    context[15] = refalrts::char_left( 't', context[7], context[8] );
    if( ! context[15] )
      continue;
    if( ! refalrts::empty_seq( context[7], context[8] ) )
      continue;
    // closed e.eX#1 as range 2
    //DEBUG: e.eX#1: 2

    refalrts::reset_allocator();
    //TRASH: {REMOVED TILE} </0 & Mu/4 (/5 'T'/9 '6'/10 '_'/11 'c'/12 'o'/13 'n'/14 {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ HalfReuse: </15 HalfReuse: & T6_cont/6 AsIs: e.eX#1/2 AsIs: >/1 ]] }
    refalrts::reinit_open_call( context[15] );
    refalrts::reinit_name( context[6], ref_T6u_cont.ref.function );
    refalrts::push_stack( context[1] );
    refalrts::push_stack( context[15] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[15];
    refalrts::splice_to_freelist_open( trash_prev, res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence();

  do {
    // # T7 e.idx
    // </0 & Mu/4 # T7/5 e.eX#1/2 >/1
    if( ! refalrts::ident_term(  ident_T7, context[5] ) )
      continue;
    // closed e.eX#1 as range 2
    //DEBUG: e.eX#1: 2

    refalrts::reset_allocator();
    //TRASH: {REMOVED TILE} </0 {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ HalfReuse: </4 HalfReuse: & T7/5 AsIs: e.eX#1/2 AsIs: >/1 ]] }
    refalrts::reinit_open_call( context[4] );
    refalrts::reinit_name( context[5], ref_T7.ref.function );
    refalrts::push_stack( context[1] );
    refalrts::push_stack( context[4] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[4];
    refalrts::splice_to_freelist_open( trash_prev, res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence();

  do {
    // ( 'T7' ) e.idx
    // </0 & Mu/4 (/5 'T'/9 '7'/10 )/6 e.eX#1/2 >/1
    context[7] = 0;
    context[8] = 0;
    if( ! refalrts::brackets_term( context[7], context[8], context[5] ) )
      continue;
    context[9] = refalrts::char_left( 'T', context[7], context[8] );
    if( ! context[9] )
      continue;
    context[10] = refalrts::char_left( '7', context[7], context[8] );
    if( ! context[10] )
      continue;
    if( ! refalrts::empty_seq( context[7], context[8] ) )
      continue;
    // closed e.eX#1 as range 2
    //DEBUG: e.eX#1: 2

    refalrts::reset_allocator();
    //TRASH: {REMOVED TILE} </0 & Mu/4 (/5 'T'/9 {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ HalfReuse: </10 HalfReuse: & T7/6 AsIs: e.eX#1/2 AsIs: >/1 ]] }
    refalrts::reinit_open_call( context[10] );
    refalrts::reinit_name( context[6], ref_T7.ref.function );
    refalrts::push_stack( context[1] );
    refalrts::push_stack( context[10] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[10];
    refalrts::splice_to_freelist_open( trash_prev, res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence();

  do {
    // # T7_check e.idx
    // </0 & Mu/4 # T7_check/5 e.eX#1/2 >/1
    if( ! refalrts::ident_term(  ident_T7u_check, context[5] ) )
      continue;
    // closed e.eX#1 as range 2
    //DEBUG: e.eX#1: 2

    refalrts::reset_allocator();
    //TRASH: {REMOVED TILE} </0 {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ HalfReuse: </4 HalfReuse: & T7_check/5 AsIs: e.eX#1/2 AsIs: >/1 ]] }
    refalrts::reinit_open_call( context[4] );
    refalrts::reinit_name( context[5], ref_T7u_check.ref.function );
    refalrts::push_stack( context[1] );
    refalrts::push_stack( context[4] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[4];
    refalrts::splice_to_freelist_open( trash_prev, res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence();

  do {
    // ( 'T7_check' ) e.idx
    // </0 & Mu/4 (/5 'T'/9 '7'/10 '_'/11 'c'/12 'h'/13 'e'/14 'c'/15 'k'/16 )/6 e.eX#1/2 >/1
    context[7] = 0;
    context[8] = 0;
    if( ! refalrts::brackets_term( context[7], context[8], context[5] ) )
      continue;
    context[9] = refalrts::char_left( 'T', context[7], context[8] );
    if( ! context[9] )
      continue;
    context[10] = refalrts::char_left( '7', context[7], context[8] );
    if( ! context[10] )
      continue;
    context[11] = refalrts::char_left( '_', context[7], context[8] );
    if( ! context[11] )
      continue;
    context[12] = refalrts::char_left( 'c', context[7], context[8] );
    if( ! context[12] )
      continue;
    context[13] = refalrts::char_left( 'h', context[7], context[8] );
    if( ! context[13] )
      continue;
    context[14] = refalrts::char_left( 'e', context[7], context[8] );
    if( ! context[14] )
      continue;
    context[15] = refalrts::char_left( 'c', context[7], context[8] );
    if( ! context[15] )
      continue;
    context[16] = refalrts::char_left( 'k', context[7], context[8] );
    if( ! context[16] )
      continue;
    if( ! refalrts::empty_seq( context[7], context[8] ) )
      continue;
    // closed e.eX#1 as range 2
    //DEBUG: e.eX#1: 2

    refalrts::reset_allocator();
    //TRASH: {REMOVED TILE} </0 & Mu/4 (/5 'T'/9 '7'/10 '_'/11 'c'/12 'h'/13 'e'/14 'c'/15 {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ HalfReuse: </16 HalfReuse: & T7_check/6 AsIs: e.eX#1/2 AsIs: >/1 ]] }
    refalrts::reinit_open_call( context[16] );
    refalrts::reinit_name( context[6], ref_T7u_check.ref.function );
    refalrts::push_stack( context[1] );
    refalrts::push_stack( context[16] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[16];
    refalrts::splice_to_freelist_open( trash_prev, res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence();

  do {
    // # T7_forward e.idx
    // </0 & Mu/4 # T7_forward/5 e.eX#1/2 >/1
    if( ! refalrts::ident_term(  ident_T7u_forward, context[5] ) )
      continue;
    // closed e.eX#1 as range 2
    //DEBUG: e.eX#1: 2

    refalrts::reset_allocator();
    //TRASH: {REMOVED TILE} </0 {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ HalfReuse: </4 HalfReuse: & T7_forward/5 AsIs: e.eX#1/2 AsIs: >/1 ]] }
    refalrts::reinit_open_call( context[4] );
    refalrts::reinit_name( context[5], ref_T7u_forward.ref.function );
    refalrts::push_stack( context[1] );
    refalrts::push_stack( context[4] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[4];
    refalrts::splice_to_freelist_open( trash_prev, res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence();

  do {
    // ( 'T7_forward' ) e.idx
    // </0 & Mu/4 (/5 'T'/9 '7'/10 '_'/11 'f'/12 'o'/13 'r'/14 'w'/15 'a'/16 'r'/17 'd'/18 )/6 e.eX#1/2 >/1
    context[7] = 0;
    context[8] = 0;
    if( ! refalrts::brackets_term( context[7], context[8], context[5] ) )
      continue;
    context[9] = refalrts::char_left( 'T', context[7], context[8] );
    if( ! context[9] )
      continue;
    context[10] = refalrts::char_left( '7', context[7], context[8] );
    if( ! context[10] )
      continue;
    context[11] = refalrts::char_left( '_', context[7], context[8] );
    if( ! context[11] )
      continue;
    context[12] = refalrts::char_left( 'f', context[7], context[8] );
    if( ! context[12] )
      continue;
    context[13] = refalrts::char_left( 'o', context[7], context[8] );
    if( ! context[13] )
      continue;
    context[14] = refalrts::char_left( 'r', context[7], context[8] );
    if( ! context[14] )
      continue;
    context[15] = refalrts::char_left( 'w', context[7], context[8] );
    if( ! context[15] )
      continue;
    context[16] = refalrts::char_left( 'a', context[7], context[8] );
    if( ! context[16] )
      continue;
    context[17] = refalrts::char_left( 'r', context[7], context[8] );
    if( ! context[17] )
      continue;
    context[18] = refalrts::char_left( 'd', context[7], context[8] );
    if( ! context[18] )
      continue;
    if( ! refalrts::empty_seq( context[7], context[8] ) )
      continue;
    // closed e.eX#1 as range 2
    //DEBUG: e.eX#1: 2

    refalrts::reset_allocator();
    //TRASH: {REMOVED TILE} </0 & Mu/4 (/5 'T'/9 '7'/10 '_'/11 'f'/12 'o'/13 'r'/14 'w'/15 'a'/16 'r'/17 {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ HalfReuse: </18 HalfReuse: & T7_forward/6 AsIs: e.eX#1/2 AsIs: >/1 ]] }
    refalrts::reinit_open_call( context[18] );
    refalrts::reinit_name( context[6], ref_T7u_forward.ref.function );
    refalrts::push_stack( context[1] );
    refalrts::push_stack( context[18] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[18];
    refalrts::splice_to_freelist_open( trash_prev, res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence();

  do {
    // # T7_next e.idx
    // </0 & Mu/4 # T7_next/5 e.eX#1/2 >/1
    if( ! refalrts::ident_term(  ident_T7u_next, context[5] ) )
      continue;
    // closed e.eX#1 as range 2
    //DEBUG: e.eX#1: 2

    refalrts::reset_allocator();
    //TRASH: {REMOVED TILE} </0 {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ HalfReuse: </4 HalfReuse: & T7_next/5 AsIs: e.eX#1/2 AsIs: >/1 ]] }
    refalrts::reinit_open_call( context[4] );
    refalrts::reinit_name( context[5], ref_T7u_next.ref.function );
    refalrts::push_stack( context[1] );
    refalrts::push_stack( context[4] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[4];
    refalrts::splice_to_freelist_open( trash_prev, res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence();

  do {
    // ( 'T7_next' ) e.idx
    // </0 & Mu/4 (/5 'T'/9 '7'/10 '_'/11 'n'/12 'e'/13 'x'/14 't'/15 )/6 e.eX#1/2 >/1
    context[7] = 0;
    context[8] = 0;
    if( ! refalrts::brackets_term( context[7], context[8], context[5] ) )
      continue;
    context[9] = refalrts::char_left( 'T', context[7], context[8] );
    if( ! context[9] )
      continue;
    context[10] = refalrts::char_left( '7', context[7], context[8] );
    if( ! context[10] )
      continue;
    context[11] = refalrts::char_left( '_', context[7], context[8] );
    if( ! context[11] )
      continue;
    context[12] = refalrts::char_left( 'n', context[7], context[8] );
    if( ! context[12] )
      continue;
    context[13] = refalrts::char_left( 'e', context[7], context[8] );
    if( ! context[13] )
      continue;
    context[14] = refalrts::char_left( 'x', context[7], context[8] );
    if( ! context[14] )
      continue;
    context[15] = refalrts::char_left( 't', context[7], context[8] );
    if( ! context[15] )
      continue;
    if( ! refalrts::empty_seq( context[7], context[8] ) )
      continue;
    // closed e.eX#1 as range 2
    //DEBUG: e.eX#1: 2

    refalrts::reset_allocator();
    //TRASH: {REMOVED TILE} </0 & Mu/4 (/5 'T'/9 '7'/10 '_'/11 'n'/12 'e'/13 'x'/14 {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ HalfReuse: </15 HalfReuse: & T7_next/6 AsIs: e.eX#1/2 AsIs: >/1 ]] }
    refalrts::reinit_open_call( context[15] );
    refalrts::reinit_name( context[6], ref_T7u_next.ref.function );
    refalrts::push_stack( context[1] );
    refalrts::push_stack( context[15] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[15];
    refalrts::splice_to_freelist_open( trash_prev, res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence();

  do {
    // # T7_check0 e.idx
    // </0 & Mu/4 # T7_check0/5 e.eX#1/2 >/1
    if( ! refalrts::ident_term(  ident_T7u_check0, context[5] ) )
      continue;
    // closed e.eX#1 as range 2
    //DEBUG: e.eX#1: 2

    refalrts::reset_allocator();
    //TRASH: {REMOVED TILE} </0 {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ HalfReuse: </4 HalfReuse: & T7_check0/5 AsIs: e.eX#1/2 AsIs: >/1 ]] }
    refalrts::reinit_open_call( context[4] );
    refalrts::reinit_name( context[5], ref_T7u_check0.ref.function );
    refalrts::push_stack( context[1] );
    refalrts::push_stack( context[4] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[4];
    refalrts::splice_to_freelist_open( trash_prev, res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence();

  do {
    // ( 'T7_check0' ) e.idx
    // </0 & Mu/4 (/5 'T'/9 '7'/10 '_'/11 'c'/12 'h'/13 'e'/14 'c'/15 'k'/16 '0'/17 )/6 e.eX#1/2 >/1
    context[7] = 0;
    context[8] = 0;
    if( ! refalrts::brackets_term( context[7], context[8], context[5] ) )
      continue;
    context[9] = refalrts::char_left( 'T', context[7], context[8] );
    if( ! context[9] )
      continue;
    context[10] = refalrts::char_left( '7', context[7], context[8] );
    if( ! context[10] )
      continue;
    context[11] = refalrts::char_left( '_', context[7], context[8] );
    if( ! context[11] )
      continue;
    context[12] = refalrts::char_left( 'c', context[7], context[8] );
    if( ! context[12] )
      continue;
    context[13] = refalrts::char_left( 'h', context[7], context[8] );
    if( ! context[13] )
      continue;
    context[14] = refalrts::char_left( 'e', context[7], context[8] );
    if( ! context[14] )
      continue;
    context[15] = refalrts::char_left( 'c', context[7], context[8] );
    if( ! context[15] )
      continue;
    context[16] = refalrts::char_left( 'k', context[7], context[8] );
    if( ! context[16] )
      continue;
    context[17] = refalrts::char_left( '0', context[7], context[8] );
    if( ! context[17] )
      continue;
    if( ! refalrts::empty_seq( context[7], context[8] ) )
      continue;
    // closed e.eX#1 as range 2
    //DEBUG: e.eX#1: 2

    refalrts::reset_allocator();
    //TRASH: {REMOVED TILE} </0 & Mu/4 (/5 'T'/9 '7'/10 '_'/11 'c'/12 'h'/13 'e'/14 'c'/15 'k'/16 {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ HalfReuse: </17 HalfReuse: & T7_check0/6 AsIs: e.eX#1/2 AsIs: >/1 ]] }
    refalrts::reinit_open_call( context[17] );
    refalrts::reinit_name( context[6], ref_T7u_check0.ref.function );
    refalrts::push_stack( context[1] );
    refalrts::push_stack( context[17] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[17];
    refalrts::splice_to_freelist_open( trash_prev, res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence();

  do {
    // # T7_cont e.idx
    // </0 & Mu/4 # T7_cont/5 e.eX#1/2 >/1
    if( ! refalrts::ident_term(  ident_T7u_cont, context[5] ) )
      continue;
    // closed e.eX#1 as range 2
    //DEBUG: e.eX#1: 2

    refalrts::reset_allocator();
    //TRASH: {REMOVED TILE} </0 {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ HalfReuse: </4 HalfReuse: & T7_cont/5 AsIs: e.eX#1/2 AsIs: >/1 ]] }
    refalrts::reinit_open_call( context[4] );
    refalrts::reinit_name( context[5], ref_T7u_cont.ref.function );
    refalrts::push_stack( context[1] );
    refalrts::push_stack( context[4] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[4];
    refalrts::splice_to_freelist_open( trash_prev, res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence();

  do {
    // ( 'T7_cont' ) e.idx
    // </0 & Mu/4 (/5 'T'/9 '7'/10 '_'/11 'c'/12 'o'/13 'n'/14 't'/15 )/6 e.eX#1/2 >/1
    context[7] = 0;
    context[8] = 0;
    if( ! refalrts::brackets_term( context[7], context[8], context[5] ) )
      continue;
    context[9] = refalrts::char_left( 'T', context[7], context[8] );
    if( ! context[9] )
      continue;
    context[10] = refalrts::char_left( '7', context[7], context[8] );
    if( ! context[10] )
      continue;
    context[11] = refalrts::char_left( '_', context[7], context[8] );
    if( ! context[11] )
      continue;
    context[12] = refalrts::char_left( 'c', context[7], context[8] );
    if( ! context[12] )
      continue;
    context[13] = refalrts::char_left( 'o', context[7], context[8] );
    if( ! context[13] )
      continue;
    context[14] = refalrts::char_left( 'n', context[7], context[8] );
    if( ! context[14] )
      continue;
    context[15] = refalrts::char_left( 't', context[7], context[8] );
    if( ! context[15] )
      continue;
    if( ! refalrts::empty_seq( context[7], context[8] ) )
      continue;
    // closed e.eX#1 as range 2
    //DEBUG: e.eX#1: 2

    refalrts::reset_allocator();
    //TRASH: {REMOVED TILE} </0 & Mu/4 (/5 'T'/9 '7'/10 '_'/11 'c'/12 'o'/13 'n'/14 {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ HalfReuse: </15 HalfReuse: & T7_cont/6 AsIs: e.eX#1/2 AsIs: >/1 ]] }
    refalrts::reinit_open_call( context[15] );
    refalrts::reinit_name( context[6], ref_T7u_cont.ref.function );
    refalrts::push_stack( context[1] );
    refalrts::push_stack( context[15] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[15];
    refalrts::splice_to_freelist_open( trash_prev, res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence();

  do {
    // # T0 e.idx
    // </0 & Mu/4 # T0/5 e.eX#1/2 >/1
    if( ! refalrts::ident_term(  ident_T0, context[5] ) )
      continue;
    // closed e.eX#1 as range 2
    //DEBUG: e.eX#1: 2

    refalrts::reset_allocator();
    //TRASH: {REMOVED TILE} </0 {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ HalfReuse: </4 HalfReuse: & T0/5 AsIs: e.eX#1/2 AsIs: >/1 ]] }
    refalrts::reinit_open_call( context[4] );
    refalrts::reinit_name( context[5], ref_T0.ref.function );
    refalrts::push_stack( context[1] );
    refalrts::push_stack( context[4] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[4];
    refalrts::splice_to_freelist_open( trash_prev, res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence();

  do {
    // ( 'T0' ) e.idx
    // </0 & Mu/4 (/5 'T'/9 '0'/10 )/6 e.eX#1/2 >/1
    context[7] = 0;
    context[8] = 0;
    if( ! refalrts::brackets_term( context[7], context[8], context[5] ) )
      continue;
    context[9] = refalrts::char_left( 'T', context[7], context[8] );
    if( ! context[9] )
      continue;
    context[10] = refalrts::char_left( '0', context[7], context[8] );
    if( ! context[10] )
      continue;
    if( ! refalrts::empty_seq( context[7], context[8] ) )
      continue;
    // closed e.eX#1 as range 2
    //DEBUG: e.eX#1: 2

    refalrts::reset_allocator();
    //TRASH: {REMOVED TILE} </0 & Mu/4 (/5 'T'/9 {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ HalfReuse: </10 HalfReuse: & T0/6 AsIs: e.eX#1/2 AsIs: >/1 ]] }
    refalrts::reinit_open_call( context[10] );
    refalrts::reinit_name( context[6], ref_T0.ref.function );
    refalrts::push_stack( context[1] );
    refalrts::push_stack( context[10] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[10];
    refalrts::splice_to_freelist_open( trash_prev, res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence();

  do {
    // # DoT0 e.idx
    // </0 & Mu/4 # DoT0/5 e.eX#1/2 >/1
    if( ! refalrts::ident_term(  ident_DoT0, context[5] ) )
      continue;
    // closed e.eX#1 as range 2
    //DEBUG: e.eX#1: 2

    refalrts::reset_allocator();
    //TRASH: {REMOVED TILE} </0 {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ HalfReuse: </4 HalfReuse: & DoT0/5 AsIs: e.eX#1/2 AsIs: >/1 ]] }
    refalrts::reinit_open_call( context[4] );
    refalrts::reinit_name( context[5], ref_DoT0.ref.function );
    refalrts::push_stack( context[1] );
    refalrts::push_stack( context[4] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[4];
    refalrts::splice_to_freelist_open( trash_prev, res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence();

  do {
    // ( 'DoT0' ) e.idx
    // </0 & Mu/4 (/5 'D'/9 'o'/10 'T'/11 '0'/12 )/6 e.eX#1/2 >/1
    context[7] = 0;
    context[8] = 0;
    if( ! refalrts::brackets_term( context[7], context[8], context[5] ) )
      continue;
    context[9] = refalrts::char_left( 'D', context[7], context[8] );
    if( ! context[9] )
      continue;
    context[10] = refalrts::char_left( 'o', context[7], context[8] );
    if( ! context[10] )
      continue;
    context[11] = refalrts::char_left( 'T', context[7], context[8] );
    if( ! context[11] )
      continue;
    context[12] = refalrts::char_left( '0', context[7], context[8] );
    if( ! context[12] )
      continue;
    if( ! refalrts::empty_seq( context[7], context[8] ) )
      continue;
    // closed e.eX#1 as range 2
    //DEBUG: e.eX#1: 2

    refalrts::reset_allocator();
    //TRASH: {REMOVED TILE} </0 & Mu/4 (/5 'D'/9 'o'/10 'T'/11 {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ HalfReuse: </12 HalfReuse: & DoT0/6 AsIs: e.eX#1/2 AsIs: >/1 ]] }
    refalrts::reinit_open_call( context[12] );
    refalrts::reinit_name( context[6], ref_DoT0.ref.function );
    refalrts::push_stack( context[1] );
    refalrts::push_stack( context[12] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[12];
    refalrts::splice_to_freelist_open( trash_prev, res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence();

  do {
    // # ConditionSubFunctions e.idx
    // </0 & Mu/4 # ConditionSubFunctions/5 e.eX#1/2 >/1
    if( ! refalrts::ident_term(  ident_ConditionSubFunctions, context[5] ) )
      continue;
    // closed e.eX#1 as range 2
    //DEBUG: e.eX#1: 2

    refalrts::reset_allocator();
    //TRASH: {REMOVED TILE} </0 {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ HalfReuse: </4 HalfReuse: & ConditionSubFunctions/5 AsIs: e.eX#1/2 AsIs: >/1 ]] }
    refalrts::reinit_open_call( context[4] );
    refalrts::reinit_name( context[5], ref_ConditionSubFunctions.ref.function );
    refalrts::push_stack( context[1] );
    refalrts::push_stack( context[4] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[4];
    refalrts::splice_to_freelist_open( trash_prev, res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence();

  do {
    // ( 'ConditionSubFunctions' ) e.idx
    // </0 & Mu/4 (/5 'C'/9 'o'/10 'n'/11 'd'/12 'i'/13 't'/14 'i'/15 'o'/16 'n'/17 'S'/18 'u'/19 'b'/20 'F'/21 'u'/22 'n'/23 'c'/24 't'/25 'i'/26 'o'/27 'n'/28 's'/29 )/6 e.eX#1/2 >/1
    context[7] = 0;
    context[8] = 0;
    if( ! refalrts::brackets_term( context[7], context[8], context[5] ) )
      continue;
    context[9] = refalrts::char_left( 'C', context[7], context[8] );
    if( ! context[9] )
      continue;
    context[10] = refalrts::char_left( 'o', context[7], context[8] );
    if( ! context[10] )
      continue;
    context[11] = refalrts::char_left( 'n', context[7], context[8] );
    if( ! context[11] )
      continue;
    context[12] = refalrts::char_left( 'd', context[7], context[8] );
    if( ! context[12] )
      continue;
    context[13] = refalrts::char_left( 'i', context[7], context[8] );
    if( ! context[13] )
      continue;
    context[14] = refalrts::char_left( 't', context[7], context[8] );
    if( ! context[14] )
      continue;
    context[15] = refalrts::char_left( 'i', context[7], context[8] );
    if( ! context[15] )
      continue;
    context[16] = refalrts::char_left( 'o', context[7], context[8] );
    if( ! context[16] )
      continue;
    context[17] = refalrts::char_left( 'n', context[7], context[8] );
    if( ! context[17] )
      continue;
    context[18] = refalrts::char_left( 'S', context[7], context[8] );
    if( ! context[18] )
      continue;
    context[19] = refalrts::char_left( 'u', context[7], context[8] );
    if( ! context[19] )
      continue;
    context[20] = refalrts::char_left( 'b', context[7], context[8] );
    if( ! context[20] )
      continue;
    context[21] = refalrts::char_left( 'F', context[7], context[8] );
    if( ! context[21] )
      continue;
    context[22] = refalrts::char_left( 'u', context[7], context[8] );
    if( ! context[22] )
      continue;
    context[23] = refalrts::char_left( 'n', context[7], context[8] );
    if( ! context[23] )
      continue;
    context[24] = refalrts::char_left( 'c', context[7], context[8] );
    if( ! context[24] )
      continue;
    context[25] = refalrts::char_left( 't', context[7], context[8] );
    if( ! context[25] )
      continue;
    context[26] = refalrts::char_left( 'i', context[7], context[8] );
    if( ! context[26] )
      continue;
    context[27] = refalrts::char_left( 'o', context[7], context[8] );
    if( ! context[27] )
      continue;
    context[28] = refalrts::char_left( 'n', context[7], context[8] );
    if( ! context[28] )
      continue;
    context[29] = refalrts::char_left( 's', context[7], context[8] );
    if( ! context[29] )
      continue;
    if( ! refalrts::empty_seq( context[7], context[8] ) )
      continue;
    // closed e.eX#1 as range 2
    //DEBUG: e.eX#1: 2

    refalrts::reset_allocator();
    //TRASH: {REMOVED TILE} </0 & Mu/4 (/5 'C'/9 'o'/10 'n'/11 'd'/12 'i'/13 't'/14 'i'/15 'o'/16 'n'/17 'S'/18 'u'/19 'b'/20 'F'/21 'u'/22 'n'/23 'c'/24 't'/25 'i'/26 'o'/27 'n'/28 {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ HalfReuse: </29 HalfReuse: & ConditionSubFunctions/6 AsIs: e.eX#1/2 AsIs: >/1 ]] }
    refalrts::reinit_open_call( context[29] );
    refalrts::reinit_name( context[6], ref_ConditionSubFunctions.ref.function );
    refalrts::push_stack( context[1] );
    refalrts::push_stack( context[29] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[29];
    refalrts::splice_to_freelist_open( trash_prev, res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence();

  do {
    // # ConditionSubFunctions_check e.idx
    // </0 & Mu/4 # ConditionSubFunctions_check/5 e.eX#1/2 >/1
    if( ! refalrts::ident_term(  ident_ConditionSubFunctionsu_check, context[5] ) )
      continue;
    // closed e.eX#1 as range 2
    //DEBUG: e.eX#1: 2

    refalrts::reset_allocator();
    //TRASH: {REMOVED TILE} </0 {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ HalfReuse: </4 HalfReuse: & ConditionSubFunctions_check/5 AsIs: e.eX#1/2 AsIs: >/1 ]] }
    refalrts::reinit_open_call( context[4] );
    refalrts::reinit_name( context[5], ref_ConditionSubFunctionsu_check.ref.function );
    refalrts::push_stack( context[1] );
    refalrts::push_stack( context[4] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[4];
    refalrts::splice_to_freelist_open( trash_prev, res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence();

  do {
    // ( 'ConditionSubFunctions_check' ) e.idx
    // </0 & Mu/4 (/5 'C'/9 'o'/10 'n'/11 'd'/12 'i'/13 't'/14 'i'/15 'o'/16 'n'/17 'S'/18 'u'/19 'b'/20 'F'/21 'u'/22 'n'/23 'c'/24 't'/25 'i'/26 'o'/27 'n'/28 's'/29 '_'/30 'c'/31 'h'/32 'e'/33 'c'/34 'k'/35 )/6 e.eX#1/2 >/1
    context[7] = 0;
    context[8] = 0;
    if( ! refalrts::brackets_term( context[7], context[8], context[5] ) )
      continue;
    context[9] = refalrts::char_left( 'C', context[7], context[8] );
    if( ! context[9] )
      continue;
    context[10] = refalrts::char_left( 'o', context[7], context[8] );
    if( ! context[10] )
      continue;
    context[11] = refalrts::char_left( 'n', context[7], context[8] );
    if( ! context[11] )
      continue;
    context[12] = refalrts::char_left( 'd', context[7], context[8] );
    if( ! context[12] )
      continue;
    context[13] = refalrts::char_left( 'i', context[7], context[8] );
    if( ! context[13] )
      continue;
    context[14] = refalrts::char_left( 't', context[7], context[8] );
    if( ! context[14] )
      continue;
    context[15] = refalrts::char_left( 'i', context[7], context[8] );
    if( ! context[15] )
      continue;
    context[16] = refalrts::char_left( 'o', context[7], context[8] );
    if( ! context[16] )
      continue;
    context[17] = refalrts::char_left( 'n', context[7], context[8] );
    if( ! context[17] )
      continue;
    context[18] = refalrts::char_left( 'S', context[7], context[8] );
    if( ! context[18] )
      continue;
    context[19] = refalrts::char_left( 'u', context[7], context[8] );
    if( ! context[19] )
      continue;
    context[20] = refalrts::char_left( 'b', context[7], context[8] );
    if( ! context[20] )
      continue;
    context[21] = refalrts::char_left( 'F', context[7], context[8] );
    if( ! context[21] )
      continue;
    context[22] = refalrts::char_left( 'u', context[7], context[8] );
    if( ! context[22] )
      continue;
    context[23] = refalrts::char_left( 'n', context[7], context[8] );
    if( ! context[23] )
      continue;
    context[24] = refalrts::char_left( 'c', context[7], context[8] );
    if( ! context[24] )
      continue;
    context[25] = refalrts::char_left( 't', context[7], context[8] );
    if( ! context[25] )
      continue;
    context[26] = refalrts::char_left( 'i', context[7], context[8] );
    if( ! context[26] )
      continue;
    context[27] = refalrts::char_left( 'o', context[7], context[8] );
    if( ! context[27] )
      continue;
    context[28] = refalrts::char_left( 'n', context[7], context[8] );
    if( ! context[28] )
      continue;
    context[29] = refalrts::char_left( 's', context[7], context[8] );
    if( ! context[29] )
      continue;
    context[30] = refalrts::char_left( '_', context[7], context[8] );
    if( ! context[30] )
      continue;
    context[31] = refalrts::char_left( 'c', context[7], context[8] );
    if( ! context[31] )
      continue;
    context[32] = refalrts::char_left( 'h', context[7], context[8] );
    if( ! context[32] )
      continue;
    context[33] = refalrts::char_left( 'e', context[7], context[8] );
    if( ! context[33] )
      continue;
    context[34] = refalrts::char_left( 'c', context[7], context[8] );
    if( ! context[34] )
      continue;
    context[35] = refalrts::char_left( 'k', context[7], context[8] );
    if( ! context[35] )
      continue;
    if( ! refalrts::empty_seq( context[7], context[8] ) )
      continue;
    // closed e.eX#1 as range 2
    //DEBUG: e.eX#1: 2

    refalrts::reset_allocator();
    //TRASH: {REMOVED TILE} </0 & Mu/4 (/5 'C'/9 'o'/10 'n'/11 'd'/12 'i'/13 't'/14 'i'/15 'o'/16 'n'/17 'S'/18 'u'/19 'b'/20 'F'/21 'u'/22 'n'/23 'c'/24 't'/25 'i'/26 'o'/27 'n'/28 's'/29 '_'/30 'c'/31 'h'/32 'e'/33 'c'/34 {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ HalfReuse: </35 HalfReuse: & ConditionSubFunctions_check/6 AsIs: e.eX#1/2 AsIs: >/1 ]] }
    refalrts::reinit_open_call( context[35] );
    refalrts::reinit_name( context[6], ref_ConditionSubFunctionsu_check.ref.function );
    refalrts::push_stack( context[1] );
    refalrts::push_stack( context[35] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[35];
    refalrts::splice_to_freelist_open( trash_prev, res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence();

  do {
    // # ConditionSubFunctions_check0 e.idx
    // </0 & Mu/4 # ConditionSubFunctions_check0/5 e.eX#1/2 >/1
    if( ! refalrts::ident_term(  ident_ConditionSubFunctionsu_check0, context[5] ) )
      continue;
    // closed e.eX#1 as range 2
    //DEBUG: e.eX#1: 2

    refalrts::reset_allocator();
    //TRASH: {REMOVED TILE} </0 {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ HalfReuse: </4 HalfReuse: & ConditionSubFunctions_check0/5 AsIs: e.eX#1/2 AsIs: >/1 ]] }
    refalrts::reinit_open_call( context[4] );
    refalrts::reinit_name( context[5], ref_ConditionSubFunctionsu_check0.ref.function );
    refalrts::push_stack( context[1] );
    refalrts::push_stack( context[4] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[4];
    refalrts::splice_to_freelist_open( trash_prev, res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence();

  do {
    // ( 'ConditionSubFunctions_check0' ) e.idx
    // </0 & Mu/4 (/5 'C'/9 'o'/10 'n'/11 'd'/12 'i'/13 't'/14 'i'/15 'o'/16 'n'/17 'S'/18 'u'/19 'b'/20 'F'/21 'u'/22 'n'/23 'c'/24 't'/25 'i'/26 'o'/27 'n'/28 's'/29 '_'/30 'c'/31 'h'/32 'e'/33 'c'/34 'k'/35 '0'/36 )/6 e.eX#1/2 >/1
    context[7] = 0;
    context[8] = 0;
    if( ! refalrts::brackets_term( context[7], context[8], context[5] ) )
      continue;
    context[9] = refalrts::char_left( 'C', context[7], context[8] );
    if( ! context[9] )
      continue;
    context[10] = refalrts::char_left( 'o', context[7], context[8] );
    if( ! context[10] )
      continue;
    context[11] = refalrts::char_left( 'n', context[7], context[8] );
    if( ! context[11] )
      continue;
    context[12] = refalrts::char_left( 'd', context[7], context[8] );
    if( ! context[12] )
      continue;
    context[13] = refalrts::char_left( 'i', context[7], context[8] );
    if( ! context[13] )
      continue;
    context[14] = refalrts::char_left( 't', context[7], context[8] );
    if( ! context[14] )
      continue;
    context[15] = refalrts::char_left( 'i', context[7], context[8] );
    if( ! context[15] )
      continue;
    context[16] = refalrts::char_left( 'o', context[7], context[8] );
    if( ! context[16] )
      continue;
    context[17] = refalrts::char_left( 'n', context[7], context[8] );
    if( ! context[17] )
      continue;
    context[18] = refalrts::char_left( 'S', context[7], context[8] );
    if( ! context[18] )
      continue;
    context[19] = refalrts::char_left( 'u', context[7], context[8] );
    if( ! context[19] )
      continue;
    context[20] = refalrts::char_left( 'b', context[7], context[8] );
    if( ! context[20] )
      continue;
    context[21] = refalrts::char_left( 'F', context[7], context[8] );
    if( ! context[21] )
      continue;
    context[22] = refalrts::char_left( 'u', context[7], context[8] );
    if( ! context[22] )
      continue;
    context[23] = refalrts::char_left( 'n', context[7], context[8] );
    if( ! context[23] )
      continue;
    context[24] = refalrts::char_left( 'c', context[7], context[8] );
    if( ! context[24] )
      continue;
    context[25] = refalrts::char_left( 't', context[7], context[8] );
    if( ! context[25] )
      continue;
    context[26] = refalrts::char_left( 'i', context[7], context[8] );
    if( ! context[26] )
      continue;
    context[27] = refalrts::char_left( 'o', context[7], context[8] );
    if( ! context[27] )
      continue;
    context[28] = refalrts::char_left( 'n', context[7], context[8] );
    if( ! context[28] )
      continue;
    context[29] = refalrts::char_left( 's', context[7], context[8] );
    if( ! context[29] )
      continue;
    context[30] = refalrts::char_left( '_', context[7], context[8] );
    if( ! context[30] )
      continue;
    context[31] = refalrts::char_left( 'c', context[7], context[8] );
    if( ! context[31] )
      continue;
    context[32] = refalrts::char_left( 'h', context[7], context[8] );
    if( ! context[32] )
      continue;
    context[33] = refalrts::char_left( 'e', context[7], context[8] );
    if( ! context[33] )
      continue;
    context[34] = refalrts::char_left( 'c', context[7], context[8] );
    if( ! context[34] )
      continue;
    context[35] = refalrts::char_left( 'k', context[7], context[8] );
    if( ! context[35] )
      continue;
    context[36] = refalrts::char_left( '0', context[7], context[8] );
    if( ! context[36] )
      continue;
    if( ! refalrts::empty_seq( context[7], context[8] ) )
      continue;
    // closed e.eX#1 as range 2
    //DEBUG: e.eX#1: 2

    refalrts::reset_allocator();
    //TRASH: {REMOVED TILE} </0 & Mu/4 (/5 'C'/9 'o'/10 'n'/11 'd'/12 'i'/13 't'/14 'i'/15 'o'/16 'n'/17 'S'/18 'u'/19 'b'/20 'F'/21 'u'/22 'n'/23 'c'/24 't'/25 'i'/26 'o'/27 'n'/28 's'/29 '_'/30 'c'/31 'h'/32 'e'/33 'c'/34 'k'/35 {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ HalfReuse: </36 HalfReuse: & ConditionSubFunctions_check0/6 AsIs: e.eX#1/2 AsIs: >/1 ]] }
    refalrts::reinit_open_call( context[36] );
    refalrts::reinit_name( context[6], ref_ConditionSubFunctionsu_check0.ref.function );
    refalrts::push_stack( context[1] );
    refalrts::push_stack( context[36] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[36];
    refalrts::splice_to_freelist_open( trash_prev, res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence();

  do {
    // # ConditionSubFunctions_check1 e.idx
    // </0 & Mu/4 # ConditionSubFunctions_check1/5 e.eX#1/2 >/1
    if( ! refalrts::ident_term(  ident_ConditionSubFunctionsu_check1, context[5] ) )
      continue;
    // closed e.eX#1 as range 2
    //DEBUG: e.eX#1: 2

    refalrts::reset_allocator();
    //TRASH: {REMOVED TILE} </0 {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ HalfReuse: </4 HalfReuse: & ConditionSubFunctions_check1/5 AsIs: e.eX#1/2 AsIs: >/1 ]] }
    refalrts::reinit_open_call( context[4] );
    refalrts::reinit_name( context[5], ref_ConditionSubFunctionsu_check1.ref.function );
    refalrts::push_stack( context[1] );
    refalrts::push_stack( context[4] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[4];
    refalrts::splice_to_freelist_open( trash_prev, res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence();

  do {
    // ( 'ConditionSubFunctions_check1' ) e.idx
    // </0 & Mu/4 (/5 'C'/9 'o'/10 'n'/11 'd'/12 'i'/13 't'/14 'i'/15 'o'/16 'n'/17 'S'/18 'u'/19 'b'/20 'F'/21 'u'/22 'n'/23 'c'/24 't'/25 'i'/26 'o'/27 'n'/28 's'/29 '_'/30 'c'/31 'h'/32 'e'/33 'c'/34 'k'/35 '1'/36 )/6 e.eX#1/2 >/1
    context[7] = 0;
    context[8] = 0;
    if( ! refalrts::brackets_term( context[7], context[8], context[5] ) )
      continue;
    context[9] = refalrts::char_left( 'C', context[7], context[8] );
    if( ! context[9] )
      continue;
    context[10] = refalrts::char_left( 'o', context[7], context[8] );
    if( ! context[10] )
      continue;
    context[11] = refalrts::char_left( 'n', context[7], context[8] );
    if( ! context[11] )
      continue;
    context[12] = refalrts::char_left( 'd', context[7], context[8] );
    if( ! context[12] )
      continue;
    context[13] = refalrts::char_left( 'i', context[7], context[8] );
    if( ! context[13] )
      continue;
    context[14] = refalrts::char_left( 't', context[7], context[8] );
    if( ! context[14] )
      continue;
    context[15] = refalrts::char_left( 'i', context[7], context[8] );
    if( ! context[15] )
      continue;
    context[16] = refalrts::char_left( 'o', context[7], context[8] );
    if( ! context[16] )
      continue;
    context[17] = refalrts::char_left( 'n', context[7], context[8] );
    if( ! context[17] )
      continue;
    context[18] = refalrts::char_left( 'S', context[7], context[8] );
    if( ! context[18] )
      continue;
    context[19] = refalrts::char_left( 'u', context[7], context[8] );
    if( ! context[19] )
      continue;
    context[20] = refalrts::char_left( 'b', context[7], context[8] );
    if( ! context[20] )
      continue;
    context[21] = refalrts::char_left( 'F', context[7], context[8] );
    if( ! context[21] )
      continue;
    context[22] = refalrts::char_left( 'u', context[7], context[8] );
    if( ! context[22] )
      continue;
    context[23] = refalrts::char_left( 'n', context[7], context[8] );
    if( ! context[23] )
      continue;
    context[24] = refalrts::char_left( 'c', context[7], context[8] );
    if( ! context[24] )
      continue;
    context[25] = refalrts::char_left( 't', context[7], context[8] );
    if( ! context[25] )
      continue;
    context[26] = refalrts::char_left( 'i', context[7], context[8] );
    if( ! context[26] )
      continue;
    context[27] = refalrts::char_left( 'o', context[7], context[8] );
    if( ! context[27] )
      continue;
    context[28] = refalrts::char_left( 'n', context[7], context[8] );
    if( ! context[28] )
      continue;
    context[29] = refalrts::char_left( 's', context[7], context[8] );
    if( ! context[29] )
      continue;
    context[30] = refalrts::char_left( '_', context[7], context[8] );
    if( ! context[30] )
      continue;
    context[31] = refalrts::char_left( 'c', context[7], context[8] );
    if( ! context[31] )
      continue;
    context[32] = refalrts::char_left( 'h', context[7], context[8] );
    if( ! context[32] )
      continue;
    context[33] = refalrts::char_left( 'e', context[7], context[8] );
    if( ! context[33] )
      continue;
    context[34] = refalrts::char_left( 'c', context[7], context[8] );
    if( ! context[34] )
      continue;
    context[35] = refalrts::char_left( 'k', context[7], context[8] );
    if( ! context[35] )
      continue;
    context[36] = refalrts::char_left( '1', context[7], context[8] );
    if( ! context[36] )
      continue;
    if( ! refalrts::empty_seq( context[7], context[8] ) )
      continue;
    // closed e.eX#1 as range 2
    //DEBUG: e.eX#1: 2

    refalrts::reset_allocator();
    //TRASH: {REMOVED TILE} </0 & Mu/4 (/5 'C'/9 'o'/10 'n'/11 'd'/12 'i'/13 't'/14 'i'/15 'o'/16 'n'/17 'S'/18 'u'/19 'b'/20 'F'/21 'u'/22 'n'/23 'c'/24 't'/25 'i'/26 'o'/27 'n'/28 's'/29 '_'/30 'c'/31 'h'/32 'e'/33 'c'/34 'k'/35 {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ HalfReuse: </36 HalfReuse: & ConditionSubFunctions_check1/6 AsIs: e.eX#1/2 AsIs: >/1 ]] }
    refalrts::reinit_open_call( context[36] );
    refalrts::reinit_name( context[6], ref_ConditionSubFunctionsu_check1.ref.function );
    refalrts::push_stack( context[1] );
    refalrts::push_stack( context[36] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[36];
    refalrts::splice_to_freelist_open( trash_prev, res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence();

  do {
    // # ConditionSubFunctions_check2 e.idx
    // </0 & Mu/4 # ConditionSubFunctions_check2/5 e.eX#1/2 >/1
    if( ! refalrts::ident_term(  ident_ConditionSubFunctionsu_check2, context[5] ) )
      continue;
    // closed e.eX#1 as range 2
    //DEBUG: e.eX#1: 2

    refalrts::reset_allocator();
    //TRASH: {REMOVED TILE} </0 {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ HalfReuse: </4 HalfReuse: & ConditionSubFunctions_check2/5 AsIs: e.eX#1/2 AsIs: >/1 ]] }
    refalrts::reinit_open_call( context[4] );
    refalrts::reinit_name( context[5], ref_ConditionSubFunctionsu_check2.ref.function );
    refalrts::push_stack( context[1] );
    refalrts::push_stack( context[4] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[4];
    refalrts::splice_to_freelist_open( trash_prev, res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence();

  do {
    // ( 'ConditionSubFunctions_check2' ) e.idx
    // </0 & Mu/4 (/5 'C'/9 'o'/10 'n'/11 'd'/12 'i'/13 't'/14 'i'/15 'o'/16 'n'/17 'S'/18 'u'/19 'b'/20 'F'/21 'u'/22 'n'/23 'c'/24 't'/25 'i'/26 'o'/27 'n'/28 's'/29 '_'/30 'c'/31 'h'/32 'e'/33 'c'/34 'k'/35 '2'/36 )/6 e.eX#1/2 >/1
    context[7] = 0;
    context[8] = 0;
    if( ! refalrts::brackets_term( context[7], context[8], context[5] ) )
      continue;
    context[9] = refalrts::char_left( 'C', context[7], context[8] );
    if( ! context[9] )
      continue;
    context[10] = refalrts::char_left( 'o', context[7], context[8] );
    if( ! context[10] )
      continue;
    context[11] = refalrts::char_left( 'n', context[7], context[8] );
    if( ! context[11] )
      continue;
    context[12] = refalrts::char_left( 'd', context[7], context[8] );
    if( ! context[12] )
      continue;
    context[13] = refalrts::char_left( 'i', context[7], context[8] );
    if( ! context[13] )
      continue;
    context[14] = refalrts::char_left( 't', context[7], context[8] );
    if( ! context[14] )
      continue;
    context[15] = refalrts::char_left( 'i', context[7], context[8] );
    if( ! context[15] )
      continue;
    context[16] = refalrts::char_left( 'o', context[7], context[8] );
    if( ! context[16] )
      continue;
    context[17] = refalrts::char_left( 'n', context[7], context[8] );
    if( ! context[17] )
      continue;
    context[18] = refalrts::char_left( 'S', context[7], context[8] );
    if( ! context[18] )
      continue;
    context[19] = refalrts::char_left( 'u', context[7], context[8] );
    if( ! context[19] )
      continue;
    context[20] = refalrts::char_left( 'b', context[7], context[8] );
    if( ! context[20] )
      continue;
    context[21] = refalrts::char_left( 'F', context[7], context[8] );
    if( ! context[21] )
      continue;
    context[22] = refalrts::char_left( 'u', context[7], context[8] );
    if( ! context[22] )
      continue;
    context[23] = refalrts::char_left( 'n', context[7], context[8] );
    if( ! context[23] )
      continue;
    context[24] = refalrts::char_left( 'c', context[7], context[8] );
    if( ! context[24] )
      continue;
    context[25] = refalrts::char_left( 't', context[7], context[8] );
    if( ! context[25] )
      continue;
    context[26] = refalrts::char_left( 'i', context[7], context[8] );
    if( ! context[26] )
      continue;
    context[27] = refalrts::char_left( 'o', context[7], context[8] );
    if( ! context[27] )
      continue;
    context[28] = refalrts::char_left( 'n', context[7], context[8] );
    if( ! context[28] )
      continue;
    context[29] = refalrts::char_left( 's', context[7], context[8] );
    if( ! context[29] )
      continue;
    context[30] = refalrts::char_left( '_', context[7], context[8] );
    if( ! context[30] )
      continue;
    context[31] = refalrts::char_left( 'c', context[7], context[8] );
    if( ! context[31] )
      continue;
    context[32] = refalrts::char_left( 'h', context[7], context[8] );
    if( ! context[32] )
      continue;
    context[33] = refalrts::char_left( 'e', context[7], context[8] );
    if( ! context[33] )
      continue;
    context[34] = refalrts::char_left( 'c', context[7], context[8] );
    if( ! context[34] )
      continue;
    context[35] = refalrts::char_left( 'k', context[7], context[8] );
    if( ! context[35] )
      continue;
    context[36] = refalrts::char_left( '2', context[7], context[8] );
    if( ! context[36] )
      continue;
    if( ! refalrts::empty_seq( context[7], context[8] ) )
      continue;
    // closed e.eX#1 as range 2
    //DEBUG: e.eX#1: 2

    refalrts::reset_allocator();
    //TRASH: {REMOVED TILE} </0 & Mu/4 (/5 'C'/9 'o'/10 'n'/11 'd'/12 'i'/13 't'/14 'i'/15 'o'/16 'n'/17 'S'/18 'u'/19 'b'/20 'F'/21 'u'/22 'n'/23 'c'/24 't'/25 'i'/26 'o'/27 'n'/28 's'/29 '_'/30 'c'/31 'h'/32 'e'/33 'c'/34 'k'/35 {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ HalfReuse: </36 HalfReuse: & ConditionSubFunctions_check2/6 AsIs: e.eX#1/2 AsIs: >/1 ]] }
    refalrts::reinit_open_call( context[36] );
    refalrts::reinit_name( context[6], ref_ConditionSubFunctionsu_check2.ref.function );
    refalrts::push_stack( context[1] );
    refalrts::push_stack( context[36] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[36];
    refalrts::splice_to_freelist_open( trash_prev, res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence();

  do {
    // # ConditionSubFunctions_check3 e.idx
    // </0 & Mu/4 # ConditionSubFunctions_check3/5 e.eX#1/2 >/1
    if( ! refalrts::ident_term(  ident_ConditionSubFunctionsu_check3, context[5] ) )
      continue;
    // closed e.eX#1 as range 2
    //DEBUG: e.eX#1: 2

    refalrts::reset_allocator();
    //TRASH: {REMOVED TILE} </0 {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ HalfReuse: </4 HalfReuse: & ConditionSubFunctions_check3/5 AsIs: e.eX#1/2 AsIs: >/1 ]] }
    refalrts::reinit_open_call( context[4] );
    refalrts::reinit_name( context[5], ref_ConditionSubFunctionsu_check3.ref.function );
    refalrts::push_stack( context[1] );
    refalrts::push_stack( context[4] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[4];
    refalrts::splice_to_freelist_open( trash_prev, res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence();

  do {
    // ( 'ConditionSubFunctions_check3' ) e.idx
    // </0 & Mu/4 (/5 'C'/9 'o'/10 'n'/11 'd'/12 'i'/13 't'/14 'i'/15 'o'/16 'n'/17 'S'/18 'u'/19 'b'/20 'F'/21 'u'/22 'n'/23 'c'/24 't'/25 'i'/26 'o'/27 'n'/28 's'/29 '_'/30 'c'/31 'h'/32 'e'/33 'c'/34 'k'/35 '3'/36 )/6 e.eX#1/2 >/1
    context[7] = 0;
    context[8] = 0;
    if( ! refalrts::brackets_term( context[7], context[8], context[5] ) )
      continue;
    context[9] = refalrts::char_left( 'C', context[7], context[8] );
    if( ! context[9] )
      continue;
    context[10] = refalrts::char_left( 'o', context[7], context[8] );
    if( ! context[10] )
      continue;
    context[11] = refalrts::char_left( 'n', context[7], context[8] );
    if( ! context[11] )
      continue;
    context[12] = refalrts::char_left( 'd', context[7], context[8] );
    if( ! context[12] )
      continue;
    context[13] = refalrts::char_left( 'i', context[7], context[8] );
    if( ! context[13] )
      continue;
    context[14] = refalrts::char_left( 't', context[7], context[8] );
    if( ! context[14] )
      continue;
    context[15] = refalrts::char_left( 'i', context[7], context[8] );
    if( ! context[15] )
      continue;
    context[16] = refalrts::char_left( 'o', context[7], context[8] );
    if( ! context[16] )
      continue;
    context[17] = refalrts::char_left( 'n', context[7], context[8] );
    if( ! context[17] )
      continue;
    context[18] = refalrts::char_left( 'S', context[7], context[8] );
    if( ! context[18] )
      continue;
    context[19] = refalrts::char_left( 'u', context[7], context[8] );
    if( ! context[19] )
      continue;
    context[20] = refalrts::char_left( 'b', context[7], context[8] );
    if( ! context[20] )
      continue;
    context[21] = refalrts::char_left( 'F', context[7], context[8] );
    if( ! context[21] )
      continue;
    context[22] = refalrts::char_left( 'u', context[7], context[8] );
    if( ! context[22] )
      continue;
    context[23] = refalrts::char_left( 'n', context[7], context[8] );
    if( ! context[23] )
      continue;
    context[24] = refalrts::char_left( 'c', context[7], context[8] );
    if( ! context[24] )
      continue;
    context[25] = refalrts::char_left( 't', context[7], context[8] );
    if( ! context[25] )
      continue;
    context[26] = refalrts::char_left( 'i', context[7], context[8] );
    if( ! context[26] )
      continue;
    context[27] = refalrts::char_left( 'o', context[7], context[8] );
    if( ! context[27] )
      continue;
    context[28] = refalrts::char_left( 'n', context[7], context[8] );
    if( ! context[28] )
      continue;
    context[29] = refalrts::char_left( 's', context[7], context[8] );
    if( ! context[29] )
      continue;
    context[30] = refalrts::char_left( '_', context[7], context[8] );
    if( ! context[30] )
      continue;
    context[31] = refalrts::char_left( 'c', context[7], context[8] );
    if( ! context[31] )
      continue;
    context[32] = refalrts::char_left( 'h', context[7], context[8] );
    if( ! context[32] )
      continue;
    context[33] = refalrts::char_left( 'e', context[7], context[8] );
    if( ! context[33] )
      continue;
    context[34] = refalrts::char_left( 'c', context[7], context[8] );
    if( ! context[34] )
      continue;
    context[35] = refalrts::char_left( 'k', context[7], context[8] );
    if( ! context[35] )
      continue;
    context[36] = refalrts::char_left( '3', context[7], context[8] );
    if( ! context[36] )
      continue;
    if( ! refalrts::empty_seq( context[7], context[8] ) )
      continue;
    // closed e.eX#1 as range 2
    //DEBUG: e.eX#1: 2

    refalrts::reset_allocator();
    //TRASH: {REMOVED TILE} </0 & Mu/4 (/5 'C'/9 'o'/10 'n'/11 'd'/12 'i'/13 't'/14 'i'/15 'o'/16 'n'/17 'S'/18 'u'/19 'b'/20 'F'/21 'u'/22 'n'/23 'c'/24 't'/25 'i'/26 'o'/27 'n'/28 's'/29 '_'/30 'c'/31 'h'/32 'e'/33 'c'/34 'k'/35 {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ HalfReuse: </36 HalfReuse: & ConditionSubFunctions_check3/6 AsIs: e.eX#1/2 AsIs: >/1 ]] }
    refalrts::reinit_open_call( context[36] );
    refalrts::reinit_name( context[6], ref_ConditionSubFunctionsu_check3.ref.function );
    refalrts::push_stack( context[1] );
    refalrts::push_stack( context[36] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[36];
    refalrts::splice_to_freelist_open( trash_prev, res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence();

  do {
    // # ConditionSubFunctions-Aux e.idx
    // </0 & Mu/4 # ConditionSubFunctions-Aux/5 e.eX#1/2 >/1
    if( ! refalrts::ident_term(  ident_ConditionSubFunctionsm_Aux, context[5] ) )
      continue;
    // closed e.eX#1 as range 2
    //DEBUG: e.eX#1: 2

    refalrts::reset_allocator();
    //TRASH: {REMOVED TILE} </0 {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ HalfReuse: </4 HalfReuse: & ConditionSubFunctions-Aux/5 AsIs: e.eX#1/2 AsIs: >/1 ]] }
    refalrts::reinit_open_call( context[4] );
    refalrts::reinit_name( context[5], ref_ConditionSubFunctionsm_Aux.ref.function );
    refalrts::push_stack( context[1] );
    refalrts::push_stack( context[4] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[4];
    refalrts::splice_to_freelist_open( trash_prev, res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence();

  do {
    // ( 'ConditionSubFunctions-Aux' ) e.idx
    // </0 & Mu/4 (/5 'C'/9 'o'/10 'n'/11 'd'/12 'i'/13 't'/14 'i'/15 'o'/16 'n'/17 'S'/18 'u'/19 'b'/20 'F'/21 'u'/22 'n'/23 'c'/24 't'/25 'i'/26 'o'/27 'n'/28 's'/29 '-'/30 'A'/31 'u'/32 'x'/33 )/6 e.eX#1/2 >/1
    context[7] = 0;
    context[8] = 0;
    if( ! refalrts::brackets_term( context[7], context[8], context[5] ) )
      continue;
    context[9] = refalrts::char_left( 'C', context[7], context[8] );
    if( ! context[9] )
      continue;
    context[10] = refalrts::char_left( 'o', context[7], context[8] );
    if( ! context[10] )
      continue;
    context[11] = refalrts::char_left( 'n', context[7], context[8] );
    if( ! context[11] )
      continue;
    context[12] = refalrts::char_left( 'd', context[7], context[8] );
    if( ! context[12] )
      continue;
    context[13] = refalrts::char_left( 'i', context[7], context[8] );
    if( ! context[13] )
      continue;
    context[14] = refalrts::char_left( 't', context[7], context[8] );
    if( ! context[14] )
      continue;
    context[15] = refalrts::char_left( 'i', context[7], context[8] );
    if( ! context[15] )
      continue;
    context[16] = refalrts::char_left( 'o', context[7], context[8] );
    if( ! context[16] )
      continue;
    context[17] = refalrts::char_left( 'n', context[7], context[8] );
    if( ! context[17] )
      continue;
    context[18] = refalrts::char_left( 'S', context[7], context[8] );
    if( ! context[18] )
      continue;
    context[19] = refalrts::char_left( 'u', context[7], context[8] );
    if( ! context[19] )
      continue;
    context[20] = refalrts::char_left( 'b', context[7], context[8] );
    if( ! context[20] )
      continue;
    context[21] = refalrts::char_left( 'F', context[7], context[8] );
    if( ! context[21] )
      continue;
    context[22] = refalrts::char_left( 'u', context[7], context[8] );
    if( ! context[22] )
      continue;
    context[23] = refalrts::char_left( 'n', context[7], context[8] );
    if( ! context[23] )
      continue;
    context[24] = refalrts::char_left( 'c', context[7], context[8] );
    if( ! context[24] )
      continue;
    context[25] = refalrts::char_left( 't', context[7], context[8] );
    if( ! context[25] )
      continue;
    context[26] = refalrts::char_left( 'i', context[7], context[8] );
    if( ! context[26] )
      continue;
    context[27] = refalrts::char_left( 'o', context[7], context[8] );
    if( ! context[27] )
      continue;
    context[28] = refalrts::char_left( 'n', context[7], context[8] );
    if( ! context[28] )
      continue;
    context[29] = refalrts::char_left( 's', context[7], context[8] );
    if( ! context[29] )
      continue;
    context[30] = refalrts::char_left( '-', context[7], context[8] );
    if( ! context[30] )
      continue;
    context[31] = refalrts::char_left( 'A', context[7], context[8] );
    if( ! context[31] )
      continue;
    context[32] = refalrts::char_left( 'u', context[7], context[8] );
    if( ! context[32] )
      continue;
    context[33] = refalrts::char_left( 'x', context[7], context[8] );
    if( ! context[33] )
      continue;
    if( ! refalrts::empty_seq( context[7], context[8] ) )
      continue;
    // closed e.eX#1 as range 2
    //DEBUG: e.eX#1: 2

    refalrts::reset_allocator();
    //TRASH: {REMOVED TILE} </0 & Mu/4 (/5 'C'/9 'o'/10 'n'/11 'd'/12 'i'/13 't'/14 'i'/15 'o'/16 'n'/17 'S'/18 'u'/19 'b'/20 'F'/21 'u'/22 'n'/23 'c'/24 't'/25 'i'/26 'o'/27 'n'/28 's'/29 '-'/30 'A'/31 'u'/32 {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ HalfReuse: </33 HalfReuse: & ConditionSubFunctions-Aux/6 AsIs: e.eX#1/2 AsIs: >/1 ]] }
    refalrts::reinit_open_call( context[33] );
    refalrts::reinit_name( context[6], ref_ConditionSubFunctionsm_Aux.ref.function );
    refalrts::push_stack( context[1] );
    refalrts::push_stack( context[33] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[33];
    refalrts::splice_to_freelist_open( trash_prev, res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence();

  do {
    // # ConditionSubFunctions-Aux_check e.idx
    // </0 & Mu/4 # ConditionSubFunctions-Aux_check/5 e.eX#1/2 >/1
    if( ! refalrts::ident_term(  ident_ConditionSubFunctionsm_Auxu_check, context[5] ) )
      continue;
    // closed e.eX#1 as range 2
    //DEBUG: e.eX#1: 2

    refalrts::reset_allocator();
    //TRASH: {REMOVED TILE} </0 {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ HalfReuse: </4 HalfReuse: & ConditionSubFunctions-Aux_check/5 AsIs: e.eX#1/2 AsIs: >/1 ]] }
    refalrts::reinit_open_call( context[4] );
    refalrts::reinit_name( context[5], ref_ConditionSubFunctionsm_Auxu_check.ref.function );
    refalrts::push_stack( context[1] );
    refalrts::push_stack( context[4] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[4];
    refalrts::splice_to_freelist_open( trash_prev, res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence();

  do {
    // ( 'ConditionSubFunctions-Aux_check' ) e.idx
    // </0 & Mu/4 (/5 'C'/9 'o'/10 'n'/11 'd'/12 'i'/13 't'/14 'i'/15 'o'/16 'n'/17 'S'/18 'u'/19 'b'/20 'F'/21 'u'/22 'n'/23 'c'/24 't'/25 'i'/26 'o'/27 'n'/28 's'/29 '-'/30 'A'/31 'u'/32 'x'/33 '_'/34 'c'/35 'h'/36 'e'/37 'c'/38 'k'/39 )/6 e.eX#1/2 >/1
    context[7] = 0;
    context[8] = 0;
    if( ! refalrts::brackets_term( context[7], context[8], context[5] ) )
      continue;
    context[9] = refalrts::char_left( 'C', context[7], context[8] );
    if( ! context[9] )
      continue;
    context[10] = refalrts::char_left( 'o', context[7], context[8] );
    if( ! context[10] )
      continue;
    context[11] = refalrts::char_left( 'n', context[7], context[8] );
    if( ! context[11] )
      continue;
    context[12] = refalrts::char_left( 'd', context[7], context[8] );
    if( ! context[12] )
      continue;
    context[13] = refalrts::char_left( 'i', context[7], context[8] );
    if( ! context[13] )
      continue;
    context[14] = refalrts::char_left( 't', context[7], context[8] );
    if( ! context[14] )
      continue;
    context[15] = refalrts::char_left( 'i', context[7], context[8] );
    if( ! context[15] )
      continue;
    context[16] = refalrts::char_left( 'o', context[7], context[8] );
    if( ! context[16] )
      continue;
    context[17] = refalrts::char_left( 'n', context[7], context[8] );
    if( ! context[17] )
      continue;
    context[18] = refalrts::char_left( 'S', context[7], context[8] );
    if( ! context[18] )
      continue;
    context[19] = refalrts::char_left( 'u', context[7], context[8] );
    if( ! context[19] )
      continue;
    context[20] = refalrts::char_left( 'b', context[7], context[8] );
    if( ! context[20] )
      continue;
    context[21] = refalrts::char_left( 'F', context[7], context[8] );
    if( ! context[21] )
      continue;
    context[22] = refalrts::char_left( 'u', context[7], context[8] );
    if( ! context[22] )
      continue;
    context[23] = refalrts::char_left( 'n', context[7], context[8] );
    if( ! context[23] )
      continue;
    context[24] = refalrts::char_left( 'c', context[7], context[8] );
    if( ! context[24] )
      continue;
    context[25] = refalrts::char_left( 't', context[7], context[8] );
    if( ! context[25] )
      continue;
    context[26] = refalrts::char_left( 'i', context[7], context[8] );
    if( ! context[26] )
      continue;
    context[27] = refalrts::char_left( 'o', context[7], context[8] );
    if( ! context[27] )
      continue;
    context[28] = refalrts::char_left( 'n', context[7], context[8] );
    if( ! context[28] )
      continue;
    context[29] = refalrts::char_left( 's', context[7], context[8] );
    if( ! context[29] )
      continue;
    context[30] = refalrts::char_left( '-', context[7], context[8] );
    if( ! context[30] )
      continue;
    context[31] = refalrts::char_left( 'A', context[7], context[8] );
    if( ! context[31] )
      continue;
    context[32] = refalrts::char_left( 'u', context[7], context[8] );
    if( ! context[32] )
      continue;
    context[33] = refalrts::char_left( 'x', context[7], context[8] );
    if( ! context[33] )
      continue;
    context[34] = refalrts::char_left( '_', context[7], context[8] );
    if( ! context[34] )
      continue;
    context[35] = refalrts::char_left( 'c', context[7], context[8] );
    if( ! context[35] )
      continue;
    context[36] = refalrts::char_left( 'h', context[7], context[8] );
    if( ! context[36] )
      continue;
    context[37] = refalrts::char_left( 'e', context[7], context[8] );
    if( ! context[37] )
      continue;
    context[38] = refalrts::char_left( 'c', context[7], context[8] );
    if( ! context[38] )
      continue;
    context[39] = refalrts::char_left( 'k', context[7], context[8] );
    if( ! context[39] )
      continue;
    if( ! refalrts::empty_seq( context[7], context[8] ) )
      continue;
    // closed e.eX#1 as range 2
    //DEBUG: e.eX#1: 2

    refalrts::reset_allocator();
    //TRASH: {REMOVED TILE} </0 & Mu/4 (/5 'C'/9 'o'/10 'n'/11 'd'/12 'i'/13 't'/14 'i'/15 'o'/16 'n'/17 'S'/18 'u'/19 'b'/20 'F'/21 'u'/22 'n'/23 'c'/24 't'/25 'i'/26 'o'/27 'n'/28 's'/29 '-'/30 'A'/31 'u'/32 'x'/33 '_'/34 'c'/35 'h'/36 'e'/37 'c'/38 {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ HalfReuse: </39 HalfReuse: & ConditionSubFunctions-Aux_check/6 AsIs: e.eX#1/2 AsIs: >/1 ]] }
    refalrts::reinit_open_call( context[39] );
    refalrts::reinit_name( context[6], ref_ConditionSubFunctionsm_Auxu_check.ref.function );
    refalrts::push_stack( context[1] );
    refalrts::push_stack( context[39] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[39];
    refalrts::splice_to_freelist_open( trash_prev, res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence();

  do {
    // # OpenEChain e.idx
    // </0 & Mu/4 # OpenEChain/5 e.eX#1/2 >/1
    if( ! refalrts::ident_term(  ident_OpenEChain, context[5] ) )
      continue;
    // closed e.eX#1 as range 2
    //DEBUG: e.eX#1: 2

    refalrts::reset_allocator();
    //TRASH: {REMOVED TILE} </0 {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ HalfReuse: </4 HalfReuse: & OpenEChain/5 AsIs: e.eX#1/2 AsIs: >/1 ]] }
    refalrts::reinit_open_call( context[4] );
    refalrts::reinit_name( context[5], ref_OpenEChain.ref.function );
    refalrts::push_stack( context[1] );
    refalrts::push_stack( context[4] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[4];
    refalrts::splice_to_freelist_open( trash_prev, res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence();

  do {
    // ( 'OpenEChain' ) e.idx
    // </0 & Mu/4 (/5 'O'/9 'p'/10 'e'/11 'n'/12 'E'/13 'C'/14 'h'/15 'a'/16 'i'/17 'n'/18 )/6 e.eX#1/2 >/1
    context[7] = 0;
    context[8] = 0;
    if( ! refalrts::brackets_term( context[7], context[8], context[5] ) )
      continue;
    context[9] = refalrts::char_left( 'O', context[7], context[8] );
    if( ! context[9] )
      continue;
    context[10] = refalrts::char_left( 'p', context[7], context[8] );
    if( ! context[10] )
      continue;
    context[11] = refalrts::char_left( 'e', context[7], context[8] );
    if( ! context[11] )
      continue;
    context[12] = refalrts::char_left( 'n', context[7], context[8] );
    if( ! context[12] )
      continue;
    context[13] = refalrts::char_left( 'E', context[7], context[8] );
    if( ! context[13] )
      continue;
    context[14] = refalrts::char_left( 'C', context[7], context[8] );
    if( ! context[14] )
      continue;
    context[15] = refalrts::char_left( 'h', context[7], context[8] );
    if( ! context[15] )
      continue;
    context[16] = refalrts::char_left( 'a', context[7], context[8] );
    if( ! context[16] )
      continue;
    context[17] = refalrts::char_left( 'i', context[7], context[8] );
    if( ! context[17] )
      continue;
    context[18] = refalrts::char_left( 'n', context[7], context[8] );
    if( ! context[18] )
      continue;
    if( ! refalrts::empty_seq( context[7], context[8] ) )
      continue;
    // closed e.eX#1 as range 2
    //DEBUG: e.eX#1: 2

    refalrts::reset_allocator();
    //TRASH: {REMOVED TILE} </0 & Mu/4 (/5 'O'/9 'p'/10 'e'/11 'n'/12 'E'/13 'C'/14 'h'/15 'a'/16 'i'/17 {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ HalfReuse: </18 HalfReuse: & OpenEChain/6 AsIs: e.eX#1/2 AsIs: >/1 ]] }
    refalrts::reinit_open_call( context[18] );
    refalrts::reinit_name( context[6], ref_OpenEChain.ref.function );
    refalrts::push_stack( context[1] );
    refalrts::push_stack( context[18] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[18];
    refalrts::splice_to_freelist_open( trash_prev, res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence();

  do {
    // # OpenEChain_check e.idx
    // </0 & Mu/4 # OpenEChain_check/5 e.eX#1/2 >/1
    if( ! refalrts::ident_term(  ident_OpenEChainu_check, context[5] ) )
      continue;
    // closed e.eX#1 as range 2
    //DEBUG: e.eX#1: 2

    refalrts::reset_allocator();
    //TRASH: {REMOVED TILE} </0 {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ HalfReuse: </4 HalfReuse: & OpenEChain_check/5 AsIs: e.eX#1/2 AsIs: >/1 ]] }
    refalrts::reinit_open_call( context[4] );
    refalrts::reinit_name( context[5], ref_OpenEChainu_check.ref.function );
    refalrts::push_stack( context[1] );
    refalrts::push_stack( context[4] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[4];
    refalrts::splice_to_freelist_open( trash_prev, res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence();

  do {
    // ( 'OpenEChain_check' ) e.idx
    // </0 & Mu/4 (/5 'O'/9 'p'/10 'e'/11 'n'/12 'E'/13 'C'/14 'h'/15 'a'/16 'i'/17 'n'/18 '_'/19 'c'/20 'h'/21 'e'/22 'c'/23 'k'/24 )/6 e.eX#1/2 >/1
    context[7] = 0;
    context[8] = 0;
    if( ! refalrts::brackets_term( context[7], context[8], context[5] ) )
      continue;
    context[9] = refalrts::char_left( 'O', context[7], context[8] );
    if( ! context[9] )
      continue;
    context[10] = refalrts::char_left( 'p', context[7], context[8] );
    if( ! context[10] )
      continue;
    context[11] = refalrts::char_left( 'e', context[7], context[8] );
    if( ! context[11] )
      continue;
    context[12] = refalrts::char_left( 'n', context[7], context[8] );
    if( ! context[12] )
      continue;
    context[13] = refalrts::char_left( 'E', context[7], context[8] );
    if( ! context[13] )
      continue;
    context[14] = refalrts::char_left( 'C', context[7], context[8] );
    if( ! context[14] )
      continue;
    context[15] = refalrts::char_left( 'h', context[7], context[8] );
    if( ! context[15] )
      continue;
    context[16] = refalrts::char_left( 'a', context[7], context[8] );
    if( ! context[16] )
      continue;
    context[17] = refalrts::char_left( 'i', context[7], context[8] );
    if( ! context[17] )
      continue;
    context[18] = refalrts::char_left( 'n', context[7], context[8] );
    if( ! context[18] )
      continue;
    context[19] = refalrts::char_left( '_', context[7], context[8] );
    if( ! context[19] )
      continue;
    context[20] = refalrts::char_left( 'c', context[7], context[8] );
    if( ! context[20] )
      continue;
    context[21] = refalrts::char_left( 'h', context[7], context[8] );
    if( ! context[21] )
      continue;
    context[22] = refalrts::char_left( 'e', context[7], context[8] );
    if( ! context[22] )
      continue;
    context[23] = refalrts::char_left( 'c', context[7], context[8] );
    if( ! context[23] )
      continue;
    context[24] = refalrts::char_left( 'k', context[7], context[8] );
    if( ! context[24] )
      continue;
    if( ! refalrts::empty_seq( context[7], context[8] ) )
      continue;
    // closed e.eX#1 as range 2
    //DEBUG: e.eX#1: 2

    refalrts::reset_allocator();
    //TRASH: {REMOVED TILE} </0 & Mu/4 (/5 'O'/9 'p'/10 'e'/11 'n'/12 'E'/13 'C'/14 'h'/15 'a'/16 'i'/17 'n'/18 '_'/19 'c'/20 'h'/21 'e'/22 'c'/23 {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ HalfReuse: </24 HalfReuse: & OpenEChain_check/6 AsIs: e.eX#1/2 AsIs: >/1 ]] }
    refalrts::reinit_open_call( context[24] );
    refalrts::reinit_name( context[6], ref_OpenEChainu_check.ref.function );
    refalrts::push_stack( context[1] );
    refalrts::push_stack( context[24] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[24];
    refalrts::splice_to_freelist_open( trash_prev, res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence();

  do {
    // # OpenEChain_cont e.idx
    // </0 & Mu/4 # OpenEChain_cont/5 e.eX#1/2 >/1
    if( ! refalrts::ident_term(  ident_OpenEChainu_cont, context[5] ) )
      continue;
    // closed e.eX#1 as range 2
    //DEBUG: e.eX#1: 2

    refalrts::reset_allocator();
    //TRASH: {REMOVED TILE} </0 {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ HalfReuse: </4 HalfReuse: & OpenEChain_cont/5 AsIs: e.eX#1/2 AsIs: >/1 ]] }
    refalrts::reinit_open_call( context[4] );
    refalrts::reinit_name( context[5], ref_OpenEChainu_cont.ref.function );
    refalrts::push_stack( context[1] );
    refalrts::push_stack( context[4] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[4];
    refalrts::splice_to_freelist_open( trash_prev, res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence();

  do {
    // ( 'OpenEChain_cont' ) e.idx
    // </0 & Mu/4 (/5 'O'/9 'p'/10 'e'/11 'n'/12 'E'/13 'C'/14 'h'/15 'a'/16 'i'/17 'n'/18 '_'/19 'c'/20 'o'/21 'n'/22 't'/23 )/6 e.eX#1/2 >/1
    context[7] = 0;
    context[8] = 0;
    if( ! refalrts::brackets_term( context[7], context[8], context[5] ) )
      continue;
    context[9] = refalrts::char_left( 'O', context[7], context[8] );
    if( ! context[9] )
      continue;
    context[10] = refalrts::char_left( 'p', context[7], context[8] );
    if( ! context[10] )
      continue;
    context[11] = refalrts::char_left( 'e', context[7], context[8] );
    if( ! context[11] )
      continue;
    context[12] = refalrts::char_left( 'n', context[7], context[8] );
    if( ! context[12] )
      continue;
    context[13] = refalrts::char_left( 'E', context[7], context[8] );
    if( ! context[13] )
      continue;
    context[14] = refalrts::char_left( 'C', context[7], context[8] );
    if( ! context[14] )
      continue;
    context[15] = refalrts::char_left( 'h', context[7], context[8] );
    if( ! context[15] )
      continue;
    context[16] = refalrts::char_left( 'a', context[7], context[8] );
    if( ! context[16] )
      continue;
    context[17] = refalrts::char_left( 'i', context[7], context[8] );
    if( ! context[17] )
      continue;
    context[18] = refalrts::char_left( 'n', context[7], context[8] );
    if( ! context[18] )
      continue;
    context[19] = refalrts::char_left( '_', context[7], context[8] );
    if( ! context[19] )
      continue;
    context[20] = refalrts::char_left( 'c', context[7], context[8] );
    if( ! context[20] )
      continue;
    context[21] = refalrts::char_left( 'o', context[7], context[8] );
    if( ! context[21] )
      continue;
    context[22] = refalrts::char_left( 'n', context[7], context[8] );
    if( ! context[22] )
      continue;
    context[23] = refalrts::char_left( 't', context[7], context[8] );
    if( ! context[23] )
      continue;
    if( ! refalrts::empty_seq( context[7], context[8] ) )
      continue;
    // closed e.eX#1 as range 2
    //DEBUG: e.eX#1: 2

    refalrts::reset_allocator();
    //TRASH: {REMOVED TILE} </0 & Mu/4 (/5 'O'/9 'p'/10 'e'/11 'n'/12 'E'/13 'C'/14 'h'/15 'a'/16 'i'/17 'n'/18 '_'/19 'c'/20 'o'/21 'n'/22 {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ HalfReuse: </23 HalfReuse: & OpenEChain_cont/6 AsIs: e.eX#1/2 AsIs: >/1 ]] }
    refalrts::reinit_open_call( context[23] );
    refalrts::reinit_name( context[6], ref_OpenEChainu_cont.ref.function );
    refalrts::push_stack( context[1] );
    refalrts::push_stack( context[23] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[23];
    refalrts::splice_to_freelist_open( trash_prev, res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence();

  do {
    // # OpenEChain_check0 e.idx
    // </0 & Mu/4 # OpenEChain_check0/5 e.eX#1/2 >/1
    if( ! refalrts::ident_term(  ident_OpenEChainu_check0, context[5] ) )
      continue;
    // closed e.eX#1 as range 2
    //DEBUG: e.eX#1: 2

    refalrts::reset_allocator();
    //TRASH: {REMOVED TILE} </0 {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ HalfReuse: </4 HalfReuse: & OpenEChain_check0/5 AsIs: e.eX#1/2 AsIs: >/1 ]] }
    refalrts::reinit_open_call( context[4] );
    refalrts::reinit_name( context[5], ref_OpenEChainu_check0.ref.function );
    refalrts::push_stack( context[1] );
    refalrts::push_stack( context[4] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[4];
    refalrts::splice_to_freelist_open( trash_prev, res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence();

  do {
    // ( 'OpenEChain_check0' ) e.idx
    // </0 & Mu/4 (/5 'O'/9 'p'/10 'e'/11 'n'/12 'E'/13 'C'/14 'h'/15 'a'/16 'i'/17 'n'/18 '_'/19 'c'/20 'h'/21 'e'/22 'c'/23 'k'/24 '0'/25 )/6 e.eX#1/2 >/1
    context[7] = 0;
    context[8] = 0;
    if( ! refalrts::brackets_term( context[7], context[8], context[5] ) )
      continue;
    context[9] = refalrts::char_left( 'O', context[7], context[8] );
    if( ! context[9] )
      continue;
    context[10] = refalrts::char_left( 'p', context[7], context[8] );
    if( ! context[10] )
      continue;
    context[11] = refalrts::char_left( 'e', context[7], context[8] );
    if( ! context[11] )
      continue;
    context[12] = refalrts::char_left( 'n', context[7], context[8] );
    if( ! context[12] )
      continue;
    context[13] = refalrts::char_left( 'E', context[7], context[8] );
    if( ! context[13] )
      continue;
    context[14] = refalrts::char_left( 'C', context[7], context[8] );
    if( ! context[14] )
      continue;
    context[15] = refalrts::char_left( 'h', context[7], context[8] );
    if( ! context[15] )
      continue;
    context[16] = refalrts::char_left( 'a', context[7], context[8] );
    if( ! context[16] )
      continue;
    context[17] = refalrts::char_left( 'i', context[7], context[8] );
    if( ! context[17] )
      continue;
    context[18] = refalrts::char_left( 'n', context[7], context[8] );
    if( ! context[18] )
      continue;
    context[19] = refalrts::char_left( '_', context[7], context[8] );
    if( ! context[19] )
      continue;
    context[20] = refalrts::char_left( 'c', context[7], context[8] );
    if( ! context[20] )
      continue;
    context[21] = refalrts::char_left( 'h', context[7], context[8] );
    if( ! context[21] )
      continue;
    context[22] = refalrts::char_left( 'e', context[7], context[8] );
    if( ! context[22] )
      continue;
    context[23] = refalrts::char_left( 'c', context[7], context[8] );
    if( ! context[23] )
      continue;
    context[24] = refalrts::char_left( 'k', context[7], context[8] );
    if( ! context[24] )
      continue;
    context[25] = refalrts::char_left( '0', context[7], context[8] );
    if( ! context[25] )
      continue;
    if( ! refalrts::empty_seq( context[7], context[8] ) )
      continue;
    // closed e.eX#1 as range 2
    //DEBUG: e.eX#1: 2

    refalrts::reset_allocator();
    //TRASH: {REMOVED TILE} </0 & Mu/4 (/5 'O'/9 'p'/10 'e'/11 'n'/12 'E'/13 'C'/14 'h'/15 'a'/16 'i'/17 'n'/18 '_'/19 'c'/20 'h'/21 'e'/22 'c'/23 'k'/24 {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ HalfReuse: </25 HalfReuse: & OpenEChain_check0/6 AsIs: e.eX#1/2 AsIs: >/1 ]] }
    refalrts::reinit_open_call( context[25] );
    refalrts::reinit_name( context[6], ref_OpenEChainu_check0.ref.function );
    refalrts::push_stack( context[1] );
    refalrts::push_stack( context[25] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[25];
    refalrts::splice_to_freelist_open( trash_prev, res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence();

  do {
    // # OpenEChain_check1 e.idx
    // </0 & Mu/4 # OpenEChain_check1/5 e.eX#1/2 >/1
    if( ! refalrts::ident_term(  ident_OpenEChainu_check1, context[5] ) )
      continue;
    // closed e.eX#1 as range 2
    //DEBUG: e.eX#1: 2

    refalrts::reset_allocator();
    //TRASH: {REMOVED TILE} </0 {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ HalfReuse: </4 HalfReuse: & OpenEChain_check1/5 AsIs: e.eX#1/2 AsIs: >/1 ]] }
    refalrts::reinit_open_call( context[4] );
    refalrts::reinit_name( context[5], ref_OpenEChainu_check1.ref.function );
    refalrts::push_stack( context[1] );
    refalrts::push_stack( context[4] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[4];
    refalrts::splice_to_freelist_open( trash_prev, res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence();

  do {
    // ( 'OpenEChain_check1' ) e.idx
    // </0 & Mu/4 (/5 'O'/9 'p'/10 'e'/11 'n'/12 'E'/13 'C'/14 'h'/15 'a'/16 'i'/17 'n'/18 '_'/19 'c'/20 'h'/21 'e'/22 'c'/23 'k'/24 '1'/25 )/6 e.eX#1/2 >/1
    context[7] = 0;
    context[8] = 0;
    if( ! refalrts::brackets_term( context[7], context[8], context[5] ) )
      continue;
    context[9] = refalrts::char_left( 'O', context[7], context[8] );
    if( ! context[9] )
      continue;
    context[10] = refalrts::char_left( 'p', context[7], context[8] );
    if( ! context[10] )
      continue;
    context[11] = refalrts::char_left( 'e', context[7], context[8] );
    if( ! context[11] )
      continue;
    context[12] = refalrts::char_left( 'n', context[7], context[8] );
    if( ! context[12] )
      continue;
    context[13] = refalrts::char_left( 'E', context[7], context[8] );
    if( ! context[13] )
      continue;
    context[14] = refalrts::char_left( 'C', context[7], context[8] );
    if( ! context[14] )
      continue;
    context[15] = refalrts::char_left( 'h', context[7], context[8] );
    if( ! context[15] )
      continue;
    context[16] = refalrts::char_left( 'a', context[7], context[8] );
    if( ! context[16] )
      continue;
    context[17] = refalrts::char_left( 'i', context[7], context[8] );
    if( ! context[17] )
      continue;
    context[18] = refalrts::char_left( 'n', context[7], context[8] );
    if( ! context[18] )
      continue;
    context[19] = refalrts::char_left( '_', context[7], context[8] );
    if( ! context[19] )
      continue;
    context[20] = refalrts::char_left( 'c', context[7], context[8] );
    if( ! context[20] )
      continue;
    context[21] = refalrts::char_left( 'h', context[7], context[8] );
    if( ! context[21] )
      continue;
    context[22] = refalrts::char_left( 'e', context[7], context[8] );
    if( ! context[22] )
      continue;
    context[23] = refalrts::char_left( 'c', context[7], context[8] );
    if( ! context[23] )
      continue;
    context[24] = refalrts::char_left( 'k', context[7], context[8] );
    if( ! context[24] )
      continue;
    context[25] = refalrts::char_left( '1', context[7], context[8] );
    if( ! context[25] )
      continue;
    if( ! refalrts::empty_seq( context[7], context[8] ) )
      continue;
    // closed e.eX#1 as range 2
    //DEBUG: e.eX#1: 2

    refalrts::reset_allocator();
    //TRASH: {REMOVED TILE} </0 & Mu/4 (/5 'O'/9 'p'/10 'e'/11 'n'/12 'E'/13 'C'/14 'h'/15 'a'/16 'i'/17 'n'/18 '_'/19 'c'/20 'h'/21 'e'/22 'c'/23 'k'/24 {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ HalfReuse: </25 HalfReuse: & OpenEChain_check1/6 AsIs: e.eX#1/2 AsIs: >/1 ]] }
    refalrts::reinit_open_call( context[25] );
    refalrts::reinit_name( context[6], ref_OpenEChainu_check1.ref.function );
    refalrts::push_stack( context[1] );
    refalrts::push_stack( context[25] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[25];
    refalrts::splice_to_freelist_open( trash_prev, res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence();

  do {
    // # OpenEChain_check2 e.idx
    // </0 & Mu/4 # OpenEChain_check2/5 e.eX#1/2 >/1
    if( ! refalrts::ident_term(  ident_OpenEChainu_check2, context[5] ) )
      continue;
    // closed e.eX#1 as range 2
    //DEBUG: e.eX#1: 2

    refalrts::reset_allocator();
    //TRASH: {REMOVED TILE} </0 {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ HalfReuse: </4 HalfReuse: & OpenEChain_check2/5 AsIs: e.eX#1/2 AsIs: >/1 ]] }
    refalrts::reinit_open_call( context[4] );
    refalrts::reinit_name( context[5], ref_OpenEChainu_check2.ref.function );
    refalrts::push_stack( context[1] );
    refalrts::push_stack( context[4] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[4];
    refalrts::splice_to_freelist_open( trash_prev, res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence();

  do {
    // ( 'OpenEChain_check2' ) e.idx
    // </0 & Mu/4 (/5 'O'/9 'p'/10 'e'/11 'n'/12 'E'/13 'C'/14 'h'/15 'a'/16 'i'/17 'n'/18 '_'/19 'c'/20 'h'/21 'e'/22 'c'/23 'k'/24 '2'/25 )/6 e.eX#1/2 >/1
    context[7] = 0;
    context[8] = 0;
    if( ! refalrts::brackets_term( context[7], context[8], context[5] ) )
      continue;
    context[9] = refalrts::char_left( 'O', context[7], context[8] );
    if( ! context[9] )
      continue;
    context[10] = refalrts::char_left( 'p', context[7], context[8] );
    if( ! context[10] )
      continue;
    context[11] = refalrts::char_left( 'e', context[7], context[8] );
    if( ! context[11] )
      continue;
    context[12] = refalrts::char_left( 'n', context[7], context[8] );
    if( ! context[12] )
      continue;
    context[13] = refalrts::char_left( 'E', context[7], context[8] );
    if( ! context[13] )
      continue;
    context[14] = refalrts::char_left( 'C', context[7], context[8] );
    if( ! context[14] )
      continue;
    context[15] = refalrts::char_left( 'h', context[7], context[8] );
    if( ! context[15] )
      continue;
    context[16] = refalrts::char_left( 'a', context[7], context[8] );
    if( ! context[16] )
      continue;
    context[17] = refalrts::char_left( 'i', context[7], context[8] );
    if( ! context[17] )
      continue;
    context[18] = refalrts::char_left( 'n', context[7], context[8] );
    if( ! context[18] )
      continue;
    context[19] = refalrts::char_left( '_', context[7], context[8] );
    if( ! context[19] )
      continue;
    context[20] = refalrts::char_left( 'c', context[7], context[8] );
    if( ! context[20] )
      continue;
    context[21] = refalrts::char_left( 'h', context[7], context[8] );
    if( ! context[21] )
      continue;
    context[22] = refalrts::char_left( 'e', context[7], context[8] );
    if( ! context[22] )
      continue;
    context[23] = refalrts::char_left( 'c', context[7], context[8] );
    if( ! context[23] )
      continue;
    context[24] = refalrts::char_left( 'k', context[7], context[8] );
    if( ! context[24] )
      continue;
    context[25] = refalrts::char_left( '2', context[7], context[8] );
    if( ! context[25] )
      continue;
    if( ! refalrts::empty_seq( context[7], context[8] ) )
      continue;
    // closed e.eX#1 as range 2
    //DEBUG: e.eX#1: 2

    refalrts::reset_allocator();
    //TRASH: {REMOVED TILE} </0 & Mu/4 (/5 'O'/9 'p'/10 'e'/11 'n'/12 'E'/13 'C'/14 'h'/15 'a'/16 'i'/17 'n'/18 '_'/19 'c'/20 'h'/21 'e'/22 'c'/23 'k'/24 {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ HalfReuse: </25 HalfReuse: & OpenEChain_check2/6 AsIs: e.eX#1/2 AsIs: >/1 ]] }
    refalrts::reinit_open_call( context[25] );
    refalrts::reinit_name( context[6], ref_OpenEChainu_check2.ref.function );
    refalrts::push_stack( context[1] );
    refalrts::push_stack( context[25] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[25];
    refalrts::splice_to_freelist_open( trash_prev, res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence();

  do {
    // # DoOpenEChain e.idx
    // </0 & Mu/4 # DoOpenEChain/5 e.eX#1/2 >/1
    if( ! refalrts::ident_term(  ident_DoOpenEChain, context[5] ) )
      continue;
    // closed e.eX#1 as range 2
    //DEBUG: e.eX#1: 2

    refalrts::reset_allocator();
    //TRASH: {REMOVED TILE} </0 {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ HalfReuse: </4 HalfReuse: & DoOpenEChain/5 AsIs: e.eX#1/2 AsIs: >/1 ]] }
    refalrts::reinit_open_call( context[4] );
    refalrts::reinit_name( context[5], ref_DoOpenEChain.ref.function );
    refalrts::push_stack( context[1] );
    refalrts::push_stack( context[4] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[4];
    refalrts::splice_to_freelist_open( trash_prev, res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence();

  do {
    // ( 'DoOpenEChain' ) e.idx
    // </0 & Mu/4 (/5 'D'/9 'o'/10 'O'/11 'p'/12 'e'/13 'n'/14 'E'/15 'C'/16 'h'/17 'a'/18 'i'/19 'n'/20 )/6 e.eX#1/2 >/1
    context[7] = 0;
    context[8] = 0;
    if( ! refalrts::brackets_term( context[7], context[8], context[5] ) )
      continue;
    context[9] = refalrts::char_left( 'D', context[7], context[8] );
    if( ! context[9] )
      continue;
    context[10] = refalrts::char_left( 'o', context[7], context[8] );
    if( ! context[10] )
      continue;
    context[11] = refalrts::char_left( 'O', context[7], context[8] );
    if( ! context[11] )
      continue;
    context[12] = refalrts::char_left( 'p', context[7], context[8] );
    if( ! context[12] )
      continue;
    context[13] = refalrts::char_left( 'e', context[7], context[8] );
    if( ! context[13] )
      continue;
    context[14] = refalrts::char_left( 'n', context[7], context[8] );
    if( ! context[14] )
      continue;
    context[15] = refalrts::char_left( 'E', context[7], context[8] );
    if( ! context[15] )
      continue;
    context[16] = refalrts::char_left( 'C', context[7], context[8] );
    if( ! context[16] )
      continue;
    context[17] = refalrts::char_left( 'h', context[7], context[8] );
    if( ! context[17] )
      continue;
    context[18] = refalrts::char_left( 'a', context[7], context[8] );
    if( ! context[18] )
      continue;
    context[19] = refalrts::char_left( 'i', context[7], context[8] );
    if( ! context[19] )
      continue;
    context[20] = refalrts::char_left( 'n', context[7], context[8] );
    if( ! context[20] )
      continue;
    if( ! refalrts::empty_seq( context[7], context[8] ) )
      continue;
    // closed e.eX#1 as range 2
    //DEBUG: e.eX#1: 2

    refalrts::reset_allocator();
    //TRASH: {REMOVED TILE} </0 & Mu/4 (/5 'D'/9 'o'/10 'O'/11 'p'/12 'e'/13 'n'/14 'E'/15 'C'/16 'h'/17 'a'/18 'i'/19 {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ HalfReuse: </20 HalfReuse: & DoOpenEChain/6 AsIs: e.eX#1/2 AsIs: >/1 ]] }
    refalrts::reinit_open_call( context[20] );
    refalrts::reinit_name( context[6], ref_DoOpenEChain.ref.function );
    refalrts::push_stack( context[1] );
    refalrts::push_stack( context[20] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[20];
    refalrts::splice_to_freelist_open( trash_prev, res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence();

  do {
    // # DoOpenEChain_check e.idx
    // </0 & Mu/4 # DoOpenEChain_check/5 e.eX#1/2 >/1
    if( ! refalrts::ident_term(  ident_DoOpenEChainu_check, context[5] ) )
      continue;
    // closed e.eX#1 as range 2
    //DEBUG: e.eX#1: 2

    refalrts::reset_allocator();
    //TRASH: {REMOVED TILE} </0 {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ HalfReuse: </4 HalfReuse: & DoOpenEChain_check/5 AsIs: e.eX#1/2 AsIs: >/1 ]] }
    refalrts::reinit_open_call( context[4] );
    refalrts::reinit_name( context[5], ref_DoOpenEChainu_check.ref.function );
    refalrts::push_stack( context[1] );
    refalrts::push_stack( context[4] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[4];
    refalrts::splice_to_freelist_open( trash_prev, res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence();

  do {
    // ( 'DoOpenEChain_check' ) e.idx
    // </0 & Mu/4 (/5 'D'/9 'o'/10 'O'/11 'p'/12 'e'/13 'n'/14 'E'/15 'C'/16 'h'/17 'a'/18 'i'/19 'n'/20 '_'/21 'c'/22 'h'/23 'e'/24 'c'/25 'k'/26 )/6 e.eX#1/2 >/1
    context[7] = 0;
    context[8] = 0;
    if( ! refalrts::brackets_term( context[7], context[8], context[5] ) )
      continue;
    context[9] = refalrts::char_left( 'D', context[7], context[8] );
    if( ! context[9] )
      continue;
    context[10] = refalrts::char_left( 'o', context[7], context[8] );
    if( ! context[10] )
      continue;
    context[11] = refalrts::char_left( 'O', context[7], context[8] );
    if( ! context[11] )
      continue;
    context[12] = refalrts::char_left( 'p', context[7], context[8] );
    if( ! context[12] )
      continue;
    context[13] = refalrts::char_left( 'e', context[7], context[8] );
    if( ! context[13] )
      continue;
    context[14] = refalrts::char_left( 'n', context[7], context[8] );
    if( ! context[14] )
      continue;
    context[15] = refalrts::char_left( 'E', context[7], context[8] );
    if( ! context[15] )
      continue;
    context[16] = refalrts::char_left( 'C', context[7], context[8] );
    if( ! context[16] )
      continue;
    context[17] = refalrts::char_left( 'h', context[7], context[8] );
    if( ! context[17] )
      continue;
    context[18] = refalrts::char_left( 'a', context[7], context[8] );
    if( ! context[18] )
      continue;
    context[19] = refalrts::char_left( 'i', context[7], context[8] );
    if( ! context[19] )
      continue;
    context[20] = refalrts::char_left( 'n', context[7], context[8] );
    if( ! context[20] )
      continue;
    context[21] = refalrts::char_left( '_', context[7], context[8] );
    if( ! context[21] )
      continue;
    context[22] = refalrts::char_left( 'c', context[7], context[8] );
    if( ! context[22] )
      continue;
    context[23] = refalrts::char_left( 'h', context[7], context[8] );
    if( ! context[23] )
      continue;
    context[24] = refalrts::char_left( 'e', context[7], context[8] );
    if( ! context[24] )
      continue;
    context[25] = refalrts::char_left( 'c', context[7], context[8] );
    if( ! context[25] )
      continue;
    context[26] = refalrts::char_left( 'k', context[7], context[8] );
    if( ! context[26] )
      continue;
    if( ! refalrts::empty_seq( context[7], context[8] ) )
      continue;
    // closed e.eX#1 as range 2
    //DEBUG: e.eX#1: 2

    refalrts::reset_allocator();
    //TRASH: {REMOVED TILE} </0 & Mu/4 (/5 'D'/9 'o'/10 'O'/11 'p'/12 'e'/13 'n'/14 'E'/15 'C'/16 'h'/17 'a'/18 'i'/19 'n'/20 '_'/21 'c'/22 'h'/23 'e'/24 'c'/25 {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ HalfReuse: </26 HalfReuse: & DoOpenEChain_check/6 AsIs: e.eX#1/2 AsIs: >/1 ]] }
    refalrts::reinit_open_call( context[26] );
    refalrts::reinit_name( context[6], ref_DoOpenEChainu_check.ref.function );
    refalrts::push_stack( context[1] );
    refalrts::push_stack( context[26] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[26];
    refalrts::splice_to_freelist_open( trash_prev, res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence();

  do {
    // # DoOpenEChain_cont e.idx
    // </0 & Mu/4 # DoOpenEChain_cont/5 e.eX#1/2 >/1
    if( ! refalrts::ident_term(  ident_DoOpenEChainu_cont, context[5] ) )
      continue;
    // closed e.eX#1 as range 2
    //DEBUG: e.eX#1: 2

    refalrts::reset_allocator();
    //TRASH: {REMOVED TILE} </0 {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ HalfReuse: </4 HalfReuse: & DoOpenEChain_cont/5 AsIs: e.eX#1/2 AsIs: >/1 ]] }
    refalrts::reinit_open_call( context[4] );
    refalrts::reinit_name( context[5], ref_DoOpenEChainu_cont.ref.function );
    refalrts::push_stack( context[1] );
    refalrts::push_stack( context[4] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[4];
    refalrts::splice_to_freelist_open( trash_prev, res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence();

  do {
    // ( 'DoOpenEChain_cont' ) e.idx
    // </0 & Mu/4 (/5 'D'/9 'o'/10 'O'/11 'p'/12 'e'/13 'n'/14 'E'/15 'C'/16 'h'/17 'a'/18 'i'/19 'n'/20 '_'/21 'c'/22 'o'/23 'n'/24 't'/25 )/6 e.eX#1/2 >/1
    context[7] = 0;
    context[8] = 0;
    if( ! refalrts::brackets_term( context[7], context[8], context[5] ) )
      continue;
    context[9] = refalrts::char_left( 'D', context[7], context[8] );
    if( ! context[9] )
      continue;
    context[10] = refalrts::char_left( 'o', context[7], context[8] );
    if( ! context[10] )
      continue;
    context[11] = refalrts::char_left( 'O', context[7], context[8] );
    if( ! context[11] )
      continue;
    context[12] = refalrts::char_left( 'p', context[7], context[8] );
    if( ! context[12] )
      continue;
    context[13] = refalrts::char_left( 'e', context[7], context[8] );
    if( ! context[13] )
      continue;
    context[14] = refalrts::char_left( 'n', context[7], context[8] );
    if( ! context[14] )
      continue;
    context[15] = refalrts::char_left( 'E', context[7], context[8] );
    if( ! context[15] )
      continue;
    context[16] = refalrts::char_left( 'C', context[7], context[8] );
    if( ! context[16] )
      continue;
    context[17] = refalrts::char_left( 'h', context[7], context[8] );
    if( ! context[17] )
      continue;
    context[18] = refalrts::char_left( 'a', context[7], context[8] );
    if( ! context[18] )
      continue;
    context[19] = refalrts::char_left( 'i', context[7], context[8] );
    if( ! context[19] )
      continue;
    context[20] = refalrts::char_left( 'n', context[7], context[8] );
    if( ! context[20] )
      continue;
    context[21] = refalrts::char_left( '_', context[7], context[8] );
    if( ! context[21] )
      continue;
    context[22] = refalrts::char_left( 'c', context[7], context[8] );
    if( ! context[22] )
      continue;
    context[23] = refalrts::char_left( 'o', context[7], context[8] );
    if( ! context[23] )
      continue;
    context[24] = refalrts::char_left( 'n', context[7], context[8] );
    if( ! context[24] )
      continue;
    context[25] = refalrts::char_left( 't', context[7], context[8] );
    if( ! context[25] )
      continue;
    if( ! refalrts::empty_seq( context[7], context[8] ) )
      continue;
    // closed e.eX#1 as range 2
    //DEBUG: e.eX#1: 2

    refalrts::reset_allocator();
    //TRASH: {REMOVED TILE} </0 & Mu/4 (/5 'D'/9 'o'/10 'O'/11 'p'/12 'e'/13 'n'/14 'E'/15 'C'/16 'h'/17 'a'/18 'i'/19 'n'/20 '_'/21 'c'/22 'o'/23 'n'/24 {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ HalfReuse: </25 HalfReuse: & DoOpenEChain_cont/6 AsIs: e.eX#1/2 AsIs: >/1 ]] }
    refalrts::reinit_open_call( context[25] );
    refalrts::reinit_name( context[6], ref_DoOpenEChainu_cont.ref.function );
    refalrts::push_stack( context[1] );
    refalrts::push_stack( context[25] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[25];
    refalrts::splice_to_freelist_open( trash_prev, res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence();

  do {
    // # DoOpenEChain_check0 e.idx
    // </0 & Mu/4 # DoOpenEChain_check0/5 e.eX#1/2 >/1
    if( ! refalrts::ident_term(  ident_DoOpenEChainu_check0, context[5] ) )
      continue;
    // closed e.eX#1 as range 2
    //DEBUG: e.eX#1: 2

    refalrts::reset_allocator();
    //TRASH: {REMOVED TILE} </0 {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ HalfReuse: </4 HalfReuse: & DoOpenEChain_check0/5 AsIs: e.eX#1/2 AsIs: >/1 ]] }
    refalrts::reinit_open_call( context[4] );
    refalrts::reinit_name( context[5], ref_DoOpenEChainu_check0.ref.function );
    refalrts::push_stack( context[1] );
    refalrts::push_stack( context[4] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[4];
    refalrts::splice_to_freelist_open( trash_prev, res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence();

  do {
    // ( 'DoOpenEChain_check0' ) e.idx
    // </0 & Mu/4 (/5 'D'/9 'o'/10 'O'/11 'p'/12 'e'/13 'n'/14 'E'/15 'C'/16 'h'/17 'a'/18 'i'/19 'n'/20 '_'/21 'c'/22 'h'/23 'e'/24 'c'/25 'k'/26 '0'/27 )/6 e.eX#1/2 >/1
    context[7] = 0;
    context[8] = 0;
    if( ! refalrts::brackets_term( context[7], context[8], context[5] ) )
      continue;
    context[9] = refalrts::char_left( 'D', context[7], context[8] );
    if( ! context[9] )
      continue;
    context[10] = refalrts::char_left( 'o', context[7], context[8] );
    if( ! context[10] )
      continue;
    context[11] = refalrts::char_left( 'O', context[7], context[8] );
    if( ! context[11] )
      continue;
    context[12] = refalrts::char_left( 'p', context[7], context[8] );
    if( ! context[12] )
      continue;
    context[13] = refalrts::char_left( 'e', context[7], context[8] );
    if( ! context[13] )
      continue;
    context[14] = refalrts::char_left( 'n', context[7], context[8] );
    if( ! context[14] )
      continue;
    context[15] = refalrts::char_left( 'E', context[7], context[8] );
    if( ! context[15] )
      continue;
    context[16] = refalrts::char_left( 'C', context[7], context[8] );
    if( ! context[16] )
      continue;
    context[17] = refalrts::char_left( 'h', context[7], context[8] );
    if( ! context[17] )
      continue;
    context[18] = refalrts::char_left( 'a', context[7], context[8] );
    if( ! context[18] )
      continue;
    context[19] = refalrts::char_left( 'i', context[7], context[8] );
    if( ! context[19] )
      continue;
    context[20] = refalrts::char_left( 'n', context[7], context[8] );
    if( ! context[20] )
      continue;
    context[21] = refalrts::char_left( '_', context[7], context[8] );
    if( ! context[21] )
      continue;
    context[22] = refalrts::char_left( 'c', context[7], context[8] );
    if( ! context[22] )
      continue;
    context[23] = refalrts::char_left( 'h', context[7], context[8] );
    if( ! context[23] )
      continue;
    context[24] = refalrts::char_left( 'e', context[7], context[8] );
    if( ! context[24] )
      continue;
    context[25] = refalrts::char_left( 'c', context[7], context[8] );
    if( ! context[25] )
      continue;
    context[26] = refalrts::char_left( 'k', context[7], context[8] );
    if( ! context[26] )
      continue;
    context[27] = refalrts::char_left( '0', context[7], context[8] );
    if( ! context[27] )
      continue;
    if( ! refalrts::empty_seq( context[7], context[8] ) )
      continue;
    // closed e.eX#1 as range 2
    //DEBUG: e.eX#1: 2

    refalrts::reset_allocator();
    //TRASH: {REMOVED TILE} </0 & Mu/4 (/5 'D'/9 'o'/10 'O'/11 'p'/12 'e'/13 'n'/14 'E'/15 'C'/16 'h'/17 'a'/18 'i'/19 'n'/20 '_'/21 'c'/22 'h'/23 'e'/24 'c'/25 'k'/26 {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ HalfReuse: </27 HalfReuse: & DoOpenEChain_check0/6 AsIs: e.eX#1/2 AsIs: >/1 ]] }
    refalrts::reinit_open_call( context[27] );
    refalrts::reinit_name( context[6], ref_DoOpenEChainu_check0.ref.function );
    refalrts::push_stack( context[1] );
    refalrts::push_stack( context[27] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[27];
    refalrts::splice_to_freelist_open( trash_prev, res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence();

  do {
    // # DoOpenEChain_check1 e.idx
    // </0 & Mu/4 # DoOpenEChain_check1/5 e.eX#1/2 >/1
    if( ! refalrts::ident_term(  ident_DoOpenEChainu_check1, context[5] ) )
      continue;
    // closed e.eX#1 as range 2
    //DEBUG: e.eX#1: 2

    refalrts::reset_allocator();
    //TRASH: {REMOVED TILE} </0 {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ HalfReuse: </4 HalfReuse: & DoOpenEChain_check1/5 AsIs: e.eX#1/2 AsIs: >/1 ]] }
    refalrts::reinit_open_call( context[4] );
    refalrts::reinit_name( context[5], ref_DoOpenEChainu_check1.ref.function );
    refalrts::push_stack( context[1] );
    refalrts::push_stack( context[4] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[4];
    refalrts::splice_to_freelist_open( trash_prev, res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence();

  do {
    // ( 'DoOpenEChain_check1' ) e.idx
    // </0 & Mu/4 (/5 'D'/9 'o'/10 'O'/11 'p'/12 'e'/13 'n'/14 'E'/15 'C'/16 'h'/17 'a'/18 'i'/19 'n'/20 '_'/21 'c'/22 'h'/23 'e'/24 'c'/25 'k'/26 '1'/27 )/6 e.eX#1/2 >/1
    context[7] = 0;
    context[8] = 0;
    if( ! refalrts::brackets_term( context[7], context[8], context[5] ) )
      continue;
    context[9] = refalrts::char_left( 'D', context[7], context[8] );
    if( ! context[9] )
      continue;
    context[10] = refalrts::char_left( 'o', context[7], context[8] );
    if( ! context[10] )
      continue;
    context[11] = refalrts::char_left( 'O', context[7], context[8] );
    if( ! context[11] )
      continue;
    context[12] = refalrts::char_left( 'p', context[7], context[8] );
    if( ! context[12] )
      continue;
    context[13] = refalrts::char_left( 'e', context[7], context[8] );
    if( ! context[13] )
      continue;
    context[14] = refalrts::char_left( 'n', context[7], context[8] );
    if( ! context[14] )
      continue;
    context[15] = refalrts::char_left( 'E', context[7], context[8] );
    if( ! context[15] )
      continue;
    context[16] = refalrts::char_left( 'C', context[7], context[8] );
    if( ! context[16] )
      continue;
    context[17] = refalrts::char_left( 'h', context[7], context[8] );
    if( ! context[17] )
      continue;
    context[18] = refalrts::char_left( 'a', context[7], context[8] );
    if( ! context[18] )
      continue;
    context[19] = refalrts::char_left( 'i', context[7], context[8] );
    if( ! context[19] )
      continue;
    context[20] = refalrts::char_left( 'n', context[7], context[8] );
    if( ! context[20] )
      continue;
    context[21] = refalrts::char_left( '_', context[7], context[8] );
    if( ! context[21] )
      continue;
    context[22] = refalrts::char_left( 'c', context[7], context[8] );
    if( ! context[22] )
      continue;
    context[23] = refalrts::char_left( 'h', context[7], context[8] );
    if( ! context[23] )
      continue;
    context[24] = refalrts::char_left( 'e', context[7], context[8] );
    if( ! context[24] )
      continue;
    context[25] = refalrts::char_left( 'c', context[7], context[8] );
    if( ! context[25] )
      continue;
    context[26] = refalrts::char_left( 'k', context[7], context[8] );
    if( ! context[26] )
      continue;
    context[27] = refalrts::char_left( '1', context[7], context[8] );
    if( ! context[27] )
      continue;
    if( ! refalrts::empty_seq( context[7], context[8] ) )
      continue;
    // closed e.eX#1 as range 2
    //DEBUG: e.eX#1: 2

    refalrts::reset_allocator();
    //TRASH: {REMOVED TILE} </0 & Mu/4 (/5 'D'/9 'o'/10 'O'/11 'p'/12 'e'/13 'n'/14 'E'/15 'C'/16 'h'/17 'a'/18 'i'/19 'n'/20 '_'/21 'c'/22 'h'/23 'e'/24 'c'/25 'k'/26 {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ HalfReuse: </27 HalfReuse: & DoOpenEChain_check1/6 AsIs: e.eX#1/2 AsIs: >/1 ]] }
    refalrts::reinit_open_call( context[27] );
    refalrts::reinit_name( context[6], ref_DoOpenEChainu_check1.ref.function );
    refalrts::push_stack( context[1] );
    refalrts::push_stack( context[27] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[27];
    refalrts::splice_to_freelist_open( trash_prev, res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence();

  do {
    // # MakeOpenE-ForwardNext e.idx
    // </0 & Mu/4 # MakeOpenE-ForwardNext/5 e.eX#1/2 >/1
    if( ! refalrts::ident_term(  ident_MakeOpenEm_ForwardNext, context[5] ) )
      continue;
    // closed e.eX#1 as range 2
    //DEBUG: e.eX#1: 2

    refalrts::reset_allocator();
    //TRASH: {REMOVED TILE} </0 {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ HalfReuse: </4 HalfReuse: & MakeOpenE-ForwardNext/5 AsIs: e.eX#1/2 AsIs: >/1 ]] }
    refalrts::reinit_open_call( context[4] );
    refalrts::reinit_name( context[5], ref_MakeOpenEm_ForwardNext.ref.function );
    refalrts::push_stack( context[1] );
    refalrts::push_stack( context[4] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[4];
    refalrts::splice_to_freelist_open( trash_prev, res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence();

  do {
    // ( 'MakeOpenE-ForwardNext' ) e.idx
    // </0 & Mu/4 (/5 'M'/9 'a'/10 'k'/11 'e'/12 'O'/13 'p'/14 'e'/15 'n'/16 'E'/17 '-'/18 'F'/19 'o'/20 'r'/21 'w'/22 'a'/23 'r'/24 'd'/25 'N'/26 'e'/27 'x'/28 't'/29 )/6 e.eX#1/2 >/1
    context[7] = 0;
    context[8] = 0;
    if( ! refalrts::brackets_term( context[7], context[8], context[5] ) )
      continue;
    context[9] = refalrts::char_left( 'M', context[7], context[8] );
    if( ! context[9] )
      continue;
    context[10] = refalrts::char_left( 'a', context[7], context[8] );
    if( ! context[10] )
      continue;
    context[11] = refalrts::char_left( 'k', context[7], context[8] );
    if( ! context[11] )
      continue;
    context[12] = refalrts::char_left( 'e', context[7], context[8] );
    if( ! context[12] )
      continue;
    context[13] = refalrts::char_left( 'O', context[7], context[8] );
    if( ! context[13] )
      continue;
    context[14] = refalrts::char_left( 'p', context[7], context[8] );
    if( ! context[14] )
      continue;
    context[15] = refalrts::char_left( 'e', context[7], context[8] );
    if( ! context[15] )
      continue;
    context[16] = refalrts::char_left( 'n', context[7], context[8] );
    if( ! context[16] )
      continue;
    context[17] = refalrts::char_left( 'E', context[7], context[8] );
    if( ! context[17] )
      continue;
    context[18] = refalrts::char_left( '-', context[7], context[8] );
    if( ! context[18] )
      continue;
    context[19] = refalrts::char_left( 'F', context[7], context[8] );
    if( ! context[19] )
      continue;
    context[20] = refalrts::char_left( 'o', context[7], context[8] );
    if( ! context[20] )
      continue;
    context[21] = refalrts::char_left( 'r', context[7], context[8] );
    if( ! context[21] )
      continue;
    context[22] = refalrts::char_left( 'w', context[7], context[8] );
    if( ! context[22] )
      continue;
    context[23] = refalrts::char_left( 'a', context[7], context[8] );
    if( ! context[23] )
      continue;
    context[24] = refalrts::char_left( 'r', context[7], context[8] );
    if( ! context[24] )
      continue;
    context[25] = refalrts::char_left( 'd', context[7], context[8] );
    if( ! context[25] )
      continue;
    context[26] = refalrts::char_left( 'N', context[7], context[8] );
    if( ! context[26] )
      continue;
    context[27] = refalrts::char_left( 'e', context[7], context[8] );
    if( ! context[27] )
      continue;
    context[28] = refalrts::char_left( 'x', context[7], context[8] );
    if( ! context[28] )
      continue;
    context[29] = refalrts::char_left( 't', context[7], context[8] );
    if( ! context[29] )
      continue;
    if( ! refalrts::empty_seq( context[7], context[8] ) )
      continue;
    // closed e.eX#1 as range 2
    //DEBUG: e.eX#1: 2

    refalrts::reset_allocator();
    //TRASH: {REMOVED TILE} </0 & Mu/4 (/5 'M'/9 'a'/10 'k'/11 'e'/12 'O'/13 'p'/14 'e'/15 'n'/16 'E'/17 '-'/18 'F'/19 'o'/20 'r'/21 'w'/22 'a'/23 'r'/24 'd'/25 'N'/26 'e'/27 'x'/28 {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ HalfReuse: </29 HalfReuse: & MakeOpenE-ForwardNext/6 AsIs: e.eX#1/2 AsIs: >/1 ]] }
    refalrts::reinit_open_call( context[29] );
    refalrts::reinit_name( context[6], ref_MakeOpenEm_ForwardNext.ref.function );
    refalrts::push_stack( context[1] );
    refalrts::push_stack( context[29] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[29];
    refalrts::splice_to_freelist_open( trash_prev, res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence();

  do {
    // # MakeOpenE-ForwardNext_check e.idx
    // </0 & Mu/4 # MakeOpenE-ForwardNext_check/5 e.eX#1/2 >/1
    if( ! refalrts::ident_term(  ident_MakeOpenEm_ForwardNextu_check, context[5] ) )
      continue;
    // closed e.eX#1 as range 2
    //DEBUG: e.eX#1: 2

    refalrts::reset_allocator();
    //TRASH: {REMOVED TILE} </0 {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ HalfReuse: </4 HalfReuse: & MakeOpenE-ForwardNext_check/5 AsIs: e.eX#1/2 AsIs: >/1 ]] }
    refalrts::reinit_open_call( context[4] );
    refalrts::reinit_name( context[5], ref_MakeOpenEm_ForwardNextu_check.ref.function );
    refalrts::push_stack( context[1] );
    refalrts::push_stack( context[4] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[4];
    refalrts::splice_to_freelist_open( trash_prev, res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence();

  do {
    // ( 'MakeOpenE-ForwardNext_check' ) e.idx
    // </0 & Mu/4 (/5 'M'/9 'a'/10 'k'/11 'e'/12 'O'/13 'p'/14 'e'/15 'n'/16 'E'/17 '-'/18 'F'/19 'o'/20 'r'/21 'w'/22 'a'/23 'r'/24 'd'/25 'N'/26 'e'/27 'x'/28 't'/29 '_'/30 'c'/31 'h'/32 'e'/33 'c'/34 'k'/35 )/6 e.eX#1/2 >/1
    context[7] = 0;
    context[8] = 0;
    if( ! refalrts::brackets_term( context[7], context[8], context[5] ) )
      continue;
    context[9] = refalrts::char_left( 'M', context[7], context[8] );
    if( ! context[9] )
      continue;
    context[10] = refalrts::char_left( 'a', context[7], context[8] );
    if( ! context[10] )
      continue;
    context[11] = refalrts::char_left( 'k', context[7], context[8] );
    if( ! context[11] )
      continue;
    context[12] = refalrts::char_left( 'e', context[7], context[8] );
    if( ! context[12] )
      continue;
    context[13] = refalrts::char_left( 'O', context[7], context[8] );
    if( ! context[13] )
      continue;
    context[14] = refalrts::char_left( 'p', context[7], context[8] );
    if( ! context[14] )
      continue;
    context[15] = refalrts::char_left( 'e', context[7], context[8] );
    if( ! context[15] )
      continue;
    context[16] = refalrts::char_left( 'n', context[7], context[8] );
    if( ! context[16] )
      continue;
    context[17] = refalrts::char_left( 'E', context[7], context[8] );
    if( ! context[17] )
      continue;
    context[18] = refalrts::char_left( '-', context[7], context[8] );
    if( ! context[18] )
      continue;
    context[19] = refalrts::char_left( 'F', context[7], context[8] );
    if( ! context[19] )
      continue;
    context[20] = refalrts::char_left( 'o', context[7], context[8] );
    if( ! context[20] )
      continue;
    context[21] = refalrts::char_left( 'r', context[7], context[8] );
    if( ! context[21] )
      continue;
    context[22] = refalrts::char_left( 'w', context[7], context[8] );
    if( ! context[22] )
      continue;
    context[23] = refalrts::char_left( 'a', context[7], context[8] );
    if( ! context[23] )
      continue;
    context[24] = refalrts::char_left( 'r', context[7], context[8] );
    if( ! context[24] )
      continue;
    context[25] = refalrts::char_left( 'd', context[7], context[8] );
    if( ! context[25] )
      continue;
    context[26] = refalrts::char_left( 'N', context[7], context[8] );
    if( ! context[26] )
      continue;
    context[27] = refalrts::char_left( 'e', context[7], context[8] );
    if( ! context[27] )
      continue;
    context[28] = refalrts::char_left( 'x', context[7], context[8] );
    if( ! context[28] )
      continue;
    context[29] = refalrts::char_left( 't', context[7], context[8] );
    if( ! context[29] )
      continue;
    context[30] = refalrts::char_left( '_', context[7], context[8] );
    if( ! context[30] )
      continue;
    context[31] = refalrts::char_left( 'c', context[7], context[8] );
    if( ! context[31] )
      continue;
    context[32] = refalrts::char_left( 'h', context[7], context[8] );
    if( ! context[32] )
      continue;
    context[33] = refalrts::char_left( 'e', context[7], context[8] );
    if( ! context[33] )
      continue;
    context[34] = refalrts::char_left( 'c', context[7], context[8] );
    if( ! context[34] )
      continue;
    context[35] = refalrts::char_left( 'k', context[7], context[8] );
    if( ! context[35] )
      continue;
    if( ! refalrts::empty_seq( context[7], context[8] ) )
      continue;
    // closed e.eX#1 as range 2
    //DEBUG: e.eX#1: 2

    refalrts::reset_allocator();
    //TRASH: {REMOVED TILE} </0 & Mu/4 (/5 'M'/9 'a'/10 'k'/11 'e'/12 'O'/13 'p'/14 'e'/15 'n'/16 'E'/17 '-'/18 'F'/19 'o'/20 'r'/21 'w'/22 'a'/23 'r'/24 'd'/25 'N'/26 'e'/27 'x'/28 't'/29 '_'/30 'c'/31 'h'/32 'e'/33 'c'/34 {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ HalfReuse: </35 HalfReuse: & MakeOpenE-ForwardNext_check/6 AsIs: e.eX#1/2 AsIs: >/1 ]] }
    refalrts::reinit_open_call( context[35] );
    refalrts::reinit_name( context[6], ref_MakeOpenEm_ForwardNextu_check.ref.function );
    refalrts::push_stack( context[1] );
    refalrts::push_stack( context[35] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[35];
    refalrts::splice_to_freelist_open( trash_prev, res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence();

  do {
    // # ExtractVariables e.idx
    // </0 & Mu/4 # ExtractVariables/5 e.eX#1/2 >/1
    if( ! refalrts::ident_term(  ident_ExtractVariables, context[5] ) )
      continue;
    // closed e.eX#1 as range 2
    //DEBUG: e.eX#1: 2

    refalrts::reset_allocator();
    //TRASH: {REMOVED TILE} </0 {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ HalfReuse: </4 HalfReuse: & ExtractVariables/5 AsIs: e.eX#1/2 AsIs: >/1 ]] }
    refalrts::reinit_open_call( context[4] );
    refalrts::reinit_name( context[5], ref_ExtractVariables.ref.function );
    refalrts::push_stack( context[1] );
    refalrts::push_stack( context[4] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[4];
    refalrts::splice_to_freelist_open( trash_prev, res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence();

  do {
    // ( 'ExtractVariables' ) e.idx
    // </0 & Mu/4 (/5 'E'/9 'x'/10 't'/11 'r'/12 'a'/13 'c'/14 't'/15 'V'/16 'a'/17 'r'/18 'i'/19 'a'/20 'b'/21 'l'/22 'e'/23 's'/24 )/6 e.eX#1/2 >/1
    context[7] = 0;
    context[8] = 0;
    if( ! refalrts::brackets_term( context[7], context[8], context[5] ) )
      continue;
    context[9] = refalrts::char_left( 'E', context[7], context[8] );
    if( ! context[9] )
      continue;
    context[10] = refalrts::char_left( 'x', context[7], context[8] );
    if( ! context[10] )
      continue;
    context[11] = refalrts::char_left( 't', context[7], context[8] );
    if( ! context[11] )
      continue;
    context[12] = refalrts::char_left( 'r', context[7], context[8] );
    if( ! context[12] )
      continue;
    context[13] = refalrts::char_left( 'a', context[7], context[8] );
    if( ! context[13] )
      continue;
    context[14] = refalrts::char_left( 'c', context[7], context[8] );
    if( ! context[14] )
      continue;
    context[15] = refalrts::char_left( 't', context[7], context[8] );
    if( ! context[15] )
      continue;
    context[16] = refalrts::char_left( 'V', context[7], context[8] );
    if( ! context[16] )
      continue;
    context[17] = refalrts::char_left( 'a', context[7], context[8] );
    if( ! context[17] )
      continue;
    context[18] = refalrts::char_left( 'r', context[7], context[8] );
    if( ! context[18] )
      continue;
    context[19] = refalrts::char_left( 'i', context[7], context[8] );
    if( ! context[19] )
      continue;
    context[20] = refalrts::char_left( 'a', context[7], context[8] );
    if( ! context[20] )
      continue;
    context[21] = refalrts::char_left( 'b', context[7], context[8] );
    if( ! context[21] )
      continue;
    context[22] = refalrts::char_left( 'l', context[7], context[8] );
    if( ! context[22] )
      continue;
    context[23] = refalrts::char_left( 'e', context[7], context[8] );
    if( ! context[23] )
      continue;
    context[24] = refalrts::char_left( 's', context[7], context[8] );
    if( ! context[24] )
      continue;
    if( ! refalrts::empty_seq( context[7], context[8] ) )
      continue;
    // closed e.eX#1 as range 2
    //DEBUG: e.eX#1: 2

    refalrts::reset_allocator();
    //TRASH: {REMOVED TILE} </0 & Mu/4 (/5 'E'/9 'x'/10 't'/11 'r'/12 'a'/13 'c'/14 't'/15 'V'/16 'a'/17 'r'/18 'i'/19 'a'/20 'b'/21 'l'/22 'e'/23 {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ HalfReuse: </24 HalfReuse: & ExtractVariables/6 AsIs: e.eX#1/2 AsIs: >/1 ]] }
    refalrts::reinit_open_call( context[24] );
    refalrts::reinit_name( context[6], ref_ExtractVariables.ref.function );
    refalrts::push_stack( context[1] );
    refalrts::push_stack( context[24] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[24];
    refalrts::splice_to_freelist_open( trash_prev, res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence();

  do {
    // # ExtractVariables-Sentences e.idx
    // </0 & Mu/4 # ExtractVariables-Sentences/5 e.eX#1/2 >/1
    if( ! refalrts::ident_term(  ident_ExtractVariablesm_Sentences, context[5] ) )
      continue;
    // closed e.eX#1 as range 2
    //DEBUG: e.eX#1: 2

    refalrts::reset_allocator();
    //TRASH: {REMOVED TILE} </0 {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ HalfReuse: </4 HalfReuse: & ExtractVariables-Sentences/5 AsIs: e.eX#1/2 AsIs: >/1 ]] }
    refalrts::reinit_open_call( context[4] );
    refalrts::reinit_name( context[5], ref_ExtractVariablesm_Sentences.ref.function );
    refalrts::push_stack( context[1] );
    refalrts::push_stack( context[4] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[4];
    refalrts::splice_to_freelist_open( trash_prev, res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence();

  do {
    // ( 'ExtractVariables-Sentences' ) e.idx
    // </0 & Mu/4 (/5 'E'/9 'x'/10 't'/11 'r'/12 'a'/13 'c'/14 't'/15 'V'/16 'a'/17 'r'/18 'i'/19 'a'/20 'b'/21 'l'/22 'e'/23 's'/24 '-'/25 'S'/26 'e'/27 'n'/28 't'/29 'e'/30 'n'/31 'c'/32 'e'/33 's'/34 )/6 e.eX#1/2 >/1
    context[7] = 0;
    context[8] = 0;
    if( ! refalrts::brackets_term( context[7], context[8], context[5] ) )
      continue;
    context[9] = refalrts::char_left( 'E', context[7], context[8] );
    if( ! context[9] )
      continue;
    context[10] = refalrts::char_left( 'x', context[7], context[8] );
    if( ! context[10] )
      continue;
    context[11] = refalrts::char_left( 't', context[7], context[8] );
    if( ! context[11] )
      continue;
    context[12] = refalrts::char_left( 'r', context[7], context[8] );
    if( ! context[12] )
      continue;
    context[13] = refalrts::char_left( 'a', context[7], context[8] );
    if( ! context[13] )
      continue;
    context[14] = refalrts::char_left( 'c', context[7], context[8] );
    if( ! context[14] )
      continue;
    context[15] = refalrts::char_left( 't', context[7], context[8] );
    if( ! context[15] )
      continue;
    context[16] = refalrts::char_left( 'V', context[7], context[8] );
    if( ! context[16] )
      continue;
    context[17] = refalrts::char_left( 'a', context[7], context[8] );
    if( ! context[17] )
      continue;
    context[18] = refalrts::char_left( 'r', context[7], context[8] );
    if( ! context[18] )
      continue;
    context[19] = refalrts::char_left( 'i', context[7], context[8] );
    if( ! context[19] )
      continue;
    context[20] = refalrts::char_left( 'a', context[7], context[8] );
    if( ! context[20] )
      continue;
    context[21] = refalrts::char_left( 'b', context[7], context[8] );
    if( ! context[21] )
      continue;
    context[22] = refalrts::char_left( 'l', context[7], context[8] );
    if( ! context[22] )
      continue;
    context[23] = refalrts::char_left( 'e', context[7], context[8] );
    if( ! context[23] )
      continue;
    context[24] = refalrts::char_left( 's', context[7], context[8] );
    if( ! context[24] )
      continue;
    context[25] = refalrts::char_left( '-', context[7], context[8] );
    if( ! context[25] )
      continue;
    context[26] = refalrts::char_left( 'S', context[7], context[8] );
    if( ! context[26] )
      continue;
    context[27] = refalrts::char_left( 'e', context[7], context[8] );
    if( ! context[27] )
      continue;
    context[28] = refalrts::char_left( 'n', context[7], context[8] );
    if( ! context[28] )
      continue;
    context[29] = refalrts::char_left( 't', context[7], context[8] );
    if( ! context[29] )
      continue;
    context[30] = refalrts::char_left( 'e', context[7], context[8] );
    if( ! context[30] )
      continue;
    context[31] = refalrts::char_left( 'n', context[7], context[8] );
    if( ! context[31] )
      continue;
    context[32] = refalrts::char_left( 'c', context[7], context[8] );
    if( ! context[32] )
      continue;
    context[33] = refalrts::char_left( 'e', context[7], context[8] );
    if( ! context[33] )
      continue;
    context[34] = refalrts::char_left( 's', context[7], context[8] );
    if( ! context[34] )
      continue;
    if( ! refalrts::empty_seq( context[7], context[8] ) )
      continue;
    // closed e.eX#1 as range 2
    //DEBUG: e.eX#1: 2

    refalrts::reset_allocator();
    //TRASH: {REMOVED TILE} </0 & Mu/4 (/5 'E'/9 'x'/10 't'/11 'r'/12 'a'/13 'c'/14 't'/15 'V'/16 'a'/17 'r'/18 'i'/19 'a'/20 'b'/21 'l'/22 'e'/23 's'/24 '-'/25 'S'/26 'e'/27 'n'/28 't'/29 'e'/30 'n'/31 'c'/32 'e'/33 {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ HalfReuse: </34 HalfReuse: & ExtractVariables-Sentences/6 AsIs: e.eX#1/2 AsIs: >/1 ]] }
    refalrts::reinit_open_call( context[34] );
    refalrts::reinit_name( context[6], ref_ExtractVariablesm_Sentences.ref.function );
    refalrts::push_stack( context[1] );
    refalrts::push_stack( context[34] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[34];
    refalrts::splice_to_freelist_open( trash_prev, res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence();

  do {
    // # ExtractVariables-Tail e.idx
    // </0 & Mu/4 # ExtractVariables-Tail/5 e.eX#1/2 >/1
    if( ! refalrts::ident_term(  ident_ExtractVariablesm_Tail, context[5] ) )
      continue;
    // closed e.eX#1 as range 2
    //DEBUG: e.eX#1: 2

    refalrts::reset_allocator();
    //TRASH: {REMOVED TILE} </0 {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ HalfReuse: </4 HalfReuse: & ExtractVariables-Tail/5 AsIs: e.eX#1/2 AsIs: >/1 ]] }
    refalrts::reinit_open_call( context[4] );
    refalrts::reinit_name( context[5], ref_ExtractVariablesm_Tail.ref.function );
    refalrts::push_stack( context[1] );
    refalrts::push_stack( context[4] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[4];
    refalrts::splice_to_freelist_open( trash_prev, res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence();

  do {
    // ( 'ExtractVariables-Tail' ) e.idx
    // </0 & Mu/4 (/5 'E'/9 'x'/10 't'/11 'r'/12 'a'/13 'c'/14 't'/15 'V'/16 'a'/17 'r'/18 'i'/19 'a'/20 'b'/21 'l'/22 'e'/23 's'/24 '-'/25 'T'/26 'a'/27 'i'/28 'l'/29 )/6 e.eX#1/2 >/1
    context[7] = 0;
    context[8] = 0;
    if( ! refalrts::brackets_term( context[7], context[8], context[5] ) )
      continue;
    context[9] = refalrts::char_left( 'E', context[7], context[8] );
    if( ! context[9] )
      continue;
    context[10] = refalrts::char_left( 'x', context[7], context[8] );
    if( ! context[10] )
      continue;
    context[11] = refalrts::char_left( 't', context[7], context[8] );
    if( ! context[11] )
      continue;
    context[12] = refalrts::char_left( 'r', context[7], context[8] );
    if( ! context[12] )
      continue;
    context[13] = refalrts::char_left( 'a', context[7], context[8] );
    if( ! context[13] )
      continue;
    context[14] = refalrts::char_left( 'c', context[7], context[8] );
    if( ! context[14] )
      continue;
    context[15] = refalrts::char_left( 't', context[7], context[8] );
    if( ! context[15] )
      continue;
    context[16] = refalrts::char_left( 'V', context[7], context[8] );
    if( ! context[16] )
      continue;
    context[17] = refalrts::char_left( 'a', context[7], context[8] );
    if( ! context[17] )
      continue;
    context[18] = refalrts::char_left( 'r', context[7], context[8] );
    if( ! context[18] )
      continue;
    context[19] = refalrts::char_left( 'i', context[7], context[8] );
    if( ! context[19] )
      continue;
    context[20] = refalrts::char_left( 'a', context[7], context[8] );
    if( ! context[20] )
      continue;
    context[21] = refalrts::char_left( 'b', context[7], context[8] );
    if( ! context[21] )
      continue;
    context[22] = refalrts::char_left( 'l', context[7], context[8] );
    if( ! context[22] )
      continue;
    context[23] = refalrts::char_left( 'e', context[7], context[8] );
    if( ! context[23] )
      continue;
    context[24] = refalrts::char_left( 's', context[7], context[8] );
    if( ! context[24] )
      continue;
    context[25] = refalrts::char_left( '-', context[7], context[8] );
    if( ! context[25] )
      continue;
    context[26] = refalrts::char_left( 'T', context[7], context[8] );
    if( ! context[26] )
      continue;
    context[27] = refalrts::char_left( 'a', context[7], context[8] );
    if( ! context[27] )
      continue;
    context[28] = refalrts::char_left( 'i', context[7], context[8] );
    if( ! context[28] )
      continue;
    context[29] = refalrts::char_left( 'l', context[7], context[8] );
    if( ! context[29] )
      continue;
    if( ! refalrts::empty_seq( context[7], context[8] ) )
      continue;
    // closed e.eX#1 as range 2
    //DEBUG: e.eX#1: 2

    refalrts::reset_allocator();
    //TRASH: {REMOVED TILE} </0 & Mu/4 (/5 'E'/9 'x'/10 't'/11 'r'/12 'a'/13 'c'/14 't'/15 'V'/16 'a'/17 'r'/18 'i'/19 'a'/20 'b'/21 'l'/22 'e'/23 's'/24 '-'/25 'T'/26 'a'/27 'i'/28 {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ HalfReuse: </29 HalfReuse: & ExtractVariables-Tail/6 AsIs: e.eX#1/2 AsIs: >/1 ]] }
    refalrts::reinit_open_call( context[29] );
    refalrts::reinit_name( context[6], ref_ExtractVariablesm_Tail.ref.function );
    refalrts::push_stack( context[1] );
    refalrts::push_stack( context[29] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[29];
    refalrts::splice_to_freelist_open( trash_prev, res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence();

  do {
    // # ExtractVariables-Expr e.idx
    // </0 & Mu/4 # ExtractVariables-Expr/5 e.eX#1/2 >/1
    if( ! refalrts::ident_term(  ident_ExtractVariablesm_Expr, context[5] ) )
      continue;
    // closed e.eX#1 as range 2
    //DEBUG: e.eX#1: 2

    refalrts::reset_allocator();
    //TRASH: {REMOVED TILE} </0 {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ HalfReuse: </4 HalfReuse: & ExtractVariables-Expr/5 AsIs: e.eX#1/2 AsIs: >/1 ]] }
    refalrts::reinit_open_call( context[4] );
    refalrts::reinit_name( context[5], ref_ExtractVariablesm_Expr.ref.function );
    refalrts::push_stack( context[1] );
    refalrts::push_stack( context[4] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[4];
    refalrts::splice_to_freelist_open( trash_prev, res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence();

  do {
    // ( 'ExtractVariables-Expr' ) e.idx
    // </0 & Mu/4 (/5 'E'/9 'x'/10 't'/11 'r'/12 'a'/13 'c'/14 't'/15 'V'/16 'a'/17 'r'/18 'i'/19 'a'/20 'b'/21 'l'/22 'e'/23 's'/24 '-'/25 'E'/26 'x'/27 'p'/28 'r'/29 )/6 e.eX#1/2 >/1
    context[7] = 0;
    context[8] = 0;
    if( ! refalrts::brackets_term( context[7], context[8], context[5] ) )
      continue;
    context[9] = refalrts::char_left( 'E', context[7], context[8] );
    if( ! context[9] )
      continue;
    context[10] = refalrts::char_left( 'x', context[7], context[8] );
    if( ! context[10] )
      continue;
    context[11] = refalrts::char_left( 't', context[7], context[8] );
    if( ! context[11] )
      continue;
    context[12] = refalrts::char_left( 'r', context[7], context[8] );
    if( ! context[12] )
      continue;
    context[13] = refalrts::char_left( 'a', context[7], context[8] );
    if( ! context[13] )
      continue;
    context[14] = refalrts::char_left( 'c', context[7], context[8] );
    if( ! context[14] )
      continue;
    context[15] = refalrts::char_left( 't', context[7], context[8] );
    if( ! context[15] )
      continue;
    context[16] = refalrts::char_left( 'V', context[7], context[8] );
    if( ! context[16] )
      continue;
    context[17] = refalrts::char_left( 'a', context[7], context[8] );
    if( ! context[17] )
      continue;
    context[18] = refalrts::char_left( 'r', context[7], context[8] );
    if( ! context[18] )
      continue;
    context[19] = refalrts::char_left( 'i', context[7], context[8] );
    if( ! context[19] )
      continue;
    context[20] = refalrts::char_left( 'a', context[7], context[8] );
    if( ! context[20] )
      continue;
    context[21] = refalrts::char_left( 'b', context[7], context[8] );
    if( ! context[21] )
      continue;
    context[22] = refalrts::char_left( 'l', context[7], context[8] );
    if( ! context[22] )
      continue;
    context[23] = refalrts::char_left( 'e', context[7], context[8] );
    if( ! context[23] )
      continue;
    context[24] = refalrts::char_left( 's', context[7], context[8] );
    if( ! context[24] )
      continue;
    context[25] = refalrts::char_left( '-', context[7], context[8] );
    if( ! context[25] )
      continue;
    context[26] = refalrts::char_left( 'E', context[7], context[8] );
    if( ! context[26] )
      continue;
    context[27] = refalrts::char_left( 'x', context[7], context[8] );
    if( ! context[27] )
      continue;
    context[28] = refalrts::char_left( 'p', context[7], context[8] );
    if( ! context[28] )
      continue;
    context[29] = refalrts::char_left( 'r', context[7], context[8] );
    if( ! context[29] )
      continue;
    if( ! refalrts::empty_seq( context[7], context[8] ) )
      continue;
    // closed e.eX#1 as range 2
    //DEBUG: e.eX#1: 2

    refalrts::reset_allocator();
    //TRASH: {REMOVED TILE} </0 & Mu/4 (/5 'E'/9 'x'/10 't'/11 'r'/12 'a'/13 'c'/14 't'/15 'V'/16 'a'/17 'r'/18 'i'/19 'a'/20 'b'/21 'l'/22 'e'/23 's'/24 '-'/25 'E'/26 'x'/27 'p'/28 {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ HalfReuse: </29 HalfReuse: & ExtractVariables-Expr/6 AsIs: e.eX#1/2 AsIs: >/1 ]] }
    refalrts::reinit_open_call( context[29] );
    refalrts::reinit_name( context[6], ref_ExtractVariablesm_Expr.ref.function );
    refalrts::push_stack( context[1] );
    refalrts::push_stack( context[29] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[29];
    refalrts::splice_to_freelist_open( trash_prev, res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence();

  do {
    // # NewName e.idx
    // </0 & Mu/4 # NewName/5 e.eX#1/2 >/1
    if( ! refalrts::ident_term(  ident_NewName, context[5] ) )
      continue;
    // closed e.eX#1 as range 2
    //DEBUG: e.eX#1: 2

    refalrts::reset_allocator();
    //TRASH: {REMOVED TILE} </0 {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ HalfReuse: </4 HalfReuse: & NewName/5 AsIs: e.eX#1/2 AsIs: >/1 ]] }
    refalrts::reinit_open_call( context[4] );
    refalrts::reinit_name( context[5], ref_NewName.ref.function );
    refalrts::push_stack( context[1] );
    refalrts::push_stack( context[4] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[4];
    refalrts::splice_to_freelist_open( trash_prev, res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence();

  do {
    // ( 'NewName' ) e.idx
    // </0 & Mu/4 (/5 'N'/9 'e'/10 'w'/11 'N'/12 'a'/13 'm'/14 'e'/15 )/6 e.eX#1/2 >/1
    context[7] = 0;
    context[8] = 0;
    if( ! refalrts::brackets_term( context[7], context[8], context[5] ) )
      continue;
    context[9] = refalrts::char_left( 'N', context[7], context[8] );
    if( ! context[9] )
      continue;
    context[10] = refalrts::char_left( 'e', context[7], context[8] );
    if( ! context[10] )
      continue;
    context[11] = refalrts::char_left( 'w', context[7], context[8] );
    if( ! context[11] )
      continue;
    context[12] = refalrts::char_left( 'N', context[7], context[8] );
    if( ! context[12] )
      continue;
    context[13] = refalrts::char_left( 'a', context[7], context[8] );
    if( ! context[13] )
      continue;
    context[14] = refalrts::char_left( 'm', context[7], context[8] );
    if( ! context[14] )
      continue;
    context[15] = refalrts::char_left( 'e', context[7], context[8] );
    if( ! context[15] )
      continue;
    if( ! refalrts::empty_seq( context[7], context[8] ) )
      continue;
    // closed e.eX#1 as range 2
    //DEBUG: e.eX#1: 2

    refalrts::reset_allocator();
    //TRASH: {REMOVED TILE} </0 & Mu/4 (/5 'N'/9 'e'/10 'w'/11 'N'/12 'a'/13 'm'/14 {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ HalfReuse: </15 HalfReuse: & NewName/6 AsIs: e.eX#1/2 AsIs: >/1 ]] }
    refalrts::reinit_open_call( context[15] );
    refalrts::reinit_name( context[6], ref_NewName.ref.function );
    refalrts::push_stack( context[1] );
    refalrts::push_stack( context[15] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[15];
    refalrts::splice_to_freelist_open( trash_prev, res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence();

  do {
    // # DoNewName e.idx
    // </0 & Mu/4 # DoNewName/5 e.eX#1/2 >/1
    if( ! refalrts::ident_term(  ident_DoNewName, context[5] ) )
      continue;
    // closed e.eX#1 as range 2
    //DEBUG: e.eX#1: 2

    refalrts::reset_allocator();
    //TRASH: {REMOVED TILE} </0 {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ HalfReuse: </4 HalfReuse: & DoNewName/5 AsIs: e.eX#1/2 AsIs: >/1 ]] }
    refalrts::reinit_open_call( context[4] );
    refalrts::reinit_name( context[5], ref_DoNewName.ref.function );
    refalrts::push_stack( context[1] );
    refalrts::push_stack( context[4] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[4];
    refalrts::splice_to_freelist_open( trash_prev, res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence();

  do {
    // ( 'DoNewName' ) e.idx
    // </0 & Mu/4 (/5 'D'/9 'o'/10 'N'/11 'e'/12 'w'/13 'N'/14 'a'/15 'm'/16 'e'/17 )/6 e.eX#1/2 >/1
    context[7] = 0;
    context[8] = 0;
    if( ! refalrts::brackets_term( context[7], context[8], context[5] ) )
      continue;
    context[9] = refalrts::char_left( 'D', context[7], context[8] );
    if( ! context[9] )
      continue;
    context[10] = refalrts::char_left( 'o', context[7], context[8] );
    if( ! context[10] )
      continue;
    context[11] = refalrts::char_left( 'N', context[7], context[8] );
    if( ! context[11] )
      continue;
    context[12] = refalrts::char_left( 'e', context[7], context[8] );
    if( ! context[12] )
      continue;
    context[13] = refalrts::char_left( 'w', context[7], context[8] );
    if( ! context[13] )
      continue;
    context[14] = refalrts::char_left( 'N', context[7], context[8] );
    if( ! context[14] )
      continue;
    context[15] = refalrts::char_left( 'a', context[7], context[8] );
    if( ! context[15] )
      continue;
    context[16] = refalrts::char_left( 'm', context[7], context[8] );
    if( ! context[16] )
      continue;
    context[17] = refalrts::char_left( 'e', context[7], context[8] );
    if( ! context[17] )
      continue;
    if( ! refalrts::empty_seq( context[7], context[8] ) )
      continue;
    // closed e.eX#1 as range 2
    //DEBUG: e.eX#1: 2

    refalrts::reset_allocator();
    //TRASH: {REMOVED TILE} </0 & Mu/4 (/5 'D'/9 'o'/10 'N'/11 'e'/12 'w'/13 'N'/14 'a'/15 'm'/16 {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ HalfReuse: </17 HalfReuse: & DoNewName/6 AsIs: e.eX#1/2 AsIs: >/1 ]] }
    refalrts::reinit_open_call( context[17] );
    refalrts::reinit_name( context[6], ref_DoNewName.ref.function );
    refalrts::push_stack( context[1] );
    refalrts::push_stack( context[17] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[17];
    refalrts::splice_to_freelist_open( trash_prev, res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence();

  do {
    // # DoNewName_check e.idx
    // </0 & Mu/4 # DoNewName_check/5 e.eX#1/2 >/1
    if( ! refalrts::ident_term(  ident_DoNewNameu_check, context[5] ) )
      continue;
    // closed e.eX#1 as range 2
    //DEBUG: e.eX#1: 2

    refalrts::reset_allocator();
    //TRASH: {REMOVED TILE} </0 {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ HalfReuse: </4 HalfReuse: & DoNewName_check/5 AsIs: e.eX#1/2 AsIs: >/1 ]] }
    refalrts::reinit_open_call( context[4] );
    refalrts::reinit_name( context[5], ref_DoNewNameu_check.ref.function );
    refalrts::push_stack( context[1] );
    refalrts::push_stack( context[4] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[4];
    refalrts::splice_to_freelist_open( trash_prev, res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence();

  do {
    // ( 'DoNewName_check' ) e.idx
    // </0 & Mu/4 (/5 'D'/9 'o'/10 'N'/11 'e'/12 'w'/13 'N'/14 'a'/15 'm'/16 'e'/17 '_'/18 'c'/19 'h'/20 'e'/21 'c'/22 'k'/23 )/6 e.eX#1/2 >/1
    context[7] = 0;
    context[8] = 0;
    if( ! refalrts::brackets_term( context[7], context[8], context[5] ) )
      continue;
    context[9] = refalrts::char_left( 'D', context[7], context[8] );
    if( ! context[9] )
      continue;
    context[10] = refalrts::char_left( 'o', context[7], context[8] );
    if( ! context[10] )
      continue;
    context[11] = refalrts::char_left( 'N', context[7], context[8] );
    if( ! context[11] )
      continue;
    context[12] = refalrts::char_left( 'e', context[7], context[8] );
    if( ! context[12] )
      continue;
    context[13] = refalrts::char_left( 'w', context[7], context[8] );
    if( ! context[13] )
      continue;
    context[14] = refalrts::char_left( 'N', context[7], context[8] );
    if( ! context[14] )
      continue;
    context[15] = refalrts::char_left( 'a', context[7], context[8] );
    if( ! context[15] )
      continue;
    context[16] = refalrts::char_left( 'm', context[7], context[8] );
    if( ! context[16] )
      continue;
    context[17] = refalrts::char_left( 'e', context[7], context[8] );
    if( ! context[17] )
      continue;
    context[18] = refalrts::char_left( '_', context[7], context[8] );
    if( ! context[18] )
      continue;
    context[19] = refalrts::char_left( 'c', context[7], context[8] );
    if( ! context[19] )
      continue;
    context[20] = refalrts::char_left( 'h', context[7], context[8] );
    if( ! context[20] )
      continue;
    context[21] = refalrts::char_left( 'e', context[7], context[8] );
    if( ! context[21] )
      continue;
    context[22] = refalrts::char_left( 'c', context[7], context[8] );
    if( ! context[22] )
      continue;
    context[23] = refalrts::char_left( 'k', context[7], context[8] );
    if( ! context[23] )
      continue;
    if( ! refalrts::empty_seq( context[7], context[8] ) )
      continue;
    // closed e.eX#1 as range 2
    //DEBUG: e.eX#1: 2

    refalrts::reset_allocator();
    //TRASH: {REMOVED TILE} </0 & Mu/4 (/5 'D'/9 'o'/10 'N'/11 'e'/12 'w'/13 'N'/14 'a'/15 'm'/16 'e'/17 '_'/18 'c'/19 'h'/20 'e'/21 'c'/22 {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ HalfReuse: </23 HalfReuse: & DoNewName_check/6 AsIs: e.eX#1/2 AsIs: >/1 ]] }
    refalrts::reinit_open_call( context[23] );
    refalrts::reinit_name( context[6], ref_DoNewNameu_check.ref.function );
    refalrts::push_stack( context[1] );
    refalrts::push_stack( context[23] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[23];
    refalrts::splice_to_freelist_open( trash_prev, res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence();

  do {
    // # DoNewName0 e.idx
    // </0 & Mu/4 # DoNewName0/5 e.eX#1/2 >/1
    if( ! refalrts::ident_term(  ident_DoNewName0, context[5] ) )
      continue;
    // closed e.eX#1 as range 2
    //DEBUG: e.eX#1: 2

    refalrts::reset_allocator();
    //TRASH: {REMOVED TILE} </0 {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ HalfReuse: </4 HalfReuse: & DoNewName0/5 AsIs: e.eX#1/2 AsIs: >/1 ]] }
    refalrts::reinit_open_call( context[4] );
    refalrts::reinit_name( context[5], ref_DoNewName0.ref.function );
    refalrts::push_stack( context[1] );
    refalrts::push_stack( context[4] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[4];
    refalrts::splice_to_freelist_open( trash_prev, res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence();

  do {
    // ( 'DoNewName0' ) e.idx
    // </0 & Mu/4 (/5 'D'/9 'o'/10 'N'/11 'e'/12 'w'/13 'N'/14 'a'/15 'm'/16 'e'/17 '0'/18 )/6 e.eX#1/2 >/1
    context[7] = 0;
    context[8] = 0;
    if( ! refalrts::brackets_term( context[7], context[8], context[5] ) )
      continue;
    context[9] = refalrts::char_left( 'D', context[7], context[8] );
    if( ! context[9] )
      continue;
    context[10] = refalrts::char_left( 'o', context[7], context[8] );
    if( ! context[10] )
      continue;
    context[11] = refalrts::char_left( 'N', context[7], context[8] );
    if( ! context[11] )
      continue;
    context[12] = refalrts::char_left( 'e', context[7], context[8] );
    if( ! context[12] )
      continue;
    context[13] = refalrts::char_left( 'w', context[7], context[8] );
    if( ! context[13] )
      continue;
    context[14] = refalrts::char_left( 'N', context[7], context[8] );
    if( ! context[14] )
      continue;
    context[15] = refalrts::char_left( 'a', context[7], context[8] );
    if( ! context[15] )
      continue;
    context[16] = refalrts::char_left( 'm', context[7], context[8] );
    if( ! context[16] )
      continue;
    context[17] = refalrts::char_left( 'e', context[7], context[8] );
    if( ! context[17] )
      continue;
    context[18] = refalrts::char_left( '0', context[7], context[8] );
    if( ! context[18] )
      continue;
    if( ! refalrts::empty_seq( context[7], context[8] ) )
      continue;
    // closed e.eX#1 as range 2
    //DEBUG: e.eX#1: 2

    refalrts::reset_allocator();
    //TRASH: {REMOVED TILE} </0 & Mu/4 (/5 'D'/9 'o'/10 'N'/11 'e'/12 'w'/13 'N'/14 'a'/15 'm'/16 'e'/17 {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ HalfReuse: </18 HalfReuse: & DoNewName0/6 AsIs: e.eX#1/2 AsIs: >/1 ]] }
    refalrts::reinit_open_call( context[18] );
    refalrts::reinit_name( context[6], ref_DoNewName0.ref.function );
    refalrts::push_stack( context[1] );
    refalrts::push_stack( context[18] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[18];
    refalrts::splice_to_freelist_open( trash_prev, res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence();

  do {
    // # Symbol e.idx
    // </0 & Mu/4 # Symbol/5 e.eX#1/2 >/1
    if( ! refalrts::ident_term(  ident_Symbol, context[5] ) )
      continue;
    // closed e.eX#1 as range 2
    //DEBUG: e.eX#1: 2

    refalrts::reset_allocator();
    //TRASH: {REMOVED TILE} </0 {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ HalfReuse: </4 HalfReuse: & Symbol/5 AsIs: e.eX#1/2 AsIs: >/1 ]] }
    refalrts::reinit_open_call( context[4] );
    refalrts::reinit_name( context[5], ref_Symbol.ref.function );
    refalrts::push_stack( context[1] );
    refalrts::push_stack( context[4] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[4];
    refalrts::splice_to_freelist_open( trash_prev, res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence();

  do {
    // ( 'Symbol' ) e.idx
    // </0 & Mu/4 (/5 'S'/9 'y'/10 'm'/11 'b'/12 'o'/13 'l'/14 )/6 e.eX#1/2 >/1
    context[7] = 0;
    context[8] = 0;
    if( ! refalrts::brackets_term( context[7], context[8], context[5] ) )
      continue;
    context[9] = refalrts::char_left( 'S', context[7], context[8] );
    if( ! context[9] )
      continue;
    context[10] = refalrts::char_left( 'y', context[7], context[8] );
    if( ! context[10] )
      continue;
    context[11] = refalrts::char_left( 'm', context[7], context[8] );
    if( ! context[11] )
      continue;
    context[12] = refalrts::char_left( 'b', context[7], context[8] );
    if( ! context[12] )
      continue;
    context[13] = refalrts::char_left( 'o', context[7], context[8] );
    if( ! context[13] )
      continue;
    context[14] = refalrts::char_left( 'l', context[7], context[8] );
    if( ! context[14] )
      continue;
    if( ! refalrts::empty_seq( context[7], context[8] ) )
      continue;
    // closed e.eX#1 as range 2
    //DEBUG: e.eX#1: 2

    refalrts::reset_allocator();
    //TRASH: {REMOVED TILE} </0 & Mu/4 (/5 'S'/9 'y'/10 'm'/11 'b'/12 'o'/13 {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ HalfReuse: </14 HalfReuse: & Symbol/6 AsIs: e.eX#1/2 AsIs: >/1 ]] }
    refalrts::reinit_open_call( context[14] );
    refalrts::reinit_name( context[6], ref_Symbol.ref.function );
    refalrts::push_stack( context[1] );
    refalrts::push_stack( context[14] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[14];
    refalrts::splice_to_freelist_open( trash_prev, res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence();

  do {
    // # Apply e.idx
    // </0 & Mu/4 # Apply/5 e.eX#1/2 >/1
    if( ! refalrts::ident_term(  ident_Apply, context[5] ) )
      continue;
    // closed e.eX#1 as range 2
    //DEBUG: e.eX#1: 2

    refalrts::reset_allocator();
    //TRASH: {REMOVED TILE} </0 {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ HalfReuse: </4 HalfReuse: & Apply/5 AsIs: e.eX#1/2 AsIs: >/1 ]] }
    refalrts::reinit_open_call( context[4] );
    refalrts::reinit_name( context[5], ref_Apply.ref.function );
    refalrts::push_stack( context[1] );
    refalrts::push_stack( context[4] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[4];
    refalrts::splice_to_freelist_open( trash_prev, res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence();

  do {
    // ( 'Apply' ) e.idx
    // </0 & Mu/4 (/5 'A'/9 'p'/10 'p'/11 'l'/12 'y'/13 )/6 e.eX#1/2 >/1
    context[7] = 0;
    context[8] = 0;
    if( ! refalrts::brackets_term( context[7], context[8], context[5] ) )
      continue;
    context[9] = refalrts::char_left( 'A', context[7], context[8] );
    if( ! context[9] )
      continue;
    context[10] = refalrts::char_left( 'p', context[7], context[8] );
    if( ! context[10] )
      continue;
    context[11] = refalrts::char_left( 'p', context[7], context[8] );
    if( ! context[11] )
      continue;
    context[12] = refalrts::char_left( 'l', context[7], context[8] );
    if( ! context[12] )
      continue;
    context[13] = refalrts::char_left( 'y', context[7], context[8] );
    if( ! context[13] )
      continue;
    if( ! refalrts::empty_seq( context[7], context[8] ) )
      continue;
    // closed e.eX#1 as range 2
    //DEBUG: e.eX#1: 2

    refalrts::reset_allocator();
    //TRASH: {REMOVED TILE} </0 & Mu/4 (/5 'A'/9 'p'/10 'p'/11 'l'/12 {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ HalfReuse: </13 HalfReuse: & Apply/6 AsIs: e.eX#1/2 AsIs: >/1 ]] }
    refalrts::reinit_open_call( context[13] );
    refalrts::reinit_name( context[6], ref_Apply.ref.function );
    refalrts::push_stack( context[1] );
    refalrts::push_stack( context[13] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[13];
    refalrts::splice_to_freelist_open( trash_prev, res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence();

  do {
    // # Map e.idx
    // </0 & Mu/4 # Map/5 e.eX#1/2 >/1
    if( ! refalrts::ident_term(  ident_Map, context[5] ) )
      continue;
    // closed e.eX#1 as range 2
    //DEBUG: e.eX#1: 2

    refalrts::reset_allocator();
    //TRASH: {REMOVED TILE} </0 {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ HalfReuse: </4 HalfReuse: & Map/5 AsIs: e.eX#1/2 AsIs: >/1 ]] }
    refalrts::reinit_open_call( context[4] );
    refalrts::reinit_name( context[5], ref_Map.ref.function );
    refalrts::push_stack( context[1] );
    refalrts::push_stack( context[4] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[4];
    refalrts::splice_to_freelist_open( trash_prev, res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence();

  // ( 'Map' ) e.idx
  // </0 & Mu/4 (/5 'M'/9 'a'/10 'p'/11 )/6 e.eX#1/2 >/1
  context[7] = 0;
  context[8] = 0;
  if( ! refalrts::brackets_term( context[7], context[8], context[5] ) )
    return refalrts::cRecognitionImpossible;
  context[9] = refalrts::char_left( 'M', context[7], context[8] );
  if( ! context[9] )
    return refalrts::cRecognitionImpossible;
  context[10] = refalrts::char_left( 'a', context[7], context[8] );
  if( ! context[10] )
    return refalrts::cRecognitionImpossible;
  context[11] = refalrts::char_left( 'p', context[7], context[8] );
  if( ! context[11] )
    return refalrts::cRecognitionImpossible;
  if( ! refalrts::empty_seq( context[7], context[8] ) )
    return refalrts::cRecognitionImpossible;
  // closed e.eX#1 as range 2
  //DEBUG: e.eX#1: 2

  refalrts::reset_allocator();
  //TRASH: {REMOVED TILE} </0 & Mu/4 (/5 'M'/9 'a'/10 {REMOVED TILE}
  //RESULT: Tile{ [[ } Tile{ HalfReuse: </11 HalfReuse: & Map/6 AsIs: e.eX#1/2 AsIs: >/1 ]] }
  refalrts::reinit_open_call( context[11] );
  refalrts::reinit_name( context[6], ref_Map.ref.function );
  refalrts::push_stack( context[1] );
  refalrts::push_stack( context[11] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[11];
  refalrts::splice_to_freelist_open( trash_prev, res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_Mu("Mu", 786251477U, 1176157594U, func_Mu);

static refalrts::FnResult func_R5m_Transform(refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  refalrts::this_is_generated_function();
  // issue here memory for vars with 10 elems
  refalrts::Iter context[10];
  refalrts::zeros( context, 10 );
  // </0 & R5-Transform/4 e.eUnits#1/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.eUnits#1 as range 2
  //DEBUG: e.eUnits#1: 2

  refalrts::reset_allocator();
  //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ AsIs: </0 Reuse: & Transform-Step/4 } # UnCondition/5 </6 & Transform-Step/7 # UnBlock/8 Tile{ AsIs: e.eUnits#1/2 } >/9 Tile{ AsIs: >/1 ]] }
  if( ! refalrts::alloc_ident( context[5], ident_UnCondition ) )
    return refalrts::cNoMemory;
  if( ! refalrts::alloc_open_call( context[6] ) )
    return refalrts::cNoMemory;
  if( ! refalrts::alloc_name( context[7], ref_Transformm_Step.ref.function ) )
    return refalrts::cNoMemory;
  if( ! refalrts::alloc_ident( context[8], ident_UnBlock ) )
    return refalrts::cNoMemory;
  if( ! refalrts::alloc_close_call( context[9] ) )
    return refalrts::cNoMemory;
  refalrts::update_name( context[4], ref_Transformm_Step.ref.function );
  refalrts::push_stack( context[1] );
  refalrts::push_stack( context[0] );
  refalrts::push_stack( context[9] );
  refalrts::push_stack( context[6] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[1];
  res = refalrts::splice_evar( res, context[9], context[9] );
  res = refalrts::splice_evar( res, context[2], context[3] );
  res = refalrts::splice_evar( res, context[5], context[8] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_R5m_Transform("R5-Transform", 0U, 0U, func_R5m_Transform);

static refalrts::FnResult func_Transformm_Step(refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  refalrts::this_is_generated_function();
  // issue here memory for vars with 14 elems
  refalrts::Iter context[14];
  refalrts::zeros( context, 14 );
  // </0 & Transform-Step/4 s.sFnMode#1/5 e.eUnits#1/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  if( ! refalrts::svar_left( context[5], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  // closed e.eUnits#1 as range 2
  //DEBUG: s.sFnMode#1: 5
  //DEBUG: e.eUnits#1: 2

  refalrts::reset_allocator();
  //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ AsIs: </0 Reuse: & DoTransform/4 AsIs: s.sFnMode#1/5 } </6 & GetFunctionNames/7 (/8 </9 & R5-Builtins/10 >/11 )/12 Tile{ AsIs: e.eUnits#1/2 } >/13 Tile{ AsIs: >/1 ]] }
  if( ! refalrts::alloc_open_call( context[6] ) )
    return refalrts::cNoMemory;
  if( ! refalrts::alloc_name( context[7], ref_GetFunctionNames.ref.function ) )
    return refalrts::cNoMemory;
  if( ! refalrts::alloc_open_bracket( context[8] ) )
    return refalrts::cNoMemory;
  if( ! refalrts::alloc_open_call( context[9] ) )
    return refalrts::cNoMemory;
  if( ! refalrts::alloc_name( context[10], ref_R5m_Builtins.ref.function ) )
    return refalrts::cNoMemory;
  if( ! refalrts::alloc_close_call( context[11] ) )
    return refalrts::cNoMemory;
  if( ! refalrts::alloc_close_bracket( context[12] ) )
    return refalrts::cNoMemory;
  if( ! refalrts::alloc_close_call( context[13] ) )
    return refalrts::cNoMemory;
  refalrts::update_name( context[4], ref_DoTransform.ref.function );
  refalrts::push_stack( context[1] );
  refalrts::push_stack( context[0] );
  refalrts::push_stack( context[13] );
  refalrts::push_stack( context[6] );
  refalrts::link_brackets( context[8], context[12] );
  refalrts::push_stack( context[11] );
  refalrts::push_stack( context[9] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[1];
  res = refalrts::splice_evar( res, context[13], context[13] );
  res = refalrts::splice_evar( res, context[2], context[3] );
  res = refalrts::splice_evar( res, context[6], context[12] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_Transformm_Step("Transform-Step", 786251477U, 1176157594U, func_Transformm_Step);

static refalrts::FnResult func_GetFunctionNames(refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  refalrts::this_is_generated_function();
  // issue here memory for vars with 27 elems
  refalrts::Iter context[27];
  refalrts::zeros( context, 27 );
  //FAST GEN: e.$
  //GLOBAL GEN: ( e.$ ) e.$
  // </0 & GetFunctionNames/4 (/7 e.idxB#0/5 )/8 e.idxT#0/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  context[5] = 0;
  context[6] = 0;
  context[7] = refalrts::brackets_left( context[5], context[6], context[2], context[3] );
  if( ! context[7] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[7], context[8]);
  // closed e.idxB#0 as range 5
  // closed e.idxT#0 as range 2
  do {
    // ( e.idx ) e.idx ( # Function t.idx ( e.idx ) s.idx e.idx )
    // </0 & GetFunctionNames/4 (/7 e.eNames#1/5 )/8 e.eUnits#1/2 (/11 # Function/13 t.tSrcPos#1/14 (/18 e.eName#1/16 )/19 s.sScope#1/20 e.eSentences#1/9 )/12 >/1
    context[25] = context[2];
    context[26] = context[3];
    context[9] = 0;
    context[10] = 0;
    context[11] = refalrts::brackets_right( context[9], context[10], context[25], context[26] );
    if( ! context[11] )
      continue;
    refalrts::bracket_pointers(context[11], context[12]);
    context[13] = refalrts::ident_left(  ident_Function, context[9], context[10] );
    if( ! context[13] )
      continue;
    // closed e.eNames#1 as range 5
    // closed e.eUnits#1 as range 25(2)
    context[15] = refalrts::tvar_left( context[14], context[9], context[10] );
    if( ! context[15] )
      continue;
    context[16] = 0;
    context[17] = 0;
    context[18] = refalrts::brackets_left( context[16], context[17], context[9], context[10] );
    if( ! context[18] )
      continue;
    refalrts::bracket_pointers(context[18], context[19]);
    // closed e.eName#1 as range 16
    if( ! refalrts::svar_left( context[20], context[9], context[10] ) )
      continue;
    // closed e.eSentences#1 as range 9
    //DEBUG: e.eNames#1: 5
    //DEBUG: e.eUnits#1: 2
    //DEBUG: t.tSrcPos#1: 14
    //DEBUG: e.eName#1: 16
    //DEBUG: s.sScope#1: 20
    //DEBUG: e.eSentences#1: 9

    refalrts::reset_allocator();
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 AsIs: & GetFunctionNames/4 AsIs: (/7 AsIs: e.eNames#1/5 HalfReuse: (/8 } e.eName#1/16/21 )/23 )/24 Tile{ AsIs: e.eUnits#1/25(2) } Tile{ AsIs: >/1 } Tile{ AsIs: (/11 AsIs: # Function/13 AsIs: t.tSrcPos#1/14 AsIs: (/18 AsIs: e.eName#1/16 AsIs: )/19 AsIs: s.sScope#1/20 AsIs: e.eSentences#1/9 AsIs: )/12 } Tile{ ]] }
    if (! refalrts::copy_evar(context[21], context[22], context[16], context[17]))
      return refalrts::cNoMemory;
    if( ! refalrts::alloc_close_bracket( context[23] ) )
      return refalrts::cNoMemory;
    if( ! refalrts::alloc_close_bracket( context[24] ) )
      return refalrts::cNoMemory;
    refalrts::reinit_open_bracket( context[8] );
    refalrts::link_brackets( context[11], context[12] );
    refalrts::link_brackets( context[18], context[19] );
    refalrts::push_stack( context[1] );
    refalrts::push_stack( context[0] );
    refalrts::link_brackets( context[7], context[24] );
    refalrts::link_brackets( context[8], context[23] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = arg_end->next;
    res = refalrts::splice_evar( res, context[11], context[12] );
    res = refalrts::splice_evar( res, context[1], context[1] );
    res = refalrts::splice_evar( res, context[25], context[26] );
    res = refalrts::splice_evar( res, context[23], context[24] );
    res = refalrts::splice_evar( res, context[21], context[22] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence();

  do {
    // ( e.idx ) e.idx ( # Extern e.idx )
    // </0 & GetFunctionNames/4 (/7 e.eNames#1/5 )/8 e.eUnits#1/2 (/11 # Extern/13 e.eExternalNames#1/9 )/12 >/1
    context[25] = context[2];
    context[26] = context[3];
    context[9] = 0;
    context[10] = 0;
    context[11] = refalrts::brackets_right( context[9], context[10], context[25], context[26] );
    if( ! context[11] )
      continue;
    refalrts::bracket_pointers(context[11], context[12]);
    context[13] = refalrts::ident_left(  ident_Extern, context[9], context[10] );
    if( ! context[13] )
      continue;
    // closed e.eNames#1 as range 5
    // closed e.eUnits#1 as range 25(2)
    // closed e.eExternalNames#1 as range 9
    //DEBUG: e.eNames#1: 5
    //DEBUG: e.eUnits#1: 2
    //DEBUG: e.eExternalNames#1: 9

    refalrts::reset_allocator();
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 AsIs: & GetFunctionNames/4 AsIs: (/7 } Tile{ AsIs: e.eNames#1/5 } e.eExternalNames#1/9/14 Tile{ AsIs: )/8 } Tile{ AsIs: e.eUnits#1/25(2) } Tile{ AsIs: >/1 } Tile{ AsIs: (/11 AsIs: # Extern/13 AsIs: e.eExternalNames#1/9 AsIs: )/12 } Tile{ ]] }
    if (! refalrts::copy_evar(context[14], context[15], context[9], context[10]))
      return refalrts::cNoMemory;
    refalrts::link_brackets( context[11], context[12] );
    refalrts::push_stack( context[1] );
    refalrts::push_stack( context[0] );
    refalrts::link_brackets( context[7], context[8] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = arg_end->next;
    res = refalrts::splice_evar( res, context[11], context[12] );
    res = refalrts::splice_evar( res, context[1], context[1] );
    res = refalrts::splice_evar( res, context[25], context[26] );
    res = refalrts::splice_evar( res, context[8], context[8] );
    res = refalrts::splice_evar( res, context[14], context[15] );
    res = refalrts::splice_evar( res, context[5], context[6] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence();

  do {
    // ( e.idx ) e.idx ( # SpecialComment t.idx e.idx )
    // </0 & GetFunctionNames/4 (/7 e.eNames#1/5 )/8 e.eUnits#1/2 (/11 # SpecialComment/13 t.tSrcPos#1/14 e.eText#1/9 )/12 >/1
    context[25] = context[2];
    context[26] = context[3];
    context[9] = 0;
    context[10] = 0;
    context[11] = refalrts::brackets_right( context[9], context[10], context[25], context[26] );
    if( ! context[11] )
      continue;
    refalrts::bracket_pointers(context[11], context[12]);
    context[13] = refalrts::ident_left(  ident_SpecialComment, context[9], context[10] );
    if( ! context[13] )
      continue;
    // closed e.eNames#1 as range 5
    // closed e.eUnits#1 as range 25(2)
    context[15] = refalrts::tvar_left( context[14], context[9], context[10] );
    if( ! context[15] )
      continue;
    // closed e.eText#1 as range 9
    //DEBUG: e.eNames#1: 5
    //DEBUG: e.eUnits#1: 2
    //DEBUG: t.tSrcPos#1: 14
    //DEBUG: e.eText#1: 9

    refalrts::reset_allocator();
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 AsIs: & GetFunctionNames/4 AsIs: (/7 AsIs: e.eNames#1/5 AsIs: )/8 AsIs: e.eUnits#1/25(2) HalfReuse: >/11 HalfReuse: (/13 } Tile{ HalfReuse: # SpecialComment/1 } Tile{ AsIs: t.tSrcPos#1/14 AsIs: e.eText#1/9 AsIs: )/12 } Tile{ ]] }
    refalrts::reinit_close_call( context[11] );
    refalrts::reinit_open_bracket( context[13] );
    refalrts::reinit_ident( context[1], ident_SpecialComment );
    refalrts::link_brackets( context[13], context[12] );
    refalrts::push_stack( context[11] );
    refalrts::push_stack( context[0] );
    refalrts::link_brackets( context[7], context[8] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = arg_end->next;
    res = refalrts::splice_evar( res, context[14], context[12] );
    res = refalrts::splice_evar( res, context[1], context[1] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence();

  // ( e.idx )
  // </0 & GetFunctionNames/4 (/7 e.eNames#1/5 )/8 >/1
  if( ! refalrts::empty_seq( context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  // closed e.eNames#1 as range 5
  //DEBUG: e.eNames#1: 5

  refalrts::reset_allocator();
  //TRASH: {REMOVED TILE} </0 & GetFunctionNames/4 {REMOVED TILE} >/1 {REMOVED TILE}
  //RESULT: Tile{ [[ } Tile{ AsIs: (/7 AsIs: e.eNames#1/5 AsIs: )/8 } Tile{ ]] }
  refalrts::link_brackets( context[7], context[8] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = arg_end->next;
  res = refalrts::splice_evar( res, context[7], context[8] );
  refalrts::splice_to_freelist_open( trash_prev, res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_GetFunctionNames("GetFunctionNames", 786251477U, 1176157594U, func_GetFunctionNames);

static refalrts::FnResult func_DoTransform(refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  refalrts::this_is_generated_function();
  // issue here memory for vars with 42 elems
  refalrts::Iter context[42];
  refalrts::zeros( context, 42 );
  //FAST GEN: e.$
  //GLOBAL GEN: e.$
  // </0 & DoTransform/4 e.idx#0/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.idx#0 as range 2
  do {
    // s.idx ( e.idx ) ( # Function t.idx ( e.idx ) s.idx e.idx ) e.idx
    // </0 & DoTransform/4 s.sFnMode#1/5 (/8 e.eNames#1/6 )/9 (/12 # Function/14 t.tSrcPos#1/15 (/19 e.eName#1/17 )/20 s.sScope#1/21 e.eSentences#1/10 )/13 e.eUnits#1/2 >/1
    context[40] = context[2];
    context[41] = context[3];
    if( ! refalrts::svar_left( context[5], context[40], context[41] ) )
      continue;
    context[6] = 0;
    context[7] = 0;
    context[8] = refalrts::brackets_left( context[6], context[7], context[40], context[41] );
    if( ! context[8] )
      continue;
    refalrts::bracket_pointers(context[8], context[9]);
    context[10] = 0;
    context[11] = 0;
    context[12] = refalrts::brackets_left( context[10], context[11], context[40], context[41] );
    if( ! context[12] )
      continue;
    refalrts::bracket_pointers(context[12], context[13]);
    context[14] = refalrts::ident_left(  ident_Function, context[10], context[11] );
    if( ! context[14] )
      continue;
    // closed e.eNames#1 as range 6
    // closed e.eUnits#1 as range 40(2)
    context[16] = refalrts::tvar_left( context[15], context[10], context[11] );
    if( ! context[16] )
      continue;
    context[17] = 0;
    context[18] = 0;
    context[19] = refalrts::brackets_left( context[17], context[18], context[10], context[11] );
    if( ! context[19] )
      continue;
    refalrts::bracket_pointers(context[19], context[20]);
    // closed e.eName#1 as range 17
    if( ! refalrts::svar_left( context[21], context[10], context[11] ) )
      continue;
    // closed e.eSentences#1 as range 10
    //DEBUG: s.sFnMode#1: 5
    //DEBUG: e.eNames#1: 6
    //DEBUG: e.eUnits#1: 2
    //DEBUG: t.tSrcPos#1: 15
    //DEBUG: e.eName#1: 17
    //DEBUG: s.sScope#1: 21
    //DEBUG: e.eSentences#1: 10

    refalrts::reset_allocator();
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 Reuse: & DoTransform_check/4 AsIs: s.sFnMode#1/5 AsIs: (/8 AsIs: e.eNames#1/6 AsIs: )/9 } t.tSrcPos#1/15/22 Tile{ AsIs: (/12 } e.eName#1/17/24 )/26 s.sScope#1/21/27 (/28 e.eSentences#1/10/29 )/31 (/32 Tile{ AsIs: e.eUnits#1/40(2) } )/33 </34 & Mu/35 s.sFnMode#1/5/36 (/37 e.eNames#1/6/38 Tile{ HalfReuse: )/14 AsIs: t.tSrcPos#1/15 AsIs: (/19 AsIs: e.eName#1/17 AsIs: )/20 AsIs: s.sScope#1/21 AsIs: e.eSentences#1/10 HalfReuse: >/13 } Tile{ AsIs: >/1 ]] }
    if (! refalrts::copy_evar(context[22], context[23], context[15], context[16]))
      return refalrts::cNoMemory;
    if (! refalrts::copy_evar(context[24], context[25], context[17], context[18]))
      return refalrts::cNoMemory;
    if( ! refalrts::alloc_close_bracket( context[26] ) )
      return refalrts::cNoMemory;
    if (! refalrts::copy_stvar(context[27], context[21]))
      return refalrts::cNoMemory;
    if( ! refalrts::alloc_open_bracket( context[28] ) )
      return refalrts::cNoMemory;
    if (! refalrts::copy_evar(context[29], context[30], context[10], context[11]))
      return refalrts::cNoMemory;
    if( ! refalrts::alloc_close_bracket( context[31] ) )
      return refalrts::cNoMemory;
    if( ! refalrts::alloc_open_bracket( context[32] ) )
      return refalrts::cNoMemory;
    if( ! refalrts::alloc_close_bracket( context[33] ) )
      return refalrts::cNoMemory;
    if( ! refalrts::alloc_open_call( context[34] ) )
      return refalrts::cNoMemory;
    if( ! refalrts::alloc_name( context[35], ref_Mu.ref.function ) )
      return refalrts::cNoMemory;
    if (! refalrts::copy_stvar(context[36], context[5]))
      return refalrts::cNoMemory;
    if( ! refalrts::alloc_open_bracket( context[37] ) )
      return refalrts::cNoMemory;
    if (! refalrts::copy_evar(context[38], context[39], context[6], context[7]))
      return refalrts::cNoMemory;
    refalrts::update_name( context[4], ref_DoTransformu_check.ref.function );
    refalrts::reinit_close_bracket( context[14] );
    refalrts::reinit_close_call( context[13] );
    refalrts::push_stack( context[1] );
    refalrts::push_stack( context[0] );
    refalrts::push_stack( context[13] );
    refalrts::push_stack( context[34] );
    refalrts::link_brackets( context[19], context[20] );
    refalrts::link_brackets( context[37], context[14] );
    refalrts::link_brackets( context[32], context[33] );
    refalrts::link_brackets( context[28], context[31] );
    refalrts::link_brackets( context[12], context[26] );
    refalrts::link_brackets( context[8], context[9] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    res = refalrts::splice_evar( res, context[14], context[13] );
    res = refalrts::splice_evar( res, context[38], context[39] );
    res = refalrts::splice_evar( res, context[33], context[37] );
    res = refalrts::splice_evar( res, context[40], context[41] );
    res = refalrts::splice_evar( res, context[26], context[32] );
    res = refalrts::splice_evar( res, context[24], context[25] );
    res = refalrts::splice_evar( res, context[12], context[12] );
    res = refalrts::splice_evar( res, context[22], context[23] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence();

  // e.idx
  // </0 & DoTransform/4 e.eOther#1/2 >/1
  // closed e.eOther#1 as range 2
  //DEBUG: e.eOther#1: 2

  refalrts::reset_allocator();
  //TRASH: {REMOVED TILE}
  //RESULT: Tile{ [[ AsIs: </0 Reuse: & DoTransform_cont/4 AsIs: e.eOther#1/2 AsIs: >/1 ]] }
  refalrts::update_name( context[4], ref_DoTransformu_cont.ref.function );
  refalrts::push_stack( context[1] );
  refalrts::push_stack( context[0] );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_DoTransform("DoTransform", 786251477U, 1176157594U, func_DoTransform);

static refalrts::FnResult func_DoTransformu_check(refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  refalrts::this_is_generated_function();
  // issue here memory for vars with 31 elems
  refalrts::Iter context[31];
  refalrts::zeros( context, 31 );
  //FAST GEN: s.$ ( e.$ ) t.$ ( e.$ ) s.$ ( e.$ ) ( e.$ ) e.$
  //GLOBAL GEN: s.$ ( e.$ ) t.$ ( e.$ ) s.$ ( e.$ ) ( e.$ ) e.$
  // </0 & DoTransform_check/4 s.idx#0/5 (/8 e.idxVB#0/6 )/9 t.idxVT#0/10 (/14 e.idxVTVB#0/12 )/15 s.idxVTVT#0/16 (/19 e.idxVTVTVB#0/17 )/20 (/23 e.idxVTVTVTB#0/21 )/24 e.idxVTVTVTT#0/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  if( ! refalrts::svar_left( context[5], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  context[6] = 0;
  context[7] = 0;
  context[8] = refalrts::brackets_left( context[6], context[7], context[2], context[3] );
  if( ! context[8] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[8], context[9]);
  // closed e.idxVB#0 as range 6
  context[11] = refalrts::tvar_left( context[10], context[2], context[3] );
  if( ! context[11] )
    return refalrts::cRecognitionImpossible;
  context[12] = 0;
  context[13] = 0;
  context[14] = refalrts::brackets_left( context[12], context[13], context[2], context[3] );
  if( ! context[14] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[14], context[15]);
  // closed e.idxVTVB#0 as range 12
  if( ! refalrts::svar_left( context[16], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  context[17] = 0;
  context[18] = 0;
  context[19] = refalrts::brackets_left( context[17], context[18], context[2], context[3] );
  if( ! context[19] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[19], context[20]);
  context[21] = 0;
  context[22] = 0;
  context[23] = refalrts::brackets_left( context[21], context[22], context[2], context[3] );
  if( ! context[23] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[23], context[24]);
  // closed e.idxVTVTVB#0 as range 17
  // closed e.idxVTVTVTB#0 as range 21
  // closed e.idxVTVTVTT#0 as range 2
  do {
    // s.idx ( e.idx ) t.idx ( e.idx ) s.idx ( e.idx ) ( e.idx ) ( e.idx ) e.idx
    // </0 & DoTransform_check/4 s.sFnMode#1/5 (/8 e.eNames#1/6 )/9 t.tSrcPos#1/10 (/14 e.eName#1/12 )/15 s.sScope#1/16 (/19 e.eSentences#1/17 )/20 (/23 e.eUnits#1/21 )/24 (/27 e.eNewNames#1/25 )/28 e.eNewFunctions#1/2 >/1
    context[29] = context[2];
    context[30] = context[3];
    context[25] = 0;
    context[26] = 0;
    context[27] = refalrts::brackets_left( context[25], context[26], context[29], context[30] );
    if( ! context[27] )
      continue;
    refalrts::bracket_pointers(context[27], context[28]);
    // closed e.eNames#1 as range 6
    // closed e.eName#1 as range 12
    // closed e.eSentences#1 as range 17
    // closed e.eUnits#1 as range 21
    // closed e.eNewNames#1 as range 25
    // closed e.eNewFunctions#1 as range 29(2)
    //DEBUG: t.tSrcPos#1: 10
    //DEBUG: s.sFnMode#1: 5
    //DEBUG: s.sScope#1: 16
    //DEBUG: e.eNames#1: 6
    //DEBUG: e.eName#1: 12
    //DEBUG: e.eSentences#1: 17
    //DEBUG: e.eUnits#1: 21
    //DEBUG: e.eNewNames#1: 25
    //DEBUG: e.eNewFunctions#1: 2

    refalrts::reset_allocator();
    //TRASH: {REMOVED TILE} {REMOVED TILE} e.eNames#1/6 )/9 t.tSrcPos#1/10 (/14 e.eName#1/12 )/15 s.sScope#1/16 (/19 e.eSentences#1/17 )/20 (/23 {REMOVED TILE} {REMOVED TILE} (/27 {REMOVED TILE} )/28 {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ AsIs: e.eNewFunctions#1/29(2) } Tile{ AsIs: </0 Reuse: & DoTransform/4 AsIs: s.sFnMode#1/5 AsIs: (/8 } Tile{ AsIs: e.eNewNames#1/25 } Tile{ AsIs: )/24 } Tile{ AsIs: e.eUnits#1/21 } Tile{ AsIs: >/1 ]] }
    refalrts::update_name( context[4], ref_DoTransform.ref.function );
    refalrts::push_stack( context[1] );
    refalrts::push_stack( context[0] );
    refalrts::link_brackets( context[8], context[24] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    res = refalrts::splice_evar( res, context[21], context[22] );
    res = refalrts::splice_evar( res, context[24], context[24] );
    res = refalrts::splice_evar( res, context[25], context[26] );
    res = refalrts::splice_evar( res, context[0], context[8] );
    res = refalrts::splice_evar( res, context[29], context[30] );
    refalrts::splice_to_freelist_open( trash_prev, res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence();

  // s.idx ( e.idx ) t.idx ( e.idx ) s.idx ( e.idx ) ( e.idx ) e.idx
  // </0 & DoTransform_check/4 s.sFnMode#1/5 (/8 e.eNames#1/6 )/9 t.tSrcPos#1/10 (/14 e.eName#1/12 )/15 s.sScope#1/16 (/19 e.eSentences#1/17 )/20 (/23 e.eUnits#1/21 )/24 e.eOther#1/2 >/1
  // closed e.eNames#1 as range 6
  // closed e.eName#1 as range 12
  // closed e.eSentences#1 as range 17
  // closed e.eUnits#1 as range 21
  // closed e.eOther#1 as range 2
  //DEBUG: t.tSrcPos#1: 10
  //DEBUG: s.sFnMode#1: 5
  //DEBUG: s.sScope#1: 16
  //DEBUG: e.eNames#1: 6
  //DEBUG: e.eName#1: 12
  //DEBUG: e.eSentences#1: 17
  //DEBUG: e.eUnits#1: 21
  //DEBUG: e.eOther#1: 2

  refalrts::reset_allocator();
  //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} )/20 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} e.eOther#1/2 {REMOVED TILE}
  //RESULT: Tile{ [[ AsIs: </0 Reuse: & DoTransform_cont/4 AsIs: s.sFnMode#1/5 AsIs: (/8 AsIs: e.eNames#1/6 AsIs: )/9 } Tile{ AsIs: (/23 } Tile{ HalfReuse: # Function/19 } Tile{ AsIs: t.tSrcPos#1/10 AsIs: (/14 AsIs: e.eName#1/12 AsIs: )/15 AsIs: s.sScope#1/16 } Tile{ AsIs: e.eSentences#1/17 } Tile{ AsIs: )/24 } Tile{ AsIs: e.eUnits#1/21 } Tile{ AsIs: >/1 ]] }
  refalrts::update_name( context[4], ref_DoTransformu_cont.ref.function );
  refalrts::reinit_ident( context[19], ident_Function );
  refalrts::push_stack( context[1] );
  refalrts::push_stack( context[0] );
  refalrts::link_brackets( context[23], context[24] );
  refalrts::link_brackets( context[14], context[15] );
  refalrts::link_brackets( context[8], context[9] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[1];
  res = refalrts::splice_evar( res, context[21], context[22] );
  res = refalrts::splice_evar( res, context[24], context[24] );
  res = refalrts::splice_evar( res, context[17], context[18] );
  res = refalrts::splice_evar( res, context[10], context[16] );
  res = refalrts::splice_evar( res, context[19], context[19] );
  res = refalrts::splice_evar( res, context[23], context[23] );
  refalrts::splice_to_freelist_open( context[9], res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_DoTransformu_check("DoTransform_check", 786251477U, 1176157594U, func_DoTransformu_check);

static refalrts::FnResult func_DoTransformu_cont(refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  refalrts::this_is_generated_function();
  // issue here memory for vars with 19 elems
  refalrts::Iter context[19];
  refalrts::zeros( context, 19 );
  //FAST GEN: e.$
  //GLOBAL GEN: s.$ ( e.$ ) e.$
  // </0 & DoTransform_cont/4 s.idx#0/5 (/8 e.idxVB#0/6 )/9 e.idxVT#0/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  if( ! refalrts::svar_left( context[5], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  context[6] = 0;
  context[7] = 0;
  context[8] = refalrts::brackets_left( context[6], context[7], context[2], context[3] );
  if( ! context[8] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[8], context[9]);
  // closed e.idxVB#0 as range 6
  // closed e.idxVT#0 as range 2
  do {
    // s.idx ( e.idx ) ( # Extern e.idx ) e.idx
    // </0 & DoTransform_cont/4 s.sFnMode#1/5 (/8 e.eNames#1/6 )/9 (/12 # Extern/14 e.eExternNames#1/10 )/13 e.eUnits#1/2 >/1
    context[17] = context[2];
    context[18] = context[3];
    context[10] = 0;
    context[11] = 0;
    context[12] = refalrts::brackets_left( context[10], context[11], context[17], context[18] );
    if( ! context[12] )
      continue;
    refalrts::bracket_pointers(context[12], context[13]);
    context[14] = refalrts::ident_left(  ident_Extern, context[10], context[11] );
    if( ! context[14] )
      continue;
    // closed e.eNames#1 as range 6
    // closed e.eExternNames#1 as range 10
    // closed e.eUnits#1 as range 17(2)
    //DEBUG: s.sFnMode#1: 5
    //DEBUG: e.eNames#1: 6
    //DEBUG: e.eExternNames#1: 10
    //DEBUG: e.eUnits#1: 2

    refalrts::reset_allocator();
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ AsIs: (/12 AsIs: # Extern/14 AsIs: e.eExternNames#1/10 AsIs: )/13 } Tile{ AsIs: </0 Reuse: & DoTransform/4 AsIs: s.sFnMode#1/5 AsIs: (/8 AsIs: e.eNames#1/6 AsIs: )/9 } Tile{ AsIs: e.eUnits#1/17(2) } Tile{ AsIs: >/1 ]] }
    refalrts::update_name( context[4], ref_DoTransform.ref.function );
    refalrts::push_stack( context[1] );
    refalrts::push_stack( context[0] );
    refalrts::link_brackets( context[8], context[9] );
    refalrts::link_brackets( context[12], context[13] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    res = refalrts::splice_evar( res, context[17], context[18] );
    res = refalrts::splice_evar( res, context[0], context[9] );
    res = refalrts::splice_evar( res, context[12], context[13] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence();

  do {
    // s.idx ( e.idx ) ( # SpecialComment t.idx e.idx ) e.idx
    // </0 & DoTransform_cont/4 s.sFnMode#1/5 (/8 e.eNames#1/6 )/9 (/12 # SpecialComment/14 t.tSrcPos#1/15 e.eText#1/10 )/13 e.eUnits#1/2 >/1
    context[17] = context[2];
    context[18] = context[3];
    context[10] = 0;
    context[11] = 0;
    context[12] = refalrts::brackets_left( context[10], context[11], context[17], context[18] );
    if( ! context[12] )
      continue;
    refalrts::bracket_pointers(context[12], context[13]);
    context[14] = refalrts::ident_left(  ident_SpecialComment, context[10], context[11] );
    if( ! context[14] )
      continue;
    // closed e.eNames#1 as range 6
    // closed e.eUnits#1 as range 17(2)
    context[16] = refalrts::tvar_left( context[15], context[10], context[11] );
    if( ! context[16] )
      continue;
    // closed e.eText#1 as range 10
    //DEBUG: s.sFnMode#1: 5
    //DEBUG: e.eNames#1: 6
    //DEBUG: e.eUnits#1: 2
    //DEBUG: t.tSrcPos#1: 15
    //DEBUG: e.eText#1: 10

    refalrts::reset_allocator();
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ AsIs: (/12 AsIs: # SpecialComment/14 AsIs: t.tSrcPos#1/15 AsIs: e.eText#1/10 AsIs: )/13 } Tile{ AsIs: </0 Reuse: & DoTransform/4 AsIs: s.sFnMode#1/5 AsIs: (/8 AsIs: e.eNames#1/6 AsIs: )/9 } Tile{ AsIs: e.eUnits#1/17(2) } Tile{ AsIs: >/1 ]] }
    refalrts::update_name( context[4], ref_DoTransform.ref.function );
    refalrts::push_stack( context[1] );
    refalrts::push_stack( context[0] );
    refalrts::link_brackets( context[8], context[9] );
    refalrts::link_brackets( context[12], context[13] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    res = refalrts::splice_evar( res, context[17], context[18] );
    res = refalrts::splice_evar( res, context[0], context[9] );
    res = refalrts::splice_evar( res, context[12], context[13] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence();

  // s.idx ( e.idx )
  // </0 & DoTransform_cont/4 s.sFnMode#1/5 (/8 e.eNames#1/6 )/9 >/1
  if( ! refalrts::empty_seq( context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  // closed e.eNames#1 as range 6
  //DEBUG: s.sFnMode#1: 5
  //DEBUG: e.eNames#1: 6

  refalrts::reset_allocator();
  //TRASH: {REMOVED TILE} </0 & DoTransform_cont/4 s.sFnMode#1/5 (/8 e.eNames#1/6 )/9 >/1 {REMOVED TILE}
  //RESULT: Tile{ [[ } Tile{ ]] }
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = arg_end->next;
  refalrts::splice_to_freelist_open( trash_prev, res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_DoTransformu_cont("DoTransform_cont", 786251477U, 1176157594U, func_DoTransformu_cont);

static refalrts::FnResult func_UnBlock(refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  refalrts::this_is_generated_function();
  // issue here memory for vars with 26 elems
  refalrts::Iter context[26];
  refalrts::zeros( context, 26 );
  // </0 & UnBlock/4 (/7 e.eNames#1/5 )/8 t.tSrcPos#1/9 (/13 e.eName#1/11 )/14 s.sScope#1/15 e.eSentences#1/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  context[5] = 0;
  context[6] = 0;
  context[7] = refalrts::brackets_left( context[5], context[6], context[2], context[3] );
  if( ! context[7] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[7], context[8]);
  // closed e.eNames#1 as range 5
  context[10] = refalrts::tvar_left( context[9], context[2], context[3] );
  if( ! context[10] )
    return refalrts::cRecognitionImpossible;
  context[11] = 0;
  context[12] = 0;
  context[13] = refalrts::brackets_left( context[11], context[12], context[2], context[3] );
  if( ! context[13] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[13], context[14]);
  // closed e.eName#1 as range 11
  if( ! refalrts::svar_left( context[15], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  // closed e.eSentences#1 as range 2
  //DEBUG: e.eNames#1: 5
  //DEBUG: t.tSrcPos#1: 9
  //DEBUG: e.eName#1: 11
  //DEBUG: s.sScope#1: 15
  //DEBUG: e.eSentences#1: 2

  refalrts::reset_allocator();
  //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ AsIs: </0 Reuse: & DoUnBlock/4 AsIs: (/7 AsIs: e.eNames#1/5 AsIs: )/8 AsIs: t.tSrcPos#1/9 AsIs: (/13 AsIs: e.eName#1/11 AsIs: )/14 AsIs: s.sScope#1/15 } (/16 e.eName#1/11/17 )/19 (/20 )/21 (/22 )/23 Tile{ AsIs: e.eSentences#1/2 } (/24 )/25 Tile{ AsIs: >/1 ]] }
  if( ! refalrts::alloc_open_bracket( context[16] ) )
    return refalrts::cNoMemory;
  if (! refalrts::copy_evar(context[17], context[18], context[11], context[12]))
    return refalrts::cNoMemory;
  if( ! refalrts::alloc_close_bracket( context[19] ) )
    return refalrts::cNoMemory;
  if( ! refalrts::alloc_open_bracket( context[20] ) )
    return refalrts::cNoMemory;
  if( ! refalrts::alloc_close_bracket( context[21] ) )
    return refalrts::cNoMemory;
  if( ! refalrts::alloc_open_bracket( context[22] ) )
    return refalrts::cNoMemory;
  if( ! refalrts::alloc_close_bracket( context[23] ) )
    return refalrts::cNoMemory;
  if( ! refalrts::alloc_open_bracket( context[24] ) )
    return refalrts::cNoMemory;
  if( ! refalrts::alloc_close_bracket( context[25] ) )
    return refalrts::cNoMemory;
  refalrts::update_name( context[4], ref_DoUnBlock.ref.function );
  refalrts::push_stack( context[1] );
  refalrts::push_stack( context[0] );
  refalrts::link_brackets( context[24], context[25] );
  refalrts::link_brackets( context[22], context[23] );
  refalrts::link_brackets( context[20], context[21] );
  refalrts::link_brackets( context[16], context[19] );
  refalrts::link_brackets( context[13], context[14] );
  refalrts::link_brackets( context[7], context[8] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[1];
  res = refalrts::splice_evar( res, context[24], context[25] );
  res = refalrts::splice_evar( res, context[2], context[3] );
  res = refalrts::splice_evar( res, context[16], context[23] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_UnBlock("UnBlock", 786251477U, 1176157594U, func_UnBlock);

static refalrts::FnResult func_DoUnBlock(refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  refalrts::this_is_generated_function();
  // issue here memory for vars with 51 elems
  refalrts::Iter context[51];
  refalrts::zeros( context, 51 );
  //FAST GEN: e.$
  //GLOBAL GEN: e.$
  // </0 & DoUnBlock/4 e.idx#0/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.idx#0 as range 2
  do {
    // ( e.idx ) t.idx ( e.idx ) s.idx ( e.idx ) ( e.idx ) ( e.idx ) e.idx ( e.idx )
    // </0 & DoUnBlock/4 (/7 e.eNames#1/5 )/8 t.tSrcPos#1/13 (/17 e.eName#1/15 )/18 s.sScope#1/19 (/22 e.ePrefix#1/20 )/23 (/26 e.eScannedFunctions#1/24 )/27 (/30 e.eScannedSentences#1/28 )/31 e.eSentences-B#1/32 (/36 e.eBlockedSentence#1/34 )/37 e.eSentences-E#1/2 (/11 e.eUnscannedFunctions#1/9 )/12 >/1
    context[47] = context[2];
    context[48] = context[3];
    context[5] = 0;
    context[6] = 0;
    context[7] = refalrts::brackets_left( context[5], context[6], context[47], context[48] );
    if( ! context[7] )
      continue;
    refalrts::bracket_pointers(context[7], context[8]);
    context[9] = 0;
    context[10] = 0;
    context[11] = refalrts::brackets_right( context[9], context[10], context[47], context[48] );
    if( ! context[11] )
      continue;
    refalrts::bracket_pointers(context[11], context[12]);
    // closed e.eNames#1 as range 5
    // closed e.eUnscannedFunctions#1 as range 9
    context[14] = refalrts::tvar_left( context[13], context[47], context[48] );
    if( ! context[14] )
      continue;
    context[15] = 0;
    context[16] = 0;
    context[17] = refalrts::brackets_left( context[15], context[16], context[47], context[48] );
    if( ! context[17] )
      continue;
    refalrts::bracket_pointers(context[17], context[18]);
    // closed e.eName#1 as range 15
    if( ! refalrts::svar_left( context[19], context[47], context[48] ) )
      continue;
    context[20] = 0;
    context[21] = 0;
    context[22] = refalrts::brackets_left( context[20], context[21], context[47], context[48] );
    if( ! context[22] )
      continue;
    refalrts::bracket_pointers(context[22], context[23]);
    context[24] = 0;
    context[25] = 0;
    context[26] = refalrts::brackets_left( context[24], context[25], context[47], context[48] );
    if( ! context[26] )
      continue;
    refalrts::bracket_pointers(context[26], context[27]);
    context[28] = 0;
    context[29] = 0;
    context[30] = refalrts::brackets_left( context[28], context[29], context[47], context[48] );
    if( ! context[30] )
      continue;
    refalrts::bracket_pointers(context[30], context[31]);
    // closed e.ePrefix#1 as range 20
    // closed e.eScannedFunctions#1 as range 24
    // closed e.eScannedSentences#1 as range 28
    context[32] = 0;
    context[33] = 0;
    refalrts::start_e_loop();
    do {
      context[49] = context[47];
      context[50] = context[48];
      context[34] = 0;
      context[35] = 0;
      context[36] = refalrts::brackets_left( context[34], context[35], context[49], context[50] );
      if( ! context[36] )
        continue;
      refalrts::bracket_pointers(context[36], context[37]);
      // closed e.eBlockedSentence#1 as range 34
      // closed e.eSentences-E#1 as range 49(2)
      //DEBUG: e.eNames#1: 5
      //DEBUG: e.eUnscannedFunctions#1: 9
      //DEBUG: t.tSrcPos#1: 13
      //DEBUG: e.eName#1: 15
      //DEBUG: s.sScope#1: 19
      //DEBUG: e.ePrefix#1: 20
      //DEBUG: e.eScannedFunctions#1: 24
      //DEBUG: e.eScannedSentences#1: 28
      //DEBUG: e.eSentences-B#1: 32
      //DEBUG: e.eBlockedSentence#1: 34
      //DEBUG: e.eSentences-E#1: 2

      refalrts::reset_allocator();
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 Reuse: & DoUnBlock_check/4 AsIs: (/7 AsIs: e.eNames#1/5 AsIs: )/8 AsIs: t.tSrcPos#1/13 AsIs: (/17 AsIs: e.eName#1/15 AsIs: )/18 AsIs: s.sScope#1/19 AsIs: (/22 AsIs: e.ePrefix#1/20 AsIs: )/23 AsIs: (/26 AsIs: e.eScannedFunctions#1/24 AsIs: )/27 AsIs: (/30 AsIs: e.eScannedSentences#1/28 AsIs: )/31 } (/38 Tile{ AsIs: e.eSentences-B#1/32 } )/39 Tile{ AsIs: (/36 AsIs: e.eBlockedSentence#1/34 AsIs: )/37 } (/40 Tile{ AsIs: e.eSentences-E#1/49(2) } )/41 Tile{ AsIs: (/11 AsIs: e.eUnscannedFunctions#1/9 AsIs: )/12 HalfReuse: </1 } & WithBlock/42 e.eBlockedSentence#1/34/43 >/45 >/46 Tile{ ]] }
      if( ! refalrts::alloc_open_bracket( context[38] ) )
        return refalrts::cNoMemory;
      if( ! refalrts::alloc_close_bracket( context[39] ) )
        return refalrts::cNoMemory;
      if( ! refalrts::alloc_open_bracket( context[40] ) )
        return refalrts::cNoMemory;
      if( ! refalrts::alloc_close_bracket( context[41] ) )
        return refalrts::cNoMemory;
      if( ! refalrts::alloc_name( context[42], ref_WithBlock.ref.function ) )
        return refalrts::cNoMemory;
      if (! refalrts::copy_evar(context[43], context[44], context[34], context[35]))
        return refalrts::cNoMemory;
      if( ! refalrts::alloc_close_call( context[45] ) )
        return refalrts::cNoMemory;
      if( ! refalrts::alloc_close_call( context[46] ) )
        return refalrts::cNoMemory;
      refalrts::update_name( context[4], ref_DoUnBlocku_check.ref.function );
      refalrts::reinit_open_call( context[1] );
      refalrts::push_stack( context[46] );
      refalrts::push_stack( context[0] );
      refalrts::push_stack( context[45] );
      refalrts::push_stack( context[1] );
      refalrts::link_brackets( context[11], context[12] );
      refalrts::link_brackets( context[40], context[41] );
      refalrts::link_brackets( context[36], context[37] );
      refalrts::link_brackets( context[38], context[39] );
      refalrts::link_brackets( context[30], context[31] );
      refalrts::link_brackets( context[26], context[27] );
      refalrts::link_brackets( context[22], context[23] );
      refalrts::link_brackets( context[17], context[18] );
      refalrts::link_brackets( context[7], context[8] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = arg_end->next;
      res = refalrts::splice_evar( res, context[42], context[46] );
      res = refalrts::splice_evar( res, context[11], context[1] );
      res = refalrts::splice_evar( res, context[41], context[41] );
      res = refalrts::splice_evar( res, context[49], context[50] );
      res = refalrts::splice_evar( res, context[40], context[40] );
      res = refalrts::splice_evar( res, context[36], context[37] );
      res = refalrts::splice_evar( res, context[39], context[39] );
      res = refalrts::splice_evar( res, context[32], context[33] );
      res = refalrts::splice_evar( res, context[38], context[38] );
      refalrts::use( res );
      return refalrts::cSuccess;
    } while ( refalrts::open_evar_advance( context[32], context[33], context[47], context[48] ) );
  } while ( 0 );
  refalrts::stop_sentence();

  // e.idx
  // </0 & DoUnBlock/4 e.eOther#1/2 >/1
  // closed e.eOther#1 as range 2
  //DEBUG: e.eOther#1: 2

  refalrts::reset_allocator();
  //TRASH: {REMOVED TILE}
  //RESULT: Tile{ [[ AsIs: </0 Reuse: & DoUnBlock_cont/4 AsIs: e.eOther#1/2 AsIs: >/1 ]] }
  refalrts::update_name( context[4], ref_DoUnBlocku_cont.ref.function );
  refalrts::push_stack( context[1] );
  refalrts::push_stack( context[0] );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_DoUnBlock("DoUnBlock", 786251477U, 1176157594U, func_DoUnBlock);

static refalrts::FnResult func_DoUnBlocku_check(refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  refalrts::this_is_generated_function();
  // issue here memory for vars with 65 elems
  refalrts::Iter context[65];
  refalrts::zeros( context, 65 );
  //FAST GEN: e.$
  //GLOBAL GEN: e.$
  // </0 & DoUnBlock_check/4 e.idx#0/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.idx#0 as range 2
  do {
    // ( e.idx ) t.idx ( e.idx ) s.idx ( e.idx ) ( e.idx ) ( e.idx ) ( e.idx ) ( e.idx ) ( e.idx ) ( e.idx ) ( e.idx ) # CALL-BLOCK ( e.idx ) e.idx
    // </0 & DoUnBlock_check/4 (/7 e.eNames#1/5 )/8 t.tSrcPos#1/9 (/13 e.eName#1/11 )/14 s.sScope#1/15 (/18 e.ePrefix#1/16 )/19 (/22 e.eScannedFunctions#1/20 )/23 (/26 e.eScannedSentences#1/24 )/27 (/30 e.eSentences-B#1/28 )/31 (/34 e.eBlockedSentence#1/32 )/35 (/38 e.eSentences-E#1/36 )/39 (/42 e.eUnscannedFunctions#1/40 )/43 (/46 e.eSentencePrefix#1/44 )/47 # CALL-BLOCK/48 (/51 e.eBlockResult#1/49 )/52 e.eSubSentences#1/2 >/1
    context[63] = context[2];
    context[64] = context[3];
    context[5] = 0;
    context[6] = 0;
    context[7] = refalrts::brackets_left( context[5], context[6], context[63], context[64] );
    if( ! context[7] )
      continue;
    refalrts::bracket_pointers(context[7], context[8]);
    // closed e.eNames#1 as range 5
    context[10] = refalrts::tvar_left( context[9], context[63], context[64] );
    if( ! context[10] )
      continue;
    context[11] = 0;
    context[12] = 0;
    context[13] = refalrts::brackets_left( context[11], context[12], context[63], context[64] );
    if( ! context[13] )
      continue;
    refalrts::bracket_pointers(context[13], context[14]);
    // closed e.eName#1 as range 11
    if( ! refalrts::svar_left( context[15], context[63], context[64] ) )
      continue;
    context[16] = 0;
    context[17] = 0;
    context[18] = refalrts::brackets_left( context[16], context[17], context[63], context[64] );
    if( ! context[18] )
      continue;
    refalrts::bracket_pointers(context[18], context[19]);
    context[20] = 0;
    context[21] = 0;
    context[22] = refalrts::brackets_left( context[20], context[21], context[63], context[64] );
    if( ! context[22] )
      continue;
    refalrts::bracket_pointers(context[22], context[23]);
    context[24] = 0;
    context[25] = 0;
    context[26] = refalrts::brackets_left( context[24], context[25], context[63], context[64] );
    if( ! context[26] )
      continue;
    refalrts::bracket_pointers(context[26], context[27]);
    context[28] = 0;
    context[29] = 0;
    context[30] = refalrts::brackets_left( context[28], context[29], context[63], context[64] );
    if( ! context[30] )
      continue;
    refalrts::bracket_pointers(context[30], context[31]);
    context[32] = 0;
    context[33] = 0;
    context[34] = refalrts::brackets_left( context[32], context[33], context[63], context[64] );
    if( ! context[34] )
      continue;
    refalrts::bracket_pointers(context[34], context[35]);
    context[36] = 0;
    context[37] = 0;
    context[38] = refalrts::brackets_left( context[36], context[37], context[63], context[64] );
    if( ! context[38] )
      continue;
    refalrts::bracket_pointers(context[38], context[39]);
    context[40] = 0;
    context[41] = 0;
    context[42] = refalrts::brackets_left( context[40], context[41], context[63], context[64] );
    if( ! context[42] )
      continue;
    refalrts::bracket_pointers(context[42], context[43]);
    context[44] = 0;
    context[45] = 0;
    context[46] = refalrts::brackets_left( context[44], context[45], context[63], context[64] );
    if( ! context[46] )
      continue;
    refalrts::bracket_pointers(context[46], context[47]);
    context[48] = refalrts::ident_left(  ident_CALLm_BLOCK, context[63], context[64] );
    if( ! context[48] )
      continue;
    context[49] = 0;
    context[50] = 0;
    context[51] = refalrts::brackets_left( context[49], context[50], context[63], context[64] );
    if( ! context[51] )
      continue;
    refalrts::bracket_pointers(context[51], context[52]);
    // closed e.ePrefix#1 as range 16
    // closed e.eScannedFunctions#1 as range 20
    // closed e.eScannedSentences#1 as range 24
    // closed e.eSentences-B#1 as range 28
    // closed e.eBlockedSentence#1 as range 32
    // closed e.eSentences-E#1 as range 36
    // closed e.eUnscannedFunctions#1 as range 40
    // closed e.eSentencePrefix#1 as range 44
    // closed e.eBlockResult#1 as range 49
    // closed e.eSubSentences#1 as range 63(2)
    //DEBUG: e.eNames#1: 5
    //DEBUG: t.tSrcPos#1: 9
    //DEBUG: e.eName#1: 11
    //DEBUG: s.sScope#1: 15
    //DEBUG: e.ePrefix#1: 16
    //DEBUG: e.eScannedFunctions#1: 20
    //DEBUG: e.eScannedSentences#1: 24
    //DEBUG: e.eSentences-B#1: 28
    //DEBUG: e.eBlockedSentence#1: 32
    //DEBUG: e.eSentences-E#1: 36
    //DEBUG: e.eUnscannedFunctions#1: 40
    //DEBUG: e.eSentencePrefix#1: 44
    //DEBUG: e.eBlockResult#1: 49
    //DEBUG: e.eSubSentences#1: 2

    refalrts::reset_allocator();
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 Reuse: & DoUnBlock_check0/4 AsIs: (/7 AsIs: e.eNames#1/5 AsIs: )/8 AsIs: t.tSrcPos#1/9 AsIs: (/13 AsIs: e.eName#1/11 AsIs: )/14 AsIs: s.sScope#1/15 AsIs: (/18 AsIs: e.ePrefix#1/16 AsIs: )/19 AsIs: (/22 AsIs: e.eScannedFunctions#1/20 AsIs: )/23 AsIs: (/26 AsIs: e.eScannedSentences#1/24 AsIs: )/27 AsIs: (/30 AsIs: e.eSentences-B#1/28 AsIs: )/31 AsIs: (/34 AsIs: e.eBlockedSentence#1/32 AsIs: )/35 AsIs: (/38 AsIs: e.eSentences-E#1/36 AsIs: )/39 AsIs: (/42 AsIs: e.eUnscannedFunctions#1/40 AsIs: )/43 AsIs: (/46 AsIs: e.eSentencePrefix#1/44 AsIs: )/47 HalfReuse: (/48 } Tile{ AsIs: e.eBlockResult#1/49 } Tile{ AsIs: )/52 } Tile{ AsIs: (/51 } Tile{ AsIs: e.eSubSentences#1/63(2) } )/53 </54 & NewName/55 (/56 e.eNames#1/5/57 )/59 e.ePrefix#1/16/60 >/62 Tile{ AsIs: >/1 ]] }
    if( ! refalrts::alloc_close_bracket( context[53] ) )
      return refalrts::cNoMemory;
    if( ! refalrts::alloc_open_call( context[54] ) )
      return refalrts::cNoMemory;
    if( ! refalrts::alloc_name( context[55], ref_NewName.ref.function ) )
      return refalrts::cNoMemory;
    if( ! refalrts::alloc_open_bracket( context[56] ) )
      return refalrts::cNoMemory;
    if (! refalrts::copy_evar(context[57], context[58], context[5], context[6]))
      return refalrts::cNoMemory;
    if( ! refalrts::alloc_close_bracket( context[59] ) )
      return refalrts::cNoMemory;
    if (! refalrts::copy_evar(context[60], context[61], context[16], context[17]))
      return refalrts::cNoMemory;
    if( ! refalrts::alloc_close_call( context[62] ) )
      return refalrts::cNoMemory;
    refalrts::update_name( context[4], ref_DoUnBlocku_check0.ref.function );
    refalrts::reinit_open_bracket( context[48] );
    refalrts::push_stack( context[1] );
    refalrts::push_stack( context[0] );
    refalrts::push_stack( context[62] );
    refalrts::push_stack( context[54] );
    refalrts::link_brackets( context[56], context[59] );
    refalrts::link_brackets( context[51], context[53] );
    refalrts::link_brackets( context[48], context[52] );
    refalrts::link_brackets( context[46], context[47] );
    refalrts::link_brackets( context[42], context[43] );
    refalrts::link_brackets( context[38], context[39] );
    refalrts::link_brackets( context[34], context[35] );
    refalrts::link_brackets( context[30], context[31] );
    refalrts::link_brackets( context[26], context[27] );
    refalrts::link_brackets( context[22], context[23] );
    refalrts::link_brackets( context[18], context[19] );
    refalrts::link_brackets( context[13], context[14] );
    refalrts::link_brackets( context[7], context[8] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    res = refalrts::splice_evar( res, context[53], context[62] );
    res = refalrts::splice_evar( res, context[63], context[64] );
    res = refalrts::splice_evar( res, context[51], context[51] );
    res = refalrts::splice_evar( res, context[52], context[52] );
    res = refalrts::splice_evar( res, context[49], context[50] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence();

  // e.idx
  // </0 & DoUnBlock_check/4 e.eOther#1/2 >/1
  // closed e.eOther#1 as range 2
  //DEBUG: e.eOther#1: 2

  refalrts::reset_allocator();
  //TRASH: {REMOVED TILE}
  //RESULT: Tile{ [[ AsIs: </0 Reuse: & DoUnBlock_cont0/4 AsIs: e.eOther#1/2 AsIs: >/1 ]] }
  refalrts::update_name( context[4], ref_DoUnBlocku_cont0.ref.function );
  refalrts::push_stack( context[1] );
  refalrts::push_stack( context[0] );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_DoUnBlocku_check("DoUnBlock_check", 786251477U, 1176157594U, func_DoUnBlocku_check);

static refalrts::FnResult func_DoUnBlocku_forward(refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  refalrts::this_is_generated_function();
  // issue here memory for vars with 40 elems
  refalrts::Iter context[40];
  refalrts::zeros( context, 40 );
  //FAST GEN: e.$
  //GLOBAL GEN: ( e.$ ) t.$ ( e.$ ) s.$ ( e.$ ) ( e.$ ) ( e.$ ) ( e.$ ) e.$ ( e.$ )
  // </0 & DoUnBlock_forward/4 (/7 e.idxB#0/5 )/8 t.idxT#0/13 (/17 e.idxTVB#0/15 )/18 s.idxTVT#0/19 (/22 e.idxTVTVB#0/20 )/23 (/26 e.idxTVTVTB#0/24 )/27 (/30 e.idxTVTVTTB#0/28 )/31 (/34 e.idxTVTVTTTB#0/32 )/35 e.idxTVTVTTTT#0/2 (/11 e.idxTVTVTTTTVB#0/9 )/12 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  context[5] = 0;
  context[6] = 0;
  context[7] = refalrts::brackets_left( context[5], context[6], context[2], context[3] );
  if( ! context[7] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[7], context[8]);
  context[9] = 0;
  context[10] = 0;
  context[11] = refalrts::brackets_right( context[9], context[10], context[2], context[3] );
  if( ! context[11] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[11], context[12]);
  // closed e.idxB#0 as range 5
  // closed e.idxTVTVTTTTVB#0 as range 9
  context[14] = refalrts::tvar_left( context[13], context[2], context[3] );
  if( ! context[14] )
    return refalrts::cRecognitionImpossible;
  context[15] = 0;
  context[16] = 0;
  context[17] = refalrts::brackets_left( context[15], context[16], context[2], context[3] );
  if( ! context[17] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[17], context[18]);
  // closed e.idxTVB#0 as range 15
  if( ! refalrts::svar_left( context[19], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  context[20] = 0;
  context[21] = 0;
  context[22] = refalrts::brackets_left( context[20], context[21], context[2], context[3] );
  if( ! context[22] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[22], context[23]);
  context[24] = 0;
  context[25] = 0;
  context[26] = refalrts::brackets_left( context[24], context[25], context[2], context[3] );
  if( ! context[26] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[26], context[27]);
  context[28] = 0;
  context[29] = 0;
  context[30] = refalrts::brackets_left( context[28], context[29], context[2], context[3] );
  if( ! context[30] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[30], context[31]);
  context[32] = 0;
  context[33] = 0;
  context[34] = refalrts::brackets_left( context[32], context[33], context[2], context[3] );
  if( ! context[34] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[34], context[35]);
  // closed e.idxTVTVB#0 as range 20
  // closed e.idxTVTVTB#0 as range 24
  // closed e.idxTVTVTTB#0 as range 28
  // closed e.idxTVTVTTTB#0 as range 32
  // closed e.idxTVTVTTTT#0 as range 2
  do {
    // ( e.idx ) t.idx ( e.idx ) s.idx ( e.idx ) ( e.idx ) ( e.idx ) ( e.idx ) t.idx e.idx ( e.idx )
    // </0 & DoUnBlock_forward/4 (/7 e.eNames#1/5 )/8 t.tSrcPos#1/13 (/17 e.eName#1/15 )/18 s.sScope#1/19 (/22 e.ePrefix#1/20 )/23 (/26 e.eScannedFunctions#1/24 )/27 (/30 e.eScannedSentences#1/28 )/31 (/34 e.eSentences-B_fix#1/32 )/35 t.tSentences-B_next#1/36 e.eSentences-B_rest#1/2 (/11 e.eUnscannedFunctions#1/9 )/12 >/1
    // closed e.eNames#1 as range 5
    // closed e.eName#1 as range 15
    // closed e.ePrefix#1 as range 20
    // closed e.eScannedFunctions#1 as range 24
    // closed e.eScannedSentences#1 as range 28
    // closed e.eSentences-B_fix#1 as range 32
    // closed e.eUnscannedFunctions#1 as range 9
    context[38] = context[2];
    context[39] = context[3];
    context[37] = refalrts::tvar_left( context[36], context[38], context[39] );
    if( ! context[37] )
      continue;
    // closed e.eSentences-B_rest#1 as range 38(2)
    //DEBUG: t.tSrcPos#1: 13
    //DEBUG: s.sScope#1: 19
    //DEBUG: e.eNames#1: 5
    //DEBUG: e.eName#1: 15
    //DEBUG: e.ePrefix#1: 20
    //DEBUG: e.eScannedFunctions#1: 24
    //DEBUG: e.eScannedSentences#1: 28
    //DEBUG: e.eSentences-B_fix#1: 32
    //DEBUG: e.eUnscannedFunctions#1: 9
    //DEBUG: t.tSentences-B_next#1: 36
    //DEBUG: e.eSentences-B_rest#1: 2

    refalrts::reset_allocator();
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 Reuse: & DoUnBlock_next/4 AsIs: (/7 AsIs: e.eNames#1/5 AsIs: )/8 AsIs: t.tSrcPos#1/13 AsIs: (/17 AsIs: e.eName#1/15 AsIs: )/18 AsIs: s.sScope#1/19 AsIs: (/22 AsIs: e.ePrefix#1/20 AsIs: )/23 AsIs: (/26 AsIs: e.eScannedFunctions#1/24 AsIs: )/27 AsIs: (/30 AsIs: e.eScannedSentences#1/28 AsIs: )/31 AsIs: (/34 } Tile{ AsIs: e.eSentences-B_fix#1/32 } Tile{ AsIs: t.tSentences-B_next#1/36 } Tile{ AsIs: )/35 } Tile{ AsIs: e.eSentences-B_rest#1/38(2) } Tile{ AsIs: (/11 AsIs: e.eUnscannedFunctions#1/9 AsIs: )/12 AsIs: >/1 ]] }
    refalrts::update_name( context[4], ref_DoUnBlocku_next.ref.function );
    refalrts::push_stack( context[1] );
    refalrts::push_stack( context[0] );
    refalrts::link_brackets( context[11], context[12] );
    refalrts::link_brackets( context[34], context[35] );
    refalrts::link_brackets( context[30], context[31] );
    refalrts::link_brackets( context[26], context[27] );
    refalrts::link_brackets( context[22], context[23] );
    refalrts::link_brackets( context[17], context[18] );
    refalrts::link_brackets( context[7], context[8] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[11];
    res = refalrts::splice_evar( res, context[38], context[39] );
    res = refalrts::splice_evar( res, context[35], context[35] );
    res = refalrts::splice_evar( res, context[36], context[37] );
    res = refalrts::splice_evar( res, context[32], context[33] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence();

  // ( e.idx ) t.idx ( e.idx ) s.idx ( e.idx ) ( e.idx ) ( e.idx ) ( e.idx ) ( e.idx )
  // </0 & DoUnBlock_forward/4 (/7 e.eNames#1/5 )/8 t.tSrcPos#1/13 (/17 e.eName#1/15 )/18 s.sScope#1/19 (/22 e.ePrefix#1/20 )/23 (/26 e.eScannedFunctions#1/24 )/27 (/30 e.eScannedSentences#1/28 )/31 (/34 e.eSentences-B_fix#1/32 )/35 (/11 e.eUnscannedFunctions#1/9 )/12 >/1
  if( ! refalrts::empty_seq( context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  // closed e.eNames#1 as range 5
  // closed e.eName#1 as range 15
  // closed e.ePrefix#1 as range 20
  // closed e.eScannedFunctions#1 as range 24
  // closed e.eScannedSentences#1 as range 28
  // closed e.eSentences-B_fix#1 as range 32
  // closed e.eUnscannedFunctions#1 as range 9
  //DEBUG: t.tSrcPos#1: 13
  //DEBUG: s.sScope#1: 19
  //DEBUG: e.eNames#1: 5
  //DEBUG: e.eName#1: 15
  //DEBUG: e.ePrefix#1: 20
  //DEBUG: e.eScannedFunctions#1: 24
  //DEBUG: e.eScannedSentences#1: 28
  //DEBUG: e.eSentences-B_fix#1: 32
  //DEBUG: e.eUnscannedFunctions#1: 9

  refalrts::reset_allocator();
  //TRASH: {REMOVED TILE} (/34 {REMOVED TILE} )/35 {REMOVED TILE}
  //RESULT: Tile{ [[ AsIs: </0 Reuse: & DoUnBlock_cont/4 AsIs: (/7 AsIs: e.eNames#1/5 AsIs: )/8 AsIs: t.tSrcPos#1/13 AsIs: (/17 AsIs: e.eName#1/15 AsIs: )/18 AsIs: s.sScope#1/19 AsIs: (/22 AsIs: e.ePrefix#1/20 AsIs: )/23 AsIs: (/26 AsIs: e.eScannedFunctions#1/24 AsIs: )/27 AsIs: (/30 AsIs: e.eScannedSentences#1/28 AsIs: )/31 } Tile{ AsIs: e.eSentences-B_fix#1/32 } Tile{ AsIs: (/11 AsIs: e.eUnscannedFunctions#1/9 AsIs: )/12 AsIs: >/1 ]] }
  refalrts::update_name( context[4], ref_DoUnBlocku_cont.ref.function );
  refalrts::push_stack( context[1] );
  refalrts::push_stack( context[0] );
  refalrts::link_brackets( context[11], context[12] );
  refalrts::link_brackets( context[30], context[31] );
  refalrts::link_brackets( context[26], context[27] );
  refalrts::link_brackets( context[22], context[23] );
  refalrts::link_brackets( context[17], context[18] );
  refalrts::link_brackets( context[7], context[8] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[11];
  res = refalrts::splice_evar( res, context[32], context[33] );
  refalrts::splice_to_freelist_open( context[31], res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_DoUnBlocku_forward("DoUnBlock_forward", 786251477U, 1176157594U, func_DoUnBlocku_forward);

static refalrts::FnResult func_DoUnBlocku_next(refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  refalrts::this_is_generated_function();
  // issue here memory for vars with 53 elems
  refalrts::Iter context[53];
  refalrts::zeros( context, 53 );
  //FAST GEN: ( e.$ ) t.$ ( e.$ ) s.$ ( e.$ ) ( e.$ ) ( e.$ ) ( e.$ ) e.$ ( e.$ )
  //GLOBAL GEN: ( e.$ ) t.$ ( e.$ ) s.$ ( e.$ ) ( e.$ ) ( e.$ ) ( e.$ ) e.$ ( e.$ )
  // </0 & DoUnBlock_next/4 (/7 e.idxB#0/5 )/8 t.idxT#0/13 (/17 e.idxTVB#0/15 )/18 s.idxTVT#0/19 (/22 e.idxTVTVB#0/20 )/23 (/26 e.idxTVTVTB#0/24 )/27 (/30 e.idxTVTVTTB#0/28 )/31 (/34 e.idxTVTVTTTB#0/32 )/35 e.idxTVTVTTTT#0/2 (/11 e.idxTVTVTTTTVB#0/9 )/12 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  context[5] = 0;
  context[6] = 0;
  context[7] = refalrts::brackets_left( context[5], context[6], context[2], context[3] );
  if( ! context[7] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[7], context[8]);
  context[9] = 0;
  context[10] = 0;
  context[11] = refalrts::brackets_right( context[9], context[10], context[2], context[3] );
  if( ! context[11] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[11], context[12]);
  // closed e.idxB#0 as range 5
  // closed e.idxTVTVTTTTVB#0 as range 9
  context[14] = refalrts::tvar_left( context[13], context[2], context[3] );
  if( ! context[14] )
    return refalrts::cRecognitionImpossible;
  context[15] = 0;
  context[16] = 0;
  context[17] = refalrts::brackets_left( context[15], context[16], context[2], context[3] );
  if( ! context[17] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[17], context[18]);
  // closed e.idxTVB#0 as range 15
  if( ! refalrts::svar_left( context[19], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  context[20] = 0;
  context[21] = 0;
  context[22] = refalrts::brackets_left( context[20], context[21], context[2], context[3] );
  if( ! context[22] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[22], context[23]);
  context[24] = 0;
  context[25] = 0;
  context[26] = refalrts::brackets_left( context[24], context[25], context[2], context[3] );
  if( ! context[26] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[26], context[27]);
  context[28] = 0;
  context[29] = 0;
  context[30] = refalrts::brackets_left( context[28], context[29], context[2], context[3] );
  if( ! context[30] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[30], context[31]);
  context[32] = 0;
  context[33] = 0;
  context[34] = refalrts::brackets_left( context[32], context[33], context[2], context[3] );
  if( ! context[34] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[34], context[35]);
  // closed e.idxTVTVB#0 as range 20
  // closed e.idxTVTVTB#0 as range 24
  // closed e.idxTVTVTTB#0 as range 28
  // closed e.idxTVTVTTTB#0 as range 32
  // closed e.idxTVTVTTTT#0 as range 2
  do {
    // ( e.idx ) t.idx ( e.idx ) s.idx ( e.idx ) ( e.idx ) ( e.idx ) ( e.idx ) e.idx ( e.idx )
    // </0 & DoUnBlock_next/4 (/7 e.eNames#1/5 )/8 t.tSrcPos#1/13 (/17 e.eName#1/15 )/18 s.sScope#1/19 (/22 e.ePrefix#1/20 )/23 (/26 e.eScannedFunctions#1/24 )/27 (/30 e.eScannedSentences#1/28 )/31 (/34 e.eSentences-B_fix#1/32 )/35 e.eSentences-B_var#1/36 (/40 e.eBlockedSentence#1/38 )/41 e.eSentences-E#1/2 (/11 e.eUnscannedFunctions#1/9 )/12 >/1
    // closed e.eNames#1 as range 5
    // closed e.eName#1 as range 15
    // closed e.ePrefix#1 as range 20
    // closed e.eScannedFunctions#1 as range 24
    // closed e.eScannedSentences#1 as range 28
    // closed e.eSentences-B_fix#1 as range 32
    // closed e.eUnscannedFunctions#1 as range 9
    context[49] = context[2];
    context[50] = context[3];
    context[36] = 0;
    context[37] = 0;
    refalrts::start_e_loop();
    do {
      context[51] = context[49];
      context[52] = context[50];
      context[38] = 0;
      context[39] = 0;
      context[40] = refalrts::brackets_left( context[38], context[39], context[51], context[52] );
      if( ! context[40] )
        continue;
      refalrts::bracket_pointers(context[40], context[41]);
      // closed e.eBlockedSentence#1 as range 38
      // closed e.eSentences-E#1 as range 51(2)
      //DEBUG: t.tSrcPos#1: 13
      //DEBUG: s.sScope#1: 19
      //DEBUG: e.eNames#1: 5
      //DEBUG: e.eName#1: 15
      //DEBUG: e.ePrefix#1: 20
      //DEBUG: e.eScannedFunctions#1: 24
      //DEBUG: e.eScannedSentences#1: 28
      //DEBUG: e.eSentences-B_fix#1: 32
      //DEBUG: e.eUnscannedFunctions#1: 9
      //DEBUG: e.eSentences-B_var#1: 36
      //DEBUG: e.eBlockedSentence#1: 38
      //DEBUG: e.eSentences-E#1: 2

      refalrts::reset_allocator();
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 Reuse: & DoUnBlock_check/4 AsIs: (/7 AsIs: e.eNames#1/5 AsIs: )/8 AsIs: t.tSrcPos#1/13 AsIs: (/17 AsIs: e.eName#1/15 AsIs: )/18 AsIs: s.sScope#1/19 AsIs: (/22 AsIs: e.ePrefix#1/20 AsIs: )/23 AsIs: (/26 AsIs: e.eScannedFunctions#1/24 AsIs: )/27 AsIs: (/30 AsIs: e.eScannedSentences#1/28 AsIs: )/31 AsIs: (/34 } Tile{ AsIs: e.eSentences-B_fix#1/32 } Tile{ AsIs: e.eSentences-B_var#1/36 } Tile{ AsIs: )/35 } Tile{ AsIs: (/40 AsIs: e.eBlockedSentence#1/38 AsIs: )/41 } (/42 Tile{ AsIs: e.eSentences-E#1/51(2) } )/43 Tile{ AsIs: (/11 AsIs: e.eUnscannedFunctions#1/9 AsIs: )/12 HalfReuse: </1 } & WithBlock/44 e.eBlockedSentence#1/38/45 >/47 >/48 Tile{ ]] }
      if( ! refalrts::alloc_open_bracket( context[42] ) )
        return refalrts::cNoMemory;
      if( ! refalrts::alloc_close_bracket( context[43] ) )
        return refalrts::cNoMemory;
      if( ! refalrts::alloc_name( context[44], ref_WithBlock.ref.function ) )
        return refalrts::cNoMemory;
      if (! refalrts::copy_evar(context[45], context[46], context[38], context[39]))
        return refalrts::cNoMemory;
      if( ! refalrts::alloc_close_call( context[47] ) )
        return refalrts::cNoMemory;
      if( ! refalrts::alloc_close_call( context[48] ) )
        return refalrts::cNoMemory;
      refalrts::update_name( context[4], ref_DoUnBlocku_check.ref.function );
      refalrts::reinit_open_call( context[1] );
      refalrts::push_stack( context[48] );
      refalrts::push_stack( context[0] );
      refalrts::push_stack( context[47] );
      refalrts::push_stack( context[1] );
      refalrts::link_brackets( context[11], context[12] );
      refalrts::link_brackets( context[42], context[43] );
      refalrts::link_brackets( context[40], context[41] );
      refalrts::link_brackets( context[34], context[35] );
      refalrts::link_brackets( context[30], context[31] );
      refalrts::link_brackets( context[26], context[27] );
      refalrts::link_brackets( context[22], context[23] );
      refalrts::link_brackets( context[17], context[18] );
      refalrts::link_brackets( context[7], context[8] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = arg_end->next;
      res = refalrts::splice_evar( res, context[44], context[48] );
      res = refalrts::splice_evar( res, context[11], context[1] );
      res = refalrts::splice_evar( res, context[43], context[43] );
      res = refalrts::splice_evar( res, context[51], context[52] );
      res = refalrts::splice_evar( res, context[42], context[42] );
      res = refalrts::splice_evar( res, context[40], context[41] );
      res = refalrts::splice_evar( res, context[35], context[35] );
      res = refalrts::splice_evar( res, context[36], context[37] );
      res = refalrts::splice_evar( res, context[32], context[33] );
      refalrts::use( res );
      return refalrts::cSuccess;
    } while ( refalrts::open_evar_advance( context[36], context[37], context[49], context[50] ) );
  } while ( 0 );
  refalrts::stop_sentence();

  // ( e.idx ) t.idx ( e.idx ) s.idx ( e.idx ) ( e.idx ) ( e.idx ) ( e.idx ) e.idx ( e.idx )
  // </0 & DoUnBlock_next/4 (/7 e.eNames#1/5 )/8 t.tSrcPos#1/13 (/17 e.eName#1/15 )/18 s.sScope#1/19 (/22 e.ePrefix#1/20 )/23 (/26 e.eScannedFunctions#1/24 )/27 (/30 e.eScannedSentences#1/28 )/31 (/34 e.eSentences-B_fix#1/32 )/35 e.eSentences-B_rest#1/2 (/11 e.eUnscannedFunctions#1/9 )/12 >/1
  // closed e.eNames#1 as range 5
  // closed e.eName#1 as range 15
  // closed e.ePrefix#1 as range 20
  // closed e.eScannedFunctions#1 as range 24
  // closed e.eScannedSentences#1 as range 28
  // closed e.eSentences-B_fix#1 as range 32
  // closed e.eSentences-B_rest#1 as range 2
  // closed e.eUnscannedFunctions#1 as range 9
  //DEBUG: t.tSrcPos#1: 13
  //DEBUG: s.sScope#1: 19
  //DEBUG: e.eNames#1: 5
  //DEBUG: e.eName#1: 15
  //DEBUG: e.ePrefix#1: 20
  //DEBUG: e.eScannedFunctions#1: 24
  //DEBUG: e.eScannedSentences#1: 28
  //DEBUG: e.eSentences-B_fix#1: 32
  //DEBUG: e.eSentences-B_rest#1: 2
  //DEBUG: e.eUnscannedFunctions#1: 9

  refalrts::reset_allocator();
  //TRASH: {REMOVED TILE} (/34 {REMOVED TILE} )/35 {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ AsIs: </0 Reuse: & DoUnBlock_cont/4 AsIs: (/7 AsIs: e.eNames#1/5 AsIs: )/8 AsIs: t.tSrcPos#1/13 AsIs: (/17 AsIs: e.eName#1/15 AsIs: )/18 AsIs: s.sScope#1/19 AsIs: (/22 AsIs: e.ePrefix#1/20 AsIs: )/23 AsIs: (/26 AsIs: e.eScannedFunctions#1/24 AsIs: )/27 AsIs: (/30 AsIs: e.eScannedSentences#1/28 AsIs: )/31 } Tile{ AsIs: e.eSentences-B_fix#1/32 } Tile{ AsIs: e.eSentences-B_rest#1/2 } Tile{ AsIs: (/11 AsIs: e.eUnscannedFunctions#1/9 AsIs: )/12 AsIs: >/1 ]] }
  refalrts::update_name( context[4], ref_DoUnBlocku_cont.ref.function );
  refalrts::push_stack( context[1] );
  refalrts::push_stack( context[0] );
  refalrts::link_brackets( context[11], context[12] );
  refalrts::link_brackets( context[30], context[31] );
  refalrts::link_brackets( context[26], context[27] );
  refalrts::link_brackets( context[22], context[23] );
  refalrts::link_brackets( context[17], context[18] );
  refalrts::link_brackets( context[7], context[8] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[11];
  res = refalrts::splice_evar( res, context[2], context[3] );
  res = refalrts::splice_evar( res, context[32], context[33] );
  refalrts::splice_to_freelist_open( context[31], res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_DoUnBlocku_next("DoUnBlock_next", 786251477U, 1176157594U, func_DoUnBlocku_next);

static refalrts::FnResult func_DoUnBlocku_cont(refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  refalrts::this_is_generated_function();
  // issue here memory for vars with 35 elems
  refalrts::Iter context[35];
  refalrts::zeros( context, 35 );
  // </0 & DoUnBlock_cont/4 (/7 e.eNames#1/5 )/8 t.tSrcPos#1/13 (/17 e.eName#1/15 )/18 s.sScope#1/19 (/22 e.ePrefix#1/20 )/23 (/26 e.eScannedFunctions#1/24 )/27 (/30 e.eScannedSentences#1/28 )/31 e.eUnscannedSentences#1/2 (/11 e.eUnscannedFunctions#1/9 )/12 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  context[5] = 0;
  context[6] = 0;
  context[7] = refalrts::brackets_left( context[5], context[6], context[2], context[3] );
  if( ! context[7] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[7], context[8]);
  context[9] = 0;
  context[10] = 0;
  context[11] = refalrts::brackets_right( context[9], context[10], context[2], context[3] );
  if( ! context[11] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[11], context[12]);
  // closed e.eNames#1 as range 5
  // closed e.eUnscannedFunctions#1 as range 9
  context[14] = refalrts::tvar_left( context[13], context[2], context[3] );
  if( ! context[14] )
    return refalrts::cRecognitionImpossible;
  context[15] = 0;
  context[16] = 0;
  context[17] = refalrts::brackets_left( context[15], context[16], context[2], context[3] );
  if( ! context[17] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[17], context[18]);
  // closed e.eName#1 as range 15
  if( ! refalrts::svar_left( context[19], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  context[20] = 0;
  context[21] = 0;
  context[22] = refalrts::brackets_left( context[20], context[21], context[2], context[3] );
  if( ! context[22] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[22], context[23]);
  context[24] = 0;
  context[25] = 0;
  context[26] = refalrts::brackets_left( context[24], context[25], context[2], context[3] );
  if( ! context[26] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[26], context[27]);
  context[28] = 0;
  context[29] = 0;
  context[30] = refalrts::brackets_left( context[28], context[29], context[2], context[3] );
  if( ! context[30] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[30], context[31]);
  // closed e.ePrefix#1 as range 20
  // closed e.eScannedFunctions#1 as range 24
  // closed e.eScannedSentences#1 as range 28
  // closed e.eUnscannedSentences#1 as range 2
  //DEBUG: e.eNames#1: 5
  //DEBUG: e.eUnscannedFunctions#1: 9
  //DEBUG: t.tSrcPos#1: 13
  //DEBUG: e.eName#1: 15
  //DEBUG: s.sScope#1: 19
  //DEBUG: e.ePrefix#1: 20
  //DEBUG: e.eScannedFunctions#1: 24
  //DEBUG: e.eScannedSentences#1: 28
  //DEBUG: e.eUnscannedSentences#1: 2

  refalrts::reset_allocator();
  //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ AsIs: </0 Reuse: & DoUnBlock-NextFunction/4 AsIs: (/7 AsIs: e.eNames#1/5 AsIs: )/8 AsIs: t.tSrcPos#1/13 AsIs: (/17 } Tile{ AsIs: e.ePrefix#1/20 } Tile{ AsIs: )/23 AsIs: (/26 AsIs: e.eScannedFunctions#1/24 HalfReuse: (/27 HalfReuse: # Function/30 } t.tSrcPos#1/13/32 Tile{ AsIs: (/22 } Tile{ AsIs: e.eName#1/15 } Tile{ AsIs: )/18 AsIs: s.sScope#1/19 } Tile{ AsIs: e.eScannedSentences#1/28 } Tile{ AsIs: e.eUnscannedSentences#1/2 } Tile{ AsIs: )/31 } )/34 Tile{ AsIs: (/11 AsIs: e.eUnscannedFunctions#1/9 AsIs: )/12 AsIs: >/1 ]] }
  if (! refalrts::copy_evar(context[32], context[33], context[13], context[14]))
    return refalrts::cNoMemory;
  if( ! refalrts::alloc_close_bracket( context[34] ) )
    return refalrts::cNoMemory;
  refalrts::update_name( context[4], ref_DoUnBlockm_NextFunction.ref.function );
  refalrts::reinit_open_bracket( context[27] );
  refalrts::reinit_ident( context[30], ident_Function );
  refalrts::push_stack( context[1] );
  refalrts::push_stack( context[0] );
  refalrts::link_brackets( context[11], context[12] );
  refalrts::link_brackets( context[26], context[34] );
  refalrts::link_brackets( context[27], context[31] );
  refalrts::link_brackets( context[22], context[18] );
  refalrts::link_brackets( context[17], context[23] );
  refalrts::link_brackets( context[7], context[8] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[11];
  res = refalrts::splice_evar( res, context[34], context[34] );
  res = refalrts::splice_evar( res, context[31], context[31] );
  res = refalrts::splice_evar( res, context[2], context[3] );
  res = refalrts::splice_evar( res, context[28], context[29] );
  res = refalrts::splice_evar( res, context[18], context[19] );
  res = refalrts::splice_evar( res, context[15], context[16] );
  res = refalrts::splice_evar( res, context[22], context[22] );
  res = refalrts::splice_evar( res, context[32], context[33] );
  res = refalrts::splice_evar( res, context[23], context[30] );
  res = refalrts::splice_evar( res, context[20], context[21] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_DoUnBlocku_cont("DoUnBlock_cont", 786251477U, 1176157594U, func_DoUnBlocku_cont);

static refalrts::FnResult func_DoUnBlocku_check0(refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  refalrts::this_is_generated_function();
  // issue here memory for vars with 69 elems
  refalrts::Iter context[69];
  refalrts::zeros( context, 69 );
  //FAST GEN: e.$
  //GLOBAL GEN: e.$
  // </0 & DoUnBlock_check0/4 e.idx#0/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.idx#0 as range 2
  do {
    // ( e.idx ) t.idx ( e.idx ) s.idx ( e.idx ) ( e.idx ) ( e.idx ) ( e.idx ) ( e.idx ) ( e.idx ) ( e.idx ) ( e.idx ) ( e.idx ) ( e.idx ) ( e.idx ) e.idx
    // </0 & DoUnBlock_check0/4 (/7 e.eNames#1/5 )/8 t.tSrcPos#1/9 (/13 e.eName#1/11 )/14 s.sScope#1/15 (/18 e.ePrefix#1/16 )/19 (/22 e.eScannedFunctions#1/20 )/23 (/26 e.eScannedSentences#1/24 )/27 (/30 e.eSentences-B#1/28 )/31 (/34 e.eBlockedSentence#1/32 )/35 (/38 e.eSentences-E#1/36 )/39 (/42 e.eUnscannedFunctions#1/40 )/43 (/46 e.eSentencePrefix#1/44 )/47 (/50 e.eBlockResult#1/48 )/51 (/54 e.eSubSentences#1/52 )/55 (/58 e.eRefilledNames#1/56 )/59 e.eNewName#1/2 >/1
    context[67] = context[2];
    context[68] = context[3];
    context[5] = 0;
    context[6] = 0;
    context[7] = refalrts::brackets_left( context[5], context[6], context[67], context[68] );
    if( ! context[7] )
      continue;
    refalrts::bracket_pointers(context[7], context[8]);
    // closed e.eNames#1 as range 5
    context[10] = refalrts::tvar_left( context[9], context[67], context[68] );
    if( ! context[10] )
      continue;
    context[11] = 0;
    context[12] = 0;
    context[13] = refalrts::brackets_left( context[11], context[12], context[67], context[68] );
    if( ! context[13] )
      continue;
    refalrts::bracket_pointers(context[13], context[14]);
    // closed e.eName#1 as range 11
    if( ! refalrts::svar_left( context[15], context[67], context[68] ) )
      continue;
    context[16] = 0;
    context[17] = 0;
    context[18] = refalrts::brackets_left( context[16], context[17], context[67], context[68] );
    if( ! context[18] )
      continue;
    refalrts::bracket_pointers(context[18], context[19]);
    context[20] = 0;
    context[21] = 0;
    context[22] = refalrts::brackets_left( context[20], context[21], context[67], context[68] );
    if( ! context[22] )
      continue;
    refalrts::bracket_pointers(context[22], context[23]);
    context[24] = 0;
    context[25] = 0;
    context[26] = refalrts::brackets_left( context[24], context[25], context[67], context[68] );
    if( ! context[26] )
      continue;
    refalrts::bracket_pointers(context[26], context[27]);
    context[28] = 0;
    context[29] = 0;
    context[30] = refalrts::brackets_left( context[28], context[29], context[67], context[68] );
    if( ! context[30] )
      continue;
    refalrts::bracket_pointers(context[30], context[31]);
    context[32] = 0;
    context[33] = 0;
    context[34] = refalrts::brackets_left( context[32], context[33], context[67], context[68] );
    if( ! context[34] )
      continue;
    refalrts::bracket_pointers(context[34], context[35]);
    context[36] = 0;
    context[37] = 0;
    context[38] = refalrts::brackets_left( context[36], context[37], context[67], context[68] );
    if( ! context[38] )
      continue;
    refalrts::bracket_pointers(context[38], context[39]);
    context[40] = 0;
    context[41] = 0;
    context[42] = refalrts::brackets_left( context[40], context[41], context[67], context[68] );
    if( ! context[42] )
      continue;
    refalrts::bracket_pointers(context[42], context[43]);
    context[44] = 0;
    context[45] = 0;
    context[46] = refalrts::brackets_left( context[44], context[45], context[67], context[68] );
    if( ! context[46] )
      continue;
    refalrts::bracket_pointers(context[46], context[47]);
    context[48] = 0;
    context[49] = 0;
    context[50] = refalrts::brackets_left( context[48], context[49], context[67], context[68] );
    if( ! context[50] )
      continue;
    refalrts::bracket_pointers(context[50], context[51]);
    context[52] = 0;
    context[53] = 0;
    context[54] = refalrts::brackets_left( context[52], context[53], context[67], context[68] );
    if( ! context[54] )
      continue;
    refalrts::bracket_pointers(context[54], context[55]);
    context[56] = 0;
    context[57] = 0;
    context[58] = refalrts::brackets_left( context[56], context[57], context[67], context[68] );
    if( ! context[58] )
      continue;
    refalrts::bracket_pointers(context[58], context[59]);
    // closed e.ePrefix#1 as range 16
    // closed e.eScannedFunctions#1 as range 20
    // closed e.eScannedSentences#1 as range 24
    // closed e.eSentences-B#1 as range 28
    // closed e.eBlockedSentence#1 as range 32
    // closed e.eSentences-E#1 as range 36
    // closed e.eUnscannedFunctions#1 as range 40
    // closed e.eSentencePrefix#1 as range 44
    // closed e.eBlockResult#1 as range 48
    // closed e.eSubSentences#1 as range 52
    // closed e.eRefilledNames#1 as range 56
    // closed e.eNewName#1 as range 67(2)
    //DEBUG: e.eNames#1: 5
    //DEBUG: t.tSrcPos#1: 9
    //DEBUG: e.eName#1: 11
    //DEBUG: s.sScope#1: 15
    //DEBUG: e.ePrefix#1: 16
    //DEBUG: e.eScannedFunctions#1: 20
    //DEBUG: e.eScannedSentences#1: 24
    //DEBUG: e.eSentences-B#1: 28
    //DEBUG: e.eBlockedSentence#1: 32
    //DEBUG: e.eSentences-E#1: 36
    //DEBUG: e.eUnscannedFunctions#1: 40
    //DEBUG: e.eSentencePrefix#1: 44
    //DEBUG: e.eBlockResult#1: 48
    //DEBUG: e.eSubSentences#1: 52
    //DEBUG: e.eRefilledNames#1: 56
    //DEBUG: e.eNewName#1: 2

    refalrts::reset_allocator();
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 Reuse: & DoUnBlock_check1/4 AsIs: (/7 AsIs: e.eNames#1/5 AsIs: )/8 AsIs: t.tSrcPos#1/9 AsIs: (/13 AsIs: e.eName#1/11 AsIs: )/14 AsIs: s.sScope#1/15 AsIs: (/18 AsIs: e.ePrefix#1/16 AsIs: )/19 AsIs: (/22 AsIs: e.eScannedFunctions#1/20 AsIs: )/23 AsIs: (/26 AsIs: e.eScannedSentences#1/24 AsIs: )/27 AsIs: (/30 AsIs: e.eSentences-B#1/28 AsIs: )/31 AsIs: (/34 AsIs: e.eBlockedSentence#1/32 AsIs: )/35 AsIs: (/38 AsIs: e.eSentences-E#1/36 AsIs: )/39 AsIs: (/42 AsIs: e.eUnscannedFunctions#1/40 AsIs: )/43 AsIs: (/46 AsIs: e.eSentencePrefix#1/44 AsIs: )/47 AsIs: (/50 AsIs: e.eBlockResult#1/48 AsIs: )/51 AsIs: (/54 AsIs: e.eSubSentences#1/52 AsIs: )/55 AsIs: (/58 AsIs: e.eRefilledNames#1/56 AsIs: )/59 } (/60 Tile{ AsIs: e.eNewName#1/67(2) } )/61 </62 & BlockScopeVars/63 e.eSentencePrefix#1/44/64 >/66 Tile{ AsIs: >/1 ]] }
    if( ! refalrts::alloc_open_bracket( context[60] ) )
      return refalrts::cNoMemory;
    if( ! refalrts::alloc_close_bracket( context[61] ) )
      return refalrts::cNoMemory;
    if( ! refalrts::alloc_open_call( context[62] ) )
      return refalrts::cNoMemory;
    if( ! refalrts::alloc_name( context[63], ref_BlockScopeVars.ref.function ) )
      return refalrts::cNoMemory;
    if (! refalrts::copy_evar(context[64], context[65], context[44], context[45]))
      return refalrts::cNoMemory;
    if( ! refalrts::alloc_close_call( context[66] ) )
      return refalrts::cNoMemory;
    refalrts::update_name( context[4], ref_DoUnBlocku_check1.ref.function );
    refalrts::push_stack( context[1] );
    refalrts::push_stack( context[0] );
    refalrts::push_stack( context[66] );
    refalrts::push_stack( context[62] );
    refalrts::link_brackets( context[60], context[61] );
    refalrts::link_brackets( context[58], context[59] );
    refalrts::link_brackets( context[54], context[55] );
    refalrts::link_brackets( context[50], context[51] );
    refalrts::link_brackets( context[46], context[47] );
    refalrts::link_brackets( context[42], context[43] );
    refalrts::link_brackets( context[38], context[39] );
    refalrts::link_brackets( context[34], context[35] );
    refalrts::link_brackets( context[30], context[31] );
    refalrts::link_brackets( context[26], context[27] );
    refalrts::link_brackets( context[22], context[23] );
    refalrts::link_brackets( context[18], context[19] );
    refalrts::link_brackets( context[13], context[14] );
    refalrts::link_brackets( context[7], context[8] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    res = refalrts::splice_evar( res, context[61], context[66] );
    res = refalrts::splice_evar( res, context[67], context[68] );
    res = refalrts::splice_evar( res, context[60], context[60] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence();

  // e.idx
  // </0 & DoUnBlock_check0/4 e.eOther#1/2 >/1
  // closed e.eOther#1 as range 2
  //DEBUG: e.eOther#1: 2

  refalrts::reset_allocator();
  //TRASH: {REMOVED TILE}
  //RESULT: Tile{ [[ AsIs: </0 Reuse: & DoUnBlock_cont1/4 AsIs: e.eOther#1/2 AsIs: >/1 ]] }
  refalrts::update_name( context[4], ref_DoUnBlocku_cont1.ref.function );
  refalrts::push_stack( context[1] );
  refalrts::push_stack( context[0] );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_DoUnBlocku_check0("DoUnBlock_check0", 786251477U, 1176157594U, func_DoUnBlocku_check0);

static refalrts::FnResult func_DoUnBlocku_cont0(refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  refalrts::this_is_generated_function();
  // issue here memory for vars with 44 elems
  refalrts::Iter context[44];
  refalrts::zeros( context, 44 );
  // </0 & DoUnBlock_cont0/4 (/7 e.eNames#1/5 )/8 t.tSrcPos#1/9 (/13 e.eName#1/11 )/14 s.sScope#1/15 (/18 e.ePrefix#1/16 )/19 (/22 e.eScannedFunctions#1/20 )/23 (/26 e.eScannedSentences#1/24 )/27 (/30 e.eSentences-B#1/28 )/31 (/34 e.eBlockedSentence#1/32 )/35 (/38 e.eSentences-E#1/36 )/39 (/42 e.eUnscannedFunctions#1/40 )/43 e.eOther#1/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  context[5] = 0;
  context[6] = 0;
  context[7] = refalrts::brackets_left( context[5], context[6], context[2], context[3] );
  if( ! context[7] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[7], context[8]);
  // closed e.eNames#1 as range 5
  context[10] = refalrts::tvar_left( context[9], context[2], context[3] );
  if( ! context[10] )
    return refalrts::cRecognitionImpossible;
  context[11] = 0;
  context[12] = 0;
  context[13] = refalrts::brackets_left( context[11], context[12], context[2], context[3] );
  if( ! context[13] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[13], context[14]);
  // closed e.eName#1 as range 11
  if( ! refalrts::svar_left( context[15], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  context[16] = 0;
  context[17] = 0;
  context[18] = refalrts::brackets_left( context[16], context[17], context[2], context[3] );
  if( ! context[18] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[18], context[19]);
  context[20] = 0;
  context[21] = 0;
  context[22] = refalrts::brackets_left( context[20], context[21], context[2], context[3] );
  if( ! context[22] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[22], context[23]);
  context[24] = 0;
  context[25] = 0;
  context[26] = refalrts::brackets_left( context[24], context[25], context[2], context[3] );
  if( ! context[26] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[26], context[27]);
  context[28] = 0;
  context[29] = 0;
  context[30] = refalrts::brackets_left( context[28], context[29], context[2], context[3] );
  if( ! context[30] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[30], context[31]);
  context[32] = 0;
  context[33] = 0;
  context[34] = refalrts::brackets_left( context[32], context[33], context[2], context[3] );
  if( ! context[34] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[34], context[35]);
  context[36] = 0;
  context[37] = 0;
  context[38] = refalrts::brackets_left( context[36], context[37], context[2], context[3] );
  if( ! context[38] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[38], context[39]);
  context[40] = 0;
  context[41] = 0;
  context[42] = refalrts::brackets_left( context[40], context[41], context[2], context[3] );
  if( ! context[42] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[42], context[43]);
  // closed e.ePrefix#1 as range 16
  // closed e.eScannedFunctions#1 as range 20
  // closed e.eScannedSentences#1 as range 24
  // closed e.eSentences-B#1 as range 28
  // closed e.eBlockedSentence#1 as range 32
  // closed e.eSentences-E#1 as range 36
  // closed e.eUnscannedFunctions#1 as range 40
  // closed e.eOther#1 as range 2
  //DEBUG: e.eNames#1: 5
  //DEBUG: t.tSrcPos#1: 9
  //DEBUG: e.eName#1: 11
  //DEBUG: s.sScope#1: 15
  //DEBUG: e.ePrefix#1: 16
  //DEBUG: e.eScannedFunctions#1: 20
  //DEBUG: e.eScannedSentences#1: 24
  //DEBUG: e.eSentences-B#1: 28
  //DEBUG: e.eBlockedSentence#1: 32
  //DEBUG: e.eSentences-E#1: 36
  //DEBUG: e.eUnscannedFunctions#1: 40
  //DEBUG: e.eOther#1: 2

  refalrts::reset_allocator();
  //TRASH: {REMOVED TILE} (/38 {REMOVED TILE} )/39 {REMOVED TILE} e.eOther#1/2 {REMOVED TILE}
  //RESULT: Tile{ [[ AsIs: </0 Reuse: & DoUnBlock_forward/4 AsIs: (/7 AsIs: e.eNames#1/5 AsIs: )/8 AsIs: t.tSrcPos#1/9 AsIs: (/13 AsIs: e.eName#1/11 AsIs: )/14 AsIs: s.sScope#1/15 AsIs: (/18 AsIs: e.ePrefix#1/16 AsIs: )/19 AsIs: (/22 AsIs: e.eScannedFunctions#1/20 AsIs: )/23 AsIs: (/26 AsIs: e.eScannedSentences#1/24 AsIs: )/27 AsIs: (/30 AsIs: e.eSentences-B#1/28 AsIs: )/31 AsIs: (/34 AsIs: e.eBlockedSentence#1/32 AsIs: )/35 } Tile{ AsIs: e.eSentences-E#1/36 } Tile{ AsIs: (/42 AsIs: e.eUnscannedFunctions#1/40 AsIs: )/43 } Tile{ AsIs: >/1 ]] }
  refalrts::update_name( context[4], ref_DoUnBlocku_forward.ref.function );
  refalrts::push_stack( context[1] );
  refalrts::push_stack( context[0] );
  refalrts::link_brackets( context[42], context[43] );
  refalrts::link_brackets( context[34], context[35] );
  refalrts::link_brackets( context[30], context[31] );
  refalrts::link_brackets( context[26], context[27] );
  refalrts::link_brackets( context[22], context[23] );
  refalrts::link_brackets( context[18], context[19] );
  refalrts::link_brackets( context[13], context[14] );
  refalrts::link_brackets( context[7], context[8] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[1];
  res = refalrts::splice_evar( res, context[42], context[43] );
  res = refalrts::splice_evar( res, context[36], context[37] );
  refalrts::splice_to_freelist_open( context[35], res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_DoUnBlocku_cont0("DoUnBlock_cont0", 786251477U, 1176157594U, func_DoUnBlocku_cont0);

static refalrts::FnResult func_DoUnBlocku_check1(refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  refalrts::this_is_generated_function();
  // issue here memory for vars with 74 elems
  refalrts::Iter context[74];
  refalrts::zeros( context, 74 );
  //FAST GEN: ( e.$ ) t.$ ( e.$ ) s.$ ( e.$ ) ( e.$ ) ( e.$ ) ( e.$ ) ( e.$ ) ( e.$ ) ( e.$ ) ( e.$ ) ( e.$ ) ( e.$ ) ( e.$ ) ( e.$ ) e.$
  //GLOBAL GEN: ( e.$ ) t.$ ( e.$ ) s.$ ( e.$ ) ( e.$ ) ( e.$ ) ( e.$ ) ( e.$ ) ( e.$ ) ( e.$ ) ( e.$ ) ( e.$ ) ( e.$ ) ( e.$ ) ( e.$ ) e.$
  // </0 & DoUnBlock_check1/4 (/7 e.idxB#0/5 )/8 t.idxT#0/9 (/13 e.idxTVB#0/11 )/14 s.idxTVT#0/15 (/18 e.idxTVTVB#0/16 )/19 (/22 e.idxTVTVTB#0/20 )/23 (/26 e.idxTVTVTTB#0/24 )/27 (/30 e.idxTVTVTTTB#0/28 )/31 (/34 e.idxTVTVTTTTB#0/32 )/35 (/38 e.idxTVTVTTTTTB#0/36 )/39 (/42 e.idxTVTVTTTTTTB#0/40 )/43 (/46 e.idxTVTVTTTTTTTB#0/44 )/47 (/50 e.idxTVTVTTTTTTTTB#0/48 )/51 (/54 e.idxTVTVTTTTTTTTTB#0/52 )/55 (/58 e.idxTVTVTTTTTTTTTTB#0/56 )/59 (/62 e.idxTVTVTTTTTTTTTTTB#0/60 )/63 e.idxTVTVTTTTTTTTTTTT#0/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  context[5] = 0;
  context[6] = 0;
  context[7] = refalrts::brackets_left( context[5], context[6], context[2], context[3] );
  if( ! context[7] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[7], context[8]);
  // closed e.idxB#0 as range 5
  context[10] = refalrts::tvar_left( context[9], context[2], context[3] );
  if( ! context[10] )
    return refalrts::cRecognitionImpossible;
  context[11] = 0;
  context[12] = 0;
  context[13] = refalrts::brackets_left( context[11], context[12], context[2], context[3] );
  if( ! context[13] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[13], context[14]);
  // closed e.idxTVB#0 as range 11
  if( ! refalrts::svar_left( context[15], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  context[16] = 0;
  context[17] = 0;
  context[18] = refalrts::brackets_left( context[16], context[17], context[2], context[3] );
  if( ! context[18] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[18], context[19]);
  context[20] = 0;
  context[21] = 0;
  context[22] = refalrts::brackets_left( context[20], context[21], context[2], context[3] );
  if( ! context[22] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[22], context[23]);
  context[24] = 0;
  context[25] = 0;
  context[26] = refalrts::brackets_left( context[24], context[25], context[2], context[3] );
  if( ! context[26] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[26], context[27]);
  context[28] = 0;
  context[29] = 0;
  context[30] = refalrts::brackets_left( context[28], context[29], context[2], context[3] );
  if( ! context[30] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[30], context[31]);
  context[32] = 0;
  context[33] = 0;
  context[34] = refalrts::brackets_left( context[32], context[33], context[2], context[3] );
  if( ! context[34] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[34], context[35]);
  context[36] = 0;
  context[37] = 0;
  context[38] = refalrts::brackets_left( context[36], context[37], context[2], context[3] );
  if( ! context[38] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[38], context[39]);
  context[40] = 0;
  context[41] = 0;
  context[42] = refalrts::brackets_left( context[40], context[41], context[2], context[3] );
  if( ! context[42] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[42], context[43]);
  context[44] = 0;
  context[45] = 0;
  context[46] = refalrts::brackets_left( context[44], context[45], context[2], context[3] );
  if( ! context[46] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[46], context[47]);
  context[48] = 0;
  context[49] = 0;
  context[50] = refalrts::brackets_left( context[48], context[49], context[2], context[3] );
  if( ! context[50] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[50], context[51]);
  context[52] = 0;
  context[53] = 0;
  context[54] = refalrts::brackets_left( context[52], context[53], context[2], context[3] );
  if( ! context[54] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[54], context[55]);
  context[56] = 0;
  context[57] = 0;
  context[58] = refalrts::brackets_left( context[56], context[57], context[2], context[3] );
  if( ! context[58] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[58], context[59]);
  context[60] = 0;
  context[61] = 0;
  context[62] = refalrts::brackets_left( context[60], context[61], context[2], context[3] );
  if( ! context[62] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[62], context[63]);
  // closed e.idxTVTVB#0 as range 16
  // closed e.idxTVTVTB#0 as range 20
  // closed e.idxTVTVTTB#0 as range 24
  // closed e.idxTVTVTTTB#0 as range 28
  // closed e.idxTVTVTTTTB#0 as range 32
  // closed e.idxTVTVTTTTTB#0 as range 36
  // closed e.idxTVTVTTTTTTB#0 as range 40
  // closed e.idxTVTVTTTTTTTB#0 as range 44
  // closed e.idxTVTVTTTTTTTTB#0 as range 48
  // closed e.idxTVTVTTTTTTTTTB#0 as range 52
  // closed e.idxTVTVTTTTTTTTTTB#0 as range 56
  // closed e.idxTVTVTTTTTTTTTTTB#0 as range 60
  // closed e.idxTVTVTTTTTTTTTTTT#0 as range 2
  do {
    // ( e.idx ) t.idx ( e.idx ) s.idx ( e.idx ) ( e.idx ) ( e.idx ) ( e.idx ) ( e.idx ) ( e.idx ) ( e.idx ) ( e.idx ) ( e.idx ) ( e.idx ) ( e.idx ) ( e.idx ) e.idx
    // </0 & DoUnBlock_check1/4 (/7 e.eNames#1/5 )/8 t.tSrcPos#1/9 (/13 e.eName#1/11 )/14 s.sScope#1/15 (/18 e.ePrefix#1/16 )/19 (/22 e.eScannedFunctions#1/20 )/23 (/26 e.eScannedSentences#1/24 )/27 (/30 e.eSentences-B#1/28 )/31 (/34 e.eBlockedSentence#1/32 )/35 (/38 e.eSentences-E#1/36 )/39 (/42 e.eUnscannedFunctions#1/40 )/43 (/46 e.eSentencePrefix#1/44 )/47 (/50 e.eBlockResult#1/48 )/51 (/54 e.eSubSentences#1/52 )/55 (/58 e.eRefilledNames#1/56 )/59 (/62 e.eNewName#1/60 )/63 e.eScopeVars#1/2 >/1
    // closed e.eNames#1 as range 5
    // closed e.eName#1 as range 11
    // closed e.ePrefix#1 as range 16
    // closed e.eScannedFunctions#1 as range 20
    // closed e.eScannedSentences#1 as range 24
    // closed e.eSentences-B#1 as range 28
    // closed e.eBlockedSentence#1 as range 32
    // closed e.eSentences-E#1 as range 36
    // closed e.eUnscannedFunctions#1 as range 40
    // closed e.eSentencePrefix#1 as range 44
    // closed e.eBlockResult#1 as range 48
    // closed e.eSubSentences#1 as range 52
    // closed e.eRefilledNames#1 as range 56
    // closed e.eNewName#1 as range 60
    // closed e.eScopeVars#1 as range 2
    //DEBUG: t.tSrcPos#1: 9
    //DEBUG: s.sScope#1: 15
    //DEBUG: e.eNames#1: 5
    //DEBUG: e.eName#1: 11
    //DEBUG: e.ePrefix#1: 16
    //DEBUG: e.eScannedFunctions#1: 20
    //DEBUG: e.eScannedSentences#1: 24
    //DEBUG: e.eSentences-B#1: 28
    //DEBUG: e.eBlockedSentence#1: 32
    //DEBUG: e.eSentences-E#1: 36
    //DEBUG: e.eUnscannedFunctions#1: 40
    //DEBUG: e.eSentencePrefix#1: 44
    //DEBUG: e.eBlockResult#1: 48
    //DEBUG: e.eSubSentences#1: 52
    //DEBUG: e.eRefilledNames#1: 56
    //DEBUG: e.eNewName#1: 60
    //DEBUG: e.eScopeVars#1: 2

    refalrts::reset_allocator();
    //TRASH: {REMOVED TILE} e.eNames#1/5 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} e.eBlockedSentence#1/32 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 Reuse: & DoUnBlock/4 AsIs: (/7 } Tile{ AsIs: e.eRefilledNames#1/56 } Tile{ AsIs: )/8 AsIs: t.tSrcPos#1/9 AsIs: (/13 AsIs: e.eName#1/11 AsIs: )/14 AsIs: s.sScope#1/15 AsIs: (/18 AsIs: e.ePrefix#1/16 AsIs: )/19 AsIs: (/22 AsIs: e.eScannedFunctions#1/20 AsIs: )/23 AsIs: (/26 } Tile{ AsIs: e.eScannedSentences#1/24 } Tile{ AsIs: e.eSentences-B#1/28 } Tile{ AsIs: (/46 AsIs: e.eSentencePrefix#1/44 HalfReuse: # RETURN/47 AsIs: (/50 } (/64 # Call/65 t.tSrcPos#1/9/66 Tile{ AsIs: (/42 } e.eNewName#1/60/68 Tile{ AsIs: )/43 } Tile{ AsIs: e.eScopeVars#1/2 } Tile{ AsIs: e.eBlockResult#1/48 } Tile{ AsIs: )/31 HalfReuse: )/34 } Tile{ AsIs: )/35 HalfReuse: )/38 AsIs: e.eSentences-E#1/36 HalfReuse: (/39 } Tile{ AsIs: e.eUnscannedFunctions#1/40 } Tile{ HalfReuse: (/59 AsIs: (/62 AsIs: e.eNewName#1/60 AsIs: )/63 } </70 Tile{ HalfReuse: & Map/27 AsIs: (/30 } # transformer_AddScopeVars/71 e.eScopeVars#1/2/72 Tile{ HalfReuse: )/54 AsIs: e.eSubSentences#1/52 HalfReuse: >/55 HalfReuse: )/58 } Tile{ AsIs: )/51 } Tile{ AsIs: >/1 ]] }
    if( ! refalrts::alloc_open_bracket( context[64] ) )
      return refalrts::cNoMemory;
    if( ! refalrts::alloc_ident( context[65], ident_Call ) )
      return refalrts::cNoMemory;
    if (! refalrts::copy_evar(context[66], context[67], context[9], context[10]))
      return refalrts::cNoMemory;
    if (! refalrts::copy_evar(context[68], context[69], context[60], context[61]))
      return refalrts::cNoMemory;
    if( ! refalrts::alloc_open_call( context[70] ) )
      return refalrts::cNoMemory;
    if( ! refalrts::alloc_ident( context[71], ident_transformeru_AddScopeVars ) )
      return refalrts::cNoMemory;
    if (! refalrts::copy_evar(context[72], context[73], context[2], context[3]))
      return refalrts::cNoMemory;
    refalrts::update_name( context[4], ref_DoUnBlock.ref.function );
    refalrts::reinit_ident( context[47], ident_RETURN );
    refalrts::reinit_close_bracket( context[34] );
    refalrts::reinit_close_bracket( context[38] );
    refalrts::reinit_open_bracket( context[39] );
    refalrts::reinit_open_bracket( context[59] );
    refalrts::reinit_name( context[27], ref_Map.ref.function );
    refalrts::reinit_close_bracket( context[54] );
    refalrts::reinit_close_call( context[55] );
    refalrts::reinit_close_bracket( context[58] );
    refalrts::push_stack( context[1] );
    refalrts::push_stack( context[0] );
    refalrts::link_brackets( context[39], context[51] );
    refalrts::link_brackets( context[59], context[58] );
    refalrts::push_stack( context[55] );
    refalrts::push_stack( context[70] );
    refalrts::link_brackets( context[30], context[54] );
    refalrts::link_brackets( context[62], context[63] );
    refalrts::link_brackets( context[26], context[38] );
    refalrts::link_brackets( context[46], context[35] );
    refalrts::link_brackets( context[50], context[34] );
    refalrts::link_brackets( context[64], context[31] );
    refalrts::link_brackets( context[42], context[43] );
    refalrts::link_brackets( context[22], context[23] );
    refalrts::link_brackets( context[18], context[19] );
    refalrts::link_brackets( context[13], context[14] );
    refalrts::link_brackets( context[7], context[8] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    res = refalrts::splice_evar( res, context[51], context[51] );
    res = refalrts::splice_evar( res, context[54], context[58] );
    res = refalrts::splice_evar( res, context[72], context[73] );
    res = refalrts::splice_evar( res, context[71], context[71] );
    res = refalrts::splice_evar( res, context[27], context[30] );
    res = refalrts::splice_evar( res, context[70], context[70] );
    res = refalrts::splice_evar( res, context[59], context[63] );
    res = refalrts::splice_evar( res, context[40], context[41] );
    res = refalrts::splice_evar( res, context[35], context[39] );
    res = refalrts::splice_evar( res, context[31], context[34] );
    res = refalrts::splice_evar( res, context[48], context[49] );
    res = refalrts::splice_evar( res, context[2], context[3] );
    res = refalrts::splice_evar( res, context[43], context[43] );
    res = refalrts::splice_evar( res, context[68], context[69] );
    res = refalrts::splice_evar( res, context[42], context[42] );
    res = refalrts::splice_evar( res, context[64], context[67] );
    res = refalrts::splice_evar( res, context[46], context[50] );
    res = refalrts::splice_evar( res, context[28], context[29] );
    res = refalrts::splice_evar( res, context[24], context[25] );
    res = refalrts::splice_evar( res, context[8], context[26] );
    res = refalrts::splice_evar( res, context[56], context[57] );
    refalrts::splice_to_freelist_open( context[7], res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence();

  // ( e.idx ) t.idx ( e.idx ) s.idx ( e.idx ) ( e.idx ) ( e.idx ) ( e.idx ) ( e.idx ) ( e.idx ) ( e.idx ) ( e.idx ) ( e.idx ) ( e.idx ) ( e.idx ) ( e.idx ) e.idx
  // </0 & DoUnBlock_check1/4 (/7 e.eNames#1/5 )/8 t.tSrcPos#1/9 (/13 e.eName#1/11 )/14 s.sScope#1/15 (/18 e.ePrefix#1/16 )/19 (/22 e.eScannedFunctions#1/20 )/23 (/26 e.eScannedSentences#1/24 )/27 (/30 e.eSentences-B#1/28 )/31 (/34 e.eBlockedSentence#1/32 )/35 (/38 e.eSentences-E#1/36 )/39 (/42 e.eUnscannedFunctions#1/40 )/43 (/46 e.eSentencePrefix#1/44 )/47 (/50 e.eBlockResult#1/48 )/51 (/54 e.eSubSentences#1/52 )/55 (/58 e.eRefilledNames#1/56 )/59 (/62 e.eNewName#1/60 )/63 e.eOther#1/2 >/1
  // closed e.eNames#1 as range 5
  // closed e.eName#1 as range 11
  // closed e.ePrefix#1 as range 16
  // closed e.eScannedFunctions#1 as range 20
  // closed e.eScannedSentences#1 as range 24
  // closed e.eSentences-B#1 as range 28
  // closed e.eBlockedSentence#1 as range 32
  // closed e.eSentences-E#1 as range 36
  // closed e.eUnscannedFunctions#1 as range 40
  // closed e.eSentencePrefix#1 as range 44
  // closed e.eBlockResult#1 as range 48
  // closed e.eSubSentences#1 as range 52
  // closed e.eRefilledNames#1 as range 56
  // closed e.eNewName#1 as range 60
  // closed e.eOther#1 as range 2
  //DEBUG: t.tSrcPos#1: 9
  //DEBUG: s.sScope#1: 15
  //DEBUG: e.eNames#1: 5
  //DEBUG: e.eName#1: 11
  //DEBUG: e.ePrefix#1: 16
  //DEBUG: e.eScannedFunctions#1: 20
  //DEBUG: e.eScannedSentences#1: 24
  //DEBUG: e.eSentences-B#1: 28
  //DEBUG: e.eBlockedSentence#1: 32
  //DEBUG: e.eSentences-E#1: 36
  //DEBUG: e.eUnscannedFunctions#1: 40
  //DEBUG: e.eSentencePrefix#1: 44
  //DEBUG: e.eBlockResult#1: 48
  //DEBUG: e.eSubSentences#1: 52
  //DEBUG: e.eRefilledNames#1: 56
  //DEBUG: e.eNewName#1: 60
  //DEBUG: e.eOther#1: 2

  refalrts::reset_allocator();
  //TRASH: {REMOVED TILE} (/62 {REMOVED TILE} )/63 e.eOther#1/2 {REMOVED TILE}
  //RESULT: Tile{ [[ AsIs: </0 Reuse: & DoUnBlock_cont1/4 AsIs: (/7 AsIs: e.eNames#1/5 AsIs: )/8 AsIs: t.tSrcPos#1/9 AsIs: (/13 AsIs: e.eName#1/11 AsIs: )/14 AsIs: s.sScope#1/15 AsIs: (/18 AsIs: e.ePrefix#1/16 AsIs: )/19 AsIs: (/22 AsIs: e.eScannedFunctions#1/20 AsIs: )/23 AsIs: (/26 AsIs: e.eScannedSentences#1/24 AsIs: )/27 AsIs: (/30 AsIs: e.eSentences-B#1/28 AsIs: )/31 AsIs: (/34 AsIs: e.eBlockedSentence#1/32 AsIs: )/35 AsIs: (/38 AsIs: e.eSentences-E#1/36 AsIs: )/39 AsIs: (/42 AsIs: e.eUnscannedFunctions#1/40 AsIs: )/43 AsIs: (/46 AsIs: e.eSentencePrefix#1/44 AsIs: )/47 AsIs: (/50 AsIs: e.eBlockResult#1/48 AsIs: )/51 AsIs: (/54 AsIs: e.eSubSentences#1/52 AsIs: )/55 AsIs: (/58 AsIs: e.eRefilledNames#1/56 AsIs: )/59 } Tile{ AsIs: e.eNewName#1/60 } Tile{ AsIs: >/1 ]] }
  refalrts::update_name( context[4], ref_DoUnBlocku_cont1.ref.function );
  refalrts::push_stack( context[1] );
  refalrts::push_stack( context[0] );
  refalrts::link_brackets( context[58], context[59] );
  refalrts::link_brackets( context[54], context[55] );
  refalrts::link_brackets( context[50], context[51] );
  refalrts::link_brackets( context[46], context[47] );
  refalrts::link_brackets( context[42], context[43] );
  refalrts::link_brackets( context[38], context[39] );
  refalrts::link_brackets( context[34], context[35] );
  refalrts::link_brackets( context[30], context[31] );
  refalrts::link_brackets( context[26], context[27] );
  refalrts::link_brackets( context[22], context[23] );
  refalrts::link_brackets( context[18], context[19] );
  refalrts::link_brackets( context[13], context[14] );
  refalrts::link_brackets( context[7], context[8] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[1];
  res = refalrts::splice_evar( res, context[60], context[61] );
  refalrts::splice_to_freelist_open( context[59], res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_DoUnBlocku_check1("DoUnBlock_check1", 786251477U, 1176157594U, func_DoUnBlocku_check1);

static refalrts::FnResult func_DoUnBlocku_cont1(refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  refalrts::this_is_generated_function();
  // issue here memory for vars with 56 elems
  refalrts::Iter context[56];
  refalrts::zeros( context, 56 );
  // </0 & DoUnBlock_cont1/4 (/7 e.eNames#1/5 )/8 t.tSrcPos#1/9 (/13 e.eName#1/11 )/14 s.sScope#1/15 (/18 e.ePrefix#1/16 )/19 (/22 e.eScannedFunctions#1/20 )/23 (/26 e.eScannedSentences#1/24 )/27 (/30 e.eSentences-B#1/28 )/31 (/34 e.eBlockedSentence#1/32 )/35 (/38 e.eSentences-E#1/36 )/39 (/42 e.eUnscannedFunctions#1/40 )/43 (/46 e.eSentencePrefix#1/44 )/47 (/50 e.eBlockResult#1/48 )/51 (/54 e.eSubSentences#1/52 )/55 e.eOther#1/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  context[5] = 0;
  context[6] = 0;
  context[7] = refalrts::brackets_left( context[5], context[6], context[2], context[3] );
  if( ! context[7] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[7], context[8]);
  // closed e.eNames#1 as range 5
  context[10] = refalrts::tvar_left( context[9], context[2], context[3] );
  if( ! context[10] )
    return refalrts::cRecognitionImpossible;
  context[11] = 0;
  context[12] = 0;
  context[13] = refalrts::brackets_left( context[11], context[12], context[2], context[3] );
  if( ! context[13] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[13], context[14]);
  // closed e.eName#1 as range 11
  if( ! refalrts::svar_left( context[15], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  context[16] = 0;
  context[17] = 0;
  context[18] = refalrts::brackets_left( context[16], context[17], context[2], context[3] );
  if( ! context[18] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[18], context[19]);
  context[20] = 0;
  context[21] = 0;
  context[22] = refalrts::brackets_left( context[20], context[21], context[2], context[3] );
  if( ! context[22] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[22], context[23]);
  context[24] = 0;
  context[25] = 0;
  context[26] = refalrts::brackets_left( context[24], context[25], context[2], context[3] );
  if( ! context[26] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[26], context[27]);
  context[28] = 0;
  context[29] = 0;
  context[30] = refalrts::brackets_left( context[28], context[29], context[2], context[3] );
  if( ! context[30] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[30], context[31]);
  context[32] = 0;
  context[33] = 0;
  context[34] = refalrts::brackets_left( context[32], context[33], context[2], context[3] );
  if( ! context[34] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[34], context[35]);
  context[36] = 0;
  context[37] = 0;
  context[38] = refalrts::brackets_left( context[36], context[37], context[2], context[3] );
  if( ! context[38] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[38], context[39]);
  context[40] = 0;
  context[41] = 0;
  context[42] = refalrts::brackets_left( context[40], context[41], context[2], context[3] );
  if( ! context[42] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[42], context[43]);
  context[44] = 0;
  context[45] = 0;
  context[46] = refalrts::brackets_left( context[44], context[45], context[2], context[3] );
  if( ! context[46] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[46], context[47]);
  context[48] = 0;
  context[49] = 0;
  context[50] = refalrts::brackets_left( context[48], context[49], context[2], context[3] );
  if( ! context[50] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[50], context[51]);
  context[52] = 0;
  context[53] = 0;
  context[54] = refalrts::brackets_left( context[52], context[53], context[2], context[3] );
  if( ! context[54] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[54], context[55]);
  // closed e.ePrefix#1 as range 16
  // closed e.eScannedFunctions#1 as range 20
  // closed e.eScannedSentences#1 as range 24
  // closed e.eSentences-B#1 as range 28
  // closed e.eBlockedSentence#1 as range 32
  // closed e.eSentences-E#1 as range 36
  // closed e.eUnscannedFunctions#1 as range 40
  // closed e.eSentencePrefix#1 as range 44
  // closed e.eBlockResult#1 as range 48
  // closed e.eSubSentences#1 as range 52
  // closed e.eOther#1 as range 2
  //DEBUG: e.eNames#1: 5
  //DEBUG: t.tSrcPos#1: 9
  //DEBUG: e.eName#1: 11
  //DEBUG: s.sScope#1: 15
  //DEBUG: e.ePrefix#1: 16
  //DEBUG: e.eScannedFunctions#1: 20
  //DEBUG: e.eScannedSentences#1: 24
  //DEBUG: e.eSentences-B#1: 28
  //DEBUG: e.eBlockedSentence#1: 32
  //DEBUG: e.eSentences-E#1: 36
  //DEBUG: e.eUnscannedFunctions#1: 40
  //DEBUG: e.eSentencePrefix#1: 44
  //DEBUG: e.eBlockResult#1: 48
  //DEBUG: e.eSubSentences#1: 52
  //DEBUG: e.eOther#1: 2

  refalrts::reset_allocator();
  //TRASH: {REMOVED TILE} {REMOVED TILE} )/51 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} e.eOther#1/2 {REMOVED TILE}
  //RESULT: Tile{ [[ AsIs: </0 Reuse: & DoUnBlock_cont0/4 AsIs: (/7 AsIs: e.eNames#1/5 AsIs: )/8 AsIs: t.tSrcPos#1/9 AsIs: (/13 AsIs: e.eName#1/11 AsIs: )/14 AsIs: s.sScope#1/15 AsIs: (/18 AsIs: e.ePrefix#1/16 AsIs: )/19 AsIs: (/22 AsIs: e.eScannedFunctions#1/20 AsIs: )/23 AsIs: (/26 AsIs: e.eScannedSentences#1/24 AsIs: )/27 AsIs: (/30 AsIs: e.eSentences-B#1/28 AsIs: )/31 AsIs: (/34 AsIs: e.eBlockedSentence#1/32 AsIs: )/35 AsIs: (/38 AsIs: e.eSentences-E#1/36 AsIs: )/39 AsIs: (/42 AsIs: e.eUnscannedFunctions#1/40 AsIs: )/43 AsIs: (/46 AsIs: e.eSentencePrefix#1/44 AsIs: )/47 HalfReuse: # CALL-BLOCK/50 } Tile{ AsIs: (/54 } Tile{ AsIs: e.eBlockResult#1/48 } Tile{ AsIs: )/55 } Tile{ AsIs: e.eSubSentences#1/52 } Tile{ AsIs: >/1 ]] }
  refalrts::update_name( context[4], ref_DoUnBlocku_cont0.ref.function );
  refalrts::reinit_ident( context[50], ident_CALLm_BLOCK );
  refalrts::push_stack( context[1] );
  refalrts::push_stack( context[0] );
  refalrts::link_brackets( context[54], context[55] );
  refalrts::link_brackets( context[46], context[47] );
  refalrts::link_brackets( context[42], context[43] );
  refalrts::link_brackets( context[38], context[39] );
  refalrts::link_brackets( context[34], context[35] );
  refalrts::link_brackets( context[30], context[31] );
  refalrts::link_brackets( context[26], context[27] );
  refalrts::link_brackets( context[22], context[23] );
  refalrts::link_brackets( context[18], context[19] );
  refalrts::link_brackets( context[13], context[14] );
  refalrts::link_brackets( context[7], context[8] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[1];
  res = refalrts::splice_evar( res, context[52], context[53] );
  res = refalrts::splice_evar( res, context[55], context[55] );
  res = refalrts::splice_evar( res, context[48], context[49] );
  res = refalrts::splice_evar( res, context[54], context[54] );
  refalrts::splice_to_freelist_open( context[50], res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_DoUnBlocku_cont1("DoUnBlock_cont1", 786251477U, 1176157594U, func_DoUnBlocku_cont1);

static refalrts::FnResult func_DoUnBlockm_NextFunction(refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  refalrts::this_is_generated_function();
  // issue here memory for vars with 34 elems
  refalrts::Iter context[34];
  refalrts::zeros( context, 34 );
  //FAST GEN: ( e.$ ) t.$ ( e.$ ) ( e.$ ) ( e.$ )
  //GLOBAL GEN: ( e.$ ) t.$ ( e.$ ) ( e.$ ) ( e.$ )
  // </0 & DoUnBlock-NextFunction/4 (/7 e.idxB#0/5 )/8 t.idxT#0/21 (/19 e.idxTVB#0/17 )/20 (/15 e.idxTVTB#0/13 )/16 (/11 e.idxTVTTB#0/9 )/12 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  context[5] = 0;
  context[6] = 0;
  context[7] = refalrts::brackets_left( context[5], context[6], context[2], context[3] );
  if( ! context[7] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[7], context[8]);
  context[9] = 0;
  context[10] = 0;
  context[11] = refalrts::brackets_right( context[9], context[10], context[2], context[3] );
  if( ! context[11] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[11], context[12]);
  context[13] = 0;
  context[14] = 0;
  context[15] = refalrts::brackets_right( context[13], context[14], context[2], context[3] );
  if( ! context[15] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[15], context[16]);
  context[17] = 0;
  context[18] = 0;
  context[19] = refalrts::brackets_right( context[17], context[18], context[2], context[3] );
  if( ! context[19] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[19], context[20]);
  // closed e.idxB#0 as range 5
  // closed e.idxTVB#0 as range 17
  // closed e.idxTVTB#0 as range 13
  // closed e.idxTVTTB#0 as range 9
  context[22] = refalrts::tvar_left( context[21], context[2], context[3] );
  if( ! context[22] )
    return refalrts::cRecognitionImpossible;
  if( ! refalrts::empty_seq( context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  do {
    // ( e.idx ) t.idx ( e.idx ) ( e.idx ) ( ( ( e.idx ) e.idx ) e.idx )
    // </0 & DoUnBlock-NextFunction/4 (/7 e.eNames#1/5 )/8 t.tSrcPos#1/21 (/19 e.ePrefix#1/17 )/20 (/15 e.eScannedFunctions#1/13 )/16 (/11 (/25 (/29 e.eNextFunctionName#1/27 )/30 e.eNextFunctionSentences#1/23 )/26 e.eUnscannedFunctions#1/9 )/12 >/1
    context[32] = context[9];
    context[33] = context[10];
    context[23] = 0;
    context[24] = 0;
    context[25] = refalrts::brackets_left( context[23], context[24], context[32], context[33] );
    if( ! context[25] )
      continue;
    refalrts::bracket_pointers(context[25], context[26]);
    context[27] = 0;
    context[28] = 0;
    context[29] = refalrts::brackets_left( context[27], context[28], context[23], context[24] );
    if( ! context[29] )
      continue;
    refalrts::bracket_pointers(context[29], context[30]);
    // closed e.eNames#1 as range 5
    // closed e.ePrefix#1 as range 17
    // closed e.eScannedFunctions#1 as range 13
    // closed e.eNextFunctionName#1 as range 27
    // closed e.eNextFunctionSentences#1 as range 23
    // closed e.eUnscannedFunctions#1 as range 32(9)
    //DEBUG: t.tSrcPos#1: 21
    //DEBUG: e.eNames#1: 5
    //DEBUG: e.ePrefix#1: 17
    //DEBUG: e.eScannedFunctions#1: 13
    //DEBUG: e.eNextFunctionName#1: 27
    //DEBUG: e.eNextFunctionSentences#1: 23
    //DEBUG: e.eUnscannedFunctions#1: 9

    refalrts::reset_allocator();
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 Reuse: & DoUnBlock/4 AsIs: (/7 AsIs: e.eNames#1/5 AsIs: )/8 AsIs: t.tSrcPos#1/21 AsIs: (/19 } Tile{ AsIs: e.eNextFunctionName#1/27 } )/31 Tile{ HalfReuse: # Local/25 AsIs: (/29 } Tile{ AsIs: e.ePrefix#1/17 } Tile{ AsIs: )/20 AsIs: (/15 AsIs: e.eScannedFunctions#1/13 AsIs: )/16 AsIs: (/11 } Tile{ AsIs: )/30 AsIs: e.eNextFunctionSentences#1/23 HalfReuse: (/26 AsIs: e.eUnscannedFunctions#1/32(9) AsIs: )/12 AsIs: >/1 ]] }
    if( ! refalrts::alloc_close_bracket( context[31] ) )
      return refalrts::cNoMemory;
    refalrts::update_name( context[4], ref_DoUnBlock.ref.function );
    refalrts::reinit_ident( context[25], ident_Local );
    refalrts::reinit_open_bracket( context[26] );
    refalrts::push_stack( context[1] );
    refalrts::push_stack( context[0] );
    refalrts::link_brackets( context[26], context[12] );
    refalrts::link_brackets( context[11], context[30] );
    refalrts::link_brackets( context[15], context[16] );
    refalrts::link_brackets( context[29], context[20] );
    refalrts::link_brackets( context[19], context[31] );
    refalrts::link_brackets( context[7], context[8] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[30];
    res = refalrts::splice_evar( res, context[20], context[11] );
    res = refalrts::splice_evar( res, context[17], context[18] );
    res = refalrts::splice_evar( res, context[25], context[29] );
    res = refalrts::splice_evar( res, context[31], context[31] );
    res = refalrts::splice_evar( res, context[27], context[28] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence();

  // ( e.idx ) t.idx ( e.idx ) ( e.idx ) ( )
  // </0 & DoUnBlock-NextFunction/4 (/7 e.eNames#1/5 )/8 t.tSrcPos#1/21 (/19 e.ePrefix#1/17 )/20 (/15 e.eScannedFunctions#1/13 )/16 (/11 )/12 >/1
  if( ! refalrts::empty_seq( context[9], context[10] ) )
    return refalrts::cRecognitionImpossible;
  // closed e.eNames#1 as range 5
  // closed e.ePrefix#1 as range 17
  // closed e.eScannedFunctions#1 as range 13
  //DEBUG: t.tSrcPos#1: 21
  //DEBUG: e.eNames#1: 5
  //DEBUG: e.ePrefix#1: 17
  //DEBUG: e.eScannedFunctions#1: 13

  refalrts::reset_allocator();
  //TRASH: {REMOVED TILE} </0 & DoUnBlock-NextFunction/4 {REMOVED TILE} t.tSrcPos#1/21 (/19 e.ePrefix#1/17 )/20 (/15 {REMOVED TILE} )/16 (/11 )/12 >/1 {REMOVED TILE}
  //RESULT: Tile{ [[ } Tile{ AsIs: (/7 AsIs: e.eNames#1/5 AsIs: )/8 } Tile{ AsIs: e.eScannedFunctions#1/13 } Tile{ ]] }
  refalrts::link_brackets( context[7], context[8] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = arg_end->next;
  res = refalrts::splice_evar( res, context[13], context[14] );
  res = refalrts::splice_evar( res, context[7], context[8] );
  refalrts::splice_to_freelist_open( trash_prev, res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_DoUnBlockm_NextFunction("DoUnBlock-NextFunction", 786251477U, 1176157594U, func_DoUnBlockm_NextFunction);

static refalrts::FnResult func_WithBlock(refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  refalrts::this_is_generated_function();
  // issue here memory for vars with 11 elems
  refalrts::Iter context[11];
  refalrts::zeros( context, 11 );
  // </0 & WithBlock/4 (/7 e.ePattern#1/5 )/8 e.eSentence#1/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  context[5] = 0;
  context[6] = 0;
  context[7] = refalrts::brackets_left( context[5], context[6], context[2], context[3] );
  if( ! context[7] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[7], context[8]);
  // closed e.ePattern#1 as range 5
  // closed e.eSentence#1 as range 2
  //DEBUG: e.ePattern#1: 5
  //DEBUG: e.eSentence#1: 2

  refalrts::reset_allocator();
  //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ AsIs: </0 Reuse: & DoWithBlock/4 AsIs: (/7 } (/9 Tile{ AsIs: e.ePattern#1/5 } )/10 Tile{ AsIs: )/8 AsIs: e.eSentence#1/2 AsIs: >/1 ]] }
  if( ! refalrts::alloc_open_bracket( context[9] ) )
    return refalrts::cNoMemory;
  if( ! refalrts::alloc_close_bracket( context[10] ) )
    return refalrts::cNoMemory;
  refalrts::update_name( context[4], ref_DoWithBlock.ref.function );
  refalrts::push_stack( context[1] );
  refalrts::push_stack( context[0] );
  refalrts::link_brackets( context[7], context[8] );
  refalrts::link_brackets( context[9], context[10] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[8];
  res = refalrts::splice_evar( res, context[10], context[10] );
  res = refalrts::splice_evar( res, context[5], context[6] );
  res = refalrts::splice_evar( res, context[9], context[9] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_WithBlock("WithBlock", 786251477U, 1176157594U, func_WithBlock);

static refalrts::FnResult func_DoWithBlock(refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  refalrts::this_is_generated_function();
  // issue here memory for vars with 20 elems
  refalrts::Iter context[20];
  refalrts::zeros( context, 20 );
  //FAST GEN: ( e.$ ) t.$ e.$
  //GLOBAL GEN: ( e.$ ) t.$ e.$
  // </0 & DoWithBlock/4 (/7 e.idxB#0/5 )/8 t.idxT#0/9 e.idxTV#0/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  context[5] = 0;
  context[6] = 0;
  context[7] = refalrts::brackets_left( context[5], context[6], context[2], context[3] );
  if( ! context[7] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[7], context[8]);
  // closed e.idxB#0 as range 5
  context[10] = refalrts::tvar_left( context[9], context[2], context[3] );
  if( ! context[10] )
    return refalrts::cRecognitionImpossible;
  // closed e.idxTV#0 as range 2
  do {
    // ( e.idx ) ( # Condition t.idx t.idx ) e.idx
    // </0 & DoWithBlock/4 (/7 e.ePrefix#1/5 )/8 (/9 # Condition/13 t.tCondResult#1/14 t.tCondPattern#1/16 )/10 e.eTail#1/2 >/1
    context[11] = 0;
    context[12] = 0;
    if( ! refalrts::brackets_term( context[11], context[12], context[9] ) )
      continue;
    context[13] = refalrts::ident_left(  ident_Condition, context[11], context[12] );
    if( ! context[13] )
      continue;
    // closed e.ePrefix#1 as range 5
    // closed e.eTail#1 as range 2
    context[15] = refalrts::tvar_left( context[14], context[11], context[12] );
    if( ! context[15] )
      continue;
    context[17] = refalrts::tvar_left( context[16], context[11], context[12] );
    if( ! context[17] )
      continue;
    if( ! refalrts::empty_seq( context[11], context[12] ) )
      continue;
    //DEBUG: e.ePrefix#1: 5
    //DEBUG: e.eTail#1: 2
    //DEBUG: t.tCondResult#1: 14
    //DEBUG: t.tCondPattern#1: 16

    refalrts::reset_allocator();
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 AsIs: & DoWithBlock/4 AsIs: (/7 AsIs: e.ePrefix#1/5 HalfReuse: (/8 HalfReuse: # Condition/9 } Tile{ AsIs: t.tCondResult#1/14 AsIs: t.tCondPattern#1/16 } Tile{ HalfReuse: )/13 } Tile{ AsIs: )/10 AsIs: e.eTail#1/2 AsIs: >/1 ]] }
    refalrts::reinit_open_bracket( context[8] );
    refalrts::reinit_ident( context[9], ident_Condition );
    refalrts::reinit_close_bracket( context[13] );
    refalrts::push_stack( context[1] );
    refalrts::push_stack( context[0] );
    refalrts::link_brackets( context[7], context[10] );
    refalrts::link_brackets( context[8], context[13] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[10];
    res = refalrts::splice_evar( res, context[13], context[13] );
    res = refalrts::splice_evar( res, context[14], context[17] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence();

  do {
    // ( e.idx ) # CALL-BLOCK t.idx e.idx
    // </0 & DoWithBlock/4 (/7 e.ePrefix#1/5 )/8 # CALL-BLOCK/9 t.tResult#1/11 e.eSubSentences#1/2 >/1
    if( ! refalrts::ident_term(  ident_CALLm_BLOCK, context[9] ) )
      continue;
    // closed e.ePrefix#1 as range 5
    context[18] = context[2];
    context[19] = context[3];
    context[12] = refalrts::tvar_left( context[11], context[18], context[19] );
    if( ! context[12] )
      continue;
    // closed e.eSubSentences#1 as range 18(2)
    //DEBUG: e.ePrefix#1: 5
    //DEBUG: t.tResult#1: 11
    //DEBUG: e.eSubSentences#1: 2

    refalrts::reset_allocator();
    //TRASH: {REMOVED TILE} </0 & DoWithBlock/4 {REMOVED TILE} {REMOVED TILE} >/1 {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ AsIs: (/7 AsIs: e.ePrefix#1/5 AsIs: )/8 AsIs: # CALL-BLOCK/9 AsIs: t.tResult#1/11 } Tile{ AsIs: e.eSubSentences#1/18(2) } Tile{ ]] }
    refalrts::link_brackets( context[7], context[8] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = arg_end->next;
    res = refalrts::splice_evar( res, context[18], context[19] );
    res = refalrts::splice_evar( res, context[7], context[12] );
    refalrts::splice_to_freelist_open( trash_prev, res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence();

  // ( e.idx ) # RETURN t.idx
  // </0 & DoWithBlock/4 (/7 e.ePrefix#1/5 )/8 # RETURN/9 t.tResult#1/11 >/1
  if( ! refalrts::ident_term(  ident_RETURN, context[9] ) )
    return refalrts::cRecognitionImpossible;
  // closed e.ePrefix#1 as range 5
  context[12] = refalrts::tvar_left( context[11], context[2], context[3] );
  if( ! context[12] )
    return refalrts::cRecognitionImpossible;
  if( ! refalrts::empty_seq( context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  //DEBUG: e.ePrefix#1: 5
  //DEBUG: t.tResult#1: 11

  refalrts::reset_allocator();
  //TRASH: {REMOVED TILE} </0 & DoWithBlock/4 (/7 e.ePrefix#1/5 )/8 # RETURN/9 t.tResult#1/11 >/1 {REMOVED TILE}
  //RESULT: Tile{ [[ } Tile{ ]] }
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = arg_end->next;
  refalrts::splice_to_freelist_open( trash_prev, res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_DoWithBlock("DoWithBlock", 786251477U, 1176157594U, func_DoWithBlock);

static refalrts::FnResult func_BlockScopeVars(refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  refalrts::this_is_generated_function();
  // issue here memory for vars with 18 elems
  refalrts::Iter context[18];
  refalrts::zeros( context, 18 );
  // </0 & BlockScopeVars/4 (/7 e.ePattern#1/5 )/8 e.eConditions#1/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  context[5] = 0;
  context[6] = 0;
  context[7] = refalrts::brackets_left( context[5], context[6], context[2], context[3] );
  if( ! context[7] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[7], context[8]);
  // closed e.ePattern#1 as range 5
  // closed e.eConditions#1 as range 2
  //DEBUG: e.ePattern#1: 5
  //DEBUG: e.eConditions#1: 2

  refalrts::reset_allocator();
  //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ } </9 & Map/10 # transformer_MakeVariables/11 </12 Tile{ HalfReuse: & ExtractVariables/0 HalfReuse: (/4 AsIs: (/7 AsIs: e.ePattern#1/5 AsIs: )/8 AsIs: e.eConditions#1/2 HalfReuse: # RETURN/1 } (/13 )/14 )/15 >/16 >/17 Tile{ ]] }
  if( ! refalrts::alloc_open_call( context[9] ) )
    return refalrts::cNoMemory;
  if( ! refalrts::alloc_name( context[10], ref_Map.ref.function ) )
    return refalrts::cNoMemory;
  if( ! refalrts::alloc_ident( context[11], ident_transformeru_MakeVariables ) )
    return refalrts::cNoMemory;
  if( ! refalrts::alloc_open_call( context[12] ) )
    return refalrts::cNoMemory;
  if( ! refalrts::alloc_open_bracket( context[13] ) )
    return refalrts::cNoMemory;
  if( ! refalrts::alloc_close_bracket( context[14] ) )
    return refalrts::cNoMemory;
  if( ! refalrts::alloc_close_bracket( context[15] ) )
    return refalrts::cNoMemory;
  if( ! refalrts::alloc_close_call( context[16] ) )
    return refalrts::cNoMemory;
  if( ! refalrts::alloc_close_call( context[17] ) )
    return refalrts::cNoMemory;
  refalrts::reinit_name( context[0], ref_ExtractVariables.ref.function );
  refalrts::reinit_open_bracket( context[4] );
  refalrts::reinit_ident( context[1], ident_RETURN );
  refalrts::push_stack( context[17] );
  refalrts::push_stack( context[9] );
  refalrts::push_stack( context[16] );
  refalrts::push_stack( context[12] );
  refalrts::link_brackets( context[4], context[15] );
  refalrts::link_brackets( context[13], context[14] );
  refalrts::link_brackets( context[7], context[8] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = arg_end->next;
  res = refalrts::splice_evar( res, context[13], context[17] );
  res = refalrts::splice_evar( res, context[0], context[1] );
  res = refalrts::splice_evar( res, context[9], context[12] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_BlockScopeVars("BlockScopeVars", 786251477U, 1176157594U, func_BlockScopeVars);

static refalrts::FnResult func_transformeru_MakeVariables(refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  refalrts::this_is_generated_function();
  // issue here memory for vars with 12 elems
  refalrts::Iter context[12];
  refalrts::zeros( context, 12 );
  //FAST GEN: ( s.$ e.$ )
  //GLOBAL GEN: ( s.$ e.$ )
  // </0 & transformer_MakeVariables/4 (/7 s.idxB#0/9 e.idxBV#0/5 )/8 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  context[5] = 0;
  context[6] = 0;
  context[7] = refalrts::brackets_left( context[5], context[6], context[2], context[3] );
  if( ! context[7] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[7], context[8]);
  if( ! refalrts::empty_seq( context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  if( ! refalrts::svar_left( context[9], context[5], context[6] ) )
    return refalrts::cRecognitionImpossible;
  // closed e.idxBV#0 as range 5
  do {
    // ( 'e' e.idx )
    // </0 & transformer_MakeVariables/4 (/7 'e'/9 e.eIndex#1/5 )/8 >/1
    if( ! refalrts::char_term( 'e', context[9] ) )
      continue;
    // closed e.eIndex#1 as range 5
    //DEBUG: e.eIndex#1: 5

    refalrts::reset_allocator();
    //TRASH: {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ } (/10 # Brackets/11 Tile{ HalfReuse: (/0 HalfReuse: # Variable/4 HalfReuse: # NO-POS/7 AsIs: 'e'/9 AsIs: e.eIndex#1/5 AsIs: )/8 HalfReuse: )/1 ]] }
    if( ! refalrts::alloc_open_bracket( context[10] ) )
      return refalrts::cNoMemory;
    if( ! refalrts::alloc_ident( context[11], ident_Brackets ) )
      return refalrts::cNoMemory;
    refalrts::reinit_open_bracket( context[0] );
    refalrts::reinit_ident( context[4], ident_Variable );
    refalrts::reinit_ident( context[7], ident_NOm_POS );
    refalrts::reinit_close_bracket( context[1] );
    refalrts::link_brackets( context[10], context[1] );
    refalrts::link_brackets( context[0], context[8] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[0];
    res = refalrts::splice_evar( res, context[10], context[11] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence();

  // ( s.idx e.idx )
  // </0 & transformer_MakeVariables/4 (/7 s.sVarType#1/9 e.eIndex#1/5 )/8 >/1
  // closed e.eIndex#1 as range 5
  //DEBUG: s.sVarType#1: 9
  //DEBUG: e.eIndex#1: 5

  refalrts::reset_allocator();
  //TRASH: {REMOVED TILE} >/1 {REMOVED TILE}
  //RESULT: Tile{ [[ HalfReuse: (/0 HalfReuse: # Variable/4 HalfReuse: # NO-POS/7 AsIs: s.sVarType#1/9 AsIs: e.eIndex#1/5 AsIs: )/8 } Tile{ ]] }
  refalrts::reinit_open_bracket( context[0] );
  refalrts::reinit_ident( context[4], ident_Variable );
  refalrts::reinit_ident( context[7], ident_NOm_POS );
  refalrts::link_brackets( context[0], context[8] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = arg_end->next;
  refalrts::splice_to_freelist_open( context[8], res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_transformeru_MakeVariables("transformer_MakeVariables", 786251477U, 1176157594U, func_transformeru_MakeVariables);

static refalrts::FnResult func_transformeru_AddScopeVars(refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  refalrts::this_is_generated_function();
  // issue here memory for vars with 13 elems
  refalrts::Iter context[13];
  refalrts::zeros( context, 13 );
  // </0 & transformer_AddScopeVars/4 e.eScopeVars#1/2 (/7 (/11 e.ePattern#1/9 )/12 e.eTail#1/5 )/8 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  context[5] = 0;
  context[6] = 0;
  context[7] = refalrts::brackets_right( context[5], context[6], context[2], context[3] );
  if( ! context[7] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[7], context[8]);
  context[9] = 0;
  context[10] = 0;
  context[11] = refalrts::brackets_left( context[9], context[10], context[5], context[6] );
  if( ! context[11] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[11], context[12]);
  // closed e.eScopeVars#1 as range 2
  // closed e.ePattern#1 as range 9
  // closed e.eTail#1 as range 5
  //DEBUG: e.eScopeVars#1: 2
  //DEBUG: e.ePattern#1: 9
  //DEBUG: e.eTail#1: 5

  refalrts::reset_allocator();
  //TRASH: {REMOVED TILE} </0 & transformer_AddScopeVars/4 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} >/1 {REMOVED TILE}
  //RESULT: Tile{ [[ } Tile{ AsIs: (/7 AsIs: (/11 } Tile{ AsIs: e.eScopeVars#1/2 } Tile{ AsIs: e.ePattern#1/9 } Tile{ AsIs: )/12 AsIs: e.eTail#1/5 AsIs: )/8 } Tile{ ]] }
  refalrts::link_brackets( context[7], context[8] );
  refalrts::link_brackets( context[11], context[12] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = arg_end->next;
  res = refalrts::splice_evar( res, context[12], context[8] );
  res = refalrts::splice_evar( res, context[9], context[10] );
  res = refalrts::splice_evar( res, context[2], context[3] );
  res = refalrts::splice_evar( res, context[7], context[11] );
  refalrts::splice_to_freelist_open( trash_prev, res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_transformeru_AddScopeVars("transformer_AddScopeVars", 786251477U, 1176157594U, func_transformeru_AddScopeVars);

static refalrts::FnResult func_UnCondition(refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  refalrts::this_is_generated_function();
  // issue here memory for vars with 24 elems
  refalrts::Iter context[24];
  refalrts::zeros( context, 24 );
  // </0 & UnCondition/4 (/7 e.eNames#1/5 )/8 t.tSrcPos#1/9 (/13 e.eName#1/11 )/14 s.sScope#1/15 e.eSentences#1/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  context[5] = 0;
  context[6] = 0;
  context[7] = refalrts::brackets_left( context[5], context[6], context[2], context[3] );
  if( ! context[7] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[7], context[8]);
  // closed e.eNames#1 as range 5
  context[10] = refalrts::tvar_left( context[9], context[2], context[3] );
  if( ! context[10] )
    return refalrts::cRecognitionImpossible;
  context[11] = 0;
  context[12] = 0;
  context[13] = refalrts::brackets_left( context[11], context[12], context[2], context[3] );
  if( ! context[13] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[13], context[14]);
  // closed e.eName#1 as range 11
  if( ! refalrts::svar_left( context[15], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  // closed e.eSentences#1 as range 2
  //DEBUG: e.eNames#1: 5
  //DEBUG: t.tSrcPos#1: 9
  //DEBUG: e.eName#1: 11
  //DEBUG: s.sScope#1: 15
  //DEBUG: e.eSentences#1: 2

  refalrts::reset_allocator();
  //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ AsIs: </0 Reuse: & DoUnCondition/4 AsIs: (/7 AsIs: e.eNames#1/5 AsIs: )/8 AsIs: t.tSrcPos#1/9 AsIs: (/13 AsIs: e.eName#1/11 AsIs: )/14 AsIs: s.sScope#1/15 } (/16 e.eName#1/11/17 )/19 (/20 )/21 Tile{ AsIs: e.eSentences#1/2 } (/22 )/23 Tile{ AsIs: >/1 ]] }
  if( ! refalrts::alloc_open_bracket( context[16] ) )
    return refalrts::cNoMemory;
  if (! refalrts::copy_evar(context[17], context[18], context[11], context[12]))
    return refalrts::cNoMemory;
  if( ! refalrts::alloc_close_bracket( context[19] ) )
    return refalrts::cNoMemory;
  if( ! refalrts::alloc_open_bracket( context[20] ) )
    return refalrts::cNoMemory;
  if( ! refalrts::alloc_close_bracket( context[21] ) )
    return refalrts::cNoMemory;
  if( ! refalrts::alloc_open_bracket( context[22] ) )
    return refalrts::cNoMemory;
  if( ! refalrts::alloc_close_bracket( context[23] ) )
    return refalrts::cNoMemory;
  refalrts::update_name( context[4], ref_DoUnCondition.ref.function );
  refalrts::push_stack( context[1] );
  refalrts::push_stack( context[0] );
  refalrts::link_brackets( context[22], context[23] );
  refalrts::link_brackets( context[20], context[21] );
  refalrts::link_brackets( context[16], context[19] );
  refalrts::link_brackets( context[13], context[14] );
  refalrts::link_brackets( context[7], context[8] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[1];
  res = refalrts::splice_evar( res, context[22], context[23] );
  res = refalrts::splice_evar( res, context[2], context[3] );
  res = refalrts::splice_evar( res, context[16], context[21] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_UnCondition("UnCondition", 786251477U, 1176157594U, func_UnCondition);

static refalrts::FnResult func_DoUnCondition(refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  refalrts::this_is_generated_function();
  // issue here memory for vars with 59 elems
  refalrts::Iter context[59];
  refalrts::zeros( context, 59 );
  //FAST GEN: e.$
  //GLOBAL GEN: e.$
  // </0 & DoUnCondition/4 e.idx#0/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.idx#0 as range 2
  do {
    // ( e.idx ) t.idx ( e.idx ) s.idx ( e.idx ) ( e.idx ) e.idx ( e.idx )
    // </0 & DoUnCondition/4 (/7 e.eNames#1/5 )/8 t.tSrcPos#1/13 (/17 e.eName#1/15 )/18 s.sScope#1/19 (/22 e.ePrefix#1/20 )/23 (/26 e.eScannedFunctions#1/24 )/27 e.eSentences-B#1/28 (/32 e.eConditionalSentence#1/30 )/33 e.eSentences-E#1/2 (/11 e.eUnscannedFunctions#1/9 )/12 >/1
    context[55] = context[2];
    context[56] = context[3];
    context[5] = 0;
    context[6] = 0;
    context[7] = refalrts::brackets_left( context[5], context[6], context[55], context[56] );
    if( ! context[7] )
      continue;
    refalrts::bracket_pointers(context[7], context[8]);
    context[9] = 0;
    context[10] = 0;
    context[11] = refalrts::brackets_right( context[9], context[10], context[55], context[56] );
    if( ! context[11] )
      continue;
    refalrts::bracket_pointers(context[11], context[12]);
    // closed e.eNames#1 as range 5
    // closed e.eUnscannedFunctions#1 as range 9
    context[14] = refalrts::tvar_left( context[13], context[55], context[56] );
    if( ! context[14] )
      continue;
    context[15] = 0;
    context[16] = 0;
    context[17] = refalrts::brackets_left( context[15], context[16], context[55], context[56] );
    if( ! context[17] )
      continue;
    refalrts::bracket_pointers(context[17], context[18]);
    // closed e.eName#1 as range 15
    if( ! refalrts::svar_left( context[19], context[55], context[56] ) )
      continue;
    context[20] = 0;
    context[21] = 0;
    context[22] = refalrts::brackets_left( context[20], context[21], context[55], context[56] );
    if( ! context[22] )
      continue;
    refalrts::bracket_pointers(context[22], context[23]);
    context[24] = 0;
    context[25] = 0;
    context[26] = refalrts::brackets_left( context[24], context[25], context[55], context[56] );
    if( ! context[26] )
      continue;
    refalrts::bracket_pointers(context[26], context[27]);
    // closed e.ePrefix#1 as range 20
    // closed e.eScannedFunctions#1 as range 24
    context[28] = 0;
    context[29] = 0;
    refalrts::start_e_loop();
    do {
      context[57] = context[55];
      context[58] = context[56];
      context[30] = 0;
      context[31] = 0;
      context[32] = refalrts::brackets_left( context[30], context[31], context[57], context[58] );
      if( ! context[32] )
        continue;
      refalrts::bracket_pointers(context[32], context[33]);
      // closed e.eConditionalSentence#1 as range 30
      // closed e.eSentences-E#1 as range 57(2)
      //DEBUG: e.eNames#1: 5
      //DEBUG: e.eUnscannedFunctions#1: 9
      //DEBUG: t.tSrcPos#1: 13
      //DEBUG: e.eName#1: 15
      //DEBUG: s.sScope#1: 19
      //DEBUG: e.ePrefix#1: 20
      //DEBUG: e.eScannedFunctions#1: 24
      //DEBUG: e.eSentences-B#1: 28
      //DEBUG: e.eConditionalSentence#1: 30
      //DEBUG: e.eSentences-E#1: 2

      refalrts::reset_allocator();
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 Reuse: & DoUnCondition_check/4 AsIs: (/7 AsIs: e.eNames#1/5 AsIs: )/8 AsIs: t.tSrcPos#1/13 AsIs: (/17 AsIs: e.eName#1/15 AsIs: )/18 AsIs: s.sScope#1/19 AsIs: (/22 AsIs: e.ePrefix#1/20 AsIs: )/23 AsIs: (/26 AsIs: e.eScannedFunctions#1/24 AsIs: )/27 } (/34 Tile{ AsIs: e.eSentences-B#1/28 } )/35 (/36 e.eConditionalSentence#1/30/37 )/39 (/40 e.eSentences-E#1/57(2)/41 Tile{ AsIs: )/12 } (/43 Tile{ AsIs: e.eUnscannedFunctions#1/9 } )/44 </45 & UnConditionSentence/46 (/47 e.eNames#1/5/48 )/50 (/51 e.ePrefix#1/20/52 )/54 Tile{ AsIs: (/32 AsIs: e.eConditionalSentence#1/30 AsIs: )/33 AsIs: e.eSentences-E#1/57(2) HalfReuse: >/11 } Tile{ AsIs: >/1 ]] }
      if( ! refalrts::alloc_open_bracket( context[34] ) )
        return refalrts::cNoMemory;
      if( ! refalrts::alloc_close_bracket( context[35] ) )
        return refalrts::cNoMemory;
      if( ! refalrts::alloc_open_bracket( context[36] ) )
        return refalrts::cNoMemory;
      if (! refalrts::copy_evar(context[37], context[38], context[30], context[31]))
        return refalrts::cNoMemory;
      if( ! refalrts::alloc_close_bracket( context[39] ) )
        return refalrts::cNoMemory;
      if( ! refalrts::alloc_open_bracket( context[40] ) )
        return refalrts::cNoMemory;
      if (! refalrts::copy_evar(context[41], context[42], context[57], context[58]))
        return refalrts::cNoMemory;
      if( ! refalrts::alloc_open_bracket( context[43] ) )
        return refalrts::cNoMemory;
      if( ! refalrts::alloc_close_bracket( context[44] ) )
        return refalrts::cNoMemory;
      if( ! refalrts::alloc_open_call( context[45] ) )
        return refalrts::cNoMemory;
      if( ! refalrts::alloc_name( context[46], ref_UnConditionSentence.ref.function ) )
        return refalrts::cNoMemory;
      if( ! refalrts::alloc_open_bracket( context[47] ) )
        return refalrts::cNoMemory;
      if (! refalrts::copy_evar(context[48], context[49], context[5], context[6]))
        return refalrts::cNoMemory;
      if( ! refalrts::alloc_close_bracket( context[50] ) )
        return refalrts::cNoMemory;
      if( ! refalrts::alloc_open_bracket( context[51] ) )
        return refalrts::cNoMemory;
      if (! refalrts::copy_evar(context[52], context[53], context[20], context[21]))
        return refalrts::cNoMemory;
      if( ! refalrts::alloc_close_bracket( context[54] ) )
        return refalrts::cNoMemory;
      refalrts::update_name( context[4], ref_DoUnConditionu_check.ref.function );
      refalrts::reinit_close_call( context[11] );
      refalrts::push_stack( context[1] );
      refalrts::push_stack( context[0] );
      refalrts::push_stack( context[11] );
      refalrts::push_stack( context[45] );
      refalrts::link_brackets( context[32], context[33] );
      refalrts::link_brackets( context[51], context[54] );
      refalrts::link_brackets( context[47], context[50] );
      refalrts::link_brackets( context[43], context[44] );
      refalrts::link_brackets( context[40], context[12] );
      refalrts::link_brackets( context[36], context[39] );
      refalrts::link_brackets( context[34], context[35] );
      refalrts::link_brackets( context[26], context[27] );
      refalrts::link_brackets( context[22], context[23] );
      refalrts::link_brackets( context[17], context[18] );
      refalrts::link_brackets( context[7], context[8] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[1];
      res = refalrts::splice_evar( res, context[32], context[11] );
      res = refalrts::splice_evar( res, context[44], context[54] );
      res = refalrts::splice_evar( res, context[9], context[10] );
      res = refalrts::splice_evar( res, context[43], context[43] );
      res = refalrts::splice_evar( res, context[12], context[12] );
      res = refalrts::splice_evar( res, context[41], context[42] );
      res = refalrts::splice_evar( res, context[35], context[40] );
      res = refalrts::splice_evar( res, context[28], context[29] );
      res = refalrts::splice_evar( res, context[34], context[34] );
      refalrts::use( res );
      return refalrts::cSuccess;
    } while ( refalrts::open_evar_advance( context[28], context[29], context[55], context[56] ) );
  } while ( 0 );
  refalrts::stop_sentence();

  // e.idx
  // </0 & DoUnCondition/4 e.eOther#1/2 >/1
  // closed e.eOther#1 as range 2
  //DEBUG: e.eOther#1: 2

  refalrts::reset_allocator();
  //TRASH: {REMOVED TILE}
  //RESULT: Tile{ [[ AsIs: </0 Reuse: & DoUnCondition_cont/4 AsIs: e.eOther#1/2 AsIs: >/1 ]] }
  refalrts::update_name( context[4], ref_DoUnConditionu_cont.ref.function );
  refalrts::push_stack( context[1] );
  refalrts::push_stack( context[0] );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_DoUnCondition("DoUnCondition", 786251477U, 1176157594U, func_DoUnCondition);

static refalrts::FnResult func_DoUnConditionu_check(refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  refalrts::this_is_generated_function();
  // issue here memory for vars with 53 elems
  refalrts::Iter context[53];
  refalrts::zeros( context, 53 );
  //FAST GEN: ( e.$ ) t.$ ( e.$ ) s.$ ( e.$ ) ( e.$ ) ( e.$ ) ( e.$ ) ( e.$ ) ( e.$ ) e.$
  //GLOBAL GEN: ( e.$ ) t.$ ( e.$ ) s.$ ( e.$ ) ( e.$ ) ( e.$ ) ( e.$ ) ( e.$ ) ( e.$ ) e.$
  // </0 & DoUnCondition_check/4 (/7 e.idxB#0/5 )/8 t.idxT#0/9 (/13 e.idxTVB#0/11 )/14 s.idxTVT#0/15 (/18 e.idxTVTVB#0/16 )/19 (/22 e.idxTVTVTB#0/20 )/23 (/26 e.idxTVTVTTB#0/24 )/27 (/30 e.idxTVTVTTTB#0/28 )/31 (/34 e.idxTVTVTTTTB#0/32 )/35 (/38 e.idxTVTVTTTTTB#0/36 )/39 e.idxTVTVTTTTTT#0/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  context[5] = 0;
  context[6] = 0;
  context[7] = refalrts::brackets_left( context[5], context[6], context[2], context[3] );
  if( ! context[7] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[7], context[8]);
  // closed e.idxB#0 as range 5
  context[10] = refalrts::tvar_left( context[9], context[2], context[3] );
  if( ! context[10] )
    return refalrts::cRecognitionImpossible;
  context[11] = 0;
  context[12] = 0;
  context[13] = refalrts::brackets_left( context[11], context[12], context[2], context[3] );
  if( ! context[13] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[13], context[14]);
  // closed e.idxTVB#0 as range 11
  if( ! refalrts::svar_left( context[15], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  context[16] = 0;
  context[17] = 0;
  context[18] = refalrts::brackets_left( context[16], context[17], context[2], context[3] );
  if( ! context[18] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[18], context[19]);
  context[20] = 0;
  context[21] = 0;
  context[22] = refalrts::brackets_left( context[20], context[21], context[2], context[3] );
  if( ! context[22] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[22], context[23]);
  context[24] = 0;
  context[25] = 0;
  context[26] = refalrts::brackets_left( context[24], context[25], context[2], context[3] );
  if( ! context[26] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[26], context[27]);
  context[28] = 0;
  context[29] = 0;
  context[30] = refalrts::brackets_left( context[28], context[29], context[2], context[3] );
  if( ! context[30] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[30], context[31]);
  context[32] = 0;
  context[33] = 0;
  context[34] = refalrts::brackets_left( context[32], context[33], context[2], context[3] );
  if( ! context[34] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[34], context[35]);
  context[36] = 0;
  context[37] = 0;
  context[38] = refalrts::brackets_left( context[36], context[37], context[2], context[3] );
  if( ! context[38] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[38], context[39]);
  // closed e.idxTVTVB#0 as range 16
  // closed e.idxTVTVTB#0 as range 20
  // closed e.idxTVTVTTB#0 as range 24
  // closed e.idxTVTVTTTB#0 as range 28
  // closed e.idxTVTVTTTTB#0 as range 32
  // closed e.idxTVTVTTTTTB#0 as range 36
  // closed e.idxTVTVTTTTTT#0 as range 2
  do {
    // ( e.idx ) t.idx ( e.idx ) s.idx ( e.idx ) ( e.idx ) ( e.idx ) ( e.idx ) ( e.idx ) ( e.idx ) # Success ( e.idx ) ( e.idx ) e.idx
    // </0 & DoUnCondition_check/4 (/7 e.eNames#1/5 )/8 t.tSrcPos#1/9 (/13 e.eName#1/11 )/14 s.sScope#1/15 (/18 e.ePrefix#1/16 )/19 (/22 e.eScannedFunctions#1/20 )/23 (/26 e.eSentences-B#1/24 )/27 (/30 e.eConditionalSentence#1/28 )/31 (/34 e.eSentences-E#1/32 )/35 (/38 e.eUnscannedFunctions#1/36 )/39 # Success/40 (/43 e.eRefilledNames#1/41 )/44 (/47 e.eTransformedSentences#1/45 )/48 e.eNewFunctions#1/2 >/1
    context[51] = context[2];
    context[52] = context[3];
    context[40] = refalrts::ident_left(  ident_Success, context[51], context[52] );
    if( ! context[40] )
      continue;
    context[41] = 0;
    context[42] = 0;
    context[43] = refalrts::brackets_left( context[41], context[42], context[51], context[52] );
    if( ! context[43] )
      continue;
    refalrts::bracket_pointers(context[43], context[44]);
    context[45] = 0;
    context[46] = 0;
    context[47] = refalrts::brackets_left( context[45], context[46], context[51], context[52] );
    if( ! context[47] )
      continue;
    refalrts::bracket_pointers(context[47], context[48]);
    // closed e.eNames#1 as range 5
    // closed e.eName#1 as range 11
    // closed e.ePrefix#1 as range 16
    // closed e.eScannedFunctions#1 as range 20
    // closed e.eSentences-B#1 as range 24
    // closed e.eConditionalSentence#1 as range 28
    // closed e.eSentences-E#1 as range 32
    // closed e.eUnscannedFunctions#1 as range 36
    // closed e.eRefilledNames#1 as range 41
    // closed e.eTransformedSentences#1 as range 45
    // closed e.eNewFunctions#1 as range 51(2)
    //DEBUG: t.tSrcPos#1: 9
    //DEBUG: s.sScope#1: 15
    //DEBUG: e.eNames#1: 5
    //DEBUG: e.eName#1: 11
    //DEBUG: e.ePrefix#1: 16
    //DEBUG: e.eScannedFunctions#1: 20
    //DEBUG: e.eSentences-B#1: 24
    //DEBUG: e.eConditionalSentence#1: 28
    //DEBUG: e.eSentences-E#1: 32
    //DEBUG: e.eUnscannedFunctions#1: 36
    //DEBUG: e.eRefilledNames#1: 41
    //DEBUG: e.eTransformedSentences#1: 45
    //DEBUG: e.eNewFunctions#1: 2

    refalrts::reset_allocator();
    //TRASH: {REMOVED TILE} e.eNames#1/5 )/8 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} )/27 (/30 e.eConditionalSentence#1/28 {REMOVED TILE} (/34 e.eSentences-E#1/32 )/35 (/38 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} )/44 (/47 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 Reuse: & DoUnCondition-NextFunction/4 AsIs: (/7 } Tile{ AsIs: e.eRefilledNames#1/41 } Tile{ AsIs: )/31 } t.tSrcPos#1/9/49 Tile{ AsIs: (/18 AsIs: e.ePrefix#1/16 AsIs: )/19 AsIs: (/22 AsIs: e.eScannedFunctions#1/20 HalfReuse: (/23 HalfReuse: # Function/26 } Tile{ AsIs: t.tSrcPos#1/9 AsIs: (/13 AsIs: e.eName#1/11 AsIs: )/14 AsIs: s.sScope#1/15 } Tile{ AsIs: e.eSentences-B#1/24 } Tile{ AsIs: e.eTransformedSentences#1/45 } Tile{ AsIs: )/39 HalfReuse: )/40 AsIs: (/43 } Tile{ AsIs: e.eUnscannedFunctions#1/36 } Tile{ AsIs: e.eNewFunctions#1/51(2) } Tile{ AsIs: )/48 } Tile{ AsIs: >/1 ]] }
    if (! refalrts::copy_evar(context[49], context[50], context[9], context[10]))
      return refalrts::cNoMemory;
    refalrts::update_name( context[4], ref_DoUnConditionm_NextFunction.ref.function );
    refalrts::reinit_open_bracket( context[23] );
    refalrts::reinit_ident( context[26], ident_Function );
    refalrts::reinit_close_bracket( context[40] );
    refalrts::push_stack( context[1] );
    refalrts::push_stack( context[0] );
    refalrts::link_brackets( context[43], context[48] );
    refalrts::link_brackets( context[22], context[40] );
    refalrts::link_brackets( context[23], context[39] );
    refalrts::link_brackets( context[13], context[14] );
    refalrts::link_brackets( context[18], context[19] );
    refalrts::link_brackets( context[7], context[31] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    res = refalrts::splice_evar( res, context[48], context[48] );
    res = refalrts::splice_evar( res, context[51], context[52] );
    res = refalrts::splice_evar( res, context[36], context[37] );
    res = refalrts::splice_evar( res, context[39], context[43] );
    res = refalrts::splice_evar( res, context[45], context[46] );
    res = refalrts::splice_evar( res, context[24], context[25] );
    res = refalrts::splice_evar( res, context[9], context[15] );
    res = refalrts::splice_evar( res, context[18], context[26] );
    res = refalrts::splice_evar( res, context[49], context[50] );
    res = refalrts::splice_evar( res, context[31], context[31] );
    res = refalrts::splice_evar( res, context[41], context[42] );
    refalrts::splice_to_freelist_open( context[7], res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence();

  // ( e.idx ) t.idx ( e.idx ) s.idx ( e.idx ) ( e.idx ) ( e.idx ) ( e.idx ) ( e.idx ) ( e.idx ) e.idx
  // </0 & DoUnCondition_check/4 (/7 e.eNames#1/5 )/8 t.tSrcPos#1/9 (/13 e.eName#1/11 )/14 s.sScope#1/15 (/18 e.ePrefix#1/16 )/19 (/22 e.eScannedFunctions#1/20 )/23 (/26 e.eSentences-B#1/24 )/27 (/30 e.eConditionalSentence#1/28 )/31 (/34 e.eSentences-E#1/32 )/35 (/38 e.eUnscannedFunctions#1/36 )/39 e.eOther#1/2 >/1
  // closed e.eNames#1 as range 5
  // closed e.eName#1 as range 11
  // closed e.ePrefix#1 as range 16
  // closed e.eScannedFunctions#1 as range 20
  // closed e.eSentences-B#1 as range 24
  // closed e.eConditionalSentence#1 as range 28
  // closed e.eSentences-E#1 as range 32
  // closed e.eUnscannedFunctions#1 as range 36
  // closed e.eOther#1 as range 2
  //DEBUG: t.tSrcPos#1: 9
  //DEBUG: s.sScope#1: 15
  //DEBUG: e.eNames#1: 5
  //DEBUG: e.eName#1: 11
  //DEBUG: e.ePrefix#1: 16
  //DEBUG: e.eScannedFunctions#1: 20
  //DEBUG: e.eSentences-B#1: 24
  //DEBUG: e.eConditionalSentence#1: 28
  //DEBUG: e.eSentences-E#1: 32
  //DEBUG: e.eUnscannedFunctions#1: 36
  //DEBUG: e.eOther#1: 2

  refalrts::reset_allocator();
  //TRASH: {REMOVED TILE} (/34 {REMOVED TILE} )/35 {REMOVED TILE} e.eOther#1/2 {REMOVED TILE}
  //RESULT: Tile{ [[ AsIs: </0 Reuse: & DoUnCondition_forward/4 AsIs: (/7 AsIs: e.eNames#1/5 AsIs: )/8 AsIs: t.tSrcPos#1/9 AsIs: (/13 AsIs: e.eName#1/11 AsIs: )/14 AsIs: s.sScope#1/15 AsIs: (/18 AsIs: e.ePrefix#1/16 AsIs: )/19 AsIs: (/22 AsIs: e.eScannedFunctions#1/20 AsIs: )/23 AsIs: (/26 AsIs: e.eSentences-B#1/24 AsIs: )/27 AsIs: (/30 AsIs: e.eConditionalSentence#1/28 AsIs: )/31 } Tile{ AsIs: e.eSentences-E#1/32 } Tile{ AsIs: (/38 AsIs: e.eUnscannedFunctions#1/36 AsIs: )/39 } Tile{ AsIs: >/1 ]] }
  refalrts::update_name( context[4], ref_DoUnConditionu_forward.ref.function );
  refalrts::push_stack( context[1] );
  refalrts::push_stack( context[0] );
  refalrts::link_brackets( context[38], context[39] );
  refalrts::link_brackets( context[30], context[31] );
  refalrts::link_brackets( context[26], context[27] );
  refalrts::link_brackets( context[22], context[23] );
  refalrts::link_brackets( context[18], context[19] );
  refalrts::link_brackets( context[13], context[14] );
  refalrts::link_brackets( context[7], context[8] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[1];
  res = refalrts::splice_evar( res, context[38], context[39] );
  res = refalrts::splice_evar( res, context[32], context[33] );
  refalrts::splice_to_freelist_open( context[31], res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_DoUnConditionu_check("DoUnCondition_check", 786251477U, 1176157594U, func_DoUnConditionu_check);

static refalrts::FnResult func_DoUnConditionu_forward(refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  refalrts::this_is_generated_function();
  // issue here memory for vars with 36 elems
  refalrts::Iter context[36];
  refalrts::zeros( context, 36 );
  //FAST GEN: e.$
  //GLOBAL GEN: ( e.$ ) t.$ ( e.$ ) s.$ ( e.$ ) ( e.$ ) ( e.$ ) e.$ ( e.$ )
  // </0 & DoUnCondition_forward/4 (/7 e.idxB#0/5 )/8 t.idxT#0/13 (/17 e.idxTVB#0/15 )/18 s.idxTVT#0/19 (/22 e.idxTVTVB#0/20 )/23 (/26 e.idxTVTVTB#0/24 )/27 (/30 e.idxTVTVTTB#0/28 )/31 e.idxTVTVTTT#0/2 (/11 e.idxTVTVTTTVB#0/9 )/12 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  context[5] = 0;
  context[6] = 0;
  context[7] = refalrts::brackets_left( context[5], context[6], context[2], context[3] );
  if( ! context[7] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[7], context[8]);
  context[9] = 0;
  context[10] = 0;
  context[11] = refalrts::brackets_right( context[9], context[10], context[2], context[3] );
  if( ! context[11] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[11], context[12]);
  // closed e.idxB#0 as range 5
  // closed e.idxTVTVTTTVB#0 as range 9
  context[14] = refalrts::tvar_left( context[13], context[2], context[3] );
  if( ! context[14] )
    return refalrts::cRecognitionImpossible;
  context[15] = 0;
  context[16] = 0;
  context[17] = refalrts::brackets_left( context[15], context[16], context[2], context[3] );
  if( ! context[17] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[17], context[18]);
  // closed e.idxTVB#0 as range 15
  if( ! refalrts::svar_left( context[19], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  context[20] = 0;
  context[21] = 0;
  context[22] = refalrts::brackets_left( context[20], context[21], context[2], context[3] );
  if( ! context[22] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[22], context[23]);
  context[24] = 0;
  context[25] = 0;
  context[26] = refalrts::brackets_left( context[24], context[25], context[2], context[3] );
  if( ! context[26] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[26], context[27]);
  context[28] = 0;
  context[29] = 0;
  context[30] = refalrts::brackets_left( context[28], context[29], context[2], context[3] );
  if( ! context[30] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[30], context[31]);
  // closed e.idxTVTVB#0 as range 20
  // closed e.idxTVTVTB#0 as range 24
  // closed e.idxTVTVTTB#0 as range 28
  // closed e.idxTVTVTTT#0 as range 2
  do {
    // ( e.idx ) t.idx ( e.idx ) s.idx ( e.idx ) ( e.idx ) ( e.idx ) t.idx e.idx ( e.idx )
    // </0 & DoUnCondition_forward/4 (/7 e.eNames#1/5 )/8 t.tSrcPos#1/13 (/17 e.eName#1/15 )/18 s.sScope#1/19 (/22 e.ePrefix#1/20 )/23 (/26 e.eScannedFunctions#1/24 )/27 (/30 e.eSentences-B_fix#1/28 )/31 t.tSentences-B_next#1/32 e.eSentences-B_rest#1/2 (/11 e.eUnscannedFunctions#1/9 )/12 >/1
    // closed e.eNames#1 as range 5
    // closed e.eName#1 as range 15
    // closed e.ePrefix#1 as range 20
    // closed e.eScannedFunctions#1 as range 24
    // closed e.eSentences-B_fix#1 as range 28
    // closed e.eUnscannedFunctions#1 as range 9
    context[34] = context[2];
    context[35] = context[3];
    context[33] = refalrts::tvar_left( context[32], context[34], context[35] );
    if( ! context[33] )
      continue;
    // closed e.eSentences-B_rest#1 as range 34(2)
    //DEBUG: t.tSrcPos#1: 13
    //DEBUG: s.sScope#1: 19
    //DEBUG: e.eNames#1: 5
    //DEBUG: e.eName#1: 15
    //DEBUG: e.ePrefix#1: 20
    //DEBUG: e.eScannedFunctions#1: 24
    //DEBUG: e.eSentences-B_fix#1: 28
    //DEBUG: e.eUnscannedFunctions#1: 9
    //DEBUG: t.tSentences-B_next#1: 32
    //DEBUG: e.eSentences-B_rest#1: 2

    refalrts::reset_allocator();
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 Reuse: & DoUnCondition_next/4 AsIs: (/7 AsIs: e.eNames#1/5 AsIs: )/8 AsIs: t.tSrcPos#1/13 AsIs: (/17 AsIs: e.eName#1/15 AsIs: )/18 AsIs: s.sScope#1/19 AsIs: (/22 AsIs: e.ePrefix#1/20 AsIs: )/23 AsIs: (/26 AsIs: e.eScannedFunctions#1/24 AsIs: )/27 AsIs: (/30 } Tile{ AsIs: e.eSentences-B_fix#1/28 } Tile{ AsIs: t.tSentences-B_next#1/32 } Tile{ AsIs: )/31 } Tile{ AsIs: e.eSentences-B_rest#1/34(2) } Tile{ AsIs: (/11 AsIs: e.eUnscannedFunctions#1/9 AsIs: )/12 AsIs: >/1 ]] }
    refalrts::update_name( context[4], ref_DoUnConditionu_next.ref.function );
    refalrts::push_stack( context[1] );
    refalrts::push_stack( context[0] );
    refalrts::link_brackets( context[11], context[12] );
    refalrts::link_brackets( context[30], context[31] );
    refalrts::link_brackets( context[26], context[27] );
    refalrts::link_brackets( context[22], context[23] );
    refalrts::link_brackets( context[17], context[18] );
    refalrts::link_brackets( context[7], context[8] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[11];
    res = refalrts::splice_evar( res, context[34], context[35] );
    res = refalrts::splice_evar( res, context[31], context[31] );
    res = refalrts::splice_evar( res, context[32], context[33] );
    res = refalrts::splice_evar( res, context[28], context[29] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence();

  // ( e.idx ) t.idx ( e.idx ) s.idx ( e.idx ) ( e.idx ) ( e.idx ) ( e.idx )
  // </0 & DoUnCondition_forward/4 (/7 e.eNames#1/5 )/8 t.tSrcPos#1/13 (/17 e.eName#1/15 )/18 s.sScope#1/19 (/22 e.ePrefix#1/20 )/23 (/26 e.eScannedFunctions#1/24 )/27 (/30 e.eSentences-B_fix#1/28 )/31 (/11 e.eUnscannedFunctions#1/9 )/12 >/1
  if( ! refalrts::empty_seq( context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  // closed e.eNames#1 as range 5
  // closed e.eName#1 as range 15
  // closed e.ePrefix#1 as range 20
  // closed e.eScannedFunctions#1 as range 24
  // closed e.eSentences-B_fix#1 as range 28
  // closed e.eUnscannedFunctions#1 as range 9
  //DEBUG: t.tSrcPos#1: 13
  //DEBUG: s.sScope#1: 19
  //DEBUG: e.eNames#1: 5
  //DEBUG: e.eName#1: 15
  //DEBUG: e.ePrefix#1: 20
  //DEBUG: e.eScannedFunctions#1: 24
  //DEBUG: e.eSentences-B_fix#1: 28
  //DEBUG: e.eUnscannedFunctions#1: 9

  refalrts::reset_allocator();
  //TRASH: {REMOVED TILE} (/30 {REMOVED TILE} )/31 {REMOVED TILE}
  //RESULT: Tile{ [[ AsIs: </0 Reuse: & DoUnCondition_cont/4 AsIs: (/7 AsIs: e.eNames#1/5 AsIs: )/8 AsIs: t.tSrcPos#1/13 AsIs: (/17 AsIs: e.eName#1/15 AsIs: )/18 AsIs: s.sScope#1/19 AsIs: (/22 AsIs: e.ePrefix#1/20 AsIs: )/23 AsIs: (/26 AsIs: e.eScannedFunctions#1/24 AsIs: )/27 } Tile{ AsIs: e.eSentences-B_fix#1/28 } Tile{ AsIs: (/11 AsIs: e.eUnscannedFunctions#1/9 AsIs: )/12 AsIs: >/1 ]] }
  refalrts::update_name( context[4], ref_DoUnConditionu_cont.ref.function );
  refalrts::push_stack( context[1] );
  refalrts::push_stack( context[0] );
  refalrts::link_brackets( context[11], context[12] );
  refalrts::link_brackets( context[26], context[27] );
  refalrts::link_brackets( context[22], context[23] );
  refalrts::link_brackets( context[17], context[18] );
  refalrts::link_brackets( context[7], context[8] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[11];
  res = refalrts::splice_evar( res, context[28], context[29] );
  refalrts::splice_to_freelist_open( context[27], res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_DoUnConditionu_forward("DoUnCondition_forward", 786251477U, 1176157594U, func_DoUnConditionu_forward);

static refalrts::FnResult func_DoUnConditionu_next(refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  refalrts::this_is_generated_function();
  // issue here memory for vars with 61 elems
  refalrts::Iter context[61];
  refalrts::zeros( context, 61 );
  //FAST GEN: ( e.$ ) t.$ ( e.$ ) s.$ ( e.$ ) ( e.$ ) ( e.$ ) e.$ ( e.$ )
  //GLOBAL GEN: ( e.$ ) t.$ ( e.$ ) s.$ ( e.$ ) ( e.$ ) ( e.$ ) e.$ ( e.$ )
  // </0 & DoUnCondition_next/4 (/7 e.idxB#0/5 )/8 t.idxT#0/13 (/17 e.idxTVB#0/15 )/18 s.idxTVT#0/19 (/22 e.idxTVTVB#0/20 )/23 (/26 e.idxTVTVTB#0/24 )/27 (/30 e.idxTVTVTTB#0/28 )/31 e.idxTVTVTTT#0/2 (/11 e.idxTVTVTTTVB#0/9 )/12 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  context[5] = 0;
  context[6] = 0;
  context[7] = refalrts::brackets_left( context[5], context[6], context[2], context[3] );
  if( ! context[7] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[7], context[8]);
  context[9] = 0;
  context[10] = 0;
  context[11] = refalrts::brackets_right( context[9], context[10], context[2], context[3] );
  if( ! context[11] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[11], context[12]);
  // closed e.idxB#0 as range 5
  // closed e.idxTVTVTTTVB#0 as range 9
  context[14] = refalrts::tvar_left( context[13], context[2], context[3] );
  if( ! context[14] )
    return refalrts::cRecognitionImpossible;
  context[15] = 0;
  context[16] = 0;
  context[17] = refalrts::brackets_left( context[15], context[16], context[2], context[3] );
  if( ! context[17] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[17], context[18]);
  // closed e.idxTVB#0 as range 15
  if( ! refalrts::svar_left( context[19], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  context[20] = 0;
  context[21] = 0;
  context[22] = refalrts::brackets_left( context[20], context[21], context[2], context[3] );
  if( ! context[22] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[22], context[23]);
  context[24] = 0;
  context[25] = 0;
  context[26] = refalrts::brackets_left( context[24], context[25], context[2], context[3] );
  if( ! context[26] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[26], context[27]);
  context[28] = 0;
  context[29] = 0;
  context[30] = refalrts::brackets_left( context[28], context[29], context[2], context[3] );
  if( ! context[30] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[30], context[31]);
  // closed e.idxTVTVB#0 as range 20
  // closed e.idxTVTVTB#0 as range 24
  // closed e.idxTVTVTTB#0 as range 28
  // closed e.idxTVTVTTT#0 as range 2
  do {
    // ( e.idx ) t.idx ( e.idx ) s.idx ( e.idx ) ( e.idx ) ( e.idx ) e.idx ( e.idx )
    // </0 & DoUnCondition_next/4 (/7 e.eNames#1/5 )/8 t.tSrcPos#1/13 (/17 e.eName#1/15 )/18 s.sScope#1/19 (/22 e.ePrefix#1/20 )/23 (/26 e.eScannedFunctions#1/24 )/27 (/30 e.eSentences-B_fix#1/28 )/31 e.eSentences-B_var#1/32 (/36 e.eConditionalSentence#1/34 )/37 e.eSentences-E#1/2 (/11 e.eUnscannedFunctions#1/9 )/12 >/1
    // closed e.eNames#1 as range 5
    // closed e.eName#1 as range 15
    // closed e.ePrefix#1 as range 20
    // closed e.eScannedFunctions#1 as range 24
    // closed e.eSentences-B_fix#1 as range 28
    // closed e.eUnscannedFunctions#1 as range 9
    context[57] = context[2];
    context[58] = context[3];
    context[32] = 0;
    context[33] = 0;
    refalrts::start_e_loop();
    do {
      context[59] = context[57];
      context[60] = context[58];
      context[34] = 0;
      context[35] = 0;
      context[36] = refalrts::brackets_left( context[34], context[35], context[59], context[60] );
      if( ! context[36] )
        continue;
      refalrts::bracket_pointers(context[36], context[37]);
      // closed e.eConditionalSentence#1 as range 34
      // closed e.eSentences-E#1 as range 59(2)
      //DEBUG: t.tSrcPos#1: 13
      //DEBUG: s.sScope#1: 19
      //DEBUG: e.eNames#1: 5
      //DEBUG: e.eName#1: 15
      //DEBUG: e.ePrefix#1: 20
      //DEBUG: e.eScannedFunctions#1: 24
      //DEBUG: e.eSentences-B_fix#1: 28
      //DEBUG: e.eUnscannedFunctions#1: 9
      //DEBUG: e.eSentences-B_var#1: 32
      //DEBUG: e.eConditionalSentence#1: 34
      //DEBUG: e.eSentences-E#1: 2

      refalrts::reset_allocator();
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 Reuse: & DoUnCondition_check/4 AsIs: (/7 AsIs: e.eNames#1/5 AsIs: )/8 AsIs: t.tSrcPos#1/13 AsIs: (/17 AsIs: e.eName#1/15 AsIs: )/18 AsIs: s.sScope#1/19 AsIs: (/22 AsIs: e.ePrefix#1/20 AsIs: )/23 AsIs: (/26 AsIs: e.eScannedFunctions#1/24 AsIs: )/27 AsIs: (/30 } Tile{ AsIs: e.eSentences-B_fix#1/28 } Tile{ AsIs: e.eSentences-B_var#1/32 } Tile{ AsIs: )/31 } (/38 e.eConditionalSentence#1/34/39 )/41 (/42 e.eSentences-E#1/59(2)/43 Tile{ AsIs: )/12 } (/45 Tile{ AsIs: e.eUnscannedFunctions#1/9 } )/46 </47 & UnConditionSentence/48 (/49 e.eNames#1/5/50 )/52 (/53 e.ePrefix#1/20/54 )/56 Tile{ AsIs: (/36 AsIs: e.eConditionalSentence#1/34 AsIs: )/37 AsIs: e.eSentences-E#1/59(2) HalfReuse: >/11 } Tile{ AsIs: >/1 ]] }
      if( ! refalrts::alloc_open_bracket( context[38] ) )
        return refalrts::cNoMemory;
      if (! refalrts::copy_evar(context[39], context[40], context[34], context[35]))
        return refalrts::cNoMemory;
      if( ! refalrts::alloc_close_bracket( context[41] ) )
        return refalrts::cNoMemory;
      if( ! refalrts::alloc_open_bracket( context[42] ) )
        return refalrts::cNoMemory;
      if (! refalrts::copy_evar(context[43], context[44], context[59], context[60]))
        return refalrts::cNoMemory;
      if( ! refalrts::alloc_open_bracket( context[45] ) )
        return refalrts::cNoMemory;
      if( ! refalrts::alloc_close_bracket( context[46] ) )
        return refalrts::cNoMemory;
      if( ! refalrts::alloc_open_call( context[47] ) )
        return refalrts::cNoMemory;
      if( ! refalrts::alloc_name( context[48], ref_UnConditionSentence.ref.function ) )
        return refalrts::cNoMemory;
      if( ! refalrts::alloc_open_bracket( context[49] ) )
        return refalrts::cNoMemory;
      if (! refalrts::copy_evar(context[50], context[51], context[5], context[6]))
        return refalrts::cNoMemory;
      if( ! refalrts::alloc_close_bracket( context[52] ) )
        return refalrts::cNoMemory;
      if( ! refalrts::alloc_open_bracket( context[53] ) )
        return refalrts::cNoMemory;
      if (! refalrts::copy_evar(context[54], context[55], context[20], context[21]))
        return refalrts::cNoMemory;
      if( ! refalrts::alloc_close_bracket( context[56] ) )
        return refalrts::cNoMemory;
      refalrts::update_name( context[4], ref_DoUnConditionu_check.ref.function );
      refalrts::reinit_close_call( context[11] );
      refalrts::push_stack( context[1] );
      refalrts::push_stack( context[0] );
      refalrts::push_stack( context[11] );
      refalrts::push_stack( context[47] );
      refalrts::link_brackets( context[36], context[37] );
      refalrts::link_brackets( context[53], context[56] );
      refalrts::link_brackets( context[49], context[52] );
      refalrts::link_brackets( context[45], context[46] );
      refalrts::link_brackets( context[42], context[12] );
      refalrts::link_brackets( context[38], context[41] );
      refalrts::link_brackets( context[30], context[31] );
      refalrts::link_brackets( context[26], context[27] );
      refalrts::link_brackets( context[22], context[23] );
      refalrts::link_brackets( context[17], context[18] );
      refalrts::link_brackets( context[7], context[8] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[1];
      res = refalrts::splice_evar( res, context[36], context[11] );
      res = refalrts::splice_evar( res, context[46], context[56] );
      res = refalrts::splice_evar( res, context[9], context[10] );
      res = refalrts::splice_evar( res, context[45], context[45] );
      res = refalrts::splice_evar( res, context[12], context[12] );
      res = refalrts::splice_evar( res, context[43], context[44] );
      res = refalrts::splice_evar( res, context[38], context[42] );
      res = refalrts::splice_evar( res, context[31], context[31] );
      res = refalrts::splice_evar( res, context[32], context[33] );
      res = refalrts::splice_evar( res, context[28], context[29] );
      refalrts::use( res );
      return refalrts::cSuccess;
    } while ( refalrts::open_evar_advance( context[32], context[33], context[57], context[58] ) );
  } while ( 0 );
  refalrts::stop_sentence();

  // ( e.idx ) t.idx ( e.idx ) s.idx ( e.idx ) ( e.idx ) ( e.idx ) e.idx ( e.idx )
  // </0 & DoUnCondition_next/4 (/7 e.eNames#1/5 )/8 t.tSrcPos#1/13 (/17 e.eName#1/15 )/18 s.sScope#1/19 (/22 e.ePrefix#1/20 )/23 (/26 e.eScannedFunctions#1/24 )/27 (/30 e.eSentences-B_fix#1/28 )/31 e.eSentences-B_rest#1/2 (/11 e.eUnscannedFunctions#1/9 )/12 >/1
  // closed e.eNames#1 as range 5
  // closed e.eName#1 as range 15
  // closed e.ePrefix#1 as range 20
  // closed e.eScannedFunctions#1 as range 24
  // closed e.eSentences-B_fix#1 as range 28
  // closed e.eSentences-B_rest#1 as range 2
  // closed e.eUnscannedFunctions#1 as range 9
  //DEBUG: t.tSrcPos#1: 13
  //DEBUG: s.sScope#1: 19
  //DEBUG: e.eNames#1: 5
  //DEBUG: e.eName#1: 15
  //DEBUG: e.ePrefix#1: 20
  //DEBUG: e.eScannedFunctions#1: 24
  //DEBUG: e.eSentences-B_fix#1: 28
  //DEBUG: e.eSentences-B_rest#1: 2
  //DEBUG: e.eUnscannedFunctions#1: 9

  refalrts::reset_allocator();
  //TRASH: {REMOVED TILE} (/30 {REMOVED TILE} )/31 {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ AsIs: </0 Reuse: & DoUnCondition_cont/4 AsIs: (/7 AsIs: e.eNames#1/5 AsIs: )/8 AsIs: t.tSrcPos#1/13 AsIs: (/17 AsIs: e.eName#1/15 AsIs: )/18 AsIs: s.sScope#1/19 AsIs: (/22 AsIs: e.ePrefix#1/20 AsIs: )/23 AsIs: (/26 AsIs: e.eScannedFunctions#1/24 AsIs: )/27 } Tile{ AsIs: e.eSentences-B_fix#1/28 } Tile{ AsIs: e.eSentences-B_rest#1/2 } Tile{ AsIs: (/11 AsIs: e.eUnscannedFunctions#1/9 AsIs: )/12 AsIs: >/1 ]] }
  refalrts::update_name( context[4], ref_DoUnConditionu_cont.ref.function );
  refalrts::push_stack( context[1] );
  refalrts::push_stack( context[0] );
  refalrts::link_brackets( context[11], context[12] );
  refalrts::link_brackets( context[26], context[27] );
  refalrts::link_brackets( context[22], context[23] );
  refalrts::link_brackets( context[17], context[18] );
  refalrts::link_brackets( context[7], context[8] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[11];
  res = refalrts::splice_evar( res, context[2], context[3] );
  res = refalrts::splice_evar( res, context[28], context[29] );
  refalrts::splice_to_freelist_open( context[27], res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_DoUnConditionu_next("DoUnCondition_next", 786251477U, 1176157594U, func_DoUnConditionu_next);

static refalrts::FnResult func_DoUnConditionu_cont(refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  refalrts::this_is_generated_function();
  // issue here memory for vars with 33 elems
  refalrts::Iter context[33];
  refalrts::zeros( context, 33 );
  // </0 & DoUnCondition_cont/4 (/7 e.eNames#1/5 )/8 t.tSrcPos#1/13 (/17 e.eName#1/15 )/18 s.sScope#1/19 (/22 e.ePrefix#1/20 )/23 (/26 e.eScannedFunctions#1/24 )/27 e.eSentences#1/2 (/11 e.eUnscannedFunctions#1/9 )/12 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  context[5] = 0;
  context[6] = 0;
  context[7] = refalrts::brackets_left( context[5], context[6], context[2], context[3] );
  if( ! context[7] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[7], context[8]);
  context[9] = 0;
  context[10] = 0;
  context[11] = refalrts::brackets_right( context[9], context[10], context[2], context[3] );
  if( ! context[11] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[11], context[12]);
  // closed e.eNames#1 as range 5
  // closed e.eUnscannedFunctions#1 as range 9
  context[14] = refalrts::tvar_left( context[13], context[2], context[3] );
  if( ! context[14] )
    return refalrts::cRecognitionImpossible;
  context[15] = 0;
  context[16] = 0;
  context[17] = refalrts::brackets_left( context[15], context[16], context[2], context[3] );
  if( ! context[17] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[17], context[18]);
  // closed e.eName#1 as range 15
  if( ! refalrts::svar_left( context[19], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  context[20] = 0;
  context[21] = 0;
  context[22] = refalrts::brackets_left( context[20], context[21], context[2], context[3] );
  if( ! context[22] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[22], context[23]);
  context[24] = 0;
  context[25] = 0;
  context[26] = refalrts::brackets_left( context[24], context[25], context[2], context[3] );
  if( ! context[26] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[26], context[27]);
  // closed e.ePrefix#1 as range 20
  // closed e.eScannedFunctions#1 as range 24
  // closed e.eSentences#1 as range 2
  //DEBUG: e.eNames#1: 5
  //DEBUG: e.eUnscannedFunctions#1: 9
  //DEBUG: t.tSrcPos#1: 13
  //DEBUG: e.eName#1: 15
  //DEBUG: s.sScope#1: 19
  //DEBUG: e.ePrefix#1: 20
  //DEBUG: e.eScannedFunctions#1: 24
  //DEBUG: e.eSentences#1: 2

  refalrts::reset_allocator();
  //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ AsIs: </0 Reuse: & DoUnCondition-NextFunction/4 AsIs: (/7 AsIs: e.eNames#1/5 AsIs: )/8 AsIs: t.tSrcPos#1/13 AsIs: (/17 } Tile{ AsIs: e.ePrefix#1/20 } Tile{ AsIs: )/23 AsIs: (/26 AsIs: e.eScannedFunctions#1/24 HalfReuse: (/27 } # Function/28 t.tSrcPos#1/13/29 Tile{ AsIs: (/22 } Tile{ AsIs: e.eName#1/15 } Tile{ AsIs: )/18 AsIs: s.sScope#1/19 } Tile{ AsIs: e.eSentences#1/2 } )/31 )/32 Tile{ AsIs: (/11 AsIs: e.eUnscannedFunctions#1/9 AsIs: )/12 AsIs: >/1 ]] }
  if( ! refalrts::alloc_ident( context[28], ident_Function ) )
    return refalrts::cNoMemory;
  if (! refalrts::copy_evar(context[29], context[30], context[13], context[14]))
    return refalrts::cNoMemory;
  if( ! refalrts::alloc_close_bracket( context[31] ) )
    return refalrts::cNoMemory;
  if( ! refalrts::alloc_close_bracket( context[32] ) )
    return refalrts::cNoMemory;
  refalrts::update_name( context[4], ref_DoUnConditionm_NextFunction.ref.function );
  refalrts::reinit_open_bracket( context[27] );
  refalrts::push_stack( context[1] );
  refalrts::push_stack( context[0] );
  refalrts::link_brackets( context[11], context[12] );
  refalrts::link_brackets( context[26], context[32] );
  refalrts::link_brackets( context[27], context[31] );
  refalrts::link_brackets( context[22], context[18] );
  refalrts::link_brackets( context[17], context[23] );
  refalrts::link_brackets( context[7], context[8] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[11];
  res = refalrts::splice_evar( res, context[31], context[32] );
  res = refalrts::splice_evar( res, context[2], context[3] );
  res = refalrts::splice_evar( res, context[18], context[19] );
  res = refalrts::splice_evar( res, context[15], context[16] );
  res = refalrts::splice_evar( res, context[22], context[22] );
  res = refalrts::splice_evar( res, context[28], context[30] );
  res = refalrts::splice_evar( res, context[23], context[27] );
  res = refalrts::splice_evar( res, context[20], context[21] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_DoUnConditionu_cont("DoUnCondition_cont", 786251477U, 1176157594U, func_DoUnConditionu_cont);

static refalrts::FnResult func_DoUnConditionm_NextFunction(refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  refalrts::this_is_generated_function();
  // issue here memory for vars with 33 elems
  refalrts::Iter context[33];
  refalrts::zeros( context, 33 );
  //FAST GEN: ( e.$ ) t.$ ( e.$ ) ( e.$ ) ( e.$ )
  //GLOBAL GEN: ( e.$ ) t.$ ( e.$ ) ( e.$ ) ( e.$ )
  // </0 & DoUnCondition-NextFunction/4 (/7 e.idxB#0/5 )/8 t.idxT#0/21 (/19 e.idxTVB#0/17 )/20 (/15 e.idxTVTB#0/13 )/16 (/11 e.idxTVTTB#0/9 )/12 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  context[5] = 0;
  context[6] = 0;
  context[7] = refalrts::brackets_left( context[5], context[6], context[2], context[3] );
  if( ! context[7] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[7], context[8]);
  context[9] = 0;
  context[10] = 0;
  context[11] = refalrts::brackets_right( context[9], context[10], context[2], context[3] );
  if( ! context[11] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[11], context[12]);
  context[13] = 0;
  context[14] = 0;
  context[15] = refalrts::brackets_right( context[13], context[14], context[2], context[3] );
  if( ! context[15] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[15], context[16]);
  context[17] = 0;
  context[18] = 0;
  context[19] = refalrts::brackets_right( context[17], context[18], context[2], context[3] );
  if( ! context[19] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[19], context[20]);
  // closed e.idxB#0 as range 5
  // closed e.idxTVB#0 as range 17
  // closed e.idxTVTB#0 as range 13
  // closed e.idxTVTTB#0 as range 9
  context[22] = refalrts::tvar_left( context[21], context[2], context[3] );
  if( ! context[22] )
    return refalrts::cRecognitionImpossible;
  if( ! refalrts::empty_seq( context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  do {
    // ( e.idx ) t.idx ( e.idx ) ( e.idx ) ( ( ( e.idx ) e.idx ) e.idx )
    // </0 & DoUnCondition-NextFunction/4 (/7 e.eNames#1/5 )/8 t.tSrcPos#1/21 (/19 e.ePrefix#1/17 )/20 (/15 e.eScannedFunctions#1/13 )/16 (/11 (/25 (/29 e.eNextFunctionName#1/27 )/30 e.eNextFunctionSentences#1/23 )/26 e.eUnscannedFunctions#1/9 )/12 >/1
    context[31] = context[9];
    context[32] = context[10];
    context[23] = 0;
    context[24] = 0;
    context[25] = refalrts::brackets_left( context[23], context[24], context[31], context[32] );
    if( ! context[25] )
      continue;
    refalrts::bracket_pointers(context[25], context[26]);
    context[27] = 0;
    context[28] = 0;
    context[29] = refalrts::brackets_left( context[27], context[28], context[23], context[24] );
    if( ! context[29] )
      continue;
    refalrts::bracket_pointers(context[29], context[30]);
    // closed e.eNames#1 as range 5
    // closed e.ePrefix#1 as range 17
    // closed e.eScannedFunctions#1 as range 13
    // closed e.eNextFunctionName#1 as range 27
    // closed e.eNextFunctionSentences#1 as range 23
    // closed e.eUnscannedFunctions#1 as range 31(9)
    //DEBUG: t.tSrcPos#1: 21
    //DEBUG: e.eNames#1: 5
    //DEBUG: e.ePrefix#1: 17
    //DEBUG: e.eScannedFunctions#1: 13
    //DEBUG: e.eNextFunctionName#1: 27
    //DEBUG: e.eNextFunctionSentences#1: 23
    //DEBUG: e.eUnscannedFunctions#1: 9

    refalrts::reset_allocator();
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} (/29 {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 Reuse: & DoUnCondition/4 AsIs: (/7 AsIs: e.eNames#1/5 AsIs: )/8 AsIs: t.tSrcPos#1/21 AsIs: (/19 } Tile{ AsIs: e.eNextFunctionName#1/27 } Tile{ AsIs: )/16 HalfReuse: # Local/11 AsIs: (/25 } Tile{ AsIs: e.ePrefix#1/17 } Tile{ AsIs: )/20 AsIs: (/15 } Tile{ AsIs: e.eScannedFunctions#1/13 } Tile{ AsIs: )/30 AsIs: e.eNextFunctionSentences#1/23 HalfReuse: (/26 AsIs: e.eUnscannedFunctions#1/31(9) AsIs: )/12 AsIs: >/1 ]] }
    refalrts::update_name( context[4], ref_DoUnCondition.ref.function );
    refalrts::reinit_ident( context[11], ident_Local );
    refalrts::reinit_open_bracket( context[26] );
    refalrts::push_stack( context[1] );
    refalrts::push_stack( context[0] );
    refalrts::link_brackets( context[26], context[12] );
    refalrts::link_brackets( context[15], context[30] );
    refalrts::link_brackets( context[25], context[20] );
    refalrts::link_brackets( context[19], context[16] );
    refalrts::link_brackets( context[7], context[8] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[30];
    res = refalrts::splice_evar( res, context[13], context[14] );
    res = refalrts::splice_evar( res, context[20], context[15] );
    res = refalrts::splice_evar( res, context[17], context[18] );
    res = refalrts::splice_evar( res, context[16], context[25] );
    res = refalrts::splice_evar( res, context[27], context[28] );
    refalrts::splice_to_freelist_open( context[19], res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence();

  // ( e.idx ) t.idx ( e.idx ) ( e.idx ) ( )
  // </0 & DoUnCondition-NextFunction/4 (/7 e.eNames#1/5 )/8 t.tSrcPos#1/21 (/19 e.ePrefix#1/17 )/20 (/15 e.eScannedFunctions#1/13 )/16 (/11 )/12 >/1
  if( ! refalrts::empty_seq( context[9], context[10] ) )
    return refalrts::cRecognitionImpossible;
  // closed e.eNames#1 as range 5
  // closed e.ePrefix#1 as range 17
  // closed e.eScannedFunctions#1 as range 13
  //DEBUG: t.tSrcPos#1: 21
  //DEBUG: e.eNames#1: 5
  //DEBUG: e.ePrefix#1: 17
  //DEBUG: e.eScannedFunctions#1: 13

  refalrts::reset_allocator();
  //TRASH: {REMOVED TILE} </0 & DoUnCondition-NextFunction/4 {REMOVED TILE} t.tSrcPos#1/21 (/19 e.ePrefix#1/17 )/20 (/15 {REMOVED TILE} )/16 (/11 )/12 >/1 {REMOVED TILE}
  //RESULT: Tile{ [[ } Tile{ AsIs: (/7 AsIs: e.eNames#1/5 AsIs: )/8 } Tile{ AsIs: e.eScannedFunctions#1/13 } Tile{ ]] }
  refalrts::link_brackets( context[7], context[8] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = arg_end->next;
  res = refalrts::splice_evar( res, context[13], context[14] );
  res = refalrts::splice_evar( res, context[7], context[8] );
  refalrts::splice_to_freelist_open( trash_prev, res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_DoUnConditionm_NextFunction("DoUnCondition-NextFunction", 786251477U, 1176157594U, func_DoUnConditionm_NextFunction);

static refalrts::FnResult func_UnConditionSentence(refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  refalrts::this_is_generated_function();
  // issue here memory for vars with 21 elems
  refalrts::Iter context[21];
  refalrts::zeros( context, 21 );
  // </0 & UnConditionSentence/4 (/7 e.eNames#1/5 )/8 (/11 e.ePrefix#1/9 )/12 (/15 e.eSentence#1/13 )/16 e.eContinuationSentences#1/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  context[5] = 0;
  context[6] = 0;
  context[7] = refalrts::brackets_left( context[5], context[6], context[2], context[3] );
  if( ! context[7] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[7], context[8]);
  context[9] = 0;
  context[10] = 0;
  context[11] = refalrts::brackets_left( context[9], context[10], context[2], context[3] );
  if( ! context[11] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[11], context[12]);
  context[13] = 0;
  context[14] = 0;
  context[15] = refalrts::brackets_left( context[13], context[14], context[2], context[3] );
  if( ! context[15] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[15], context[16]);
  // closed e.eNames#1 as range 5
  // closed e.ePrefix#1 as range 9
  // closed e.eSentence#1 as range 13
  // closed e.eContinuationSentences#1 as range 2
  //DEBUG: e.eNames#1: 5
  //DEBUG: e.ePrefix#1: 9
  //DEBUG: e.eSentence#1: 13
  //DEBUG: e.eContinuationSentences#1: 2

  refalrts::reset_allocator();
  //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ AsIs: </0 Reuse: & UnConditionSentence0/4 AsIs: (/7 AsIs: e.eNames#1/5 AsIs: )/8 AsIs: (/11 AsIs: e.ePrefix#1/9 AsIs: )/12 AsIs: (/15 AsIs: e.eSentence#1/13 AsIs: )/16 } (/17 Tile{ AsIs: e.eContinuationSentences#1/2 } )/18 e.eSentence#1/13/19 Tile{ AsIs: >/1 ]] }
  if( ! refalrts::alloc_open_bracket( context[17] ) )
    return refalrts::cNoMemory;
  if( ! refalrts::alloc_close_bracket( context[18] ) )
    return refalrts::cNoMemory;
  if (! refalrts::copy_evar(context[19], context[20], context[13], context[14]))
    return refalrts::cNoMemory;
  refalrts::update_name( context[4], ref_UnConditionSentence0.ref.function );
  refalrts::push_stack( context[1] );
  refalrts::push_stack( context[0] );
  refalrts::link_brackets( context[17], context[18] );
  refalrts::link_brackets( context[15], context[16] );
  refalrts::link_brackets( context[11], context[12] );
  refalrts::link_brackets( context[7], context[8] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[1];
  res = refalrts::splice_evar( res, context[19], context[20] );
  res = refalrts::splice_evar( res, context[18], context[18] );
  res = refalrts::splice_evar( res, context[2], context[3] );
  res = refalrts::splice_evar( res, context[17], context[17] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_UnConditionSentence("UnConditionSentence", 786251477U, 1176157594U, func_UnConditionSentence);

static refalrts::FnResult func_UnConditionSentence0(refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  refalrts::this_is_generated_function();
  // issue here memory for vars with 36 elems
  refalrts::Iter context[36];
  refalrts::zeros( context, 36 );
  //FAST GEN: ( e.$ ) ( e.$ ) ( e.$ ) ( e.$ ) ( e.$ ) t.$ e.$
  //GLOBAL GEN: ( e.$ ) ( e.$ ) ( e.$ ) ( e.$ ) ( e.$ ) t.$ e.$
  // </0 & UnConditionSentence0/4 (/7 e.idxB#0/5 )/8 (/11 e.idxTB#0/9 )/12 (/15 e.idxTTB#0/13 )/16 (/19 e.idxTTTB#0/17 )/20 (/23 e.idxTTTTB#0/21 )/24 t.idxTTTTT#0/25 e.idxTTTTTV#0/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  context[5] = 0;
  context[6] = 0;
  context[7] = refalrts::brackets_left( context[5], context[6], context[2], context[3] );
  if( ! context[7] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[7], context[8]);
  context[9] = 0;
  context[10] = 0;
  context[11] = refalrts::brackets_left( context[9], context[10], context[2], context[3] );
  if( ! context[11] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[11], context[12]);
  context[13] = 0;
  context[14] = 0;
  context[15] = refalrts::brackets_left( context[13], context[14], context[2], context[3] );
  if( ! context[15] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[15], context[16]);
  context[17] = 0;
  context[18] = 0;
  context[19] = refalrts::brackets_left( context[17], context[18], context[2], context[3] );
  if( ! context[19] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[19], context[20]);
  context[21] = 0;
  context[22] = 0;
  context[23] = refalrts::brackets_left( context[21], context[22], context[2], context[3] );
  if( ! context[23] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[23], context[24]);
  // closed e.idxB#0 as range 5
  // closed e.idxTB#0 as range 9
  // closed e.idxTTB#0 as range 13
  // closed e.idxTTTB#0 as range 17
  // closed e.idxTTTTB#0 as range 21
  context[26] = refalrts::tvar_left( context[25], context[2], context[3] );
  if( ! context[26] )
    return refalrts::cRecognitionImpossible;
  // closed e.idxTTTTTV#0 as range 2
  do {
    // ( e.idx ) ( e.idx ) ( e.idx ) ( e.idx ) ( e.idx ) ( # Condition ( e.idx ) t.idx ) e.idx
    // </0 & UnConditionSentence0/4 (/7 e.eNames#1/5 )/8 (/11 e.ePrefix#1/9 )/12 (/15 e.eSentence#1/13 )/16 (/19 e.eContinuationSentences#1/17 )/20 (/23 e.ePattern#1/21 )/24 (/25 # Condition/29 (/32 e.eCondResult#1/30 )/33 t.tCondPattern#1/34 )/26 e.eTail#1/2 >/1
    context[27] = 0;
    context[28] = 0;
    if( ! refalrts::brackets_term( context[27], context[28], context[25] ) )
      continue;
    context[29] = refalrts::ident_left(  ident_Condition, context[27], context[28] );
    if( ! context[29] )
      continue;
    context[30] = 0;
    context[31] = 0;
    context[32] = refalrts::brackets_left( context[30], context[31], context[27], context[28] );
    if( ! context[32] )
      continue;
    refalrts::bracket_pointers(context[32], context[33]);
    // closed e.eNames#1 as range 5
    // closed e.ePrefix#1 as range 9
    // closed e.eSentence#1 as range 13
    // closed e.eContinuationSentences#1 as range 17
    // closed e.ePattern#1 as range 21
    // closed e.eCondResult#1 as range 30
    // closed e.eTail#1 as range 2
    context[35] = refalrts::tvar_left( context[34], context[27], context[28] );
    if( ! context[35] )
      continue;
    if( ! refalrts::empty_seq( context[27], context[28] ) )
      continue;
    //DEBUG: e.eNames#1: 5
    //DEBUG: e.ePrefix#1: 9
    //DEBUG: e.eSentence#1: 13
    //DEBUG: e.eContinuationSentences#1: 17
    //DEBUG: e.ePattern#1: 21
    //DEBUG: e.eCondResult#1: 30
    //DEBUG: e.eTail#1: 2
    //DEBUG: t.tCondPattern#1: 34

    refalrts::reset_allocator();
    //TRASH: {REMOVED TILE} {REMOVED TILE} (/19 {REMOVED TILE} )/20 (/23 e.ePattern#1/21 )/24 (/25 {REMOVED TILE} (/32 e.eCondResult#1/30 )/33 t.tCondPattern#1/34 )/26 e.eTail#1/2 {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ Reuse: # Success/29 } Tile{ AsIs: </0 Reuse: & UnConditionSentence-Aux/4 AsIs: (/7 AsIs: e.eNames#1/5 AsIs: )/8 AsIs: (/11 AsIs: e.ePrefix#1/9 AsIs: )/12 AsIs: (/15 AsIs: e.eSentence#1/13 AsIs: )/16 } Tile{ AsIs: e.eContinuationSentences#1/17 } Tile{ AsIs: >/1 ]] }
    refalrts::update_ident( context[29], ident_Success );
    refalrts::update_name( context[4], ref_UnConditionSentencem_Aux.ref.function );
    refalrts::push_stack( context[1] );
    refalrts::push_stack( context[0] );
    refalrts::link_brackets( context[15], context[16] );
    refalrts::link_brackets( context[11], context[12] );
    refalrts::link_brackets( context[7], context[8] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    res = refalrts::splice_evar( res, context[17], context[18] );
    res = refalrts::splice_evar( res, context[0], context[16] );
    res = refalrts::splice_evar( res, context[29], context[29] );
    refalrts::splice_to_freelist_open( trash_prev, res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence();

  // ( e.idx ) ( e.idx ) ( e.idx ) ( e.idx ) ( e.idx ) # RETURN ( e.idx )
  // </0 & UnConditionSentence0/4 (/7 e.eNames#1/5 )/8 (/11 e.ePrefix#1/9 )/12 (/15 e.eSentence#1/13 )/16 (/19 e.eContinuationSentences#1/17 )/20 (/23 e.ePattern#1/21 )/24 # RETURN/25 (/29 e.eResult#1/27 )/30 >/1
  if( ! refalrts::ident_term(  ident_RETURN, context[25] ) )
    return refalrts::cRecognitionImpossible;
  context[27] = 0;
  context[28] = 0;
  context[29] = refalrts::brackets_left( context[27], context[28], context[2], context[3] );
  if( ! context[29] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[29], context[30]);
  if( ! refalrts::empty_seq( context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  // closed e.eNames#1 as range 5
  // closed e.ePrefix#1 as range 9
  // closed e.eSentence#1 as range 13
  // closed e.eContinuationSentences#1 as range 17
  // closed e.ePattern#1 as range 21
  // closed e.eResult#1 as range 27
  //DEBUG: e.eNames#1: 5
  //DEBUG: e.ePrefix#1: 9
  //DEBUG: e.eSentence#1: 13
  //DEBUG: e.eContinuationSentences#1: 17
  //DEBUG: e.ePattern#1: 21
  //DEBUG: e.eResult#1: 27

  refalrts::reset_allocator();
  //TRASH: {REMOVED TILE} </0 & UnConditionSentence0/4 (/7 e.eNames#1/5 )/8 (/11 e.ePrefix#1/9 )/12 (/15 e.eSentence#1/13 )/16 (/19 e.eContinuationSentences#1/17 )/20 (/23 e.ePattern#1/21 )/24 # RETURN/25 (/29 e.eResult#1/27 )/30 {REMOVED TILE}
  //RESULT: Tile{ [[ } Tile{ HalfReuse: # Fails/1 ]] }
  refalrts::reinit_ident( context[1], ident_Fails );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[1];
  refalrts::splice_to_freelist_open( trash_prev, res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_UnConditionSentence0("UnConditionSentence0", 786251477U, 1176157594U, func_UnConditionSentence0);

static refalrts::FnResult func_UnConditionSentencem_Aux(refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  refalrts::this_is_generated_function();
  // issue here memory for vars with 32 elems
  refalrts::Iter context[32];
  refalrts::zeros( context, 32 );
  // </0 & UnConditionSentence-Aux/4 (/7 e.eNames#1/5 )/8 (/11 e.ePrefix#1/9 )/12 (/15 e.eSentence#1/13 )/16 e.eContinuationSentences#1/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  context[5] = 0;
  context[6] = 0;
  context[7] = refalrts::brackets_left( context[5], context[6], context[2], context[3] );
  if( ! context[7] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[7], context[8]);
  context[9] = 0;
  context[10] = 0;
  context[11] = refalrts::brackets_left( context[9], context[10], context[2], context[3] );
  if( ! context[11] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[11], context[12]);
  context[13] = 0;
  context[14] = 0;
  context[15] = refalrts::brackets_left( context[13], context[14], context[2], context[3] );
  if( ! context[15] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[15], context[16]);
  // closed e.eNames#1 as range 5
  // closed e.ePrefix#1 as range 9
  // closed e.eSentence#1 as range 13
  // closed e.eContinuationSentences#1 as range 2
  //DEBUG: e.eNames#1: 5
  //DEBUG: e.ePrefix#1: 9
  //DEBUG: e.eSentence#1: 13
  //DEBUG: e.eContinuationSentences#1: 2

  refalrts::reset_allocator();
  //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ AsIs: </0 Reuse: & UnConditionSentence-Aux_check/4 AsIs: (/7 AsIs: e.eNames#1/5 AsIs: )/8 AsIs: (/11 AsIs: e.ePrefix#1/9 AsIs: )/12 AsIs: (/15 AsIs: e.eSentence#1/13 AsIs: )/16 } (/17 e.eContinuationSentences#1/2/18 )/20 </21 & AnalyzeContinuation/22 (/23 e.eNames#1/5/24 )/26 (/27 e.ePrefix#1/9/28 )/30 Tile{ AsIs: e.eContinuationSentences#1/2 } >/31 Tile{ AsIs: >/1 ]] }
  if( ! refalrts::alloc_open_bracket( context[17] ) )
    return refalrts::cNoMemory;
  if (! refalrts::copy_evar(context[18], context[19], context[2], context[3]))
    return refalrts::cNoMemory;
  if( ! refalrts::alloc_close_bracket( context[20] ) )
    return refalrts::cNoMemory;
  if( ! refalrts::alloc_open_call( context[21] ) )
    return refalrts::cNoMemory;
  if( ! refalrts::alloc_name( context[22], ref_AnalyzeContinuation.ref.function ) )
    return refalrts::cNoMemory;
  if( ! refalrts::alloc_open_bracket( context[23] ) )
    return refalrts::cNoMemory;
  if (! refalrts::copy_evar(context[24], context[25], context[5], context[6]))
    return refalrts::cNoMemory;
  if( ! refalrts::alloc_close_bracket( context[26] ) )
    return refalrts::cNoMemory;
  if( ! refalrts::alloc_open_bracket( context[27] ) )
    return refalrts::cNoMemory;
  if (! refalrts::copy_evar(context[28], context[29], context[9], context[10]))
    return refalrts::cNoMemory;
  if( ! refalrts::alloc_close_bracket( context[30] ) )
    return refalrts::cNoMemory;
  if( ! refalrts::alloc_close_call( context[31] ) )
    return refalrts::cNoMemory;
  refalrts::update_name( context[4], ref_UnConditionSentencem_Auxu_check.ref.function );
  refalrts::push_stack( context[1] );
  refalrts::push_stack( context[0] );
  refalrts::push_stack( context[31] );
  refalrts::push_stack( context[21] );
  refalrts::link_brackets( context[27], context[30] );
  refalrts::link_brackets( context[23], context[26] );
  refalrts::link_brackets( context[17], context[20] );
  refalrts::link_brackets( context[15], context[16] );
  refalrts::link_brackets( context[11], context[12] );
  refalrts::link_brackets( context[7], context[8] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[1];
  res = refalrts::splice_evar( res, context[31], context[31] );
  res = refalrts::splice_evar( res, context[2], context[3] );
  res = refalrts::splice_evar( res, context[17], context[30] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_UnConditionSentencem_Aux("UnConditionSentence-Aux", 786251477U, 1176157594U, func_UnConditionSentencem_Aux);

static refalrts::FnResult func_UnConditionSentencem_Auxu_check(refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  refalrts::this_is_generated_function();
  // issue here memory for vars with 44 elems
  refalrts::Iter context[44];
  refalrts::zeros( context, 44 );
  // </0 & UnConditionSentence-Aux_check/4 (/7 e.eNames#1/5 )/8 (/11 e.ePrefix#1/9 )/12 (/15 e.eSentence#1/13 )/16 (/19 e.eContinuationSentences#1/17 )/20 (/23 e.eNames1#1/21 )/24 t.tContName#1/25 e.eContFunction#1/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  context[5] = 0;
  context[6] = 0;
  context[7] = refalrts::brackets_left( context[5], context[6], context[2], context[3] );
  if( ! context[7] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[7], context[8]);
  context[9] = 0;
  context[10] = 0;
  context[11] = refalrts::brackets_left( context[9], context[10], context[2], context[3] );
  if( ! context[11] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[11], context[12]);
  context[13] = 0;
  context[14] = 0;
  context[15] = refalrts::brackets_left( context[13], context[14], context[2], context[3] );
  if( ! context[15] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[15], context[16]);
  context[17] = 0;
  context[18] = 0;
  context[19] = refalrts::brackets_left( context[17], context[18], context[2], context[3] );
  if( ! context[19] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[19], context[20]);
  context[21] = 0;
  context[22] = 0;
  context[23] = refalrts::brackets_left( context[21], context[22], context[2], context[3] );
  if( ! context[23] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[23], context[24]);
  // closed e.eNames#1 as range 5
  // closed e.ePrefix#1 as range 9
  // closed e.eSentence#1 as range 13
  // closed e.eContinuationSentences#1 as range 17
  // closed e.eNames1#1 as range 21
  context[26] = refalrts::tvar_left( context[25], context[2], context[3] );
  if( ! context[26] )
    return refalrts::cRecognitionImpossible;
  // closed e.eContFunction#1 as range 2
  //DEBUG: e.eNames#1: 5
  //DEBUG: e.ePrefix#1: 9
  //DEBUG: e.eSentence#1: 13
  //DEBUG: e.eContinuationSentences#1: 17
  //DEBUG: e.eNames1#1: 21
  //DEBUG: t.tContName#1: 25
  //DEBUG: e.eContFunction#1: 2

  refalrts::reset_allocator();
  //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ AsIs: </0 Reuse: & UnConditionSentence-Aux_check0/4 AsIs: (/7 AsIs: e.eNames#1/5 AsIs: )/8 AsIs: (/11 AsIs: e.ePrefix#1/9 AsIs: )/12 AsIs: (/15 AsIs: e.eSentence#1/13 AsIs: )/16 AsIs: (/19 AsIs: e.eContinuationSentences#1/17 AsIs: )/20 AsIs: (/23 AsIs: e.eNames1#1/21 AsIs: )/24 AsIs: t.tContName#1/25 } (/27 Tile{ AsIs: e.eContFunction#1/2 } )/28 </29 & ConditionSubFunctions/30 (/31 e.eNames1#1/21/32 )/34 (/35 e.ePrefix#1/9/36 )/38 t.tContName#1/25/39 e.eSentence#1/13/41 >/43 Tile{ AsIs: >/1 ]] }
  if( ! refalrts::alloc_open_bracket( context[27] ) )
    return refalrts::cNoMemory;
  if( ! refalrts::alloc_close_bracket( context[28] ) )
    return refalrts::cNoMemory;
  if( ! refalrts::alloc_open_call( context[29] ) )
    return refalrts::cNoMemory;
  if( ! refalrts::alloc_name( context[30], ref_ConditionSubFunctions.ref.function ) )
    return refalrts::cNoMemory;
  if( ! refalrts::alloc_open_bracket( context[31] ) )
    return refalrts::cNoMemory;
  if (! refalrts::copy_evar(context[32], context[33], context[21], context[22]))
    return refalrts::cNoMemory;
  if( ! refalrts::alloc_close_bracket( context[34] ) )
    return refalrts::cNoMemory;
  if( ! refalrts::alloc_open_bracket( context[35] ) )
    return refalrts::cNoMemory;
  if (! refalrts::copy_evar(context[36], context[37], context[9], context[10]))
    return refalrts::cNoMemory;
  if( ! refalrts::alloc_close_bracket( context[38] ) )
    return refalrts::cNoMemory;
  if (! refalrts::copy_evar(context[39], context[40], context[25], context[26]))
    return refalrts::cNoMemory;
  if (! refalrts::copy_evar(context[41], context[42], context[13], context[14]))
    return refalrts::cNoMemory;
  if( ! refalrts::alloc_close_call( context[43] ) )
    return refalrts::cNoMemory;
  refalrts::update_name( context[4], ref_UnConditionSentencem_Auxu_check0.ref.function );
  refalrts::push_stack( context[1] );
  refalrts::push_stack( context[0] );
  refalrts::push_stack( context[43] );
  refalrts::push_stack( context[29] );
  refalrts::link_brackets( context[35], context[38] );
  refalrts::link_brackets( context[31], context[34] );
  refalrts::link_brackets( context[27], context[28] );
  refalrts::link_brackets( context[23], context[24] );
  refalrts::link_brackets( context[19], context[20] );
  refalrts::link_brackets( context[15], context[16] );
  refalrts::link_brackets( context[11], context[12] );
  refalrts::link_brackets( context[7], context[8] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[1];
  res = refalrts::splice_evar( res, context[28], context[43] );
  res = refalrts::splice_evar( res, context[2], context[3] );
  res = refalrts::splice_evar( res, context[27], context[27] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_UnConditionSentencem_Auxu_check("UnConditionSentence-Aux_check", 786251477U, 1176157594U, func_UnConditionSentencem_Auxu_check);

static refalrts::FnResult func_UnConditionSentencem_Auxu_check0(refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  refalrts::this_is_generated_function();
  // issue here memory for vars with 48 elems
  refalrts::Iter context[48];
  refalrts::zeros( context, 48 );
  // </0 & UnConditionSentence-Aux_check0/4 (/7 e.eNames#1/5 )/8 (/11 e.ePrefix#1/9 )/12 (/15 e.eSentence#1/13 )/16 (/19 e.eContinuationSentences#1/17 )/20 (/23 e.eNames1#1/21 )/24 t.tContName#1/25 (/29 e.eContFunction#1/27 )/30 (/33 e.eNames2#1/31 )/34 (/37 e.eCallCheckSentence#1/35 )/38 e.eSubFunctions#1/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  context[5] = 0;
  context[6] = 0;
  context[7] = refalrts::brackets_left( context[5], context[6], context[2], context[3] );
  if( ! context[7] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[7], context[8]);
  context[9] = 0;
  context[10] = 0;
  context[11] = refalrts::brackets_left( context[9], context[10], context[2], context[3] );
  if( ! context[11] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[11], context[12]);
  context[13] = 0;
  context[14] = 0;
  context[15] = refalrts::brackets_left( context[13], context[14], context[2], context[3] );
  if( ! context[15] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[15], context[16]);
  context[17] = 0;
  context[18] = 0;
  context[19] = refalrts::brackets_left( context[17], context[18], context[2], context[3] );
  if( ! context[19] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[19], context[20]);
  context[21] = 0;
  context[22] = 0;
  context[23] = refalrts::brackets_left( context[21], context[22], context[2], context[3] );
  if( ! context[23] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[23], context[24]);
  // closed e.eNames#1 as range 5
  // closed e.ePrefix#1 as range 9
  // closed e.eSentence#1 as range 13
  // closed e.eContinuationSentences#1 as range 17
  // closed e.eNames1#1 as range 21
  context[26] = refalrts::tvar_left( context[25], context[2], context[3] );
  if( ! context[26] )
    return refalrts::cRecognitionImpossible;
  context[27] = 0;
  context[28] = 0;
  context[29] = refalrts::brackets_left( context[27], context[28], context[2], context[3] );
  if( ! context[29] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[29], context[30]);
  context[31] = 0;
  context[32] = 0;
  context[33] = refalrts::brackets_left( context[31], context[32], context[2], context[3] );
  if( ! context[33] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[33], context[34]);
  context[35] = 0;
  context[36] = 0;
  context[37] = refalrts::brackets_left( context[35], context[36], context[2], context[3] );
  if( ! context[37] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[37], context[38]);
  // closed e.eContFunction#1 as range 27
  // closed e.eNames2#1 as range 31
  // closed e.eCallCheckSentence#1 as range 35
  // closed e.eSubFunctions#1 as range 2
  //DEBUG: e.eNames#1: 5
  //DEBUG: e.ePrefix#1: 9
  //DEBUG: e.eSentence#1: 13
  //DEBUG: e.eContinuationSentences#1: 17
  //DEBUG: e.eNames1#1: 21
  //DEBUG: t.tContName#1: 25
  //DEBUG: e.eContFunction#1: 27
  //DEBUG: e.eNames2#1: 31
  //DEBUG: e.eCallCheckSentence#1: 35
  //DEBUG: e.eSubFunctions#1: 2

  refalrts::reset_allocator();
  //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} e.eNames#1/5 {REMOVED TILE} {REMOVED TILE} e.ePrefix#1/9 {REMOVED TILE} e.eSentence#1/13 {REMOVED TILE} e.eContinuationSentences#1/17 {REMOVED TILE} e.eNames1#1/21 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ } Tile{ AsIs: (/33 AsIs: e.eNames2#1/31 AsIs: )/34 AsIs: (/37 } Tile{ AsIs: (/11 } Tile{ AsIs: e.eCallCheckSentence#1/35 } Tile{ AsIs: )/16 HalfReuse: </19 } Tile{ HalfReuse: & MakeContinuationSentence/24 AsIs: t.tContName#1/25 AsIs: (/29 } Tile{ AsIs: (/7 } Tile{ HalfReuse: # Variable/8 } # NO-POS/39 'e'/40 Tile{ HalfReuse: 'O'/0 HalfReuse: 't'/4 }"her"/41 Tile{ AsIs: )/38 } Tile{ AsIs: )/20 AsIs: (/23 } (/43 # Variable/44 # NO-POS/45"eOther"/46 Tile{ AsIs: )/12 HalfReuse: )/15 } Tile{ AsIs: >/1 } Tile{ AsIs: )/30 } Tile{ AsIs: e.eSubFunctions#1/2 } Tile{ AsIs: e.eContFunction#1/27 } Tile{ ]] }
  if( ! refalrts::alloc_ident( context[39], ident_NOm_POS ) )
    return refalrts::cNoMemory;
  if( ! refalrts::alloc_char( context[40], 'e' ) )
    return refalrts::cNoMemory;
  if( ! refalrts::alloc_chars( context[41], context[42], "her", 3 ) )
    return refalrts::cNoMemory;
  if( ! refalrts::alloc_open_bracket( context[43] ) )
    return refalrts::cNoMemory;
  if( ! refalrts::alloc_ident( context[44], ident_Variable ) )
    return refalrts::cNoMemory;
  if( ! refalrts::alloc_ident( context[45], ident_NOm_POS ) )
    return refalrts::cNoMemory;
  if( ! refalrts::alloc_chars( context[46], context[47], "eOther", 6 ) )
    return refalrts::cNoMemory;
  refalrts::reinit_open_call( context[19] );
  refalrts::reinit_name( context[24], ref_MakeContinuationSentence.ref.function );
  refalrts::reinit_ident( context[8], ident_Variable );
  refalrts::reinit_char( context[0], 'O' );
  refalrts::reinit_char( context[4], 't' );
  refalrts::reinit_close_bracket( context[15] );
  refalrts::link_brackets( context[37], context[30] );
  refalrts::push_stack( context[1] );
  refalrts::push_stack( context[19] );
  refalrts::link_brackets( context[23], context[15] );
  refalrts::link_brackets( context[43], context[12] );
  refalrts::link_brackets( context[29], context[20] );
  refalrts::link_brackets( context[7], context[38] );
  refalrts::link_brackets( context[11], context[16] );
  refalrts::link_brackets( context[33], context[34] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = arg_end->next;
  res = refalrts::splice_evar( res, context[27], context[28] );
  res = refalrts::splice_evar( res, context[2], context[3] );
  res = refalrts::splice_evar( res, context[30], context[30] );
  res = refalrts::splice_evar( res, context[1], context[1] );
  res = refalrts::splice_evar( res, context[12], context[15] );
  res = refalrts::splice_evar( res, context[43], context[47] );
  res = refalrts::splice_evar( res, context[20], context[23] );
  res = refalrts::splice_evar( res, context[38], context[38] );
  res = refalrts::splice_evar( res, context[41], context[42] );
  res = refalrts::splice_evar( res, context[0], context[4] );
  res = refalrts::splice_evar( res, context[39], context[40] );
  res = refalrts::splice_evar( res, context[8], context[8] );
  res = refalrts::splice_evar( res, context[7], context[7] );
  res = refalrts::splice_evar( res, context[24], context[29] );
  res = refalrts::splice_evar( res, context[16], context[19] );
  res = refalrts::splice_evar( res, context[35], context[36] );
  res = refalrts::splice_evar( res, context[11], context[11] );
  res = refalrts::splice_evar( res, context[33], context[37] );
  refalrts::splice_to_freelist_open( trash_prev, res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_UnConditionSentencem_Auxu_check0("UnConditionSentence-Aux_check0", 786251477U, 1176157594U, func_UnConditionSentencem_Auxu_check0);

static refalrts::FnResult func_AnalyzeContinuation(refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  refalrts::this_is_generated_function();
  // issue here memory for vars with 28 elems
  refalrts::Iter context[28];
  refalrts::zeros( context, 28 );
  //FAST GEN: e.$
  //GLOBAL GEN: ( e.$ ) ( e.$ ) e.$
  // </0 & AnalyzeContinuation/4 (/7 e.idxB#0/5 )/8 (/11 e.idxTB#0/9 )/12 e.idxTT#0/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  context[5] = 0;
  context[6] = 0;
  context[7] = refalrts::brackets_left( context[5], context[6], context[2], context[3] );
  if( ! context[7] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[7], context[8]);
  context[9] = 0;
  context[10] = 0;
  context[11] = refalrts::brackets_left( context[9], context[10], context[2], context[3] );
  if( ! context[11] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[11], context[12]);
  // closed e.idxB#0 as range 5
  // closed e.idxTB#0 as range 9
  // closed e.idxTT#0 as range 2
  do {
    // ( e.idx ) ( e.idx )
    // </0 & AnalyzeContinuation/4 (/7 e.eNames#1/5 )/8 (/11 e.ePrefix#1/9 )/12 >/1
    context[26] = context[2];
    context[27] = context[3];
    if( ! refalrts::empty_seq( context[26], context[27] ) )
      continue;
    // closed e.eNames#1 as range 5
    // closed e.ePrefix#1 as range 9
    //DEBUG: e.eNames#1: 5
    //DEBUG: e.ePrefix#1: 9

    refalrts::reset_allocator();
    //TRASH: {REMOVED TILE} </0 & AnalyzeContinuation/4 {REMOVED TILE} e.ePrefix#1/9 )/12 >/1 {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ AsIs: (/7 AsIs: e.eNames#1/5 AsIs: )/8 HalfReuse: # NoContinuation/11 } Tile{ ]] }
    refalrts::reinit_ident( context[11], ident_NoContinuation );
    refalrts::link_brackets( context[7], context[8] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = arg_end->next;
    res = refalrts::splice_evar( res, context[7], context[11] );
    refalrts::splice_to_freelist_open( trash_prev, res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence();

  // ( e.idx ) ( e.idx ) e.idx
  // </0 & AnalyzeContinuation/4 (/7 e.eNames#1/5 )/8 (/11 e.ePrefix#1/9 )/12 e.eSentences#1/2 >/1
  // closed e.eNames#1 as range 5
  // closed e.ePrefix#1 as range 9
  // closed e.eSentences#1 as range 2
  //DEBUG: e.eNames#1: 5
  //DEBUG: e.ePrefix#1: 9
  //DEBUG: e.eSentences#1: 2

  refalrts::reset_allocator();
  //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ AsIs: </0 Reuse: & AnalyzeContinuation_check/4 AsIs: (/7 AsIs: e.eNames#1/5 AsIs: )/8 AsIs: (/11 AsIs: e.ePrefix#1/9 AsIs: )/12 } (/13 Tile{ AsIs: e.eSentences#1/2 } )/14 </15 & NewName/16 (/17 e.eNames#1/5/18 )/20 e.ePrefix#1/9/21"_cont"/23 >/25 Tile{ AsIs: >/1 ]] }
  if( ! refalrts::alloc_open_bracket( context[13] ) )
    return refalrts::cNoMemory;
  if( ! refalrts::alloc_close_bracket( context[14] ) )
    return refalrts::cNoMemory;
  if( ! refalrts::alloc_open_call( context[15] ) )
    return refalrts::cNoMemory;
  if( ! refalrts::alloc_name( context[16], ref_NewName.ref.function ) )
    return refalrts::cNoMemory;
  if( ! refalrts::alloc_open_bracket( context[17] ) )
    return refalrts::cNoMemory;
  if (! refalrts::copy_evar(context[18], context[19], context[5], context[6]))
    return refalrts::cNoMemory;
  if( ! refalrts::alloc_close_bracket( context[20] ) )
    return refalrts::cNoMemory;
  if (! refalrts::copy_evar(context[21], context[22], context[9], context[10]))
    return refalrts::cNoMemory;
  if( ! refalrts::alloc_chars( context[23], context[24], "_cont", 5 ) )
    return refalrts::cNoMemory;
  if( ! refalrts::alloc_close_call( context[25] ) )
    return refalrts::cNoMemory;
  refalrts::update_name( context[4], ref_AnalyzeContinuationu_check.ref.function );
  refalrts::push_stack( context[1] );
  refalrts::push_stack( context[0] );
  refalrts::push_stack( context[25] );
  refalrts::push_stack( context[15] );
  refalrts::link_brackets( context[17], context[20] );
  refalrts::link_brackets( context[13], context[14] );
  refalrts::link_brackets( context[11], context[12] );
  refalrts::link_brackets( context[7], context[8] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[1];
  res = refalrts::splice_evar( res, context[14], context[25] );
  res = refalrts::splice_evar( res, context[2], context[3] );
  res = refalrts::splice_evar( res, context[13], context[13] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_AnalyzeContinuation("AnalyzeContinuation", 786251477U, 1176157594U, func_AnalyzeContinuation);

static refalrts::FnResult func_AnalyzeContinuationu_check(refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  refalrts::this_is_generated_function();
  // issue here memory for vars with 23 elems
  refalrts::Iter context[23];
  refalrts::zeros( context, 23 );
  // </0 & AnalyzeContinuation_check/4 (/7 e.eNames#1/5 )/8 (/11 e.ePrefix#1/9 )/12 (/15 e.eSentences#1/13 )/16 (/19 e.eRefilledNames#1/17 )/20 e.eContName#1/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  context[5] = 0;
  context[6] = 0;
  context[7] = refalrts::brackets_left( context[5], context[6], context[2], context[3] );
  if( ! context[7] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[7], context[8]);
  context[9] = 0;
  context[10] = 0;
  context[11] = refalrts::brackets_left( context[9], context[10], context[2], context[3] );
  if( ! context[11] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[11], context[12]);
  context[13] = 0;
  context[14] = 0;
  context[15] = refalrts::brackets_left( context[13], context[14], context[2], context[3] );
  if( ! context[15] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[15], context[16]);
  context[17] = 0;
  context[18] = 0;
  context[19] = refalrts::brackets_left( context[17], context[18], context[2], context[3] );
  if( ! context[19] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[19], context[20]);
  // closed e.eNames#1 as range 5
  // closed e.ePrefix#1 as range 9
  // closed e.eSentences#1 as range 13
  // closed e.eRefilledNames#1 as range 17
  // closed e.eContName#1 as range 2
  //DEBUG: e.eNames#1: 5
  //DEBUG: e.ePrefix#1: 9
  //DEBUG: e.eSentences#1: 13
  //DEBUG: e.eRefilledNames#1: 17
  //DEBUG: e.eContName#1: 2

  refalrts::reset_allocator();
  //TRASH: {REMOVED TILE} </0 & AnalyzeContinuation_check/4 {REMOVED TILE} e.eNames#1/5 {REMOVED TILE} e.ePrefix#1/9 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} >/1 {REMOVED TILE}
  //RESULT: Tile{ [[ } Tile{ AsIs: (/19 AsIs: e.eRefilledNames#1/17 AsIs: )/20 } Tile{ AsIs: (/7 } Tile{ AsIs: e.eContName#1/2 } Tile{ AsIs: )/8 AsIs: (/11 } Tile{ HalfReuse: (/12 } e.eContName#1/2/21 Tile{ HalfReuse: )/15 AsIs: e.eSentences#1/13 AsIs: )/16 } Tile{ ]] }
  if (! refalrts::copy_evar(context[21], context[22], context[2], context[3]))
    return refalrts::cNoMemory;
  refalrts::reinit_open_bracket( context[12] );
  refalrts::reinit_close_bracket( context[15] );
  refalrts::link_brackets( context[11], context[16] );
  refalrts::link_brackets( context[12], context[15] );
  refalrts::link_brackets( context[7], context[8] );
  refalrts::link_brackets( context[19], context[20] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = arg_end->next;
  res = refalrts::splice_evar( res, context[15], context[16] );
  res = refalrts::splice_evar( res, context[21], context[22] );
  res = refalrts::splice_evar( res, context[12], context[12] );
  res = refalrts::splice_evar( res, context[8], context[11] );
  res = refalrts::splice_evar( res, context[2], context[3] );
  res = refalrts::splice_evar( res, context[7], context[7] );
  res = refalrts::splice_evar( res, context[19], context[20] );
  refalrts::splice_to_freelist_open( trash_prev, res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_AnalyzeContinuationu_check("AnalyzeContinuation_check", 786251477U, 1176157594U, func_AnalyzeContinuationu_check);

static refalrts::FnResult func_MakeContinuationSentence(refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  refalrts::this_is_generated_function();
  // issue here memory for vars with 21 elems
  refalrts::Iter context[21];
  refalrts::zeros( context, 21 );
  //FAST GEN: t.$ ( e.$ ) ( e.$ )
  //GLOBAL GEN: t.$ ( e.$ ) ( e.$ )
  // </0 & MakeContinuationSentence/4 t.idx#0/13 (/11 e.idxVB#0/9 )/12 (/7 e.idxVTB#0/5 )/8 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  context[5] = 0;
  context[6] = 0;
  context[7] = refalrts::brackets_right( context[5], context[6], context[2], context[3] );
  if( ! context[7] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[7], context[8]);
  context[9] = 0;
  context[10] = 0;
  context[11] = refalrts::brackets_right( context[9], context[10], context[2], context[3] );
  if( ! context[11] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[11], context[12]);
  // closed e.idxVB#0 as range 9
  // closed e.idxVTB#0 as range 5
  context[14] = refalrts::tvar_left( context[13], context[2], context[3] );
  if( ! context[14] )
    return refalrts::cRecognitionImpossible;
  if( ! refalrts::empty_seq( context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  do {
    // # NoContinuation ( e.idx ) ( e.idx )
    // </0 & MakeContinuationSentence/4 # NoContinuation/13 (/11 e.ePattern#1/9 )/12 (/7 e.eContArg#1/5 )/8 >/1
    if( ! refalrts::ident_term(  ident_NoContinuation, context[13] ) )
      continue;
    // closed e.ePattern#1 as range 9
    // closed e.eContArg#1 as range 5
    //DEBUG: e.ePattern#1: 9
    //DEBUG: e.eContArg#1: 5

    refalrts::reset_allocator();
    //TRASH: {REMOVED TILE} </0 & MakeContinuationSentence/4 # NoContinuation/13 (/11 e.ePattern#1/9 )/12 (/7 e.eContArg#1/5 )/8 >/1 {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ ]] }
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = arg_end->next;
    refalrts::splice_to_freelist_open( trash_prev, res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence();

  // ( e.idx ) ( e.idx ) ( e.idx )
  // </0 & MakeContinuationSentence/4 (/13 e.eContName#1/15 )/14 (/11 e.ePattern#1/9 )/12 (/7 e.eContArg#1/5 )/8 >/1
  context[15] = 0;
  context[16] = 0;
  if( ! refalrts::brackets_term( context[15], context[16], context[13] ) )
    return refalrts::cRecognitionImpossible;
  // closed e.eContName#1 as range 15
  // closed e.ePattern#1 as range 9
  // closed e.eContArg#1 as range 5
  //DEBUG: e.eContName#1: 15
  //DEBUG: e.ePattern#1: 9
  //DEBUG: e.eContArg#1: 5

  refalrts::reset_allocator();
  //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ } Tile{ HalfReuse: (/14 AsIs: (/11 AsIs: e.ePattern#1/9 AsIs: )/12 HalfReuse: # RETURN/7 } (/17 (/18 Tile{ HalfReuse: # Call/0 HalfReuse: # NO-POS/4 AsIs: (/13 } Tile{ AsIs: e.eContName#1/15 } )/19 Tile{ AsIs: e.eContArg#1/5 } )/20 Tile{ AsIs: )/8 HalfReuse: )/1 ]] }
  if( ! refalrts::alloc_open_bracket( context[17] ) )
    return refalrts::cNoMemory;
  if( ! refalrts::alloc_open_bracket( context[18] ) )
    return refalrts::cNoMemory;
  if( ! refalrts::alloc_close_bracket( context[19] ) )
    return refalrts::cNoMemory;
  if( ! refalrts::alloc_close_bracket( context[20] ) )
    return refalrts::cNoMemory;
  refalrts::reinit_open_bracket( context[14] );
  refalrts::reinit_ident( context[7], ident_RETURN );
  refalrts::reinit_ident( context[0], ident_Call );
  refalrts::reinit_ident( context[4], ident_NOm_POS );
  refalrts::reinit_close_bracket( context[1] );
  refalrts::link_brackets( context[14], context[1] );
  refalrts::link_brackets( context[17], context[8] );
  refalrts::link_brackets( context[18], context[20] );
  refalrts::link_brackets( context[13], context[19] );
  refalrts::link_brackets( context[11], context[12] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[8];
  res = refalrts::splice_evar( res, context[20], context[20] );
  res = refalrts::splice_evar( res, context[5], context[6] );
  res = refalrts::splice_evar( res, context[19], context[19] );
  res = refalrts::splice_evar( res, context[15], context[16] );
  res = refalrts::splice_evar( res, context[0], context[13] );
  res = refalrts::splice_evar( res, context[17], context[18] );
  res = refalrts::splice_evar( res, context[14], context[7] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_MakeContinuationSentence("MakeContinuationSentence", 786251477U, 1176157594U, func_MakeContinuationSentence);

static refalrts::FnResult func_PatternSteps(refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  refalrts::this_is_generated_function();
  // issue here memory for vars with 14 elems
  refalrts::Iter context[14];
  refalrts::zeros( context, 14 );
  // </0 & PatternSteps/4 (/7 e.eUsedVariables#1/5 )/8 e.ePattern#1/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  context[5] = 0;
  context[6] = 0;
  context[7] = refalrts::brackets_left( context[5], context[6], context[2], context[3] );
  if( ! context[7] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[7], context[8]);
  // closed e.eUsedVariables#1 as range 5
  // closed e.ePattern#1 as range 2
  //DEBUG: e.eUsedVariables#1: 5
  //DEBUG: e.ePattern#1: 2

  refalrts::reset_allocator();
  //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ AsIs: </0 Reuse: & DoPatternSteps/4 AsIs: (/7 AsIs: e.eUsedVariables#1/5 AsIs: )/8 } (/9 )/10 (/11 # HOLE/12 Tile{ AsIs: e.ePattern#1/2 } )/13 Tile{ AsIs: >/1 ]] }
  if( ! refalrts::alloc_open_bracket( context[9] ) )
    return refalrts::cNoMemory;
  if( ! refalrts::alloc_close_bracket( context[10] ) )
    return refalrts::cNoMemory;
  if( ! refalrts::alloc_open_bracket( context[11] ) )
    return refalrts::cNoMemory;
  if( ! refalrts::alloc_ident( context[12], ident_HOLE ) )
    return refalrts::cNoMemory;
  if( ! refalrts::alloc_close_bracket( context[13] ) )
    return refalrts::cNoMemory;
  refalrts::update_name( context[4], ref_DoPatternSteps.ref.function );
  refalrts::push_stack( context[1] );
  refalrts::push_stack( context[0] );
  refalrts::link_brackets( context[11], context[13] );
  refalrts::link_brackets( context[9], context[10] );
  refalrts::link_brackets( context[7], context[8] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[1];
  res = refalrts::splice_evar( res, context[13], context[13] );
  res = refalrts::splice_evar( res, context[2], context[3] );
  res = refalrts::splice_evar( res, context[9], context[12] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_PatternSteps("PatternSteps", 786251477U, 1176157594U, func_PatternSteps);

static refalrts::FnResult func_DoPatternSteps(refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  refalrts::this_is_generated_function();
  // issue here memory for vars with 15 elems
  refalrts::Iter context[15];
  refalrts::zeros( context, 15 );
  // </0 & DoPatternSteps/4 t.tUsedVariables#1/5 (/9 e.eBoundEVariables#1/7 )/10 e.eHolesAndItems#1/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  context[6] = refalrts::tvar_left( context[5], context[2], context[3] );
  if( ! context[6] )
    return refalrts::cRecognitionImpossible;
  context[7] = 0;
  context[8] = 0;
  context[9] = refalrts::brackets_left( context[7], context[8], context[2], context[3] );
  if( ! context[9] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[9], context[10]);
  // closed e.eBoundEVariables#1 as range 7
  // closed e.eHolesAndItems#1 as range 2
  //DEBUG: t.tUsedVariables#1: 5
  //DEBUG: e.eBoundEVariables#1: 7
  //DEBUG: e.eHolesAndItems#1: 2

  refalrts::reset_allocator();
  //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ AsIs: </0 Reuse: & DoPatternSteps0/4 AsIs: t.tUsedVariables#1/5 AsIs: (/9 AsIs: e.eBoundEVariables#1/7 AsIs: )/10 } (/11 e.eHolesAndItems#1/2/12 )/14 Tile{ AsIs: e.eHolesAndItems#1/2 } Tile{ AsIs: >/1 ]] }
  if( ! refalrts::alloc_open_bracket( context[11] ) )
    return refalrts::cNoMemory;
  if (! refalrts::copy_evar(context[12], context[13], context[2], context[3]))
    return refalrts::cNoMemory;
  if( ! refalrts::alloc_close_bracket( context[14] ) )
    return refalrts::cNoMemory;
  refalrts::update_name( context[4], ref_DoPatternSteps0.ref.function );
  refalrts::push_stack( context[1] );
  refalrts::push_stack( context[0] );
  refalrts::link_brackets( context[11], context[14] );
  refalrts::link_brackets( context[9], context[10] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[1];
  res = refalrts::splice_evar( res, context[2], context[3] );
  res = refalrts::splice_evar( res, context[11], context[14] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_DoPatternSteps("DoPatternSteps", 786251477U, 1176157594U, func_DoPatternSteps);

static refalrts::FnResult func_DoPatternSteps0(refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  refalrts::this_is_generated_function();
  // issue here memory for vars with 40 elems
  refalrts::Iter context[40];
  refalrts::zeros( context, 40 );
  //FAST GEN: e.$
  //GLOBAL GEN: e.$
  // </0 & DoPatternSteps0/4 e.idx#0/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.idx#0 as range 2
  do {
    // t.idx ( e.idx ) ( e.idx ) e.idx
    // </0 & DoPatternSteps0/4 t.tUsedVariables#1/5 (/9 e.eBoundEVariables#1/7 )/10 (/13 e.eHolesAndItems#1/11 )/14 e.eHolesAndItems-B#1/15 (/19 # HOLE/21 t.tItem#1/22 e.ePattern#1/17 )/20 e.eHolesAndItems-E#1/2 >/1
    context[36] = context[2];
    context[37] = context[3];
    context[6] = refalrts::tvar_left( context[5], context[36], context[37] );
    if( ! context[6] )
      continue;
    context[7] = 0;
    context[8] = 0;
    context[9] = refalrts::brackets_left( context[7], context[8], context[36], context[37] );
    if( ! context[9] )
      continue;
    refalrts::bracket_pointers(context[9], context[10]);
    context[11] = 0;
    context[12] = 0;
    context[13] = refalrts::brackets_left( context[11], context[12], context[36], context[37] );
    if( ! context[13] )
      continue;
    refalrts::bracket_pointers(context[13], context[14]);
    // closed e.eBoundEVariables#1 as range 7
    // closed e.eHolesAndItems#1 as range 11
    context[15] = 0;
    context[16] = 0;
    refalrts::start_e_loop();
    do {
      context[38] = context[36];
      context[39] = context[37];
      context[17] = 0;
      context[18] = 0;
      context[19] = refalrts::brackets_left( context[17], context[18], context[38], context[39] );
      if( ! context[19] )
        continue;
      refalrts::bracket_pointers(context[19], context[20]);
      context[21] = refalrts::ident_left(  ident_HOLE, context[17], context[18] );
      if( ! context[21] )
        continue;
      // closed e.eHolesAndItems-E#1 as range 38(2)
      context[23] = refalrts::tvar_left( context[22], context[17], context[18] );
      if( ! context[23] )
        continue;
      // closed e.ePattern#1 as range 17
      //DEBUG: t.tUsedVariables#1: 5
      //DEBUG: e.eBoundEVariables#1: 7
      //DEBUG: e.eHolesAndItems#1: 11
      //DEBUG: e.eHolesAndItems-B#1: 15
      //DEBUG: e.eHolesAndItems-E#1: 2
      //DEBUG: t.tItem#1: 22
      //DEBUG: e.ePattern#1: 17

      refalrts::reset_allocator();
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 Reuse: & DoPatternSteps0_check/4 AsIs: t.tUsedVariables#1/5 AsIs: (/9 AsIs: e.eBoundEVariables#1/7 AsIs: )/10 AsIs: (/13 AsIs: e.eHolesAndItems#1/11 AsIs: )/14 } Tile{ AsIs: (/19 } Tile{ AsIs: e.eHolesAndItems-B#1/15 } Tile{ HalfReuse: )/21 AsIs: t.tItem#1/22 } (/24 Tile{ AsIs: e.ePattern#1/17 } Tile{ AsIs: )/20 } (/25 Tile{ AsIs: e.eHolesAndItems-E#1/38(2) } )/26 </27 & HardItem/28 (/29 e.eBoundEVariables#1/7/30 )/32 t.tItem#1/22/33 >/35 Tile{ AsIs: >/1 ]] }
      if( ! refalrts::alloc_open_bracket( context[24] ) )
        return refalrts::cNoMemory;
      if( ! refalrts::alloc_open_bracket( context[25] ) )
        return refalrts::cNoMemory;
      if( ! refalrts::alloc_close_bracket( context[26] ) )
        return refalrts::cNoMemory;
      if( ! refalrts::alloc_open_call( context[27] ) )
        return refalrts::cNoMemory;
      if( ! refalrts::alloc_name( context[28], ref_HardItem.ref.function ) )
        return refalrts::cNoMemory;
      if( ! refalrts::alloc_open_bracket( context[29] ) )
        return refalrts::cNoMemory;
      if (! refalrts::copy_evar(context[30], context[31], context[7], context[8]))
        return refalrts::cNoMemory;
      if( ! refalrts::alloc_close_bracket( context[32] ) )
        return refalrts::cNoMemory;
      if (! refalrts::copy_evar(context[33], context[34], context[22], context[23]))
        return refalrts::cNoMemory;
      if( ! refalrts::alloc_close_call( context[35] ) )
        return refalrts::cNoMemory;
      refalrts::update_name( context[4], ref_DoPatternSteps0u_check.ref.function );
      refalrts::reinit_close_bracket( context[21] );
      refalrts::push_stack( context[1] );
      refalrts::push_stack( context[0] );
      refalrts::push_stack( context[35] );
      refalrts::push_stack( context[27] );
      refalrts::link_brackets( context[29], context[32] );
      refalrts::link_brackets( context[25], context[26] );
      refalrts::link_brackets( context[24], context[20] );
      refalrts::link_brackets( context[19], context[21] );
      refalrts::link_brackets( context[13], context[14] );
      refalrts::link_brackets( context[9], context[10] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[1];
      res = refalrts::splice_evar( res, context[26], context[35] );
      res = refalrts::splice_evar( res, context[38], context[39] );
      res = refalrts::splice_evar( res, context[25], context[25] );
      res = refalrts::splice_evar( res, context[20], context[20] );
      res = refalrts::splice_evar( res, context[17], context[18] );
      res = refalrts::splice_evar( res, context[24], context[24] );
      res = refalrts::splice_evar( res, context[21], context[23] );
      res = refalrts::splice_evar( res, context[15], context[16] );
      res = refalrts::splice_evar( res, context[19], context[19] );
      refalrts::use( res );
      return refalrts::cSuccess;
    } while ( refalrts::open_evar_advance( context[15], context[16], context[36], context[37] ) );
  } while ( 0 );
  refalrts::stop_sentence();

  // e.idx
  // </0 & DoPatternSteps0/4 e.eOther#1/2 >/1
  // closed e.eOther#1 as range 2
  //DEBUG: e.eOther#1: 2

  refalrts::reset_allocator();
  //TRASH: {REMOVED TILE}
  //RESULT: Tile{ [[ AsIs: </0 Reuse: & DoPatternSteps0_cont/4 AsIs: e.eOther#1/2 AsIs: >/1 ]] }
  refalrts::update_name( context[4], ref_DoPatternSteps0u_cont.ref.function );
  refalrts::push_stack( context[1] );
  refalrts::push_stack( context[0] );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_DoPatternSteps0("DoPatternSteps0", 786251477U, 1176157594U, func_DoPatternSteps0);

static refalrts::FnResult func_DoPatternSteps0u_check(refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  refalrts::this_is_generated_function();
  // issue here memory for vars with 32 elems
  refalrts::Iter context[32];
  refalrts::zeros( context, 32 );
  //FAST GEN: t.$ ( e.$ ) ( e.$ ) ( e.$ ) t.$ ( e.$ ) ( e.$ ) e.$
  //GLOBAL GEN: t.$ ( e.$ ) ( e.$ ) ( e.$ ) t.$ ( e.$ ) ( e.$ ) e.$
  // </0 & DoPatternSteps0_check/4 t.idx#0/5 (/9 e.idxVB#0/7 )/10 (/13 e.idxVTB#0/11 )/14 (/17 e.idxVTTB#0/15 )/18 t.idxVTTT#0/19 (/23 e.idxVTTTVB#0/21 )/24 (/27 e.idxVTTTVTB#0/25 )/28 e.idxVTTTVTT#0/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  context[6] = refalrts::tvar_left( context[5], context[2], context[3] );
  if( ! context[6] )
    return refalrts::cRecognitionImpossible;
  context[7] = 0;
  context[8] = 0;
  context[9] = refalrts::brackets_left( context[7], context[8], context[2], context[3] );
  if( ! context[9] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[9], context[10]);
  context[11] = 0;
  context[12] = 0;
  context[13] = refalrts::brackets_left( context[11], context[12], context[2], context[3] );
  if( ! context[13] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[13], context[14]);
  context[15] = 0;
  context[16] = 0;
  context[17] = refalrts::brackets_left( context[15], context[16], context[2], context[3] );
  if( ! context[17] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[17], context[18]);
  // closed e.idxVB#0 as range 7
  // closed e.idxVTB#0 as range 11
  // closed e.idxVTTB#0 as range 15
  context[20] = refalrts::tvar_left( context[19], context[2], context[3] );
  if( ! context[20] )
    return refalrts::cRecognitionImpossible;
  context[21] = 0;
  context[22] = 0;
  context[23] = refalrts::brackets_left( context[21], context[22], context[2], context[3] );
  if( ! context[23] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[23], context[24]);
  context[25] = 0;
  context[26] = 0;
  context[27] = refalrts::brackets_left( context[25], context[26], context[2], context[3] );
  if( ! context[27] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[27], context[28]);
  // closed e.idxVTTTVB#0 as range 21
  // closed e.idxVTTTVTB#0 as range 25
  // closed e.idxVTTTVTT#0 as range 2
  do {
    // t.idx ( e.idx ) ( e.idx ) ( e.idx ) t.idx ( e.idx ) ( e.idx ) # True
    // </0 & DoPatternSteps0_check/4 t.tUsedVariables#1/5 (/9 e.eBoundEVariables#1/7 )/10 (/13 e.eHolesAndItems#1/11 )/14 (/17 e.eHolesAndItems-B#1/15 )/18 t.tItem#1/19 (/23 e.ePattern#1/21 )/24 (/27 e.eHolesAndItems-E#1/25 )/28 # True/29 >/1
    context[30] = context[2];
    context[31] = context[3];
    context[29] = refalrts::ident_left(  ident_True, context[30], context[31] );
    if( ! context[29] )
      continue;
    if( ! refalrts::empty_seq( context[30], context[31] ) )
      continue;
    // closed e.eBoundEVariables#1 as range 7
    // closed e.eHolesAndItems#1 as range 11
    // closed e.eHolesAndItems-B#1 as range 15
    // closed e.ePattern#1 as range 21
    // closed e.eHolesAndItems-E#1 as range 25
    //DEBUG: t.tUsedVariables#1: 5
    //DEBUG: t.tItem#1: 19
    //DEBUG: e.eBoundEVariables#1: 7
    //DEBUG: e.eHolesAndItems#1: 11
    //DEBUG: e.eHolesAndItems-B#1: 15
    //DEBUG: e.ePattern#1: 21
    //DEBUG: e.eHolesAndItems-E#1: 25

    refalrts::reset_allocator();
    //TRASH: {REMOVED TILE} (/13 e.eHolesAndItems#1/11 )/14 (/17 {REMOVED TILE} )/18 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} )/28 # True/29 {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 Reuse: & DoPatternSteps/4 AsIs: t.tUsedVariables#1/5 AsIs: (/9 AsIs: e.eBoundEVariables#1/7 AsIs: )/10 } Tile{ AsIs: e.eHolesAndItems-B#1/15 } Tile{ AsIs: t.tItem#1/19 } Tile{ AsIs: (/27 } Tile{ HalfReuse: # HOLE/23 AsIs: e.ePattern#1/21 AsIs: )/24 } Tile{ AsIs: e.eHolesAndItems-E#1/25 } Tile{ AsIs: >/1 ]] }
    refalrts::update_name( context[4], ref_DoPatternSteps.ref.function );
    refalrts::reinit_ident( context[23], ident_HOLE );
    refalrts::push_stack( context[1] );
    refalrts::push_stack( context[0] );
    refalrts::link_brackets( context[27], context[24] );
    refalrts::link_brackets( context[9], context[10] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    res = refalrts::splice_evar( res, context[25], context[26] );
    res = refalrts::splice_evar( res, context[23], context[24] );
    res = refalrts::splice_evar( res, context[27], context[27] );
    res = refalrts::splice_evar( res, context[19], context[20] );
    res = refalrts::splice_evar( res, context[15], context[16] );
    refalrts::splice_to_freelist_open( context[10], res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence();

  // t.idx ( e.idx ) ( e.idx ) ( e.idx ) t.idx ( e.idx ) ( e.idx ) e.idx
  // </0 & DoPatternSteps0_check/4 t.tUsedVariables#1/5 (/9 e.eBoundEVariables#1/7 )/10 (/13 e.eHolesAndItems#1/11 )/14 (/17 e.eHolesAndItems-B#1/15 )/18 t.tItem#1/19 (/23 e.ePattern#1/21 )/24 (/27 e.eHolesAndItems-E#1/25 )/28 e.eOther#1/2 >/1
  // closed e.eBoundEVariables#1 as range 7
  // closed e.eHolesAndItems#1 as range 11
  // closed e.eHolesAndItems-B#1 as range 15
  // closed e.ePattern#1 as range 21
  // closed e.eHolesAndItems-E#1 as range 25
  // closed e.eOther#1 as range 2
  //DEBUG: t.tUsedVariables#1: 5
  //DEBUG: t.tItem#1: 19
  //DEBUG: e.eBoundEVariables#1: 7
  //DEBUG: e.eHolesAndItems#1: 11
  //DEBUG: e.eHolesAndItems-B#1: 15
  //DEBUG: e.ePattern#1: 21
  //DEBUG: e.eHolesAndItems-E#1: 25
  //DEBUG: e.eOther#1: 2

  refalrts::reset_allocator();
  //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} )/24 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} e.eOther#1/2 {REMOVED TILE}
  //RESULT: Tile{ [[ AsIs: </0 Reuse: & DoPatternSteps0_forward/4 AsIs: t.tUsedVariables#1/5 AsIs: (/9 AsIs: e.eBoundEVariables#1/7 AsIs: )/10 AsIs: (/13 AsIs: e.eHolesAndItems#1/11 AsIs: )/14 AsIs: (/17 AsIs: e.eHolesAndItems-B#1/15 AsIs: )/18 } Tile{ AsIs: (/27 } Tile{ HalfReuse: # HOLE/23 } Tile{ AsIs: t.tItem#1/19 } Tile{ AsIs: e.ePattern#1/21 } Tile{ AsIs: )/28 } Tile{ AsIs: e.eHolesAndItems-E#1/25 } Tile{ AsIs: >/1 ]] }
  refalrts::update_name( context[4], ref_DoPatternSteps0u_forward.ref.function );
  refalrts::reinit_ident( context[23], ident_HOLE );
  refalrts::push_stack( context[1] );
  refalrts::push_stack( context[0] );
  refalrts::link_brackets( context[27], context[28] );
  refalrts::link_brackets( context[17], context[18] );
  refalrts::link_brackets( context[13], context[14] );
  refalrts::link_brackets( context[9], context[10] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[1];
  res = refalrts::splice_evar( res, context[25], context[26] );
  res = refalrts::splice_evar( res, context[28], context[28] );
  res = refalrts::splice_evar( res, context[21], context[22] );
  res = refalrts::splice_evar( res, context[19], context[20] );
  res = refalrts::splice_evar( res, context[23], context[23] );
  res = refalrts::splice_evar( res, context[27], context[27] );
  refalrts::splice_to_freelist_open( context[18], res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_DoPatternSteps0u_check("DoPatternSteps0_check", 786251477U, 1176157594U, func_DoPatternSteps0u_check);

static refalrts::FnResult func_DoPatternSteps0u_forward(refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  refalrts::this_is_generated_function();
  // issue here memory for vars with 23 elems
  refalrts::Iter context[23];
  refalrts::zeros( context, 23 );
  //FAST GEN: e.$
  //GLOBAL GEN: t.$ ( e.$ ) ( e.$ ) ( e.$ ) e.$
  // </0 & DoPatternSteps0_forward/4 t.idx#0/5 (/9 e.idxVB#0/7 )/10 (/13 e.idxVTB#0/11 )/14 (/17 e.idxVTTB#0/15 )/18 e.idxVTTT#0/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  context[6] = refalrts::tvar_left( context[5], context[2], context[3] );
  if( ! context[6] )
    return refalrts::cRecognitionImpossible;
  context[7] = 0;
  context[8] = 0;
  context[9] = refalrts::brackets_left( context[7], context[8], context[2], context[3] );
  if( ! context[9] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[9], context[10]);
  context[11] = 0;
  context[12] = 0;
  context[13] = refalrts::brackets_left( context[11], context[12], context[2], context[3] );
  if( ! context[13] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[13], context[14]);
  context[15] = 0;
  context[16] = 0;
  context[17] = refalrts::brackets_left( context[15], context[16], context[2], context[3] );
  if( ! context[17] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[17], context[18]);
  // closed e.idxVB#0 as range 7
  // closed e.idxVTB#0 as range 11
  // closed e.idxVTTB#0 as range 15
  // closed e.idxVTTT#0 as range 2
  do {
    // t.idx ( e.idx ) ( e.idx ) ( e.idx ) t.idx e.idx
    // </0 & DoPatternSteps0_forward/4 t.tUsedVariables#1/5 (/9 e.eBoundEVariables#1/7 )/10 (/13 e.eHolesAndItems#1/11 )/14 (/17 e.eHolesAndItems-B_fix#1/15 )/18 t.tHolesAndItems-B_next#1/19 e.eHolesAndItems-B_rest#1/2 >/1
    // closed e.eBoundEVariables#1 as range 7
    // closed e.eHolesAndItems#1 as range 11
    // closed e.eHolesAndItems-B_fix#1 as range 15
    context[21] = context[2];
    context[22] = context[3];
    context[20] = refalrts::tvar_left( context[19], context[21], context[22] );
    if( ! context[20] )
      continue;
    // closed e.eHolesAndItems-B_rest#1 as range 21(2)
    //DEBUG: t.tUsedVariables#1: 5
    //DEBUG: e.eBoundEVariables#1: 7
    //DEBUG: e.eHolesAndItems#1: 11
    //DEBUG: e.eHolesAndItems-B_fix#1: 15
    //DEBUG: t.tHolesAndItems-B_next#1: 19
    //DEBUG: e.eHolesAndItems-B_rest#1: 2

    refalrts::reset_allocator();
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 Reuse: & DoPatternSteps0_next/4 AsIs: t.tUsedVariables#1/5 AsIs: (/9 AsIs: e.eBoundEVariables#1/7 AsIs: )/10 AsIs: (/13 AsIs: e.eHolesAndItems#1/11 AsIs: )/14 AsIs: (/17 } Tile{ AsIs: e.eHolesAndItems-B_fix#1/15 } Tile{ AsIs: t.tHolesAndItems-B_next#1/19 } Tile{ AsIs: )/18 } Tile{ AsIs: e.eHolesAndItems-B_rest#1/21(2) } Tile{ AsIs: >/1 ]] }
    refalrts::update_name( context[4], ref_DoPatternSteps0u_next.ref.function );
    refalrts::push_stack( context[1] );
    refalrts::push_stack( context[0] );
    refalrts::link_brackets( context[17], context[18] );
    refalrts::link_brackets( context[13], context[14] );
    refalrts::link_brackets( context[9], context[10] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    res = refalrts::splice_evar( res, context[21], context[22] );
    res = refalrts::splice_evar( res, context[18], context[18] );
    res = refalrts::splice_evar( res, context[19], context[20] );
    res = refalrts::splice_evar( res, context[15], context[16] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence();

  // t.idx ( e.idx ) ( e.idx ) ( e.idx )
  // </0 & DoPatternSteps0_forward/4 t.tUsedVariables#1/5 (/9 e.eBoundEVariables#1/7 )/10 (/13 e.eHolesAndItems#1/11 )/14 (/17 e.eHolesAndItems-B_fix#1/15 )/18 >/1
  if( ! refalrts::empty_seq( context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  // closed e.eBoundEVariables#1 as range 7
  // closed e.eHolesAndItems#1 as range 11
  // closed e.eHolesAndItems-B_fix#1 as range 15
  //DEBUG: t.tUsedVariables#1: 5
  //DEBUG: e.eBoundEVariables#1: 7
  //DEBUG: e.eHolesAndItems#1: 11
  //DEBUG: e.eHolesAndItems-B_fix#1: 15

  refalrts::reset_allocator();
  //TRASH: {REMOVED TILE} (/17 {REMOVED TILE} )/18 {REMOVED TILE}
  //RESULT: Tile{ [[ AsIs: </0 Reuse: & DoPatternSteps0_cont/4 AsIs: t.tUsedVariables#1/5 AsIs: (/9 AsIs: e.eBoundEVariables#1/7 AsIs: )/10 AsIs: (/13 AsIs: e.eHolesAndItems#1/11 AsIs: )/14 } Tile{ AsIs: e.eHolesAndItems-B_fix#1/15 } Tile{ AsIs: >/1 ]] }
  refalrts::update_name( context[4], ref_DoPatternSteps0u_cont.ref.function );
  refalrts::push_stack( context[1] );
  refalrts::push_stack( context[0] );
  refalrts::link_brackets( context[13], context[14] );
  refalrts::link_brackets( context[9], context[10] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[1];
  res = refalrts::splice_evar( res, context[15], context[16] );
  refalrts::splice_to_freelist_open( context[14], res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_DoPatternSteps0u_forward("DoPatternSteps0_forward", 786251477U, 1176157594U, func_DoPatternSteps0u_forward);

static refalrts::FnResult func_DoPatternSteps0u_next(refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  refalrts::this_is_generated_function();
  // issue here memory for vars with 42 elems
  refalrts::Iter context[42];
  refalrts::zeros( context, 42 );
  //FAST GEN: t.$ ( e.$ ) ( e.$ ) ( e.$ ) e.$
  //GLOBAL GEN: t.$ ( e.$ ) ( e.$ ) ( e.$ ) e.$
  // </0 & DoPatternSteps0_next/4 t.idx#0/5 (/9 e.idxVB#0/7 )/10 (/13 e.idxVTB#0/11 )/14 (/17 e.idxVTTB#0/15 )/18 e.idxVTTT#0/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  context[6] = refalrts::tvar_left( context[5], context[2], context[3] );
  if( ! context[6] )
    return refalrts::cRecognitionImpossible;
  context[7] = 0;
  context[8] = 0;
  context[9] = refalrts::brackets_left( context[7], context[8], context[2], context[3] );
  if( ! context[9] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[9], context[10]);
  context[11] = 0;
  context[12] = 0;
  context[13] = refalrts::brackets_left( context[11], context[12], context[2], context[3] );
  if( ! context[13] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[13], context[14]);
  context[15] = 0;
  context[16] = 0;
  context[17] = refalrts::brackets_left( context[15], context[16], context[2], context[3] );
  if( ! context[17] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[17], context[18]);
  // closed e.idxVB#0 as range 7
  // closed e.idxVTB#0 as range 11
  // closed e.idxVTTB#0 as range 15
  // closed e.idxVTTT#0 as range 2
  do {
    // t.idx ( e.idx ) ( e.idx ) ( e.idx ) e.idx
    // </0 & DoPatternSteps0_next/4 t.tUsedVariables#1/5 (/9 e.eBoundEVariables#1/7 )/10 (/13 e.eHolesAndItems#1/11 )/14 (/17 e.eHolesAndItems-B_fix#1/15 )/18 e.eHolesAndItems-B_var#1/19 (/23 # HOLE/25 t.tItem#1/26 e.ePattern#1/21 )/24 e.eHolesAndItems-E#1/2 >/1
    // closed e.eBoundEVariables#1 as range 7
    // closed e.eHolesAndItems#1 as range 11
    // closed e.eHolesAndItems-B_fix#1 as range 15
    context[38] = context[2];
    context[39] = context[3];
    context[19] = 0;
    context[20] = 0;
    refalrts::start_e_loop();
    do {
      context[40] = context[38];
      context[41] = context[39];
      context[21] = 0;
      context[22] = 0;
      context[23] = refalrts::brackets_left( context[21], context[22], context[40], context[41] );
      if( ! context[23] )
        continue;
      refalrts::bracket_pointers(context[23], context[24]);
      context[25] = refalrts::ident_left(  ident_HOLE, context[21], context[22] );
      if( ! context[25] )
        continue;
      // closed e.eHolesAndItems-E#1 as range 40(2)
      context[27] = refalrts::tvar_left( context[26], context[21], context[22] );
      if( ! context[27] )
        continue;
      // closed e.ePattern#1 as range 21
      //DEBUG: t.tUsedVariables#1: 5
      //DEBUG: e.eBoundEVariables#1: 7
      //DEBUG: e.eHolesAndItems#1: 11
      //DEBUG: e.eHolesAndItems-B_fix#1: 15
      //DEBUG: e.eHolesAndItems-B_var#1: 19
      //DEBUG: e.eHolesAndItems-E#1: 2
      //DEBUG: t.tItem#1: 26
      //DEBUG: e.ePattern#1: 21

      refalrts::reset_allocator();
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 Reuse: & DoPatternSteps0_check/4 AsIs: t.tUsedVariables#1/5 AsIs: (/9 AsIs: e.eBoundEVariables#1/7 AsIs: )/10 AsIs: (/13 AsIs: e.eHolesAndItems#1/11 AsIs: )/14 AsIs: (/17 } Tile{ AsIs: e.eHolesAndItems-B_fix#1/15 } Tile{ AsIs: e.eHolesAndItems-B_var#1/19 } Tile{ HalfReuse: )/25 AsIs: t.tItem#1/26 } Tile{ AsIs: (/23 } Tile{ AsIs: e.ePattern#1/21 } Tile{ AsIs: )/24 } (/28 Tile{ AsIs: e.eHolesAndItems-E#1/40(2) } Tile{ AsIs: )/18 } </29 & HardItem/30 (/31 e.eBoundEVariables#1/7/32 )/34 t.tItem#1/26/35 >/37 Tile{ AsIs: >/1 ]] }
      if( ! refalrts::alloc_open_bracket( context[28] ) )
        return refalrts::cNoMemory;
      if( ! refalrts::alloc_open_call( context[29] ) )
        return refalrts::cNoMemory;
      if( ! refalrts::alloc_name( context[30], ref_HardItem.ref.function ) )
        return refalrts::cNoMemory;
      if( ! refalrts::alloc_open_bracket( context[31] ) )
        return refalrts::cNoMemory;
      if (! refalrts::copy_evar(context[32], context[33], context[7], context[8]))
        return refalrts::cNoMemory;
      if( ! refalrts::alloc_close_bracket( context[34] ) )
        return refalrts::cNoMemory;
      if (! refalrts::copy_evar(context[35], context[36], context[26], context[27]))
        return refalrts::cNoMemory;
      if( ! refalrts::alloc_close_call( context[37] ) )
        return refalrts::cNoMemory;
      refalrts::update_name( context[4], ref_DoPatternSteps0u_check.ref.function );
      refalrts::reinit_close_bracket( context[25] );
      refalrts::push_stack( context[1] );
      refalrts::push_stack( context[0] );
      refalrts::push_stack( context[37] );
      refalrts::push_stack( context[29] );
      refalrts::link_brackets( context[31], context[34] );
      refalrts::link_brackets( context[28], context[18] );
      refalrts::link_brackets( context[23], context[24] );
      refalrts::link_brackets( context[17], context[25] );
      refalrts::link_brackets( context[13], context[14] );
      refalrts::link_brackets( context[9], context[10] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[1];
      res = refalrts::splice_evar( res, context[29], context[37] );
      res = refalrts::splice_evar( res, context[18], context[18] );
      res = refalrts::splice_evar( res, context[40], context[41] );
      res = refalrts::splice_evar( res, context[28], context[28] );
      res = refalrts::splice_evar( res, context[24], context[24] );
      res = refalrts::splice_evar( res, context[21], context[22] );
      res = refalrts::splice_evar( res, context[23], context[23] );
      res = refalrts::splice_evar( res, context[25], context[27] );
      res = refalrts::splice_evar( res, context[19], context[20] );
      res = refalrts::splice_evar( res, context[15], context[16] );
      refalrts::use( res );
      return refalrts::cSuccess;
    } while ( refalrts::open_evar_advance( context[19], context[20], context[38], context[39] ) );
  } while ( 0 );
  refalrts::stop_sentence();

  // t.idx ( e.idx ) ( e.idx ) ( e.idx ) e.idx
  // </0 & DoPatternSteps0_next/4 t.tUsedVariables#1/5 (/9 e.eBoundEVariables#1/7 )/10 (/13 e.eHolesAndItems#1/11 )/14 (/17 e.eHolesAndItems-B_fix#1/15 )/18 e.eHolesAndItems-B_rest#1/2 >/1
  // closed e.eBoundEVariables#1 as range 7
  // closed e.eHolesAndItems#1 as range 11
  // closed e.eHolesAndItems-B_fix#1 as range 15
  // closed e.eHolesAndItems-B_rest#1 as range 2
  //DEBUG: t.tUsedVariables#1: 5
  //DEBUG: e.eBoundEVariables#1: 7
  //DEBUG: e.eHolesAndItems#1: 11
  //DEBUG: e.eHolesAndItems-B_fix#1: 15
  //DEBUG: e.eHolesAndItems-B_rest#1: 2

  refalrts::reset_allocator();
  //TRASH: {REMOVED TILE} (/17 {REMOVED TILE} )/18 {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ AsIs: </0 Reuse: & DoPatternSteps0_cont/4 AsIs: t.tUsedVariables#1/5 AsIs: (/9 AsIs: e.eBoundEVariables#1/7 AsIs: )/10 AsIs: (/13 AsIs: e.eHolesAndItems#1/11 AsIs: )/14 } Tile{ AsIs: e.eHolesAndItems-B_fix#1/15 } Tile{ AsIs: e.eHolesAndItems-B_rest#1/2 } Tile{ AsIs: >/1 ]] }
  refalrts::update_name( context[4], ref_DoPatternSteps0u_cont.ref.function );
  refalrts::push_stack( context[1] );
  refalrts::push_stack( context[0] );
  refalrts::link_brackets( context[13], context[14] );
  refalrts::link_brackets( context[9], context[10] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[1];
  res = refalrts::splice_evar( res, context[2], context[3] );
  res = refalrts::splice_evar( res, context[15], context[16] );
  refalrts::splice_to_freelist_open( context[14], res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_DoPatternSteps0u_next("DoPatternSteps0_next", 786251477U, 1176157594U, func_DoPatternSteps0u_next);

static refalrts::FnResult func_DoPatternSteps0u_cont(refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  refalrts::this_is_generated_function();
  // issue here memory for vars with 40 elems
  refalrts::Iter context[40];
  refalrts::zeros( context, 40 );
  //FAST GEN: e.$
  //GLOBAL GEN: e.$
  // </0 & DoPatternSteps0_cont/4 e.idx#0/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.idx#0 as range 2
  do {
    // t.idx ( e.idx ) ( e.idx ) e.idx
    // </0 & DoPatternSteps0_cont/4 t.tUsedVariables#1/5 (/9 e.eBoundEVariables#1/7 )/10 (/13 e.eHolesAndItems#1/11 )/14 e.eHolesAndItems-B#1/15 (/19 # HOLE/21 e.ePattern#1/17 t.tItem#1/22 )/20 e.eHolesAndItems-E#1/2 >/1
    context[36] = context[2];
    context[37] = context[3];
    context[6] = refalrts::tvar_left( context[5], context[36], context[37] );
    if( ! context[6] )
      continue;
    context[7] = 0;
    context[8] = 0;
    context[9] = refalrts::brackets_left( context[7], context[8], context[36], context[37] );
    if( ! context[9] )
      continue;
    refalrts::bracket_pointers(context[9], context[10]);
    context[11] = 0;
    context[12] = 0;
    context[13] = refalrts::brackets_left( context[11], context[12], context[36], context[37] );
    if( ! context[13] )
      continue;
    refalrts::bracket_pointers(context[13], context[14]);
    // closed e.eBoundEVariables#1 as range 7
    // closed e.eHolesAndItems#1 as range 11
    context[15] = 0;
    context[16] = 0;
    refalrts::start_e_loop();
    do {
      context[38] = context[36];
      context[39] = context[37];
      context[17] = 0;
      context[18] = 0;
      context[19] = refalrts::brackets_left( context[17], context[18], context[38], context[39] );
      if( ! context[19] )
        continue;
      refalrts::bracket_pointers(context[19], context[20]);
      context[21] = refalrts::ident_left(  ident_HOLE, context[17], context[18] );
      if( ! context[21] )
        continue;
      // closed e.eHolesAndItems-E#1 as range 38(2)
      context[23] = refalrts::tvar_right( context[22], context[17], context[18] );
      if( ! context[23] )
        continue;
      // closed e.ePattern#1 as range 17
      //DEBUG: t.tUsedVariables#1: 5
      //DEBUG: e.eBoundEVariables#1: 7
      //DEBUG: e.eHolesAndItems#1: 11
      //DEBUG: e.eHolesAndItems-B#1: 15
      //DEBUG: e.eHolesAndItems-E#1: 2
      //DEBUG: t.tItem#1: 22
      //DEBUG: e.ePattern#1: 17

      refalrts::reset_allocator();
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 Reuse: & DoPatternSteps0_check0/4 AsIs: t.tUsedVariables#1/5 AsIs: (/9 AsIs: e.eBoundEVariables#1/7 AsIs: )/10 AsIs: (/13 AsIs: e.eHolesAndItems#1/11 AsIs: )/14 } Tile{ AsIs: (/19 } Tile{ AsIs: e.eHolesAndItems-B#1/15 } Tile{ HalfReuse: )/21 } (/24 Tile{ AsIs: e.ePattern#1/17 } )/25 Tile{ AsIs: t.tItem#1/22 HalfReuse: (/20 AsIs: e.eHolesAndItems-E#1/38(2) HalfReuse: )/1 } </26 & HardItem/27 (/28 e.eBoundEVariables#1/7/29 )/31 t.tItem#1/22/32 >/34 >/35 Tile{ ]] }
      if( ! refalrts::alloc_open_bracket( context[24] ) )
        return refalrts::cNoMemory;
      if( ! refalrts::alloc_close_bracket( context[25] ) )
        return refalrts::cNoMemory;
      if( ! refalrts::alloc_open_call( context[26] ) )
        return refalrts::cNoMemory;
      if( ! refalrts::alloc_name( context[27], ref_HardItem.ref.function ) )
        return refalrts::cNoMemory;
      if( ! refalrts::alloc_open_bracket( context[28] ) )
        return refalrts::cNoMemory;
      if (! refalrts::copy_evar(context[29], context[30], context[7], context[8]))
        return refalrts::cNoMemory;
      if( ! refalrts::alloc_close_bracket( context[31] ) )
        return refalrts::cNoMemory;
      if (! refalrts::copy_evar(context[32], context[33], context[22], context[23]))
        return refalrts::cNoMemory;
      if( ! refalrts::alloc_close_call( context[34] ) )
        return refalrts::cNoMemory;
      if( ! refalrts::alloc_close_call( context[35] ) )
        return refalrts::cNoMemory;
      refalrts::update_name( context[4], ref_DoPatternSteps0u_check0.ref.function );
      refalrts::reinit_close_bracket( context[21] );
      refalrts::reinit_open_bracket( context[20] );
      refalrts::reinit_close_bracket( context[1] );
      refalrts::push_stack( context[35] );
      refalrts::push_stack( context[0] );
      refalrts::push_stack( context[34] );
      refalrts::push_stack( context[26] );
      refalrts::link_brackets( context[28], context[31] );
      refalrts::link_brackets( context[20], context[1] );
      refalrts::link_brackets( context[24], context[25] );
      refalrts::link_brackets( context[19], context[21] );
      refalrts::link_brackets( context[13], context[14] );
      refalrts::link_brackets( context[9], context[10] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = arg_end->next;
      res = refalrts::splice_evar( res, context[26], context[35] );
      res = refalrts::splice_evar( res, context[22], context[1] );
      res = refalrts::splice_evar( res, context[25], context[25] );
      res = refalrts::splice_evar( res, context[17], context[18] );
      res = refalrts::splice_evar( res, context[24], context[24] );
      res = refalrts::splice_evar( res, context[21], context[21] );
      res = refalrts::splice_evar( res, context[15], context[16] );
      res = refalrts::splice_evar( res, context[19], context[19] );
      refalrts::use( res );
      return refalrts::cSuccess;
    } while ( refalrts::open_evar_advance( context[15], context[16], context[36], context[37] ) );
  } while ( 0 );
  refalrts::stop_sentence();

  // e.idx
  // </0 & DoPatternSteps0_cont/4 e.eOther#1/2 >/1
  // closed e.eOther#1 as range 2
  //DEBUG: e.eOther#1: 2

  refalrts::reset_allocator();
  //TRASH: {REMOVED TILE}
  //RESULT: Tile{ [[ AsIs: </0 Reuse: & DoPatternSteps0_cont0/4 AsIs: e.eOther#1/2 AsIs: >/1 ]] }
  refalrts::update_name( context[4], ref_DoPatternSteps0u_cont0.ref.function );
  refalrts::push_stack( context[1] );
  refalrts::push_stack( context[0] );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_DoPatternSteps0u_cont("DoPatternSteps0_cont", 786251477U, 1176157594U, func_DoPatternSteps0u_cont);

static refalrts::FnResult func_DoPatternSteps0u_check0(refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  refalrts::this_is_generated_function();
  // issue here memory for vars with 32 elems
  refalrts::Iter context[32];
  refalrts::zeros( context, 32 );
  //FAST GEN: t.$ ( e.$ ) ( e.$ ) ( e.$ ) ( e.$ ) t.$ ( e.$ ) e.$
  //GLOBAL GEN: t.$ ( e.$ ) ( e.$ ) ( e.$ ) ( e.$ ) t.$ ( e.$ ) e.$
  // </0 & DoPatternSteps0_check0/4 t.idx#0/5 (/9 e.idxVB#0/7 )/10 (/13 e.idxVTB#0/11 )/14 (/17 e.idxVTTB#0/15 )/18 (/21 e.idxVTTTB#0/19 )/22 t.idxVTTTT#0/23 (/27 e.idxVTTTTVB#0/25 )/28 e.idxVTTTTVT#0/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  context[6] = refalrts::tvar_left( context[5], context[2], context[3] );
  if( ! context[6] )
    return refalrts::cRecognitionImpossible;
  context[7] = 0;
  context[8] = 0;
  context[9] = refalrts::brackets_left( context[7], context[8], context[2], context[3] );
  if( ! context[9] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[9], context[10]);
  context[11] = 0;
  context[12] = 0;
  context[13] = refalrts::brackets_left( context[11], context[12], context[2], context[3] );
  if( ! context[13] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[13], context[14]);
  context[15] = 0;
  context[16] = 0;
  context[17] = refalrts::brackets_left( context[15], context[16], context[2], context[3] );
  if( ! context[17] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[17], context[18]);
  context[19] = 0;
  context[20] = 0;
  context[21] = refalrts::brackets_left( context[19], context[20], context[2], context[3] );
  if( ! context[21] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[21], context[22]);
  // closed e.idxVB#0 as range 7
  // closed e.idxVTB#0 as range 11
  // closed e.idxVTTB#0 as range 15
  // closed e.idxVTTTB#0 as range 19
  context[24] = refalrts::tvar_left( context[23], context[2], context[3] );
  if( ! context[24] )
    return refalrts::cRecognitionImpossible;
  context[25] = 0;
  context[26] = 0;
  context[27] = refalrts::brackets_left( context[25], context[26], context[2], context[3] );
  if( ! context[27] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[27], context[28]);
  // closed e.idxVTTTTVB#0 as range 25
  // closed e.idxVTTTTVT#0 as range 2
  do {
    // t.idx ( e.idx ) ( e.idx ) ( e.idx ) ( e.idx ) t.idx ( e.idx ) # True
    // </0 & DoPatternSteps0_check0/4 t.tUsedVariables#1/5 (/9 e.eBoundEVariables#1/7 )/10 (/13 e.eHolesAndItems#1/11 )/14 (/17 e.eHolesAndItems-B#1/15 )/18 (/21 e.ePattern#1/19 )/22 t.tItem#1/23 (/27 e.eHolesAndItems-E#1/25 )/28 # True/29 >/1
    context[30] = context[2];
    context[31] = context[3];
    context[29] = refalrts::ident_left(  ident_True, context[30], context[31] );
    if( ! context[29] )
      continue;
    if( ! refalrts::empty_seq( context[30], context[31] ) )
      continue;
    // closed e.eBoundEVariables#1 as range 7
    // closed e.eHolesAndItems#1 as range 11
    // closed e.eHolesAndItems-B#1 as range 15
    // closed e.ePattern#1 as range 19
    // closed e.eHolesAndItems-E#1 as range 25
    //DEBUG: t.tUsedVariables#1: 5
    //DEBUG: t.tItem#1: 23
    //DEBUG: e.eBoundEVariables#1: 7
    //DEBUG: e.eHolesAndItems#1: 11
    //DEBUG: e.eHolesAndItems-B#1: 15
    //DEBUG: e.ePattern#1: 19
    //DEBUG: e.eHolesAndItems-E#1: 25

    refalrts::reset_allocator();
    //TRASH: {REMOVED TILE} (/13 e.eHolesAndItems#1/11 )/14 (/17 {REMOVED TILE} {REMOVED TILE} (/27 {REMOVED TILE} )/28 # True/29 {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 Reuse: & DoPatternSteps/4 AsIs: t.tUsedVariables#1/5 AsIs: (/9 AsIs: e.eBoundEVariables#1/7 AsIs: )/10 } Tile{ AsIs: e.eHolesAndItems-B#1/15 } Tile{ HalfReuse: (/18 HalfReuse: # HOLE/21 AsIs: e.ePattern#1/19 AsIs: )/22 AsIs: t.tItem#1/23 } Tile{ AsIs: e.eHolesAndItems-E#1/25 } Tile{ AsIs: >/1 ]] }
    refalrts::update_name( context[4], ref_DoPatternSteps.ref.function );
    refalrts::reinit_open_bracket( context[18] );
    refalrts::reinit_ident( context[21], ident_HOLE );
    refalrts::push_stack( context[1] );
    refalrts::push_stack( context[0] );
    refalrts::link_brackets( context[18], context[22] );
    refalrts::link_brackets( context[9], context[10] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    res = refalrts::splice_evar( res, context[25], context[26] );
    res = refalrts::splice_evar( res, context[18], context[24] );
    res = refalrts::splice_evar( res, context[15], context[16] );
    refalrts::splice_to_freelist_open( context[10], res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence();

  // t.idx ( e.idx ) ( e.idx ) ( e.idx ) ( e.idx ) t.idx ( e.idx ) e.idx
  // </0 & DoPatternSteps0_check0/4 t.tUsedVariables#1/5 (/9 e.eBoundEVariables#1/7 )/10 (/13 e.eHolesAndItems#1/11 )/14 (/17 e.eHolesAndItems-B#1/15 )/18 (/21 e.ePattern#1/19 )/22 t.tItem#1/23 (/27 e.eHolesAndItems-E#1/25 )/28 e.eOther#1/2 >/1
  // closed e.eBoundEVariables#1 as range 7
  // closed e.eHolesAndItems#1 as range 11
  // closed e.eHolesAndItems-B#1 as range 15
  // closed e.ePattern#1 as range 19
  // closed e.eHolesAndItems-E#1 as range 25
  // closed e.eOther#1 as range 2
  //DEBUG: t.tUsedVariables#1: 5
  //DEBUG: t.tItem#1: 23
  //DEBUG: e.eBoundEVariables#1: 7
  //DEBUG: e.eHolesAndItems#1: 11
  //DEBUG: e.eHolesAndItems-B#1: 15
  //DEBUG: e.ePattern#1: 19
  //DEBUG: e.eHolesAndItems-E#1: 25
  //DEBUG: e.eOther#1: 2

  refalrts::reset_allocator();
  //TRASH: {REMOVED TILE} {REMOVED TILE} )/22 {REMOVED TILE} e.eOther#1/2 {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ AsIs: </0 Reuse: & DoPatternSteps0_forward0/4 AsIs: t.tUsedVariables#1/5 AsIs: (/9 AsIs: e.eBoundEVariables#1/7 AsIs: )/10 AsIs: (/13 AsIs: e.eHolesAndItems#1/11 AsIs: )/14 AsIs: (/17 AsIs: e.eHolesAndItems-B#1/15 AsIs: )/18 AsIs: (/21 } Tile{ HalfReuse: # HOLE/1 } Tile{ AsIs: e.ePattern#1/19 } Tile{ AsIs: t.tItem#1/23 HalfReuse: )/27 AsIs: e.eHolesAndItems-E#1/25 HalfReuse: >/28 } Tile{ ]] }
  refalrts::update_name( context[4], ref_DoPatternSteps0u_forward0.ref.function );
  refalrts::reinit_ident( context[1], ident_HOLE );
  refalrts::reinit_close_bracket( context[27] );
  refalrts::reinit_close_call( context[28] );
  refalrts::push_stack( context[28] );
  refalrts::push_stack( context[0] );
  refalrts::link_brackets( context[21], context[27] );
  refalrts::link_brackets( context[17], context[18] );
  refalrts::link_brackets( context[13], context[14] );
  refalrts::link_brackets( context[9], context[10] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = arg_end->next;
  res = refalrts::splice_evar( res, context[23], context[28] );
  res = refalrts::splice_evar( res, context[19], context[20] );
  res = refalrts::splice_evar( res, context[1], context[1] );
  refalrts::splice_to_freelist_open( context[21], res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_DoPatternSteps0u_check0("DoPatternSteps0_check0", 786251477U, 1176157594U, func_DoPatternSteps0u_check0);

static refalrts::FnResult func_DoPatternSteps0u_forward0(refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  refalrts::this_is_generated_function();
  // issue here memory for vars with 23 elems
  refalrts::Iter context[23];
  refalrts::zeros( context, 23 );
  //FAST GEN: e.$
  //GLOBAL GEN: t.$ ( e.$ ) ( e.$ ) ( e.$ ) e.$
  // </0 & DoPatternSteps0_forward0/4 t.idx#0/5 (/9 e.idxVB#0/7 )/10 (/13 e.idxVTB#0/11 )/14 (/17 e.idxVTTB#0/15 )/18 e.idxVTTT#0/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  context[6] = refalrts::tvar_left( context[5], context[2], context[3] );
  if( ! context[6] )
    return refalrts::cRecognitionImpossible;
  context[7] = 0;
  context[8] = 0;
  context[9] = refalrts::brackets_left( context[7], context[8], context[2], context[3] );
  if( ! context[9] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[9], context[10]);
  context[11] = 0;
  context[12] = 0;
  context[13] = refalrts::brackets_left( context[11], context[12], context[2], context[3] );
  if( ! context[13] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[13], context[14]);
  context[15] = 0;
  context[16] = 0;
  context[17] = refalrts::brackets_left( context[15], context[16], context[2], context[3] );
  if( ! context[17] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[17], context[18]);
  // closed e.idxVB#0 as range 7
  // closed e.idxVTB#0 as range 11
  // closed e.idxVTTB#0 as range 15
  // closed e.idxVTTT#0 as range 2
  do {
    // t.idx ( e.idx ) ( e.idx ) ( e.idx ) t.idx e.idx
    // </0 & DoPatternSteps0_forward0/4 t.tUsedVariables#1/5 (/9 e.eBoundEVariables#1/7 )/10 (/13 e.eHolesAndItems#1/11 )/14 (/17 e.eHolesAndItems-B_fix#1/15 )/18 t.tHolesAndItems-B_next#1/19 e.eHolesAndItems-B_rest#1/2 >/1
    // closed e.eBoundEVariables#1 as range 7
    // closed e.eHolesAndItems#1 as range 11
    // closed e.eHolesAndItems-B_fix#1 as range 15
    context[21] = context[2];
    context[22] = context[3];
    context[20] = refalrts::tvar_left( context[19], context[21], context[22] );
    if( ! context[20] )
      continue;
    // closed e.eHolesAndItems-B_rest#1 as range 21(2)
    //DEBUG: t.tUsedVariables#1: 5
    //DEBUG: e.eBoundEVariables#1: 7
    //DEBUG: e.eHolesAndItems#1: 11
    //DEBUG: e.eHolesAndItems-B_fix#1: 15
    //DEBUG: t.tHolesAndItems-B_next#1: 19
    //DEBUG: e.eHolesAndItems-B_rest#1: 2

    refalrts::reset_allocator();
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 Reuse: & DoPatternSteps0_next0/4 AsIs: t.tUsedVariables#1/5 AsIs: (/9 AsIs: e.eBoundEVariables#1/7 AsIs: )/10 AsIs: (/13 AsIs: e.eHolesAndItems#1/11 AsIs: )/14 AsIs: (/17 } Tile{ AsIs: e.eHolesAndItems-B_fix#1/15 } Tile{ AsIs: t.tHolesAndItems-B_next#1/19 } Tile{ AsIs: )/18 } Tile{ AsIs: e.eHolesAndItems-B_rest#1/21(2) } Tile{ AsIs: >/1 ]] }
    refalrts::update_name( context[4], ref_DoPatternSteps0u_next0.ref.function );
    refalrts::push_stack( context[1] );
    refalrts::push_stack( context[0] );
    refalrts::link_brackets( context[17], context[18] );
    refalrts::link_brackets( context[13], context[14] );
    refalrts::link_brackets( context[9], context[10] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    res = refalrts::splice_evar( res, context[21], context[22] );
    res = refalrts::splice_evar( res, context[18], context[18] );
    res = refalrts::splice_evar( res, context[19], context[20] );
    res = refalrts::splice_evar( res, context[15], context[16] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence();

  // t.idx ( e.idx ) ( e.idx ) ( e.idx )
  // </0 & DoPatternSteps0_forward0/4 t.tUsedVariables#1/5 (/9 e.eBoundEVariables#1/7 )/10 (/13 e.eHolesAndItems#1/11 )/14 (/17 e.eHolesAndItems-B_fix#1/15 )/18 >/1
  if( ! refalrts::empty_seq( context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  // closed e.eBoundEVariables#1 as range 7
  // closed e.eHolesAndItems#1 as range 11
  // closed e.eHolesAndItems-B_fix#1 as range 15
  //DEBUG: t.tUsedVariables#1: 5
  //DEBUG: e.eBoundEVariables#1: 7
  //DEBUG: e.eHolesAndItems#1: 11
  //DEBUG: e.eHolesAndItems-B_fix#1: 15

  refalrts::reset_allocator();
  //TRASH: {REMOVED TILE} (/17 {REMOVED TILE} )/18 {REMOVED TILE}
  //RESULT: Tile{ [[ AsIs: </0 Reuse: & DoPatternSteps0_cont0/4 AsIs: t.tUsedVariables#1/5 AsIs: (/9 AsIs: e.eBoundEVariables#1/7 AsIs: )/10 AsIs: (/13 AsIs: e.eHolesAndItems#1/11 AsIs: )/14 } Tile{ AsIs: e.eHolesAndItems-B_fix#1/15 } Tile{ AsIs: >/1 ]] }
  refalrts::update_name( context[4], ref_DoPatternSteps0u_cont0.ref.function );
  refalrts::push_stack( context[1] );
  refalrts::push_stack( context[0] );
  refalrts::link_brackets( context[13], context[14] );
  refalrts::link_brackets( context[9], context[10] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[1];
  res = refalrts::splice_evar( res, context[15], context[16] );
  refalrts::splice_to_freelist_open( context[14], res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_DoPatternSteps0u_forward0("DoPatternSteps0_forward0", 786251477U, 1176157594U, func_DoPatternSteps0u_forward0);

static refalrts::FnResult func_DoPatternSteps0u_next0(refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  refalrts::this_is_generated_function();
  // issue here memory for vars with 42 elems
  refalrts::Iter context[42];
  refalrts::zeros( context, 42 );
  //FAST GEN: t.$ ( e.$ ) ( e.$ ) ( e.$ ) e.$
  //GLOBAL GEN: t.$ ( e.$ ) ( e.$ ) ( e.$ ) e.$
  // </0 & DoPatternSteps0_next0/4 t.idx#0/5 (/9 e.idxVB#0/7 )/10 (/13 e.idxVTB#0/11 )/14 (/17 e.idxVTTB#0/15 )/18 e.idxVTTT#0/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  context[6] = refalrts::tvar_left( context[5], context[2], context[3] );
  if( ! context[6] )
    return refalrts::cRecognitionImpossible;
  context[7] = 0;
  context[8] = 0;
  context[9] = refalrts::brackets_left( context[7], context[8], context[2], context[3] );
  if( ! context[9] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[9], context[10]);
  context[11] = 0;
  context[12] = 0;
  context[13] = refalrts::brackets_left( context[11], context[12], context[2], context[3] );
  if( ! context[13] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[13], context[14]);
  context[15] = 0;
  context[16] = 0;
  context[17] = refalrts::brackets_left( context[15], context[16], context[2], context[3] );
  if( ! context[17] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[17], context[18]);
  // closed e.idxVB#0 as range 7
  // closed e.idxVTB#0 as range 11
  // closed e.idxVTTB#0 as range 15
  // closed e.idxVTTT#0 as range 2
  do {
    // t.idx ( e.idx ) ( e.idx ) ( e.idx ) e.idx
    // </0 & DoPatternSteps0_next0/4 t.tUsedVariables#1/5 (/9 e.eBoundEVariables#1/7 )/10 (/13 e.eHolesAndItems#1/11 )/14 (/17 e.eHolesAndItems-B_fix#1/15 )/18 e.eHolesAndItems-B_var#1/19 (/23 # HOLE/25 e.ePattern#1/21 t.tItem#1/26 )/24 e.eHolesAndItems-E#1/2 >/1
    // closed e.eBoundEVariables#1 as range 7
    // closed e.eHolesAndItems#1 as range 11
    // closed e.eHolesAndItems-B_fix#1 as range 15
    context[38] = context[2];
    context[39] = context[3];
    context[19] = 0;
    context[20] = 0;
    refalrts::start_e_loop();
    do {
      context[40] = context[38];
      context[41] = context[39];
      context[21] = 0;
      context[22] = 0;
      context[23] = refalrts::brackets_left( context[21], context[22], context[40], context[41] );
      if( ! context[23] )
        continue;
      refalrts::bracket_pointers(context[23], context[24]);
      context[25] = refalrts::ident_left(  ident_HOLE, context[21], context[22] );
      if( ! context[25] )
        continue;
      // closed e.eHolesAndItems-E#1 as range 40(2)
      context[27] = refalrts::tvar_right( context[26], context[21], context[22] );
      if( ! context[27] )
        continue;
      // closed e.ePattern#1 as range 21
      //DEBUG: t.tUsedVariables#1: 5
      //DEBUG: e.eBoundEVariables#1: 7
      //DEBUG: e.eHolesAndItems#1: 11
      //DEBUG: e.eHolesAndItems-B_fix#1: 15
      //DEBUG: e.eHolesAndItems-B_var#1: 19
      //DEBUG: e.eHolesAndItems-E#1: 2
      //DEBUG: t.tItem#1: 26
      //DEBUG: e.ePattern#1: 21

      refalrts::reset_allocator();
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 Reuse: & DoPatternSteps0_check0/4 AsIs: t.tUsedVariables#1/5 AsIs: (/9 AsIs: e.eBoundEVariables#1/7 AsIs: )/10 AsIs: (/13 AsIs: e.eHolesAndItems#1/11 AsIs: )/14 AsIs: (/17 } Tile{ AsIs: e.eHolesAndItems-B_fix#1/15 } Tile{ AsIs: e.eHolesAndItems-B_var#1/19 } Tile{ AsIs: )/18 } Tile{ AsIs: (/23 } Tile{ AsIs: e.ePattern#1/21 } )/28 Tile{ AsIs: t.tItem#1/26 HalfReuse: (/24 AsIs: e.eHolesAndItems-E#1/40(2) HalfReuse: )/1 } Tile{ HalfReuse: </25 } & HardItem/29 (/30 e.eBoundEVariables#1/7/31 )/33 t.tItem#1/26/34 >/36 >/37 Tile{ ]] }
      if( ! refalrts::alloc_close_bracket( context[28] ) )
        return refalrts::cNoMemory;
      if( ! refalrts::alloc_name( context[29], ref_HardItem.ref.function ) )
        return refalrts::cNoMemory;
      if( ! refalrts::alloc_open_bracket( context[30] ) )
        return refalrts::cNoMemory;
      if (! refalrts::copy_evar(context[31], context[32], context[7], context[8]))
        return refalrts::cNoMemory;
      if( ! refalrts::alloc_close_bracket( context[33] ) )
        return refalrts::cNoMemory;
      if (! refalrts::copy_evar(context[34], context[35], context[26], context[27]))
        return refalrts::cNoMemory;
      if( ! refalrts::alloc_close_call( context[36] ) )
        return refalrts::cNoMemory;
      if( ! refalrts::alloc_close_call( context[37] ) )
        return refalrts::cNoMemory;
      refalrts::update_name( context[4], ref_DoPatternSteps0u_check0.ref.function );
      refalrts::reinit_open_bracket( context[24] );
      refalrts::reinit_close_bracket( context[1] );
      refalrts::reinit_open_call( context[25] );
      refalrts::push_stack( context[37] );
      refalrts::push_stack( context[0] );
      refalrts::push_stack( context[36] );
      refalrts::push_stack( context[25] );
      refalrts::link_brackets( context[30], context[33] );
      refalrts::link_brackets( context[24], context[1] );
      refalrts::link_brackets( context[23], context[28] );
      refalrts::link_brackets( context[17], context[18] );
      refalrts::link_brackets( context[13], context[14] );
      refalrts::link_brackets( context[9], context[10] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = arg_end->next;
      res = refalrts::splice_evar( res, context[29], context[37] );
      res = refalrts::splice_evar( res, context[25], context[25] );
      res = refalrts::splice_evar( res, context[26], context[1] );
      res = refalrts::splice_evar( res, context[28], context[28] );
      res = refalrts::splice_evar( res, context[21], context[22] );
      res = refalrts::splice_evar( res, context[23], context[23] );
      res = refalrts::splice_evar( res, context[18], context[18] );
      res = refalrts::splice_evar( res, context[19], context[20] );
      res = refalrts::splice_evar( res, context[15], context[16] );
      refalrts::use( res );
      return refalrts::cSuccess;
    } while ( refalrts::open_evar_advance( context[19], context[20], context[38], context[39] ) );
  } while ( 0 );
  refalrts::stop_sentence();

  // t.idx ( e.idx ) ( e.idx ) ( e.idx ) e.idx
  // </0 & DoPatternSteps0_next0/4 t.tUsedVariables#1/5 (/9 e.eBoundEVariables#1/7 )/10 (/13 e.eHolesAndItems#1/11 )/14 (/17 e.eHolesAndItems-B_fix#1/15 )/18 e.eHolesAndItems-B_rest#1/2 >/1
  // closed e.eBoundEVariables#1 as range 7
  // closed e.eHolesAndItems#1 as range 11
  // closed e.eHolesAndItems-B_fix#1 as range 15
  // closed e.eHolesAndItems-B_rest#1 as range 2
  //DEBUG: t.tUsedVariables#1: 5
  //DEBUG: e.eBoundEVariables#1: 7
  //DEBUG: e.eHolesAndItems#1: 11
  //DEBUG: e.eHolesAndItems-B_fix#1: 15
  //DEBUG: e.eHolesAndItems-B_rest#1: 2

  refalrts::reset_allocator();
  //TRASH: {REMOVED TILE} (/17 {REMOVED TILE} )/18 {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ AsIs: </0 Reuse: & DoPatternSteps0_cont0/4 AsIs: t.tUsedVariables#1/5 AsIs: (/9 AsIs: e.eBoundEVariables#1/7 AsIs: )/10 AsIs: (/13 AsIs: e.eHolesAndItems#1/11 AsIs: )/14 } Tile{ AsIs: e.eHolesAndItems-B_fix#1/15 } Tile{ AsIs: e.eHolesAndItems-B_rest#1/2 } Tile{ AsIs: >/1 ]] }
  refalrts::update_name( context[4], ref_DoPatternSteps0u_cont0.ref.function );
  refalrts::push_stack( context[1] );
  refalrts::push_stack( context[0] );
  refalrts::link_brackets( context[13], context[14] );
  refalrts::link_brackets( context[9], context[10] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[1];
  res = refalrts::splice_evar( res, context[2], context[3] );
  res = refalrts::splice_evar( res, context[15], context[16] );
  refalrts::splice_to_freelist_open( context[14], res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_DoPatternSteps0u_next0("DoPatternSteps0_next0", 786251477U, 1176157594U, func_DoPatternSteps0u_next0);

static refalrts::FnResult func_DoPatternSteps0u_cont0(refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  refalrts::this_is_generated_function();
  // issue here memory for vars with 98 elems
  refalrts::Iter context[98];
  refalrts::zeros( context, 98 );
  //FAST GEN: t.$ ( e.$ ) ( e.$ ) e.$
  //GLOBAL GEN: t.$ ( e.$ ) ( e.$ ) e.$
  // </0 & DoPatternSteps0_cont0/4 t.idx#0/5 (/9 e.idxVB#0/7 )/10 (/13 e.idxVTB#0/11 )/14 e.idxVTT#0/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  context[6] = refalrts::tvar_left( context[5], context[2], context[3] );
  if( ! context[6] )
    return refalrts::cRecognitionImpossible;
  context[7] = 0;
  context[8] = 0;
  context[9] = refalrts::brackets_left( context[7], context[8], context[2], context[3] );
  if( ! context[9] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[9], context[10]);
  context[11] = 0;
  context[12] = 0;
  context[13] = refalrts::brackets_left( context[11], context[12], context[2], context[3] );
  if( ! context[13] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[13], context[14]);
  // closed e.idxVB#0 as range 7
  // closed e.idxVTB#0 as range 11
  // closed e.idxVTT#0 as range 2
  do {
    // t.idx ( e.idx ) ( e.idx ) e.idx
    // </0 & DoPatternSteps0_cont0/4 t.tUsedVariables#1/5 (/9 e.eBoundEVariables#1/7 )/10 (/13 e.eHolesAndItems#1/11 )/14 e.eHolesAndItems-B#1/15 (/19 # HOLE/21 (/24 # Variable/26 t.tSrcPos#1/27 'e'/29 e.eIndex#1/22 )/25 )/20 e.eHolesAndItems-E#1/2 >/1
    // closed e.eBoundEVariables#1 as range 7
    // closed e.eHolesAndItems#1 as range 11
    context[94] = context[2];
    context[95] = context[3];
    context[15] = 0;
    context[16] = 0;
    refalrts::start_e_loop();
    do {
      context[96] = context[94];
      context[97] = context[95];
      context[17] = 0;
      context[18] = 0;
      context[19] = refalrts::brackets_left( context[17], context[18], context[96], context[97] );
      if( ! context[19] )
        continue;
      refalrts::bracket_pointers(context[19], context[20]);
      context[21] = refalrts::ident_left(  ident_HOLE, context[17], context[18] );
      if( ! context[21] )
        continue;
      context[22] = 0;
      context[23] = 0;
      context[24] = refalrts::brackets_left( context[22], context[23], context[17], context[18] );
      if( ! context[24] )
        continue;
      refalrts::bracket_pointers(context[24], context[25]);
      context[26] = refalrts::ident_left(  ident_Variable, context[22], context[23] );
      if( ! context[26] )
        continue;
      if( ! refalrts::empty_seq( context[17], context[18] ) )
        continue;
      // closed e.eHolesAndItems-E#1 as range 96(2)
      context[28] = refalrts::tvar_left( context[27], context[22], context[23] );
      if( ! context[28] )
        continue;
      context[29] = refalrts::char_left( 'e', context[22], context[23] );
      if( ! context[29] )
        continue;
      // closed e.eIndex#1 as range 22
      //DEBUG: t.tUsedVariables#1: 5
      //DEBUG: e.eBoundEVariables#1: 7
      //DEBUG: e.eHolesAndItems#1: 11
      //DEBUG: e.eHolesAndItems-B#1: 15
      //DEBUG: e.eHolesAndItems-E#1: 2
      //DEBUG: t.tSrcPos#1: 27
      //DEBUG: e.eIndex#1: 22

      refalrts::reset_allocator();
      //TRASH: {REMOVED TILE} (/13 e.eHolesAndItems#1/11 {REMOVED TILE} {REMOVED TILE} (/19 # HOLE/21 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 Reuse: & DoPatternSteps/4 AsIs: t.tUsedVariables#1/5 AsIs: (/9 AsIs: e.eBoundEVariables#1/7 HalfReuse: (/10 } e.eIndex#1/22/30 Tile{ AsIs: )/20 } Tile{ AsIs: )/14 } Tile{ AsIs: e.eHolesAndItems-B#1/15 } Tile{ AsIs: (/24 AsIs: # Variable/26 AsIs: t.tSrcPos#1/27 AsIs: 'e'/29 AsIs: e.eIndex#1/22 AsIs: )/25 } Tile{ AsIs: e.eHolesAndItems-E#1/96(2) } Tile{ AsIs: >/1 ]] }
      if (! refalrts::copy_evar(context[30], context[31], context[22], context[23]))
        return refalrts::cNoMemory;
      refalrts::update_name( context[4], ref_DoPatternSteps.ref.function );
      refalrts::reinit_open_bracket( context[10] );
      refalrts::push_stack( context[1] );
      refalrts::push_stack( context[0] );
      refalrts::link_brackets( context[24], context[25] );
      refalrts::link_brackets( context[9], context[14] );
      refalrts::link_brackets( context[10], context[20] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[1];
      res = refalrts::splice_evar( res, context[96], context[97] );
      res = refalrts::splice_evar( res, context[24], context[25] );
      res = refalrts::splice_evar( res, context[15], context[16] );
      res = refalrts::splice_evar( res, context[14], context[14] );
      res = refalrts::splice_evar( res, context[20], context[20] );
      res = refalrts::splice_evar( res, context[30], context[31] );
      refalrts::splice_to_freelist_open( context[10], res );
      return refalrts::cSuccess;
    } while ( refalrts::open_evar_advance( context[15], context[16], context[94], context[95] ) );
  } while ( 0 );
  refalrts::stop_sentence();

  do {
    // t.idx ( e.idx ) ( e.idx ) e.idx
    // </0 & DoPatternSteps0_cont0/4 t.tUsedVariables#1/5 (/9 e.eBoundEVariables#1/7 )/10 (/13 e.eHolesAndItems#1/11 )/14 e.eHolesAndItems-B#1/15 (/19 # HOLE/21 )/20 e.eHolesAndItems-E#1/2 >/1
    // closed e.eBoundEVariables#1 as range 7
    // closed e.eHolesAndItems#1 as range 11
    context[94] = context[2];
    context[95] = context[3];
    context[15] = 0;
    context[16] = 0;
    refalrts::start_e_loop();
    do {
      context[96] = context[94];
      context[97] = context[95];
      context[17] = 0;
      context[18] = 0;
      context[19] = refalrts::brackets_left( context[17], context[18], context[96], context[97] );
      if( ! context[19] )
        continue;
      refalrts::bracket_pointers(context[19], context[20]);
      context[21] = refalrts::ident_left(  ident_HOLE, context[17], context[18] );
      if( ! context[21] )
        continue;
      if( ! refalrts::empty_seq( context[17], context[18] ) )
        continue;
      // closed e.eHolesAndItems-E#1 as range 96(2)
      //DEBUG: t.tUsedVariables#1: 5
      //DEBUG: e.eBoundEVariables#1: 7
      //DEBUG: e.eHolesAndItems#1: 11
      //DEBUG: e.eHolesAndItems-B#1: 15
      //DEBUG: e.eHolesAndItems-E#1: 2

      refalrts::reset_allocator();
      //TRASH: {REMOVED TILE} (/13 e.eHolesAndItems#1/11 )/14 {REMOVED TILE} (/19 # HOLE/21 )/20 {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 Reuse: & DoPatternSteps/4 AsIs: t.tUsedVariables#1/5 AsIs: (/9 AsIs: e.eBoundEVariables#1/7 AsIs: )/10 } Tile{ AsIs: e.eHolesAndItems-B#1/15 } Tile{ AsIs: e.eHolesAndItems-E#1/96(2) } Tile{ AsIs: >/1 ]] }
      refalrts::update_name( context[4], ref_DoPatternSteps.ref.function );
      refalrts::push_stack( context[1] );
      refalrts::push_stack( context[0] );
      refalrts::link_brackets( context[9], context[10] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[1];
      res = refalrts::splice_evar( res, context[96], context[97] );
      res = refalrts::splice_evar( res, context[15], context[16] );
      refalrts::splice_to_freelist_open( context[10], res );
      return refalrts::cSuccess;
    } while ( refalrts::open_evar_advance( context[15], context[16], context[94], context[95] ) );
  } while ( 0 );
  refalrts::stop_sentence();

  do {
    // t.idx ( e.idx ) ( e.idx ) e.idx
    // </0 & DoPatternSteps0_cont0/4 t.tUsedVariables#1/5 (/9 e.eBoundEVariables#1/7 )/10 (/13 e.eHolesAndItems#1/11 )/14 e.eHolesAndItems-B#1/15 (/19 # HOLE/21 (/24 # Brackets/26 e.eInBrackets#1/22 )/25 e.ePattern#1/17 )/20 e.eHolesAndItems-E#1/2 >/1
    // closed e.eBoundEVariables#1 as range 7
    // closed e.eHolesAndItems#1 as range 11
    context[94] = context[2];
    context[95] = context[3];
    context[15] = 0;
    context[16] = 0;
    refalrts::start_e_loop();
    do {
      context[96] = context[94];
      context[97] = context[95];
      context[17] = 0;
      context[18] = 0;
      context[19] = refalrts::brackets_left( context[17], context[18], context[96], context[97] );
      if( ! context[19] )
        continue;
      refalrts::bracket_pointers(context[19], context[20]);
      context[21] = refalrts::ident_left(  ident_HOLE, context[17], context[18] );
      if( ! context[21] )
        continue;
      context[22] = 0;
      context[23] = 0;
      context[24] = refalrts::brackets_left( context[22], context[23], context[17], context[18] );
      if( ! context[24] )
        continue;
      refalrts::bracket_pointers(context[24], context[25]);
      context[26] = refalrts::ident_left(  ident_Brackets, context[22], context[23] );
      if( ! context[26] )
        continue;
      // closed e.eInBrackets#1 as range 22
      // closed e.ePattern#1 as range 17
      // closed e.eHolesAndItems-E#1 as range 96(2)
      //DEBUG: t.tUsedVariables#1: 5
      //DEBUG: e.eBoundEVariables#1: 7
      //DEBUG: e.eHolesAndItems#1: 11
      //DEBUG: e.eHolesAndItems-B#1: 15
      //DEBUG: e.eInBrackets#1: 22
      //DEBUG: e.ePattern#1: 17
      //DEBUG: e.eHolesAndItems-E#1: 2

      refalrts::reset_allocator();
      //TRASH: {REMOVED TILE} {REMOVED TILE} e.eHolesAndItems#1/11 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 Reuse: & DoPatternSteps/4 AsIs: t.tUsedVariables#1/5 AsIs: (/9 AsIs: e.eBoundEVariables#1/7 AsIs: )/10 } Tile{ AsIs: e.eHolesAndItems-B#1/15 } Tile{ AsIs: (/19 Reuse: # LeftBracket/21 HalfReuse: )/24 HalfReuse: (/26 } # HOLE/27 Tile{ AsIs: e.eInBrackets#1/22 } Tile{ AsIs: )/14 } Tile{ AsIs: (/13 } # RightBracket/28 )/29 (/30 Tile{ HalfReuse: # HOLE/25 AsIs: e.ePattern#1/17 AsIs: )/20 AsIs: e.eHolesAndItems-E#1/96(2) AsIs: >/1 ]] }
      if( ! refalrts::alloc_ident( context[27], ident_HOLE ) )
        return refalrts::cNoMemory;
      if( ! refalrts::alloc_ident( context[28], ident_RightBracket ) )
        return refalrts::cNoMemory;
      if( ! refalrts::alloc_close_bracket( context[29] ) )
        return refalrts::cNoMemory;
      if( ! refalrts::alloc_open_bracket( context[30] ) )
        return refalrts::cNoMemory;
      refalrts::update_name( context[4], ref_DoPatternSteps.ref.function );
      refalrts::update_ident( context[21], ident_LeftBracket );
      refalrts::reinit_close_bracket( context[24] );
      refalrts::reinit_open_bracket( context[26] );
      refalrts::reinit_ident( context[25], ident_HOLE );
      refalrts::push_stack( context[1] );
      refalrts::push_stack( context[0] );
      refalrts::link_brackets( context[30], context[20] );
      refalrts::link_brackets( context[13], context[29] );
      refalrts::link_brackets( context[26], context[14] );
      refalrts::link_brackets( context[19], context[24] );
      refalrts::link_brackets( context[9], context[10] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[25];
      res = refalrts::splice_evar( res, context[28], context[30] );
      res = refalrts::splice_evar( res, context[13], context[13] );
      res = refalrts::splice_evar( res, context[14], context[14] );
      res = refalrts::splice_evar( res, context[22], context[23] );
      res = refalrts::splice_evar( res, context[27], context[27] );
      res = refalrts::splice_evar( res, context[19], context[26] );
      res = refalrts::splice_evar( res, context[15], context[16] );
      refalrts::splice_to_freelist_open( context[10], res );
      return refalrts::cSuccess;
    } while ( refalrts::open_evar_advance( context[15], context[16], context[94], context[95] ) );
  } while ( 0 );
  refalrts::stop_sentence();

  do {
    // t.idx ( e.idx ) ( e.idx ) e.idx
    // </0 & DoPatternSteps0_cont0/4 t.tUsedVariables#1/5 (/9 e.eBoundEVariables#1/7 )/10 (/13 e.eHolesAndItems#1/11 )/14 e.eHolesAndItems-B#1/15 (/19 # HOLE/21 e.ePattern#1/17 (/24 # Brackets/26 e.eInBrackets#1/22 )/25 )/20 e.eHolesAndItems-E#1/2 >/1
    // closed e.eBoundEVariables#1 as range 7
    // closed e.eHolesAndItems#1 as range 11
    context[94] = context[2];
    context[95] = context[3];
    context[15] = 0;
    context[16] = 0;
    refalrts::start_e_loop();
    do {
      context[96] = context[94];
      context[97] = context[95];
      context[17] = 0;
      context[18] = 0;
      context[19] = refalrts::brackets_left( context[17], context[18], context[96], context[97] );
      if( ! context[19] )
        continue;
      refalrts::bracket_pointers(context[19], context[20]);
      context[21] = refalrts::ident_left(  ident_HOLE, context[17], context[18] );
      if( ! context[21] )
        continue;
      context[22] = 0;
      context[23] = 0;
      context[24] = refalrts::brackets_right( context[22], context[23], context[17], context[18] );
      if( ! context[24] )
        continue;
      refalrts::bracket_pointers(context[24], context[25]);
      context[26] = refalrts::ident_left(  ident_Brackets, context[22], context[23] );
      if( ! context[26] )
        continue;
      // closed e.ePattern#1 as range 17
      // closed e.eInBrackets#1 as range 22
      // closed e.eHolesAndItems-E#1 as range 96(2)
      //DEBUG: t.tUsedVariables#1: 5
      //DEBUG: e.eBoundEVariables#1: 7
      //DEBUG: e.eHolesAndItems#1: 11
      //DEBUG: e.eHolesAndItems-B#1: 15
      //DEBUG: e.ePattern#1: 17
      //DEBUG: e.eInBrackets#1: 22
      //DEBUG: e.eHolesAndItems-E#1: 2

      refalrts::reset_allocator();
      //TRASH: {REMOVED TILE} {REMOVED TILE} e.eHolesAndItems#1/11 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 Reuse: & DoPatternSteps/4 AsIs: t.tUsedVariables#1/5 AsIs: (/9 AsIs: e.eBoundEVariables#1/7 AsIs: )/10 } Tile{ AsIs: e.eHolesAndItems-B#1/15 } Tile{ AsIs: (/19 AsIs: # HOLE/21 AsIs: e.ePattern#1/17 HalfReuse: )/24 HalfReuse: (/26 } # LeftBracket/27 Tile{ AsIs: )/14 } Tile{ AsIs: (/13 } # HOLE/28 Tile{ AsIs: e.eInBrackets#1/22 } )/29 (/30 Tile{ HalfReuse: # RightBracket/25 AsIs: )/20 AsIs: e.eHolesAndItems-E#1/96(2) AsIs: >/1 ]] }
      if( ! refalrts::alloc_ident( context[27], ident_LeftBracket ) )
        return refalrts::cNoMemory;
      if( ! refalrts::alloc_ident( context[28], ident_HOLE ) )
        return refalrts::cNoMemory;
      if( ! refalrts::alloc_close_bracket( context[29] ) )
        return refalrts::cNoMemory;
      if( ! refalrts::alloc_open_bracket( context[30] ) )
        return refalrts::cNoMemory;
      refalrts::update_name( context[4], ref_DoPatternSteps.ref.function );
      refalrts::reinit_close_bracket( context[24] );
      refalrts::reinit_open_bracket( context[26] );
      refalrts::reinit_ident( context[25], ident_RightBracket );
      refalrts::push_stack( context[1] );
      refalrts::push_stack( context[0] );
      refalrts::link_brackets( context[30], context[20] );
      refalrts::link_brackets( context[13], context[29] );
      refalrts::link_brackets( context[26], context[14] );
      refalrts::link_brackets( context[19], context[24] );
      refalrts::link_brackets( context[9], context[10] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[25];
      res = refalrts::splice_evar( res, context[29], context[30] );
      res = refalrts::splice_evar( res, context[22], context[23] );
      res = refalrts::splice_evar( res, context[28], context[28] );
      res = refalrts::splice_evar( res, context[13], context[13] );
      res = refalrts::splice_evar( res, context[14], context[14] );
      res = refalrts::splice_evar( res, context[27], context[27] );
      res = refalrts::splice_evar( res, context[19], context[26] );
      res = refalrts::splice_evar( res, context[15], context[16] );
      refalrts::splice_to_freelist_open( context[10], res );
      return refalrts::cSuccess;
    } while ( refalrts::open_evar_advance( context[15], context[16], context[94], context[95] ) );
  } while ( 0 );
  refalrts::stop_sentence();

  do {
    // t.idx ( e.idx ) ( e.idx ) e.idx
    // </0 & DoPatternSteps0_cont0/4 t.tUsedVariables#1/5 (/9 e.eBoundEVariables#1/7 )/10 (/13 e.eHolesAndItems#1/11 )/14 e.eHolesAndItems-B#1/15 (/19 # HOLE/21 (/24 # Variable/26 t.tSrcPos#1/27 'e'/29 e.eIndex#1/22 )/25 e.ePattern#1/17 )/20 e.eHolesAndItems-E#1/2 >/1
    // closed e.eBoundEVariables#1 as range 7
    // closed e.eHolesAndItems#1 as range 11
    context[94] = context[2];
    context[95] = context[3];
    context[15] = 0;
    context[16] = 0;
    refalrts::start_e_loop();
    do {
      context[96] = context[94];
      context[97] = context[95];
      context[17] = 0;
      context[18] = 0;
      context[19] = refalrts::brackets_left( context[17], context[18], context[96], context[97] );
      if( ! context[19] )
        continue;
      refalrts::bracket_pointers(context[19], context[20]);
      context[21] = refalrts::ident_left(  ident_HOLE, context[17], context[18] );
      if( ! context[21] )
        continue;
      context[22] = 0;
      context[23] = 0;
      context[24] = refalrts::brackets_left( context[22], context[23], context[17], context[18] );
      if( ! context[24] )
        continue;
      refalrts::bracket_pointers(context[24], context[25]);
      context[26] = refalrts::ident_left(  ident_Variable, context[22], context[23] );
      if( ! context[26] )
        continue;
      // closed e.ePattern#1 as range 17
      // closed e.eHolesAndItems-E#1 as range 96(2)
      context[28] = refalrts::tvar_left( context[27], context[22], context[23] );
      if( ! context[28] )
        continue;
      context[29] = refalrts::char_left( 'e', context[22], context[23] );
      if( ! context[29] )
        continue;
      // closed e.eIndex#1 as range 22
      //DEBUG: t.tUsedVariables#1: 5
      //DEBUG: e.eBoundEVariables#1: 7
      //DEBUG: e.eHolesAndItems#1: 11
      //DEBUG: e.eHolesAndItems-B#1: 15
      //DEBUG: e.ePattern#1: 17
      //DEBUG: e.eHolesAndItems-E#1: 2
      //DEBUG: t.tSrcPos#1: 27
      //DEBUG: e.eIndex#1: 22

      refalrts::reset_allocator();
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 Reuse: & DoPatternSteps/4 AsIs: t.tUsedVariables#1/5 AsIs: (/9 AsIs: e.eBoundEVariables#1/7 HalfReuse: (/10 } e.eIndex#1/22/30 )/32 Tile{ AsIs: )/14 } Tile{ AsIs: e.eHolesAndItems-B#1/15 } Tile{ AsIs: (/24 Reuse: # OpenE/26 AsIs: t.tSrcPos#1/27 AsIs: 'e'/29 AsIs: e.eIndex#1/22 AsIs: )/25 } Tile{ AsIs: (/19 AsIs: # HOLE/21 } Tile{ AsIs: e.ePattern#1/17 } Tile{ AsIs: )/20 AsIs: e.eHolesAndItems-E#1/96(2) AsIs: >/1 } Tile{ AsIs: (/13 } </33 & Map/34 # transformer_BindBrackets/35 </36 & T1/37 t.tUsedVariables#1/5/38 Tile{ AsIs: e.eHolesAndItems#1/11 } >/40 </41 & T2/42 t.tUsedVariables#1/5/43 e.eHolesAndItems#1/11/45 >/47 </48 & T3/49 t.tUsedVariables#1/5/50 e.eHolesAndItems#1/11/52 >/54 </55 & T4/56 t.tUsedVariables#1/5/57 e.eHolesAndItems#1/11/59 >/61 </62 & T5/63 t.tUsedVariables#1/5/64 e.eHolesAndItems#1/11/66 >/68 </69 & T5-sub/70 t.tUsedVariables#1/5/71 t.tSrcPos#1/27/73 e.eIndex#1/22/75 >/77 </78 & T6/79 t.tUsedVariables#1/5/80 e.eHolesAndItems#1/11/82 >/84 </85 & T7/86 t.tUsedVariables#1/5/87 e.eHolesAndItems#1/11/89 >/91 >/92 )/93 Tile{ ]] }
      if (! refalrts::copy_evar(context[30], context[31], context[22], context[23]))
        return refalrts::cNoMemory;
      if( ! refalrts::alloc_close_bracket( context[32] ) )
        return refalrts::cNoMemory;
      if( ! refalrts::alloc_open_call( context[33] ) )
        return refalrts::cNoMemory;
      if( ! refalrts::alloc_name( context[34], ref_Map.ref.function ) )
        return refalrts::cNoMemory;
      if( ! refalrts::alloc_ident( context[35], ident_transformeru_BindBrackets ) )
        return refalrts::cNoMemory;
      if( ! refalrts::alloc_open_call( context[36] ) )
        return refalrts::cNoMemory;
      if( ! refalrts::alloc_name( context[37], ref_T1.ref.function ) )
        return refalrts::cNoMemory;
      if (! refalrts::copy_evar(context[38], context[39], context[5], context[6]))
        return refalrts::cNoMemory;
      if( ! refalrts::alloc_close_call( context[40] ) )
        return refalrts::cNoMemory;
      if( ! refalrts::alloc_open_call( context[41] ) )
        return refalrts::cNoMemory;
      if( ! refalrts::alloc_name( context[42], ref_T2.ref.function ) )
        return refalrts::cNoMemory;
      if (! refalrts::copy_evar(context[43], context[44], context[5], context[6]))
        return refalrts::cNoMemory;
      if (! refalrts::copy_evar(context[45], context[46], context[11], context[12]))
        return refalrts::cNoMemory;
      if( ! refalrts::alloc_close_call( context[47] ) )
        return refalrts::cNoMemory;
      if( ! refalrts::alloc_open_call( context[48] ) )
        return refalrts::cNoMemory;
      if( ! refalrts::alloc_name( context[49], ref_T3.ref.function ) )
        return refalrts::cNoMemory;
      if (! refalrts::copy_evar(context[50], context[51], context[5], context[6]))
        return refalrts::cNoMemory;
      if (! refalrts::copy_evar(context[52], context[53], context[11], context[12]))
        return refalrts::cNoMemory;
      if( ! refalrts::alloc_close_call( context[54] ) )
        return refalrts::cNoMemory;
      if( ! refalrts::alloc_open_call( context[55] ) )
        return refalrts::cNoMemory;
      if( ! refalrts::alloc_name( context[56], ref_T4.ref.function ) )
        return refalrts::cNoMemory;
      if (! refalrts::copy_evar(context[57], context[58], context[5], context[6]))
        return refalrts::cNoMemory;
      if (! refalrts::copy_evar(context[59], context[60], context[11], context[12]))
        return refalrts::cNoMemory;
      if( ! refalrts::alloc_close_call( context[61] ) )
        return refalrts::cNoMemory;
      if( ! refalrts::alloc_open_call( context[62] ) )
        return refalrts::cNoMemory;
      if( ! refalrts::alloc_name( context[63], ref_T5.ref.function ) )
        return refalrts::cNoMemory;
      if (! refalrts::copy_evar(context[64], context[65], context[5], context[6]))
        return refalrts::cNoMemory;
      if (! refalrts::copy_evar(context[66], context[67], context[11], context[12]))
        return refalrts::cNoMemory;
      if( ! refalrts::alloc_close_call( context[68] ) )
        return refalrts::cNoMemory;
      if( ! refalrts::alloc_open_call( context[69] ) )
        return refalrts::cNoMemory;
      if( ! refalrts::alloc_name( context[70], ref_T5m_sub.ref.function ) )
        return refalrts::cNoMemory;
      if (! refalrts::copy_evar(context[71], context[72], context[5], context[6]))
        return refalrts::cNoMemory;
      if (! refalrts::copy_evar(context[73], context[74], context[27], context[28]))
        return refalrts::cNoMemory;
      if (! refalrts::copy_evar(context[75], context[76], context[22], context[23]))
        return refalrts::cNoMemory;
      if( ! refalrts::alloc_close_call( context[77] ) )
        return refalrts::cNoMemory;
      if( ! refalrts::alloc_open_call( context[78] ) )
        return refalrts::cNoMemory;
      if( ! refalrts::alloc_name( context[79], ref_T6.ref.function ) )
        return refalrts::cNoMemory;
      if (! refalrts::copy_evar(context[80], context[81], context[5], context[6]))
        return refalrts::cNoMemory;
      if (! refalrts::copy_evar(context[82], context[83], context[11], context[12]))
        return refalrts::cNoMemory;
      if( ! refalrts::alloc_close_call( context[84] ) )
        return refalrts::cNoMemory;
      if( ! refalrts::alloc_open_call( context[85] ) )
        return refalrts::cNoMemory;
      if( ! refalrts::alloc_name( context[86], ref_T7.ref.function ) )
        return refalrts::cNoMemory;
      if (! refalrts::copy_evar(context[87], context[88], context[5], context[6]))
        return refalrts::cNoMemory;
      if (! refalrts::copy_evar(context[89], context[90], context[11], context[12]))
        return refalrts::cNoMemory;
      if( ! refalrts::alloc_close_call( context[91] ) )
        return refalrts::cNoMemory;
      if( ! refalrts::alloc_close_call( context[92] ) )
        return refalrts::cNoMemory;
      if( ! refalrts::alloc_close_bracket( context[93] ) )
        return refalrts::cNoMemory;
      refalrts::update_name( context[4], ref_DoPatternSteps.ref.function );
      refalrts::reinit_open_bracket( context[10] );
      refalrts::update_ident( context[26], ident_OpenE );
      refalrts::link_brackets( context[13], context[93] );
      refalrts::push_stack( context[92] );
      refalrts::push_stack( context[33] );
      refalrts::push_stack( context[91] );
      refalrts::push_stack( context[85] );
      refalrts::push_stack( context[84] );
      refalrts::push_stack( context[78] );
      refalrts::push_stack( context[77] );
      refalrts::push_stack( context[69] );
      refalrts::push_stack( context[68] );
      refalrts::push_stack( context[62] );
      refalrts::push_stack( context[61] );
      refalrts::push_stack( context[55] );
      refalrts::push_stack( context[54] );
      refalrts::push_stack( context[48] );
      refalrts::push_stack( context[47] );
      refalrts::push_stack( context[41] );
      refalrts::push_stack( context[40] );
      refalrts::push_stack( context[36] );
      refalrts::push_stack( context[1] );
      refalrts::push_stack( context[0] );
      refalrts::link_brackets( context[19], context[20] );
      refalrts::link_brackets( context[24], context[25] );
      refalrts::link_brackets( context[9], context[14] );
      refalrts::link_brackets( context[10], context[32] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = arg_end->next;
      res = refalrts::splice_evar( res, context[40], context[93] );
      res = refalrts::splice_evar( res, context[11], context[12] );
      res = refalrts::splice_evar( res, context[33], context[39] );
      res = refalrts::splice_evar( res, context[13], context[13] );
      res = refalrts::splice_evar( res, context[20], context[1] );
      res = refalrts::splice_evar( res, context[17], context[18] );
      res = refalrts::splice_evar( res, context[19], context[21] );
      res = refalrts::splice_evar( res, context[24], context[25] );
      res = refalrts::splice_evar( res, context[15], context[16] );
      res = refalrts::splice_evar( res, context[14], context[14] );
      res = refalrts::splice_evar( res, context[32], context[32] );
      res = refalrts::splice_evar( res, context[30], context[31] );
      refalrts::use( res );
      return refalrts::cSuccess;
    } while ( refalrts::open_evar_advance( context[15], context[16], context[94], context[95] ) );
  } while ( 0 );
  refalrts::stop_sentence();

  // t.idx ( e.idx ) ( e.idx ) e.idx
  // </0 & DoPatternSteps0_cont0/4 t.tUsedVariables#1/5 (/9 e.eBoundEVariables#1/7 )/10 (/13 e.eHolesAndItems#1/11 )/14 e.eOnlyItems#1/2 >/1
  // closed e.eBoundEVariables#1 as range 7
  // closed e.eHolesAndItems#1 as range 11
  // closed e.eOnlyItems#1 as range 2
  //DEBUG: t.tUsedVariables#1: 5
  //DEBUG: e.eBoundEVariables#1: 7
  //DEBUG: e.eHolesAndItems#1: 11
  //DEBUG: e.eOnlyItems#1: 2

  refalrts::reset_allocator();
  //TRASH: {REMOVED TILE} t.tUsedVariables#1/5 {REMOVED TILE} e.eBoundEVariables#1/7 {REMOVED TILE} {REMOVED TILE} e.eHolesAndItems#1/11 {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ HalfReuse: (/0 HalfReuse: </4 } Tile{ HalfReuse: & transformer_BindBrackets/13 } Tile{ HalfReuse: </9 } Tile{ HalfReuse: & T0/14 AsIs: e.eOnlyItems#1/2 AsIs: >/1 } >/15 Tile{ AsIs: )/10 } Tile{ ]] }
  if( ! refalrts::alloc_close_call( context[15] ) )
    return refalrts::cNoMemory;
  refalrts::reinit_open_bracket( context[0] );
  refalrts::reinit_open_call( context[4] );
  refalrts::reinit_name( context[13], ref_transformeru_BindBrackets.ref.function );
  refalrts::reinit_open_call( context[9] );
  refalrts::reinit_name( context[14], ref_T0.ref.function );
  refalrts::link_brackets( context[0], context[10] );
  refalrts::push_stack( context[15] );
  refalrts::push_stack( context[4] );
  refalrts::push_stack( context[1] );
  refalrts::push_stack( context[9] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = arg_end->next;
  res = refalrts::splice_evar( res, context[10], context[10] );
  res = refalrts::splice_evar( res, context[15], context[15] );
  res = refalrts::splice_evar( res, context[14], context[1] );
  res = refalrts::splice_evar( res, context[9], context[9] );
  res = refalrts::splice_evar( res, context[13], context[13] );
  refalrts::splice_to_freelist_open( context[4], res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_DoPatternSteps0u_cont0("DoPatternSteps0_cont0", 786251477U, 1176157594U, func_DoPatternSteps0u_cont0);

static refalrts::FnResult func_HardItem(refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  refalrts::this_is_generated_function();
  // issue here memory for vars with 31 elems
  refalrts::Iter context[31];
  refalrts::zeros( context, 31 );
  //FAST GEN: ( e.$ ) ( s.$ e.$ )
  //GLOBAL GEN: ( e.$ ) ( s.$ e.$ )
  // </0 & HardItem/4 (/7 e.idxB#0/5 )/8 (/11 s.idxTB#0/13 e.idxTBV#0/9 )/12 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  context[5] = 0;
  context[6] = 0;
  context[7] = refalrts::brackets_left( context[5], context[6], context[2], context[3] );
  if( ! context[7] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[7], context[8]);
  context[9] = 0;
  context[10] = 0;
  context[11] = refalrts::brackets_left( context[9], context[10], context[2], context[3] );
  if( ! context[11] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[11], context[12]);
  if( ! refalrts::empty_seq( context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  // closed e.idxB#0 as range 5
  if( ! refalrts::svar_left( context[13], context[9], context[10] ) )
    return refalrts::cRecognitionImpossible;
  // closed e.idxTBV#0 as range 9
  do {
    // ( e.idx ) ( # Compound e.idx )
    // </0 & HardItem/4 (/7 e.eBoundEVariables#1/5 )/8 (/11 # Compound/13 e.eCompound#1/9 )/12 >/1
    if( ! refalrts::ident_term(  ident_Compound, context[13] ) )
      continue;
    // closed e.eBoundEVariables#1 as range 5
    // closed e.eCompound#1 as range 9
    //DEBUG: e.eBoundEVariables#1: 5
    //DEBUG: e.eCompound#1: 9

    refalrts::reset_allocator();
    //TRASH: {REMOVED TILE} </0 & HardItem/4 (/7 e.eBoundEVariables#1/5 )/8 (/11 # Compound/13 e.eCompound#1/9 )/12 {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ HalfReuse: # True/1 ]] }
    refalrts::reinit_ident( context[1], ident_True );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    refalrts::splice_to_freelist_open( trash_prev, res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence();

  do {
    // ( e.idx ) ( # Number s.idx )
    // </0 & HardItem/4 (/7 e.eBoundEVariables#1/5 )/8 (/11 # Number/13 s.sNumber#1/14 )/12 >/1
    if( ! refalrts::ident_term(  ident_Number, context[13] ) )
      continue;
    // closed e.eBoundEVariables#1 as range 5
    context[25] = context[9];
    context[26] = context[10];
    if( ! refalrts::svar_left( context[14], context[25], context[26] ) )
      continue;
    if( ! refalrts::empty_seq( context[25], context[26] ) )
      continue;
    //DEBUG: e.eBoundEVariables#1: 5
    //DEBUG: s.sNumber#1: 14

    refalrts::reset_allocator();
    //TRASH: {REMOVED TILE} </0 & HardItem/4 (/7 e.eBoundEVariables#1/5 )/8 (/11 # Number/13 s.sNumber#1/14 )/12 {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ HalfReuse: # True/1 ]] }
    refalrts::reinit_ident( context[1], ident_True );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    refalrts::splice_to_freelist_open( trash_prev, res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence();

  do {
    // ( e.idx ) ( # Char s.idx )
    // </0 & HardItem/4 (/7 e.eBoundEVariables#1/5 )/8 (/11 # Char/13 s.sChar#1/14 )/12 >/1
    if( ! refalrts::ident_term(  ident_Char, context[13] ) )
      continue;
    // closed e.eBoundEVariables#1 as range 5
    context[25] = context[9];
    context[26] = context[10];
    if( ! refalrts::svar_left( context[14], context[25], context[26] ) )
      continue;
    if( ! refalrts::empty_seq( context[25], context[26] ) )
      continue;
    //DEBUG: e.eBoundEVariables#1: 5
    //DEBUG: s.sChar#1: 14

    refalrts::reset_allocator();
    //TRASH: {REMOVED TILE} </0 & HardItem/4 (/7 e.eBoundEVariables#1/5 )/8 (/11 # Char/13 s.sChar#1/14 )/12 {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ HalfReuse: # True/1 ]] }
    refalrts::reinit_ident( context[1], ident_True );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    refalrts::splice_to_freelist_open( trash_prev, res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence();

  do {
    // ( e.idx ) ( # Variable t.idx 's' e.idx )
    // </0 & HardItem/4 (/7 e.eBoundEVariables#1/5 )/8 (/11 # Variable/13 t.tSrcPos#1/14 's'/16 e.eIndex#1/9 )/12 >/1
    if( ! refalrts::ident_term(  ident_Variable, context[13] ) )
      continue;
    // closed e.eBoundEVariables#1 as range 5
    context[25] = context[9];
    context[26] = context[10];
    context[15] = refalrts::tvar_left( context[14], context[25], context[26] );
    if( ! context[15] )
      continue;
    context[16] = refalrts::char_left( 's', context[25], context[26] );
    if( ! context[16] )
      continue;
    // closed e.eIndex#1 as range 25(9)
    //DEBUG: e.eBoundEVariables#1: 5
    //DEBUG: t.tSrcPos#1: 14
    //DEBUG: e.eIndex#1: 9

    refalrts::reset_allocator();
    //TRASH: {REMOVED TILE} </0 & HardItem/4 (/7 e.eBoundEVariables#1/5 )/8 (/11 # Variable/13 t.tSrcPos#1/14 's'/16 e.eIndex#1/25(9) )/12 {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ HalfReuse: # True/1 ]] }
    refalrts::reinit_ident( context[1], ident_True );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    refalrts::splice_to_freelist_open( trash_prev, res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence();

  do {
    // ( e.idx ) ( # Variable t.idx 't' e.idx )
    // </0 & HardItem/4 (/7 e.eBoundEVariables#1/5 )/8 (/11 # Variable/13 t.tSrcPos#1/14 't'/16 e.eIndex#1/9 )/12 >/1
    if( ! refalrts::ident_term(  ident_Variable, context[13] ) )
      continue;
    // closed e.eBoundEVariables#1 as range 5
    context[25] = context[9];
    context[26] = context[10];
    context[15] = refalrts::tvar_left( context[14], context[25], context[26] );
    if( ! context[15] )
      continue;
    context[16] = refalrts::char_left( 't', context[25], context[26] );
    if( ! context[16] )
      continue;
    // closed e.eIndex#1 as range 25(9)
    //DEBUG: e.eBoundEVariables#1: 5
    //DEBUG: t.tSrcPos#1: 14
    //DEBUG: e.eIndex#1: 9

    refalrts::reset_allocator();
    //TRASH: {REMOVED TILE} </0 & HardItem/4 (/7 e.eBoundEVariables#1/5 )/8 (/11 # Variable/13 t.tSrcPos#1/14 't'/16 e.eIndex#1/25(9) )/12 {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ HalfReuse: # True/1 ]] }
    refalrts::reinit_ident( context[1], ident_True );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    refalrts::splice_to_freelist_open( trash_prev, res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence();

  do {
    // ( e.idx ) ( # Variable t.idx 'e' e.idx )
    // </0 & HardItem/4 (/7 e.eBoundEVariables-B#1/17 (/21 e.eIndex#1/23 )/22 e.eBoundEVariables-E#1/5 )/8 (/11 # Variable/13 t.tSrcPos#1/14 'e'/16 e.eIndex#1/9 )/12 >/1
    if( ! refalrts::ident_term(  ident_Variable, context[13] ) )
      continue;
    context[25] = context[9];
    context[26] = context[10];
    context[15] = refalrts::tvar_left( context[14], context[25], context[26] );
    if( ! context[15] )
      continue;
    context[16] = refalrts::char_left( 'e', context[25], context[26] );
    if( ! context[16] )
      continue;
    // closed e.eIndex#1 as range 25(9)
    context[27] = context[5];
    context[28] = context[6];
    context[17] = 0;
    context[18] = 0;
    refalrts::start_e_loop();
    do {
      context[29] = context[27];
      context[30] = context[28];
      context[19] = 0;
      context[20] = 0;
      context[21] = refalrts::brackets_left( context[19], context[20], context[29], context[30] );
      if( ! context[21] )
        continue;
      refalrts::bracket_pointers(context[21], context[22]);
      if( ! refalrts::repeated_evar_left( context[23], context[24], context[25], context[26], context[19], context[20] ) )
        continue;
      if( ! refalrts::empty_seq( context[19], context[20] ) )
        continue;
      // closed e.eBoundEVariables-E#1 as range 29(5)
      //DEBUG: t.tSrcPos#1: 14
      //DEBUG: e.eIndex#1: 9
      //DEBUG: e.eBoundEVariables-B#1: 17
      //DEBUG: e.eBoundEVariables-E#1: 5

      refalrts::reset_allocator();
      //TRASH: {REMOVED TILE} </0 & HardItem/4 (/7 e.eBoundEVariables-B#1/17 (/21 e.eIndex#1/23 )/22 e.eBoundEVariables-E#1/29(5) )/8 (/11 # Variable/13 t.tSrcPos#1/14 'e'/16 e.eIndex#1/25(9) )/12 {REMOVED TILE}
      //RESULT: Tile{ [[ } Tile{ HalfReuse: # True/1 ]] }
      refalrts::reinit_ident( context[1], ident_True );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[1];
      refalrts::splice_to_freelist_open( trash_prev, res );
      return refalrts::cSuccess;
    } while ( refalrts::open_evar_advance( context[17], context[18], context[27], context[28] ) );
  } while ( 0 );
  refalrts::stop_sentence();

  do {
    // ( e.idx ) ( # Variable t.idx 'e' e.idx )
    // </0 & HardItem/4 (/7 e.eBoundEVariables#1/5 )/8 (/11 # Variable/13 t.tSrcPos#1/14 'e'/16 e.eIndex#1/9 )/12 >/1
    if( ! refalrts::ident_term(  ident_Variable, context[13] ) )
      continue;
    // closed e.eBoundEVariables#1 as range 5
    context[25] = context[9];
    context[26] = context[10];
    context[15] = refalrts::tvar_left( context[14], context[25], context[26] );
    if( ! context[15] )
      continue;
    context[16] = refalrts::char_left( 'e', context[25], context[26] );
    if( ! context[16] )
      continue;
    // closed e.eIndex#1 as range 25(9)
    //DEBUG: e.eBoundEVariables#1: 5
    //DEBUG: t.tSrcPos#1: 14
    //DEBUG: e.eIndex#1: 9

    refalrts::reset_allocator();
    //TRASH: {REMOVED TILE} </0 & HardItem/4 (/7 e.eBoundEVariables#1/5 )/8 (/11 # Variable/13 t.tSrcPos#1/14 'e'/16 e.eIndex#1/25(9) )/12 {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ HalfReuse: # False/1 ]] }
    refalrts::reinit_ident( context[1], ident_False );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    refalrts::splice_to_freelist_open( trash_prev, res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence();

  // ( e.idx ) ( # Brackets e.idx )
  // </0 & HardItem/4 (/7 e.eBoundEVariables#1/5 )/8 (/11 # Brackets/13 e.ePattern#1/9 )/12 >/1
  if( ! refalrts::ident_term(  ident_Brackets, context[13] ) )
    return refalrts::cRecognitionImpossible;
  // closed e.eBoundEVariables#1 as range 5
  // closed e.ePattern#1 as range 9
  //DEBUG: e.eBoundEVariables#1: 5
  //DEBUG: e.ePattern#1: 9

  refalrts::reset_allocator();
  //TRASH: {REMOVED TILE} </0 & HardItem/4 (/7 e.eBoundEVariables#1/5 )/8 (/11 # Brackets/13 e.ePattern#1/9 )/12 {REMOVED TILE}
  //RESULT: Tile{ [[ } Tile{ HalfReuse: # False/1 ]] }
  refalrts::reinit_ident( context[1], ident_False );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[1];
  refalrts::splice_to_freelist_open( trash_prev, res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_HardItem("HardItem", 786251477U, 1176157594U, func_HardItem);

static refalrts::FnResult func_transformeru_BindBrackets(refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  refalrts::this_is_generated_function();
  // issue here memory for vars with 12 elems
  refalrts::Iter context[12];
  refalrts::zeros( context, 12 );
  // </0 & transformer_BindBrackets/4 (/7 e.eExpr#1/5 )/8 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  context[5] = 0;
  context[6] = 0;
  context[7] = refalrts::brackets_left( context[5], context[6], context[2], context[3] );
  if( ! context[7] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[7], context[8]);
  if( ! refalrts::empty_seq( context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  // closed e.eExpr#1 as range 5
  //DEBUG: e.eExpr#1: 5

  refalrts::reset_allocator();
  //TRASH: {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ } (/9 </10 & DoBindBrackets/11 Tile{ HalfReuse: (/0 HalfReuse: '$'/4 HalfReuse: )/7 AsIs: e.eExpr#1/5 HalfReuse: >/8 HalfReuse: )/1 ]] }
  if( ! refalrts::alloc_open_bracket( context[9] ) )
    return refalrts::cNoMemory;
  if( ! refalrts::alloc_open_call( context[10] ) )
    return refalrts::cNoMemory;
  if( ! refalrts::alloc_name( context[11], ref_DoBindBrackets.ref.function ) )
    return refalrts::cNoMemory;
  refalrts::reinit_open_bracket( context[0] );
  refalrts::reinit_char( context[4], '$' );
  refalrts::reinit_close_bracket( context[7] );
  refalrts::reinit_close_call( context[8] );
  refalrts::reinit_close_bracket( context[1] );
  refalrts::link_brackets( context[9], context[1] );
  refalrts::push_stack( context[8] );
  refalrts::push_stack( context[10] );
  refalrts::link_brackets( context[0], context[7] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[0];
  res = refalrts::splice_evar( res, context[9], context[11] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_transformeru_BindBrackets("transformer_BindBrackets", 786251477U, 1176157594U, func_transformeru_BindBrackets);

static refalrts::FnResult func_DoBindBrackets(refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  refalrts::this_is_generated_function();
  // issue here memory for vars with 22 elems
  refalrts::Iter context[22];
  refalrts::zeros( context, 22 );
  //FAST GEN: e.$
  //GLOBAL GEN: e.$
  // </0 & DoBindBrackets/4 e.idx#0/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.idx#0 as range 2
  do {
    // ( t.idx e.idx ) t.idx e.idx
    // </0 & DoBindBrackets/4 (/7 t.tMultiBracket#1/9 e.eScanned#1/5 )/8 t.tSymbol#1/11 e.eTail#1/2 >/1
    context[20] = context[2];
    context[21] = context[3];
    context[5] = 0;
    context[6] = 0;
    context[7] = refalrts::brackets_left( context[5], context[6], context[20], context[21] );
    if( ! context[7] )
      continue;
    refalrts::bracket_pointers(context[7], context[8]);
    context[10] = refalrts::tvar_left( context[9], context[5], context[6] );
    if( ! context[10] )
      continue;
    // closed e.eScanned#1 as range 5
    context[12] = refalrts::tvar_left( context[11], context[20], context[21] );
    if( ! context[12] )
      continue;
    // closed e.eTail#1 as range 20(2)
    //DEBUG: t.tMultiBracket#1: 9
    //DEBUG: e.eScanned#1: 5
    //DEBUG: t.tSymbol#1: 11
    //DEBUG: e.eTail#1: 2

    refalrts::reset_allocator();
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 Reuse: & DoBindBrackets_check/4 } Tile{ AsIs: t.tMultiBracket#1/9 } Tile{ AsIs: (/7 } Tile{ AsIs: e.eScanned#1/5 } Tile{ AsIs: )/8 AsIs: t.tSymbol#1/11 } (/13 Tile{ AsIs: e.eTail#1/20(2) } )/14 </15 & Symbol/16 t.tSymbol#1/11/17 >/19 Tile{ AsIs: >/1 ]] }
    if( ! refalrts::alloc_open_bracket( context[13] ) )
      return refalrts::cNoMemory;
    if( ! refalrts::alloc_close_bracket( context[14] ) )
      return refalrts::cNoMemory;
    if( ! refalrts::alloc_open_call( context[15] ) )
      return refalrts::cNoMemory;
    if( ! refalrts::alloc_name( context[16], ref_Symbol.ref.function ) )
      return refalrts::cNoMemory;
    if (! refalrts::copy_evar(context[17], context[18], context[11], context[12]))
      return refalrts::cNoMemory;
    if( ! refalrts::alloc_close_call( context[19] ) )
      return refalrts::cNoMemory;
    refalrts::update_name( context[4], ref_DoBindBracketsu_check.ref.function );
    refalrts::push_stack( context[1] );
    refalrts::push_stack( context[0] );
    refalrts::push_stack( context[19] );
    refalrts::push_stack( context[15] );
    refalrts::link_brackets( context[13], context[14] );
    refalrts::link_brackets( context[7], context[8] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    res = refalrts::splice_evar( res, context[14], context[19] );
    res = refalrts::splice_evar( res, context[20], context[21] );
    res = refalrts::splice_evar( res, context[13], context[13] );
    res = refalrts::splice_evar( res, context[8], context[12] );
    res = refalrts::splice_evar( res, context[5], context[6] );
    res = refalrts::splice_evar( res, context[7], context[7] );
    res = refalrts::splice_evar( res, context[9], context[10] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence();

  // e.idx
  // </0 & DoBindBrackets/4 e.eOther#1/2 >/1
  // closed e.eOther#1 as range 2
  //DEBUG: e.eOther#1: 2

  refalrts::reset_allocator();
  //TRASH: {REMOVED TILE}
  //RESULT: Tile{ [[ AsIs: </0 Reuse: & DoBindBrackets_cont/4 AsIs: e.eOther#1/2 AsIs: >/1 ]] }
  refalrts::update_name( context[4], ref_DoBindBracketsu_cont.ref.function );
  refalrts::push_stack( context[1] );
  refalrts::push_stack( context[0] );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_DoBindBrackets("DoBindBrackets", 786251477U, 1176157594U, func_DoBindBrackets);

static refalrts::FnResult func_DoBindBracketsu_check(refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  refalrts::this_is_generated_function();
  // issue here memory for vars with 20 elems
  refalrts::Iter context[20];
  refalrts::zeros( context, 20 );
  //FAST GEN: t.$ ( e.$ ) t.$ ( e.$ ) e.$
  //GLOBAL GEN: t.$ ( e.$ ) t.$ ( e.$ ) e.$
  // </0 & DoBindBrackets_check/4 t.idx#0/5 (/9 e.idxVB#0/7 )/10 t.idxVT#0/11 (/15 e.idxVTVB#0/13 )/16 e.idxVTVT#0/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  context[6] = refalrts::tvar_left( context[5], context[2], context[3] );
  if( ! context[6] )
    return refalrts::cRecognitionImpossible;
  context[7] = 0;
  context[8] = 0;
  context[9] = refalrts::brackets_left( context[7], context[8], context[2], context[3] );
  if( ! context[9] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[9], context[10]);
  // closed e.idxVB#0 as range 7
  context[12] = refalrts::tvar_left( context[11], context[2], context[3] );
  if( ! context[12] )
    return refalrts::cRecognitionImpossible;
  context[13] = 0;
  context[14] = 0;
  context[15] = refalrts::brackets_left( context[13], context[14], context[2], context[3] );
  if( ! context[15] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[15], context[16]);
  // closed e.idxVTVB#0 as range 13
  // closed e.idxVTVT#0 as range 2
  do {
    // t.idx ( e.idx ) t.idx ( e.idx ) # True
    // </0 & DoBindBrackets_check/4 t.tMultiBracket#1/5 (/9 e.eScanned#1/7 )/10 t.tSymbol#1/11 (/15 e.eTail#1/13 )/16 # True/17 >/1
    context[18] = context[2];
    context[19] = context[3];
    context[17] = refalrts::ident_left(  ident_True, context[18], context[19] );
    if( ! context[17] )
      continue;
    if( ! refalrts::empty_seq( context[18], context[19] ) )
      continue;
    // closed e.eScanned#1 as range 7
    // closed e.eTail#1 as range 13
    //DEBUG: t.tMultiBracket#1: 5
    //DEBUG: t.tSymbol#1: 11
    //DEBUG: e.eScanned#1: 7
    //DEBUG: e.eTail#1: 13

    refalrts::reset_allocator();
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} )/10 {REMOVED TILE} # True/17 >/1 {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 Reuse: & DoBindBrackets/4 } Tile{ AsIs: (/9 } Tile{ AsIs: t.tMultiBracket#1/5 } Tile{ AsIs: e.eScanned#1/7 } Tile{ AsIs: t.tSymbol#1/11 HalfReuse: )/15 AsIs: e.eTail#1/13 HalfReuse: >/16 } Tile{ ]] }
    refalrts::update_name( context[4], ref_DoBindBrackets.ref.function );
    refalrts::reinit_close_bracket( context[15] );
    refalrts::reinit_close_call( context[16] );
    refalrts::push_stack( context[16] );
    refalrts::push_stack( context[0] );
    refalrts::link_brackets( context[9], context[15] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = arg_end->next;
    res = refalrts::splice_evar( res, context[11], context[16] );
    res = refalrts::splice_evar( res, context[7], context[8] );
    res = refalrts::splice_evar( res, context[5], context[6] );
    res = refalrts::splice_evar( res, context[9], context[9] );
    refalrts::splice_to_freelist_open( context[4], res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence();

  // t.idx ( e.idx ) t.idx ( e.idx ) e.idx
  // </0 & DoBindBrackets_check/4 t.tMultiBracket#1/5 (/9 e.eScanned#1/7 )/10 t.tSymbol#1/11 (/15 e.eTail#1/13 )/16 e.eOther#1/2 >/1
  // closed e.eScanned#1 as range 7
  // closed e.eTail#1 as range 13
  // closed e.eOther#1 as range 2
  //DEBUG: t.tMultiBracket#1: 5
  //DEBUG: t.tSymbol#1: 11
  //DEBUG: e.eScanned#1: 7
  //DEBUG: e.eTail#1: 13
  //DEBUG: e.eOther#1: 2

  refalrts::reset_allocator();
  //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} (/15 {REMOVED TILE} )/16 e.eOther#1/2 {REMOVED TILE}
  //RESULT: Tile{ [[ AsIs: </0 Reuse: & DoBindBrackets_cont/4 } Tile{ AsIs: (/9 } Tile{ AsIs: t.tMultiBracket#1/5 } Tile{ AsIs: e.eScanned#1/7 } Tile{ AsIs: )/10 AsIs: t.tSymbol#1/11 } Tile{ AsIs: e.eTail#1/13 } Tile{ AsIs: >/1 ]] }
  refalrts::update_name( context[4], ref_DoBindBracketsu_cont.ref.function );
  refalrts::push_stack( context[1] );
  refalrts::push_stack( context[0] );
  refalrts::link_brackets( context[9], context[10] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[1];
  res = refalrts::splice_evar( res, context[13], context[14] );
  res = refalrts::splice_evar( res, context[10], context[12] );
  res = refalrts::splice_evar( res, context[7], context[8] );
  res = refalrts::splice_evar( res, context[5], context[6] );
  res = refalrts::splice_evar( res, context[9], context[9] );
  refalrts::splice_to_freelist_open( context[4], res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_DoBindBracketsu_check("DoBindBrackets_check", 786251477U, 1176157594U, func_DoBindBracketsu_check);

static refalrts::FnResult func_DoBindBracketsu_cont(refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  refalrts::this_is_generated_function();
  // issue here memory for vars with 24 elems
  refalrts::Iter context[24];
  refalrts::zeros( context, 24 );
  //FAST GEN: e.$
  //GLOBAL GEN: ( t.$ e.$ ) e.$
  // </0 & DoBindBrackets_cont/4 (/7 t.idxB#0/9 e.idxBV#0/5 )/8 e.idxT#0/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  context[5] = 0;
  context[6] = 0;
  context[7] = refalrts::brackets_left( context[5], context[6], context[2], context[3] );
  if( ! context[7] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[7], context[8]);
  // closed e.idxT#0 as range 2
  context[10] = refalrts::tvar_left( context[9], context[5], context[6] );
  if( ! context[10] )
    return refalrts::cRecognitionImpossible;
  // closed e.idxBV#0 as range 5
  do {
    // ( t.idx e.idx ) ( # Variable t.idx s.idx e.idx ) e.idx
    // </0 & DoBindBrackets_cont/4 (/7 t.tMultiBracket#1/9 e.eScanned#1/5 )/8 (/13 # Variable/15 t.tSrcPos#1/16 s.sType#1/18 e.eIndex#1/11 )/14 e.eTail#1/2 >/1
    context[22] = context[2];
    context[23] = context[3];
    context[11] = 0;
    context[12] = 0;
    context[13] = refalrts::brackets_left( context[11], context[12], context[22], context[23] );
    if( ! context[13] )
      continue;
    refalrts::bracket_pointers(context[13], context[14]);
    context[15] = refalrts::ident_left(  ident_Variable, context[11], context[12] );
    if( ! context[15] )
      continue;
    // closed e.eScanned#1 as range 5
    // closed e.eTail#1 as range 22(2)
    context[17] = refalrts::tvar_left( context[16], context[11], context[12] );
    if( ! context[17] )
      continue;
    if( ! refalrts::svar_left( context[18], context[11], context[12] ) )
      continue;
    // closed e.eIndex#1 as range 11
    //DEBUG: t.tMultiBracket#1: 9
    //DEBUG: e.eScanned#1: 5
    //DEBUG: e.eTail#1: 2
    //DEBUG: t.tSrcPos#1: 16
    //DEBUG: s.sType#1: 18
    //DEBUG: e.eIndex#1: 11

    refalrts::reset_allocator();
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 Reuse: & DoBindBrackets/4 AsIs: (/7 AsIs: t.tMultiBracket#1/9 AsIs: e.eScanned#1/5 HalfReuse: (/8 HalfReuse: # Variable/13 } Tile{ AsIs: t.tSrcPos#1/16 AsIs: s.sType#1/18 AsIs: e.eIndex#1/11 AsIs: )/14 } Tile{ HalfReuse: )/15 } Tile{ AsIs: e.eTail#1/22(2) } Tile{ AsIs: >/1 ]] }
    refalrts::update_name( context[4], ref_DoBindBrackets.ref.function );
    refalrts::reinit_open_bracket( context[8] );
    refalrts::reinit_ident( context[13], ident_Variable );
    refalrts::reinit_close_bracket( context[15] );
    refalrts::push_stack( context[1] );
    refalrts::push_stack( context[0] );
    refalrts::link_brackets( context[7], context[15] );
    refalrts::link_brackets( context[8], context[14] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    res = refalrts::splice_evar( res, context[22], context[23] );
    res = refalrts::splice_evar( res, context[15], context[15] );
    res = refalrts::splice_evar( res, context[16], context[14] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence();

  do {
    // ( t.idx e.idx ) ( # OpenE t.idx s.idx e.idx ) e.idx
    // </0 & DoBindBrackets_cont/4 (/7 t.tMultiBracket#1/9 e.eScanned#1/5 )/8 (/13 # OpenE/15 t.tSrcPos#1/16 s.sType#1/18 e.eIndex#1/11 )/14 e.eTail#1/2 >/1
    context[22] = context[2];
    context[23] = context[3];
    context[11] = 0;
    context[12] = 0;
    context[13] = refalrts::brackets_left( context[11], context[12], context[22], context[23] );
    if( ! context[13] )
      continue;
    refalrts::bracket_pointers(context[13], context[14]);
    context[15] = refalrts::ident_left(  ident_OpenE, context[11], context[12] );
    if( ! context[15] )
      continue;
    // closed e.eScanned#1 as range 5
    // closed e.eTail#1 as range 22(2)
    context[17] = refalrts::tvar_left( context[16], context[11], context[12] );
    if( ! context[17] )
      continue;
    if( ! refalrts::svar_left( context[18], context[11], context[12] ) )
      continue;
    // closed e.eIndex#1 as range 11
    //DEBUG: t.tMultiBracket#1: 9
    //DEBUG: e.eScanned#1: 5
    //DEBUG: e.eTail#1: 2
    //DEBUG: t.tSrcPos#1: 16
    //DEBUG: s.sType#1: 18
    //DEBUG: e.eIndex#1: 11

    refalrts::reset_allocator();
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 Reuse: & DoBindBrackets/4 AsIs: (/7 AsIs: t.tMultiBracket#1/9 AsIs: e.eScanned#1/5 HalfReuse: (/8 HalfReuse: # Brackets/13 HalfReuse: (/15 } # Variable/19 Tile{ AsIs: t.tSrcPos#1/16 AsIs: s.sType#1/18 AsIs: e.eIndex#1/11 AsIs: )/14 } )/20 )/21 Tile{ AsIs: e.eTail#1/22(2) } Tile{ AsIs: >/1 ]] }
    if( ! refalrts::alloc_ident( context[19], ident_Variable ) )
      return refalrts::cNoMemory;
    if( ! refalrts::alloc_close_bracket( context[20] ) )
      return refalrts::cNoMemory;
    if( ! refalrts::alloc_close_bracket( context[21] ) )
      return refalrts::cNoMemory;
    refalrts::update_name( context[4], ref_DoBindBrackets.ref.function );
    refalrts::reinit_open_bracket( context[8] );
    refalrts::reinit_ident( context[13], ident_Brackets );
    refalrts::reinit_open_bracket( context[15] );
    refalrts::push_stack( context[1] );
    refalrts::push_stack( context[0] );
    refalrts::link_brackets( context[7], context[21] );
    refalrts::link_brackets( context[8], context[20] );
    refalrts::link_brackets( context[15], context[14] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    res = refalrts::splice_evar( res, context[22], context[23] );
    res = refalrts::splice_evar( res, context[20], context[21] );
    res = refalrts::splice_evar( res, context[16], context[14] );
    res = refalrts::splice_evar( res, context[19], context[19] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence();

  do {
    // ( t.idx e.idx ) ( # Brackets e.idx ) e.idx
    // </0 & DoBindBrackets_cont/4 (/7 t.tMultiBracket#1/9 e.eScanned#1/5 )/8 (/13 # Brackets/15 e.eInBrackets#1/11 )/14 e.eTail#1/2 >/1
    context[22] = context[2];
    context[23] = context[3];
    context[11] = 0;
    context[12] = 0;
    context[13] = refalrts::brackets_left( context[11], context[12], context[22], context[23] );
    if( ! context[13] )
      continue;
    refalrts::bracket_pointers(context[13], context[14]);
    context[15] = refalrts::ident_left(  ident_Brackets, context[11], context[12] );
    if( ! context[15] )
      continue;
    // closed e.eScanned#1 as range 5
    // closed e.eInBrackets#1 as range 11
    // closed e.eTail#1 as range 22(2)
    //DEBUG: t.tMultiBracket#1: 9
    //DEBUG: e.eScanned#1: 5
    //DEBUG: e.eInBrackets#1: 11
    //DEBUG: e.eTail#1: 2

    refalrts::reset_allocator();
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 Reuse: & DoBindBrackets/4 AsIs: (/7 AsIs: t.tMultiBracket#1/9 AsIs: e.eScanned#1/5 HalfReuse: (/8 HalfReuse: # Brackets/13 } Tile{ AsIs: e.eInBrackets#1/11 } Tile{ HalfReuse: )/15 } Tile{ AsIs: )/14 AsIs: e.eTail#1/22(2) AsIs: >/1 ]] }
    refalrts::update_name( context[4], ref_DoBindBrackets.ref.function );
    refalrts::reinit_open_bracket( context[8] );
    refalrts::reinit_ident( context[13], ident_Brackets );
    refalrts::reinit_close_bracket( context[15] );
    refalrts::push_stack( context[1] );
    refalrts::push_stack( context[0] );
    refalrts::link_brackets( context[7], context[14] );
    refalrts::link_brackets( context[8], context[15] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[14];
    res = refalrts::splice_evar( res, context[15], context[15] );
    res = refalrts::splice_evar( res, context[11], context[12] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence();

  do {
    // ( t.idx e.idx ) ( # LeftBracket ) e.idx
    // </0 & DoBindBrackets_cont/4 (/7 t.tMultiBracket#1/9 e.eScanned#1/5 )/8 (/13 # LeftBracket/15 )/14 e.eTail#1/2 >/1
    context[22] = context[2];
    context[23] = context[3];
    context[11] = 0;
    context[12] = 0;
    context[13] = refalrts::brackets_left( context[11], context[12], context[22], context[23] );
    if( ! context[13] )
      continue;
    refalrts::bracket_pointers(context[13], context[14]);
    context[15] = refalrts::ident_left(  ident_LeftBracket, context[11], context[12] );
    if( ! context[15] )
      continue;
    if( ! refalrts::empty_seq( context[11], context[12] ) )
      continue;
    // closed e.eScanned#1 as range 5
    // closed e.eTail#1 as range 22(2)
    //DEBUG: t.tMultiBracket#1: 9
    //DEBUG: e.eScanned#1: 5
    //DEBUG: e.eTail#1: 2

    refalrts::reset_allocator();
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} )/14 {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ HalfReuse: </15 } Tile{ HalfReuse: & DoBindBrackets/0 HalfReuse: (/4 AsIs: (/7 AsIs: t.tMultiBracket#1/9 AsIs: e.eScanned#1/5 AsIs: )/8 HalfReuse: )/13 } Tile{ AsIs: e.eTail#1/22(2) } Tile{ AsIs: >/1 ]] }
    refalrts::reinit_open_call( context[15] );
    refalrts::reinit_name( context[0], ref_DoBindBrackets.ref.function );
    refalrts::reinit_open_bracket( context[4] );
    refalrts::reinit_close_bracket( context[13] );
    refalrts::push_stack( context[1] );
    refalrts::push_stack( context[15] );
    refalrts::link_brackets( context[4], context[13] );
    refalrts::link_brackets( context[7], context[8] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    res = refalrts::splice_evar( res, context[22], context[23] );
    res = refalrts::splice_evar( res, context[0], context[13] );
    res = refalrts::splice_evar( res, context[15], context[15] );
    refalrts::splice_to_freelist_open( trash_prev, res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence();

  do {
    // ( ( t.idx e.idx ) e.idx ) ( # RightBracket ) e.idx
    // </0 & DoBindBrackets_cont/4 (/7 (/9 t.tMultiBracket#1/18 e.eScanned#1/11 )/10 e.eInBrackets#1/5 )/8 (/15 # RightBracket/17 )/16 e.eTail#1/2 >/1
    context[11] = 0;
    context[12] = 0;
    if( ! refalrts::brackets_term( context[11], context[12], context[9] ) )
      continue;
    context[22] = context[2];
    context[23] = context[3];
    context[13] = 0;
    context[14] = 0;
    context[15] = refalrts::brackets_left( context[13], context[14], context[22], context[23] );
    if( ! context[15] )
      continue;
    refalrts::bracket_pointers(context[15], context[16]);
    context[17] = refalrts::ident_left(  ident_RightBracket, context[13], context[14] );
    if( ! context[17] )
      continue;
    if( ! refalrts::empty_seq( context[13], context[14] ) )
      continue;
    // closed e.eInBrackets#1 as range 5
    // closed e.eTail#1 as range 22(2)
    context[19] = refalrts::tvar_left( context[18], context[11], context[12] );
    if( ! context[19] )
      continue;
    // closed e.eScanned#1 as range 11
    //DEBUG: e.eInBrackets#1: 5
    //DEBUG: e.eTail#1: 2
    //DEBUG: t.tMultiBracket#1: 18
    //DEBUG: e.eScanned#1: 11

    refalrts::reset_allocator();
    //TRASH: {REMOVED TILE} </0 {REMOVED TILE} {REMOVED TILE} )/8 {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ HalfReuse: </4 HalfReuse: & DoBindBrackets/7 AsIs: (/9 AsIs: t.tMultiBracket#1/18 AsIs: e.eScanned#1/11 HalfReuse: (/10 } Tile{ HalfReuse: # Brackets/15 } Tile{ AsIs: e.eInBrackets#1/5 } Tile{ HalfReuse: )/17 AsIs: )/16 AsIs: e.eTail#1/22(2) AsIs: >/1 ]] }
    refalrts::reinit_open_call( context[4] );
    refalrts::reinit_name( context[7], ref_DoBindBrackets.ref.function );
    refalrts::reinit_open_bracket( context[10] );
    refalrts::reinit_ident( context[15], ident_Brackets );
    refalrts::reinit_close_bracket( context[17] );
    refalrts::push_stack( context[1] );
    refalrts::push_stack( context[4] );
    refalrts::link_brackets( context[9], context[16] );
    refalrts::link_brackets( context[10], context[17] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[17];
    res = refalrts::splice_evar( res, context[5], context[6] );
    res = refalrts::splice_evar( res, context[15], context[15] );
    res = refalrts::splice_evar( res, context[4], context[10] );
    refalrts::splice_to_freelist_open( trash_prev, res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence();

  // ( '$' e.idx )
  // </0 & DoBindBrackets_cont/4 (/7 '$'/9 e.eScanned#1/5 )/8 >/1
  if( ! refalrts::char_term( '$', context[9] ) )
    return refalrts::cRecognitionImpossible;
  if( ! refalrts::empty_seq( context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  // closed e.eScanned#1 as range 5
  //DEBUG: e.eScanned#1: 5

  refalrts::reset_allocator();
  //TRASH: {REMOVED TILE} </0 & DoBindBrackets_cont/4 (/7 '$'/9 {REMOVED TILE} )/8 >/1 {REMOVED TILE}
  //RESULT: Tile{ [[ } Tile{ AsIs: e.eScanned#1/5 } Tile{ ]] }
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = arg_end->next;
  res = refalrts::splice_evar( res, context[5], context[6] );
  refalrts::splice_to_freelist_open( trash_prev, res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_DoBindBracketsu_cont("DoBindBrackets_cont", 786251477U, 1176157594U, func_DoBindBracketsu_cont);

static refalrts::FnResult func_T1(refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  refalrts::this_is_generated_function();
  // issue here memory for vars with 35 elems
  refalrts::Iter context[35];
  refalrts::zeros( context, 35 );
  // </0 & T1/4 t.tUsedVars#1/5 e.eItems#1/7 (/11 # HOLE/13 (/16 # Variable/18 t.tSrcPos#1/19 'e'/21 e.eIndex#1/14 )/17 e.ePattern#1/9 )/12 e.eItemsAndHoles#1/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  context[6] = refalrts::tvar_left( context[5], context[2], context[3] );
  if( ! context[6] )
    return refalrts::cRecognitionImpossible;
  context[7] = 0;
  context[8] = 0;
  refalrts::start_e_loop();
  do {
    context[33] = context[2];
    context[34] = context[3];
    context[9] = 0;
    context[10] = 0;
    context[11] = refalrts::brackets_left( context[9], context[10], context[33], context[34] );
    if( ! context[11] )
      continue;
    refalrts::bracket_pointers(context[11], context[12]);
    context[13] = refalrts::ident_left(  ident_HOLE, context[9], context[10] );
    if( ! context[13] )
      continue;
    context[14] = 0;
    context[15] = 0;
    context[16] = refalrts::brackets_left( context[14], context[15], context[9], context[10] );
    if( ! context[16] )
      continue;
    refalrts::bracket_pointers(context[16], context[17]);
    context[18] = refalrts::ident_left(  ident_Variable, context[14], context[15] );
    if( ! context[18] )
      continue;
    // closed e.ePattern#1 as range 9
    // closed e.eItemsAndHoles#1 as range 33(2)
    context[20] = refalrts::tvar_left( context[19], context[14], context[15] );
    if( ! context[20] )
      continue;
    context[21] = refalrts::char_left( 'e', context[14], context[15] );
    if( ! context[21] )
      continue;
    // closed e.eIndex#1 as range 14
    //DEBUG: t.tUsedVars#1: 5
    //DEBUG: e.eItems#1: 7
    //DEBUG: e.ePattern#1: 9
    //DEBUG: e.eItemsAndHoles#1: 2
    //DEBUG: t.tSrcPos#1: 19
    //DEBUG: e.eIndex#1: 14

    refalrts::reset_allocator();
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 Reuse: & T1_check/4 AsIs: t.tUsedVars#1/5 } Tile{ AsIs: (/11 } Tile{ AsIs: e.eItems#1/7 } Tile{ HalfReuse: )/18 AsIs: t.tSrcPos#1/19 HalfReuse: (/21 AsIs: e.eIndex#1/14 AsIs: )/17 } (/22 Tile{ AsIs: e.ePattern#1/9 } Tile{ HalfReuse: )/13 AsIs: (/16 } Tile{ AsIs: e.eItemsAndHoles#1/33(2) } Tile{ AsIs: )/12 } </23 & NewName/24 t.tUsedVars#1/5/25 'e'/27 e.eIndex#1/14/28"_fix"/30 >/32 Tile{ AsIs: >/1 ]] }
    if( ! refalrts::alloc_open_bracket( context[22] ) )
      return refalrts::cNoMemory;
    if( ! refalrts::alloc_open_call( context[23] ) )
      return refalrts::cNoMemory;
    if( ! refalrts::alloc_name( context[24], ref_NewName.ref.function ) )
      return refalrts::cNoMemory;
    if (! refalrts::copy_evar(context[25], context[26], context[5], context[6]))
      return refalrts::cNoMemory;
    if( ! refalrts::alloc_char( context[27], 'e' ) )
      return refalrts::cNoMemory;
    if (! refalrts::copy_evar(context[28], context[29], context[14], context[15]))
      return refalrts::cNoMemory;
    if( ! refalrts::alloc_chars( context[30], context[31], "_fix", 4 ) )
      return refalrts::cNoMemory;
    if( ! refalrts::alloc_close_call( context[32] ) )
      return refalrts::cNoMemory;
    refalrts::update_name( context[4], ref_T1u_check.ref.function );
    refalrts::reinit_close_bracket( context[18] );
    refalrts::reinit_open_bracket( context[21] );
    refalrts::reinit_close_bracket( context[13] );
    refalrts::push_stack( context[1] );
    refalrts::push_stack( context[0] );
    refalrts::push_stack( context[32] );
    refalrts::push_stack( context[23] );
    refalrts::link_brackets( context[16], context[12] );
    refalrts::link_brackets( context[22], context[13] );
    refalrts::link_brackets( context[21], context[17] );
    refalrts::link_brackets( context[11], context[18] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    res = refalrts::splice_evar( res, context[23], context[32] );
    res = refalrts::splice_evar( res, context[12], context[12] );
    res = refalrts::splice_evar( res, context[33], context[34] );
    res = refalrts::splice_evar( res, context[13], context[16] );
    res = refalrts::splice_evar( res, context[9], context[10] );
    res = refalrts::splice_evar( res, context[22], context[22] );
    res = refalrts::splice_evar( res, context[18], context[17] );
    res = refalrts::splice_evar( res, context[7], context[8] );
    res = refalrts::splice_evar( res, context[11], context[11] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( refalrts::open_evar_advance( context[7], context[8], context[2], context[3] ) );
  return refalrts::cRecognitionImpossible;
}

static refalrts::NativeReference nat_ref_T1("T1", 786251477U, 1176157594U, func_T1);

static refalrts::FnResult func_T1u_check(refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  refalrts::this_is_generated_function();
  // issue here memory for vars with 41 elems
  refalrts::Iter context[41];
  refalrts::zeros( context, 41 );
  //FAST GEN: e.$
  //GLOBAL GEN: e.$
  // </0 & T1_check/4 e.idx#0/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.idx#0 as range 2
  do {
    // t.idx ( e.idx ) t.idx ( e.idx ) ( e.idx ) ( e.idx ) t.idx e.idx
    // </0 & T1_check/4 t.tUsedVars#1/5 (/9 e.eItems#1/7 )/10 t.tSrcPos#1/11 (/15 e.eIndex#1/13 )/16 (/19 e.ePattern#1/17 )/20 (/23 e.eItemsAndHoles#1/21 )/24 t.tUsedVars1#1/25 e.eeX_fix#1/2 >/1
    context[39] = context[2];
    context[40] = context[3];
    context[6] = refalrts::tvar_left( context[5], context[39], context[40] );
    if( ! context[6] )
      continue;
    context[7] = 0;
    context[8] = 0;
    context[9] = refalrts::brackets_left( context[7], context[8], context[39], context[40] );
    if( ! context[9] )
      continue;
    refalrts::bracket_pointers(context[9], context[10]);
    // closed e.eItems#1 as range 7
    context[12] = refalrts::tvar_left( context[11], context[39], context[40] );
    if( ! context[12] )
      continue;
    context[13] = 0;
    context[14] = 0;
    context[15] = refalrts::brackets_left( context[13], context[14], context[39], context[40] );
    if( ! context[15] )
      continue;
    refalrts::bracket_pointers(context[15], context[16]);
    context[17] = 0;
    context[18] = 0;
    context[19] = refalrts::brackets_left( context[17], context[18], context[39], context[40] );
    if( ! context[19] )
      continue;
    refalrts::bracket_pointers(context[19], context[20]);
    context[21] = 0;
    context[22] = 0;
    context[23] = refalrts::brackets_left( context[21], context[22], context[39], context[40] );
    if( ! context[23] )
      continue;
    refalrts::bracket_pointers(context[23], context[24]);
    // closed e.eIndex#1 as range 13
    // closed e.ePattern#1 as range 17
    // closed e.eItemsAndHoles#1 as range 21
    context[26] = refalrts::tvar_left( context[25], context[39], context[40] );
    if( ! context[26] )
      continue;
    // closed e.eeX_fix#1 as range 39(2)
    //DEBUG: t.tUsedVars#1: 5
    //DEBUG: e.eItems#1: 7
    //DEBUG: t.tSrcPos#1: 11
    //DEBUG: e.eIndex#1: 13
    //DEBUG: e.ePattern#1: 17
    //DEBUG: e.eItemsAndHoles#1: 21
    //DEBUG: t.tUsedVars1#1: 25
    //DEBUG: e.eeX_fix#1: 2

    refalrts::reset_allocator();
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 Reuse: & T1_check0/4 AsIs: t.tUsedVars#1/5 AsIs: (/9 AsIs: e.eItems#1/7 AsIs: )/10 AsIs: t.tSrcPos#1/11 AsIs: (/15 AsIs: e.eIndex#1/13 AsIs: )/16 AsIs: (/19 AsIs: e.ePattern#1/17 AsIs: )/20 AsIs: (/23 AsIs: e.eItemsAndHoles#1/21 AsIs: )/24 AsIs: t.tUsedVars1#1/25 } (/27 Tile{ AsIs: e.eeX_fix#1/39(2) } )/28 </29 & NewName/30 t.tUsedVars1#1/25/31 't'/33 e.eIndex#1/13/34"_next"/36 >/38 Tile{ AsIs: >/1 ]] }
    if( ! refalrts::alloc_open_bracket( context[27] ) )
      return refalrts::cNoMemory;
    if( ! refalrts::alloc_close_bracket( context[28] ) )
      return refalrts::cNoMemory;
    if( ! refalrts::alloc_open_call( context[29] ) )
      return refalrts::cNoMemory;
    if( ! refalrts::alloc_name( context[30], ref_NewName.ref.function ) )
      return refalrts::cNoMemory;
    if (! refalrts::copy_evar(context[31], context[32], context[25], context[26]))
      return refalrts::cNoMemory;
    if( ! refalrts::alloc_char( context[33], 't' ) )
      return refalrts::cNoMemory;
    if (! refalrts::copy_evar(context[34], context[35], context[13], context[14]))
      return refalrts::cNoMemory;
    if( ! refalrts::alloc_chars( context[36], context[37], "_next", 5 ) )
      return refalrts::cNoMemory;
    if( ! refalrts::alloc_close_call( context[38] ) )
      return refalrts::cNoMemory;
    refalrts::update_name( context[4], ref_T1u_check0.ref.function );
    refalrts::push_stack( context[1] );
    refalrts::push_stack( context[0] );
    refalrts::push_stack( context[38] );
    refalrts::push_stack( context[29] );
    refalrts::link_brackets( context[27], context[28] );
    refalrts::link_brackets( context[23], context[24] );
    refalrts::link_brackets( context[19], context[20] );
    refalrts::link_brackets( context[15], context[16] );
    refalrts::link_brackets( context[9], context[10] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    res = refalrts::splice_evar( res, context[28], context[38] );
    res = refalrts::splice_evar( res, context[39], context[40] );
    res = refalrts::splice_evar( res, context[27], context[27] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence();

  // e.idx
  // </0 & T1_check/4 e.eOther#1/2 >/1
  // closed e.eOther#1 as range 2
  //DEBUG: e.eOther#1: 2

  refalrts::reset_allocator();
  //TRASH: {REMOVED TILE}
  //RESULT: Tile{ [[ AsIs: </0 Reuse: & T1_cont/4 AsIs: e.eOther#1/2 AsIs: >/1 ]] }
  refalrts::update_name( context[4], ref_T1u_cont.ref.function );
  refalrts::push_stack( context[1] );
  refalrts::push_stack( context[0] );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_T1u_check("T1_check", 786251477U, 1176157594U, func_T1u_check);

static refalrts::FnResult func_T1u_forward(refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  refalrts::this_is_generated_function();
  // issue here memory for vars with 13 elems
  refalrts::Iter context[13];
  refalrts::zeros( context, 13 );
  // </0 & T1_forward/4 t.tUsedVars#1/5 (/9 e.eItems_fix#1/7 )/10 t.tItems_next#1/11 e.eItems_rest#1/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  context[6] = refalrts::tvar_left( context[5], context[2], context[3] );
  if( ! context[6] )
    return refalrts::cRecognitionImpossible;
  context[7] = 0;
  context[8] = 0;
  context[9] = refalrts::brackets_left( context[7], context[8], context[2], context[3] );
  if( ! context[9] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[9], context[10]);
  // closed e.eItems_fix#1 as range 7
  context[12] = refalrts::tvar_left( context[11], context[2], context[3] );
  if( ! context[12] )
    return refalrts::cRecognitionImpossible;
  // closed e.eItems_rest#1 as range 2
  //DEBUG: t.tUsedVars#1: 5
  //DEBUG: e.eItems_fix#1: 7
  //DEBUG: t.tItems_next#1: 11
  //DEBUG: e.eItems_rest#1: 2

  refalrts::reset_allocator();
  //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ AsIs: </0 Reuse: & T1_next/4 AsIs: t.tUsedVars#1/5 AsIs: (/9 } Tile{ AsIs: e.eItems_fix#1/7 } Tile{ AsIs: t.tItems_next#1/11 } Tile{ AsIs: )/10 } Tile{ AsIs: e.eItems_rest#1/2 } Tile{ AsIs: >/1 ]] }
  refalrts::update_name( context[4], ref_T1u_next.ref.function );
  refalrts::push_stack( context[1] );
  refalrts::push_stack( context[0] );
  refalrts::link_brackets( context[9], context[10] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[1];
  res = refalrts::splice_evar( res, context[2], context[3] );
  res = refalrts::splice_evar( res, context[10], context[10] );
  res = refalrts::splice_evar( res, context[11], context[12] );
  res = refalrts::splice_evar( res, context[7], context[8] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_T1u_forward("T1_forward", 786251477U, 1176157594U, func_T1u_forward);

static refalrts::FnResult func_T1u_next(refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  refalrts::this_is_generated_function();
  // issue here memory for vars with 37 elems
  refalrts::Iter context[37];
  refalrts::zeros( context, 37 );
  // </0 & T1_next/4 t.tUsedVars#1/5 (/9 e.eItems_fix#1/7 )/10 e.eItems_var#1/11 (/15 # HOLE/17 (/20 # Variable/22 t.tSrcPos#1/23 'e'/25 e.eIndex#1/18 )/21 e.ePattern#1/13 )/16 e.eItemsAndHoles#1/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  context[6] = refalrts::tvar_left( context[5], context[2], context[3] );
  if( ! context[6] )
    return refalrts::cRecognitionImpossible;
  context[7] = 0;
  context[8] = 0;
  context[9] = refalrts::brackets_left( context[7], context[8], context[2], context[3] );
  if( ! context[9] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[9], context[10]);
  // closed e.eItems_fix#1 as range 7
  context[11] = 0;
  context[12] = 0;
  refalrts::start_e_loop();
  do {
    context[35] = context[2];
    context[36] = context[3];
    context[13] = 0;
    context[14] = 0;
    context[15] = refalrts::brackets_left( context[13], context[14], context[35], context[36] );
    if( ! context[15] )
      continue;
    refalrts::bracket_pointers(context[15], context[16]);
    context[17] = refalrts::ident_left(  ident_HOLE, context[13], context[14] );
    if( ! context[17] )
      continue;
    context[18] = 0;
    context[19] = 0;
    context[20] = refalrts::brackets_left( context[18], context[19], context[13], context[14] );
    if( ! context[20] )
      continue;
    refalrts::bracket_pointers(context[20], context[21]);
    context[22] = refalrts::ident_left(  ident_Variable, context[18], context[19] );
    if( ! context[22] )
      continue;
    // closed e.ePattern#1 as range 13
    // closed e.eItemsAndHoles#1 as range 35(2)
    context[24] = refalrts::tvar_left( context[23], context[18], context[19] );
    if( ! context[24] )
      continue;
    context[25] = refalrts::char_left( 'e', context[18], context[19] );
    if( ! context[25] )
      continue;
    // closed e.eIndex#1 as range 18
    //DEBUG: t.tUsedVars#1: 5
    //DEBUG: e.eItems_fix#1: 7
    //DEBUG: e.eItems_var#1: 11
    //DEBUG: e.ePattern#1: 13
    //DEBUG: e.eItemsAndHoles#1: 2
    //DEBUG: t.tSrcPos#1: 23
    //DEBUG: e.eIndex#1: 18

    refalrts::reset_allocator();
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 Reuse: & T1_check/4 AsIs: t.tUsedVars#1/5 AsIs: (/9 } Tile{ AsIs: e.eItems_fix#1/7 } Tile{ AsIs: e.eItems_var#1/11 } Tile{ HalfReuse: )/22 AsIs: t.tSrcPos#1/23 HalfReuse: (/25 AsIs: e.eIndex#1/18 AsIs: )/21 } Tile{ AsIs: (/15 } Tile{ AsIs: e.ePattern#1/13 } Tile{ HalfReuse: )/17 AsIs: (/20 } Tile{ AsIs: e.eItemsAndHoles#1/35(2) } Tile{ AsIs: )/16 } Tile{ HalfReuse: </10 } & NewName/26 t.tUsedVars#1/5/27 'e'/29 e.eIndex#1/18/30"_fix"/32 >/34 Tile{ AsIs: >/1 ]] }
    if( ! refalrts::alloc_name( context[26], ref_NewName.ref.function ) )
      return refalrts::cNoMemory;
    if (! refalrts::copy_evar(context[27], context[28], context[5], context[6]))
      return refalrts::cNoMemory;
    if( ! refalrts::alloc_char( context[29], 'e' ) )
      return refalrts::cNoMemory;
    if (! refalrts::copy_evar(context[30], context[31], context[18], context[19]))
      return refalrts::cNoMemory;
    if( ! refalrts::alloc_chars( context[32], context[33], "_fix", 4 ) )
      return refalrts::cNoMemory;
    if( ! refalrts::alloc_close_call( context[34] ) )
      return refalrts::cNoMemory;
    refalrts::update_name( context[4], ref_T1u_check.ref.function );
    refalrts::reinit_close_bracket( context[22] );
    refalrts::reinit_open_bracket( context[25] );
    refalrts::reinit_close_bracket( context[17] );
    refalrts::reinit_open_call( context[10] );
    refalrts::push_stack( context[1] );
    refalrts::push_stack( context[0] );
    refalrts::push_stack( context[34] );
    refalrts::push_stack( context[10] );
    refalrts::link_brackets( context[20], context[16] );
    refalrts::link_brackets( context[15], context[17] );
    refalrts::link_brackets( context[25], context[21] );
    refalrts::link_brackets( context[9], context[22] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    res = refalrts::splice_evar( res, context[26], context[34] );
    res = refalrts::splice_evar( res, context[10], context[10] );
    res = refalrts::splice_evar( res, context[16], context[16] );
    res = refalrts::splice_evar( res, context[35], context[36] );
    res = refalrts::splice_evar( res, context[17], context[20] );
    res = refalrts::splice_evar( res, context[13], context[14] );
    res = refalrts::splice_evar( res, context[15], context[15] );
    res = refalrts::splice_evar( res, context[22], context[21] );
    res = refalrts::splice_evar( res, context[11], context[12] );
    res = refalrts::splice_evar( res, context[7], context[8] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( refalrts::open_evar_advance( context[11], context[12], context[2], context[3] ) );
  return refalrts::cRecognitionImpossible;
}

static refalrts::NativeReference nat_ref_T1u_next("T1_next", 786251477U, 1176157594U, func_T1u_next);

static refalrts::FnResult func_T1u_check0(refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  refalrts::this_is_generated_function();
  // issue here memory for vars with 47 elems
  refalrts::Iter context[47];
  refalrts::zeros( context, 47 );
  //FAST GEN: e.$
  //GLOBAL GEN: e.$
  // </0 & T1_check0/4 e.idx#0/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.idx#0 as range 2
  do {
    // t.idx ( e.idx ) t.idx ( e.idx ) ( e.idx ) ( e.idx ) t.idx ( e.idx ) t.idx e.idx
    // </0 & T1_check0/4 t.tUsedVars#1/5 (/9 e.eItems#1/7 )/10 t.tSrcPos#1/11 (/15 e.eIndex#1/13 )/16 (/19 e.ePattern#1/17 )/20 (/23 e.eItemsAndHoles#1/21 )/24 t.tUsedVars1#1/25 (/29 e.eeX_fix#1/27 )/30 t.tUsedVars2#1/31 e.etX_next#1/2 >/1
    context[45] = context[2];
    context[46] = context[3];
    context[6] = refalrts::tvar_left( context[5], context[45], context[46] );
    if( ! context[6] )
      continue;
    context[7] = 0;
    context[8] = 0;
    context[9] = refalrts::brackets_left( context[7], context[8], context[45], context[46] );
    if( ! context[9] )
      continue;
    refalrts::bracket_pointers(context[9], context[10]);
    // closed e.eItems#1 as range 7
    context[12] = refalrts::tvar_left( context[11], context[45], context[46] );
    if( ! context[12] )
      continue;
    context[13] = 0;
    context[14] = 0;
    context[15] = refalrts::brackets_left( context[13], context[14], context[45], context[46] );
    if( ! context[15] )
      continue;
    refalrts::bracket_pointers(context[15], context[16]);
    context[17] = 0;
    context[18] = 0;
    context[19] = refalrts::brackets_left( context[17], context[18], context[45], context[46] );
    if( ! context[19] )
      continue;
    refalrts::bracket_pointers(context[19], context[20]);
    context[21] = 0;
    context[22] = 0;
    context[23] = refalrts::brackets_left( context[21], context[22], context[45], context[46] );
    if( ! context[23] )
      continue;
    refalrts::bracket_pointers(context[23], context[24]);
    // closed e.eIndex#1 as range 13
    // closed e.ePattern#1 as range 17
    // closed e.eItemsAndHoles#1 as range 21
    context[26] = refalrts::tvar_left( context[25], context[45], context[46] );
    if( ! context[26] )
      continue;
    context[27] = 0;
    context[28] = 0;
    context[29] = refalrts::brackets_left( context[27], context[28], context[45], context[46] );
    if( ! context[29] )
      continue;
    refalrts::bracket_pointers(context[29], context[30]);
    // closed e.eeX_fix#1 as range 27
    context[32] = refalrts::tvar_left( context[31], context[45], context[46] );
    if( ! context[32] )
      continue;
    // closed e.etX_next#1 as range 45(2)
    //DEBUG: t.tUsedVars#1: 5
    //DEBUG: e.eItems#1: 7
    //DEBUG: t.tSrcPos#1: 11
    //DEBUG: e.eIndex#1: 13
    //DEBUG: e.ePattern#1: 17
    //DEBUG: e.eItemsAndHoles#1: 21
    //DEBUG: t.tUsedVars1#1: 25
    //DEBUG: e.eeX_fix#1: 27
    //DEBUG: t.tUsedVars2#1: 31
    //DEBUG: e.etX_next#1: 2

    refalrts::reset_allocator();
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 Reuse: & T1_check1/4 AsIs: t.tUsedVars#1/5 AsIs: (/9 AsIs: e.eItems#1/7 AsIs: )/10 AsIs: t.tSrcPos#1/11 AsIs: (/15 AsIs: e.eIndex#1/13 AsIs: )/16 AsIs: (/19 AsIs: e.ePattern#1/17 AsIs: )/20 AsIs: (/23 AsIs: e.eItemsAndHoles#1/21 AsIs: )/24 AsIs: t.tUsedVars1#1/25 AsIs: (/29 AsIs: e.eeX_fix#1/27 AsIs: )/30 AsIs: t.tUsedVars2#1/31 } (/33 Tile{ AsIs: e.etX_next#1/45(2) } )/34 </35 & NewName/36 t.tUsedVars2#1/31/37 'e'/39 e.eIndex#1/13/40"_rest"/42 >/44 Tile{ AsIs: >/1 ]] }
    if( ! refalrts::alloc_open_bracket( context[33] ) )
      return refalrts::cNoMemory;
    if( ! refalrts::alloc_close_bracket( context[34] ) )
      return refalrts::cNoMemory;
    if( ! refalrts::alloc_open_call( context[35] ) )
      return refalrts::cNoMemory;
    if( ! refalrts::alloc_name( context[36], ref_NewName.ref.function ) )
      return refalrts::cNoMemory;
    if (! refalrts::copy_evar(context[37], context[38], context[31], context[32]))
      return refalrts::cNoMemory;
    if( ! refalrts::alloc_char( context[39], 'e' ) )
      return refalrts::cNoMemory;
    if (! refalrts::copy_evar(context[40], context[41], context[13], context[14]))
      return refalrts::cNoMemory;
    if( ! refalrts::alloc_chars( context[42], context[43], "_rest", 5 ) )
      return refalrts::cNoMemory;
    if( ! refalrts::alloc_close_call( context[44] ) )
      return refalrts::cNoMemory;
    refalrts::update_name( context[4], ref_T1u_check1.ref.function );
    refalrts::push_stack( context[1] );
    refalrts::push_stack( context[0] );
    refalrts::push_stack( context[44] );
    refalrts::push_stack( context[35] );
    refalrts::link_brackets( context[33], context[34] );
    refalrts::link_brackets( context[29], context[30] );
    refalrts::link_brackets( context[23], context[24] );
    refalrts::link_brackets( context[19], context[20] );
    refalrts::link_brackets( context[15], context[16] );
    refalrts::link_brackets( context[9], context[10] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    res = refalrts::splice_evar( res, context[34], context[44] );
    res = refalrts::splice_evar( res, context[45], context[46] );
    res = refalrts::splice_evar( res, context[33], context[33] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence();

  // e.idx
  // </0 & T1_check0/4 e.eOther#1/2 >/1
  // closed e.eOther#1 as range 2
  //DEBUG: e.eOther#1: 2

  refalrts::reset_allocator();
  //TRASH: {REMOVED TILE}
  //RESULT: Tile{ [[ AsIs: </0 Reuse: & T1_cont0/4 AsIs: e.eOther#1/2 AsIs: >/1 ]] }
  refalrts::update_name( context[4], ref_T1u_cont0.ref.function );
  refalrts::push_stack( context[1] );
  refalrts::push_stack( context[0] );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_T1u_check0("T1_check0", 786251477U, 1176157594U, func_T1u_check0);

static refalrts::FnResult func_T1u_cont(refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  refalrts::this_is_generated_function();
  // issue here memory for vars with 26 elems
  refalrts::Iter context[26];
  refalrts::zeros( context, 26 );
  // </0 & T1_cont/4 t.tUsedVars#1/5 (/9 e.eItems#1/7 )/10 t.tSrcPos#1/11 (/15 e.eIndex#1/13 )/16 (/19 e.ePattern#1/17 )/20 (/23 e.eItemsAndHoles#1/21 )/24 e.eOther#1/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  context[6] = refalrts::tvar_left( context[5], context[2], context[3] );
  if( ! context[6] )
    return refalrts::cRecognitionImpossible;
  context[7] = 0;
  context[8] = 0;
  context[9] = refalrts::brackets_left( context[7], context[8], context[2], context[3] );
  if( ! context[9] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[9], context[10]);
  // closed e.eItems#1 as range 7
  context[12] = refalrts::tvar_left( context[11], context[2], context[3] );
  if( ! context[12] )
    return refalrts::cRecognitionImpossible;
  context[13] = 0;
  context[14] = 0;
  context[15] = refalrts::brackets_left( context[13], context[14], context[2], context[3] );
  if( ! context[15] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[15], context[16]);
  context[17] = 0;
  context[18] = 0;
  context[19] = refalrts::brackets_left( context[17], context[18], context[2], context[3] );
  if( ! context[19] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[19], context[20]);
  context[21] = 0;
  context[22] = 0;
  context[23] = refalrts::brackets_left( context[21], context[22], context[2], context[3] );
  if( ! context[23] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[23], context[24]);
  // closed e.eIndex#1 as range 13
  // closed e.ePattern#1 as range 17
  // closed e.eItemsAndHoles#1 as range 21
  // closed e.eOther#1 as range 2
  //DEBUG: t.tUsedVars#1: 5
  //DEBUG: e.eItems#1: 7
  //DEBUG: t.tSrcPos#1: 11
  //DEBUG: e.eIndex#1: 13
  //DEBUG: e.ePattern#1: 17
  //DEBUG: e.eItemsAndHoles#1: 21
  //DEBUG: e.eOther#1: 2

  refalrts::reset_allocator();
  //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} e.eOther#1/2 {REMOVED TILE}
  //RESULT: Tile{ [[ AsIs: </0 Reuse: & T1_forward/4 AsIs: t.tUsedVars#1/5 AsIs: (/9 AsIs: e.eItems#1/7 AsIs: )/10 } Tile{ AsIs: (/19 } Tile{ HalfReuse: # HOLE/20 AsIs: (/23 } # Variable/25 Tile{ AsIs: t.tSrcPos#1/11 HalfReuse: 'e'/15 AsIs: e.eIndex#1/13 AsIs: )/16 } Tile{ AsIs: e.ePattern#1/17 } Tile{ AsIs: )/24 } Tile{ AsIs: e.eItemsAndHoles#1/21 } Tile{ AsIs: >/1 ]] }
  if( ! refalrts::alloc_ident( context[25], ident_Variable ) )
    return refalrts::cNoMemory;
  refalrts::update_name( context[4], ref_T1u_forward.ref.function );
  refalrts::reinit_ident( context[20], ident_HOLE );
  refalrts::reinit_char( context[15], 'e' );
  refalrts::push_stack( context[1] );
  refalrts::push_stack( context[0] );
  refalrts::link_brackets( context[19], context[24] );
  refalrts::link_brackets( context[23], context[16] );
  refalrts::link_brackets( context[9], context[10] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[1];
  res = refalrts::splice_evar( res, context[21], context[22] );
  res = refalrts::splice_evar( res, context[24], context[24] );
  res = refalrts::splice_evar( res, context[17], context[18] );
  res = refalrts::splice_evar( res, context[11], context[16] );
  res = refalrts::splice_evar( res, context[25], context[25] );
  res = refalrts::splice_evar( res, context[20], context[23] );
  res = refalrts::splice_evar( res, context[19], context[19] );
  refalrts::splice_to_freelist_open( context[10], res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_T1u_cont("T1_cont", 786251477U, 1176157594U, func_T1u_cont);

static refalrts::FnResult func_T1u_check1(refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  refalrts::this_is_generated_function();
  // issue here memory for vars with 47 elems
  refalrts::Iter context[47];
  refalrts::zeros( context, 47 );
  //FAST GEN: t.$ ( e.$ ) t.$ ( e.$ ) ( e.$ ) ( e.$ ) t.$ ( e.$ ) t.$ ( e.$ ) e.$
  //GLOBAL GEN: t.$ ( e.$ ) t.$ ( e.$ ) ( e.$ ) ( e.$ ) t.$ ( e.$ ) t.$ ( e.$ ) e.$
  // </0 & T1_check1/4 t.idx#0/5 (/9 e.idxVB#0/7 )/10 t.idxVT#0/11 (/15 e.idxVTVB#0/13 )/16 (/19 e.idxVTVTB#0/17 )/20 (/23 e.idxVTVTTB#0/21 )/24 t.idxVTVTTT#0/25 (/29 e.idxVTVTTTVB#0/27 )/30 t.idxVTVTTTVT#0/31 (/35 e.idxVTVTTTVTVB#0/33 )/36 e.idxVTVTTTVTVT#0/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  context[6] = refalrts::tvar_left( context[5], context[2], context[3] );
  if( ! context[6] )
    return refalrts::cRecognitionImpossible;
  context[7] = 0;
  context[8] = 0;
  context[9] = refalrts::brackets_left( context[7], context[8], context[2], context[3] );
  if( ! context[9] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[9], context[10]);
  // closed e.idxVB#0 as range 7
  context[12] = refalrts::tvar_left( context[11], context[2], context[3] );
  if( ! context[12] )
    return refalrts::cRecognitionImpossible;
  context[13] = 0;
  context[14] = 0;
  context[15] = refalrts::brackets_left( context[13], context[14], context[2], context[3] );
  if( ! context[15] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[15], context[16]);
  context[17] = 0;
  context[18] = 0;
  context[19] = refalrts::brackets_left( context[17], context[18], context[2], context[3] );
  if( ! context[19] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[19], context[20]);
  context[21] = 0;
  context[22] = 0;
  context[23] = refalrts::brackets_left( context[21], context[22], context[2], context[3] );
  if( ! context[23] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[23], context[24]);
  // closed e.idxVTVB#0 as range 13
  // closed e.idxVTVTB#0 as range 17
  // closed e.idxVTVTTB#0 as range 21
  context[26] = refalrts::tvar_left( context[25], context[2], context[3] );
  if( ! context[26] )
    return refalrts::cRecognitionImpossible;
  context[27] = 0;
  context[28] = 0;
  context[29] = refalrts::brackets_left( context[27], context[28], context[2], context[3] );
  if( ! context[29] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[29], context[30]);
  // closed e.idxVTVTTTVB#0 as range 27
  context[32] = refalrts::tvar_left( context[31], context[2], context[3] );
  if( ! context[32] )
    return refalrts::cRecognitionImpossible;
  context[33] = 0;
  context[34] = 0;
  context[35] = refalrts::brackets_left( context[33], context[34], context[2], context[3] );
  if( ! context[35] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[35], context[36]);
  // closed e.idxVTVTTTVTVB#0 as range 33
  // closed e.idxVTVTTTVTVT#0 as range 2
  do {
    // t.idx ( e.idx ) t.idx ( e.idx ) ( e.idx ) ( e.idx ) t.idx ( e.idx ) t.idx ( e.idx ) t.idx e.idx
    // </0 & T1_check1/4 t.tUsedVars#1/5 (/9 e.eItems#1/7 )/10 t.tSrcPos#1/11 (/15 e.eIndex#1/13 )/16 (/19 e.ePattern#1/17 )/20 (/23 e.eItemsAndHoles#1/21 )/24 t.tUsedVars1#1/25 (/29 e.eeX_fix#1/27 )/30 t.tUsedVars2#1/31 (/35 e.etX_next#1/33 )/36 t.tUsedVars3#1/37 e.eeX_rest#1/2 >/1
    // closed e.eItems#1 as range 7
    // closed e.eIndex#1 as range 13
    // closed e.ePattern#1 as range 17
    // closed e.eItemsAndHoles#1 as range 21
    // closed e.eeX_fix#1 as range 27
    // closed e.etX_next#1 as range 33
    context[45] = context[2];
    context[46] = context[3];
    context[38] = refalrts::tvar_left( context[37], context[45], context[46] );
    if( ! context[38] )
      continue;
    // closed e.eeX_rest#1 as range 45(2)
    //DEBUG: t.tUsedVars#1: 5
    //DEBUG: t.tSrcPos#1: 11
    //DEBUG: t.tUsedVars1#1: 25
    //DEBUG: t.tUsedVars2#1: 31
    //DEBUG: e.eItems#1: 7
    //DEBUG: e.eIndex#1: 13
    //DEBUG: e.ePattern#1: 17
    //DEBUG: e.eItemsAndHoles#1: 21
    //DEBUG: e.eeX_fix#1: 27
    //DEBUG: e.etX_next#1: 33
    //DEBUG: t.tUsedVars3#1: 37
    //DEBUG: e.eeX_rest#1: 2

    refalrts::reset_allocator();
    //TRASH: {REMOVED TILE} {REMOVED TILE} t.tUsedVars#1/5 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} e.eIndex#1/13 {REMOVED TILE} e.ePattern#1/17 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} t.tUsedVars1#1/25 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} t.tUsedVars2#1/31 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ AsIs: (/9 AsIs: e.eItems#1/7 HalfReuse: (/10 } Tile{ HalfReuse: # Brackets/29 } Tile{ AsIs: (/35 } Tile{ HalfReuse: # Variable/15 } Tile{ AsIs: t.tSrcPos#1/11 } Tile{ AsIs: e.eeX_fix#1/27 } Tile{ AsIs: )/30 } Tile{ AsIs: )/20 AsIs: (/23 } Tile{ HalfReuse: # Variable/24 } t.tSrcPos#1/11/39 Tile{ AsIs: e.etX_next#1/33 } Tile{ AsIs: )/16 AsIs: (/19 } # Variable/41 t.tSrcPos#1/11/42 Tile{ AsIs: e.eeX_rest#1/45(2) } Tile{ AsIs: )/36 } Tile{ AsIs: </0 Reuse: & PassiveHoles/4 } Tile{ AsIs: t.tUsedVars3#1/37 } Tile{ AsIs: e.eItemsAndHoles#1/21 } >/44 Tile{ HalfReuse: )/1 ]] }
    if (! refalrts::copy_evar(context[39], context[40], context[11], context[12]))
      return refalrts::cNoMemory;
    if( ! refalrts::alloc_ident( context[41], ident_Variable ) )
      return refalrts::cNoMemory;
    if (! refalrts::copy_evar(context[42], context[43], context[11], context[12]))
      return refalrts::cNoMemory;
    if( ! refalrts::alloc_close_call( context[44] ) )
      return refalrts::cNoMemory;
    refalrts::reinit_open_bracket( context[10] );
    refalrts::reinit_ident( context[29], ident_Brackets );
    refalrts::reinit_ident( context[15], ident_Variable );
    refalrts::reinit_ident( context[24], ident_Variable );
    refalrts::update_name( context[4], ref_PassiveHoles.ref.function );
    refalrts::reinit_close_bracket( context[1] );
    refalrts::link_brackets( context[9], context[1] );
    refalrts::push_stack( context[44] );
    refalrts::push_stack( context[0] );
    refalrts::link_brackets( context[19], context[36] );
    refalrts::link_brackets( context[23], context[16] );
    refalrts::link_brackets( context[10], context[20] );
    refalrts::link_brackets( context[35], context[30] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    res = refalrts::splice_evar( res, context[44], context[44] );
    res = refalrts::splice_evar( res, context[21], context[22] );
    res = refalrts::splice_evar( res, context[37], context[38] );
    res = refalrts::splice_evar( res, context[0], context[4] );
    res = refalrts::splice_evar( res, context[36], context[36] );
    res = refalrts::splice_evar( res, context[45], context[46] );
    res = refalrts::splice_evar( res, context[41], context[43] );
    res = refalrts::splice_evar( res, context[16], context[19] );
    res = refalrts::splice_evar( res, context[33], context[34] );
    res = refalrts::splice_evar( res, context[39], context[40] );
    res = refalrts::splice_evar( res, context[24], context[24] );
    res = refalrts::splice_evar( res, context[20], context[23] );
    res = refalrts::splice_evar( res, context[30], context[30] );
    res = refalrts::splice_evar( res, context[27], context[28] );
    res = refalrts::splice_evar( res, context[11], context[12] );
    res = refalrts::splice_evar( res, context[15], context[15] );
    res = refalrts::splice_evar( res, context[35], context[35] );
    res = refalrts::splice_evar( res, context[29], context[29] );
    res = refalrts::splice_evar( res, context[9], context[10] );
    refalrts::splice_to_freelist_open( trash_prev, res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence();

  // t.idx ( e.idx ) t.idx ( e.idx ) ( e.idx ) ( e.idx ) t.idx ( e.idx ) t.idx ( e.idx ) e.idx
  // </0 & T1_check1/4 t.tUsedVars#1/5 (/9 e.eItems#1/7 )/10 t.tSrcPos#1/11 (/15 e.eIndex#1/13 )/16 (/19 e.ePattern#1/17 )/20 (/23 e.eItemsAndHoles#1/21 )/24 t.tUsedVars1#1/25 (/29 e.eeX_fix#1/27 )/30 t.tUsedVars2#1/31 (/35 e.etX_next#1/33 )/36 e.eOther#1/2 >/1
  // closed e.eItems#1 as range 7
  // closed e.eIndex#1 as range 13
  // closed e.ePattern#1 as range 17
  // closed e.eItemsAndHoles#1 as range 21
  // closed e.eeX_fix#1 as range 27
  // closed e.etX_next#1 as range 33
  // closed e.eOther#1 as range 2
  //DEBUG: t.tUsedVars#1: 5
  //DEBUG: t.tSrcPos#1: 11
  //DEBUG: t.tUsedVars1#1: 25
  //DEBUG: t.tUsedVars2#1: 31
  //DEBUG: e.eItems#1: 7
  //DEBUG: e.eIndex#1: 13
  //DEBUG: e.ePattern#1: 17
  //DEBUG: e.eItemsAndHoles#1: 21
  //DEBUG: e.eeX_fix#1: 27
  //DEBUG: e.etX_next#1: 33
  //DEBUG: e.eOther#1: 2

  refalrts::reset_allocator();
  //TRASH: {REMOVED TILE} (/35 {REMOVED TILE} )/36 e.eOther#1/2 {REMOVED TILE}
  //RESULT: Tile{ [[ AsIs: </0 Reuse: & T1_cont0/4 AsIs: t.tUsedVars#1/5 AsIs: (/9 AsIs: e.eItems#1/7 AsIs: )/10 AsIs: t.tSrcPos#1/11 AsIs: (/15 AsIs: e.eIndex#1/13 AsIs: )/16 AsIs: (/19 AsIs: e.ePattern#1/17 AsIs: )/20 AsIs: (/23 AsIs: e.eItemsAndHoles#1/21 AsIs: )/24 AsIs: t.tUsedVars1#1/25 AsIs: (/29 AsIs: e.eeX_fix#1/27 AsIs: )/30 AsIs: t.tUsedVars2#1/31 } Tile{ AsIs: e.etX_next#1/33 } Tile{ AsIs: >/1 ]] }
  refalrts::update_name( context[4], ref_T1u_cont0.ref.function );
  refalrts::push_stack( context[1] );
  refalrts::push_stack( context[0] );
  refalrts::link_brackets( context[29], context[30] );
  refalrts::link_brackets( context[23], context[24] );
  refalrts::link_brackets( context[19], context[20] );
  refalrts::link_brackets( context[15], context[16] );
  refalrts::link_brackets( context[9], context[10] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[1];
  res = refalrts::splice_evar( res, context[33], context[34] );
  refalrts::splice_to_freelist_open( context[32], res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_T1u_check1("T1_check1", 786251477U, 1176157594U, func_T1u_check1);

static refalrts::FnResult func_T1u_cont0(refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  refalrts::this_is_generated_function();
  // issue here memory for vars with 31 elems
  refalrts::Iter context[31];
  refalrts::zeros( context, 31 );
  // </0 & T1_cont0/4 t.tUsedVars#1/5 (/9 e.eItems#1/7 )/10 t.tSrcPos#1/11 (/15 e.eIndex#1/13 )/16 (/19 e.ePattern#1/17 )/20 (/23 e.eItemsAndHoles#1/21 )/24 t.tUsedVars1#1/25 (/29 e.eeX_fix#1/27 )/30 e.eOther#1/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  context[6] = refalrts::tvar_left( context[5], context[2], context[3] );
  if( ! context[6] )
    return refalrts::cRecognitionImpossible;
  context[7] = 0;
  context[8] = 0;
  context[9] = refalrts::brackets_left( context[7], context[8], context[2], context[3] );
  if( ! context[9] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[9], context[10]);
  // closed e.eItems#1 as range 7
  context[12] = refalrts::tvar_left( context[11], context[2], context[3] );
  if( ! context[12] )
    return refalrts::cRecognitionImpossible;
  context[13] = 0;
  context[14] = 0;
  context[15] = refalrts::brackets_left( context[13], context[14], context[2], context[3] );
  if( ! context[15] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[15], context[16]);
  context[17] = 0;
  context[18] = 0;
  context[19] = refalrts::brackets_left( context[17], context[18], context[2], context[3] );
  if( ! context[19] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[19], context[20]);
  context[21] = 0;
  context[22] = 0;
  context[23] = refalrts::brackets_left( context[21], context[22], context[2], context[3] );
  if( ! context[23] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[23], context[24]);
  // closed e.eIndex#1 as range 13
  // closed e.ePattern#1 as range 17
  // closed e.eItemsAndHoles#1 as range 21
  context[26] = refalrts::tvar_left( context[25], context[2], context[3] );
  if( ! context[26] )
    return refalrts::cRecognitionImpossible;
  context[27] = 0;
  context[28] = 0;
  context[29] = refalrts::brackets_left( context[27], context[28], context[2], context[3] );
  if( ! context[29] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[29], context[30]);
  // closed e.eeX_fix#1 as range 27
  // closed e.eOther#1 as range 2
  //DEBUG: t.tUsedVars#1: 5
  //DEBUG: e.eItems#1: 7
  //DEBUG: t.tSrcPos#1: 11
  //DEBUG: e.eIndex#1: 13
  //DEBUG: e.ePattern#1: 17
  //DEBUG: e.eItemsAndHoles#1: 21
  //DEBUG: t.tUsedVars1#1: 25
  //DEBUG: e.eeX_fix#1: 27
  //DEBUG: e.eOther#1: 2

  refalrts::reset_allocator();
  //TRASH: {REMOVED TILE} (/29 {REMOVED TILE} )/30 e.eOther#1/2 {REMOVED TILE}
  //RESULT: Tile{ [[ AsIs: </0 Reuse: & T1_cont/4 AsIs: t.tUsedVars#1/5 AsIs: (/9 AsIs: e.eItems#1/7 AsIs: )/10 AsIs: t.tSrcPos#1/11 AsIs: (/15 AsIs: e.eIndex#1/13 AsIs: )/16 AsIs: (/19 AsIs: e.ePattern#1/17 AsIs: )/20 AsIs: (/23 AsIs: e.eItemsAndHoles#1/21 AsIs: )/24 AsIs: t.tUsedVars1#1/25 } Tile{ AsIs: e.eeX_fix#1/27 } Tile{ AsIs: >/1 ]] }
  refalrts::update_name( context[4], ref_T1u_cont.ref.function );
  refalrts::push_stack( context[1] );
  refalrts::push_stack( context[0] );
  refalrts::link_brackets( context[23], context[24] );
  refalrts::link_brackets( context[19], context[20] );
  refalrts::link_brackets( context[15], context[16] );
  refalrts::link_brackets( context[9], context[10] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[1];
  res = refalrts::splice_evar( res, context[27], context[28] );
  refalrts::splice_to_freelist_open( context[26], res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_T1u_cont0("T1_cont0", 786251477U, 1176157594U, func_T1u_cont0);

static refalrts::FnResult func_PassiveHoles(refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  refalrts::this_is_generated_function();
  // issue here memory for vars with 37 elems
  refalrts::Iter context[37];
  refalrts::zeros( context, 37 );
  //FAST GEN: e.$
  //GLOBAL GEN: e.$
  // </0 & PassiveHoles/4 e.idx#0/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.idx#0 as range 2
  do {
    // t.idx e.idx
    // </0 & PassiveHoles/4 t.tUsedVariables#1/5 e.eItems#1/7 (/11 # HOLE/13 (/16 # Variable/18 t.tSrcPos#1/19 'e'/21 e.eIndex#1/14 )/17 e.ePattern#1/9 )/12 e.eItemsAndHoles#1/2 >/1
    context[33] = context[2];
    context[34] = context[3];
    context[6] = refalrts::tvar_left( context[5], context[33], context[34] );
    if( ! context[6] )
      continue;
    context[7] = 0;
    context[8] = 0;
    refalrts::start_e_loop();
    do {
      context[35] = context[33];
      context[36] = context[34];
      context[9] = 0;
      context[10] = 0;
      context[11] = refalrts::brackets_left( context[9], context[10], context[35], context[36] );
      if( ! context[11] )
        continue;
      refalrts::bracket_pointers(context[11], context[12]);
      context[13] = refalrts::ident_left(  ident_HOLE, context[9], context[10] );
      if( ! context[13] )
        continue;
      context[14] = 0;
      context[15] = 0;
      context[16] = refalrts::brackets_left( context[14], context[15], context[9], context[10] );
      if( ! context[16] )
        continue;
      refalrts::bracket_pointers(context[16], context[17]);
      context[18] = refalrts::ident_left(  ident_Variable, context[14], context[15] );
      if( ! context[18] )
        continue;
      // closed e.ePattern#1 as range 9
      // closed e.eItemsAndHoles#1 as range 35(2)
      context[20] = refalrts::tvar_left( context[19], context[14], context[15] );
      if( ! context[20] )
        continue;
      context[21] = refalrts::char_left( 'e', context[14], context[15] );
      if( ! context[21] )
        continue;
      // closed e.eIndex#1 as range 14
      //DEBUG: t.tUsedVariables#1: 5
      //DEBUG: e.eItems#1: 7
      //DEBUG: e.ePattern#1: 9
      //DEBUG: e.eItemsAndHoles#1: 2
      //DEBUG: t.tSrcPos#1: 19
      //DEBUG: e.eIndex#1: 14

      refalrts::reset_allocator();
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 Reuse: & PassiveHoles_check/4 AsIs: t.tUsedVariables#1/5 } Tile{ AsIs: (/11 } Tile{ AsIs: e.eItems#1/7 } Tile{ HalfReuse: )/18 AsIs: t.tSrcPos#1/19 HalfReuse: (/21 AsIs: e.eIndex#1/14 AsIs: )/17 } (/22 Tile{ AsIs: e.ePattern#1/9 } Tile{ HalfReuse: )/13 AsIs: (/16 } Tile{ AsIs: e.eItemsAndHoles#1/35(2) } Tile{ AsIs: )/12 } </23 & NewName/24 t.tUsedVariables#1/5/25 'e'/27 e.eIndex#1/14/28"_rest"/30 >/32 Tile{ AsIs: >/1 ]] }
      if( ! refalrts::alloc_open_bracket( context[22] ) )
        return refalrts::cNoMemory;
      if( ! refalrts::alloc_open_call( context[23] ) )
        return refalrts::cNoMemory;
      if( ! refalrts::alloc_name( context[24], ref_NewName.ref.function ) )
        return refalrts::cNoMemory;
      if (! refalrts::copy_evar(context[25], context[26], context[5], context[6]))
        return refalrts::cNoMemory;
      if( ! refalrts::alloc_char( context[27], 'e' ) )
        return refalrts::cNoMemory;
      if (! refalrts::copy_evar(context[28], context[29], context[14], context[15]))
        return refalrts::cNoMemory;
      if( ! refalrts::alloc_chars( context[30], context[31], "_rest", 5 ) )
        return refalrts::cNoMemory;
      if( ! refalrts::alloc_close_call( context[32] ) )
        return refalrts::cNoMemory;
      refalrts::update_name( context[4], ref_PassiveHolesu_check.ref.function );
      refalrts::reinit_close_bracket( context[18] );
      refalrts::reinit_open_bracket( context[21] );
      refalrts::reinit_close_bracket( context[13] );
      refalrts::push_stack( context[1] );
      refalrts::push_stack( context[0] );
      refalrts::push_stack( context[32] );
      refalrts::push_stack( context[23] );
      refalrts::link_brackets( context[16], context[12] );
      refalrts::link_brackets( context[22], context[13] );
      refalrts::link_brackets( context[21], context[17] );
      refalrts::link_brackets( context[11], context[18] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[1];
      res = refalrts::splice_evar( res, context[23], context[32] );
      res = refalrts::splice_evar( res, context[12], context[12] );
      res = refalrts::splice_evar( res, context[35], context[36] );
      res = refalrts::splice_evar( res, context[13], context[16] );
      res = refalrts::splice_evar( res, context[9], context[10] );
      res = refalrts::splice_evar( res, context[22], context[22] );
      res = refalrts::splice_evar( res, context[18], context[17] );
      res = refalrts::splice_evar( res, context[7], context[8] );
      res = refalrts::splice_evar( res, context[11], context[11] );
      refalrts::use( res );
      return refalrts::cSuccess;
    } while ( refalrts::open_evar_advance( context[7], context[8], context[33], context[34] ) );
  } while ( 0 );
  refalrts::stop_sentence();

  // e.idx
  // </0 & PassiveHoles/4 e.eOther#1/2 >/1
  // closed e.eOther#1 as range 2
  //DEBUG: e.eOther#1: 2

  refalrts::reset_allocator();
  //TRASH: {REMOVED TILE}
  //RESULT: Tile{ [[ AsIs: </0 Reuse: & PassiveHoles_cont/4 AsIs: e.eOther#1/2 AsIs: >/1 ]] }
  refalrts::update_name( context[4], ref_PassiveHolesu_cont.ref.function );
  refalrts::push_stack( context[1] );
  refalrts::push_stack( context[0] );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_PassiveHoles("PassiveHoles", 786251477U, 1176157594U, func_PassiveHoles);

static refalrts::FnResult func_PassiveHolesu_check(refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  refalrts::this_is_generated_function();
  // issue here memory for vars with 29 elems
  refalrts::Iter context[29];
  refalrts::zeros( context, 29 );
  //FAST GEN: t.$ ( e.$ ) t.$ ( e.$ ) ( e.$ ) ( e.$ ) e.$
  //GLOBAL GEN: t.$ ( e.$ ) t.$ ( e.$ ) ( e.$ ) ( e.$ ) e.$
  // </0 & PassiveHoles_check/4 t.idx#0/5 (/9 e.idxVB#0/7 )/10 t.idxVT#0/11 (/15 e.idxVTVB#0/13 )/16 (/19 e.idxVTVTB#0/17 )/20 (/23 e.idxVTVTTB#0/21 )/24 e.idxVTVTTT#0/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  context[6] = refalrts::tvar_left( context[5], context[2], context[3] );
  if( ! context[6] )
    return refalrts::cRecognitionImpossible;
  context[7] = 0;
  context[8] = 0;
  context[9] = refalrts::brackets_left( context[7], context[8], context[2], context[3] );
  if( ! context[9] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[9], context[10]);
  // closed e.idxVB#0 as range 7
  context[12] = refalrts::tvar_left( context[11], context[2], context[3] );
  if( ! context[12] )
    return refalrts::cRecognitionImpossible;
  context[13] = 0;
  context[14] = 0;
  context[15] = refalrts::brackets_left( context[13], context[14], context[2], context[3] );
  if( ! context[15] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[15], context[16]);
  context[17] = 0;
  context[18] = 0;
  context[19] = refalrts::brackets_left( context[17], context[18], context[2], context[3] );
  if( ! context[19] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[19], context[20]);
  context[21] = 0;
  context[22] = 0;
  context[23] = refalrts::brackets_left( context[21], context[22], context[2], context[3] );
  if( ! context[23] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[23], context[24]);
  // closed e.idxVTVB#0 as range 13
  // closed e.idxVTVTB#0 as range 17
  // closed e.idxVTVTTB#0 as range 21
  // closed e.idxVTVTTT#0 as range 2
  do {
    // t.idx ( e.idx ) t.idx ( e.idx ) ( e.idx ) ( e.idx ) t.idx e.idx
    // </0 & PassiveHoles_check/4 t.tUsedVariables#1/5 (/9 e.eItems#1/7 )/10 t.tSrcPos#1/11 (/15 e.eIndex#1/13 )/16 (/19 e.ePattern#1/17 )/20 (/23 e.eItemsAndHoles#1/21 )/24 t.tNewVars#1/25 e.eeX_rest#1/2 >/1
    // closed e.eItems#1 as range 7
    // closed e.eIndex#1 as range 13
    // closed e.ePattern#1 as range 17
    // closed e.eItemsAndHoles#1 as range 21
    context[27] = context[2];
    context[28] = context[3];
    context[26] = refalrts::tvar_left( context[25], context[27], context[28] );
    if( ! context[26] )
      continue;
    // closed e.eeX_rest#1 as range 27(2)
    //DEBUG: t.tUsedVariables#1: 5
    //DEBUG: t.tSrcPos#1: 11
    //DEBUG: e.eItems#1: 7
    //DEBUG: e.eIndex#1: 13
    //DEBUG: e.ePattern#1: 17
    //DEBUG: e.eItemsAndHoles#1: 21
    //DEBUG: t.tNewVars#1: 25
    //DEBUG: e.eeX_rest#1: 2

    refalrts::reset_allocator();
    //TRASH: {REMOVED TILE} {REMOVED TILE} t.tUsedVariables#1/5 (/9 {REMOVED TILE} {REMOVED TILE} (/15 e.eIndex#1/13 )/16 {REMOVED TILE} e.ePattern#1/17 {REMOVED TILE} (/23 {REMOVED TILE} )/24 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ AsIs: e.eItems#1/7 } Tile{ AsIs: (/19 } Tile{ HalfReuse: # Variable/10 AsIs: t.tSrcPos#1/11 } Tile{ AsIs: e.eeX_rest#1/27(2) } Tile{ AsIs: )/20 } Tile{ AsIs: </0 Reuse: & PassiveHoles/4 } Tile{ AsIs: t.tNewVars#1/25 } Tile{ AsIs: e.eItemsAndHoles#1/21 } Tile{ AsIs: >/1 ]] }
    refalrts::reinit_ident( context[10], ident_Variable );
    refalrts::update_name( context[4], ref_PassiveHoles.ref.function );
    refalrts::push_stack( context[1] );
    refalrts::push_stack( context[0] );
    refalrts::link_brackets( context[19], context[20] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    res = refalrts::splice_evar( res, context[21], context[22] );
    res = refalrts::splice_evar( res, context[25], context[26] );
    res = refalrts::splice_evar( res, context[0], context[4] );
    res = refalrts::splice_evar( res, context[20], context[20] );
    res = refalrts::splice_evar( res, context[27], context[28] );
    res = refalrts::splice_evar( res, context[10], context[12] );
    res = refalrts::splice_evar( res, context[19], context[19] );
    res = refalrts::splice_evar( res, context[7], context[8] );
    refalrts::splice_to_freelist_open( trash_prev, res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence();

  // t.idx ( e.idx ) t.idx ( e.idx ) ( e.idx ) ( e.idx ) e.idx
  // </0 & PassiveHoles_check/4 t.tUsedVariables#1/5 (/9 e.eItems#1/7 )/10 t.tSrcPos#1/11 (/15 e.eIndex#1/13 )/16 (/19 e.ePattern#1/17 )/20 (/23 e.eItemsAndHoles#1/21 )/24 e.eOther#1/2 >/1
  // closed e.eItems#1 as range 7
  // closed e.eIndex#1 as range 13
  // closed e.ePattern#1 as range 17
  // closed e.eItemsAndHoles#1 as range 21
  // closed e.eOther#1 as range 2
  //DEBUG: t.tUsedVariables#1: 5
  //DEBUG: t.tSrcPos#1: 11
  //DEBUG: e.eItems#1: 7
  //DEBUG: e.eIndex#1: 13
  //DEBUG: e.ePattern#1: 17
  //DEBUG: e.eItemsAndHoles#1: 21
  //DEBUG: e.eOther#1: 2

  refalrts::reset_allocator();
  //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} e.eOther#1/2 {REMOVED TILE}
  //RESULT: Tile{ [[ AsIs: </0 Reuse: & PassiveHoles_forward/4 AsIs: t.tUsedVariables#1/5 AsIs: (/9 AsIs: e.eItems#1/7 AsIs: )/10 } Tile{ AsIs: (/19 } Tile{ HalfReuse: # HOLE/20 AsIs: (/23 } # Variable/25 Tile{ AsIs: t.tSrcPos#1/11 HalfReuse: 'e'/15 AsIs: e.eIndex#1/13 AsIs: )/16 } Tile{ AsIs: e.ePattern#1/17 } Tile{ AsIs: )/24 } Tile{ AsIs: e.eItemsAndHoles#1/21 } Tile{ AsIs: >/1 ]] }
  if( ! refalrts::alloc_ident( context[25], ident_Variable ) )
    return refalrts::cNoMemory;
  refalrts::update_name( context[4], ref_PassiveHolesu_forward.ref.function );
  refalrts::reinit_ident( context[20], ident_HOLE );
  refalrts::reinit_char( context[15], 'e' );
  refalrts::push_stack( context[1] );
  refalrts::push_stack( context[0] );
  refalrts::link_brackets( context[19], context[24] );
  refalrts::link_brackets( context[23], context[16] );
  refalrts::link_brackets( context[9], context[10] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[1];
  res = refalrts::splice_evar( res, context[21], context[22] );
  res = refalrts::splice_evar( res, context[24], context[24] );
  res = refalrts::splice_evar( res, context[17], context[18] );
  res = refalrts::splice_evar( res, context[11], context[16] );
  res = refalrts::splice_evar( res, context[25], context[25] );
  res = refalrts::splice_evar( res, context[20], context[23] );
  res = refalrts::splice_evar( res, context[19], context[19] );
  refalrts::splice_to_freelist_open( context[10], res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_PassiveHolesu_check("PassiveHoles_check", 786251477U, 1176157594U, func_PassiveHolesu_check);

static refalrts::FnResult func_PassiveHolesu_forward(refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  refalrts::this_is_generated_function();
  // issue here memory for vars with 15 elems
  refalrts::Iter context[15];
  refalrts::zeros( context, 15 );
  //FAST GEN: e.$
  //GLOBAL GEN: t.$ ( e.$ ) e.$
  // </0 & PassiveHoles_forward/4 t.idx#0/5 (/9 e.idxVB#0/7 )/10 e.idxVT#0/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  context[6] = refalrts::tvar_left( context[5], context[2], context[3] );
  if( ! context[6] )
    return refalrts::cRecognitionImpossible;
  context[7] = 0;
  context[8] = 0;
  context[9] = refalrts::brackets_left( context[7], context[8], context[2], context[3] );
  if( ! context[9] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[9], context[10]);
  // closed e.idxVB#0 as range 7
  // closed e.idxVT#0 as range 2
  do {
    // t.idx ( e.idx ) t.idx e.idx
    // </0 & PassiveHoles_forward/4 t.tUsedVariables#1/5 (/9 e.eItems_fix#1/7 )/10 t.tItems_next#1/11 e.eItems_rest#1/2 >/1
    // closed e.eItems_fix#1 as range 7
    context[13] = context[2];
    context[14] = context[3];
    context[12] = refalrts::tvar_left( context[11], context[13], context[14] );
    if( ! context[12] )
      continue;
    // closed e.eItems_rest#1 as range 13(2)
    //DEBUG: t.tUsedVariables#1: 5
    //DEBUG: e.eItems_fix#1: 7
    //DEBUG: t.tItems_next#1: 11
    //DEBUG: e.eItems_rest#1: 2

    refalrts::reset_allocator();
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 Reuse: & PassiveHoles_next/4 AsIs: t.tUsedVariables#1/5 AsIs: (/9 } Tile{ AsIs: e.eItems_fix#1/7 } Tile{ AsIs: t.tItems_next#1/11 } Tile{ AsIs: )/10 } Tile{ AsIs: e.eItems_rest#1/13(2) } Tile{ AsIs: >/1 ]] }
    refalrts::update_name( context[4], ref_PassiveHolesu_next.ref.function );
    refalrts::push_stack( context[1] );
    refalrts::push_stack( context[0] );
    refalrts::link_brackets( context[9], context[10] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    res = refalrts::splice_evar( res, context[13], context[14] );
    res = refalrts::splice_evar( res, context[10], context[10] );
    res = refalrts::splice_evar( res, context[11], context[12] );
    res = refalrts::splice_evar( res, context[7], context[8] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence();

  // t.idx ( e.idx )
  // </0 & PassiveHoles_forward/4 t.tUsedVariables#1/5 (/9 e.eItems_fix#1/7 )/10 >/1
  if( ! refalrts::empty_seq( context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  // closed e.eItems_fix#1 as range 7
  //DEBUG: t.tUsedVariables#1: 5
  //DEBUG: e.eItems_fix#1: 7

  refalrts::reset_allocator();
  //TRASH: {REMOVED TILE} (/9 {REMOVED TILE} )/10 {REMOVED TILE}
  //RESULT: Tile{ [[ AsIs: </0 Reuse: & PassiveHoles_cont/4 AsIs: t.tUsedVariables#1/5 } Tile{ AsIs: e.eItems_fix#1/7 } Tile{ AsIs: >/1 ]] }
  refalrts::update_name( context[4], ref_PassiveHolesu_cont.ref.function );
  refalrts::push_stack( context[1] );
  refalrts::push_stack( context[0] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[1];
  res = refalrts::splice_evar( res, context[7], context[8] );
  refalrts::splice_to_freelist_open( context[6], res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_PassiveHolesu_forward("PassiveHoles_forward", 786251477U, 1176157594U, func_PassiveHolesu_forward);

static refalrts::FnResult func_PassiveHolesu_next(refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  refalrts::this_is_generated_function();
  // issue here memory for vars with 39 elems
  refalrts::Iter context[39];
  refalrts::zeros( context, 39 );
  //FAST GEN: t.$ ( e.$ ) e.$
  //GLOBAL GEN: t.$ ( e.$ ) e.$
  // </0 & PassiveHoles_next/4 t.idx#0/5 (/9 e.idxVB#0/7 )/10 e.idxVT#0/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  context[6] = refalrts::tvar_left( context[5], context[2], context[3] );
  if( ! context[6] )
    return refalrts::cRecognitionImpossible;
  context[7] = 0;
  context[8] = 0;
  context[9] = refalrts::brackets_left( context[7], context[8], context[2], context[3] );
  if( ! context[9] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[9], context[10]);
  // closed e.idxVB#0 as range 7
  // closed e.idxVT#0 as range 2
  do {
    // t.idx ( e.idx ) e.idx
    // </0 & PassiveHoles_next/4 t.tUsedVariables#1/5 (/9 e.eItems_fix#1/7 )/10 e.eItems_var#1/11 (/15 # HOLE/17 (/20 # Variable/22 t.tSrcPos#1/23 'e'/25 e.eIndex#1/18 )/21 e.ePattern#1/13 )/16 e.eItemsAndHoles#1/2 >/1
    // closed e.eItems_fix#1 as range 7
    context[35] = context[2];
    context[36] = context[3];
    context[11] = 0;
    context[12] = 0;
    refalrts::start_e_loop();
    do {
      context[37] = context[35];
      context[38] = context[36];
      context[13] = 0;
      context[14] = 0;
      context[15] = refalrts::brackets_left( context[13], context[14], context[37], context[38] );
      if( ! context[15] )
        continue;
      refalrts::bracket_pointers(context[15], context[16]);
      context[17] = refalrts::ident_left(  ident_HOLE, context[13], context[14] );
      if( ! context[17] )
        continue;
      context[18] = 0;
      context[19] = 0;
      context[20] = refalrts::brackets_left( context[18], context[19], context[13], context[14] );
      if( ! context[20] )
        continue;
      refalrts::bracket_pointers(context[20], context[21]);
      context[22] = refalrts::ident_left(  ident_Variable, context[18], context[19] );
      if( ! context[22] )
        continue;
      // closed e.ePattern#1 as range 13
      // closed e.eItemsAndHoles#1 as range 37(2)
      context[24] = refalrts::tvar_left( context[23], context[18], context[19] );
      if( ! context[24] )
        continue;
      context[25] = refalrts::char_left( 'e', context[18], context[19] );
      if( ! context[25] )
        continue;
      // closed e.eIndex#1 as range 18
      //DEBUG: t.tUsedVariables#1: 5
      //DEBUG: e.eItems_fix#1: 7
      //DEBUG: e.eItems_var#1: 11
      //DEBUG: e.ePattern#1: 13
      //DEBUG: e.eItemsAndHoles#1: 2
      //DEBUG: t.tSrcPos#1: 23
      //DEBUG: e.eIndex#1: 18

      refalrts::reset_allocator();
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 Reuse: & PassiveHoles_check/4 AsIs: t.tUsedVariables#1/5 AsIs: (/9 } Tile{ AsIs: e.eItems_fix#1/7 } Tile{ AsIs: e.eItems_var#1/11 } Tile{ HalfReuse: )/22 AsIs: t.tSrcPos#1/23 HalfReuse: (/25 AsIs: e.eIndex#1/18 AsIs: )/21 } Tile{ AsIs: (/15 } Tile{ AsIs: e.ePattern#1/13 } Tile{ HalfReuse: )/17 AsIs: (/20 } Tile{ AsIs: e.eItemsAndHoles#1/37(2) } Tile{ AsIs: )/16 } Tile{ HalfReuse: </10 } & NewName/26 t.tUsedVariables#1/5/27 'e'/29 e.eIndex#1/18/30"_rest"/32 >/34 Tile{ AsIs: >/1 ]] }
      if( ! refalrts::alloc_name( context[26], ref_NewName.ref.function ) )
        return refalrts::cNoMemory;
      if (! refalrts::copy_evar(context[27], context[28], context[5], context[6]))
        return refalrts::cNoMemory;
      if( ! refalrts::alloc_char( context[29], 'e' ) )
        return refalrts::cNoMemory;
      if (! refalrts::copy_evar(context[30], context[31], context[18], context[19]))
        return refalrts::cNoMemory;
      if( ! refalrts::alloc_chars( context[32], context[33], "_rest", 5 ) )
        return refalrts::cNoMemory;
      if( ! refalrts::alloc_close_call( context[34] ) )
        return refalrts::cNoMemory;
      refalrts::update_name( context[4], ref_PassiveHolesu_check.ref.function );
      refalrts::reinit_close_bracket( context[22] );
      refalrts::reinit_open_bracket( context[25] );
      refalrts::reinit_close_bracket( context[17] );
      refalrts::reinit_open_call( context[10] );
      refalrts::push_stack( context[1] );
      refalrts::push_stack( context[0] );
      refalrts::push_stack( context[34] );
      refalrts::push_stack( context[10] );
      refalrts::link_brackets( context[20], context[16] );
      refalrts::link_brackets( context[15], context[17] );
      refalrts::link_brackets( context[25], context[21] );
      refalrts::link_brackets( context[9], context[22] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[1];
      res = refalrts::splice_evar( res, context[26], context[34] );
      res = refalrts::splice_evar( res, context[10], context[10] );
      res = refalrts::splice_evar( res, context[16], context[16] );
      res = refalrts::splice_evar( res, context[37], context[38] );
      res = refalrts::splice_evar( res, context[17], context[20] );
      res = refalrts::splice_evar( res, context[13], context[14] );
      res = refalrts::splice_evar( res, context[15], context[15] );
      res = refalrts::splice_evar( res, context[22], context[21] );
      res = refalrts::splice_evar( res, context[11], context[12] );
      res = refalrts::splice_evar( res, context[7], context[8] );
      refalrts::use( res );
      return refalrts::cSuccess;
    } while ( refalrts::open_evar_advance( context[11], context[12], context[35], context[36] ) );
  } while ( 0 );
  refalrts::stop_sentence();

  // t.idx ( e.idx ) e.idx
  // </0 & PassiveHoles_next/4 t.tUsedVariables#1/5 (/9 e.eItems_fix#1/7 )/10 e.eItems_rest#1/2 >/1
  // closed e.eItems_fix#1 as range 7
  // closed e.eItems_rest#1 as range 2
  //DEBUG: t.tUsedVariables#1: 5
  //DEBUG: e.eItems_fix#1: 7
  //DEBUG: e.eItems_rest#1: 2

  refalrts::reset_allocator();
  //TRASH: {REMOVED TILE} (/9 {REMOVED TILE} )/10 {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ AsIs: </0 Reuse: & PassiveHoles_cont/4 AsIs: t.tUsedVariables#1/5 } Tile{ AsIs: e.eItems_fix#1/7 } Tile{ AsIs: e.eItems_rest#1/2 } Tile{ AsIs: >/1 ]] }
  refalrts::update_name( context[4], ref_PassiveHolesu_cont.ref.function );
  refalrts::push_stack( context[1] );
  refalrts::push_stack( context[0] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[1];
  res = refalrts::splice_evar( res, context[2], context[3] );
  res = refalrts::splice_evar( res, context[7], context[8] );
  refalrts::splice_to_freelist_open( context[6], res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_PassiveHolesu_next("PassiveHoles_next", 786251477U, 1176157594U, func_PassiveHolesu_next);

static refalrts::FnResult func_PassiveHolesu_cont(refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  refalrts::this_is_generated_function();
  // issue here memory for vars with 7 elems
  refalrts::Iter context[7];
  refalrts::zeros( context, 7 );
  // </0 & PassiveHoles_cont/4 t.tUsedVariables#1/5 e.eItems#1/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  context[6] = refalrts::tvar_left( context[5], context[2], context[3] );
  if( ! context[6] )
    return refalrts::cRecognitionImpossible;
  // closed e.eItems#1 as range 2
  //DEBUG: t.tUsedVariables#1: 5
  //DEBUG: e.eItems#1: 2

  refalrts::reset_allocator();
  //TRASH: {REMOVED TILE} </0 & PassiveHoles_cont/4 t.tUsedVariables#1/5 {REMOVED TILE} >/1 {REMOVED TILE}
  //RESULT: Tile{ [[ } Tile{ AsIs: e.eItems#1/2 } Tile{ ]] }
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = arg_end->next;
  res = refalrts::splice_evar( res, context[2], context[3] );
  refalrts::splice_to_freelist_open( trash_prev, res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_PassiveHolesu_cont("PassiveHoles_cont", 786251477U, 1176157594U, func_PassiveHolesu_cont);

static refalrts::FnResult func_T2(refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  refalrts::this_is_generated_function();
  // issue here memory for vars with 35 elems
  refalrts::Iter context[35];
  refalrts::zeros( context, 35 );
  // </0 & T2/4 t.tUsedVars#1/5 e.eItems#1/7 (/11 # HOLE/13 (/16 # Variable/18 t.tSrcPos#1/19 'e'/21 e.eIndex#1/14 )/17 e.ePattern#1/9 )/12 e.eItemsAndHoles#1/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  context[6] = refalrts::tvar_left( context[5], context[2], context[3] );
  if( ! context[6] )
    return refalrts::cRecognitionImpossible;
  context[7] = 0;
  context[8] = 0;
  refalrts::start_e_loop();
  do {
    context[33] = context[2];
    context[34] = context[3];
    context[9] = 0;
    context[10] = 0;
    context[11] = refalrts::brackets_left( context[9], context[10], context[33], context[34] );
    if( ! context[11] )
      continue;
    refalrts::bracket_pointers(context[11], context[12]);
    context[13] = refalrts::ident_left(  ident_HOLE, context[9], context[10] );
    if( ! context[13] )
      continue;
    context[14] = 0;
    context[15] = 0;
    context[16] = refalrts::brackets_left( context[14], context[15], context[9], context[10] );
    if( ! context[16] )
      continue;
    refalrts::bracket_pointers(context[16], context[17]);
    context[18] = refalrts::ident_left(  ident_Variable, context[14], context[15] );
    if( ! context[18] )
      continue;
    // closed e.ePattern#1 as range 9
    // closed e.eItemsAndHoles#1 as range 33(2)
    context[20] = refalrts::tvar_left( context[19], context[14], context[15] );
    if( ! context[20] )
      continue;
    context[21] = refalrts::char_left( 'e', context[14], context[15] );
    if( ! context[21] )
      continue;
    // closed e.eIndex#1 as range 14
    //DEBUG: t.tUsedVars#1: 5
    //DEBUG: e.eItems#1: 7
    //DEBUG: e.ePattern#1: 9
    //DEBUG: e.eItemsAndHoles#1: 2
    //DEBUG: t.tSrcPos#1: 19
    //DEBUG: e.eIndex#1: 14

    refalrts::reset_allocator();
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 Reuse: & T2_check/4 AsIs: t.tUsedVars#1/5 } Tile{ AsIs: (/11 } Tile{ AsIs: e.eItems#1/7 } Tile{ HalfReuse: )/18 AsIs: t.tSrcPos#1/19 HalfReuse: (/21 AsIs: e.eIndex#1/14 AsIs: )/17 } (/22 Tile{ AsIs: e.ePattern#1/9 } Tile{ HalfReuse: )/13 AsIs: (/16 } Tile{ AsIs: e.eItemsAndHoles#1/33(2) } Tile{ AsIs: )/12 } </23 & NewName/24 t.tUsedVars#1/5/25 'e'/27 e.eIndex#1/14/28"_fix"/30 >/32 Tile{ AsIs: >/1 ]] }
    if( ! refalrts::alloc_open_bracket( context[22] ) )
      return refalrts::cNoMemory;
    if( ! refalrts::alloc_open_call( context[23] ) )
      return refalrts::cNoMemory;
    if( ! refalrts::alloc_name( context[24], ref_NewName.ref.function ) )
      return refalrts::cNoMemory;
    if (! refalrts::copy_evar(context[25], context[26], context[5], context[6]))
      return refalrts::cNoMemory;
    if( ! refalrts::alloc_char( context[27], 'e' ) )
      return refalrts::cNoMemory;
    if (! refalrts::copy_evar(context[28], context[29], context[14], context[15]))
      return refalrts::cNoMemory;
    if( ! refalrts::alloc_chars( context[30], context[31], "_fix", 4 ) )
      return refalrts::cNoMemory;
    if( ! refalrts::alloc_close_call( context[32] ) )
      return refalrts::cNoMemory;
    refalrts::update_name( context[4], ref_T2u_check.ref.function );
    refalrts::reinit_close_bracket( context[18] );
    refalrts::reinit_open_bracket( context[21] );
    refalrts::reinit_close_bracket( context[13] );
    refalrts::push_stack( context[1] );
    refalrts::push_stack( context[0] );
    refalrts::push_stack( context[32] );
    refalrts::push_stack( context[23] );
    refalrts::link_brackets( context[16], context[12] );
    refalrts::link_brackets( context[22], context[13] );
    refalrts::link_brackets( context[21], context[17] );
    refalrts::link_brackets( context[11], context[18] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    res = refalrts::splice_evar( res, context[23], context[32] );
    res = refalrts::splice_evar( res, context[12], context[12] );
    res = refalrts::splice_evar( res, context[33], context[34] );
    res = refalrts::splice_evar( res, context[13], context[16] );
    res = refalrts::splice_evar( res, context[9], context[10] );
    res = refalrts::splice_evar( res, context[22], context[22] );
    res = refalrts::splice_evar( res, context[18], context[17] );
    res = refalrts::splice_evar( res, context[7], context[8] );
    res = refalrts::splice_evar( res, context[11], context[11] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( refalrts::open_evar_advance( context[7], context[8], context[2], context[3] ) );
  return refalrts::cRecognitionImpossible;
}

static refalrts::NativeReference nat_ref_T2("T2", 786251477U, 1176157594U, func_T2);

static refalrts::FnResult func_T2u_check(refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  refalrts::this_is_generated_function();
  // issue here memory for vars with 41 elems
  refalrts::Iter context[41];
  refalrts::zeros( context, 41 );
  //FAST GEN: e.$
  //GLOBAL GEN: e.$
  // </0 & T2_check/4 e.idx#0/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.idx#0 as range 2
  do {
    // t.idx ( e.idx ) t.idx ( e.idx ) ( e.idx ) ( e.idx ) t.idx e.idx
    // </0 & T2_check/4 t.tUsedVars#1/5 (/9 e.eItems#1/7 )/10 t.tSrcPos#1/11 (/15 e.eIndex#1/13 )/16 (/19 e.ePattern#1/17 )/20 (/23 e.eItemsAndHoles#1/21 )/24 t.tUsedVars1#1/25 e.eeX_fix#1/2 >/1
    context[39] = context[2];
    context[40] = context[3];
    context[6] = refalrts::tvar_left( context[5], context[39], context[40] );
    if( ! context[6] )
      continue;
    context[7] = 0;
    context[8] = 0;
    context[9] = refalrts::brackets_left( context[7], context[8], context[39], context[40] );
    if( ! context[9] )
      continue;
    refalrts::bracket_pointers(context[9], context[10]);
    // closed e.eItems#1 as range 7
    context[12] = refalrts::tvar_left( context[11], context[39], context[40] );
    if( ! context[12] )
      continue;
    context[13] = 0;
    context[14] = 0;
    context[15] = refalrts::brackets_left( context[13], context[14], context[39], context[40] );
    if( ! context[15] )
      continue;
    refalrts::bracket_pointers(context[15], context[16]);
    context[17] = 0;
    context[18] = 0;
    context[19] = refalrts::brackets_left( context[17], context[18], context[39], context[40] );
    if( ! context[19] )
      continue;
    refalrts::bracket_pointers(context[19], context[20]);
    context[21] = 0;
    context[22] = 0;
    context[23] = refalrts::brackets_left( context[21], context[22], context[39], context[40] );
    if( ! context[23] )
      continue;
    refalrts::bracket_pointers(context[23], context[24]);
    // closed e.eIndex#1 as range 13
    // closed e.ePattern#1 as range 17
    // closed e.eItemsAndHoles#1 as range 21
    context[26] = refalrts::tvar_left( context[25], context[39], context[40] );
    if( ! context[26] )
      continue;
    // closed e.eeX_fix#1 as range 39(2)
    //DEBUG: t.tUsedVars#1: 5
    //DEBUG: e.eItems#1: 7
    //DEBUG: t.tSrcPos#1: 11
    //DEBUG: e.eIndex#1: 13
    //DEBUG: e.ePattern#1: 17
    //DEBUG: e.eItemsAndHoles#1: 21
    //DEBUG: t.tUsedVars1#1: 25
    //DEBUG: e.eeX_fix#1: 2

    refalrts::reset_allocator();
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 Reuse: & T2_check0/4 AsIs: t.tUsedVars#1/5 AsIs: (/9 AsIs: e.eItems#1/7 AsIs: )/10 AsIs: t.tSrcPos#1/11 AsIs: (/15 AsIs: e.eIndex#1/13 AsIs: )/16 AsIs: (/19 AsIs: e.ePattern#1/17 AsIs: )/20 AsIs: (/23 AsIs: e.eItemsAndHoles#1/21 AsIs: )/24 AsIs: t.tUsedVars1#1/25 } (/27 Tile{ AsIs: e.eeX_fix#1/39(2) } )/28 </29 & NewName/30 t.tUsedVars1#1/25/31 't'/33 e.eIndex#1/13/34"_next"/36 >/38 Tile{ AsIs: >/1 ]] }
    if( ! refalrts::alloc_open_bracket( context[27] ) )
      return refalrts::cNoMemory;
    if( ! refalrts::alloc_close_bracket( context[28] ) )
      return refalrts::cNoMemory;
    if( ! refalrts::alloc_open_call( context[29] ) )
      return refalrts::cNoMemory;
    if( ! refalrts::alloc_name( context[30], ref_NewName.ref.function ) )
      return refalrts::cNoMemory;
    if (! refalrts::copy_evar(context[31], context[32], context[25], context[26]))
      return refalrts::cNoMemory;
    if( ! refalrts::alloc_char( context[33], 't' ) )
      return refalrts::cNoMemory;
    if (! refalrts::copy_evar(context[34], context[35], context[13], context[14]))
      return refalrts::cNoMemory;
    if( ! refalrts::alloc_chars( context[36], context[37], "_next", 5 ) )
      return refalrts::cNoMemory;
    if( ! refalrts::alloc_close_call( context[38] ) )
      return refalrts::cNoMemory;
    refalrts::update_name( context[4], ref_T2u_check0.ref.function );
    refalrts::push_stack( context[1] );
    refalrts::push_stack( context[0] );
    refalrts::push_stack( context[38] );
    refalrts::push_stack( context[29] );
    refalrts::link_brackets( context[27], context[28] );
    refalrts::link_brackets( context[23], context[24] );
    refalrts::link_brackets( context[19], context[20] );
    refalrts::link_brackets( context[15], context[16] );
    refalrts::link_brackets( context[9], context[10] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    res = refalrts::splice_evar( res, context[28], context[38] );
    res = refalrts::splice_evar( res, context[39], context[40] );
    res = refalrts::splice_evar( res, context[27], context[27] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence();

  // e.idx
  // </0 & T2_check/4 e.eOther#1/2 >/1
  // closed e.eOther#1 as range 2
  //DEBUG: e.eOther#1: 2

  refalrts::reset_allocator();
  //TRASH: {REMOVED TILE}
  //RESULT: Tile{ [[ AsIs: </0 Reuse: & T2_cont/4 AsIs: e.eOther#1/2 AsIs: >/1 ]] }
  refalrts::update_name( context[4], ref_T2u_cont.ref.function );
  refalrts::push_stack( context[1] );
  refalrts::push_stack( context[0] );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_T2u_check("T2_check", 786251477U, 1176157594U, func_T2u_check);

static refalrts::FnResult func_T2u_forward(refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  refalrts::this_is_generated_function();
  // issue here memory for vars with 13 elems
  refalrts::Iter context[13];
  refalrts::zeros( context, 13 );
  // </0 & T2_forward/4 t.tUsedVars#1/5 (/9 e.eItems_fix#1/7 )/10 t.tItems_next#1/11 e.eItems_rest#1/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  context[6] = refalrts::tvar_left( context[5], context[2], context[3] );
  if( ! context[6] )
    return refalrts::cRecognitionImpossible;
  context[7] = 0;
  context[8] = 0;
  context[9] = refalrts::brackets_left( context[7], context[8], context[2], context[3] );
  if( ! context[9] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[9], context[10]);
  // closed e.eItems_fix#1 as range 7
  context[12] = refalrts::tvar_left( context[11], context[2], context[3] );
  if( ! context[12] )
    return refalrts::cRecognitionImpossible;
  // closed e.eItems_rest#1 as range 2
  //DEBUG: t.tUsedVars#1: 5
  //DEBUG: e.eItems_fix#1: 7
  //DEBUG: t.tItems_next#1: 11
  //DEBUG: e.eItems_rest#1: 2

  refalrts::reset_allocator();
  //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ AsIs: </0 Reuse: & T2_next/4 AsIs: t.tUsedVars#1/5 AsIs: (/9 } Tile{ AsIs: e.eItems_fix#1/7 } Tile{ AsIs: t.tItems_next#1/11 } Tile{ AsIs: )/10 } Tile{ AsIs: e.eItems_rest#1/2 } Tile{ AsIs: >/1 ]] }
  refalrts::update_name( context[4], ref_T2u_next.ref.function );
  refalrts::push_stack( context[1] );
  refalrts::push_stack( context[0] );
  refalrts::link_brackets( context[9], context[10] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[1];
  res = refalrts::splice_evar( res, context[2], context[3] );
  res = refalrts::splice_evar( res, context[10], context[10] );
  res = refalrts::splice_evar( res, context[11], context[12] );
  res = refalrts::splice_evar( res, context[7], context[8] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_T2u_forward("T2_forward", 786251477U, 1176157594U, func_T2u_forward);

static refalrts::FnResult func_T2u_next(refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  refalrts::this_is_generated_function();
  // issue here memory for vars with 37 elems
  refalrts::Iter context[37];
  refalrts::zeros( context, 37 );
  // </0 & T2_next/4 t.tUsedVars#1/5 (/9 e.eItems_fix#1/7 )/10 e.eItems_var#1/11 (/15 # HOLE/17 (/20 # Variable/22 t.tSrcPos#1/23 'e'/25 e.eIndex#1/18 )/21 e.ePattern#1/13 )/16 e.eItemsAndHoles#1/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  context[6] = refalrts::tvar_left( context[5], context[2], context[3] );
  if( ! context[6] )
    return refalrts::cRecognitionImpossible;
  context[7] = 0;
  context[8] = 0;
  context[9] = refalrts::brackets_left( context[7], context[8], context[2], context[3] );
  if( ! context[9] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[9], context[10]);
  // closed e.eItems_fix#1 as range 7
  context[11] = 0;
  context[12] = 0;
  refalrts::start_e_loop();
  do {
    context[35] = context[2];
    context[36] = context[3];
    context[13] = 0;
    context[14] = 0;
    context[15] = refalrts::brackets_left( context[13], context[14], context[35], context[36] );
    if( ! context[15] )
      continue;
    refalrts::bracket_pointers(context[15], context[16]);
    context[17] = refalrts::ident_left(  ident_HOLE, context[13], context[14] );
    if( ! context[17] )
      continue;
    context[18] = 0;
    context[19] = 0;
    context[20] = refalrts::brackets_left( context[18], context[19], context[13], context[14] );
    if( ! context[20] )
      continue;
    refalrts::bracket_pointers(context[20], context[21]);
    context[22] = refalrts::ident_left(  ident_Variable, context[18], context[19] );
    if( ! context[22] )
      continue;
    // closed e.ePattern#1 as range 13
    // closed e.eItemsAndHoles#1 as range 35(2)
    context[24] = refalrts::tvar_left( context[23], context[18], context[19] );
    if( ! context[24] )
      continue;
    context[25] = refalrts::char_left( 'e', context[18], context[19] );
    if( ! context[25] )
      continue;
    // closed e.eIndex#1 as range 18
    //DEBUG: t.tUsedVars#1: 5
    //DEBUG: e.eItems_fix#1: 7
    //DEBUG: e.eItems_var#1: 11
    //DEBUG: e.ePattern#1: 13
    //DEBUG: e.eItemsAndHoles#1: 2
    //DEBUG: t.tSrcPos#1: 23
    //DEBUG: e.eIndex#1: 18

    refalrts::reset_allocator();
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 Reuse: & T2_check/4 AsIs: t.tUsedVars#1/5 AsIs: (/9 } Tile{ AsIs: e.eItems_fix#1/7 } Tile{ AsIs: e.eItems_var#1/11 } Tile{ HalfReuse: )/22 AsIs: t.tSrcPos#1/23 HalfReuse: (/25 AsIs: e.eIndex#1/18 AsIs: )/21 } Tile{ AsIs: (/15 } Tile{ AsIs: e.ePattern#1/13 } Tile{ HalfReuse: )/17 AsIs: (/20 } Tile{ AsIs: e.eItemsAndHoles#1/35(2) } Tile{ AsIs: )/16 } Tile{ HalfReuse: </10 } & NewName/26 t.tUsedVars#1/5/27 'e'/29 e.eIndex#1/18/30"_fix"/32 >/34 Tile{ AsIs: >/1 ]] }
    if( ! refalrts::alloc_name( context[26], ref_NewName.ref.function ) )
      return refalrts::cNoMemory;
    if (! refalrts::copy_evar(context[27], context[28], context[5], context[6]))
      return refalrts::cNoMemory;
    if( ! refalrts::alloc_char( context[29], 'e' ) )
      return refalrts::cNoMemory;
    if (! refalrts::copy_evar(context[30], context[31], context[18], context[19]))
      return refalrts::cNoMemory;
    if( ! refalrts::alloc_chars( context[32], context[33], "_fix", 4 ) )
      return refalrts::cNoMemory;
    if( ! refalrts::alloc_close_call( context[34] ) )
      return refalrts::cNoMemory;
    refalrts::update_name( context[4], ref_T2u_check.ref.function );
    refalrts::reinit_close_bracket( context[22] );
    refalrts::reinit_open_bracket( context[25] );
    refalrts::reinit_close_bracket( context[17] );
    refalrts::reinit_open_call( context[10] );
    refalrts::push_stack( context[1] );
    refalrts::push_stack( context[0] );
    refalrts::push_stack( context[34] );
    refalrts::push_stack( context[10] );
    refalrts::link_brackets( context[20], context[16] );
    refalrts::link_brackets( context[15], context[17] );
    refalrts::link_brackets( context[25], context[21] );
    refalrts::link_brackets( context[9], context[22] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    res = refalrts::splice_evar( res, context[26], context[34] );
    res = refalrts::splice_evar( res, context[10], context[10] );
    res = refalrts::splice_evar( res, context[16], context[16] );
    res = refalrts::splice_evar( res, context[35], context[36] );
    res = refalrts::splice_evar( res, context[17], context[20] );
    res = refalrts::splice_evar( res, context[13], context[14] );
    res = refalrts::splice_evar( res, context[15], context[15] );
    res = refalrts::splice_evar( res, context[22], context[21] );
    res = refalrts::splice_evar( res, context[11], context[12] );
    res = refalrts::splice_evar( res, context[7], context[8] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( refalrts::open_evar_advance( context[11], context[12], context[2], context[3] ) );
  return refalrts::cRecognitionImpossible;
}

static refalrts::NativeReference nat_ref_T2u_next("T2_next", 786251477U, 1176157594U, func_T2u_next);

static refalrts::FnResult func_T2u_check0(refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  refalrts::this_is_generated_function();
  // issue here memory for vars with 47 elems
  refalrts::Iter context[47];
  refalrts::zeros( context, 47 );
  //FAST GEN: e.$
  //GLOBAL GEN: e.$
  // </0 & T2_check0/4 e.idx#0/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.idx#0 as range 2
  do {
    // t.idx ( e.idx ) t.idx ( e.idx ) ( e.idx ) ( e.idx ) t.idx ( e.idx ) t.idx e.idx
    // </0 & T2_check0/4 t.tUsedVars#1/5 (/9 e.eItems#1/7 )/10 t.tSrcPos#1/11 (/15 e.eIndex#1/13 )/16 (/19 e.ePattern#1/17 )/20 (/23 e.eItemsAndHoles#1/21 )/24 t.tUsedVars1#1/25 (/29 e.eeX_fix#1/27 )/30 t.tUsedVars2#1/31 e.etX_next#1/2 >/1
    context[45] = context[2];
    context[46] = context[3];
    context[6] = refalrts::tvar_left( context[5], context[45], context[46] );
    if( ! context[6] )
      continue;
    context[7] = 0;
    context[8] = 0;
    context[9] = refalrts::brackets_left( context[7], context[8], context[45], context[46] );
    if( ! context[9] )
      continue;
    refalrts::bracket_pointers(context[9], context[10]);
    // closed e.eItems#1 as range 7
    context[12] = refalrts::tvar_left( context[11], context[45], context[46] );
    if( ! context[12] )
      continue;
    context[13] = 0;
    context[14] = 0;
    context[15] = refalrts::brackets_left( context[13], context[14], context[45], context[46] );
    if( ! context[15] )
      continue;
    refalrts::bracket_pointers(context[15], context[16]);
    context[17] = 0;
    context[18] = 0;
    context[19] = refalrts::brackets_left( context[17], context[18], context[45], context[46] );
    if( ! context[19] )
      continue;
    refalrts::bracket_pointers(context[19], context[20]);
    context[21] = 0;
    context[22] = 0;
    context[23] = refalrts::brackets_left( context[21], context[22], context[45], context[46] );
    if( ! context[23] )
      continue;
    refalrts::bracket_pointers(context[23], context[24]);
    // closed e.eIndex#1 as range 13
    // closed e.ePattern#1 as range 17
    // closed e.eItemsAndHoles#1 as range 21
    context[26] = refalrts::tvar_left( context[25], context[45], context[46] );
    if( ! context[26] )
      continue;
    context[27] = 0;
    context[28] = 0;
    context[29] = refalrts::brackets_left( context[27], context[28], context[45], context[46] );
    if( ! context[29] )
      continue;
    refalrts::bracket_pointers(context[29], context[30]);
    // closed e.eeX_fix#1 as range 27
    context[32] = refalrts::tvar_left( context[31], context[45], context[46] );
    if( ! context[32] )
      continue;
    // closed e.etX_next#1 as range 45(2)
    //DEBUG: t.tUsedVars#1: 5
    //DEBUG: e.eItems#1: 7
    //DEBUG: t.tSrcPos#1: 11
    //DEBUG: e.eIndex#1: 13
    //DEBUG: e.ePattern#1: 17
    //DEBUG: e.eItemsAndHoles#1: 21
    //DEBUG: t.tUsedVars1#1: 25
    //DEBUG: e.eeX_fix#1: 27
    //DEBUG: t.tUsedVars2#1: 31
    //DEBUG: e.etX_next#1: 2

    refalrts::reset_allocator();
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 Reuse: & T2_check1/4 AsIs: t.tUsedVars#1/5 AsIs: (/9 AsIs: e.eItems#1/7 AsIs: )/10 AsIs: t.tSrcPos#1/11 AsIs: (/15 AsIs: e.eIndex#1/13 AsIs: )/16 AsIs: (/19 AsIs: e.ePattern#1/17 AsIs: )/20 AsIs: (/23 AsIs: e.eItemsAndHoles#1/21 AsIs: )/24 AsIs: t.tUsedVars1#1/25 AsIs: (/29 AsIs: e.eeX_fix#1/27 AsIs: )/30 AsIs: t.tUsedVars2#1/31 } (/33 Tile{ AsIs: e.etX_next#1/45(2) } )/34 </35 & NewName/36 t.tUsedVars2#1/31/37 'e'/39 e.eIndex#1/13/40"_rest"/42 >/44 Tile{ AsIs: >/1 ]] }
    if( ! refalrts::alloc_open_bracket( context[33] ) )
      return refalrts::cNoMemory;
    if( ! refalrts::alloc_close_bracket( context[34] ) )
      return refalrts::cNoMemory;
    if( ! refalrts::alloc_open_call( context[35] ) )
      return refalrts::cNoMemory;
    if( ! refalrts::alloc_name( context[36], ref_NewName.ref.function ) )
      return refalrts::cNoMemory;
    if (! refalrts::copy_evar(context[37], context[38], context[31], context[32]))
      return refalrts::cNoMemory;
    if( ! refalrts::alloc_char( context[39], 'e' ) )
      return refalrts::cNoMemory;
    if (! refalrts::copy_evar(context[40], context[41], context[13], context[14]))
      return refalrts::cNoMemory;
    if( ! refalrts::alloc_chars( context[42], context[43], "_rest", 5 ) )
      return refalrts::cNoMemory;
    if( ! refalrts::alloc_close_call( context[44] ) )
      return refalrts::cNoMemory;
    refalrts::update_name( context[4], ref_T2u_check1.ref.function );
    refalrts::push_stack( context[1] );
    refalrts::push_stack( context[0] );
    refalrts::push_stack( context[44] );
    refalrts::push_stack( context[35] );
    refalrts::link_brackets( context[33], context[34] );
    refalrts::link_brackets( context[29], context[30] );
    refalrts::link_brackets( context[23], context[24] );
    refalrts::link_brackets( context[19], context[20] );
    refalrts::link_brackets( context[15], context[16] );
    refalrts::link_brackets( context[9], context[10] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    res = refalrts::splice_evar( res, context[34], context[44] );
    res = refalrts::splice_evar( res, context[45], context[46] );
    res = refalrts::splice_evar( res, context[33], context[33] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence();

  // e.idx
  // </0 & T2_check0/4 e.eOther#1/2 >/1
  // closed e.eOther#1 as range 2
  //DEBUG: e.eOther#1: 2

  refalrts::reset_allocator();
  //TRASH: {REMOVED TILE}
  //RESULT: Tile{ [[ AsIs: </0 Reuse: & T2_cont0/4 AsIs: e.eOther#1/2 AsIs: >/1 ]] }
  refalrts::update_name( context[4], ref_T2u_cont0.ref.function );
  refalrts::push_stack( context[1] );
  refalrts::push_stack( context[0] );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_T2u_check0("T2_check0", 786251477U, 1176157594U, func_T2u_check0);

static refalrts::FnResult func_T2u_cont(refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  refalrts::this_is_generated_function();
  // issue here memory for vars with 26 elems
  refalrts::Iter context[26];
  refalrts::zeros( context, 26 );
  // </0 & T2_cont/4 t.tUsedVars#1/5 (/9 e.eItems#1/7 )/10 t.tSrcPos#1/11 (/15 e.eIndex#1/13 )/16 (/19 e.ePattern#1/17 )/20 (/23 e.eItemsAndHoles#1/21 )/24 e.eOther#1/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  context[6] = refalrts::tvar_left( context[5], context[2], context[3] );
  if( ! context[6] )
    return refalrts::cRecognitionImpossible;
  context[7] = 0;
  context[8] = 0;
  context[9] = refalrts::brackets_left( context[7], context[8], context[2], context[3] );
  if( ! context[9] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[9], context[10]);
  // closed e.eItems#1 as range 7
  context[12] = refalrts::tvar_left( context[11], context[2], context[3] );
  if( ! context[12] )
    return refalrts::cRecognitionImpossible;
  context[13] = 0;
  context[14] = 0;
  context[15] = refalrts::brackets_left( context[13], context[14], context[2], context[3] );
  if( ! context[15] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[15], context[16]);
  context[17] = 0;
  context[18] = 0;
  context[19] = refalrts::brackets_left( context[17], context[18], context[2], context[3] );
  if( ! context[19] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[19], context[20]);
  context[21] = 0;
  context[22] = 0;
  context[23] = refalrts::brackets_left( context[21], context[22], context[2], context[3] );
  if( ! context[23] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[23], context[24]);
  // closed e.eIndex#1 as range 13
  // closed e.ePattern#1 as range 17
  // closed e.eItemsAndHoles#1 as range 21
  // closed e.eOther#1 as range 2
  //DEBUG: t.tUsedVars#1: 5
  //DEBUG: e.eItems#1: 7
  //DEBUG: t.tSrcPos#1: 11
  //DEBUG: e.eIndex#1: 13
  //DEBUG: e.ePattern#1: 17
  //DEBUG: e.eItemsAndHoles#1: 21
  //DEBUG: e.eOther#1: 2

  refalrts::reset_allocator();
  //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} e.eOther#1/2 {REMOVED TILE}
  //RESULT: Tile{ [[ AsIs: </0 Reuse: & T2_forward/4 AsIs: t.tUsedVars#1/5 AsIs: (/9 AsIs: e.eItems#1/7 AsIs: )/10 } Tile{ AsIs: (/19 } Tile{ HalfReuse: # HOLE/20 AsIs: (/23 } # Variable/25 Tile{ AsIs: t.tSrcPos#1/11 HalfReuse: 'e'/15 AsIs: e.eIndex#1/13 AsIs: )/16 } Tile{ AsIs: e.ePattern#1/17 } Tile{ AsIs: )/24 } Tile{ AsIs: e.eItemsAndHoles#1/21 } Tile{ AsIs: >/1 ]] }
  if( ! refalrts::alloc_ident( context[25], ident_Variable ) )
    return refalrts::cNoMemory;
  refalrts::update_name( context[4], ref_T2u_forward.ref.function );
  refalrts::reinit_ident( context[20], ident_HOLE );
  refalrts::reinit_char( context[15], 'e' );
  refalrts::push_stack( context[1] );
  refalrts::push_stack( context[0] );
  refalrts::link_brackets( context[19], context[24] );
  refalrts::link_brackets( context[23], context[16] );
  refalrts::link_brackets( context[9], context[10] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[1];
  res = refalrts::splice_evar( res, context[21], context[22] );
  res = refalrts::splice_evar( res, context[24], context[24] );
  res = refalrts::splice_evar( res, context[17], context[18] );
  res = refalrts::splice_evar( res, context[11], context[16] );
  res = refalrts::splice_evar( res, context[25], context[25] );
  res = refalrts::splice_evar( res, context[20], context[23] );
  res = refalrts::splice_evar( res, context[19], context[19] );
  refalrts::splice_to_freelist_open( context[10], res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_T2u_cont("T2_cont", 786251477U, 1176157594U, func_T2u_cont);

static refalrts::FnResult func_T2u_check1(refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  refalrts::this_is_generated_function();
  // issue here memory for vars with 47 elems
  refalrts::Iter context[47];
  refalrts::zeros( context, 47 );
  //FAST GEN: t.$ ( e.$ ) t.$ ( e.$ ) ( e.$ ) ( e.$ ) t.$ ( e.$ ) t.$ ( e.$ ) e.$
  //GLOBAL GEN: t.$ ( e.$ ) t.$ ( e.$ ) ( e.$ ) ( e.$ ) t.$ ( e.$ ) t.$ ( e.$ ) e.$
  // </0 & T2_check1/4 t.idx#0/5 (/9 e.idxVB#0/7 )/10 t.idxVT#0/11 (/15 e.idxVTVB#0/13 )/16 (/19 e.idxVTVTB#0/17 )/20 (/23 e.idxVTVTTB#0/21 )/24 t.idxVTVTTT#0/25 (/29 e.idxVTVTTTVB#0/27 )/30 t.idxVTVTTTVT#0/31 (/35 e.idxVTVTTTVTVB#0/33 )/36 e.idxVTVTTTVTVT#0/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  context[6] = refalrts::tvar_left( context[5], context[2], context[3] );
  if( ! context[6] )
    return refalrts::cRecognitionImpossible;
  context[7] = 0;
  context[8] = 0;
  context[9] = refalrts::brackets_left( context[7], context[8], context[2], context[3] );
  if( ! context[9] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[9], context[10]);
  // closed e.idxVB#0 as range 7
  context[12] = refalrts::tvar_left( context[11], context[2], context[3] );
  if( ! context[12] )
    return refalrts::cRecognitionImpossible;
  context[13] = 0;
  context[14] = 0;
  context[15] = refalrts::brackets_left( context[13], context[14], context[2], context[3] );
  if( ! context[15] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[15], context[16]);
  context[17] = 0;
  context[18] = 0;
  context[19] = refalrts::brackets_left( context[17], context[18], context[2], context[3] );
  if( ! context[19] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[19], context[20]);
  context[21] = 0;
  context[22] = 0;
  context[23] = refalrts::brackets_left( context[21], context[22], context[2], context[3] );
  if( ! context[23] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[23], context[24]);
  // closed e.idxVTVB#0 as range 13
  // closed e.idxVTVTB#0 as range 17
  // closed e.idxVTVTTB#0 as range 21
  context[26] = refalrts::tvar_left( context[25], context[2], context[3] );
  if( ! context[26] )
    return refalrts::cRecognitionImpossible;
  context[27] = 0;
  context[28] = 0;
  context[29] = refalrts::brackets_left( context[27], context[28], context[2], context[3] );
  if( ! context[29] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[29], context[30]);
  // closed e.idxVTVTTTVB#0 as range 27
  context[32] = refalrts::tvar_left( context[31], context[2], context[3] );
  if( ! context[32] )
    return refalrts::cRecognitionImpossible;
  context[33] = 0;
  context[34] = 0;
  context[35] = refalrts::brackets_left( context[33], context[34], context[2], context[3] );
  if( ! context[35] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[35], context[36]);
  // closed e.idxVTVTTTVTVB#0 as range 33
  // closed e.idxVTVTTTVTVT#0 as range 2
  do {
    // t.idx ( e.idx ) t.idx ( e.idx ) ( e.idx ) ( e.idx ) t.idx ( e.idx ) t.idx ( e.idx ) t.idx e.idx
    // </0 & T2_check1/4 t.tUsedVars#1/5 (/9 e.eItems#1/7 )/10 t.tSrcPos#1/11 (/15 e.eIndex#1/13 )/16 (/19 e.ePattern#1/17 )/20 (/23 e.eItemsAndHoles#1/21 )/24 t.tUsedVars1#1/25 (/29 e.eeX_fix#1/27 )/30 t.tUsedVars2#1/31 (/35 e.etX_next#1/33 )/36 t.tUsedVars3#1/37 e.eeX_rest#1/2 >/1
    // closed e.eItems#1 as range 7
    // closed e.eIndex#1 as range 13
    // closed e.ePattern#1 as range 17
    // closed e.eItemsAndHoles#1 as range 21
    // closed e.eeX_fix#1 as range 27
    // closed e.etX_next#1 as range 33
    context[45] = context[2];
    context[46] = context[3];
    context[38] = refalrts::tvar_left( context[37], context[45], context[46] );
    if( ! context[38] )
      continue;
    // closed e.eeX_rest#1 as range 45(2)
    //DEBUG: t.tUsedVars#1: 5
    //DEBUG: t.tSrcPos#1: 11
    //DEBUG: t.tUsedVars1#1: 25
    //DEBUG: t.tUsedVars2#1: 31
    //DEBUG: e.eItems#1: 7
    //DEBUG: e.eIndex#1: 13
    //DEBUG: e.ePattern#1: 17
    //DEBUG: e.eItemsAndHoles#1: 21
    //DEBUG: e.eeX_fix#1: 27
    //DEBUG: e.etX_next#1: 33
    //DEBUG: t.tUsedVars3#1: 37
    //DEBUG: e.eeX_rest#1: 2

    refalrts::reset_allocator();
    //TRASH: {REMOVED TILE} {REMOVED TILE} t.tUsedVars#1/5 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} e.eIndex#1/13 {REMOVED TILE} e.ePattern#1/17 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} t.tUsedVars1#1/25 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} t.tUsedVars2#1/31 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ AsIs: (/9 AsIs: e.eItems#1/7 HalfReuse: (/10 } Tile{ HalfReuse: # Brackets/15 } Tile{ AsIs: (/35 } Tile{ HalfReuse: # Variable/24 } Tile{ AsIs: t.tSrcPos#1/11 } Tile{ AsIs: e.eeX_fix#1/27 } Tile{ AsIs: )/20 AsIs: (/23 } # Variable/39 t.tSrcPos#1/11/40 Tile{ AsIs: e.etX_next#1/33 } Tile{ AsIs: )/36 } Tile{ AsIs: )/16 AsIs: (/19 } Tile{ HalfReuse: # Variable/29 } t.tSrcPos#1/11/42 Tile{ AsIs: e.eeX_rest#1/45(2) } Tile{ AsIs: )/30 } Tile{ AsIs: </0 Reuse: & PassiveHoles/4 } Tile{ AsIs: t.tUsedVars3#1/37 } Tile{ AsIs: e.eItemsAndHoles#1/21 } >/44 Tile{ HalfReuse: )/1 ]] }
    if( ! refalrts::alloc_ident( context[39], ident_Variable ) )
      return refalrts::cNoMemory;
    if (! refalrts::copy_evar(context[40], context[41], context[11], context[12]))
      return refalrts::cNoMemory;
    if (! refalrts::copy_evar(context[42], context[43], context[11], context[12]))
      return refalrts::cNoMemory;
    if( ! refalrts::alloc_close_call( context[44] ) )
      return refalrts::cNoMemory;
    refalrts::reinit_open_bracket( context[10] );
    refalrts::reinit_ident( context[15], ident_Brackets );
    refalrts::reinit_ident( context[24], ident_Variable );
    refalrts::reinit_ident( context[29], ident_Variable );
    refalrts::update_name( context[4], ref_PassiveHoles.ref.function );
    refalrts::reinit_close_bracket( context[1] );
    refalrts::link_brackets( context[9], context[1] );
    refalrts::push_stack( context[44] );
    refalrts::push_stack( context[0] );
    refalrts::link_brackets( context[19], context[30] );
    refalrts::link_brackets( context[10], context[16] );
    refalrts::link_brackets( context[23], context[36] );
    refalrts::link_brackets( context[35], context[20] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    res = refalrts::splice_evar( res, context[44], context[44] );
    res = refalrts::splice_evar( res, context[21], context[22] );
    res = refalrts::splice_evar( res, context[37], context[38] );
    res = refalrts::splice_evar( res, context[0], context[4] );
    res = refalrts::splice_evar( res, context[30], context[30] );
    res = refalrts::splice_evar( res, context[45], context[46] );
    res = refalrts::splice_evar( res, context[42], context[43] );
    res = refalrts::splice_evar( res, context[29], context[29] );
    res = refalrts::splice_evar( res, context[16], context[19] );
    res = refalrts::splice_evar( res, context[36], context[36] );
    res = refalrts::splice_evar( res, context[33], context[34] );
    res = refalrts::splice_evar( res, context[39], context[41] );
    res = refalrts::splice_evar( res, context[20], context[23] );
    res = refalrts::splice_evar( res, context[27], context[28] );
    res = refalrts::splice_evar( res, context[11], context[12] );
    res = refalrts::splice_evar( res, context[24], context[24] );
    res = refalrts::splice_evar( res, context[35], context[35] );
    res = refalrts::splice_evar( res, context[15], context[15] );
    res = refalrts::splice_evar( res, context[9], context[10] );
    refalrts::splice_to_freelist_open( trash_prev, res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence();

  // t.idx ( e.idx ) t.idx ( e.idx ) ( e.idx ) ( e.idx ) t.idx ( e.idx ) t.idx ( e.idx ) e.idx
  // </0 & T2_check1/4 t.tUsedVars#1/5 (/9 e.eItems#1/7 )/10 t.tSrcPos#1/11 (/15 e.eIndex#1/13 )/16 (/19 e.ePattern#1/17 )/20 (/23 e.eItemsAndHoles#1/21 )/24 t.tUsedVars1#1/25 (/29 e.eeX_fix#1/27 )/30 t.tUsedVars2#1/31 (/35 e.etX_next#1/33 )/36 e.eOther#1/2 >/1
  // closed e.eItems#1 as range 7
  // closed e.eIndex#1 as range 13
  // closed e.ePattern#1 as range 17
  // closed e.eItemsAndHoles#1 as range 21
  // closed e.eeX_fix#1 as range 27
  // closed e.etX_next#1 as range 33
  // closed e.eOther#1 as range 2
  //DEBUG: t.tUsedVars#1: 5
  //DEBUG: t.tSrcPos#1: 11
  //DEBUG: t.tUsedVars1#1: 25
  //DEBUG: t.tUsedVars2#1: 31
  //DEBUG: e.eItems#1: 7
  //DEBUG: e.eIndex#1: 13
  //DEBUG: e.ePattern#1: 17
  //DEBUG: e.eItemsAndHoles#1: 21
  //DEBUG: e.eeX_fix#1: 27
  //DEBUG: e.etX_next#1: 33
  //DEBUG: e.eOther#1: 2

  refalrts::reset_allocator();
  //TRASH: {REMOVED TILE} (/35 {REMOVED TILE} )/36 e.eOther#1/2 {REMOVED TILE}
  //RESULT: Tile{ [[ AsIs: </0 Reuse: & T2_cont0/4 AsIs: t.tUsedVars#1/5 AsIs: (/9 AsIs: e.eItems#1/7 AsIs: )/10 AsIs: t.tSrcPos#1/11 AsIs: (/15 AsIs: e.eIndex#1/13 AsIs: )/16 AsIs: (/19 AsIs: e.ePattern#1/17 AsIs: )/20 AsIs: (/23 AsIs: e.eItemsAndHoles#1/21 AsIs: )/24 AsIs: t.tUsedVars1#1/25 AsIs: (/29 AsIs: e.eeX_fix#1/27 AsIs: )/30 AsIs: t.tUsedVars2#1/31 } Tile{ AsIs: e.etX_next#1/33 } Tile{ AsIs: >/1 ]] }
  refalrts::update_name( context[4], ref_T2u_cont0.ref.function );
  refalrts::push_stack( context[1] );
  refalrts::push_stack( context[0] );
  refalrts::link_brackets( context[29], context[30] );
  refalrts::link_brackets( context[23], context[24] );
  refalrts::link_brackets( context[19], context[20] );
  refalrts::link_brackets( context[15], context[16] );
  refalrts::link_brackets( context[9], context[10] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[1];
  res = refalrts::splice_evar( res, context[33], context[34] );
  refalrts::splice_to_freelist_open( context[32], res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_T2u_check1("T2_check1", 786251477U, 1176157594U, func_T2u_check1);

static refalrts::FnResult func_T2u_cont0(refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  refalrts::this_is_generated_function();
  // issue here memory for vars with 31 elems
  refalrts::Iter context[31];
  refalrts::zeros( context, 31 );
  // </0 & T2_cont0/4 t.tUsedVars#1/5 (/9 e.eItems#1/7 )/10 t.tSrcPos#1/11 (/15 e.eIndex#1/13 )/16 (/19 e.ePattern#1/17 )/20 (/23 e.eItemsAndHoles#1/21 )/24 t.tUsedVars1#1/25 (/29 e.eeX_fix#1/27 )/30 e.eOther#1/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  context[6] = refalrts::tvar_left( context[5], context[2], context[3] );
  if( ! context[6] )
    return refalrts::cRecognitionImpossible;
  context[7] = 0;
  context[8] = 0;
  context[9] = refalrts::brackets_left( context[7], context[8], context[2], context[3] );
  if( ! context[9] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[9], context[10]);
  // closed e.eItems#1 as range 7
  context[12] = refalrts::tvar_left( context[11], context[2], context[3] );
  if( ! context[12] )
    return refalrts::cRecognitionImpossible;
  context[13] = 0;
  context[14] = 0;
  context[15] = refalrts::brackets_left( context[13], context[14], context[2], context[3] );
  if( ! context[15] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[15], context[16]);
  context[17] = 0;
  context[18] = 0;
  context[19] = refalrts::brackets_left( context[17], context[18], context[2], context[3] );
  if( ! context[19] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[19], context[20]);
  context[21] = 0;
  context[22] = 0;
  context[23] = refalrts::brackets_left( context[21], context[22], context[2], context[3] );
  if( ! context[23] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[23], context[24]);
  // closed e.eIndex#1 as range 13
  // closed e.ePattern#1 as range 17
  // closed e.eItemsAndHoles#1 as range 21
  context[26] = refalrts::tvar_left( context[25], context[2], context[3] );
  if( ! context[26] )
    return refalrts::cRecognitionImpossible;
  context[27] = 0;
  context[28] = 0;
  context[29] = refalrts::brackets_left( context[27], context[28], context[2], context[3] );
  if( ! context[29] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[29], context[30]);
  // closed e.eeX_fix#1 as range 27
  // closed e.eOther#1 as range 2
  //DEBUG: t.tUsedVars#1: 5
  //DEBUG: e.eItems#1: 7
  //DEBUG: t.tSrcPos#1: 11
  //DEBUG: e.eIndex#1: 13
  //DEBUG: e.ePattern#1: 17
  //DEBUG: e.eItemsAndHoles#1: 21
  //DEBUG: t.tUsedVars1#1: 25
  //DEBUG: e.eeX_fix#1: 27
  //DEBUG: e.eOther#1: 2

  refalrts::reset_allocator();
  //TRASH: {REMOVED TILE} (/29 {REMOVED TILE} )/30 e.eOther#1/2 {REMOVED TILE}
  //RESULT: Tile{ [[ AsIs: </0 Reuse: & T2_cont/4 AsIs: t.tUsedVars#1/5 AsIs: (/9 AsIs: e.eItems#1/7 AsIs: )/10 AsIs: t.tSrcPos#1/11 AsIs: (/15 AsIs: e.eIndex#1/13 AsIs: )/16 AsIs: (/19 AsIs: e.ePattern#1/17 AsIs: )/20 AsIs: (/23 AsIs: e.eItemsAndHoles#1/21 AsIs: )/24 AsIs: t.tUsedVars1#1/25 } Tile{ AsIs: e.eeX_fix#1/27 } Tile{ AsIs: >/1 ]] }
  refalrts::update_name( context[4], ref_T2u_cont.ref.function );
  refalrts::push_stack( context[1] );
  refalrts::push_stack( context[0] );
  refalrts::link_brackets( context[23], context[24] );
  refalrts::link_brackets( context[19], context[20] );
  refalrts::link_brackets( context[15], context[16] );
  refalrts::link_brackets( context[9], context[10] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[1];
  res = refalrts::splice_evar( res, context[27], context[28] );
  refalrts::splice_to_freelist_open( context[26], res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_T2u_cont0("T2_cont0", 786251477U, 1176157594U, func_T2u_cont0);

static refalrts::FnResult func_T3(refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  refalrts::this_is_generated_function();
  // issue here memory for vars with 35 elems
  refalrts::Iter context[35];
  refalrts::zeros( context, 35 );
  // </0 & T3/4 t.tUsedVars#1/5 e.eItems#1/7 (/11 # HOLE/13 (/16 # Variable/18 t.tSrcPos#1/19 'e'/21 e.eIndex#1/14 )/17 e.ePattern#1/9 )/12 e.eItemsAndHoles#1/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  context[6] = refalrts::tvar_left( context[5], context[2], context[3] );
  if( ! context[6] )
    return refalrts::cRecognitionImpossible;
  context[7] = 0;
  context[8] = 0;
  refalrts::start_e_loop();
  do {
    context[33] = context[2];
    context[34] = context[3];
    context[9] = 0;
    context[10] = 0;
    context[11] = refalrts::brackets_left( context[9], context[10], context[33], context[34] );
    if( ! context[11] )
      continue;
    refalrts::bracket_pointers(context[11], context[12]);
    context[13] = refalrts::ident_left(  ident_HOLE, context[9], context[10] );
    if( ! context[13] )
      continue;
    context[14] = 0;
    context[15] = 0;
    context[16] = refalrts::brackets_left( context[14], context[15], context[9], context[10] );
    if( ! context[16] )
      continue;
    refalrts::bracket_pointers(context[16], context[17]);
    context[18] = refalrts::ident_left(  ident_Variable, context[14], context[15] );
    if( ! context[18] )
      continue;
    // closed e.ePattern#1 as range 9
    // closed e.eItemsAndHoles#1 as range 33(2)
    context[20] = refalrts::tvar_left( context[19], context[14], context[15] );
    if( ! context[20] )
      continue;
    context[21] = refalrts::char_left( 'e', context[14], context[15] );
    if( ! context[21] )
      continue;
    // closed e.eIndex#1 as range 14
    //DEBUG: t.tUsedVars#1: 5
    //DEBUG: e.eItems#1: 7
    //DEBUG: e.ePattern#1: 9
    //DEBUG: e.eItemsAndHoles#1: 2
    //DEBUG: t.tSrcPos#1: 19
    //DEBUG: e.eIndex#1: 14

    refalrts::reset_allocator();
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 Reuse: & T3_check/4 AsIs: t.tUsedVars#1/5 } Tile{ AsIs: (/11 } Tile{ AsIs: e.eItems#1/7 } Tile{ HalfReuse: )/18 AsIs: t.tSrcPos#1/19 HalfReuse: (/21 AsIs: e.eIndex#1/14 AsIs: )/17 } (/22 Tile{ AsIs: e.ePattern#1/9 } Tile{ HalfReuse: )/13 AsIs: (/16 } Tile{ AsIs: e.eItemsAndHoles#1/33(2) } Tile{ AsIs: )/12 } </23 & NewName/24 t.tUsedVars#1/5/25 'e'/27 e.eIndex#1/14/28"_fix"/30 >/32 Tile{ AsIs: >/1 ]] }
    if( ! refalrts::alloc_open_bracket( context[22] ) )
      return refalrts::cNoMemory;
    if( ! refalrts::alloc_open_call( context[23] ) )
      return refalrts::cNoMemory;
    if( ! refalrts::alloc_name( context[24], ref_NewName.ref.function ) )
      return refalrts::cNoMemory;
    if (! refalrts::copy_evar(context[25], context[26], context[5], context[6]))
      return refalrts::cNoMemory;
    if( ! refalrts::alloc_char( context[27], 'e' ) )
      return refalrts::cNoMemory;
    if (! refalrts::copy_evar(context[28], context[29], context[14], context[15]))
      return refalrts::cNoMemory;
    if( ! refalrts::alloc_chars( context[30], context[31], "_fix", 4 ) )
      return refalrts::cNoMemory;
    if( ! refalrts::alloc_close_call( context[32] ) )
      return refalrts::cNoMemory;
    refalrts::update_name( context[4], ref_T3u_check.ref.function );
    refalrts::reinit_close_bracket( context[18] );
    refalrts::reinit_open_bracket( context[21] );
    refalrts::reinit_close_bracket( context[13] );
    refalrts::push_stack( context[1] );
    refalrts::push_stack( context[0] );
    refalrts::push_stack( context[32] );
    refalrts::push_stack( context[23] );
    refalrts::link_brackets( context[16], context[12] );
    refalrts::link_brackets( context[22], context[13] );
    refalrts::link_brackets( context[21], context[17] );
    refalrts::link_brackets( context[11], context[18] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    res = refalrts::splice_evar( res, context[23], context[32] );
    res = refalrts::splice_evar( res, context[12], context[12] );
    res = refalrts::splice_evar( res, context[33], context[34] );
    res = refalrts::splice_evar( res, context[13], context[16] );
    res = refalrts::splice_evar( res, context[9], context[10] );
    res = refalrts::splice_evar( res, context[22], context[22] );
    res = refalrts::splice_evar( res, context[18], context[17] );
    res = refalrts::splice_evar( res, context[7], context[8] );
    res = refalrts::splice_evar( res, context[11], context[11] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( refalrts::open_evar_advance( context[7], context[8], context[2], context[3] ) );
  return refalrts::cRecognitionImpossible;
}

static refalrts::NativeReference nat_ref_T3("T3", 786251477U, 1176157594U, func_T3);

static refalrts::FnResult func_T3u_check(refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  refalrts::this_is_generated_function();
  // issue here memory for vars with 29 elems
  refalrts::Iter context[29];
  refalrts::zeros( context, 29 );
  //FAST GEN: t.$ ( e.$ ) t.$ ( e.$ ) ( e.$ ) ( e.$ ) e.$
  //GLOBAL GEN: t.$ ( e.$ ) t.$ ( e.$ ) ( e.$ ) ( e.$ ) e.$
  // </0 & T3_check/4 t.idx#0/5 (/9 e.idxVB#0/7 )/10 t.idxVT#0/11 (/15 e.idxVTVB#0/13 )/16 (/19 e.idxVTVTB#0/17 )/20 (/23 e.idxVTVTTB#0/21 )/24 e.idxVTVTTT#0/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  context[6] = refalrts::tvar_left( context[5], context[2], context[3] );
  if( ! context[6] )
    return refalrts::cRecognitionImpossible;
  context[7] = 0;
  context[8] = 0;
  context[9] = refalrts::brackets_left( context[7], context[8], context[2], context[3] );
  if( ! context[9] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[9], context[10]);
  // closed e.idxVB#0 as range 7
  context[12] = refalrts::tvar_left( context[11], context[2], context[3] );
  if( ! context[12] )
    return refalrts::cRecognitionImpossible;
  context[13] = 0;
  context[14] = 0;
  context[15] = refalrts::brackets_left( context[13], context[14], context[2], context[3] );
  if( ! context[15] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[15], context[16]);
  context[17] = 0;
  context[18] = 0;
  context[19] = refalrts::brackets_left( context[17], context[18], context[2], context[3] );
  if( ! context[19] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[19], context[20]);
  context[21] = 0;
  context[22] = 0;
  context[23] = refalrts::brackets_left( context[21], context[22], context[2], context[3] );
  if( ! context[23] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[23], context[24]);
  // closed e.idxVTVB#0 as range 13
  // closed e.idxVTVTB#0 as range 17
  // closed e.idxVTVTTB#0 as range 21
  // closed e.idxVTVTTT#0 as range 2
  do {
    // t.idx ( e.idx ) t.idx ( e.idx ) ( e.idx ) ( e.idx ) t.idx e.idx
    // </0 & T3_check/4 t.tUsedVars#1/5 (/9 e.eItems#1/7 )/10 t.tSrcPos#1/11 (/15 e.eIndex#1/13 )/16 (/19 e.ePattern#1/17 )/20 (/23 e.eItemsAndHoles#1/21 )/24 t.tUsedVars1#1/25 e.eeX_fix#1/2 >/1
    // closed e.eItems#1 as range 7
    // closed e.eIndex#1 as range 13
    // closed e.ePattern#1 as range 17
    // closed e.eItemsAndHoles#1 as range 21
    context[27] = context[2];
    context[28] = context[3];
    context[26] = refalrts::tvar_left( context[25], context[27], context[28] );
    if( ! context[26] )
      continue;
    // closed e.eeX_fix#1 as range 27(2)
    //DEBUG: t.tUsedVars#1: 5
    //DEBUG: t.tSrcPos#1: 11
    //DEBUG: e.eItems#1: 7
    //DEBUG: e.eIndex#1: 13
    //DEBUG: e.ePattern#1: 17
    //DEBUG: e.eItemsAndHoles#1: 21
    //DEBUG: t.tUsedVars1#1: 25
    //DEBUG: e.eeX_fix#1: 2

    refalrts::reset_allocator();
    //TRASH: {REMOVED TILE} {REMOVED TILE} t.tUsedVars#1/5 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} e.eIndex#1/13 {REMOVED TILE} e.ePattern#1/17 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ AsIs: (/9 AsIs: e.eItems#1/7 HalfReuse: (/10 } Tile{ HalfReuse: # Brackets/16 AsIs: (/19 } Tile{ HalfReuse: # Variable/15 } Tile{ AsIs: t.tSrcPos#1/11 } Tile{ AsIs: e.eeX_fix#1/27(2) } Tile{ AsIs: )/20 HalfReuse: )/23 } Tile{ AsIs: </0 Reuse: & PassiveHoles/4 } Tile{ AsIs: t.tUsedVars1#1/25 } Tile{ AsIs: e.eItemsAndHoles#1/21 } Tile{ HalfReuse: >/24 } Tile{ HalfReuse: )/1 ]] }
    refalrts::reinit_open_bracket( context[10] );
    refalrts::reinit_ident( context[16], ident_Brackets );
    refalrts::reinit_ident( context[15], ident_Variable );
    refalrts::reinit_close_bracket( context[23] );
    refalrts::update_name( context[4], ref_PassiveHoles.ref.function );
    refalrts::reinit_close_call( context[24] );
    refalrts::reinit_close_bracket( context[1] );
    refalrts::link_brackets( context[9], context[1] );
    refalrts::push_stack( context[24] );
    refalrts::push_stack( context[0] );
    refalrts::link_brackets( context[10], context[23] );
    refalrts::link_brackets( context[19], context[20] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    res = refalrts::splice_evar( res, context[24], context[24] );
    res = refalrts::splice_evar( res, context[21], context[22] );
    res = refalrts::splice_evar( res, context[25], context[26] );
    res = refalrts::splice_evar( res, context[0], context[4] );
    res = refalrts::splice_evar( res, context[20], context[23] );
    res = refalrts::splice_evar( res, context[27], context[28] );
    res = refalrts::splice_evar( res, context[11], context[12] );
    res = refalrts::splice_evar( res, context[15], context[15] );
    res = refalrts::splice_evar( res, context[16], context[19] );
    res = refalrts::splice_evar( res, context[9], context[10] );
    refalrts::splice_to_freelist_open( trash_prev, res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence();

  // t.idx ( e.idx ) t.idx ( e.idx ) ( e.idx ) ( e.idx ) e.idx
  // </0 & T3_check/4 t.tUsedVars#1/5 (/9 e.eItems#1/7 )/10 t.tSrcPos#1/11 (/15 e.eIndex#1/13 )/16 (/19 e.ePattern#1/17 )/20 (/23 e.eItemsAndHoles#1/21 )/24 e.eOther#1/2 >/1
  // closed e.eItems#1 as range 7
  // closed e.eIndex#1 as range 13
  // closed e.ePattern#1 as range 17
  // closed e.eItemsAndHoles#1 as range 21
  // closed e.eOther#1 as range 2
  //DEBUG: t.tUsedVars#1: 5
  //DEBUG: t.tSrcPos#1: 11
  //DEBUG: e.eItems#1: 7
  //DEBUG: e.eIndex#1: 13
  //DEBUG: e.ePattern#1: 17
  //DEBUG: e.eItemsAndHoles#1: 21
  //DEBUG: e.eOther#1: 2

  refalrts::reset_allocator();
  //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} e.eOther#1/2 {REMOVED TILE}
  //RESULT: Tile{ [[ AsIs: </0 Reuse: & T3_forward/4 AsIs: t.tUsedVars#1/5 AsIs: (/9 AsIs: e.eItems#1/7 AsIs: )/10 } Tile{ AsIs: (/19 } Tile{ HalfReuse: # HOLE/20 AsIs: (/23 } # Variable/25 Tile{ AsIs: t.tSrcPos#1/11 HalfReuse: 'e'/15 AsIs: e.eIndex#1/13 AsIs: )/16 } Tile{ AsIs: e.ePattern#1/17 } Tile{ AsIs: )/24 } Tile{ AsIs: e.eItemsAndHoles#1/21 } Tile{ AsIs: >/1 ]] }
  if( ! refalrts::alloc_ident( context[25], ident_Variable ) )
    return refalrts::cNoMemory;
  refalrts::update_name( context[4], ref_T3u_forward.ref.function );
  refalrts::reinit_ident( context[20], ident_HOLE );
  refalrts::reinit_char( context[15], 'e' );
  refalrts::push_stack( context[1] );
  refalrts::push_stack( context[0] );
  refalrts::link_brackets( context[19], context[24] );
  refalrts::link_brackets( context[23], context[16] );
  refalrts::link_brackets( context[9], context[10] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[1];
  res = refalrts::splice_evar( res, context[21], context[22] );
  res = refalrts::splice_evar( res, context[24], context[24] );
  res = refalrts::splice_evar( res, context[17], context[18] );
  res = refalrts::splice_evar( res, context[11], context[16] );
  res = refalrts::splice_evar( res, context[25], context[25] );
  res = refalrts::splice_evar( res, context[20], context[23] );
  res = refalrts::splice_evar( res, context[19], context[19] );
  refalrts::splice_to_freelist_open( context[10], res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_T3u_check("T3_check", 786251477U, 1176157594U, func_T3u_check);

static refalrts::FnResult func_T3u_forward(refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  refalrts::this_is_generated_function();
  // issue here memory for vars with 13 elems
  refalrts::Iter context[13];
  refalrts::zeros( context, 13 );
  // </0 & T3_forward/4 t.tUsedVars#1/5 (/9 e.eItems_fix#1/7 )/10 t.tItems_next#1/11 e.eItems_rest#1/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  context[6] = refalrts::tvar_left( context[5], context[2], context[3] );
  if( ! context[6] )
    return refalrts::cRecognitionImpossible;
  context[7] = 0;
  context[8] = 0;
  context[9] = refalrts::brackets_left( context[7], context[8], context[2], context[3] );
  if( ! context[9] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[9], context[10]);
  // closed e.eItems_fix#1 as range 7
  context[12] = refalrts::tvar_left( context[11], context[2], context[3] );
  if( ! context[12] )
    return refalrts::cRecognitionImpossible;
  // closed e.eItems_rest#1 as range 2
  //DEBUG: t.tUsedVars#1: 5
  //DEBUG: e.eItems_fix#1: 7
  //DEBUG: t.tItems_next#1: 11
  //DEBUG: e.eItems_rest#1: 2

  refalrts::reset_allocator();
  //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ AsIs: </0 Reuse: & T3_next/4 AsIs: t.tUsedVars#1/5 AsIs: (/9 } Tile{ AsIs: e.eItems_fix#1/7 } Tile{ AsIs: t.tItems_next#1/11 } Tile{ AsIs: )/10 } Tile{ AsIs: e.eItems_rest#1/2 } Tile{ AsIs: >/1 ]] }
  refalrts::update_name( context[4], ref_T3u_next.ref.function );
  refalrts::push_stack( context[1] );
  refalrts::push_stack( context[0] );
  refalrts::link_brackets( context[9], context[10] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[1];
  res = refalrts::splice_evar( res, context[2], context[3] );
  res = refalrts::splice_evar( res, context[10], context[10] );
  res = refalrts::splice_evar( res, context[11], context[12] );
  res = refalrts::splice_evar( res, context[7], context[8] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_T3u_forward("T3_forward", 786251477U, 1176157594U, func_T3u_forward);

static refalrts::FnResult func_T3u_next(refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  refalrts::this_is_generated_function();
  // issue here memory for vars with 37 elems
  refalrts::Iter context[37];
  refalrts::zeros( context, 37 );
  // </0 & T3_next/4 t.tUsedVars#1/5 (/9 e.eItems_fix#1/7 )/10 e.eItems_var#1/11 (/15 # HOLE/17 (/20 # Variable/22 t.tSrcPos#1/23 'e'/25 e.eIndex#1/18 )/21 e.ePattern#1/13 )/16 e.eItemsAndHoles#1/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  context[6] = refalrts::tvar_left( context[5], context[2], context[3] );
  if( ! context[6] )
    return refalrts::cRecognitionImpossible;
  context[7] = 0;
  context[8] = 0;
  context[9] = refalrts::brackets_left( context[7], context[8], context[2], context[3] );
  if( ! context[9] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[9], context[10]);
  // closed e.eItems_fix#1 as range 7
  context[11] = 0;
  context[12] = 0;
  refalrts::start_e_loop();
  do {
    context[35] = context[2];
    context[36] = context[3];
    context[13] = 0;
    context[14] = 0;
    context[15] = refalrts::brackets_left( context[13], context[14], context[35], context[36] );
    if( ! context[15] )
      continue;
    refalrts::bracket_pointers(context[15], context[16]);
    context[17] = refalrts::ident_left(  ident_HOLE, context[13], context[14] );
    if( ! context[17] )
      continue;
    context[18] = 0;
    context[19] = 0;
    context[20] = refalrts::brackets_left( context[18], context[19], context[13], context[14] );
    if( ! context[20] )
      continue;
    refalrts::bracket_pointers(context[20], context[21]);
    context[22] = refalrts::ident_left(  ident_Variable, context[18], context[19] );
    if( ! context[22] )
      continue;
    // closed e.ePattern#1 as range 13
    // closed e.eItemsAndHoles#1 as range 35(2)
    context[24] = refalrts::tvar_left( context[23], context[18], context[19] );
    if( ! context[24] )
      continue;
    context[25] = refalrts::char_left( 'e', context[18], context[19] );
    if( ! context[25] )
      continue;
    // closed e.eIndex#1 as range 18
    //DEBUG: t.tUsedVars#1: 5
    //DEBUG: e.eItems_fix#1: 7
    //DEBUG: e.eItems_var#1: 11
    //DEBUG: e.ePattern#1: 13
    //DEBUG: e.eItemsAndHoles#1: 2
    //DEBUG: t.tSrcPos#1: 23
    //DEBUG: e.eIndex#1: 18

    refalrts::reset_allocator();
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 Reuse: & T3_check/4 AsIs: t.tUsedVars#1/5 AsIs: (/9 } Tile{ AsIs: e.eItems_fix#1/7 } Tile{ AsIs: e.eItems_var#1/11 } Tile{ HalfReuse: )/22 AsIs: t.tSrcPos#1/23 HalfReuse: (/25 AsIs: e.eIndex#1/18 AsIs: )/21 } Tile{ AsIs: (/15 } Tile{ AsIs: e.ePattern#1/13 } Tile{ HalfReuse: )/17 AsIs: (/20 } Tile{ AsIs: e.eItemsAndHoles#1/35(2) } Tile{ AsIs: )/16 } Tile{ HalfReuse: </10 } & NewName/26 t.tUsedVars#1/5/27 'e'/29 e.eIndex#1/18/30"_fix"/32 >/34 Tile{ AsIs: >/1 ]] }
    if( ! refalrts::alloc_name( context[26], ref_NewName.ref.function ) )
      return refalrts::cNoMemory;
    if (! refalrts::copy_evar(context[27], context[28], context[5], context[6]))
      return refalrts::cNoMemory;
    if( ! refalrts::alloc_char( context[29], 'e' ) )
      return refalrts::cNoMemory;
    if (! refalrts::copy_evar(context[30], context[31], context[18], context[19]))
      return refalrts::cNoMemory;
    if( ! refalrts::alloc_chars( context[32], context[33], "_fix", 4 ) )
      return refalrts::cNoMemory;
    if( ! refalrts::alloc_close_call( context[34] ) )
      return refalrts::cNoMemory;
    refalrts::update_name( context[4], ref_T3u_check.ref.function );
    refalrts::reinit_close_bracket( context[22] );
    refalrts::reinit_open_bracket( context[25] );
    refalrts::reinit_close_bracket( context[17] );
    refalrts::reinit_open_call( context[10] );
    refalrts::push_stack( context[1] );
    refalrts::push_stack( context[0] );
    refalrts::push_stack( context[34] );
    refalrts::push_stack( context[10] );
    refalrts::link_brackets( context[20], context[16] );
    refalrts::link_brackets( context[15], context[17] );
    refalrts::link_brackets( context[25], context[21] );
    refalrts::link_brackets( context[9], context[22] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    res = refalrts::splice_evar( res, context[26], context[34] );
    res = refalrts::splice_evar( res, context[10], context[10] );
    res = refalrts::splice_evar( res, context[16], context[16] );
    res = refalrts::splice_evar( res, context[35], context[36] );
    res = refalrts::splice_evar( res, context[17], context[20] );
    res = refalrts::splice_evar( res, context[13], context[14] );
    res = refalrts::splice_evar( res, context[15], context[15] );
    res = refalrts::splice_evar( res, context[22], context[21] );
    res = refalrts::splice_evar( res, context[11], context[12] );
    res = refalrts::splice_evar( res, context[7], context[8] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( refalrts::open_evar_advance( context[11], context[12], context[2], context[3] ) );
  return refalrts::cRecognitionImpossible;
}

static refalrts::NativeReference nat_ref_T3u_next("T3_next", 786251477U, 1176157594U, func_T3u_next);

static refalrts::FnResult func_T4(refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  refalrts::this_is_generated_function();
  // issue here memory for vars with 35 elems
  refalrts::Iter context[35];
  refalrts::zeros( context, 35 );
  // </0 & T4/4 t.tUsedVars#1/5 e.eItems#1/7 (/11 # HOLE/13 (/16 # Variable/18 t.tSrcPos#1/19 'e'/21 e.eIndex#1/14 )/17 e.ePattern#1/9 )/12 e.eItemsAndHoles#1/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  context[6] = refalrts::tvar_left( context[5], context[2], context[3] );
  if( ! context[6] )
    return refalrts::cRecognitionImpossible;
  context[7] = 0;
  context[8] = 0;
  refalrts::start_e_loop();
  do {
    context[33] = context[2];
    context[34] = context[3];
    context[9] = 0;
    context[10] = 0;
    context[11] = refalrts::brackets_left( context[9], context[10], context[33], context[34] );
    if( ! context[11] )
      continue;
    refalrts::bracket_pointers(context[11], context[12]);
    context[13] = refalrts::ident_left(  ident_HOLE, context[9], context[10] );
    if( ! context[13] )
      continue;
    context[14] = 0;
    context[15] = 0;
    context[16] = refalrts::brackets_left( context[14], context[15], context[9], context[10] );
    if( ! context[16] )
      continue;
    refalrts::bracket_pointers(context[16], context[17]);
    context[18] = refalrts::ident_left(  ident_Variable, context[14], context[15] );
    if( ! context[18] )
      continue;
    // closed e.ePattern#1 as range 9
    // closed e.eItemsAndHoles#1 as range 33(2)
    context[20] = refalrts::tvar_left( context[19], context[14], context[15] );
    if( ! context[20] )
      continue;
    context[21] = refalrts::char_left( 'e', context[14], context[15] );
    if( ! context[21] )
      continue;
    // closed e.eIndex#1 as range 14
    //DEBUG: t.tUsedVars#1: 5
    //DEBUG: e.eItems#1: 7
    //DEBUG: e.ePattern#1: 9
    //DEBUG: e.eItemsAndHoles#1: 2
    //DEBUG: t.tSrcPos#1: 19
    //DEBUG: e.eIndex#1: 14

    refalrts::reset_allocator();
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 Reuse: & T4_check/4 AsIs: t.tUsedVars#1/5 } Tile{ AsIs: (/11 } Tile{ AsIs: e.eItems#1/7 } Tile{ HalfReuse: )/18 AsIs: t.tSrcPos#1/19 HalfReuse: (/21 AsIs: e.eIndex#1/14 AsIs: )/17 } (/22 Tile{ AsIs: e.ePattern#1/9 } Tile{ HalfReuse: )/13 AsIs: (/16 } Tile{ AsIs: e.eItemsAndHoles#1/33(2) } Tile{ AsIs: )/12 } </23 & NewName/24 t.tUsedVars#1/5/25 'e'/27 e.eIndex#1/14/28"_fix"/30 >/32 Tile{ AsIs: >/1 ]] }
    if( ! refalrts::alloc_open_bracket( context[22] ) )
      return refalrts::cNoMemory;
    if( ! refalrts::alloc_open_call( context[23] ) )
      return refalrts::cNoMemory;
    if( ! refalrts::alloc_name( context[24], ref_NewName.ref.function ) )
      return refalrts::cNoMemory;
    if (! refalrts::copy_evar(context[25], context[26], context[5], context[6]))
      return refalrts::cNoMemory;
    if( ! refalrts::alloc_char( context[27], 'e' ) )
      return refalrts::cNoMemory;
    if (! refalrts::copy_evar(context[28], context[29], context[14], context[15]))
      return refalrts::cNoMemory;
    if( ! refalrts::alloc_chars( context[30], context[31], "_fix", 4 ) )
      return refalrts::cNoMemory;
    if( ! refalrts::alloc_close_call( context[32] ) )
      return refalrts::cNoMemory;
    refalrts::update_name( context[4], ref_T4u_check.ref.function );
    refalrts::reinit_close_bracket( context[18] );
    refalrts::reinit_open_bracket( context[21] );
    refalrts::reinit_close_bracket( context[13] );
    refalrts::push_stack( context[1] );
    refalrts::push_stack( context[0] );
    refalrts::push_stack( context[32] );
    refalrts::push_stack( context[23] );
    refalrts::link_brackets( context[16], context[12] );
    refalrts::link_brackets( context[22], context[13] );
    refalrts::link_brackets( context[21], context[17] );
    refalrts::link_brackets( context[11], context[18] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    res = refalrts::splice_evar( res, context[23], context[32] );
    res = refalrts::splice_evar( res, context[12], context[12] );
    res = refalrts::splice_evar( res, context[33], context[34] );
    res = refalrts::splice_evar( res, context[13], context[16] );
    res = refalrts::splice_evar( res, context[9], context[10] );
    res = refalrts::splice_evar( res, context[22], context[22] );
    res = refalrts::splice_evar( res, context[18], context[17] );
    res = refalrts::splice_evar( res, context[7], context[8] );
    res = refalrts::splice_evar( res, context[11], context[11] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( refalrts::open_evar_advance( context[7], context[8], context[2], context[3] ) );
  return refalrts::cRecognitionImpossible;
}

static refalrts::NativeReference nat_ref_T4("T4", 786251477U, 1176157594U, func_T4);

static refalrts::FnResult func_T4u_check(refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  refalrts::this_is_generated_function();
  // issue here memory for vars with 29 elems
  refalrts::Iter context[29];
  refalrts::zeros( context, 29 );
  //FAST GEN: t.$ ( e.$ ) t.$ ( e.$ ) ( e.$ ) ( e.$ ) e.$
  //GLOBAL GEN: t.$ ( e.$ ) t.$ ( e.$ ) ( e.$ ) ( e.$ ) e.$
  // </0 & T4_check/4 t.idx#0/5 (/9 e.idxVB#0/7 )/10 t.idxVT#0/11 (/15 e.idxVTVB#0/13 )/16 (/19 e.idxVTVTB#0/17 )/20 (/23 e.idxVTVTTB#0/21 )/24 e.idxVTVTTT#0/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  context[6] = refalrts::tvar_left( context[5], context[2], context[3] );
  if( ! context[6] )
    return refalrts::cRecognitionImpossible;
  context[7] = 0;
  context[8] = 0;
  context[9] = refalrts::brackets_left( context[7], context[8], context[2], context[3] );
  if( ! context[9] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[9], context[10]);
  // closed e.idxVB#0 as range 7
  context[12] = refalrts::tvar_left( context[11], context[2], context[3] );
  if( ! context[12] )
    return refalrts::cRecognitionImpossible;
  context[13] = 0;
  context[14] = 0;
  context[15] = refalrts::brackets_left( context[13], context[14], context[2], context[3] );
  if( ! context[15] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[15], context[16]);
  context[17] = 0;
  context[18] = 0;
  context[19] = refalrts::brackets_left( context[17], context[18], context[2], context[3] );
  if( ! context[19] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[19], context[20]);
  context[21] = 0;
  context[22] = 0;
  context[23] = refalrts::brackets_left( context[21], context[22], context[2], context[3] );
  if( ! context[23] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[23], context[24]);
  // closed e.idxVTVB#0 as range 13
  // closed e.idxVTVTB#0 as range 17
  // closed e.idxVTVTTB#0 as range 21
  // closed e.idxVTVTTT#0 as range 2
  do {
    // t.idx ( e.idx ) t.idx ( e.idx ) ( e.idx ) ( e.idx ) t.idx e.idx
    // </0 & T4_check/4 t.tUsedVars#1/5 (/9 e.eItems#1/7 )/10 t.tSrcPos#1/11 (/15 e.eIndex#1/13 )/16 (/19 e.ePattern#1/17 )/20 (/23 e.eItemsAndHoles#1/21 )/24 t.tUsedVars1#1/25 e.eeX_fix#1/2 >/1
    // closed e.eItems#1 as range 7
    // closed e.eIndex#1 as range 13
    // closed e.ePattern#1 as range 17
    // closed e.eItemsAndHoles#1 as range 21
    context[27] = context[2];
    context[28] = context[3];
    context[26] = refalrts::tvar_left( context[25], context[27], context[28] );
    if( ! context[26] )
      continue;
    // closed e.eeX_fix#1 as range 27(2)
    //DEBUG: t.tUsedVars#1: 5
    //DEBUG: t.tSrcPos#1: 11
    //DEBUG: e.eItems#1: 7
    //DEBUG: e.eIndex#1: 13
    //DEBUG: e.ePattern#1: 17
    //DEBUG: e.eItemsAndHoles#1: 21
    //DEBUG: t.tUsedVars1#1: 25
    //DEBUG: e.eeX_fix#1: 2

    refalrts::reset_allocator();
    //TRASH: {REMOVED TILE} {REMOVED TILE} t.tUsedVars#1/5 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} e.eIndex#1/13 )/16 (/19 e.ePattern#1/17 )/20 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ AsIs: (/9 AsIs: e.eItems#1/7 HalfReuse: (/10 } Tile{ HalfReuse: # Variable/15 } Tile{ AsIs: t.tSrcPos#1/11 } Tile{ AsIs: e.eeX_fix#1/27(2) } Tile{ AsIs: )/24 } Tile{ AsIs: </0 Reuse: & PassiveHoles/4 } Tile{ AsIs: t.tUsedVars1#1/25 } Tile{ AsIs: e.eItemsAndHoles#1/21 } Tile{ HalfReuse: >/23 } Tile{ HalfReuse: )/1 ]] }
    refalrts::reinit_open_bracket( context[10] );
    refalrts::reinit_ident( context[15], ident_Variable );
    refalrts::update_name( context[4], ref_PassiveHoles.ref.function );
    refalrts::reinit_close_call( context[23] );
    refalrts::reinit_close_bracket( context[1] );
    refalrts::link_brackets( context[9], context[1] );
    refalrts::push_stack( context[23] );
    refalrts::push_stack( context[0] );
    refalrts::link_brackets( context[10], context[24] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    res = refalrts::splice_evar( res, context[23], context[23] );
    res = refalrts::splice_evar( res, context[21], context[22] );
    res = refalrts::splice_evar( res, context[25], context[26] );
    res = refalrts::splice_evar( res, context[0], context[4] );
    res = refalrts::splice_evar( res, context[24], context[24] );
    res = refalrts::splice_evar( res, context[27], context[28] );
    res = refalrts::splice_evar( res, context[11], context[12] );
    res = refalrts::splice_evar( res, context[15], context[15] );
    res = refalrts::splice_evar( res, context[9], context[10] );
    refalrts::splice_to_freelist_open( trash_prev, res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence();

  // t.idx ( e.idx ) t.idx ( e.idx ) ( e.idx ) ( e.idx ) e.idx
  // </0 & T4_check/4 t.tUsedVars#1/5 (/9 e.eItems#1/7 )/10 t.tSrcPos#1/11 (/15 e.eIndex#1/13 )/16 (/19 e.ePattern#1/17 )/20 (/23 e.eItemsAndHoles#1/21 )/24 e.eOther#1/2 >/1
  // closed e.eItems#1 as range 7
  // closed e.eIndex#1 as range 13
  // closed e.ePattern#1 as range 17
  // closed e.eItemsAndHoles#1 as range 21
  // closed e.eOther#1 as range 2
  //DEBUG: t.tUsedVars#1: 5
  //DEBUG: t.tSrcPos#1: 11
  //DEBUG: e.eItems#1: 7
  //DEBUG: e.eIndex#1: 13
  //DEBUG: e.ePattern#1: 17
  //DEBUG: e.eItemsAndHoles#1: 21
  //DEBUG: e.eOther#1: 2

  refalrts::reset_allocator();
  //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} e.eOther#1/2 {REMOVED TILE}
  //RESULT: Tile{ [[ AsIs: </0 Reuse: & T4_forward/4 AsIs: t.tUsedVars#1/5 AsIs: (/9 AsIs: e.eItems#1/7 AsIs: )/10 } Tile{ AsIs: (/19 } Tile{ HalfReuse: # HOLE/20 AsIs: (/23 } # Variable/25 Tile{ AsIs: t.tSrcPos#1/11 HalfReuse: 'e'/15 AsIs: e.eIndex#1/13 AsIs: )/16 } Tile{ AsIs: e.ePattern#1/17 } Tile{ AsIs: )/24 } Tile{ AsIs: e.eItemsAndHoles#1/21 } Tile{ AsIs: >/1 ]] }
  if( ! refalrts::alloc_ident( context[25], ident_Variable ) )
    return refalrts::cNoMemory;
  refalrts::update_name( context[4], ref_T4u_forward.ref.function );
  refalrts::reinit_ident( context[20], ident_HOLE );
  refalrts::reinit_char( context[15], 'e' );
  refalrts::push_stack( context[1] );
  refalrts::push_stack( context[0] );
  refalrts::link_brackets( context[19], context[24] );
  refalrts::link_brackets( context[23], context[16] );
  refalrts::link_brackets( context[9], context[10] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[1];
  res = refalrts::splice_evar( res, context[21], context[22] );
  res = refalrts::splice_evar( res, context[24], context[24] );
  res = refalrts::splice_evar( res, context[17], context[18] );
  res = refalrts::splice_evar( res, context[11], context[16] );
  res = refalrts::splice_evar( res, context[25], context[25] );
  res = refalrts::splice_evar( res, context[20], context[23] );
  res = refalrts::splice_evar( res, context[19], context[19] );
  refalrts::splice_to_freelist_open( context[10], res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_T4u_check("T4_check", 786251477U, 1176157594U, func_T4u_check);

static refalrts::FnResult func_T4u_forward(refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  refalrts::this_is_generated_function();
  // issue here memory for vars with 13 elems
  refalrts::Iter context[13];
  refalrts::zeros( context, 13 );
  // </0 & T4_forward/4 t.tUsedVars#1/5 (/9 e.eItems_fix#1/7 )/10 t.tItems_next#1/11 e.eItems_rest#1/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  context[6] = refalrts::tvar_left( context[5], context[2], context[3] );
  if( ! context[6] )
    return refalrts::cRecognitionImpossible;
  context[7] = 0;
  context[8] = 0;
  context[9] = refalrts::brackets_left( context[7], context[8], context[2], context[3] );
  if( ! context[9] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[9], context[10]);
  // closed e.eItems_fix#1 as range 7
  context[12] = refalrts::tvar_left( context[11], context[2], context[3] );
  if( ! context[12] )
    return refalrts::cRecognitionImpossible;
  // closed e.eItems_rest#1 as range 2
  //DEBUG: t.tUsedVars#1: 5
  //DEBUG: e.eItems_fix#1: 7
  //DEBUG: t.tItems_next#1: 11
  //DEBUG: e.eItems_rest#1: 2

  refalrts::reset_allocator();
  //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ AsIs: </0 Reuse: & T4_next/4 AsIs: t.tUsedVars#1/5 AsIs: (/9 } Tile{ AsIs: e.eItems_fix#1/7 } Tile{ AsIs: t.tItems_next#1/11 } Tile{ AsIs: )/10 } Tile{ AsIs: e.eItems_rest#1/2 } Tile{ AsIs: >/1 ]] }
  refalrts::update_name( context[4], ref_T4u_next.ref.function );
  refalrts::push_stack( context[1] );
  refalrts::push_stack( context[0] );
  refalrts::link_brackets( context[9], context[10] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[1];
  res = refalrts::splice_evar( res, context[2], context[3] );
  res = refalrts::splice_evar( res, context[10], context[10] );
  res = refalrts::splice_evar( res, context[11], context[12] );
  res = refalrts::splice_evar( res, context[7], context[8] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_T4u_forward("T4_forward", 786251477U, 1176157594U, func_T4u_forward);

static refalrts::FnResult func_T4u_next(refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  refalrts::this_is_generated_function();
  // issue here memory for vars with 37 elems
  refalrts::Iter context[37];
  refalrts::zeros( context, 37 );
  // </0 & T4_next/4 t.tUsedVars#1/5 (/9 e.eItems_fix#1/7 )/10 e.eItems_var#1/11 (/15 # HOLE/17 (/20 # Variable/22 t.tSrcPos#1/23 'e'/25 e.eIndex#1/18 )/21 e.ePattern#1/13 )/16 e.eItemsAndHoles#1/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  context[6] = refalrts::tvar_left( context[5], context[2], context[3] );
  if( ! context[6] )
    return refalrts::cRecognitionImpossible;
  context[7] = 0;
  context[8] = 0;
  context[9] = refalrts::brackets_left( context[7], context[8], context[2], context[3] );
  if( ! context[9] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[9], context[10]);
  // closed e.eItems_fix#1 as range 7
  context[11] = 0;
  context[12] = 0;
  refalrts::start_e_loop();
  do {
    context[35] = context[2];
    context[36] = context[3];
    context[13] = 0;
    context[14] = 0;
    context[15] = refalrts::brackets_left( context[13], context[14], context[35], context[36] );
    if( ! context[15] )
      continue;
    refalrts::bracket_pointers(context[15], context[16]);
    context[17] = refalrts::ident_left(  ident_HOLE, context[13], context[14] );
    if( ! context[17] )
      continue;
    context[18] = 0;
    context[19] = 0;
    context[20] = refalrts::brackets_left( context[18], context[19], context[13], context[14] );
    if( ! context[20] )
      continue;
    refalrts::bracket_pointers(context[20], context[21]);
    context[22] = refalrts::ident_left(  ident_Variable, context[18], context[19] );
    if( ! context[22] )
      continue;
    // closed e.ePattern#1 as range 13
    // closed e.eItemsAndHoles#1 as range 35(2)
    context[24] = refalrts::tvar_left( context[23], context[18], context[19] );
    if( ! context[24] )
      continue;
    context[25] = refalrts::char_left( 'e', context[18], context[19] );
    if( ! context[25] )
      continue;
    // closed e.eIndex#1 as range 18
    //DEBUG: t.tUsedVars#1: 5
    //DEBUG: e.eItems_fix#1: 7
    //DEBUG: e.eItems_var#1: 11
    //DEBUG: e.ePattern#1: 13
    //DEBUG: e.eItemsAndHoles#1: 2
    //DEBUG: t.tSrcPos#1: 23
    //DEBUG: e.eIndex#1: 18

    refalrts::reset_allocator();
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 Reuse: & T4_check/4 AsIs: t.tUsedVars#1/5 AsIs: (/9 } Tile{ AsIs: e.eItems_fix#1/7 } Tile{ AsIs: e.eItems_var#1/11 } Tile{ HalfReuse: )/22 AsIs: t.tSrcPos#1/23 HalfReuse: (/25 AsIs: e.eIndex#1/18 AsIs: )/21 } Tile{ AsIs: (/15 } Tile{ AsIs: e.ePattern#1/13 } Tile{ HalfReuse: )/17 AsIs: (/20 } Tile{ AsIs: e.eItemsAndHoles#1/35(2) } Tile{ AsIs: )/16 } Tile{ HalfReuse: </10 } & NewName/26 t.tUsedVars#1/5/27 'e'/29 e.eIndex#1/18/30"_fix"/32 >/34 Tile{ AsIs: >/1 ]] }
    if( ! refalrts::alloc_name( context[26], ref_NewName.ref.function ) )
      return refalrts::cNoMemory;
    if (! refalrts::copy_evar(context[27], context[28], context[5], context[6]))
      return refalrts::cNoMemory;
    if( ! refalrts::alloc_char( context[29], 'e' ) )
      return refalrts::cNoMemory;
    if (! refalrts::copy_evar(context[30], context[31], context[18], context[19]))
      return refalrts::cNoMemory;
    if( ! refalrts::alloc_chars( context[32], context[33], "_fix", 4 ) )
      return refalrts::cNoMemory;
    if( ! refalrts::alloc_close_call( context[34] ) )
      return refalrts::cNoMemory;
    refalrts::update_name( context[4], ref_T4u_check.ref.function );
    refalrts::reinit_close_bracket( context[22] );
    refalrts::reinit_open_bracket( context[25] );
    refalrts::reinit_close_bracket( context[17] );
    refalrts::reinit_open_call( context[10] );
    refalrts::push_stack( context[1] );
    refalrts::push_stack( context[0] );
    refalrts::push_stack( context[34] );
    refalrts::push_stack( context[10] );
    refalrts::link_brackets( context[20], context[16] );
    refalrts::link_brackets( context[15], context[17] );
    refalrts::link_brackets( context[25], context[21] );
    refalrts::link_brackets( context[9], context[22] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    res = refalrts::splice_evar( res, context[26], context[34] );
    res = refalrts::splice_evar( res, context[10], context[10] );
    res = refalrts::splice_evar( res, context[16], context[16] );
    res = refalrts::splice_evar( res, context[35], context[36] );
    res = refalrts::splice_evar( res, context[17], context[20] );
    res = refalrts::splice_evar( res, context[13], context[14] );
    res = refalrts::splice_evar( res, context[15], context[15] );
    res = refalrts::splice_evar( res, context[22], context[21] );
    res = refalrts::splice_evar( res, context[11], context[12] );
    res = refalrts::splice_evar( res, context[7], context[8] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( refalrts::open_evar_advance( context[11], context[12], context[2], context[3] ) );
  return refalrts::cRecognitionImpossible;
}

static refalrts::NativeReference nat_ref_T4u_next("T4_next", 786251477U, 1176157594U, func_T4u_next);

static refalrts::FnResult func_T5(refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  refalrts::this_is_generated_function();
  // issue here memory for vars with 34 elems
  refalrts::Iter context[34];
  refalrts::zeros( context, 34 );
  // </0 & T5/4 t.tUsedVars#1/5 e.eItems#1/7 (/11 # HOLE/13 (/16 # Variable/18 t.tSrcPos#1/19 'e'/21 e.eIndex#1/14 )/17 e.ePattern#1/9 )/12 e.eItemsAndHoles#1/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  context[6] = refalrts::tvar_left( context[5], context[2], context[3] );
  if( ! context[6] )
    return refalrts::cRecognitionImpossible;
  context[7] = 0;
  context[8] = 0;
  refalrts::start_e_loop();
  do {
    context[32] = context[2];
    context[33] = context[3];
    context[9] = 0;
    context[10] = 0;
    context[11] = refalrts::brackets_left( context[9], context[10], context[32], context[33] );
    if( ! context[11] )
      continue;
    refalrts::bracket_pointers(context[11], context[12]);
    context[13] = refalrts::ident_left(  ident_HOLE, context[9], context[10] );
    if( ! context[13] )
      continue;
    context[14] = 0;
    context[15] = 0;
    context[16] = refalrts::brackets_left( context[14], context[15], context[9], context[10] );
    if( ! context[16] )
      continue;
    refalrts::bracket_pointers(context[16], context[17]);
    context[18] = refalrts::ident_left(  ident_Variable, context[14], context[15] );
    if( ! context[18] )
      continue;
    // closed e.ePattern#1 as range 9
    // closed e.eItemsAndHoles#1 as range 32(2)
    context[20] = refalrts::tvar_left( context[19], context[14], context[15] );
    if( ! context[20] )
      continue;
    context[21] = refalrts::char_left( 'e', context[14], context[15] );
    if( ! context[21] )
      continue;
    // closed e.eIndex#1 as range 14
    //DEBUG: t.tUsedVars#1: 5
    //DEBUG: e.eItems#1: 7
    //DEBUG: e.ePattern#1: 9
    //DEBUG: e.eItemsAndHoles#1: 2
    //DEBUG: t.tSrcPos#1: 19
    //DEBUG: e.eIndex#1: 14

    refalrts::reset_allocator();
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 Reuse: & T5_check/4 AsIs: t.tUsedVars#1/5 } Tile{ AsIs: (/11 } Tile{ AsIs: e.eItems#1/7 } Tile{ HalfReuse: )/18 AsIs: t.tSrcPos#1/19 HalfReuse: (/21 AsIs: e.eIndex#1/14 AsIs: )/17 } (/22 Tile{ AsIs: e.ePattern#1/9 } Tile{ HalfReuse: )/13 AsIs: (/16 } Tile{ AsIs: e.eItemsAndHoles#1/32(2) } Tile{ AsIs: )/12 } </23 & T5-sub/24 t.tUsedVars#1/5/25 t.tSrcPos#1/19/27 e.eIndex#1/14/29 >/31 Tile{ AsIs: >/1 ]] }
    if( ! refalrts::alloc_open_bracket( context[22] ) )
      return refalrts::cNoMemory;
    if( ! refalrts::alloc_open_call( context[23] ) )
      return refalrts::cNoMemory;
    if( ! refalrts::alloc_name( context[24], ref_T5m_sub.ref.function ) )
      return refalrts::cNoMemory;
    if (! refalrts::copy_evar(context[25], context[26], context[5], context[6]))
      return refalrts::cNoMemory;
    if (! refalrts::copy_evar(context[27], context[28], context[19], context[20]))
      return refalrts::cNoMemory;
    if (! refalrts::copy_evar(context[29], context[30], context[14], context[15]))
      return refalrts::cNoMemory;
    if( ! refalrts::alloc_close_call( context[31] ) )
      return refalrts::cNoMemory;
    refalrts::update_name( context[4], ref_T5u_check.ref.function );
    refalrts::reinit_close_bracket( context[18] );
    refalrts::reinit_open_bracket( context[21] );
    refalrts::reinit_close_bracket( context[13] );
    refalrts::push_stack( context[1] );
    refalrts::push_stack( context[0] );
    refalrts::push_stack( context[31] );
    refalrts::push_stack( context[23] );
    refalrts::link_brackets( context[16], context[12] );
    refalrts::link_brackets( context[22], context[13] );
    refalrts::link_brackets( context[21], context[17] );
    refalrts::link_brackets( context[11], context[18] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    res = refalrts::splice_evar( res, context[23], context[31] );
    res = refalrts::splice_evar( res, context[12], context[12] );
    res = refalrts::splice_evar( res, context[32], context[33] );
    res = refalrts::splice_evar( res, context[13], context[16] );
    res = refalrts::splice_evar( res, context[9], context[10] );
    res = refalrts::splice_evar( res, context[22], context[22] );
    res = refalrts::splice_evar( res, context[18], context[17] );
    res = refalrts::splice_evar( res, context[7], context[8] );
    res = refalrts::splice_evar( res, context[11], context[11] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( refalrts::open_evar_advance( context[7], context[8], context[2], context[3] ) );
  return refalrts::cRecognitionImpossible;
}

static refalrts::NativeReference nat_ref_T5("T5", 786251477U, 1176157594U, func_T5);

static refalrts::FnResult func_T5u_check(refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  refalrts::this_is_generated_function();
  // issue here memory for vars with 41 elems
  refalrts::Iter context[41];
  refalrts::zeros( context, 41 );
  //FAST GEN: t.$ ( e.$ ) t.$ ( e.$ ) ( e.$ ) ( e.$ ) e.$
  //GLOBAL GEN: t.$ ( e.$ ) t.$ ( e.$ ) ( e.$ ) ( e.$ ) e.$
  // </0 & T5_check/4 t.idx#0/5 (/9 e.idxVB#0/7 )/10 t.idxVT#0/11 (/15 e.idxVTVB#0/13 )/16 (/19 e.idxVTVTB#0/17 )/20 (/23 e.idxVTVTTB#0/21 )/24 e.idxVTVTTT#0/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  context[6] = refalrts::tvar_left( context[5], context[2], context[3] );
  if( ! context[6] )
    return refalrts::cRecognitionImpossible;
  context[7] = 0;
  context[8] = 0;
  context[9] = refalrts::brackets_left( context[7], context[8], context[2], context[3] );
  if( ! context[9] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[9], context[10]);
  // closed e.idxVB#0 as range 7
  context[12] = refalrts::tvar_left( context[11], context[2], context[3] );
  if( ! context[12] )
    return refalrts::cRecognitionImpossible;
  context[13] = 0;
  context[14] = 0;
  context[15] = refalrts::brackets_left( context[13], context[14], context[2], context[3] );
  if( ! context[15] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[15], context[16]);
  context[17] = 0;
  context[18] = 0;
  context[19] = refalrts::brackets_left( context[17], context[18], context[2], context[3] );
  if( ! context[19] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[19], context[20]);
  context[21] = 0;
  context[22] = 0;
  context[23] = refalrts::brackets_left( context[21], context[22], context[2], context[3] );
  if( ! context[23] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[23], context[24]);
  // closed e.idxVTVB#0 as range 13
  // closed e.idxVTVTB#0 as range 17
  // closed e.idxVTVTTB#0 as range 21
  // closed e.idxVTVTTT#0 as range 2
  do {
    // t.idx ( e.idx ) t.idx ( e.idx ) ( e.idx ) ( e.idx ) ( t.idx t.idx t.idx )
    // </0 & T5_check/4 t.tUsedVars#1/5 (/9 e.eItems#1/7 )/10 t.tSrcPos#1/11 (/15 e.eIndex#1/13 )/16 (/19 e.ePattern#1/17 )/20 (/23 e.eItemsAndHoles#1/21 )/24 (/27 t.tSourceVar#1/29 t.teX_fix#1/31 t.teX_var#1/33 )/28 >/1
    context[39] = context[2];
    context[40] = context[3];
    context[25] = 0;
    context[26] = 0;
    context[27] = refalrts::brackets_left( context[25], context[26], context[39], context[40] );
    if( ! context[27] )
      continue;
    refalrts::bracket_pointers(context[27], context[28]);
    if( ! refalrts::empty_seq( context[39], context[40] ) )
      continue;
    // closed e.eItems#1 as range 7
    // closed e.eIndex#1 as range 13
    // closed e.ePattern#1 as range 17
    // closed e.eItemsAndHoles#1 as range 21
    context[30] = refalrts::tvar_left( context[29], context[25], context[26] );
    if( ! context[30] )
      continue;
    context[32] = refalrts::tvar_left( context[31], context[25], context[26] );
    if( ! context[32] )
      continue;
    context[34] = refalrts::tvar_left( context[33], context[25], context[26] );
    if( ! context[34] )
      continue;
    if( ! refalrts::empty_seq( context[25], context[26] ) )
      continue;
    //DEBUG: t.tUsedVars#1: 5
    //DEBUG: t.tSrcPos#1: 11
    //DEBUG: e.eItems#1: 7
    //DEBUG: e.eIndex#1: 13
    //DEBUG: e.ePattern#1: 17
    //DEBUG: e.eItemsAndHoles#1: 21
    //DEBUG: t.tSourceVar#1: 29
    //DEBUG: t.teX_fix#1: 31
    //DEBUG: t.teX_var#1: 33

    refalrts::reset_allocator();
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} t.tUsedVars#1/5 {REMOVED TILE} t.tSrcPos#1/11 {REMOVED TILE} e.eIndex#1/13 {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ AsIs: (/9 AsIs: e.eItems#1/7 HalfReuse: (/10 } Tile{ HalfReuse: # Brackets/15 } t.teX_fix#1/31/35 Tile{ HalfReuse: )/4 } t.teX_var#1/33/37 Tile{ HalfReuse: </16 HalfReuse: & Substitute/19 AsIs: e.ePattern#1/17 HalfReuse: </20 HalfReuse: & T5-UnHole/23 AsIs: e.eItemsAndHoles#1/21 HalfReuse: >/24 AsIs: (/27 AsIs: t.tSourceVar#1/29 AsIs: t.teX_fix#1/31 AsIs: t.teX_var#1/33 AsIs: )/28 AsIs: >/1 } Tile{ HalfReuse: )/0 } Tile{ ]] }
    if (! refalrts::copy_evar(context[35], context[36], context[31], context[32]))
      return refalrts::cNoMemory;
    if (! refalrts::copy_evar(context[37], context[38], context[33], context[34]))
      return refalrts::cNoMemory;
    refalrts::reinit_open_bracket( context[10] );
    refalrts::reinit_ident( context[15], ident_Brackets );
    refalrts::reinit_close_bracket( context[4] );
    refalrts::reinit_open_call( context[16] );
    refalrts::reinit_name( context[19], ref_Substitute.ref.function );
    refalrts::reinit_open_call( context[20] );
    refalrts::reinit_name( context[23], ref_T5m_UnHole.ref.function );
    refalrts::reinit_close_call( context[24] );
    refalrts::reinit_close_bracket( context[0] );
    refalrts::link_brackets( context[9], context[0] );
    refalrts::push_stack( context[1] );
    refalrts::push_stack( context[16] );
    refalrts::link_brackets( context[27], context[28] );
    refalrts::push_stack( context[24] );
    refalrts::push_stack( context[20] );
    refalrts::link_brackets( context[10], context[4] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = arg_end->next;
    res = refalrts::splice_evar( res, context[0], context[0] );
    res = refalrts::splice_evar( res, context[16], context[1] );
    res = refalrts::splice_evar( res, context[37], context[38] );
    res = refalrts::splice_evar( res, context[4], context[4] );
    res = refalrts::splice_evar( res, context[35], context[36] );
    res = refalrts::splice_evar( res, context[15], context[15] );
    res = refalrts::splice_evar( res, context[9], context[10] );
    refalrts::splice_to_freelist_open( trash_prev, res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence();

  // t.idx ( e.idx ) t.idx ( e.idx ) ( e.idx ) ( e.idx ) e.idx
  // </0 & T5_check/4 t.tUsedVars#1/5 (/9 e.eItems#1/7 )/10 t.tSrcPos#1/11 (/15 e.eIndex#1/13 )/16 (/19 e.ePattern#1/17 )/20 (/23 e.eItemsAndHoles#1/21 )/24 e.eOther#1/2 >/1
  // closed e.eItems#1 as range 7
  // closed e.eIndex#1 as range 13
  // closed e.ePattern#1 as range 17
  // closed e.eItemsAndHoles#1 as range 21
  // closed e.eOther#1 as range 2
  //DEBUG: t.tUsedVars#1: 5
  //DEBUG: t.tSrcPos#1: 11
  //DEBUG: e.eItems#1: 7
  //DEBUG: e.eIndex#1: 13
  //DEBUG: e.ePattern#1: 17
  //DEBUG: e.eItemsAndHoles#1: 21
  //DEBUG: e.eOther#1: 2

  refalrts::reset_allocator();
  //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} e.eOther#1/2 {REMOVED TILE}
  //RESULT: Tile{ [[ AsIs: </0 Reuse: & T5_forward/4 AsIs: t.tUsedVars#1/5 AsIs: (/9 AsIs: e.eItems#1/7 AsIs: )/10 } Tile{ AsIs: (/19 } Tile{ HalfReuse: # HOLE/20 AsIs: (/23 } # Variable/25 Tile{ AsIs: t.tSrcPos#1/11 HalfReuse: 'e'/15 AsIs: e.eIndex#1/13 AsIs: )/16 } Tile{ AsIs: e.ePattern#1/17 } Tile{ AsIs: )/24 } Tile{ AsIs: e.eItemsAndHoles#1/21 } Tile{ AsIs: >/1 ]] }
  if( ! refalrts::alloc_ident( context[25], ident_Variable ) )
    return refalrts::cNoMemory;
  refalrts::update_name( context[4], ref_T5u_forward.ref.function );
  refalrts::reinit_ident( context[20], ident_HOLE );
  refalrts::reinit_char( context[15], 'e' );
  refalrts::push_stack( context[1] );
  refalrts::push_stack( context[0] );
  refalrts::link_brackets( context[19], context[24] );
  refalrts::link_brackets( context[23], context[16] );
  refalrts::link_brackets( context[9], context[10] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[1];
  res = refalrts::splice_evar( res, context[21], context[22] );
  res = refalrts::splice_evar( res, context[24], context[24] );
  res = refalrts::splice_evar( res, context[17], context[18] );
  res = refalrts::splice_evar( res, context[11], context[16] );
  res = refalrts::splice_evar( res, context[25], context[25] );
  res = refalrts::splice_evar( res, context[20], context[23] );
  res = refalrts::splice_evar( res, context[19], context[19] );
  refalrts::splice_to_freelist_open( context[10], res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_T5u_check("T5_check", 786251477U, 1176157594U, func_T5u_check);

static refalrts::FnResult func_T5u_forward(refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  refalrts::this_is_generated_function();
  // issue here memory for vars with 13 elems
  refalrts::Iter context[13];
  refalrts::zeros( context, 13 );
  // </0 & T5_forward/4 t.tUsedVars#1/5 (/9 e.eItems_fix#1/7 )/10 t.tItems_next#1/11 e.eItems_rest#1/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  context[6] = refalrts::tvar_left( context[5], context[2], context[3] );
  if( ! context[6] )
    return refalrts::cRecognitionImpossible;
  context[7] = 0;
  context[8] = 0;
  context[9] = refalrts::brackets_left( context[7], context[8], context[2], context[3] );
  if( ! context[9] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[9], context[10]);
  // closed e.eItems_fix#1 as range 7
  context[12] = refalrts::tvar_left( context[11], context[2], context[3] );
  if( ! context[12] )
    return refalrts::cRecognitionImpossible;
  // closed e.eItems_rest#1 as range 2
  //DEBUG: t.tUsedVars#1: 5
  //DEBUG: e.eItems_fix#1: 7
  //DEBUG: t.tItems_next#1: 11
  //DEBUG: e.eItems_rest#1: 2

  refalrts::reset_allocator();
  //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ AsIs: </0 Reuse: & T5_next/4 AsIs: t.tUsedVars#1/5 AsIs: (/9 } Tile{ AsIs: e.eItems_fix#1/7 } Tile{ AsIs: t.tItems_next#1/11 } Tile{ AsIs: )/10 } Tile{ AsIs: e.eItems_rest#1/2 } Tile{ AsIs: >/1 ]] }
  refalrts::update_name( context[4], ref_T5u_next.ref.function );
  refalrts::push_stack( context[1] );
  refalrts::push_stack( context[0] );
  refalrts::link_brackets( context[9], context[10] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[1];
  res = refalrts::splice_evar( res, context[2], context[3] );
  res = refalrts::splice_evar( res, context[10], context[10] );
  res = refalrts::splice_evar( res, context[11], context[12] );
  res = refalrts::splice_evar( res, context[7], context[8] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_T5u_forward("T5_forward", 786251477U, 1176157594U, func_T5u_forward);

static refalrts::FnResult func_T5u_next(refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  refalrts::this_is_generated_function();
  // issue here memory for vars with 36 elems
  refalrts::Iter context[36];
  refalrts::zeros( context, 36 );
  // </0 & T5_next/4 t.tUsedVars#1/5 (/9 e.eItems_fix#1/7 )/10 e.eItems_var#1/11 (/15 # HOLE/17 (/20 # Variable/22 t.tSrcPos#1/23 'e'/25 e.eIndex#1/18 )/21 e.ePattern#1/13 )/16 e.eItemsAndHoles#1/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  context[6] = refalrts::tvar_left( context[5], context[2], context[3] );
  if( ! context[6] )
    return refalrts::cRecognitionImpossible;
  context[7] = 0;
  context[8] = 0;
  context[9] = refalrts::brackets_left( context[7], context[8], context[2], context[3] );
  if( ! context[9] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[9], context[10]);
  // closed e.eItems_fix#1 as range 7
  context[11] = 0;
  context[12] = 0;
  refalrts::start_e_loop();
  do {
    context[34] = context[2];
    context[35] = context[3];
    context[13] = 0;
    context[14] = 0;
    context[15] = refalrts::brackets_left( context[13], context[14], context[34], context[35] );
    if( ! context[15] )
      continue;
    refalrts::bracket_pointers(context[15], context[16]);
    context[17] = refalrts::ident_left(  ident_HOLE, context[13], context[14] );
    if( ! context[17] )
      continue;
    context[18] = 0;
    context[19] = 0;
    context[20] = refalrts::brackets_left( context[18], context[19], context[13], context[14] );
    if( ! context[20] )
      continue;
    refalrts::bracket_pointers(context[20], context[21]);
    context[22] = refalrts::ident_left(  ident_Variable, context[18], context[19] );
    if( ! context[22] )
      continue;
    // closed e.ePattern#1 as range 13
    // closed e.eItemsAndHoles#1 as range 34(2)
    context[24] = refalrts::tvar_left( context[23], context[18], context[19] );
    if( ! context[24] )
      continue;
    context[25] = refalrts::char_left( 'e', context[18], context[19] );
    if( ! context[25] )
      continue;
    // closed e.eIndex#1 as range 18
    //DEBUG: t.tUsedVars#1: 5
    //DEBUG: e.eItems_fix#1: 7
    //DEBUG: e.eItems_var#1: 11
    //DEBUG: e.ePattern#1: 13
    //DEBUG: e.eItemsAndHoles#1: 2
    //DEBUG: t.tSrcPos#1: 23
    //DEBUG: e.eIndex#1: 18

    refalrts::reset_allocator();
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 Reuse: & T5_check/4 AsIs: t.tUsedVars#1/5 AsIs: (/9 } Tile{ AsIs: e.eItems_fix#1/7 } Tile{ AsIs: e.eItems_var#1/11 } Tile{ HalfReuse: )/22 AsIs: t.tSrcPos#1/23 HalfReuse: (/25 AsIs: e.eIndex#1/18 AsIs: )/21 } Tile{ AsIs: (/15 } Tile{ AsIs: e.ePattern#1/13 } Tile{ HalfReuse: )/17 AsIs: (/20 } Tile{ AsIs: e.eItemsAndHoles#1/34(2) } Tile{ AsIs: )/16 } Tile{ HalfReuse: </10 } & T5-sub/26 t.tUsedVars#1/5/27 t.tSrcPos#1/23/29 e.eIndex#1/18/31 >/33 Tile{ AsIs: >/1 ]] }
    if( ! refalrts::alloc_name( context[26], ref_T5m_sub.ref.function ) )
      return refalrts::cNoMemory;
    if (! refalrts::copy_evar(context[27], context[28], context[5], context[6]))
      return refalrts::cNoMemory;
    if (! refalrts::copy_evar(context[29], context[30], context[23], context[24]))
      return refalrts::cNoMemory;
    if (! refalrts::copy_evar(context[31], context[32], context[18], context[19]))
      return refalrts::cNoMemory;
    if( ! refalrts::alloc_close_call( context[33] ) )
      return refalrts::cNoMemory;
    refalrts::update_name( context[4], ref_T5u_check.ref.function );
    refalrts::reinit_close_bracket( context[22] );
    refalrts::reinit_open_bracket( context[25] );
    refalrts::reinit_close_bracket( context[17] );
    refalrts::reinit_open_call( context[10] );
    refalrts::push_stack( context[1] );
    refalrts::push_stack( context[0] );
    refalrts::push_stack( context[33] );
    refalrts::push_stack( context[10] );
    refalrts::link_brackets( context[20], context[16] );
    refalrts::link_brackets( context[15], context[17] );
    refalrts::link_brackets( context[25], context[21] );
    refalrts::link_brackets( context[9], context[22] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    res = refalrts::splice_evar( res, context[26], context[33] );
    res = refalrts::splice_evar( res, context[10], context[10] );
    res = refalrts::splice_evar( res, context[16], context[16] );
    res = refalrts::splice_evar( res, context[34], context[35] );
    res = refalrts::splice_evar( res, context[17], context[20] );
    res = refalrts::splice_evar( res, context[13], context[14] );
    res = refalrts::splice_evar( res, context[15], context[15] );
    res = refalrts::splice_evar( res, context[22], context[21] );
    res = refalrts::splice_evar( res, context[11], context[12] );
    res = refalrts::splice_evar( res, context[7], context[8] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( refalrts::open_evar_advance( context[11], context[12], context[2], context[3] ) );
  return refalrts::cRecognitionImpossible;
}

static refalrts::NativeReference nat_ref_T5u_next("T5_next", 786251477U, 1176157594U, func_T5u_next);

static refalrts::FnResult func_T5m_UnHole(refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  refalrts::this_is_generated_function();
  // issue here memory for vars with 16 elems
  refalrts::Iter context[16];
  refalrts::zeros( context, 16 );
  //FAST GEN: e.$
  //GLOBAL GEN: e.$
  // </0 & T5-UnHole/4 e.idx#0/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.idx#0 as range 2
  do {
    // e.idx
    // </0 & T5-UnHole/4 e.eItems#1/5 (/9 # HOLE/11 e.ePattern#1/7 )/10 e.eItemsAndHoles#1/2 >/1
    context[12] = context[2];
    context[13] = context[3];
    context[5] = 0;
    context[6] = 0;
    refalrts::start_e_loop();
    do {
      context[14] = context[12];
      context[15] = context[13];
      context[7] = 0;
      context[8] = 0;
      context[9] = refalrts::brackets_left( context[7], context[8], context[14], context[15] );
      if( ! context[9] )
        continue;
      refalrts::bracket_pointers(context[9], context[10]);
      context[11] = refalrts::ident_left(  ident_HOLE, context[7], context[8] );
      if( ! context[11] )
        continue;
      // closed e.ePattern#1 as range 7
      // closed e.eItemsAndHoles#1 as range 14(2)
      //DEBUG: e.eItems#1: 5
      //DEBUG: e.ePattern#1: 7
      //DEBUG: e.eItemsAndHoles#1: 2

      refalrts::reset_allocator();
      //TRASH: {REMOVED TILE} {REMOVED TILE} & T5-UnHole/4 {REMOVED TILE} (/9 # HOLE/11 {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ } Tile{ AsIs: e.eItems#1/5 } Tile{ AsIs: e.ePattern#1/7 } Tile{ AsIs: </0 } Tile{ HalfReuse: & T5-UnHole/10 AsIs: e.eItemsAndHoles#1/14(2) AsIs: >/1 ]] }
      refalrts::reinit_name( context[10], ref_T5m_UnHole.ref.function );
      refalrts::push_stack( context[1] );
      refalrts::push_stack( context[0] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[10];
      res = refalrts::splice_evar( res, context[0], context[0] );
      res = refalrts::splice_evar( res, context[7], context[8] );
      res = refalrts::splice_evar( res, context[5], context[6] );
      refalrts::splice_to_freelist_open( trash_prev, res );
      return refalrts::cSuccess;
    } while ( refalrts::open_evar_advance( context[5], context[6], context[12], context[13] ) );
  } while ( 0 );
  refalrts::stop_sentence();

  // e.idx
  // </0 & T5-UnHole/4 e.eItems#1/2 >/1
  // closed e.eItems#1 as range 2
  //DEBUG: e.eItems#1: 2

  refalrts::reset_allocator();
  //TRASH: {REMOVED TILE} </0 & T5-UnHole/4 {REMOVED TILE} >/1 {REMOVED TILE}
  //RESULT: Tile{ [[ } Tile{ AsIs: e.eItems#1/2 } Tile{ ]] }
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = arg_end->next;
  res = refalrts::splice_evar( res, context[2], context[3] );
  refalrts::splice_to_freelist_open( trash_prev, res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_T5m_UnHole("T5-UnHole", 786251477U, 1176157594U, func_T5m_UnHole);

static refalrts::FnResult func_T5m_sub(refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  refalrts::this_is_generated_function();
  // issue here memory for vars with 21 elems
  refalrts::Iter context[21];
  refalrts::zeros( context, 21 );
  // </0 & T5-sub/4 t.tUsedVars#1/5 t.tSrcPos#1/7 e.eIndex#1/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  context[6] = refalrts::tvar_left( context[5], context[2], context[3] );
  if( ! context[6] )
    return refalrts::cRecognitionImpossible;
  context[8] = refalrts::tvar_left( context[7], context[2], context[3] );
  if( ! context[8] )
    return refalrts::cRecognitionImpossible;
  // closed e.eIndex#1 as range 2
  //DEBUG: t.tUsedVars#1: 5
  //DEBUG: t.tSrcPos#1: 7
  //DEBUG: e.eIndex#1: 2

  refalrts::reset_allocator();
  //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ AsIs: </0 Reuse: & T5-sub_check/4 AsIs: t.tUsedVars#1/5 AsIs: t.tSrcPos#1/7 } (/9 e.eIndex#1/2/10 )/12 </13 & NewName/14 t.tUsedVars#1/5/15 'e'/17 Tile{ AsIs: e.eIndex#1/2 }"_fix"/18 >/20 Tile{ AsIs: >/1 ]] }
  if( ! refalrts::alloc_open_bracket( context[9] ) )
    return refalrts::cNoMemory;
  if (! refalrts::copy_evar(context[10], context[11], context[2], context[3]))
    return refalrts::cNoMemory;
  if( ! refalrts::alloc_close_bracket( context[12] ) )
    return refalrts::cNoMemory;
  if( ! refalrts::alloc_open_call( context[13] ) )
    return refalrts::cNoMemory;
  if( ! refalrts::alloc_name( context[14], ref_NewName.ref.function ) )
    return refalrts::cNoMemory;
  if (! refalrts::copy_evar(context[15], context[16], context[5], context[6]))
    return refalrts::cNoMemory;
  if( ! refalrts::alloc_char( context[17], 'e' ) )
    return refalrts::cNoMemory;
  if( ! refalrts::alloc_chars( context[18], context[19], "_fix", 4 ) )
    return refalrts::cNoMemory;
  if( ! refalrts::alloc_close_call( context[20] ) )
    return refalrts::cNoMemory;
  refalrts::update_name( context[4], ref_T5m_subu_check.ref.function );
  refalrts::push_stack( context[1] );
  refalrts::push_stack( context[0] );
  refalrts::push_stack( context[20] );
  refalrts::push_stack( context[13] );
  refalrts::link_brackets( context[9], context[12] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[1];
  res = refalrts::splice_evar( res, context[18], context[20] );
  res = refalrts::splice_evar( res, context[2], context[3] );
  res = refalrts::splice_evar( res, context[9], context[17] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_T5m_sub("T5-sub", 786251477U, 1176157594U, func_T5m_sub);

static refalrts::FnResult func_T5m_subu_check(refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  refalrts::this_is_generated_function();
  // issue here memory for vars with 27 elems
  refalrts::Iter context[27];
  refalrts::zeros( context, 27 );
  // </0 & T5-sub_check/4 t.tUsedVars#1/5 t.tSrcPos#1/7 (/11 e.eIndex#1/9 )/12 t.tUsedVars1#1/13 e.eeX_fix#1/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  context[6] = refalrts::tvar_left( context[5], context[2], context[3] );
  if( ! context[6] )
    return refalrts::cRecognitionImpossible;
  context[8] = refalrts::tvar_left( context[7], context[2], context[3] );
  if( ! context[8] )
    return refalrts::cRecognitionImpossible;
  context[9] = 0;
  context[10] = 0;
  context[11] = refalrts::brackets_left( context[9], context[10], context[2], context[3] );
  if( ! context[11] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[11], context[12]);
  // closed e.eIndex#1 as range 9
  context[14] = refalrts::tvar_left( context[13], context[2], context[3] );
  if( ! context[14] )
    return refalrts::cRecognitionImpossible;
  // closed e.eeX_fix#1 as range 2
  //DEBUG: t.tUsedVars#1: 5
  //DEBUG: t.tSrcPos#1: 7
  //DEBUG: e.eIndex#1: 9
  //DEBUG: t.tUsedVars1#1: 13
  //DEBUG: e.eeX_fix#1: 2

  refalrts::reset_allocator();
  //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ AsIs: </0 Reuse: & T5-sub_check0/4 AsIs: t.tUsedVars#1/5 AsIs: t.tSrcPos#1/7 AsIs: (/11 AsIs: e.eIndex#1/9 AsIs: )/12 AsIs: t.tUsedVars1#1/13 } (/15 Tile{ AsIs: e.eeX_fix#1/2 } )/16 </17 & NewName/18 t.tUsedVars#1/5/19 'e'/21 e.eIndex#1/9/22"_var"/24 >/26 Tile{ AsIs: >/1 ]] }
  if( ! refalrts::alloc_open_bracket( context[15] ) )
    return refalrts::cNoMemory;
  if( ! refalrts::alloc_close_bracket( context[16] ) )
    return refalrts::cNoMemory;
  if( ! refalrts::alloc_open_call( context[17] ) )
    return refalrts::cNoMemory;
  if( ! refalrts::alloc_name( context[18], ref_NewName.ref.function ) )
    return refalrts::cNoMemory;
  if (! refalrts::copy_evar(context[19], context[20], context[5], context[6]))
    return refalrts::cNoMemory;
  if( ! refalrts::alloc_char( context[21], 'e' ) )
    return refalrts::cNoMemory;
  if (! refalrts::copy_evar(context[22], context[23], context[9], context[10]))
    return refalrts::cNoMemory;
  if( ! refalrts::alloc_chars( context[24], context[25], "_var", 4 ) )
    return refalrts::cNoMemory;
  if( ! refalrts::alloc_close_call( context[26] ) )
    return refalrts::cNoMemory;
  refalrts::update_name( context[4], ref_T5m_subu_check0.ref.function );
  refalrts::push_stack( context[1] );
  refalrts::push_stack( context[0] );
  refalrts::push_stack( context[26] );
  refalrts::push_stack( context[17] );
  refalrts::link_brackets( context[15], context[16] );
  refalrts::link_brackets( context[11], context[12] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[1];
  res = refalrts::splice_evar( res, context[16], context[26] );
  res = refalrts::splice_evar( res, context[2], context[3] );
  res = refalrts::splice_evar( res, context[15], context[15] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_T5m_subu_check("T5-sub_check", 786251477U, 1176157594U, func_T5m_subu_check);

static refalrts::FnResult func_T5m_subu_check0(refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  refalrts::this_is_generated_function();
  // issue here memory for vars with 30 elems
  refalrts::Iter context[30];
  refalrts::zeros( context, 30 );
  // </0 & T5-sub_check0/4 t.tUsedVars#1/5 t.tSrcPos#1/7 (/11 e.eIndex#1/9 )/12 t.tUsedVars1#1/13 (/17 e.eeX_fix#1/15 )/18 t.tUsedVars2#1/19 e.eeX_var#1/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  context[6] = refalrts::tvar_left( context[5], context[2], context[3] );
  if( ! context[6] )
    return refalrts::cRecognitionImpossible;
  context[8] = refalrts::tvar_left( context[7], context[2], context[3] );
  if( ! context[8] )
    return refalrts::cRecognitionImpossible;
  context[9] = 0;
  context[10] = 0;
  context[11] = refalrts::brackets_left( context[9], context[10], context[2], context[3] );
  if( ! context[11] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[11], context[12]);
  // closed e.eIndex#1 as range 9
  context[14] = refalrts::tvar_left( context[13], context[2], context[3] );
  if( ! context[14] )
    return refalrts::cRecognitionImpossible;
  context[15] = 0;
  context[16] = 0;
  context[17] = refalrts::brackets_left( context[15], context[16], context[2], context[3] );
  if( ! context[17] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[17], context[18]);
  // closed e.eeX_fix#1 as range 15
  context[20] = refalrts::tvar_left( context[19], context[2], context[3] );
  if( ! context[20] )
    return refalrts::cRecognitionImpossible;
  // closed e.eeX_var#1 as range 2
  //DEBUG: t.tUsedVars#1: 5
  //DEBUG: t.tSrcPos#1: 7
  //DEBUG: e.eIndex#1: 9
  //DEBUG: t.tUsedVars1#1: 13
  //DEBUG: e.eeX_fix#1: 15
  //DEBUG: t.tUsedVars2#1: 19
  //DEBUG: e.eeX_var#1: 2

  refalrts::reset_allocator();
  //TRASH: {REMOVED TILE} t.tUsedVars#1/5 {REMOVED TILE} t.tUsedVars1#1/13 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} t.tUsedVars2#1/19 {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ HalfReuse: (/0 HalfReuse: (/4 } # Variable/21 Tile{ AsIs: t.tSrcPos#1/7 HalfReuse: 'e'/11 AsIs: e.eIndex#1/9 AsIs: )/12 } (/22 # Variable/23 t.tSrcPos#1/7/24 Tile{ AsIs: e.eeX_fix#1/15 } Tile{ AsIs: )/18 } Tile{ AsIs: (/17 } # Variable/26 t.tSrcPos#1/7/27 Tile{ AsIs: e.eeX_var#1/2 } )/29 Tile{ HalfReuse: )/1 ]] }
  if( ! refalrts::alloc_ident( context[21], ident_Variable ) )
    return refalrts::cNoMemory;
  if( ! refalrts::alloc_open_bracket( context[22] ) )
    return refalrts::cNoMemory;
  if( ! refalrts::alloc_ident( context[23], ident_Variable ) )
    return refalrts::cNoMemory;
  if (! refalrts::copy_evar(context[24], context[25], context[7], context[8]))
    return refalrts::cNoMemory;
  if( ! refalrts::alloc_ident( context[26], ident_Variable ) )
    return refalrts::cNoMemory;
  if (! refalrts::copy_evar(context[27], context[28], context[7], context[8]))
    return refalrts::cNoMemory;
  if( ! refalrts::alloc_close_bracket( context[29] ) )
    return refalrts::cNoMemory;
  refalrts::reinit_open_bracket( context[0] );
  refalrts::reinit_open_bracket( context[4] );
  refalrts::reinit_char( context[11], 'e' );
  refalrts::reinit_close_bracket( context[1] );
  refalrts::link_brackets( context[0], context[1] );
  refalrts::link_brackets( context[17], context[29] );
  refalrts::link_brackets( context[22], context[18] );
  refalrts::link_brackets( context[4], context[12] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[1];
  res = refalrts::splice_evar( res, context[29], context[29] );
  res = refalrts::splice_evar( res, context[2], context[3] );
  res = refalrts::splice_evar( res, context[26], context[28] );
  res = refalrts::splice_evar( res, context[17], context[17] );
  res = refalrts::splice_evar( res, context[18], context[18] );
  res = refalrts::splice_evar( res, context[15], context[16] );
  res = refalrts::splice_evar( res, context[22], context[25] );
  res = refalrts::splice_evar( res, context[7], context[12] );
  res = refalrts::splice_evar( res, context[21], context[21] );
  refalrts::splice_to_freelist_open( context[4], res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_T5m_subu_check0("T5-sub_check0", 786251477U, 1176157594U, func_T5m_subu_check0);

static refalrts::FnResult func_Substitute(refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  refalrts::this_is_generated_function();
  // issue here memory for vars with 33 elems
  refalrts::Iter context[33];
  refalrts::zeros( context, 33 );
  //FAST GEN: e.$
  //GLOBAL GEN: e.$ ( t.$ e.$ )
  // </0 & Substitute/4 e.idx#0/2 (/7 t.idxVB#0/9 e.idxVBV#0/5 )/8 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  context[5] = 0;
  context[6] = 0;
  context[7] = refalrts::brackets_right( context[5], context[6], context[2], context[3] );
  if( ! context[7] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[7], context[8]);
  // closed e.idx#0 as range 2
  context[10] = refalrts::tvar_left( context[9], context[5], context[6] );
  if( ! context[10] )
    return refalrts::cRecognitionImpossible;
  // closed e.idxVBV#0 as range 5
  do {
    // ( # Variable t.idx s.idx e.idx ) e.idx ( ( # Variable t.idx s.idx e.idx ) e.idx )
    // </0 & Substitute/4 (/16 # Variable/18 t.tSrcPos1#1/19 s.sType#1/21 e.eIndex#1/14 )/17 e.eTail#1/2 (/7 (/9 # Variable/13 t.tSrcPos2#1/25 s.sType#1/24 e.eIndex#1/22 )/10 e.eExpr#1/5 )/8 >/1
    context[11] = 0;
    context[12] = 0;
    if( ! refalrts::brackets_term( context[11], context[12], context[9] ) )
      continue;
    context[13] = refalrts::ident_left(  ident_Variable, context[11], context[12] );
    if( ! context[13] )
      continue;
    context[31] = context[2];
    context[32] = context[3];
    context[14] = 0;
    context[15] = 0;
    context[16] = refalrts::brackets_left( context[14], context[15], context[31], context[32] );
    if( ! context[16] )
      continue;
    refalrts::bracket_pointers(context[16], context[17]);
    context[18] = refalrts::ident_left(  ident_Variable, context[14], context[15] );
    if( ! context[18] )
      continue;
    // closed e.eTail#1 as range 31(2)
    // closed e.eExpr#1 as range 5
    context[20] = refalrts::tvar_left( context[19], context[14], context[15] );
    if( ! context[20] )
      continue;
    if( ! refalrts::svar_left( context[21], context[14], context[15] ) )
      continue;
    // closed e.eIndex#1 as range 14
    if( ! refalrts::repeated_evar_right( context[22], context[23], context[14], context[15], context[11], context[12] ) )
      continue;
    if( ! refalrts::repeated_stvar_right( context[24], context[21], context[11], context[12] ) )
      continue;
    context[26] = refalrts::tvar_left( context[25], context[11], context[12] );
    if( ! context[26] )
      continue;
    if( ! refalrts::empty_seq( context[11], context[12] ) )
      continue;
    //DEBUG: e.eTail#1: 2
    //DEBUG: e.eExpr#1: 5
    //DEBUG: t.tSrcPos1#1: 19
    //DEBUG: s.sType#1: 21
    //DEBUG: e.eIndex#1: 14
    //DEBUG: t.tSrcPos2#1: 25

    refalrts::reset_allocator();
    //TRASH: {REMOVED TILE} {REMOVED TILE} & Substitute/4 (/16 # Variable/18 t.tSrcPos1#1/19 s.sType#1/21 e.eIndex#1/14 {REMOVED TILE}
    //RESULT: Tile{ [[ } e.eExpr#1/5/27 Tile{ AsIs: </0 } Tile{ HalfReuse: & Substitute/17 AsIs: e.eTail#1/31(2) AsIs: (/7 AsIs: (/9 AsIs: # Variable/13 AsIs: t.tSrcPos2#1/25 AsIs: s.sType#1/24 AsIs: e.eIndex#1/22 AsIs: )/10 AsIs: e.eExpr#1/5 AsIs: )/8 AsIs: >/1 ]] }
    if (! refalrts::copy_evar(context[27], context[28], context[5], context[6]))
      return refalrts::cNoMemory;
    refalrts::reinit_name( context[17], ref_Substitute.ref.function );
    refalrts::push_stack( context[1] );
    refalrts::push_stack( context[0] );
    refalrts::link_brackets( context[7], context[8] );
    refalrts::link_brackets( context[9], context[10] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[17];
    res = refalrts::splice_evar( res, context[0], context[0] );
    res = refalrts::splice_evar( res, context[27], context[28] );
    refalrts::splice_to_freelist_open( trash_prev, res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence();

  do {
    // ( # Brackets e.idx ) e.idx ( t.idx e.idx )
    // </0 & Substitute/4 (/13 # Brackets/15 e.eInBrackets#1/11 )/14 e.eTail#1/2 (/7 t.tVariable#1/9 e.eExpr#1/5 )/8 >/1
    context[31] = context[2];
    context[32] = context[3];
    context[11] = 0;
    context[12] = 0;
    context[13] = refalrts::brackets_left( context[11], context[12], context[31], context[32] );
    if( ! context[13] )
      continue;
    refalrts::bracket_pointers(context[13], context[14]);
    context[15] = refalrts::ident_left(  ident_Brackets, context[11], context[12] );
    if( ! context[15] )
      continue;
    // closed e.eInBrackets#1 as range 11
    // closed e.eTail#1 as range 31(2)
    // closed e.eExpr#1 as range 5
    //DEBUG: t.tVariable#1: 9
    //DEBUG: e.eInBrackets#1: 11
    //DEBUG: e.eTail#1: 2
    //DEBUG: e.eExpr#1: 5

    refalrts::reset_allocator();
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ HalfReuse: (/0 HalfReuse: # Brackets/4 HalfReuse: </13 HalfReuse: & Substitute/15 } Tile{ AsIs: e.eInBrackets#1/11 } (/16 t.tVariable#1/9/17 e.eExpr#1/5/19 )/21 >/22 )/23 </24 Tile{ HalfReuse: & Substitute/14 AsIs: e.eTail#1/31(2) AsIs: (/7 AsIs: t.tVariable#1/9 AsIs: e.eExpr#1/5 AsIs: )/8 AsIs: >/1 ]] }
    if( ! refalrts::alloc_open_bracket( context[16] ) )
      return refalrts::cNoMemory;
    if (! refalrts::copy_evar(context[17], context[18], context[9], context[10]))
      return refalrts::cNoMemory;
    if (! refalrts::copy_evar(context[19], context[20], context[5], context[6]))
      return refalrts::cNoMemory;
    if( ! refalrts::alloc_close_bracket( context[21] ) )
      return refalrts::cNoMemory;
    if( ! refalrts::alloc_close_call( context[22] ) )
      return refalrts::cNoMemory;
    if( ! refalrts::alloc_close_bracket( context[23] ) )
      return refalrts::cNoMemory;
    if( ! refalrts::alloc_open_call( context[24] ) )
      return refalrts::cNoMemory;
    refalrts::reinit_open_bracket( context[0] );
    refalrts::reinit_ident( context[4], ident_Brackets );
    refalrts::reinit_open_call( context[13] );
    refalrts::reinit_name( context[15], ref_Substitute.ref.function );
    refalrts::reinit_name( context[14], ref_Substitute.ref.function );
    refalrts::push_stack( context[1] );
    refalrts::push_stack( context[24] );
    refalrts::link_brackets( context[7], context[8] );
    refalrts::link_brackets( context[0], context[23] );
    refalrts::push_stack( context[22] );
    refalrts::push_stack( context[13] );
    refalrts::link_brackets( context[16], context[21] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[14];
    res = refalrts::splice_evar( res, context[16], context[24] );
    res = refalrts::splice_evar( res, context[11], context[12] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence();

  do {
    // ( # Call t.idx ( e.idx ) e.idx ) e.idx ( t.idx e.idx )
    // </0 & Substitute/4 (/13 # Call/15 t.tSrcPos#1/16 (/20 e.eFuncName#1/18 )/21 e.eInBrackets#1/11 )/14 e.eTail#1/2 (/7 t.tVariable#1/9 e.eExpr#1/5 )/8 >/1
    context[31] = context[2];
    context[32] = context[3];
    context[11] = 0;
    context[12] = 0;
    context[13] = refalrts::brackets_left( context[11], context[12], context[31], context[32] );
    if( ! context[13] )
      continue;
    refalrts::bracket_pointers(context[13], context[14]);
    context[15] = refalrts::ident_left(  ident_Call, context[11], context[12] );
    if( ! context[15] )
      continue;
    // closed e.eTail#1 as range 31(2)
    // closed e.eExpr#1 as range 5
    context[17] = refalrts::tvar_left( context[16], context[11], context[12] );
    if( ! context[17] )
      continue;
    context[18] = 0;
    context[19] = 0;
    context[20] = refalrts::brackets_left( context[18], context[19], context[11], context[12] );
    if( ! context[20] )
      continue;
    refalrts::bracket_pointers(context[20], context[21]);
    // closed e.eFuncName#1 as range 18
    // closed e.eInBrackets#1 as range 11
    //DEBUG: t.tVariable#1: 9
    //DEBUG: e.eTail#1: 2
    //DEBUG: e.eExpr#1: 5
    //DEBUG: t.tSrcPos#1: 16
    //DEBUG: e.eFuncName#1: 18
    //DEBUG: e.eInBrackets#1: 11

    refalrts::reset_allocator();
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ AsIs: (/13 AsIs: # Call/15 AsIs: t.tSrcPos#1/16 AsIs: (/20 AsIs: e.eFuncName#1/18 AsIs: )/21 } Tile{ AsIs: </0 AsIs: & Substitute/4 } Tile{ AsIs: e.eInBrackets#1/11 } (/22 t.tVariable#1/9/23 e.eExpr#1/5/25 )/27 >/28 )/29 </30 Tile{ HalfReuse: & Substitute/14 AsIs: e.eTail#1/31(2) AsIs: (/7 AsIs: t.tVariable#1/9 AsIs: e.eExpr#1/5 AsIs: )/8 AsIs: >/1 ]] }
    if( ! refalrts::alloc_open_bracket( context[22] ) )
      return refalrts::cNoMemory;
    if (! refalrts::copy_evar(context[23], context[24], context[9], context[10]))
      return refalrts::cNoMemory;
    if (! refalrts::copy_evar(context[25], context[26], context[5], context[6]))
      return refalrts::cNoMemory;
    if( ! refalrts::alloc_close_bracket( context[27] ) )
      return refalrts::cNoMemory;
    if( ! refalrts::alloc_close_call( context[28] ) )
      return refalrts::cNoMemory;
    if( ! refalrts::alloc_close_bracket( context[29] ) )
      return refalrts::cNoMemory;
    if( ! refalrts::alloc_open_call( context[30] ) )
      return refalrts::cNoMemory;
    refalrts::reinit_name( context[14], ref_Substitute.ref.function );
    refalrts::push_stack( context[1] );
    refalrts::push_stack( context[30] );
    refalrts::link_brackets( context[7], context[8] );
    refalrts::link_brackets( context[13], context[29] );
    refalrts::push_stack( context[28] );
    refalrts::push_stack( context[0] );
    refalrts::link_brackets( context[22], context[27] );
    refalrts::link_brackets( context[20], context[21] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[14];
    res = refalrts::splice_evar( res, context[22], context[30] );
    res = refalrts::splice_evar( res, context[11], context[12] );
    res = refalrts::splice_evar( res, context[0], context[4] );
    res = refalrts::splice_evar( res, context[13], context[21] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence();

  do {
    // t.idx e.idx ( t.idx e.idx )
    // </0 & Substitute/4 t.tOtherItem#1/11 e.eTail#1/2 (/7 t.tVariable#1/9 e.eExpr#1/5 )/8 >/1
    // closed e.eExpr#1 as range 5
    context[31] = context[2];
    context[32] = context[3];
    context[12] = refalrts::tvar_left( context[11], context[31], context[32] );
    if( ! context[12] )
      continue;
    // closed e.eTail#1 as range 31(2)
    //DEBUG: t.tVariable#1: 9
    //DEBUG: e.eExpr#1: 5
    //DEBUG: t.tOtherItem#1: 11
    //DEBUG: e.eTail#1: 2

    refalrts::reset_allocator();
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ AsIs: t.tOtherItem#1/11 } Tile{ AsIs: </0 AsIs: & Substitute/4 } Tile{ AsIs: e.eTail#1/31(2) } Tile{ AsIs: (/7 AsIs: t.tVariable#1/9 AsIs: e.eExpr#1/5 AsIs: )/8 AsIs: >/1 ]] }
    refalrts::push_stack( context[1] );
    refalrts::push_stack( context[0] );
    refalrts::link_brackets( context[7], context[8] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[7];
    res = refalrts::splice_evar( res, context[31], context[32] );
    res = refalrts::splice_evar( res, context[0], context[4] );
    res = refalrts::splice_evar( res, context[11], context[12] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence();

  // ( t.idx e.idx )
  // </0 & Substitute/4 (/7 t.tVariable#1/9 e.eExpr#1/5 )/8 >/1
  if( ! refalrts::empty_seq( context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  // closed e.eExpr#1 as range 5
  //DEBUG: t.tVariable#1: 9
  //DEBUG: e.eExpr#1: 5

  refalrts::reset_allocator();
  //TRASH: {REMOVED TILE} </0 & Substitute/4 (/7 t.tVariable#1/9 e.eExpr#1/5 )/8 >/1 {REMOVED TILE}
  //RESULT: Tile{ [[ } Tile{ ]] }
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = arg_end->next;
  refalrts::splice_to_freelist_open( trash_prev, res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_Substitute("Substitute", 786251477U, 1176157594U, func_Substitute);

static refalrts::FnResult func_T6(refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  refalrts::this_is_generated_function();
  // issue here memory for vars with 35 elems
  refalrts::Iter context[35];
  refalrts::zeros( context, 35 );
  // </0 & T6/4 t.tUsedVars#1/5 e.eItems#1/7 (/11 # HOLE/13 (/16 # Variable/18 t.tSrcPos#1/19 'e'/21 e.eIndex#1/14 )/17 e.ePattern#1/9 )/12 e.eItemsAndHoles#1/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  context[6] = refalrts::tvar_left( context[5], context[2], context[3] );
  if( ! context[6] )
    return refalrts::cRecognitionImpossible;
  context[7] = 0;
  context[8] = 0;
  refalrts::start_e_loop();
  do {
    context[33] = context[2];
    context[34] = context[3];
    context[9] = 0;
    context[10] = 0;
    context[11] = refalrts::brackets_left( context[9], context[10], context[33], context[34] );
    if( ! context[11] )
      continue;
    refalrts::bracket_pointers(context[11], context[12]);
    context[13] = refalrts::ident_left(  ident_HOLE, context[9], context[10] );
    if( ! context[13] )
      continue;
    context[14] = 0;
    context[15] = 0;
    context[16] = refalrts::brackets_left( context[14], context[15], context[9], context[10] );
    if( ! context[16] )
      continue;
    refalrts::bracket_pointers(context[16], context[17]);
    context[18] = refalrts::ident_left(  ident_Variable, context[14], context[15] );
    if( ! context[18] )
      continue;
    // closed e.ePattern#1 as range 9
    // closed e.eItemsAndHoles#1 as range 33(2)
    context[20] = refalrts::tvar_left( context[19], context[14], context[15] );
    if( ! context[20] )
      continue;
    context[21] = refalrts::char_left( 'e', context[14], context[15] );
    if( ! context[21] )
      continue;
    // closed e.eIndex#1 as range 14
    //DEBUG: t.tUsedVars#1: 5
    //DEBUG: e.eItems#1: 7
    //DEBUG: e.ePattern#1: 9
    //DEBUG: e.eItemsAndHoles#1: 2
    //DEBUG: t.tSrcPos#1: 19
    //DEBUG: e.eIndex#1: 14

    refalrts::reset_allocator();
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 Reuse: & T6_check/4 AsIs: t.tUsedVars#1/5 } Tile{ AsIs: (/11 } Tile{ AsIs: e.eItems#1/7 } Tile{ HalfReuse: )/18 AsIs: t.tSrcPos#1/19 HalfReuse: (/21 AsIs: e.eIndex#1/14 AsIs: )/17 } (/22 Tile{ AsIs: e.ePattern#1/9 } Tile{ HalfReuse: )/13 AsIs: (/16 } Tile{ AsIs: e.eItemsAndHoles#1/33(2) } Tile{ AsIs: )/12 } </23 & NewName/24 t.tUsedVars#1/5/25 'e'/27 e.eIndex#1/14/28"_fix"/30 >/32 Tile{ AsIs: >/1 ]] }
    if( ! refalrts::alloc_open_bracket( context[22] ) )
      return refalrts::cNoMemory;
    if( ! refalrts::alloc_open_call( context[23] ) )
      return refalrts::cNoMemory;
    if( ! refalrts::alloc_name( context[24], ref_NewName.ref.function ) )
      return refalrts::cNoMemory;
    if (! refalrts::copy_evar(context[25], context[26], context[5], context[6]))
      return refalrts::cNoMemory;
    if( ! refalrts::alloc_char( context[27], 'e' ) )
      return refalrts::cNoMemory;
    if (! refalrts::copy_evar(context[28], context[29], context[14], context[15]))
      return refalrts::cNoMemory;
    if( ! refalrts::alloc_chars( context[30], context[31], "_fix", 4 ) )
      return refalrts::cNoMemory;
    if( ! refalrts::alloc_close_call( context[32] ) )
      return refalrts::cNoMemory;
    refalrts::update_name( context[4], ref_T6u_check.ref.function );
    refalrts::reinit_close_bracket( context[18] );
    refalrts::reinit_open_bracket( context[21] );
    refalrts::reinit_close_bracket( context[13] );
    refalrts::push_stack( context[1] );
    refalrts::push_stack( context[0] );
    refalrts::push_stack( context[32] );
    refalrts::push_stack( context[23] );
    refalrts::link_brackets( context[16], context[12] );
    refalrts::link_brackets( context[22], context[13] );
    refalrts::link_brackets( context[21], context[17] );
    refalrts::link_brackets( context[11], context[18] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    res = refalrts::splice_evar( res, context[23], context[32] );
    res = refalrts::splice_evar( res, context[12], context[12] );
    res = refalrts::splice_evar( res, context[33], context[34] );
    res = refalrts::splice_evar( res, context[13], context[16] );
    res = refalrts::splice_evar( res, context[9], context[10] );
    res = refalrts::splice_evar( res, context[22], context[22] );
    res = refalrts::splice_evar( res, context[18], context[17] );
    res = refalrts::splice_evar( res, context[7], context[8] );
    res = refalrts::splice_evar( res, context[11], context[11] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( refalrts::open_evar_advance( context[7], context[8], context[2], context[3] ) );
  return refalrts::cRecognitionImpossible;
}

static refalrts::NativeReference nat_ref_T6("T6", 786251477U, 1176157594U, func_T6);

static refalrts::FnResult func_T6u_check(refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  refalrts::this_is_generated_function();
  // issue here memory for vars with 41 elems
  refalrts::Iter context[41];
  refalrts::zeros( context, 41 );
  //FAST GEN: e.$
  //GLOBAL GEN: e.$
  // </0 & T6_check/4 e.idx#0/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.idx#0 as range 2
  do {
    // t.idx ( e.idx ) t.idx ( e.idx ) ( e.idx ) ( e.idx ) t.idx e.idx
    // </0 & T6_check/4 t.tUsedVars#1/5 (/9 e.eItems#1/7 )/10 t.tSrcPos#1/11 (/15 e.eIndex#1/13 )/16 (/19 e.ePattern#1/17 )/20 (/23 e.eItemsAndHoles#1/21 )/24 t.tUsedVars1#1/25 e.eeX_fix#1/2 >/1
    context[39] = context[2];
    context[40] = context[3];
    context[6] = refalrts::tvar_left( context[5], context[39], context[40] );
    if( ! context[6] )
      continue;
    context[7] = 0;
    context[8] = 0;
    context[9] = refalrts::brackets_left( context[7], context[8], context[39], context[40] );
    if( ! context[9] )
      continue;
    refalrts::bracket_pointers(context[9], context[10]);
    // closed e.eItems#1 as range 7
    context[12] = refalrts::tvar_left( context[11], context[39], context[40] );
    if( ! context[12] )
      continue;
    context[13] = 0;
    context[14] = 0;
    context[15] = refalrts::brackets_left( context[13], context[14], context[39], context[40] );
    if( ! context[15] )
      continue;
    refalrts::bracket_pointers(context[15], context[16]);
    context[17] = 0;
    context[18] = 0;
    context[19] = refalrts::brackets_left( context[17], context[18], context[39], context[40] );
    if( ! context[19] )
      continue;
    refalrts::bracket_pointers(context[19], context[20]);
    context[21] = 0;
    context[22] = 0;
    context[23] = refalrts::brackets_left( context[21], context[22], context[39], context[40] );
    if( ! context[23] )
      continue;
    refalrts::bracket_pointers(context[23], context[24]);
    // closed e.eIndex#1 as range 13
    // closed e.ePattern#1 as range 17
    // closed e.eItemsAndHoles#1 as range 21
    context[26] = refalrts::tvar_left( context[25], context[39], context[40] );
    if( ! context[26] )
      continue;
    // closed e.eeX_fix#1 as range 39(2)
    //DEBUG: t.tUsedVars#1: 5
    //DEBUG: e.eItems#1: 7
    //DEBUG: t.tSrcPos#1: 11
    //DEBUG: e.eIndex#1: 13
    //DEBUG: e.ePattern#1: 17
    //DEBUG: e.eItemsAndHoles#1: 21
    //DEBUG: t.tUsedVars1#1: 25
    //DEBUG: e.eeX_fix#1: 2

    refalrts::reset_allocator();
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 Reuse: & T6_check0/4 AsIs: t.tUsedVars#1/5 AsIs: (/9 AsIs: e.eItems#1/7 AsIs: )/10 AsIs: t.tSrcPos#1/11 AsIs: (/15 AsIs: e.eIndex#1/13 AsIs: )/16 AsIs: (/19 AsIs: e.ePattern#1/17 AsIs: )/20 AsIs: (/23 AsIs: e.eItemsAndHoles#1/21 AsIs: )/24 AsIs: t.tUsedVars1#1/25 } (/27 Tile{ AsIs: e.eeX_fix#1/39(2) } )/28 </29 & NewName/30 t.tUsedVars1#1/25/31 'e'/33 e.eIndex#1/13/34"_rest"/36 >/38 Tile{ AsIs: >/1 ]] }
    if( ! refalrts::alloc_open_bracket( context[27] ) )
      return refalrts::cNoMemory;
    if( ! refalrts::alloc_close_bracket( context[28] ) )
      return refalrts::cNoMemory;
    if( ! refalrts::alloc_open_call( context[29] ) )
      return refalrts::cNoMemory;
    if( ! refalrts::alloc_name( context[30], ref_NewName.ref.function ) )
      return refalrts::cNoMemory;
    if (! refalrts::copy_evar(context[31], context[32], context[25], context[26]))
      return refalrts::cNoMemory;
    if( ! refalrts::alloc_char( context[33], 'e' ) )
      return refalrts::cNoMemory;
    if (! refalrts::copy_evar(context[34], context[35], context[13], context[14]))
      return refalrts::cNoMemory;
    if( ! refalrts::alloc_chars( context[36], context[37], "_rest", 5 ) )
      return refalrts::cNoMemory;
    if( ! refalrts::alloc_close_call( context[38] ) )
      return refalrts::cNoMemory;
    refalrts::update_name( context[4], ref_T6u_check0.ref.function );
    refalrts::push_stack( context[1] );
    refalrts::push_stack( context[0] );
    refalrts::push_stack( context[38] );
    refalrts::push_stack( context[29] );
    refalrts::link_brackets( context[27], context[28] );
    refalrts::link_brackets( context[23], context[24] );
    refalrts::link_brackets( context[19], context[20] );
    refalrts::link_brackets( context[15], context[16] );
    refalrts::link_brackets( context[9], context[10] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    res = refalrts::splice_evar( res, context[28], context[38] );
    res = refalrts::splice_evar( res, context[39], context[40] );
    res = refalrts::splice_evar( res, context[27], context[27] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence();

  // e.idx
  // </0 & T6_check/4 e.eOther#1/2 >/1
  // closed e.eOther#1 as range 2
  //DEBUG: e.eOther#1: 2

  refalrts::reset_allocator();
  //TRASH: {REMOVED TILE}
  //RESULT: Tile{ [[ AsIs: </0 Reuse: & T6_cont/4 AsIs: e.eOther#1/2 AsIs: >/1 ]] }
  refalrts::update_name( context[4], ref_T6u_cont.ref.function );
  refalrts::push_stack( context[1] );
  refalrts::push_stack( context[0] );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_T6u_check("T6_check", 786251477U, 1176157594U, func_T6u_check);

static refalrts::FnResult func_T6u_forward(refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  refalrts::this_is_generated_function();
  // issue here memory for vars with 13 elems
  refalrts::Iter context[13];
  refalrts::zeros( context, 13 );
  // </0 & T6_forward/4 t.tUsedVars#1/5 (/9 e.eItems_fix#1/7 )/10 t.tItems_next#1/11 e.eItems_rest#1/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  context[6] = refalrts::tvar_left( context[5], context[2], context[3] );
  if( ! context[6] )
    return refalrts::cRecognitionImpossible;
  context[7] = 0;
  context[8] = 0;
  context[9] = refalrts::brackets_left( context[7], context[8], context[2], context[3] );
  if( ! context[9] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[9], context[10]);
  // closed e.eItems_fix#1 as range 7
  context[12] = refalrts::tvar_left( context[11], context[2], context[3] );
  if( ! context[12] )
    return refalrts::cRecognitionImpossible;
  // closed e.eItems_rest#1 as range 2
  //DEBUG: t.tUsedVars#1: 5
  //DEBUG: e.eItems_fix#1: 7
  //DEBUG: t.tItems_next#1: 11
  //DEBUG: e.eItems_rest#1: 2

  refalrts::reset_allocator();
  //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ AsIs: </0 Reuse: & T6_next/4 AsIs: t.tUsedVars#1/5 AsIs: (/9 } Tile{ AsIs: e.eItems_fix#1/7 } Tile{ AsIs: t.tItems_next#1/11 } Tile{ AsIs: )/10 } Tile{ AsIs: e.eItems_rest#1/2 } Tile{ AsIs: >/1 ]] }
  refalrts::update_name( context[4], ref_T6u_next.ref.function );
  refalrts::push_stack( context[1] );
  refalrts::push_stack( context[0] );
  refalrts::link_brackets( context[9], context[10] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[1];
  res = refalrts::splice_evar( res, context[2], context[3] );
  res = refalrts::splice_evar( res, context[10], context[10] );
  res = refalrts::splice_evar( res, context[11], context[12] );
  res = refalrts::splice_evar( res, context[7], context[8] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_T6u_forward("T6_forward", 786251477U, 1176157594U, func_T6u_forward);

static refalrts::FnResult func_T6u_next(refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  refalrts::this_is_generated_function();
  // issue here memory for vars with 37 elems
  refalrts::Iter context[37];
  refalrts::zeros( context, 37 );
  // </0 & T6_next/4 t.tUsedVars#1/5 (/9 e.eItems_fix#1/7 )/10 e.eItems_var#1/11 (/15 # HOLE/17 (/20 # Variable/22 t.tSrcPos#1/23 'e'/25 e.eIndex#1/18 )/21 e.ePattern#1/13 )/16 e.eItemsAndHoles#1/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  context[6] = refalrts::tvar_left( context[5], context[2], context[3] );
  if( ! context[6] )
    return refalrts::cRecognitionImpossible;
  context[7] = 0;
  context[8] = 0;
  context[9] = refalrts::brackets_left( context[7], context[8], context[2], context[3] );
  if( ! context[9] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[9], context[10]);
  // closed e.eItems_fix#1 as range 7
  context[11] = 0;
  context[12] = 0;
  refalrts::start_e_loop();
  do {
    context[35] = context[2];
    context[36] = context[3];
    context[13] = 0;
    context[14] = 0;
    context[15] = refalrts::brackets_left( context[13], context[14], context[35], context[36] );
    if( ! context[15] )
      continue;
    refalrts::bracket_pointers(context[15], context[16]);
    context[17] = refalrts::ident_left(  ident_HOLE, context[13], context[14] );
    if( ! context[17] )
      continue;
    context[18] = 0;
    context[19] = 0;
    context[20] = refalrts::brackets_left( context[18], context[19], context[13], context[14] );
    if( ! context[20] )
      continue;
    refalrts::bracket_pointers(context[20], context[21]);
    context[22] = refalrts::ident_left(  ident_Variable, context[18], context[19] );
    if( ! context[22] )
      continue;
    // closed e.ePattern#1 as range 13
    // closed e.eItemsAndHoles#1 as range 35(2)
    context[24] = refalrts::tvar_left( context[23], context[18], context[19] );
    if( ! context[24] )
      continue;
    context[25] = refalrts::char_left( 'e', context[18], context[19] );
    if( ! context[25] )
      continue;
    // closed e.eIndex#1 as range 18
    //DEBUG: t.tUsedVars#1: 5
    //DEBUG: e.eItems_fix#1: 7
    //DEBUG: e.eItems_var#1: 11
    //DEBUG: e.ePattern#1: 13
    //DEBUG: e.eItemsAndHoles#1: 2
    //DEBUG: t.tSrcPos#1: 23
    //DEBUG: e.eIndex#1: 18

    refalrts::reset_allocator();
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 Reuse: & T6_check/4 AsIs: t.tUsedVars#1/5 AsIs: (/9 } Tile{ AsIs: e.eItems_fix#1/7 } Tile{ AsIs: e.eItems_var#1/11 } Tile{ HalfReuse: )/22 AsIs: t.tSrcPos#1/23 HalfReuse: (/25 AsIs: e.eIndex#1/18 AsIs: )/21 } Tile{ AsIs: (/15 } Tile{ AsIs: e.ePattern#1/13 } Tile{ HalfReuse: )/17 AsIs: (/20 } Tile{ AsIs: e.eItemsAndHoles#1/35(2) } Tile{ AsIs: )/16 } Tile{ HalfReuse: </10 } & NewName/26 t.tUsedVars#1/5/27 'e'/29 e.eIndex#1/18/30"_fix"/32 >/34 Tile{ AsIs: >/1 ]] }
    if( ! refalrts::alloc_name( context[26], ref_NewName.ref.function ) )
      return refalrts::cNoMemory;
    if (! refalrts::copy_evar(context[27], context[28], context[5], context[6]))
      return refalrts::cNoMemory;
    if( ! refalrts::alloc_char( context[29], 'e' ) )
      return refalrts::cNoMemory;
    if (! refalrts::copy_evar(context[30], context[31], context[18], context[19]))
      return refalrts::cNoMemory;
    if( ! refalrts::alloc_chars( context[32], context[33], "_fix", 4 ) )
      return refalrts::cNoMemory;
    if( ! refalrts::alloc_close_call( context[34] ) )
      return refalrts::cNoMemory;
    refalrts::update_name( context[4], ref_T6u_check.ref.function );
    refalrts::reinit_close_bracket( context[22] );
    refalrts::reinit_open_bracket( context[25] );
    refalrts::reinit_close_bracket( context[17] );
    refalrts::reinit_open_call( context[10] );
    refalrts::push_stack( context[1] );
    refalrts::push_stack( context[0] );
    refalrts::push_stack( context[34] );
    refalrts::push_stack( context[10] );
    refalrts::link_brackets( context[20], context[16] );
    refalrts::link_brackets( context[15], context[17] );
    refalrts::link_brackets( context[25], context[21] );
    refalrts::link_brackets( context[9], context[22] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    res = refalrts::splice_evar( res, context[26], context[34] );
    res = refalrts::splice_evar( res, context[10], context[10] );
    res = refalrts::splice_evar( res, context[16], context[16] );
    res = refalrts::splice_evar( res, context[35], context[36] );
    res = refalrts::splice_evar( res, context[17], context[20] );
    res = refalrts::splice_evar( res, context[13], context[14] );
    res = refalrts::splice_evar( res, context[15], context[15] );
    res = refalrts::splice_evar( res, context[22], context[21] );
    res = refalrts::splice_evar( res, context[11], context[12] );
    res = refalrts::splice_evar( res, context[7], context[8] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( refalrts::open_evar_advance( context[11], context[12], context[2], context[3] ) );
  return refalrts::cRecognitionImpossible;
}

static refalrts::NativeReference nat_ref_T6u_next("T6_next", 786251477U, 1176157594U, func_T6u_next);

static refalrts::FnResult func_T6u_check0(refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  refalrts::this_is_generated_function();
  // issue here memory for vars with 38 elems
  refalrts::Iter context[38];
  refalrts::zeros( context, 38 );
  //FAST GEN: t.$ ( e.$ ) t.$ ( e.$ ) ( e.$ ) ( e.$ ) t.$ ( e.$ ) e.$
  //GLOBAL GEN: t.$ ( e.$ ) t.$ ( e.$ ) ( e.$ ) ( e.$ ) t.$ ( e.$ ) e.$
  // </0 & T6_check0/4 t.idx#0/5 (/9 e.idxVB#0/7 )/10 t.idxVT#0/11 (/15 e.idxVTVB#0/13 )/16 (/19 e.idxVTVTB#0/17 )/20 (/23 e.idxVTVTTB#0/21 )/24 t.idxVTVTTT#0/25 (/29 e.idxVTVTTTVB#0/27 )/30 e.idxVTVTTTVT#0/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  context[6] = refalrts::tvar_left( context[5], context[2], context[3] );
  if( ! context[6] )
    return refalrts::cRecognitionImpossible;
  context[7] = 0;
  context[8] = 0;
  context[9] = refalrts::brackets_left( context[7], context[8], context[2], context[3] );
  if( ! context[9] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[9], context[10]);
  // closed e.idxVB#0 as range 7
  context[12] = refalrts::tvar_left( context[11], context[2], context[3] );
  if( ! context[12] )
    return refalrts::cRecognitionImpossible;
  context[13] = 0;
  context[14] = 0;
  context[15] = refalrts::brackets_left( context[13], context[14], context[2], context[3] );
  if( ! context[15] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[15], context[16]);
  context[17] = 0;
  context[18] = 0;
  context[19] = refalrts::brackets_left( context[17], context[18], context[2], context[3] );
  if( ! context[19] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[19], context[20]);
  context[21] = 0;
  context[22] = 0;
  context[23] = refalrts::brackets_left( context[21], context[22], context[2], context[3] );
  if( ! context[23] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[23], context[24]);
  // closed e.idxVTVB#0 as range 13
  // closed e.idxVTVTB#0 as range 17
  // closed e.idxVTVTTB#0 as range 21
  context[26] = refalrts::tvar_left( context[25], context[2], context[3] );
  if( ! context[26] )
    return refalrts::cRecognitionImpossible;
  context[27] = 0;
  context[28] = 0;
  context[29] = refalrts::brackets_left( context[27], context[28], context[2], context[3] );
  if( ! context[29] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[29], context[30]);
  // closed e.idxVTVTTTVB#0 as range 27
  // closed e.idxVTVTTTVT#0 as range 2
  do {
    // t.idx ( e.idx ) t.idx ( e.idx ) ( e.idx ) ( e.idx ) t.idx ( e.idx ) t.idx e.idx
    // </0 & T6_check0/4 t.tUsedVars#1/5 (/9 e.eItems#1/7 )/10 t.tSrcPos#1/11 (/15 e.eIndex#1/13 )/16 (/19 e.ePattern#1/17 )/20 (/23 e.eItemsAndHoles#1/21 )/24 t.tUsedVars1#1/25 (/29 e.eeX_fix#1/27 )/30 t.tUsedVars2#1/31 e.eeX_rest#1/2 >/1
    // closed e.eItems#1 as range 7
    // closed e.eIndex#1 as range 13
    // closed e.ePattern#1 as range 17
    // closed e.eItemsAndHoles#1 as range 21
    // closed e.eeX_fix#1 as range 27
    context[36] = context[2];
    context[37] = context[3];
    context[32] = refalrts::tvar_left( context[31], context[36], context[37] );
    if( ! context[32] )
      continue;
    // closed e.eeX_rest#1 as range 36(2)
    //DEBUG: t.tUsedVars#1: 5
    //DEBUG: t.tSrcPos#1: 11
    //DEBUG: t.tUsedVars1#1: 25
    //DEBUG: e.eItems#1: 7
    //DEBUG: e.eIndex#1: 13
    //DEBUG: e.ePattern#1: 17
    //DEBUG: e.eItemsAndHoles#1: 21
    //DEBUG: e.eeX_fix#1: 27
    //DEBUG: t.tUsedVars2#1: 31
    //DEBUG: e.eeX_rest#1: 2

    refalrts::reset_allocator();
    //TRASH: {REMOVED TILE} {REMOVED TILE} t.tUsedVars#1/5 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} e.eIndex#1/13 {REMOVED TILE} e.ePattern#1/17 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} t.tUsedVars1#1/25 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ AsIs: (/9 AsIs: e.eItems#1/7 HalfReuse: (/10 } Tile{ HalfReuse: # Brackets/16 AsIs: (/19 } Tile{ HalfReuse: # Variable/29 } Tile{ AsIs: t.tSrcPos#1/11 } Tile{ AsIs: e.eeX_fix#1/27 } Tile{ AsIs: )/24 } Tile{ AsIs: )/20 AsIs: (/23 } Tile{ HalfReuse: # Variable/15 } t.tSrcPos#1/11/33 Tile{ AsIs: e.eeX_rest#1/36(2) } Tile{ AsIs: )/30 } Tile{ AsIs: </0 Reuse: & PassiveHoles/4 } Tile{ AsIs: t.tUsedVars2#1/31 } Tile{ AsIs: e.eItemsAndHoles#1/21 } >/35 Tile{ HalfReuse: )/1 ]] }
    if (! refalrts::copy_evar(context[33], context[34], context[11], context[12]))
      return refalrts::cNoMemory;
    if( ! refalrts::alloc_close_call( context[35] ) )
      return refalrts::cNoMemory;
    refalrts::reinit_open_bracket( context[10] );
    refalrts::reinit_ident( context[16], ident_Brackets );
    refalrts::reinit_ident( context[29], ident_Variable );
    refalrts::reinit_ident( context[15], ident_Variable );
    refalrts::update_name( context[4], ref_PassiveHoles.ref.function );
    refalrts::reinit_close_bracket( context[1] );
    refalrts::link_brackets( context[9], context[1] );
    refalrts::push_stack( context[35] );
    refalrts::push_stack( context[0] );
    refalrts::link_brackets( context[23], context[30] );
    refalrts::link_brackets( context[10], context[20] );
    refalrts::link_brackets( context[19], context[24] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    res = refalrts::splice_evar( res, context[35], context[35] );
    res = refalrts::splice_evar( res, context[21], context[22] );
    res = refalrts::splice_evar( res, context[31], context[32] );
    res = refalrts::splice_evar( res, context[0], context[4] );
    res = refalrts::splice_evar( res, context[30], context[30] );
    res = refalrts::splice_evar( res, context[36], context[37] );
    res = refalrts::splice_evar( res, context[33], context[34] );
    res = refalrts::splice_evar( res, context[15], context[15] );
    res = refalrts::splice_evar( res, context[20], context[23] );
    res = refalrts::splice_evar( res, context[24], context[24] );
    res = refalrts::splice_evar( res, context[27], context[28] );
    res = refalrts::splice_evar( res, context[11], context[12] );
    res = refalrts::splice_evar( res, context[29], context[29] );
    res = refalrts::splice_evar( res, context[16], context[19] );
    res = refalrts::splice_evar( res, context[9], context[10] );
    refalrts::splice_to_freelist_open( trash_prev, res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence();

  // t.idx ( e.idx ) t.idx ( e.idx ) ( e.idx ) ( e.idx ) t.idx ( e.idx ) e.idx
  // </0 & T6_check0/4 t.tUsedVars#1/5 (/9 e.eItems#1/7 )/10 t.tSrcPos#1/11 (/15 e.eIndex#1/13 )/16 (/19 e.ePattern#1/17 )/20 (/23 e.eItemsAndHoles#1/21 )/24 t.tUsedVars1#1/25 (/29 e.eeX_fix#1/27 )/30 e.eOther#1/2 >/1
  // closed e.eItems#1 as range 7
  // closed e.eIndex#1 as range 13
  // closed e.ePattern#1 as range 17
  // closed e.eItemsAndHoles#1 as range 21
  // closed e.eeX_fix#1 as range 27
  // closed e.eOther#1 as range 2
  //DEBUG: t.tUsedVars#1: 5
  //DEBUG: t.tSrcPos#1: 11
  //DEBUG: t.tUsedVars1#1: 25
  //DEBUG: e.eItems#1: 7
  //DEBUG: e.eIndex#1: 13
  //DEBUG: e.ePattern#1: 17
  //DEBUG: e.eItemsAndHoles#1: 21
  //DEBUG: e.eeX_fix#1: 27
  //DEBUG: e.eOther#1: 2

  refalrts::reset_allocator();
  //TRASH: {REMOVED TILE} (/29 {REMOVED TILE} )/30 e.eOther#1/2 {REMOVED TILE}
  //RESULT: Tile{ [[ AsIs: </0 Reuse: & T6_cont/4 AsIs: t.tUsedVars#1/5 AsIs: (/9 AsIs: e.eItems#1/7 AsIs: )/10 AsIs: t.tSrcPos#1/11 AsIs: (/15 AsIs: e.eIndex#1/13 AsIs: )/16 AsIs: (/19 AsIs: e.ePattern#1/17 AsIs: )/20 AsIs: (/23 AsIs: e.eItemsAndHoles#1/21 AsIs: )/24 AsIs: t.tUsedVars1#1/25 } Tile{ AsIs: e.eeX_fix#1/27 } Tile{ AsIs: >/1 ]] }
  refalrts::update_name( context[4], ref_T6u_cont.ref.function );
  refalrts::push_stack( context[1] );
  refalrts::push_stack( context[0] );
  refalrts::link_brackets( context[23], context[24] );
  refalrts::link_brackets( context[19], context[20] );
  refalrts::link_brackets( context[15], context[16] );
  refalrts::link_brackets( context[9], context[10] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[1];
  res = refalrts::splice_evar( res, context[27], context[28] );
  refalrts::splice_to_freelist_open( context[26], res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_T6u_check0("T6_check0", 786251477U, 1176157594U, func_T6u_check0);

static refalrts::FnResult func_T6u_cont(refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  refalrts::this_is_generated_function();
  // issue here memory for vars with 26 elems
  refalrts::Iter context[26];
  refalrts::zeros( context, 26 );
  // </0 & T6_cont/4 t.tUsedVars#1/5 (/9 e.eItems#1/7 )/10 t.tSrcPos#1/11 (/15 e.eIndex#1/13 )/16 (/19 e.ePattern#1/17 )/20 (/23 e.eItemsAndHoles#1/21 )/24 e.eOther#1/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  context[6] = refalrts::tvar_left( context[5], context[2], context[3] );
  if( ! context[6] )
    return refalrts::cRecognitionImpossible;
  context[7] = 0;
  context[8] = 0;
  context[9] = refalrts::brackets_left( context[7], context[8], context[2], context[3] );
  if( ! context[9] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[9], context[10]);
  // closed e.eItems#1 as range 7
  context[12] = refalrts::tvar_left( context[11], context[2], context[3] );
  if( ! context[12] )
    return refalrts::cRecognitionImpossible;
  context[13] = 0;
  context[14] = 0;
  context[15] = refalrts::brackets_left( context[13], context[14], context[2], context[3] );
  if( ! context[15] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[15], context[16]);
  context[17] = 0;
  context[18] = 0;
  context[19] = refalrts::brackets_left( context[17], context[18], context[2], context[3] );
  if( ! context[19] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[19], context[20]);
  context[21] = 0;
  context[22] = 0;
  context[23] = refalrts::brackets_left( context[21], context[22], context[2], context[3] );
  if( ! context[23] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[23], context[24]);
  // closed e.eIndex#1 as range 13
  // closed e.ePattern#1 as range 17
  // closed e.eItemsAndHoles#1 as range 21
  // closed e.eOther#1 as range 2
  //DEBUG: t.tUsedVars#1: 5
  //DEBUG: e.eItems#1: 7
  //DEBUG: t.tSrcPos#1: 11
  //DEBUG: e.eIndex#1: 13
  //DEBUG: e.ePattern#1: 17
  //DEBUG: e.eItemsAndHoles#1: 21
  //DEBUG: e.eOther#1: 2

  refalrts::reset_allocator();
  //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} e.eOther#1/2 {REMOVED TILE}
  //RESULT: Tile{ [[ AsIs: </0 Reuse: & T6_forward/4 AsIs: t.tUsedVars#1/5 AsIs: (/9 AsIs: e.eItems#1/7 AsIs: )/10 } Tile{ AsIs: (/19 } Tile{ HalfReuse: # HOLE/20 AsIs: (/23 } # Variable/25 Tile{ AsIs: t.tSrcPos#1/11 HalfReuse: 'e'/15 AsIs: e.eIndex#1/13 AsIs: )/16 } Tile{ AsIs: e.ePattern#1/17 } Tile{ AsIs: )/24 } Tile{ AsIs: e.eItemsAndHoles#1/21 } Tile{ AsIs: >/1 ]] }
  if( ! refalrts::alloc_ident( context[25], ident_Variable ) )
    return refalrts::cNoMemory;
  refalrts::update_name( context[4], ref_T6u_forward.ref.function );
  refalrts::reinit_ident( context[20], ident_HOLE );
  refalrts::reinit_char( context[15], 'e' );
  refalrts::push_stack( context[1] );
  refalrts::push_stack( context[0] );
  refalrts::link_brackets( context[19], context[24] );
  refalrts::link_brackets( context[23], context[16] );
  refalrts::link_brackets( context[9], context[10] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[1];
  res = refalrts::splice_evar( res, context[21], context[22] );
  res = refalrts::splice_evar( res, context[24], context[24] );
  res = refalrts::splice_evar( res, context[17], context[18] );
  res = refalrts::splice_evar( res, context[11], context[16] );
  res = refalrts::splice_evar( res, context[25], context[25] );
  res = refalrts::splice_evar( res, context[20], context[23] );
  res = refalrts::splice_evar( res, context[19], context[19] );
  refalrts::splice_to_freelist_open( context[10], res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_T6u_cont("T6_cont", 786251477U, 1176157594U, func_T6u_cont);

static refalrts::FnResult func_T7(refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  refalrts::this_is_generated_function();
  // issue here memory for vars with 35 elems
  refalrts::Iter context[35];
  refalrts::zeros( context, 35 );
  // </0 & T7/4 t.tUsedVars#1/5 e.eItems#1/7 (/11 # HOLE/13 (/16 # Variable/18 t.tSrcPos#1/19 'e'/21 e.eIndex#1/14 )/17 e.ePattern#1/9 )/12 e.eItemsAndHoles#1/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  context[6] = refalrts::tvar_left( context[5], context[2], context[3] );
  if( ! context[6] )
    return refalrts::cRecognitionImpossible;
  context[7] = 0;
  context[8] = 0;
  refalrts::start_e_loop();
  do {
    context[33] = context[2];
    context[34] = context[3];
    context[9] = 0;
    context[10] = 0;
    context[11] = refalrts::brackets_left( context[9], context[10], context[33], context[34] );
    if( ! context[11] )
      continue;
    refalrts::bracket_pointers(context[11], context[12]);
    context[13] = refalrts::ident_left(  ident_HOLE, context[9], context[10] );
    if( ! context[13] )
      continue;
    context[14] = 0;
    context[15] = 0;
    context[16] = refalrts::brackets_left( context[14], context[15], context[9], context[10] );
    if( ! context[16] )
      continue;
    refalrts::bracket_pointers(context[16], context[17]);
    context[18] = refalrts::ident_left(  ident_Variable, context[14], context[15] );
    if( ! context[18] )
      continue;
    // closed e.ePattern#1 as range 9
    // closed e.eItemsAndHoles#1 as range 33(2)
    context[20] = refalrts::tvar_left( context[19], context[14], context[15] );
    if( ! context[20] )
      continue;
    context[21] = refalrts::char_left( 'e', context[14], context[15] );
    if( ! context[21] )
      continue;
    // closed e.eIndex#1 as range 14
    //DEBUG: t.tUsedVars#1: 5
    //DEBUG: e.eItems#1: 7
    //DEBUG: e.ePattern#1: 9
    //DEBUG: e.eItemsAndHoles#1: 2
    //DEBUG: t.tSrcPos#1: 19
    //DEBUG: e.eIndex#1: 14

    refalrts::reset_allocator();
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 Reuse: & T7_check/4 AsIs: t.tUsedVars#1/5 } Tile{ AsIs: (/11 } Tile{ AsIs: e.eItems#1/7 } Tile{ HalfReuse: )/18 AsIs: t.tSrcPos#1/19 HalfReuse: (/21 AsIs: e.eIndex#1/14 AsIs: )/17 } (/22 Tile{ AsIs: e.ePattern#1/9 } Tile{ HalfReuse: )/13 AsIs: (/16 } Tile{ AsIs: e.eItemsAndHoles#1/33(2) } Tile{ AsIs: )/12 } </23 & NewName/24 t.tUsedVars#1/5/25 'e'/27 e.eIndex#1/14/28"_fix"/30 >/32 Tile{ AsIs: >/1 ]] }
    if( ! refalrts::alloc_open_bracket( context[22] ) )
      return refalrts::cNoMemory;
    if( ! refalrts::alloc_open_call( context[23] ) )
      return refalrts::cNoMemory;
    if( ! refalrts::alloc_name( context[24], ref_NewName.ref.function ) )
      return refalrts::cNoMemory;
    if (! refalrts::copy_evar(context[25], context[26], context[5], context[6]))
      return refalrts::cNoMemory;
    if( ! refalrts::alloc_char( context[27], 'e' ) )
      return refalrts::cNoMemory;
    if (! refalrts::copy_evar(context[28], context[29], context[14], context[15]))
      return refalrts::cNoMemory;
    if( ! refalrts::alloc_chars( context[30], context[31], "_fix", 4 ) )
      return refalrts::cNoMemory;
    if( ! refalrts::alloc_close_call( context[32] ) )
      return refalrts::cNoMemory;
    refalrts::update_name( context[4], ref_T7u_check.ref.function );
    refalrts::reinit_close_bracket( context[18] );
    refalrts::reinit_open_bracket( context[21] );
    refalrts::reinit_close_bracket( context[13] );
    refalrts::push_stack( context[1] );
    refalrts::push_stack( context[0] );
    refalrts::push_stack( context[32] );
    refalrts::push_stack( context[23] );
    refalrts::link_brackets( context[16], context[12] );
    refalrts::link_brackets( context[22], context[13] );
    refalrts::link_brackets( context[21], context[17] );
    refalrts::link_brackets( context[11], context[18] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    res = refalrts::splice_evar( res, context[23], context[32] );
    res = refalrts::splice_evar( res, context[12], context[12] );
    res = refalrts::splice_evar( res, context[33], context[34] );
    res = refalrts::splice_evar( res, context[13], context[16] );
    res = refalrts::splice_evar( res, context[9], context[10] );
    res = refalrts::splice_evar( res, context[22], context[22] );
    res = refalrts::splice_evar( res, context[18], context[17] );
    res = refalrts::splice_evar( res, context[7], context[8] );
    res = refalrts::splice_evar( res, context[11], context[11] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( refalrts::open_evar_advance( context[7], context[8], context[2], context[3] ) );
  return refalrts::cRecognitionImpossible;
}

static refalrts::NativeReference nat_ref_T7("T7", 786251477U, 1176157594U, func_T7);

static refalrts::FnResult func_T7u_check(refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  refalrts::this_is_generated_function();
  // issue here memory for vars with 41 elems
  refalrts::Iter context[41];
  refalrts::zeros( context, 41 );
  //FAST GEN: e.$
  //GLOBAL GEN: e.$
  // </0 & T7_check/4 e.idx#0/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.idx#0 as range 2
  do {
    // t.idx ( e.idx ) t.idx ( e.idx ) ( e.idx ) ( e.idx ) t.idx e.idx
    // </0 & T7_check/4 t.tUsedVars#1/5 (/9 e.eItems#1/7 )/10 t.tSrcPos#1/11 (/15 e.eIndex#1/13 )/16 (/19 e.ePattern#1/17 )/20 (/23 e.eItemsAndHoles#1/21 )/24 t.tUsedVars1#1/25 e.eeX_fix#1/2 >/1
    context[39] = context[2];
    context[40] = context[3];
    context[6] = refalrts::tvar_left( context[5], context[39], context[40] );
    if( ! context[6] )
      continue;
    context[7] = 0;
    context[8] = 0;
    context[9] = refalrts::brackets_left( context[7], context[8], context[39], context[40] );
    if( ! context[9] )
      continue;
    refalrts::bracket_pointers(context[9], context[10]);
    // closed e.eItems#1 as range 7
    context[12] = refalrts::tvar_left( context[11], context[39], context[40] );
    if( ! context[12] )
      continue;
    context[13] = 0;
    context[14] = 0;
    context[15] = refalrts::brackets_left( context[13], context[14], context[39], context[40] );
    if( ! context[15] )
      continue;
    refalrts::bracket_pointers(context[15], context[16]);
    context[17] = 0;
    context[18] = 0;
    context[19] = refalrts::brackets_left( context[17], context[18], context[39], context[40] );
    if( ! context[19] )
      continue;
    refalrts::bracket_pointers(context[19], context[20]);
    context[21] = 0;
    context[22] = 0;
    context[23] = refalrts::brackets_left( context[21], context[22], context[39], context[40] );
    if( ! context[23] )
      continue;
    refalrts::bracket_pointers(context[23], context[24]);
    // closed e.eIndex#1 as range 13
    // closed e.ePattern#1 as range 17
    // closed e.eItemsAndHoles#1 as range 21
    context[26] = refalrts::tvar_left( context[25], context[39], context[40] );
    if( ! context[26] )
      continue;
    // closed e.eeX_fix#1 as range 39(2)
    //DEBUG: t.tUsedVars#1: 5
    //DEBUG: e.eItems#1: 7
    //DEBUG: t.tSrcPos#1: 11
    //DEBUG: e.eIndex#1: 13
    //DEBUG: e.ePattern#1: 17
    //DEBUG: e.eItemsAndHoles#1: 21
    //DEBUG: t.tUsedVars1#1: 25
    //DEBUG: e.eeX_fix#1: 2

    refalrts::reset_allocator();
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 Reuse: & T7_check0/4 AsIs: t.tUsedVars#1/5 AsIs: (/9 AsIs: e.eItems#1/7 AsIs: )/10 AsIs: t.tSrcPos#1/11 AsIs: (/15 AsIs: e.eIndex#1/13 AsIs: )/16 AsIs: (/19 AsIs: e.ePattern#1/17 AsIs: )/20 AsIs: (/23 AsIs: e.eItemsAndHoles#1/21 AsIs: )/24 AsIs: t.tUsedVars1#1/25 } (/27 Tile{ AsIs: e.eeX_fix#1/39(2) } )/28 </29 & NewName/30 t.tUsedVars1#1/25/31 'e'/33 e.eIndex#1/13/34"_rest"/36 >/38 Tile{ AsIs: >/1 ]] }
    if( ! refalrts::alloc_open_bracket( context[27] ) )
      return refalrts::cNoMemory;
    if( ! refalrts::alloc_close_bracket( context[28] ) )
      return refalrts::cNoMemory;
    if( ! refalrts::alloc_open_call( context[29] ) )
      return refalrts::cNoMemory;
    if( ! refalrts::alloc_name( context[30], ref_NewName.ref.function ) )
      return refalrts::cNoMemory;
    if (! refalrts::copy_evar(context[31], context[32], context[25], context[26]))
      return refalrts::cNoMemory;
    if( ! refalrts::alloc_char( context[33], 'e' ) )
      return refalrts::cNoMemory;
    if (! refalrts::copy_evar(context[34], context[35], context[13], context[14]))
      return refalrts::cNoMemory;
    if( ! refalrts::alloc_chars( context[36], context[37], "_rest", 5 ) )
      return refalrts::cNoMemory;
    if( ! refalrts::alloc_close_call( context[38] ) )
      return refalrts::cNoMemory;
    refalrts::update_name( context[4], ref_T7u_check0.ref.function );
    refalrts::push_stack( context[1] );
    refalrts::push_stack( context[0] );
    refalrts::push_stack( context[38] );
    refalrts::push_stack( context[29] );
    refalrts::link_brackets( context[27], context[28] );
    refalrts::link_brackets( context[23], context[24] );
    refalrts::link_brackets( context[19], context[20] );
    refalrts::link_brackets( context[15], context[16] );
    refalrts::link_brackets( context[9], context[10] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    res = refalrts::splice_evar( res, context[28], context[38] );
    res = refalrts::splice_evar( res, context[39], context[40] );
    res = refalrts::splice_evar( res, context[27], context[27] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence();

  // e.idx
  // </0 & T7_check/4 e.eOther#1/2 >/1
  // closed e.eOther#1 as range 2
  //DEBUG: e.eOther#1: 2

  refalrts::reset_allocator();
  //TRASH: {REMOVED TILE}
  //RESULT: Tile{ [[ AsIs: </0 Reuse: & T7_cont/4 AsIs: e.eOther#1/2 AsIs: >/1 ]] }
  refalrts::update_name( context[4], ref_T7u_cont.ref.function );
  refalrts::push_stack( context[1] );
  refalrts::push_stack( context[0] );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_T7u_check("T7_check", 786251477U, 1176157594U, func_T7u_check);

static refalrts::FnResult func_T7u_forward(refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  refalrts::this_is_generated_function();
  // issue here memory for vars with 13 elems
  refalrts::Iter context[13];
  refalrts::zeros( context, 13 );
  // </0 & T7_forward/4 t.tUsedVars#1/5 (/9 e.eItems_fix#1/7 )/10 t.tItems_next#1/11 e.eItems_rest#1/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  context[6] = refalrts::tvar_left( context[5], context[2], context[3] );
  if( ! context[6] )
    return refalrts::cRecognitionImpossible;
  context[7] = 0;
  context[8] = 0;
  context[9] = refalrts::brackets_left( context[7], context[8], context[2], context[3] );
  if( ! context[9] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[9], context[10]);
  // closed e.eItems_fix#1 as range 7
  context[12] = refalrts::tvar_left( context[11], context[2], context[3] );
  if( ! context[12] )
    return refalrts::cRecognitionImpossible;
  // closed e.eItems_rest#1 as range 2
  //DEBUG: t.tUsedVars#1: 5
  //DEBUG: e.eItems_fix#1: 7
  //DEBUG: t.tItems_next#1: 11
  //DEBUG: e.eItems_rest#1: 2

  refalrts::reset_allocator();
  //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ AsIs: </0 Reuse: & T7_next/4 AsIs: t.tUsedVars#1/5 AsIs: (/9 } Tile{ AsIs: e.eItems_fix#1/7 } Tile{ AsIs: t.tItems_next#1/11 } Tile{ AsIs: )/10 } Tile{ AsIs: e.eItems_rest#1/2 } Tile{ AsIs: >/1 ]] }
  refalrts::update_name( context[4], ref_T7u_next.ref.function );
  refalrts::push_stack( context[1] );
  refalrts::push_stack( context[0] );
  refalrts::link_brackets( context[9], context[10] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[1];
  res = refalrts::splice_evar( res, context[2], context[3] );
  res = refalrts::splice_evar( res, context[10], context[10] );
  res = refalrts::splice_evar( res, context[11], context[12] );
  res = refalrts::splice_evar( res, context[7], context[8] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_T7u_forward("T7_forward", 786251477U, 1176157594U, func_T7u_forward);

static refalrts::FnResult func_T7u_next(refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  refalrts::this_is_generated_function();
  // issue here memory for vars with 37 elems
  refalrts::Iter context[37];
  refalrts::zeros( context, 37 );
  // </0 & T7_next/4 t.tUsedVars#1/5 (/9 e.eItems_fix#1/7 )/10 e.eItems_var#1/11 (/15 # HOLE/17 (/20 # Variable/22 t.tSrcPos#1/23 'e'/25 e.eIndex#1/18 )/21 e.ePattern#1/13 )/16 e.eItemsAndHoles#1/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  context[6] = refalrts::tvar_left( context[5], context[2], context[3] );
  if( ! context[6] )
    return refalrts::cRecognitionImpossible;
  context[7] = 0;
  context[8] = 0;
  context[9] = refalrts::brackets_left( context[7], context[8], context[2], context[3] );
  if( ! context[9] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[9], context[10]);
  // closed e.eItems_fix#1 as range 7
  context[11] = 0;
  context[12] = 0;
  refalrts::start_e_loop();
  do {
    context[35] = context[2];
    context[36] = context[3];
    context[13] = 0;
    context[14] = 0;
    context[15] = refalrts::brackets_left( context[13], context[14], context[35], context[36] );
    if( ! context[15] )
      continue;
    refalrts::bracket_pointers(context[15], context[16]);
    context[17] = refalrts::ident_left(  ident_HOLE, context[13], context[14] );
    if( ! context[17] )
      continue;
    context[18] = 0;
    context[19] = 0;
    context[20] = refalrts::brackets_left( context[18], context[19], context[13], context[14] );
    if( ! context[20] )
      continue;
    refalrts::bracket_pointers(context[20], context[21]);
    context[22] = refalrts::ident_left(  ident_Variable, context[18], context[19] );
    if( ! context[22] )
      continue;
    // closed e.ePattern#1 as range 13
    // closed e.eItemsAndHoles#1 as range 35(2)
    context[24] = refalrts::tvar_left( context[23], context[18], context[19] );
    if( ! context[24] )
      continue;
    context[25] = refalrts::char_left( 'e', context[18], context[19] );
    if( ! context[25] )
      continue;
    // closed e.eIndex#1 as range 18
    //DEBUG: t.tUsedVars#1: 5
    //DEBUG: e.eItems_fix#1: 7
    //DEBUG: e.eItems_var#1: 11
    //DEBUG: e.ePattern#1: 13
    //DEBUG: e.eItemsAndHoles#1: 2
    //DEBUG: t.tSrcPos#1: 23
    //DEBUG: e.eIndex#1: 18

    refalrts::reset_allocator();
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 Reuse: & T7_check/4 AsIs: t.tUsedVars#1/5 AsIs: (/9 } Tile{ AsIs: e.eItems_fix#1/7 } Tile{ AsIs: e.eItems_var#1/11 } Tile{ HalfReuse: )/22 AsIs: t.tSrcPos#1/23 HalfReuse: (/25 AsIs: e.eIndex#1/18 AsIs: )/21 } Tile{ AsIs: (/15 } Tile{ AsIs: e.ePattern#1/13 } Tile{ HalfReuse: )/17 AsIs: (/20 } Tile{ AsIs: e.eItemsAndHoles#1/35(2) } Tile{ AsIs: )/16 } Tile{ HalfReuse: </10 } & NewName/26 t.tUsedVars#1/5/27 'e'/29 e.eIndex#1/18/30"_fix"/32 >/34 Tile{ AsIs: >/1 ]] }
    if( ! refalrts::alloc_name( context[26], ref_NewName.ref.function ) )
      return refalrts::cNoMemory;
    if (! refalrts::copy_evar(context[27], context[28], context[5], context[6]))
      return refalrts::cNoMemory;
    if( ! refalrts::alloc_char( context[29], 'e' ) )
      return refalrts::cNoMemory;
    if (! refalrts::copy_evar(context[30], context[31], context[18], context[19]))
      return refalrts::cNoMemory;
    if( ! refalrts::alloc_chars( context[32], context[33], "_fix", 4 ) )
      return refalrts::cNoMemory;
    if( ! refalrts::alloc_close_call( context[34] ) )
      return refalrts::cNoMemory;
    refalrts::update_name( context[4], ref_T7u_check.ref.function );
    refalrts::reinit_close_bracket( context[22] );
    refalrts::reinit_open_bracket( context[25] );
    refalrts::reinit_close_bracket( context[17] );
    refalrts::reinit_open_call( context[10] );
    refalrts::push_stack( context[1] );
    refalrts::push_stack( context[0] );
    refalrts::push_stack( context[34] );
    refalrts::push_stack( context[10] );
    refalrts::link_brackets( context[20], context[16] );
    refalrts::link_brackets( context[15], context[17] );
    refalrts::link_brackets( context[25], context[21] );
    refalrts::link_brackets( context[9], context[22] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    res = refalrts::splice_evar( res, context[26], context[34] );
    res = refalrts::splice_evar( res, context[10], context[10] );
    res = refalrts::splice_evar( res, context[16], context[16] );
    res = refalrts::splice_evar( res, context[35], context[36] );
    res = refalrts::splice_evar( res, context[17], context[20] );
    res = refalrts::splice_evar( res, context[13], context[14] );
    res = refalrts::splice_evar( res, context[15], context[15] );
    res = refalrts::splice_evar( res, context[22], context[21] );
    res = refalrts::splice_evar( res, context[11], context[12] );
    res = refalrts::splice_evar( res, context[7], context[8] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( refalrts::open_evar_advance( context[11], context[12], context[2], context[3] ) );
  return refalrts::cRecognitionImpossible;
}

static refalrts::NativeReference nat_ref_T7u_next("T7_next", 786251477U, 1176157594U, func_T7u_next);

static refalrts::FnResult func_T7u_check0(refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  refalrts::this_is_generated_function();
  // issue here memory for vars with 37 elems
  refalrts::Iter context[37];
  refalrts::zeros( context, 37 );
  //FAST GEN: t.$ ( e.$ ) t.$ ( e.$ ) ( e.$ ) ( e.$ ) t.$ ( e.$ ) e.$
  //GLOBAL GEN: t.$ ( e.$ ) t.$ ( e.$ ) ( e.$ ) ( e.$ ) t.$ ( e.$ ) e.$
  // </0 & T7_check0/4 t.idx#0/5 (/9 e.idxVB#0/7 )/10 t.idxVT#0/11 (/15 e.idxVTVB#0/13 )/16 (/19 e.idxVTVTB#0/17 )/20 (/23 e.idxVTVTTB#0/21 )/24 t.idxVTVTTT#0/25 (/29 e.idxVTVTTTVB#0/27 )/30 e.idxVTVTTTVT#0/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  context[6] = refalrts::tvar_left( context[5], context[2], context[3] );
  if( ! context[6] )
    return refalrts::cRecognitionImpossible;
  context[7] = 0;
  context[8] = 0;
  context[9] = refalrts::brackets_left( context[7], context[8], context[2], context[3] );
  if( ! context[9] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[9], context[10]);
  // closed e.idxVB#0 as range 7
  context[12] = refalrts::tvar_left( context[11], context[2], context[3] );
  if( ! context[12] )
    return refalrts::cRecognitionImpossible;
  context[13] = 0;
  context[14] = 0;
  context[15] = refalrts::brackets_left( context[13], context[14], context[2], context[3] );
  if( ! context[15] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[15], context[16]);
  context[17] = 0;
  context[18] = 0;
  context[19] = refalrts::brackets_left( context[17], context[18], context[2], context[3] );
  if( ! context[19] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[19], context[20]);
  context[21] = 0;
  context[22] = 0;
  context[23] = refalrts::brackets_left( context[21], context[22], context[2], context[3] );
  if( ! context[23] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[23], context[24]);
  // closed e.idxVTVB#0 as range 13
  // closed e.idxVTVTB#0 as range 17
  // closed e.idxVTVTTB#0 as range 21
  context[26] = refalrts::tvar_left( context[25], context[2], context[3] );
  if( ! context[26] )
    return refalrts::cRecognitionImpossible;
  context[27] = 0;
  context[28] = 0;
  context[29] = refalrts::brackets_left( context[27], context[28], context[2], context[3] );
  if( ! context[29] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[29], context[30]);
  // closed e.idxVTVTTTVB#0 as range 27
  // closed e.idxVTVTTTVT#0 as range 2
  do {
    // t.idx ( e.idx ) t.idx ( e.idx ) ( e.idx ) ( e.idx ) t.idx ( e.idx ) t.idx e.idx
    // </0 & T7_check0/4 t.tUsedVars#1/5 (/9 e.eItems#1/7 )/10 t.tSrcPos#1/11 (/15 e.eIndex#1/13 )/16 (/19 e.ePattern#1/17 )/20 (/23 e.eItemsAndHoles#1/21 )/24 t.tUsedVars1#1/25 (/29 e.eeX_fix#1/27 )/30 t.tUsedVars2#1/31 e.eeX_rest#1/2 >/1
    // closed e.eItems#1 as range 7
    // closed e.eIndex#1 as range 13
    // closed e.ePattern#1 as range 17
    // closed e.eItemsAndHoles#1 as range 21
    // closed e.eeX_fix#1 as range 27
    context[35] = context[2];
    context[36] = context[3];
    context[32] = refalrts::tvar_left( context[31], context[35], context[36] );
    if( ! context[32] )
      continue;
    // closed e.eeX_rest#1 as range 35(2)
    //DEBUG: t.tUsedVars#1: 5
    //DEBUG: t.tSrcPos#1: 11
    //DEBUG: t.tUsedVars1#1: 25
    //DEBUG: e.eItems#1: 7
    //DEBUG: e.eIndex#1: 13
    //DEBUG: e.ePattern#1: 17
    //DEBUG: e.eItemsAndHoles#1: 21
    //DEBUG: e.eeX_fix#1: 27
    //DEBUG: t.tUsedVars2#1: 31
    //DEBUG: e.eeX_rest#1: 2

    refalrts::reset_allocator();
    //TRASH: {REMOVED TILE} {REMOVED TILE} t.tUsedVars#1/5 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} e.eIndex#1/13 )/16 (/19 e.ePattern#1/17 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} t.tUsedVars1#1/25 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ AsIs: (/9 AsIs: e.eItems#1/7 HalfReuse: (/10 } Tile{ HalfReuse: # Variable/15 } Tile{ AsIs: t.tSrcPos#1/11 } Tile{ AsIs: e.eeX_fix#1/27 } Tile{ AsIs: )/20 AsIs: (/23 } Tile{ HalfReuse: # Variable/30 } t.tSrcPos#1/11/33 Tile{ AsIs: e.eeX_rest#1/35(2) } Tile{ AsIs: )/24 } Tile{ AsIs: </0 Reuse: & PassiveHoles/4 } Tile{ AsIs: t.tUsedVars2#1/31 } Tile{ AsIs: e.eItemsAndHoles#1/21 } Tile{ HalfReuse: >/29 } Tile{ HalfReuse: )/1 ]] }
    if (! refalrts::copy_evar(context[33], context[34], context[11], context[12]))
      return refalrts::cNoMemory;
    refalrts::reinit_open_bracket( context[10] );
    refalrts::reinit_ident( context[15], ident_Variable );
    refalrts::reinit_ident( context[30], ident_Variable );
    refalrts::update_name( context[4], ref_PassiveHoles.ref.function );
    refalrts::reinit_close_call( context[29] );
    refalrts::reinit_close_bracket( context[1] );
    refalrts::link_brackets( context[9], context[1] );
    refalrts::push_stack( context[29] );
    refalrts::push_stack( context[0] );
    refalrts::link_brackets( context[23], context[24] );
    refalrts::link_brackets( context[10], context[20] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    res = refalrts::splice_evar( res, context[29], context[29] );
    res = refalrts::splice_evar( res, context[21], context[22] );
    res = refalrts::splice_evar( res, context[31], context[32] );
    res = refalrts::splice_evar( res, context[0], context[4] );
    res = refalrts::splice_evar( res, context[24], context[24] );
    res = refalrts::splice_evar( res, context[35], context[36] );
    res = refalrts::splice_evar( res, context[33], context[34] );
    res = refalrts::splice_evar( res, context[30], context[30] );
    res = refalrts::splice_evar( res, context[20], context[23] );
    res = refalrts::splice_evar( res, context[27], context[28] );
    res = refalrts::splice_evar( res, context[11], context[12] );
    res = refalrts::splice_evar( res, context[15], context[15] );
    res = refalrts::splice_evar( res, context[9], context[10] );
    refalrts::splice_to_freelist_open( trash_prev, res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence();

  // t.idx ( e.idx ) t.idx ( e.idx ) ( e.idx ) ( e.idx ) t.idx ( e.idx ) e.idx
  // </0 & T7_check0/4 t.tUsedVars#1/5 (/9 e.eItems#1/7 )/10 t.tSrcPos#1/11 (/15 e.eIndex#1/13 )/16 (/19 e.ePattern#1/17 )/20 (/23 e.eItemsAndHoles#1/21 )/24 t.tUsedVars1#1/25 (/29 e.eeX_fix#1/27 )/30 e.eOther#1/2 >/1
  // closed e.eItems#1 as range 7
  // closed e.eIndex#1 as range 13
  // closed e.ePattern#1 as range 17
  // closed e.eItemsAndHoles#1 as range 21
  // closed e.eeX_fix#1 as range 27
  // closed e.eOther#1 as range 2
  //DEBUG: t.tUsedVars#1: 5
  //DEBUG: t.tSrcPos#1: 11
  //DEBUG: t.tUsedVars1#1: 25
  //DEBUG: e.eItems#1: 7
  //DEBUG: e.eIndex#1: 13
  //DEBUG: e.ePattern#1: 17
  //DEBUG: e.eItemsAndHoles#1: 21
  //DEBUG: e.eeX_fix#1: 27
  //DEBUG: e.eOther#1: 2

  refalrts::reset_allocator();
  //TRASH: {REMOVED TILE} (/29 {REMOVED TILE} )/30 e.eOther#1/2 {REMOVED TILE}
  //RESULT: Tile{ [[ AsIs: </0 Reuse: & T7_cont/4 AsIs: t.tUsedVars#1/5 AsIs: (/9 AsIs: e.eItems#1/7 AsIs: )/10 AsIs: t.tSrcPos#1/11 AsIs: (/15 AsIs: e.eIndex#1/13 AsIs: )/16 AsIs: (/19 AsIs: e.ePattern#1/17 AsIs: )/20 AsIs: (/23 AsIs: e.eItemsAndHoles#1/21 AsIs: )/24 AsIs: t.tUsedVars1#1/25 } Tile{ AsIs: e.eeX_fix#1/27 } Tile{ AsIs: >/1 ]] }
  refalrts::update_name( context[4], ref_T7u_cont.ref.function );
  refalrts::push_stack( context[1] );
  refalrts::push_stack( context[0] );
  refalrts::link_brackets( context[23], context[24] );
  refalrts::link_brackets( context[19], context[20] );
  refalrts::link_brackets( context[15], context[16] );
  refalrts::link_brackets( context[9], context[10] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[1];
  res = refalrts::splice_evar( res, context[27], context[28] );
  refalrts::splice_to_freelist_open( context[26], res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_T7u_check0("T7_check0", 786251477U, 1176157594U, func_T7u_check0);

static refalrts::FnResult func_T7u_cont(refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  refalrts::this_is_generated_function();
  // issue here memory for vars with 26 elems
  refalrts::Iter context[26];
  refalrts::zeros( context, 26 );
  // </0 & T7_cont/4 t.tUsedVars#1/5 (/9 e.eItems#1/7 )/10 t.tSrcPos#1/11 (/15 e.eIndex#1/13 )/16 (/19 e.ePattern#1/17 )/20 (/23 e.eItemsAndHoles#1/21 )/24 e.eOther#1/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  context[6] = refalrts::tvar_left( context[5], context[2], context[3] );
  if( ! context[6] )
    return refalrts::cRecognitionImpossible;
  context[7] = 0;
  context[8] = 0;
  context[9] = refalrts::brackets_left( context[7], context[8], context[2], context[3] );
  if( ! context[9] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[9], context[10]);
  // closed e.eItems#1 as range 7
  context[12] = refalrts::tvar_left( context[11], context[2], context[3] );
  if( ! context[12] )
    return refalrts::cRecognitionImpossible;
  context[13] = 0;
  context[14] = 0;
  context[15] = refalrts::brackets_left( context[13], context[14], context[2], context[3] );
  if( ! context[15] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[15], context[16]);
  context[17] = 0;
  context[18] = 0;
  context[19] = refalrts::brackets_left( context[17], context[18], context[2], context[3] );
  if( ! context[19] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[19], context[20]);
  context[21] = 0;
  context[22] = 0;
  context[23] = refalrts::brackets_left( context[21], context[22], context[2], context[3] );
  if( ! context[23] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[23], context[24]);
  // closed e.eIndex#1 as range 13
  // closed e.ePattern#1 as range 17
  // closed e.eItemsAndHoles#1 as range 21
  // closed e.eOther#1 as range 2
  //DEBUG: t.tUsedVars#1: 5
  //DEBUG: e.eItems#1: 7
  //DEBUG: t.tSrcPos#1: 11
  //DEBUG: e.eIndex#1: 13
  //DEBUG: e.ePattern#1: 17
  //DEBUG: e.eItemsAndHoles#1: 21
  //DEBUG: e.eOther#1: 2

  refalrts::reset_allocator();
  //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} e.eOther#1/2 {REMOVED TILE}
  //RESULT: Tile{ [[ AsIs: </0 Reuse: & T7_forward/4 AsIs: t.tUsedVars#1/5 AsIs: (/9 AsIs: e.eItems#1/7 AsIs: )/10 } Tile{ AsIs: (/19 } Tile{ HalfReuse: # HOLE/20 AsIs: (/23 } # Variable/25 Tile{ AsIs: t.tSrcPos#1/11 HalfReuse: 'e'/15 AsIs: e.eIndex#1/13 AsIs: )/16 } Tile{ AsIs: e.ePattern#1/17 } Tile{ AsIs: )/24 } Tile{ AsIs: e.eItemsAndHoles#1/21 } Tile{ AsIs: >/1 ]] }
  if( ! refalrts::alloc_ident( context[25], ident_Variable ) )
    return refalrts::cNoMemory;
  refalrts::update_name( context[4], ref_T7u_forward.ref.function );
  refalrts::reinit_ident( context[20], ident_HOLE );
  refalrts::reinit_char( context[15], 'e' );
  refalrts::push_stack( context[1] );
  refalrts::push_stack( context[0] );
  refalrts::link_brackets( context[19], context[24] );
  refalrts::link_brackets( context[23], context[16] );
  refalrts::link_brackets( context[9], context[10] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[1];
  res = refalrts::splice_evar( res, context[21], context[22] );
  res = refalrts::splice_evar( res, context[24], context[24] );
  res = refalrts::splice_evar( res, context[17], context[18] );
  res = refalrts::splice_evar( res, context[11], context[16] );
  res = refalrts::splice_evar( res, context[25], context[25] );
  res = refalrts::splice_evar( res, context[20], context[23] );
  res = refalrts::splice_evar( res, context[19], context[19] );
  refalrts::splice_to_freelist_open( context[10], res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_T7u_cont("T7_cont", 786251477U, 1176157594U, func_T7u_cont);

static refalrts::FnResult func_T0(refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  refalrts::this_is_generated_function();
  // issue here memory for vars with 7 elems
  refalrts::Iter context[7];
  refalrts::zeros( context, 7 );
  // </0 & T0/4 e.eItems#1/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.eItems#1 as range 2
  //DEBUG: e.eItems#1: 2

  refalrts::reset_allocator();
  //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ } (/5 Tile{ AsIs: </0 Reuse: & DoT0/4 AsIs: e.eItems#1/2 AsIs: >/1 } )/6 Tile{ ]] }
  if( ! refalrts::alloc_open_bracket( context[5] ) )
    return refalrts::cNoMemory;
  if( ! refalrts::alloc_close_bracket( context[6] ) )
    return refalrts::cNoMemory;
  refalrts::update_name( context[4], ref_DoT0.ref.function );
  refalrts::link_brackets( context[5], context[6] );
  refalrts::push_stack( context[1] );
  refalrts::push_stack( context[0] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = arg_end->next;
  res = refalrts::splice_evar( res, context[6], context[6] );
  res = refalrts::splice_evar( res, context[0], context[1] );
  res = refalrts::splice_evar( res, context[5], context[5] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_T0("T0", 786251477U, 1176157594U, func_T0);

static refalrts::FnResult func_DoT0(refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  refalrts::this_is_generated_function();
  // issue here memory for vars with 18 elems
  refalrts::Iter context[18];
  refalrts::zeros( context, 18 );
  //FAST GEN: e.$
  //GLOBAL GEN: e.$
  // </0 & DoT0/4 e.idx#0/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.idx#0 as range 2
  do {
    // ( # OpenE t.idx 'e' e.idx ) e.idx
    // </0 & DoT0/4 (/7 # OpenE/9 t.tSrcPos#1/10 'e'/12 e.eIndex#1/5 )/8 e.eTail#1/2 >/1
    context[16] = context[2];
    context[17] = context[3];
    context[5] = 0;
    context[6] = 0;
    context[7] = refalrts::brackets_left( context[5], context[6], context[16], context[17] );
    if( ! context[7] )
      continue;
    refalrts::bracket_pointers(context[7], context[8]);
    context[9] = refalrts::ident_left(  ident_OpenE, context[5], context[6] );
    if( ! context[9] )
      continue;
    // closed e.eTail#1 as range 16(2)
    context[11] = refalrts::tvar_left( context[10], context[5], context[6] );
    if( ! context[11] )
      continue;
    context[12] = refalrts::char_left( 'e', context[5], context[6] );
    if( ! context[12] )
      continue;
    // closed e.eIndex#1 as range 5
    //DEBUG: e.eTail#1: 2
    //DEBUG: t.tSrcPos#1: 10
    //DEBUG: e.eIndex#1: 5

    refalrts::reset_allocator();
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ HalfReuse: (/0 HalfReuse: # Brackets/4 AsIs: (/7 Reuse: # Variable/9 AsIs: t.tSrcPos#1/10 AsIs: 'e'/12 AsIs: e.eIndex#1/5 AsIs: )/8 } )/13 </14 & DoT0/15 Tile{ AsIs: e.eTail#1/16(2) } Tile{ AsIs: >/1 ]] }
    if( ! refalrts::alloc_close_bracket( context[13] ) )
      return refalrts::cNoMemory;
    if( ! refalrts::alloc_open_call( context[14] ) )
      return refalrts::cNoMemory;
    if( ! refalrts::alloc_name( context[15], ref_DoT0.ref.function ) )
      return refalrts::cNoMemory;
    refalrts::reinit_open_bracket( context[0] );
    refalrts::reinit_ident( context[4], ident_Brackets );
    refalrts::update_ident( context[9], ident_Variable );
    refalrts::push_stack( context[1] );
    refalrts::push_stack( context[14] );
    refalrts::link_brackets( context[0], context[13] );
    refalrts::link_brackets( context[7], context[8] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    res = refalrts::splice_evar( res, context[16], context[17] );
    res = refalrts::splice_evar( res, context[13], context[15] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence();

  do {
    // ( # Brackets e.idx ) e.idx
    // </0 & DoT0/4 (/7 # Brackets/9 e.eInBrackets#1/5 )/8 e.eTail#1/2 >/1
    context[16] = context[2];
    context[17] = context[3];
    context[5] = 0;
    context[6] = 0;
    context[7] = refalrts::brackets_left( context[5], context[6], context[16], context[17] );
    if( ! context[7] )
      continue;
    refalrts::bracket_pointers(context[7], context[8]);
    context[9] = refalrts::ident_left(  ident_Brackets, context[5], context[6] );
    if( ! context[9] )
      continue;
    // closed e.eInBrackets#1 as range 5
    // closed e.eTail#1 as range 16(2)
    //DEBUG: e.eInBrackets#1: 5
    //DEBUG: e.eTail#1: 2

    refalrts::reset_allocator();
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ HalfReuse: (/0 HalfReuse: # Brackets/4 HalfReuse: </7 HalfReuse: & DoT0/9 AsIs: e.eInBrackets#1/5 HalfReuse: >/8 } )/10 </11 & DoT0/12 Tile{ AsIs: e.eTail#1/16(2) } Tile{ AsIs: >/1 ]] }
    if( ! refalrts::alloc_close_bracket( context[10] ) )
      return refalrts::cNoMemory;
    if( ! refalrts::alloc_open_call( context[11] ) )
      return refalrts::cNoMemory;
    if( ! refalrts::alloc_name( context[12], ref_DoT0.ref.function ) )
      return refalrts::cNoMemory;
    refalrts::reinit_open_bracket( context[0] );
    refalrts::reinit_ident( context[4], ident_Brackets );
    refalrts::reinit_open_call( context[7] );
    refalrts::reinit_name( context[9], ref_DoT0.ref.function );
    refalrts::reinit_close_call( context[8] );
    refalrts::push_stack( context[1] );
    refalrts::push_stack( context[11] );
    refalrts::link_brackets( context[0], context[10] );
    refalrts::push_stack( context[8] );
    refalrts::push_stack( context[7] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    res = refalrts::splice_evar( res, context[16], context[17] );
    res = refalrts::splice_evar( res, context[10], context[12] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence();

  do {
    // t.idx e.idx
    // </0 & DoT0/4 t.tOtherItem#1/5 e.eTail#1/2 >/1
    context[16] = context[2];
    context[17] = context[3];
    context[6] = refalrts::tvar_left( context[5], context[16], context[17] );
    if( ! context[6] )
      continue;
    // closed e.eTail#1 as range 16(2)
    //DEBUG: t.tOtherItem#1: 5
    //DEBUG: e.eTail#1: 2

    refalrts::reset_allocator();
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ AsIs: t.tOtherItem#1/5 } Tile{ AsIs: </0 AsIs: & DoT0/4 } Tile{ AsIs: e.eTail#1/16(2) } Tile{ AsIs: >/1 ]] }
    refalrts::push_stack( context[1] );
    refalrts::push_stack( context[0] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    res = refalrts::splice_evar( res, context[16], context[17] );
    res = refalrts::splice_evar( res, context[0], context[4] );
    res = refalrts::splice_evar( res, context[5], context[6] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence();

  //
  // </0 & DoT0/4 >/1
  if( ! refalrts::empty_seq( context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;

  refalrts::reset_allocator();
  //TRASH: {REMOVED TILE} </0 & DoT0/4 >/1 {REMOVED TILE}
  //RESULT: Tile{ [[ } Tile{ ]] }
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = arg_end->next;
  refalrts::splice_to_freelist_open( trash_prev, res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_DoT0("DoT0", 786251477U, 1176157594U, func_DoT0);

static refalrts::FnResult func_ConditionSubFunctions(refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  refalrts::this_is_generated_function();
  // issue here memory for vars with 19 elems
  refalrts::Iter context[19];
  refalrts::zeros( context, 19 );
  // </0 & ConditionSubFunctions/4 (/7 e.eNames#1/5 )/8 (/11 e.ePrefix#1/9 )/12 t.tContName#1/13 e.eSentence#1/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  context[5] = 0;
  context[6] = 0;
  context[7] = refalrts::brackets_left( context[5], context[6], context[2], context[3] );
  if( ! context[7] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[7], context[8]);
  context[9] = 0;
  context[10] = 0;
  context[11] = refalrts::brackets_left( context[9], context[10], context[2], context[3] );
  if( ! context[11] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[11], context[12]);
  // closed e.eNames#1 as range 5
  // closed e.ePrefix#1 as range 9
  context[14] = refalrts::tvar_left( context[13], context[2], context[3] );
  if( ! context[14] )
    return refalrts::cRecognitionImpossible;
  // closed e.eSentence#1 as range 2
  //DEBUG: e.eNames#1: 5
  //DEBUG: e.ePrefix#1: 9
  //DEBUG: t.tContName#1: 13
  //DEBUG: e.eSentence#1: 2

  refalrts::reset_allocator();
  //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ AsIs: </0 Reuse: & ConditionSubFunctions_check/4 AsIs: (/7 AsIs: e.eNames#1/5 AsIs: )/8 AsIs: (/11 AsIs: e.ePrefix#1/9 AsIs: )/12 AsIs: t.tContName#1/13 } (/15 e.eSentence#1/2/16 )/18 Tile{ AsIs: e.eSentence#1/2 } Tile{ AsIs: >/1 ]] }
  if( ! refalrts::alloc_open_bracket( context[15] ) )
    return refalrts::cNoMemory;
  if (! refalrts::copy_evar(context[16], context[17], context[2], context[3]))
    return refalrts::cNoMemory;
  if( ! refalrts::alloc_close_bracket( context[18] ) )
    return refalrts::cNoMemory;
  refalrts::update_name( context[4], ref_ConditionSubFunctionsu_check.ref.function );
  refalrts::push_stack( context[1] );
  refalrts::push_stack( context[0] );
  refalrts::link_brackets( context[15], context[18] );
  refalrts::link_brackets( context[11], context[12] );
  refalrts::link_brackets( context[7], context[8] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[1];
  res = refalrts::splice_evar( res, context[2], context[3] );
  res = refalrts::splice_evar( res, context[15], context[18] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_ConditionSubFunctions("ConditionSubFunctions", 786251477U, 1176157594U, func_ConditionSubFunctions);

static refalrts::FnResult func_ConditionSubFunctionsu_check(refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  refalrts::this_is_generated_function();
  // issue here memory for vars with 46 elems
  refalrts::Iter context[46];
  refalrts::zeros( context, 46 );
  // </0 & ConditionSubFunctions_check/4 (/7 e.eNames#1/5 )/8 (/11 e.ePrefix#1/9 )/12 t.tContName#1/13 (/17 e.eSentence#1/15 )/18 (/21 e.ePattern#1/19 )/22 (/25 # Condition/27 (/30 e.eCondResult#1/28 )/31 (/34 e.eCondPattern#1/32 )/35 )/26 e.eSentenceTail#1/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  context[5] = 0;
  context[6] = 0;
  context[7] = refalrts::brackets_left( context[5], context[6], context[2], context[3] );
  if( ! context[7] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[7], context[8]);
  context[9] = 0;
  context[10] = 0;
  context[11] = refalrts::brackets_left( context[9], context[10], context[2], context[3] );
  if( ! context[11] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[11], context[12]);
  // closed e.eNames#1 as range 5
  // closed e.ePrefix#1 as range 9
  context[14] = refalrts::tvar_left( context[13], context[2], context[3] );
  if( ! context[14] )
    return refalrts::cRecognitionImpossible;
  context[15] = 0;
  context[16] = 0;
  context[17] = refalrts::brackets_left( context[15], context[16], context[2], context[3] );
  if( ! context[17] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[17], context[18]);
  context[19] = 0;
  context[20] = 0;
  context[21] = refalrts::brackets_left( context[19], context[20], context[2], context[3] );
  if( ! context[21] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[21], context[22]);
  context[23] = 0;
  context[24] = 0;
  context[25] = refalrts::brackets_left( context[23], context[24], context[2], context[3] );
  if( ! context[25] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[25], context[26]);
  context[27] = refalrts::ident_left(  ident_Condition, context[23], context[24] );
  if( ! context[27] )
    return refalrts::cRecognitionImpossible;
  context[28] = 0;
  context[29] = 0;
  context[30] = refalrts::brackets_left( context[28], context[29], context[23], context[24] );
  if( ! context[30] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[30], context[31]);
  context[32] = 0;
  context[33] = 0;
  context[34] = refalrts::brackets_left( context[32], context[33], context[23], context[24] );
  if( ! context[34] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[34], context[35]);
  if( ! refalrts::empty_seq( context[23], context[24] ) )
    return refalrts::cRecognitionImpossible;
  // closed e.eSentence#1 as range 15
  // closed e.ePattern#1 as range 19
  // closed e.eCondResult#1 as range 28
  // closed e.eCondPattern#1 as range 32
  // closed e.eSentenceTail#1 as range 2
  //DEBUG: e.eNames#1: 5
  //DEBUG: e.ePrefix#1: 9
  //DEBUG: t.tContName#1: 13
  //DEBUG: e.eSentence#1: 15
  //DEBUG: e.ePattern#1: 19
  //DEBUG: e.eCondResult#1: 28
  //DEBUG: e.eCondPattern#1: 32
  //DEBUG: e.eSentenceTail#1: 2

  refalrts::reset_allocator();
  //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ AsIs: </0 Reuse: & ConditionSubFunctions_check0/4 AsIs: (/7 AsIs: e.eNames#1/5 AsIs: )/8 AsIs: (/11 AsIs: e.ePrefix#1/9 AsIs: )/12 AsIs: t.tContName#1/13 AsIs: (/17 AsIs: e.eSentence#1/15 AsIs: )/18 AsIs: (/21 AsIs: e.ePattern#1/19 AsIs: )/22 AsIs: (/25 } Tile{ AsIs: e.eCondResult#1/28 } Tile{ AsIs: )/31 AsIs: (/34 AsIs: e.eCondPattern#1/32 AsIs: )/35 HalfReuse: (/26 AsIs: e.eSentenceTail#1/2 HalfReuse: )/1 } </36 Tile{ HalfReuse: & NewName/27 AsIs: (/30 } e.eNames#1/5/37 )/39 e.ePrefix#1/9/40"_check"/42 >/44 >/45 Tile{ ]] }
  if( ! refalrts::alloc_open_call( context[36] ) )
    return refalrts::cNoMemory;
  if (! refalrts::copy_evar(context[37], context[38], context[5], context[6]))
    return refalrts::cNoMemory;
  if( ! refalrts::alloc_close_bracket( context[39] ) )
    return refalrts::cNoMemory;
  if (! refalrts::copy_evar(context[40], context[41], context[9], context[10]))
    return refalrts::cNoMemory;
  if( ! refalrts::alloc_chars( context[42], context[43], "_check", 6 ) )
    return refalrts::cNoMemory;
  if( ! refalrts::alloc_close_call( context[44] ) )
    return refalrts::cNoMemory;
  if( ! refalrts::alloc_close_call( context[45] ) )
    return refalrts::cNoMemory;
  refalrts::update_name( context[4], ref_ConditionSubFunctionsu_check0.ref.function );
  refalrts::reinit_open_bracket( context[26] );
  refalrts::reinit_close_bracket( context[1] );
  refalrts::reinit_name( context[27], ref_NewName.ref.function );
  refalrts::push_stack( context[45] );
  refalrts::push_stack( context[0] );
  refalrts::push_stack( context[44] );
  refalrts::push_stack( context[36] );
  refalrts::link_brackets( context[30], context[39] );
  refalrts::link_brackets( context[26], context[1] );
  refalrts::link_brackets( context[34], context[35] );
  refalrts::link_brackets( context[25], context[31] );
  refalrts::link_brackets( context[21], context[22] );
  refalrts::link_brackets( context[17], context[18] );
  refalrts::link_brackets( context[11], context[12] );
  refalrts::link_brackets( context[7], context[8] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = arg_end->next;
  res = refalrts::splice_evar( res, context[39], context[45] );
  res = refalrts::splice_evar( res, context[37], context[38] );
  res = refalrts::splice_evar( res, context[27], context[30] );
  res = refalrts::splice_evar( res, context[36], context[36] );
  res = refalrts::splice_evar( res, context[31], context[1] );
  res = refalrts::splice_evar( res, context[28], context[29] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_ConditionSubFunctionsu_check("ConditionSubFunctions_check", 786251477U, 1176157594U, func_ConditionSubFunctionsu_check);

static refalrts::FnResult func_ConditionSubFunctionsu_check0(refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  refalrts::this_is_generated_function();
  // issue here memory for vars with 48 elems
  refalrts::Iter context[48];
  refalrts::zeros( context, 48 );
  // </0 & ConditionSubFunctions_check0/4 (/7 e.eNames#1/5 )/8 (/11 e.ePrefix#1/9 )/12 t.tContName#1/13 (/17 e.eSentence#1/15 )/18 (/21 e.ePattern#1/19 )/22 (/25 e.eCondResult#1/23 )/26 (/29 e.eCondPattern#1/27 )/30 (/33 e.eSentenceTail#1/31 )/34 (/37 e.eRefilledNames1#1/35 )/38 e.eCheckFunction#1/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  context[5] = 0;
  context[6] = 0;
  context[7] = refalrts::brackets_left( context[5], context[6], context[2], context[3] );
  if( ! context[7] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[7], context[8]);
  context[9] = 0;
  context[10] = 0;
  context[11] = refalrts::brackets_left( context[9], context[10], context[2], context[3] );
  if( ! context[11] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[11], context[12]);
  // closed e.eNames#1 as range 5
  // closed e.ePrefix#1 as range 9
  context[14] = refalrts::tvar_left( context[13], context[2], context[3] );
  if( ! context[14] )
    return refalrts::cRecognitionImpossible;
  context[15] = 0;
  context[16] = 0;
  context[17] = refalrts::brackets_left( context[15], context[16], context[2], context[3] );
  if( ! context[17] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[17], context[18]);
  context[19] = 0;
  context[20] = 0;
  context[21] = refalrts::brackets_left( context[19], context[20], context[2], context[3] );
  if( ! context[21] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[21], context[22]);
  context[23] = 0;
  context[24] = 0;
  context[25] = refalrts::brackets_left( context[23], context[24], context[2], context[3] );
  if( ! context[25] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[25], context[26]);
  context[27] = 0;
  context[28] = 0;
  context[29] = refalrts::brackets_left( context[27], context[28], context[2], context[3] );
  if( ! context[29] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[29], context[30]);
  context[31] = 0;
  context[32] = 0;
  context[33] = refalrts::brackets_left( context[31], context[32], context[2], context[3] );
  if( ! context[33] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[33], context[34]);
  context[35] = 0;
  context[36] = 0;
  context[37] = refalrts::brackets_left( context[35], context[36], context[2], context[3] );
  if( ! context[37] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[37], context[38]);
  // closed e.eSentence#1 as range 15
  // closed e.ePattern#1 as range 19
  // closed e.eCondResult#1 as range 23
  // closed e.eCondPattern#1 as range 27
  // closed e.eSentenceTail#1 as range 31
  // closed e.eRefilledNames1#1 as range 35
  // closed e.eCheckFunction#1 as range 2
  //DEBUG: e.eNames#1: 5
  //DEBUG: e.ePrefix#1: 9
  //DEBUG: t.tContName#1: 13
  //DEBUG: e.eSentence#1: 15
  //DEBUG: e.ePattern#1: 19
  //DEBUG: e.eCondResult#1: 23
  //DEBUG: e.eCondPattern#1: 27
  //DEBUG: e.eSentenceTail#1: 31
  //DEBUG: e.eRefilledNames1#1: 35
  //DEBUG: e.eCheckFunction#1: 2

  refalrts::reset_allocator();
  //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ AsIs: </0 Reuse: & ConditionSubFunctions_check1/4 AsIs: (/7 AsIs: e.eNames#1/5 AsIs: )/8 AsIs: (/11 AsIs: e.ePrefix#1/9 AsIs: )/12 AsIs: t.tContName#1/13 AsIs: (/17 AsIs: e.eSentence#1/15 AsIs: )/18 AsIs: (/21 AsIs: e.ePattern#1/19 AsIs: )/22 AsIs: (/25 AsIs: e.eCondResult#1/23 AsIs: )/26 AsIs: (/29 AsIs: e.eCondPattern#1/27 AsIs: )/30 AsIs: (/33 AsIs: e.eSentenceTail#1/31 AsIs: )/34 AsIs: (/37 AsIs: e.eRefilledNames1#1/35 AsIs: )/38 } (/39 Tile{ AsIs: e.eCheckFunction#1/2 } )/40 </41 & ExtractVariables/42 (/43 e.eSentence#1/15/44 )/46 >/47 Tile{ AsIs: >/1 ]] }
  if( ! refalrts::alloc_open_bracket( context[39] ) )
    return refalrts::cNoMemory;
  if( ! refalrts::alloc_close_bracket( context[40] ) )
    return refalrts::cNoMemory;
  if( ! refalrts::alloc_open_call( context[41] ) )
    return refalrts::cNoMemory;
  if( ! refalrts::alloc_name( context[42], ref_ExtractVariables.ref.function ) )
    return refalrts::cNoMemory;
  if( ! refalrts::alloc_open_bracket( context[43] ) )
    return refalrts::cNoMemory;
  if (! refalrts::copy_evar(context[44], context[45], context[15], context[16]))
    return refalrts::cNoMemory;
  if( ! refalrts::alloc_close_bracket( context[46] ) )
    return refalrts::cNoMemory;
  if( ! refalrts::alloc_close_call( context[47] ) )
    return refalrts::cNoMemory;
  refalrts::update_name( context[4], ref_ConditionSubFunctionsu_check1.ref.function );
  refalrts::push_stack( context[1] );
  refalrts::push_stack( context[0] );
  refalrts::push_stack( context[47] );
  refalrts::push_stack( context[41] );
  refalrts::link_brackets( context[43], context[46] );
  refalrts::link_brackets( context[39], context[40] );
  refalrts::link_brackets( context[37], context[38] );
  refalrts::link_brackets( context[33], context[34] );
  refalrts::link_brackets( context[29], context[30] );
  refalrts::link_brackets( context[25], context[26] );
  refalrts::link_brackets( context[21], context[22] );
  refalrts::link_brackets( context[17], context[18] );
  refalrts::link_brackets( context[11], context[12] );
  refalrts::link_brackets( context[7], context[8] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[1];
  res = refalrts::splice_evar( res, context[40], context[47] );
  res = refalrts::splice_evar( res, context[2], context[3] );
  res = refalrts::splice_evar( res, context[39], context[39] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_ConditionSubFunctionsu_check0("ConditionSubFunctions_check0", 786251477U, 1176157594U, func_ConditionSubFunctionsu_check0);

static refalrts::FnResult func_ConditionSubFunctionsu_check1(refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  refalrts::this_is_generated_function();
  // issue here memory for vars with 52 elems
  refalrts::Iter context[52];
  refalrts::zeros( context, 52 );
  // </0 & ConditionSubFunctions_check1/4 (/7 e.eNames#1/5 )/8 (/11 e.ePrefix#1/9 )/12 t.tContName#1/13 (/17 e.eSentence#1/15 )/18 (/21 e.ePattern#1/19 )/22 (/25 e.eCondResult#1/23 )/26 (/29 e.eCondPattern#1/27 )/30 (/33 e.eSentenceTail#1/31 )/34 (/37 e.eRefilledNames1#1/35 )/38 (/41 e.eCheckFunction#1/39 )/42 e.eSentenceVariables#1/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  context[5] = 0;
  context[6] = 0;
  context[7] = refalrts::brackets_left( context[5], context[6], context[2], context[3] );
  if( ! context[7] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[7], context[8]);
  context[9] = 0;
  context[10] = 0;
  context[11] = refalrts::brackets_left( context[9], context[10], context[2], context[3] );
  if( ! context[11] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[11], context[12]);
  // closed e.eNames#1 as range 5
  // closed e.ePrefix#1 as range 9
  context[14] = refalrts::tvar_left( context[13], context[2], context[3] );
  if( ! context[14] )
    return refalrts::cRecognitionImpossible;
  context[15] = 0;
  context[16] = 0;
  context[17] = refalrts::brackets_left( context[15], context[16], context[2], context[3] );
  if( ! context[17] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[17], context[18]);
  context[19] = 0;
  context[20] = 0;
  context[21] = refalrts::brackets_left( context[19], context[20], context[2], context[3] );
  if( ! context[21] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[21], context[22]);
  context[23] = 0;
  context[24] = 0;
  context[25] = refalrts::brackets_left( context[23], context[24], context[2], context[3] );
  if( ! context[25] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[25], context[26]);
  context[27] = 0;
  context[28] = 0;
  context[29] = refalrts::brackets_left( context[27], context[28], context[2], context[3] );
  if( ! context[29] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[29], context[30]);
  context[31] = 0;
  context[32] = 0;
  context[33] = refalrts::brackets_left( context[31], context[32], context[2], context[3] );
  if( ! context[33] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[33], context[34]);
  context[35] = 0;
  context[36] = 0;
  context[37] = refalrts::brackets_left( context[35], context[36], context[2], context[3] );
  if( ! context[37] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[37], context[38]);
  context[39] = 0;
  context[40] = 0;
  context[41] = refalrts::brackets_left( context[39], context[40], context[2], context[3] );
  if( ! context[41] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[41], context[42]);
  // closed e.eSentence#1 as range 15
  // closed e.ePattern#1 as range 19
  // closed e.eCondResult#1 as range 23
  // closed e.eCondPattern#1 as range 27
  // closed e.eSentenceTail#1 as range 31
  // closed e.eRefilledNames1#1 as range 35
  // closed e.eCheckFunction#1 as range 39
  // closed e.eSentenceVariables#1 as range 2
  //DEBUG: e.eNames#1: 5
  //DEBUG: e.ePrefix#1: 9
  //DEBUG: t.tContName#1: 13
  //DEBUG: e.eSentence#1: 15
  //DEBUG: e.ePattern#1: 19
  //DEBUG: e.eCondResult#1: 23
  //DEBUG: e.eCondPattern#1: 27
  //DEBUG: e.eSentenceTail#1: 31
  //DEBUG: e.eRefilledNames1#1: 35
  //DEBUG: e.eCheckFunction#1: 39
  //DEBUG: e.eSentenceVariables#1: 2

  refalrts::reset_allocator();
  //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ AsIs: </0 Reuse: & ConditionSubFunctions_check2/4 AsIs: (/7 AsIs: e.eNames#1/5 AsIs: )/8 AsIs: (/11 AsIs: e.ePrefix#1/9 AsIs: )/12 AsIs: t.tContName#1/13 AsIs: (/17 AsIs: e.eSentence#1/15 AsIs: )/18 AsIs: (/21 AsIs: e.ePattern#1/19 AsIs: )/22 AsIs: (/25 AsIs: e.eCondResult#1/23 AsIs: )/26 AsIs: (/29 AsIs: e.eCondPattern#1/27 AsIs: )/30 AsIs: (/33 AsIs: e.eSentenceTail#1/31 AsIs: )/34 AsIs: (/37 AsIs: e.eRefilledNames1#1/35 AsIs: )/38 AsIs: (/41 AsIs: e.eCheckFunction#1/39 AsIs: )/42 } (/43 Tile{ AsIs: e.eSentenceVariables#1/2 } )/44 </45 & BlockScopeVars/46 (/47 e.ePattern#1/19/48 )/50 >/51 Tile{ AsIs: >/1 ]] }
  if( ! refalrts::alloc_open_bracket( context[43] ) )
    return refalrts::cNoMemory;
  if( ! refalrts::alloc_close_bracket( context[44] ) )
    return refalrts::cNoMemory;
  if( ! refalrts::alloc_open_call( context[45] ) )
    return refalrts::cNoMemory;
  if( ! refalrts::alloc_name( context[46], ref_BlockScopeVars.ref.function ) )
    return refalrts::cNoMemory;
  if( ! refalrts::alloc_open_bracket( context[47] ) )
    return refalrts::cNoMemory;
  if (! refalrts::copy_evar(context[48], context[49], context[19], context[20]))
    return refalrts::cNoMemory;
  if( ! refalrts::alloc_close_bracket( context[50] ) )
    return refalrts::cNoMemory;
  if( ! refalrts::alloc_close_call( context[51] ) )
    return refalrts::cNoMemory;
  refalrts::update_name( context[4], ref_ConditionSubFunctionsu_check2.ref.function );
  refalrts::push_stack( context[1] );
  refalrts::push_stack( context[0] );
  refalrts::push_stack( context[51] );
  refalrts::push_stack( context[45] );
  refalrts::link_brackets( context[47], context[50] );
  refalrts::link_brackets( context[43], context[44] );
  refalrts::link_brackets( context[41], context[42] );
  refalrts::link_brackets( context[37], context[38] );
  refalrts::link_brackets( context[33], context[34] );
  refalrts::link_brackets( context[29], context[30] );
  refalrts::link_brackets( context[25], context[26] );
  refalrts::link_brackets( context[21], context[22] );
  refalrts::link_brackets( context[17], context[18] );
  refalrts::link_brackets( context[11], context[12] );
  refalrts::link_brackets( context[7], context[8] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[1];
  res = refalrts::splice_evar( res, context[44], context[51] );
  res = refalrts::splice_evar( res, context[2], context[3] );
  res = refalrts::splice_evar( res, context[43], context[43] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_ConditionSubFunctionsu_check1("ConditionSubFunctions_check1", 786251477U, 1176157594U, func_ConditionSubFunctionsu_check1);

static refalrts::FnResult func_ConditionSubFunctionsu_check2(refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  refalrts::this_is_generated_function();
  // issue here memory for vars with 95 elems
  refalrts::Iter context[95];
  refalrts::zeros( context, 95 );
  // </0 & ConditionSubFunctions_check2/4 (/7 e.eNames#1/5 )/8 (/11 e.ePrefix#1/9 )/12 t.tContName#1/13 (/17 e.eSentence#1/15 )/18 (/21 e.ePattern#1/19 )/22 (/25 e.eCondResult#1/23 )/26 (/29 e.eCondPattern#1/27 )/30 (/33 e.eSentenceTail#1/31 )/34 (/37 e.eRefilledNames1#1/35 )/38 (/41 e.eCheckFunction#1/39 )/42 (/45 e.eSentenceVariables#1/43 )/46 e.ePatternVarsAsExpr#1/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  context[5] = 0;
  context[6] = 0;
  context[7] = refalrts::brackets_left( context[5], context[6], context[2], context[3] );
  if( ! context[7] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[7], context[8]);
  context[9] = 0;
  context[10] = 0;
  context[11] = refalrts::brackets_left( context[9], context[10], context[2], context[3] );
  if( ! context[11] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[11], context[12]);
  // closed e.eNames#1 as range 5
  // closed e.ePrefix#1 as range 9
  context[14] = refalrts::tvar_left( context[13], context[2], context[3] );
  if( ! context[14] )
    return refalrts::cRecognitionImpossible;
  context[15] = 0;
  context[16] = 0;
  context[17] = refalrts::brackets_left( context[15], context[16], context[2], context[3] );
  if( ! context[17] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[17], context[18]);
  context[19] = 0;
  context[20] = 0;
  context[21] = refalrts::brackets_left( context[19], context[20], context[2], context[3] );
  if( ! context[21] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[21], context[22]);
  context[23] = 0;
  context[24] = 0;
  context[25] = refalrts::brackets_left( context[23], context[24], context[2], context[3] );
  if( ! context[25] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[25], context[26]);
  context[27] = 0;
  context[28] = 0;
  context[29] = refalrts::brackets_left( context[27], context[28], context[2], context[3] );
  if( ! context[29] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[29], context[30]);
  context[31] = 0;
  context[32] = 0;
  context[33] = refalrts::brackets_left( context[31], context[32], context[2], context[3] );
  if( ! context[33] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[33], context[34]);
  context[35] = 0;
  context[36] = 0;
  context[37] = refalrts::brackets_left( context[35], context[36], context[2], context[3] );
  if( ! context[37] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[37], context[38]);
  context[39] = 0;
  context[40] = 0;
  context[41] = refalrts::brackets_left( context[39], context[40], context[2], context[3] );
  if( ! context[41] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[41], context[42]);
  context[43] = 0;
  context[44] = 0;
  context[45] = refalrts::brackets_left( context[43], context[44], context[2], context[3] );
  if( ! context[45] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[45], context[46]);
  // closed e.eSentence#1 as range 15
  // closed e.ePattern#1 as range 19
  // closed e.eCondResult#1 as range 23
  // closed e.eCondPattern#1 as range 27
  // closed e.eSentenceTail#1 as range 31
  // closed e.eRefilledNames1#1 as range 35
  // closed e.eCheckFunction#1 as range 39
  // closed e.eSentenceVariables#1 as range 43
  // closed e.ePatternVarsAsExpr#1 as range 2
  //DEBUG: e.eNames#1: 5
  //DEBUG: e.ePrefix#1: 9
  //DEBUG: t.tContName#1: 13
  //DEBUG: e.eSentence#1: 15
  //DEBUG: e.ePattern#1: 19
  //DEBUG: e.eCondResult#1: 23
  //DEBUG: e.eCondPattern#1: 27
  //DEBUG: e.eSentenceTail#1: 31
  //DEBUG: e.eRefilledNames1#1: 35
  //DEBUG: e.eCheckFunction#1: 39
  //DEBUG: e.eSentenceVariables#1: 43
  //DEBUG: e.ePatternVarsAsExpr#1: 2

  refalrts::reset_allocator();
  //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ AsIs: </0 Reuse: & ConditionSubFunctions_check3/4 AsIs: (/7 AsIs: e.eNames#1/5 AsIs: )/8 AsIs: (/11 AsIs: e.ePrefix#1/9 AsIs: )/12 AsIs: t.tContName#1/13 AsIs: (/17 AsIs: e.eSentence#1/15 AsIs: )/18 AsIs: (/21 AsIs: e.ePattern#1/19 AsIs: )/22 AsIs: (/25 AsIs: e.eCondResult#1/23 AsIs: )/26 AsIs: (/29 AsIs: e.eCondPattern#1/27 AsIs: )/30 AsIs: (/33 AsIs: e.eSentenceTail#1/31 AsIs: )/34 AsIs: (/37 AsIs: e.eRefilledNames1#1/35 AsIs: )/38 AsIs: (/41 AsIs: e.eCheckFunction#1/39 AsIs: )/42 AsIs: (/45 AsIs: e.eSentenceVariables#1/43 AsIs: )/46 } (/47 e.ePatternVarsAsExpr#1/2/48 )/50 </51 & ConditionSubFunctions-Aux/52 (/53 e.eRefilledNames1#1/35/54 )/56 (/57 e.eSentenceVariables#1/43/58 )/60 (/61 e.ePrefix#1/9/62 )/64 t.tContName#1/13/65 (/67 e.eCheckFunction#1/39/68 )/70 (/71 Tile{ AsIs: e.ePatternVarsAsExpr#1/2 } )/72 (/73 e.eCondResult#1/23/74 )/76 (/77 e.eCondPattern#1/27/78 )/80 (/81 e.eSentenceTail#1/31/82 )/84 </85 & PatternSteps/86 (/87 e.eSentenceVariables#1/43/88 )/90 e.ePattern#1/19/91 >/93 >/94 Tile{ AsIs: >/1 ]] }
  if( ! refalrts::alloc_open_bracket( context[47] ) )
    return refalrts::cNoMemory;
  if (! refalrts::copy_evar(context[48], context[49], context[2], context[3]))
    return refalrts::cNoMemory;
  if( ! refalrts::alloc_close_bracket( context[50] ) )
    return refalrts::cNoMemory;
  if( ! refalrts::alloc_open_call( context[51] ) )
    return refalrts::cNoMemory;
  if( ! refalrts::alloc_name( context[52], ref_ConditionSubFunctionsm_Aux.ref.function ) )
    return refalrts::cNoMemory;
  if( ! refalrts::alloc_open_bracket( context[53] ) )
    return refalrts::cNoMemory;
  if (! refalrts::copy_evar(context[54], context[55], context[35], context[36]))
    return refalrts::cNoMemory;
  if( ! refalrts::alloc_close_bracket( context[56] ) )
    return refalrts::cNoMemory;
  if( ! refalrts::alloc_open_bracket( context[57] ) )
    return refalrts::cNoMemory;
  if (! refalrts::copy_evar(context[58], context[59], context[43], context[44]))
    return refalrts::cNoMemory;
  if( ! refalrts::alloc_close_bracket( context[60] ) )
    return refalrts::cNoMemory;
  if( ! refalrts::alloc_open_bracket( context[61] ) )
    return refalrts::cNoMemory;
  if (! refalrts::copy_evar(context[62], context[63], context[9], context[10]))
    return refalrts::cNoMemory;
  if( ! refalrts::alloc_close_bracket( context[64] ) )
    return refalrts::cNoMemory;
  if (! refalrts::copy_evar(context[65], context[66], context[13], context[14]))
    return refalrts::cNoMemory;
  if( ! refalrts::alloc_open_bracket( context[67] ) )
    return refalrts::cNoMemory;
  if (! refalrts::copy_evar(context[68], context[69], context[39], context[40]))
    return refalrts::cNoMemory;
  if( ! refalrts::alloc_close_bracket( context[70] ) )
    return refalrts::cNoMemory;
  if( ! refalrts::alloc_open_bracket( context[71] ) )
    return refalrts::cNoMemory;
  if( ! refalrts::alloc_close_bracket( context[72] ) )
    return refalrts::cNoMemory;
  if( ! refalrts::alloc_open_bracket( context[73] ) )
    return refalrts::cNoMemory;
  if (! refalrts::copy_evar(context[74], context[75], context[23], context[24]))
    return refalrts::cNoMemory;
  if( ! refalrts::alloc_close_bracket( context[76] ) )
    return refalrts::cNoMemory;
  if( ! refalrts::alloc_open_bracket( context[77] ) )
    return refalrts::cNoMemory;
  if (! refalrts::copy_evar(context[78], context[79], context[27], context[28]))
    return refalrts::cNoMemory;
  if( ! refalrts::alloc_close_bracket( context[80] ) )
    return refalrts::cNoMemory;
  if( ! refalrts::alloc_open_bracket( context[81] ) )
    return refalrts::cNoMemory;
  if (! refalrts::copy_evar(context[82], context[83], context[31], context[32]))
    return refalrts::cNoMemory;
  if( ! refalrts::alloc_close_bracket( context[84] ) )
    return refalrts::cNoMemory;
  if( ! refalrts::alloc_open_call( context[85] ) )
    return refalrts::cNoMemory;
  if( ! refalrts::alloc_name( context[86], ref_PatternSteps.ref.function ) )
    return refalrts::cNoMemory;
  if( ! refalrts::alloc_open_bracket( context[87] ) )
    return refalrts::cNoMemory;
  if (! refalrts::copy_evar(context[88], context[89], context[43], context[44]))
    return refalrts::cNoMemory;
  if( ! refalrts::alloc_close_bracket( context[90] ) )
    return refalrts::cNoMemory;
  if (! refalrts::copy_evar(context[91], context[92], context[19], context[20]))
    return refalrts::cNoMemory;
  if( ! refalrts::alloc_close_call( context[93] ) )
    return refalrts::cNoMemory;
  if( ! refalrts::alloc_close_call( context[94] ) )
    return refalrts::cNoMemory;
  refalrts::update_name( context[4], ref_ConditionSubFunctionsu_check3.ref.function );
  refalrts::push_stack( context[1] );
  refalrts::push_stack( context[0] );
  refalrts::push_stack( context[94] );
  refalrts::push_stack( context[51] );
  refalrts::push_stack( context[93] );
  refalrts::push_stack( context[85] );
  refalrts::link_brackets( context[87], context[90] );
  refalrts::link_brackets( context[81], context[84] );
  refalrts::link_brackets( context[77], context[80] );
  refalrts::link_brackets( context[73], context[76] );
  refalrts::link_brackets( context[71], context[72] );
  refalrts::link_brackets( context[67], context[70] );
  refalrts::link_brackets( context[61], context[64] );
  refalrts::link_brackets( context[57], context[60] );
  refalrts::link_brackets( context[53], context[56] );
  refalrts::link_brackets( context[47], context[50] );
  refalrts::link_brackets( context[45], context[46] );
  refalrts::link_brackets( context[41], context[42] );
  refalrts::link_brackets( context[37], context[38] );
  refalrts::link_brackets( context[33], context[34] );
  refalrts::link_brackets( context[29], context[30] );
  refalrts::link_brackets( context[25], context[26] );
  refalrts::link_brackets( context[21], context[22] );
  refalrts::link_brackets( context[17], context[18] );
  refalrts::link_brackets( context[11], context[12] );
  refalrts::link_brackets( context[7], context[8] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[1];
  res = refalrts::splice_evar( res, context[72], context[94] );
  res = refalrts::splice_evar( res, context[2], context[3] );
  res = refalrts::splice_evar( res, context[47], context[71] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_ConditionSubFunctionsu_check2("ConditionSubFunctions_check2", 786251477U, 1176157594U, func_ConditionSubFunctionsu_check2);

static refalrts::FnResult func_ConditionSubFunctionsu_check3(refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  refalrts::this_is_generated_function();
  // issue here memory for vars with 55 elems
  refalrts::Iter context[55];
  refalrts::zeros( context, 55 );
  // </0 & ConditionSubFunctions_check3/4 (/7 e.eNames#1/5 )/8 (/11 e.ePrefix#1/9 )/12 t.tContName#1/13 (/17 e.eSentence#1/15 )/18 (/21 e.ePattern#1/19 )/22 (/25 e.eCondResult#1/23 )/26 (/29 e.eCondPattern#1/27 )/30 (/33 e.eSentenceTail#1/31 )/34 (/37 e.eRefilledNames1#1/35 )/38 (/41 e.eCheckFunction#1/39 )/42 (/45 e.eSentenceVariables#1/43 )/46 (/49 e.ePatternVarsAsExpr#1/47 )/50 (/53 e.eRefilledNames2#1/51 )/54 e.eSubFunctions#1/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  context[5] = 0;
  context[6] = 0;
  context[7] = refalrts::brackets_left( context[5], context[6], context[2], context[3] );
  if( ! context[7] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[7], context[8]);
  context[9] = 0;
  context[10] = 0;
  context[11] = refalrts::brackets_left( context[9], context[10], context[2], context[3] );
  if( ! context[11] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[11], context[12]);
  // closed e.eNames#1 as range 5
  // closed e.ePrefix#1 as range 9
  context[14] = refalrts::tvar_left( context[13], context[2], context[3] );
  if( ! context[14] )
    return refalrts::cRecognitionImpossible;
  context[15] = 0;
  context[16] = 0;
  context[17] = refalrts::brackets_left( context[15], context[16], context[2], context[3] );
  if( ! context[17] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[17], context[18]);
  context[19] = 0;
  context[20] = 0;
  context[21] = refalrts::brackets_left( context[19], context[20], context[2], context[3] );
  if( ! context[21] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[21], context[22]);
  context[23] = 0;
  context[24] = 0;
  context[25] = refalrts::brackets_left( context[23], context[24], context[2], context[3] );
  if( ! context[25] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[25], context[26]);
  context[27] = 0;
  context[28] = 0;
  context[29] = refalrts::brackets_left( context[27], context[28], context[2], context[3] );
  if( ! context[29] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[29], context[30]);
  context[31] = 0;
  context[32] = 0;
  context[33] = refalrts::brackets_left( context[31], context[32], context[2], context[3] );
  if( ! context[33] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[33], context[34]);
  context[35] = 0;
  context[36] = 0;
  context[37] = refalrts::brackets_left( context[35], context[36], context[2], context[3] );
  if( ! context[37] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[37], context[38]);
  context[39] = 0;
  context[40] = 0;
  context[41] = refalrts::brackets_left( context[39], context[40], context[2], context[3] );
  if( ! context[41] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[41], context[42]);
  context[43] = 0;
  context[44] = 0;
  context[45] = refalrts::brackets_left( context[43], context[44], context[2], context[3] );
  if( ! context[45] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[45], context[46]);
  context[47] = 0;
  context[48] = 0;
  context[49] = refalrts::brackets_left( context[47], context[48], context[2], context[3] );
  if( ! context[49] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[49], context[50]);
  context[51] = 0;
  context[52] = 0;
  context[53] = refalrts::brackets_left( context[51], context[52], context[2], context[3] );
  if( ! context[53] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[53], context[54]);
  // closed e.eSentence#1 as range 15
  // closed e.ePattern#1 as range 19
  // closed e.eCondResult#1 as range 23
  // closed e.eCondPattern#1 as range 27
  // closed e.eSentenceTail#1 as range 31
  // closed e.eRefilledNames1#1 as range 35
  // closed e.eCheckFunction#1 as range 39
  // closed e.eSentenceVariables#1 as range 43
  // closed e.ePatternVarsAsExpr#1 as range 47
  // closed e.eRefilledNames2#1 as range 51
  // closed e.eSubFunctions#1 as range 2
  //DEBUG: e.eNames#1: 5
  //DEBUG: e.ePrefix#1: 9
  //DEBUG: t.tContName#1: 13
  //DEBUG: e.eSentence#1: 15
  //DEBUG: e.ePattern#1: 19
  //DEBUG: e.eCondResult#1: 23
  //DEBUG: e.eCondPattern#1: 27
  //DEBUG: e.eSentenceTail#1: 31
  //DEBUG: e.eRefilledNames1#1: 35
  //DEBUG: e.eCheckFunction#1: 39
  //DEBUG: e.eSentenceVariables#1: 43
  //DEBUG: e.ePatternVarsAsExpr#1: 47
  //DEBUG: e.eRefilledNames2#1: 51
  //DEBUG: e.eSubFunctions#1: 2

  refalrts::reset_allocator();
  //TRASH: {REMOVED TILE} </0 & ConditionSubFunctions_check3/4 (/7 e.eNames#1/5 )/8 (/11 e.ePrefix#1/9 )/12 t.tContName#1/13 (/17 e.eSentence#1/15 {REMOVED TILE} {REMOVED TILE} )/26 (/29 e.eCondPattern#1/27 )/30 {REMOVED TILE} e.eSentenceTail#1/31 {REMOVED TILE} e.eRefilledNames1#1/35 {REMOVED TILE} (/45 e.eSentenceVariables#1/43 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} >/1 {REMOVED TILE}
  //RESULT: Tile{ [[ } Tile{ AsIs: (/53 AsIs: e.eRefilledNames2#1/51 AsIs: )/54 } Tile{ HalfReuse: (/18 AsIs: (/21 AsIs: e.ePattern#1/19 AsIs: )/22 HalfReuse: # RETURN/25 } Tile{ HalfReuse: (/34 AsIs: (/37 } Tile{ HalfReuse: # Call/33 } Tile{ HalfReuse: # NO-POS/38 AsIs: (/41 AsIs: e.eCheckFunction#1/39 AsIs: )/42 } Tile{ AsIs: e.ePatternVarsAsExpr#1/47 } Tile{ AsIs: e.eCondResult#1/23 } Tile{ AsIs: )/46 HalfReuse: )/49 } Tile{ AsIs: )/50 } Tile{ AsIs: e.eSubFunctions#1/2 } Tile{ ]] }
  refalrts::reinit_open_bracket( context[18] );
  refalrts::reinit_ident( context[25], ident_RETURN );
  refalrts::reinit_open_bracket( context[34] );
  refalrts::reinit_ident( context[33], ident_Call );
  refalrts::reinit_ident( context[38], ident_NOm_POS );
  refalrts::reinit_close_bracket( context[49] );
  refalrts::link_brackets( context[18], context[50] );
  refalrts::link_brackets( context[34], context[49] );
  refalrts::link_brackets( context[37], context[46] );
  refalrts::link_brackets( context[41], context[42] );
  refalrts::link_brackets( context[21], context[22] );
  refalrts::link_brackets( context[53], context[54] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = arg_end->next;
  res = refalrts::splice_evar( res, context[2], context[3] );
  res = refalrts::splice_evar( res, context[50], context[50] );
  res = refalrts::splice_evar( res, context[46], context[49] );
  res = refalrts::splice_evar( res, context[23], context[24] );
  res = refalrts::splice_evar( res, context[47], context[48] );
  res = refalrts::splice_evar( res, context[38], context[42] );
  res = refalrts::splice_evar( res, context[33], context[33] );
  res = refalrts::splice_evar( res, context[34], context[37] );
  res = refalrts::splice_evar( res, context[18], context[25] );
  res = refalrts::splice_evar( res, context[53], context[54] );
  refalrts::splice_to_freelist_open( trash_prev, res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_ConditionSubFunctionsu_check3("ConditionSubFunctions_check3", 786251477U, 1176157594U, func_ConditionSubFunctionsu_check3);

static refalrts::FnResult func_ConditionSubFunctionsm_Aux(refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  refalrts::this_is_generated_function();
  // issue here memory for vars with 72 elems
  refalrts::Iter context[72];
  refalrts::zeros( context, 72 );
  // </0 & ConditionSubFunctions-Aux/4 (/7 e.eNames#1/5 )/8 (/11 e.eVarNames#1/9 )/12 (/15 e.ePrefix#1/13 )/16 t.tContName#1/17 (/21 e.eCheckFunction#1/19 )/22 (/25 e.ePatternVarsAsExpr#1/23 )/26 (/29 e.eCondResult#1/27 )/30 (/33 e.eCondPattern#1/31 )/34 (/37 e.eCheckSentenceTail#1/35 )/38 e.ePatternSteps#1/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  context[5] = 0;
  context[6] = 0;
  context[7] = refalrts::brackets_left( context[5], context[6], context[2], context[3] );
  if( ! context[7] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[7], context[8]);
  context[9] = 0;
  context[10] = 0;
  context[11] = refalrts::brackets_left( context[9], context[10], context[2], context[3] );
  if( ! context[11] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[11], context[12]);
  context[13] = 0;
  context[14] = 0;
  context[15] = refalrts::brackets_left( context[13], context[14], context[2], context[3] );
  if( ! context[15] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[15], context[16]);
  // closed e.eNames#1 as range 5
  // closed e.eVarNames#1 as range 9
  // closed e.ePrefix#1 as range 13
  context[18] = refalrts::tvar_left( context[17], context[2], context[3] );
  if( ! context[18] )
    return refalrts::cRecognitionImpossible;
  context[19] = 0;
  context[20] = 0;
  context[21] = refalrts::brackets_left( context[19], context[20], context[2], context[3] );
  if( ! context[21] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[21], context[22]);
  context[23] = 0;
  context[24] = 0;
  context[25] = refalrts::brackets_left( context[23], context[24], context[2], context[3] );
  if( ! context[25] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[25], context[26]);
  context[27] = 0;
  context[28] = 0;
  context[29] = refalrts::brackets_left( context[27], context[28], context[2], context[3] );
  if( ! context[29] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[29], context[30]);
  context[31] = 0;
  context[32] = 0;
  context[33] = refalrts::brackets_left( context[31], context[32], context[2], context[3] );
  if( ! context[33] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[33], context[34]);
  context[35] = 0;
  context[36] = 0;
  context[37] = refalrts::brackets_left( context[35], context[36], context[2], context[3] );
  if( ! context[37] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[37], context[38]);
  // closed e.eCheckFunction#1 as range 19
  // closed e.ePatternVarsAsExpr#1 as range 23
  // closed e.eCondResult#1 as range 27
  // closed e.eCondPattern#1 as range 31
  // closed e.eCheckSentenceTail#1 as range 35
  // closed e.ePatternSteps#1 as range 2
  //DEBUG: e.eNames#1: 5
  //DEBUG: e.eVarNames#1: 9
  //DEBUG: e.ePrefix#1: 13
  //DEBUG: t.tContName#1: 17
  //DEBUG: e.eCheckFunction#1: 19
  //DEBUG: e.ePatternVarsAsExpr#1: 23
  //DEBUG: e.eCondResult#1: 27
  //DEBUG: e.eCondPattern#1: 31
  //DEBUG: e.eCheckSentenceTail#1: 35
  //DEBUG: e.ePatternSteps#1: 2

  refalrts::reset_allocator();
  //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ AsIs: </0 Reuse: & ConditionSubFunctions-Aux_check/4 AsIs: (/7 AsIs: e.eNames#1/5 AsIs: )/8 AsIs: (/11 AsIs: e.eVarNames#1/9 AsIs: )/12 AsIs: (/15 AsIs: e.ePrefix#1/13 AsIs: )/16 AsIs: t.tContName#1/17 AsIs: (/21 AsIs: e.eCheckFunction#1/19 AsIs: )/22 AsIs: (/25 AsIs: e.ePatternVarsAsExpr#1/23 AsIs: )/26 AsIs: (/29 AsIs: e.eCondResult#1/27 AsIs: )/30 AsIs: (/33 AsIs: e.eCondPattern#1/31 AsIs: )/34 AsIs: (/37 AsIs: e.eCheckSentenceTail#1/35 AsIs: )/38 } (/39 e.ePatternSteps#1/2/40 )/42 </43 & OpenEChain/44 (/45 e.eNames#1/5/46 )/48 (/49 e.eVarNames#1/9/50 )/52 (/53 e.ePrefix#1/13/54 )/56 t.tContName#1/17/57 (/59 e.eCheckFunction#1/19/60 )/62 (/63 e.ePatternVarsAsExpr#1/23/64 )/66 (/67 e.eCondResult#1/27/68 )/70 Tile{ AsIs: e.ePatternSteps#1/2 } >/71 Tile{ AsIs: >/1 ]] }
  if( ! refalrts::alloc_open_bracket( context[39] ) )
    return refalrts::cNoMemory;
  if (! refalrts::copy_evar(context[40], context[41], context[2], context[3]))
    return refalrts::cNoMemory;
  if( ! refalrts::alloc_close_bracket( context[42] ) )
    return refalrts::cNoMemory;
  if( ! refalrts::alloc_open_call( context[43] ) )
    return refalrts::cNoMemory;
  if( ! refalrts::alloc_name( context[44], ref_OpenEChain.ref.function ) )
    return refalrts::cNoMemory;
  if( ! refalrts::alloc_open_bracket( context[45] ) )
    return refalrts::cNoMemory;
  if (! refalrts::copy_evar(context[46], context[47], context[5], context[6]))
    return refalrts::cNoMemory;
  if( ! refalrts::alloc_close_bracket( context[48] ) )
    return refalrts::cNoMemory;
  if( ! refalrts::alloc_open_bracket( context[49] ) )
    return refalrts::cNoMemory;
  if (! refalrts::copy_evar(context[50], context[51], context[9], context[10]))
    return refalrts::cNoMemory;
  if( ! refalrts::alloc_close_bracket( context[52] ) )
    return refalrts::cNoMemory;
  if( ! refalrts::alloc_open_bracket( context[53] ) )
    return refalrts::cNoMemory;
  if (! refalrts::copy_evar(context[54], context[55], context[13], context[14]))
    return refalrts::cNoMemory;
  if( ! refalrts::alloc_close_bracket( context[56] ) )
    return refalrts::cNoMemory;
  if (! refalrts::copy_evar(context[57], context[58], context[17], context[18]))
    return refalrts::cNoMemory;
  if( ! refalrts::alloc_open_bracket( context[59] ) )
    return refalrts::cNoMemory;
  if (! refalrts::copy_evar(context[60], context[61], context[19], context[20]))
    return refalrts::cNoMemory;
  if( ! refalrts::alloc_close_bracket( context[62] ) )
    return refalrts::cNoMemory;
  if( ! refalrts::alloc_open_bracket( context[63] ) )
    return refalrts::cNoMemory;
  if (! refalrts::copy_evar(context[64], context[65], context[23], context[24]))
    return refalrts::cNoMemory;
  if( ! refalrts::alloc_close_bracket( context[66] ) )
    return refalrts::cNoMemory;
  if( ! refalrts::alloc_open_bracket( context[67] ) )
    return refalrts::cNoMemory;
  if (! refalrts::copy_evar(context[68], context[69], context[27], context[28]))
    return refalrts::cNoMemory;
  if( ! refalrts::alloc_close_bracket( context[70] ) )
    return refalrts::cNoMemory;
  if( ! refalrts::alloc_close_call( context[71] ) )
    return refalrts::cNoMemory;
  refalrts::update_name( context[4], ref_ConditionSubFunctionsm_Auxu_check.ref.function );
  refalrts::push_stack( context[1] );
  refalrts::push_stack( context[0] );
  refalrts::push_stack( context[71] );
  refalrts::push_stack( context[43] );
  refalrts::link_brackets( context[67], context[70] );
  refalrts::link_brackets( context[63], context[66] );
  refalrts::link_brackets( context[59], context[62] );
  refalrts::link_brackets( context[53], context[56] );
  refalrts::link_brackets( context[49], context[52] );
  refalrts::link_brackets( context[45], context[48] );
  refalrts::link_brackets( context[39], context[42] );
  refalrts::link_brackets( context[37], context[38] );
  refalrts::link_brackets( context[33], context[34] );
  refalrts::link_brackets( context[29], context[30] );
  refalrts::link_brackets( context[25], context[26] );
  refalrts::link_brackets( context[21], context[22] );
  refalrts::link_brackets( context[15], context[16] );
  refalrts::link_brackets( context[11], context[12] );
  refalrts::link_brackets( context[7], context[8] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[1];
  res = refalrts::splice_evar( res, context[71], context[71] );
  res = refalrts::splice_evar( res, context[2], context[3] );
  res = refalrts::splice_evar( res, context[39], context[70] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_ConditionSubFunctionsm_Aux("ConditionSubFunctions-Aux", 786251477U, 1176157594U, func_ConditionSubFunctionsm_Aux);

static refalrts::FnResult func_ConditionSubFunctionsm_Auxu_check(refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  refalrts::this_is_generated_function();
  // issue here memory for vars with 51 elems
  refalrts::Iter context[51];
  refalrts::zeros( context, 51 );
  // </0 & ConditionSubFunctions-Aux_check/4 (/7 e.eNames#1/5 )/8 (/11 e.eVarNames#1/9 )/12 (/15 e.ePrefix#1/13 )/16 t.tContName#1/17 (/21 e.eCheckFunction#1/19 )/22 (/25 e.ePatternVarsAsExpr#1/23 )/26 (/29 e.eCondResult#1/27 )/30 (/33 e.eCondPattern#1/31 )/34 (/37 e.eCheckSentenceTail#1/35 )/38 (/41 e.ePatternSteps#1/39 )/42 (/45 e.eRefilledNames#1/43 )/46 (/49 e.eContSentence#1/47 )/50 e.eOpenEFunctions#1/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  context[5] = 0;
  context[6] = 0;
  context[7] = refalrts::brackets_left( context[5], context[6], context[2], context[3] );
  if( ! context[7] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[7], context[8]);
  context[9] = 0;
  context[10] = 0;
  context[11] = refalrts::brackets_left( context[9], context[10], context[2], context[3] );
  if( ! context[11] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[11], context[12]);
  context[13] = 0;
  context[14] = 0;
  context[15] = refalrts::brackets_left( context[13], context[14], context[2], context[3] );
  if( ! context[15] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[15], context[16]);
  // closed e.eNames#1 as range 5
  // closed e.eVarNames#1 as range 9
  // closed e.ePrefix#1 as range 13
  context[18] = refalrts::tvar_left( context[17], context[2], context[3] );
  if( ! context[18] )
    return refalrts::cRecognitionImpossible;
  context[19] = 0;
  context[20] = 0;
  context[21] = refalrts::brackets_left( context[19], context[20], context[2], context[3] );
  if( ! context[21] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[21], context[22]);
  context[23] = 0;
  context[24] = 0;
  context[25] = refalrts::brackets_left( context[23], context[24], context[2], context[3] );
  if( ! context[25] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[25], context[26]);
  context[27] = 0;
  context[28] = 0;
  context[29] = refalrts::brackets_left( context[27], context[28], context[2], context[3] );
  if( ! context[29] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[29], context[30]);
  context[31] = 0;
  context[32] = 0;
  context[33] = refalrts::brackets_left( context[31], context[32], context[2], context[3] );
  if( ! context[33] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[33], context[34]);
  context[35] = 0;
  context[36] = 0;
  context[37] = refalrts::brackets_left( context[35], context[36], context[2], context[3] );
  if( ! context[37] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[37], context[38]);
  context[39] = 0;
  context[40] = 0;
  context[41] = refalrts::brackets_left( context[39], context[40], context[2], context[3] );
  if( ! context[41] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[41], context[42]);
  context[43] = 0;
  context[44] = 0;
  context[45] = refalrts::brackets_left( context[43], context[44], context[2], context[3] );
  if( ! context[45] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[45], context[46]);
  context[47] = 0;
  context[48] = 0;
  context[49] = refalrts::brackets_left( context[47], context[48], context[2], context[3] );
  if( ! context[49] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[49], context[50]);
  // closed e.eCheckFunction#1 as range 19
  // closed e.ePatternVarsAsExpr#1 as range 23
  // closed e.eCondResult#1 as range 27
  // closed e.eCondPattern#1 as range 31
  // closed e.eCheckSentenceTail#1 as range 35
  // closed e.ePatternSteps#1 as range 39
  // closed e.eRefilledNames#1 as range 43
  // closed e.eContSentence#1 as range 47
  // closed e.eOpenEFunctions#1 as range 2
  //DEBUG: e.eNames#1: 5
  //DEBUG: e.eVarNames#1: 9
  //DEBUG: e.ePrefix#1: 13
  //DEBUG: t.tContName#1: 17
  //DEBUG: e.eCheckFunction#1: 19
  //DEBUG: e.ePatternVarsAsExpr#1: 23
  //DEBUG: e.eCondResult#1: 27
  //DEBUG: e.eCondPattern#1: 31
  //DEBUG: e.eCheckSentenceTail#1: 35
  //DEBUG: e.ePatternSteps#1: 39
  //DEBUG: e.eRefilledNames#1: 43
  //DEBUG: e.eContSentence#1: 47
  //DEBUG: e.eOpenEFunctions#1: 2

  refalrts::reset_allocator();
  //TRASH: {REMOVED TILE} </0 & ConditionSubFunctions-Aux_check/4 (/7 e.eNames#1/5 )/8 (/11 e.eVarNames#1/9 )/12 (/15 e.ePrefix#1/13 )/16 t.tContName#1/17 {REMOVED TILE} {REMOVED TILE} )/26 (/29 e.eCondResult#1/27 )/30 (/33 {REMOVED TILE} )/34 {REMOVED TILE} {REMOVED TILE} e.ePatternSteps#1/39 )/42 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} >/1 {REMOVED TILE}
  //RESULT: Tile{ [[ } Tile{ AsIs: (/45 AsIs: e.eRefilledNames#1/43 AsIs: )/46 AsIs: (/49 } Tile{ AsIs: (/21 AsIs: e.eCheckFunction#1/19 AsIs: )/22 AsIs: (/25 } Tile{ AsIs: (/41 } Tile{ AsIs: e.ePatternVarsAsExpr#1/23 } Tile{ AsIs: e.eCondPattern#1/31 } Tile{ HalfReuse: )/37 AsIs: e.eCheckSentenceTail#1/35 AsIs: )/38 } Tile{ AsIs: e.eContSentence#1/47 } Tile{ AsIs: )/50 } Tile{ AsIs: e.eOpenEFunctions#1/2 } Tile{ ]] }
  refalrts::reinit_close_bracket( context[37] );
  refalrts::link_brackets( context[49], context[50] );
  refalrts::link_brackets( context[25], context[38] );
  refalrts::link_brackets( context[41], context[37] );
  refalrts::link_brackets( context[21], context[22] );
  refalrts::link_brackets( context[45], context[46] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = arg_end->next;
  res = refalrts::splice_evar( res, context[2], context[3] );
  res = refalrts::splice_evar( res, context[50], context[50] );
  res = refalrts::splice_evar( res, context[47], context[48] );
  res = refalrts::splice_evar( res, context[37], context[38] );
  res = refalrts::splice_evar( res, context[31], context[32] );
  res = refalrts::splice_evar( res, context[23], context[24] );
  res = refalrts::splice_evar( res, context[41], context[41] );
  res = refalrts::splice_evar( res, context[21], context[25] );
  res = refalrts::splice_evar( res, context[45], context[49] );
  refalrts::splice_to_freelist_open( trash_prev, res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_ConditionSubFunctionsm_Auxu_check("ConditionSubFunctions-Aux_check", 786251477U, 1176157594U, func_ConditionSubFunctionsm_Auxu_check);

static refalrts::FnResult func_OpenEChain(refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  refalrts::this_is_generated_function();
  // issue here memory for vars with 51 elems
  refalrts::Iter context[51];
  refalrts::zeros( context, 51 );
  //FAST GEN: e.$
  //GLOBAL GEN: e.$
  // </0 & OpenEChain/4 e.idx#0/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.idx#0 as range 2
  do {
    // ( e.idx ) ( e.idx ) ( e.idx ) # NoContinuation ( e.idx ) ( e.idx ) ( e.idx ) ( ( e.idx ) )
    // </0 & OpenEChain/4 (/7 e.eNames#1/5 )/8 (/11 e.eVarNames#1/9 )/12 (/15 e.ePrefix#1/13 )/16 # NoContinuation/17 (/20 e.eCheckFunction#1/18 )/21 (/24 e.ePatternVarsAsExpr#1/22 )/25 (/28 e.eCondResult#1/26 )/29 (/32 (/36 e.eT0#1/34 )/37 )/33 >/1
    context[49] = context[2];
    context[50] = context[3];
    context[5] = 0;
    context[6] = 0;
    context[7] = refalrts::brackets_left( context[5], context[6], context[49], context[50] );
    if( ! context[7] )
      continue;
    refalrts::bracket_pointers(context[7], context[8]);
    context[9] = 0;
    context[10] = 0;
    context[11] = refalrts::brackets_left( context[9], context[10], context[49], context[50] );
    if( ! context[11] )
      continue;
    refalrts::bracket_pointers(context[11], context[12]);
    context[13] = 0;
    context[14] = 0;
    context[15] = refalrts::brackets_left( context[13], context[14], context[49], context[50] );
    if( ! context[15] )
      continue;
    refalrts::bracket_pointers(context[15], context[16]);
    context[17] = refalrts::ident_left(  ident_NoContinuation, context[49], context[50] );
    if( ! context[17] )
      continue;
    context[18] = 0;
    context[19] = 0;
    context[20] = refalrts::brackets_left( context[18], context[19], context[49], context[50] );
    if( ! context[20] )
      continue;
    refalrts::bracket_pointers(context[20], context[21]);
    context[22] = 0;
    context[23] = 0;
    context[24] = refalrts::brackets_left( context[22], context[23], context[49], context[50] );
    if( ! context[24] )
      continue;
    refalrts::bracket_pointers(context[24], context[25]);
    context[26] = 0;
    context[27] = 0;
    context[28] = refalrts::brackets_left( context[26], context[27], context[49], context[50] );
    if( ! context[28] )
      continue;
    refalrts::bracket_pointers(context[28], context[29]);
    context[30] = 0;
    context[31] = 0;
    context[32] = refalrts::brackets_left( context[30], context[31], context[49], context[50] );
    if( ! context[32] )
      continue;
    refalrts::bracket_pointers(context[32], context[33]);
    context[34] = 0;
    context[35] = 0;
    context[36] = refalrts::brackets_left( context[34], context[35], context[30], context[31] );
    if( ! context[36] )
      continue;
    refalrts::bracket_pointers(context[36], context[37]);
    if( ! refalrts::empty_seq( context[30], context[31] ) )
      continue;
    if( ! refalrts::empty_seq( context[49], context[50] ) )
      continue;
    // closed e.eNames#1 as range 5
    // closed e.eVarNames#1 as range 9
    // closed e.ePrefix#1 as range 13
    // closed e.eCheckFunction#1 as range 18
    // closed e.ePatternVarsAsExpr#1 as range 22
    // closed e.eCondResult#1 as range 26
    // closed e.eT0#1 as range 34
    //DEBUG: e.eNames#1: 5
    //DEBUG: e.eVarNames#1: 9
    //DEBUG: e.ePrefix#1: 13
    //DEBUG: e.eCheckFunction#1: 18
    //DEBUG: e.ePatternVarsAsExpr#1: 22
    //DEBUG: e.eCondResult#1: 26
    //DEBUG: e.eT0#1: 34

    refalrts::reset_allocator();
    //TRASH: {REMOVED TILE} </0 & OpenEChain/4 {REMOVED TILE} e.eVarNames#1/9 )/12 (/15 e.ePrefix#1/13 )/16 # NoContinuation/17 (/20 e.eCheckFunction#1/18 )/21 (/24 e.ePatternVarsAsExpr#1/22 )/25 (/28 e.eCondResult#1/26 )/29 (/32 (/36 e.eT0#1/34 )/37 )/33 {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ AsIs: (/7 AsIs: e.eNames#1/5 AsIs: )/8 AsIs: (/11 } Tile{ HalfReuse: )/1 ]] }
    refalrts::reinit_close_bracket( context[1] );
    refalrts::link_brackets( context[11], context[1] );
    refalrts::link_brackets( context[7], context[8] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    res = refalrts::splice_evar( res, context[7], context[11] );
    refalrts::splice_to_freelist_open( trash_prev, res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence();

  do {
    // ( e.idx ) ( e.idx ) ( e.idx ) ( e.idx ) ( e.idx ) ( e.idx ) ( e.idx ) ( ( e.idx ) )
    // </0 & OpenEChain/4 (/7 e.eNames#1/5 )/8 (/11 e.eVarNames#1/9 )/12 (/15 e.ePrefix#1/13 )/16 (/19 e.eContName#1/17 )/20 (/23 e.eCheckFunction#1/21 )/24 (/27 e.ePatternVarsAsExpr#1/25 )/28 (/31 e.eCondResult#1/29 )/32 (/35 (/39 e.eT0#1/37 )/40 )/36 >/1
    context[49] = context[2];
    context[50] = context[3];
    context[5] = 0;
    context[6] = 0;
    context[7] = refalrts::brackets_left( context[5], context[6], context[49], context[50] );
    if( ! context[7] )
      continue;
    refalrts::bracket_pointers(context[7], context[8]);
    context[9] = 0;
    context[10] = 0;
    context[11] = refalrts::brackets_left( context[9], context[10], context[49], context[50] );
    if( ! context[11] )
      continue;
    refalrts::bracket_pointers(context[11], context[12]);
    context[13] = 0;
    context[14] = 0;
    context[15] = refalrts::brackets_left( context[13], context[14], context[49], context[50] );
    if( ! context[15] )
      continue;
    refalrts::bracket_pointers(context[15], context[16]);
    context[17] = 0;
    context[18] = 0;
    context[19] = refalrts::brackets_left( context[17], context[18], context[49], context[50] );
    if( ! context[19] )
      continue;
    refalrts::bracket_pointers(context[19], context[20]);
    context[21] = 0;
    context[22] = 0;
    context[23] = refalrts::brackets_left( context[21], context[22], context[49], context[50] );
    if( ! context[23] )
      continue;
    refalrts::bracket_pointers(context[23], context[24]);
    context[25] = 0;
    context[26] = 0;
    context[27] = refalrts::brackets_left( context[25], context[26], context[49], context[50] );
    if( ! context[27] )
      continue;
    refalrts::bracket_pointers(context[27], context[28]);
    context[29] = 0;
    context[30] = 0;
    context[31] = refalrts::brackets_left( context[29], context[30], context[49], context[50] );
    if( ! context[31] )
      continue;
    refalrts::bracket_pointers(context[31], context[32]);
    context[33] = 0;
    context[34] = 0;
    context[35] = refalrts::brackets_left( context[33], context[34], context[49], context[50] );
    if( ! context[35] )
      continue;
    refalrts::bracket_pointers(context[35], context[36]);
    context[37] = 0;
    context[38] = 0;
    context[39] = refalrts::brackets_left( context[37], context[38], context[33], context[34] );
    if( ! context[39] )
      continue;
    refalrts::bracket_pointers(context[39], context[40]);
    if( ! refalrts::empty_seq( context[33], context[34] ) )
      continue;
    if( ! refalrts::empty_seq( context[49], context[50] ) )
      continue;
    // closed e.eNames#1 as range 5
    // closed e.eVarNames#1 as range 9
    // closed e.ePrefix#1 as range 13
    // closed e.eContName#1 as range 17
    // closed e.eCheckFunction#1 as range 21
    // closed e.ePatternVarsAsExpr#1 as range 25
    // closed e.eCondResult#1 as range 29
    // closed e.eT0#1 as range 37
    //DEBUG: e.eNames#1: 5
    //DEBUG: e.eVarNames#1: 9
    //DEBUG: e.ePrefix#1: 13
    //DEBUG: e.eContName#1: 17
    //DEBUG: e.eCheckFunction#1: 21
    //DEBUG: e.ePatternVarsAsExpr#1: 25
    //DEBUG: e.eCondResult#1: 29
    //DEBUG: e.eT0#1: 37

    refalrts::reset_allocator();
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 Reuse: & OpenEChain_check/4 AsIs: (/7 AsIs: e.eNames#1/5 AsIs: )/8 AsIs: (/11 AsIs: e.eVarNames#1/9 AsIs: )/12 AsIs: (/15 AsIs: e.ePrefix#1/13 AsIs: )/16 AsIs: (/19 AsIs: e.eContName#1/17 AsIs: )/20 AsIs: (/23 AsIs: e.eCheckFunction#1/21 AsIs: )/24 AsIs: (/27 AsIs: e.ePatternVarsAsExpr#1/25 AsIs: )/28 AsIs: (/31 AsIs: e.eCondResult#1/29 AsIs: )/32 AsIs: (/35 } Tile{ AsIs: e.eT0#1/37 } )/41 </42 & NewName/43 Tile{ AsIs: (/39 } e.eVarNames#1/9/44 )/46"eOthe"/47 Tile{ HalfReuse: 'r'/40 HalfReuse: >/36 AsIs: >/1 ]] }
    if( ! refalrts::alloc_close_bracket( context[41] ) )
      return refalrts::cNoMemory;
    if( ! refalrts::alloc_open_call( context[42] ) )
      return refalrts::cNoMemory;
    if( ! refalrts::alloc_name( context[43], ref_NewName.ref.function ) )
      return refalrts::cNoMemory;
    if (! refalrts::copy_evar(context[44], context[45], context[9], context[10]))
      return refalrts::cNoMemory;
    if( ! refalrts::alloc_close_bracket( context[46] ) )
      return refalrts::cNoMemory;
    if( ! refalrts::alloc_chars( context[47], context[48], "eOthe", 5 ) )
      return refalrts::cNoMemory;
    refalrts::update_name( context[4], ref_OpenEChainu_check.ref.function );
    refalrts::reinit_char( context[40], 'r' );
    refalrts::reinit_close_call( context[36] );
    refalrts::push_stack( context[1] );
    refalrts::push_stack( context[0] );
    refalrts::push_stack( context[36] );
    refalrts::push_stack( context[42] );
    refalrts::link_brackets( context[39], context[46] );
    refalrts::link_brackets( context[35], context[41] );
    refalrts::link_brackets( context[31], context[32] );
    refalrts::link_brackets( context[27], context[28] );
    refalrts::link_brackets( context[23], context[24] );
    refalrts::link_brackets( context[19], context[20] );
    refalrts::link_brackets( context[15], context[16] );
    refalrts::link_brackets( context[11], context[12] );
    refalrts::link_brackets( context[7], context[8] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[40];
    res = refalrts::splice_evar( res, context[46], context[48] );
    res = refalrts::splice_evar( res, context[44], context[45] );
    res = refalrts::splice_evar( res, context[39], context[39] );
    res = refalrts::splice_evar( res, context[41], context[43] );
    res = refalrts::splice_evar( res, context[37], context[38] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence();

  // e.idx
  // </0 & OpenEChain/4 e.eOther#1/2 >/1
  // closed e.eOther#1 as range 2
  //DEBUG: e.eOther#1: 2

  refalrts::reset_allocator();
  //TRASH: {REMOVED TILE}
  //RESULT: Tile{ [[ AsIs: </0 Reuse: & OpenEChain_cont/4 AsIs: e.eOther#1/2 AsIs: >/1 ]] }
  refalrts::update_name( context[4], ref_OpenEChainu_cont.ref.function );
  refalrts::push_stack( context[1] );
  refalrts::push_stack( context[0] );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_OpenEChain("OpenEChain", 786251477U, 1176157594U, func_OpenEChain);

static refalrts::FnResult func_OpenEChainu_check(refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  refalrts::this_is_generated_function();
  // issue here memory for vars with 43 elems
  refalrts::Iter context[43];
  refalrts::zeros( context, 43 );
  //FAST GEN: ( e.$ ) ( e.$ ) ( e.$ ) ( e.$ ) ( e.$ ) ( e.$ ) ( e.$ ) ( e.$ ) e.$
  //GLOBAL GEN: ( e.$ ) ( e.$ ) ( e.$ ) ( e.$ ) ( e.$ ) ( e.$ ) ( e.$ ) ( e.$ ) e.$
  // </0 & OpenEChain_check/4 (/7 e.idxB#0/5 )/8 (/11 e.idxTB#0/9 )/12 (/15 e.idxTTB#0/13 )/16 (/19 e.idxTTTB#0/17 )/20 (/23 e.idxTTTTB#0/21 )/24 (/27 e.idxTTTTTB#0/25 )/28 (/31 e.idxTTTTTTB#0/29 )/32 (/35 e.idxTTTTTTTB#0/33 )/36 e.idxTTTTTTTT#0/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  context[5] = 0;
  context[6] = 0;
  context[7] = refalrts::brackets_left( context[5], context[6], context[2], context[3] );
  if( ! context[7] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[7], context[8]);
  context[9] = 0;
  context[10] = 0;
  context[11] = refalrts::brackets_left( context[9], context[10], context[2], context[3] );
  if( ! context[11] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[11], context[12]);
  context[13] = 0;
  context[14] = 0;
  context[15] = refalrts::brackets_left( context[13], context[14], context[2], context[3] );
  if( ! context[15] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[15], context[16]);
  context[17] = 0;
  context[18] = 0;
  context[19] = refalrts::brackets_left( context[17], context[18], context[2], context[3] );
  if( ! context[19] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[19], context[20]);
  context[21] = 0;
  context[22] = 0;
  context[23] = refalrts::brackets_left( context[21], context[22], context[2], context[3] );
  if( ! context[23] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[23], context[24]);
  context[25] = 0;
  context[26] = 0;
  context[27] = refalrts::brackets_left( context[25], context[26], context[2], context[3] );
  if( ! context[27] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[27], context[28]);
  context[29] = 0;
  context[30] = 0;
  context[31] = refalrts::brackets_left( context[29], context[30], context[2], context[3] );
  if( ! context[31] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[31], context[32]);
  context[33] = 0;
  context[34] = 0;
  context[35] = refalrts::brackets_left( context[33], context[34], context[2], context[3] );
  if( ! context[35] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[35], context[36]);
  // closed e.idxB#0 as range 5
  // closed e.idxTB#0 as range 9
  // closed e.idxTTB#0 as range 13
  // closed e.idxTTTB#0 as range 17
  // closed e.idxTTTTB#0 as range 21
  // closed e.idxTTTTTB#0 as range 25
  // closed e.idxTTTTTTB#0 as range 29
  // closed e.idxTTTTTTTB#0 as range 33
  // closed e.idxTTTTTTTT#0 as range 2
  do {
    // ( e.idx ) ( e.idx ) ( e.idx ) ( e.idx ) ( e.idx ) ( e.idx ) ( e.idx ) ( e.idx ) ( e.idx ) e.idx
    // </0 & OpenEChain_check/4 (/7 e.eNames#1/5 )/8 (/11 e.eVarNames#1/9 )/12 (/15 e.ePrefix#1/13 )/16 (/19 e.eContName#1/17 )/20 (/23 e.eCheckFunction#1/21 )/24 (/27 e.ePatternVarsAsExpr#1/25 )/28 (/31 e.eCondResult#1/29 )/32 (/35 e.eT0#1/33 )/36 (/39 e.eNewVarNames#1/37 )/40 e.eeOther#1/2 >/1
    context[41] = context[2];
    context[42] = context[3];
    context[37] = 0;
    context[38] = 0;
    context[39] = refalrts::brackets_left( context[37], context[38], context[41], context[42] );
    if( ! context[39] )
      continue;
    refalrts::bracket_pointers(context[39], context[40]);
    // closed e.eNames#1 as range 5
    // closed e.eVarNames#1 as range 9
    // closed e.ePrefix#1 as range 13
    // closed e.eContName#1 as range 17
    // closed e.eCheckFunction#1 as range 21
    // closed e.ePatternVarsAsExpr#1 as range 25
    // closed e.eCondResult#1 as range 29
    // closed e.eT0#1 as range 33
    // closed e.eNewVarNames#1 as range 37
    // closed e.eeOther#1 as range 41(2)
    //DEBUG: e.eNames#1: 5
    //DEBUG: e.eVarNames#1: 9
    //DEBUG: e.ePrefix#1: 13
    //DEBUG: e.eContName#1: 17
    //DEBUG: e.eCheckFunction#1: 21
    //DEBUG: e.ePatternVarsAsExpr#1: 25
    //DEBUG: e.eCondResult#1: 29
    //DEBUG: e.eT0#1: 33
    //DEBUG: e.eNewVarNames#1: 37
    //DEBUG: e.eeOther#1: 2

    refalrts::reset_allocator();
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} e.eVarNames#1/9 {REMOVED TILE} e.ePrefix#1/13 {REMOVED TILE} {REMOVED TILE} e.eCheckFunction#1/21 {REMOVED TILE} e.eCondResult#1/29 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} e.eNewVarNames#1/37 {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ AsIs: (/7 AsIs: e.eNames#1/5 AsIs: )/8 AsIs: (/11 } Tile{ HalfReuse: (/24 AsIs: (/27 AsIs: e.ePatternVarsAsExpr#1/25 HalfReuse: (/28 HalfReuse: # Variable/31 } Tile{ HalfReuse: # NO-POS/40 AsIs: e.eeOther#1/41(2) HalfReuse: )/1 } Tile{ AsIs: )/36 HalfReuse: # RETURN/39 } Tile{ HalfReuse: (/32 AsIs: (/35 } Tile{ HalfReuse: # Call/23 } Tile{ HalfReuse: # NO-POS/16 AsIs: (/19 AsIs: e.eContName#1/17 AsIs: )/20 } Tile{ AsIs: e.eT0#1/33 } Tile{ AsIs: )/12 HalfReuse: )/15 } Tile{ HalfReuse: )/0 HalfReuse: )/4 } Tile{ ]] }
    refalrts::reinit_open_bracket( context[24] );
    refalrts::reinit_open_bracket( context[28] );
    refalrts::reinit_ident( context[31], ident_Variable );
    refalrts::reinit_ident( context[40], ident_NOm_POS );
    refalrts::reinit_close_bracket( context[1] );
    refalrts::reinit_ident( context[39], ident_RETURN );
    refalrts::reinit_open_bracket( context[32] );
    refalrts::reinit_ident( context[23], ident_Call );
    refalrts::reinit_ident( context[16], ident_NOm_POS );
    refalrts::reinit_close_bracket( context[15] );
    refalrts::reinit_close_bracket( context[0] );
    refalrts::reinit_close_bracket( context[4] );
    refalrts::link_brackets( context[11], context[4] );
    refalrts::link_brackets( context[24], context[0] );
    refalrts::link_brackets( context[32], context[15] );
    refalrts::link_brackets( context[35], context[12] );
    refalrts::link_brackets( context[19], context[20] );
    refalrts::link_brackets( context[27], context[36] );
    refalrts::link_brackets( context[28], context[1] );
    refalrts::link_brackets( context[7], context[8] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = arg_end->next;
    res = refalrts::splice_evar( res, context[0], context[4] );
    res = refalrts::splice_evar( res, context[12], context[15] );
    res = refalrts::splice_evar( res, context[33], context[34] );
    res = refalrts::splice_evar( res, context[16], context[20] );
    res = refalrts::splice_evar( res, context[23], context[23] );
    res = refalrts::splice_evar( res, context[32], context[35] );
    res = refalrts::splice_evar( res, context[36], context[39] );
    res = refalrts::splice_evar( res, context[40], context[1] );
    res = refalrts::splice_evar( res, context[24], context[31] );
    res = refalrts::splice_evar( res, context[7], context[11] );
    refalrts::splice_to_freelist_open( trash_prev, res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence();

  // ( e.idx ) ( e.idx ) ( e.idx ) ( e.idx ) ( e.idx ) ( e.idx ) ( e.idx ) ( e.idx ) e.idx
  // </0 & OpenEChain_check/4 (/7 e.eNames#1/5 )/8 (/11 e.eVarNames#1/9 )/12 (/15 e.ePrefix#1/13 )/16 (/19 e.eContName#1/17 )/20 (/23 e.eCheckFunction#1/21 )/24 (/27 e.ePatternVarsAsExpr#1/25 )/28 (/31 e.eCondResult#1/29 )/32 (/35 e.eT0#1/33 )/36 e.eOther#1/2 >/1
  // closed e.eNames#1 as range 5
  // closed e.eVarNames#1 as range 9
  // closed e.ePrefix#1 as range 13
  // closed e.eContName#1 as range 17
  // closed e.eCheckFunction#1 as range 21
  // closed e.ePatternVarsAsExpr#1 as range 25
  // closed e.eCondResult#1 as range 29
  // closed e.eT0#1 as range 33
  // closed e.eOther#1 as range 2
  //DEBUG: e.eNames#1: 5
  //DEBUG: e.eVarNames#1: 9
  //DEBUG: e.ePrefix#1: 13
  //DEBUG: e.eContName#1: 17
  //DEBUG: e.eCheckFunction#1: 21
  //DEBUG: e.ePatternVarsAsExpr#1: 25
  //DEBUG: e.eCondResult#1: 29
  //DEBUG: e.eT0#1: 33
  //DEBUG: e.eOther#1: 2

  refalrts::reset_allocator();
  //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} e.eOther#1/2 {REMOVED TILE}
  //RESULT: Tile{ [[ AsIs: </0 Reuse: & OpenEChain_cont/4 AsIs: (/7 AsIs: e.eNames#1/5 AsIs: )/8 AsIs: (/11 AsIs: e.eVarNames#1/9 AsIs: )/12 AsIs: (/15 AsIs: e.ePrefix#1/13 AsIs: )/16 AsIs: (/19 AsIs: e.eContName#1/17 AsIs: )/20 AsIs: (/23 AsIs: e.eCheckFunction#1/21 AsIs: )/24 AsIs: (/27 AsIs: e.ePatternVarsAsExpr#1/25 AsIs: )/28 AsIs: (/31 AsIs: e.eCondResult#1/29 AsIs: )/32 AsIs: (/35 } (/37 Tile{ AsIs: e.eT0#1/33 } Tile{ AsIs: )/36 } )/38 Tile{ AsIs: >/1 ]] }
  if( ! refalrts::alloc_open_bracket( context[37] ) )
    return refalrts::cNoMemory;
  if( ! refalrts::alloc_close_bracket( context[38] ) )
    return refalrts::cNoMemory;
  refalrts::update_name( context[4], ref_OpenEChainu_cont.ref.function );
  refalrts::push_stack( context[1] );
  refalrts::push_stack( context[0] );
  refalrts::link_brackets( context[35], context[38] );
  refalrts::link_brackets( context[37], context[36] );
  refalrts::link_brackets( context[31], context[32] );
  refalrts::link_brackets( context[27], context[28] );
  refalrts::link_brackets( context[23], context[24] );
  refalrts::link_brackets( context[19], context[20] );
  refalrts::link_brackets( context[15], context[16] );
  refalrts::link_brackets( context[11], context[12] );
  refalrts::link_brackets( context[7], context[8] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[1];
  res = refalrts::splice_evar( res, context[38], context[38] );
  res = refalrts::splice_evar( res, context[36], context[36] );
  res = refalrts::splice_evar( res, context[33], context[34] );
  res = refalrts::splice_evar( res, context[37], context[37] );
  refalrts::splice_to_freelist_open( context[35], res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_OpenEChainu_check("OpenEChain_check", 786251477U, 1176157594U, func_OpenEChainu_check);

static refalrts::FnResult func_OpenEChainu_cont(refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  refalrts::this_is_generated_function();
  // issue here memory for vars with 50 elems
  refalrts::Iter context[50];
  refalrts::zeros( context, 50 );
  // </0 & OpenEChain_cont/4 (/7 e.eNames#1/5 )/8 (/11 e.eVarNames#1/9 )/12 (/15 e.ePrefix#1/13 )/16 t.tContName#1/17 (/21 e.eCheckFunction#1/19 )/22 (/25 e.ePatternVarsAsExpr#1/23 )/26 (/29 e.eCondResult#1/27 )/30 (/33 (/37 e.eT0#1/35 )/38 )/34 e.eTemplates#1/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  context[5] = 0;
  context[6] = 0;
  context[7] = refalrts::brackets_left( context[5], context[6], context[2], context[3] );
  if( ! context[7] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[7], context[8]);
  context[9] = 0;
  context[10] = 0;
  context[11] = refalrts::brackets_left( context[9], context[10], context[2], context[3] );
  if( ! context[11] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[11], context[12]);
  context[13] = 0;
  context[14] = 0;
  context[15] = refalrts::brackets_left( context[13], context[14], context[2], context[3] );
  if( ! context[15] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[15], context[16]);
  // closed e.eNames#1 as range 5
  // closed e.eVarNames#1 as range 9
  // closed e.ePrefix#1 as range 13
  context[18] = refalrts::tvar_left( context[17], context[2], context[3] );
  if( ! context[18] )
    return refalrts::cRecognitionImpossible;
  context[19] = 0;
  context[20] = 0;
  context[21] = refalrts::brackets_left( context[19], context[20], context[2], context[3] );
  if( ! context[21] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[21], context[22]);
  context[23] = 0;
  context[24] = 0;
  context[25] = refalrts::brackets_left( context[23], context[24], context[2], context[3] );
  if( ! context[25] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[25], context[26]);
  context[27] = 0;
  context[28] = 0;
  context[29] = refalrts::brackets_left( context[27], context[28], context[2], context[3] );
  if( ! context[29] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[29], context[30]);
  context[31] = 0;
  context[32] = 0;
  context[33] = refalrts::brackets_left( context[31], context[32], context[2], context[3] );
  if( ! context[33] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[33], context[34]);
  context[35] = 0;
  context[36] = 0;
  context[37] = refalrts::brackets_left( context[35], context[36], context[31], context[32] );
  if( ! context[37] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[37], context[38]);
  if( ! refalrts::empty_seq( context[31], context[32] ) )
    return refalrts::cRecognitionImpossible;
  // closed e.eCheckFunction#1 as range 19
  // closed e.ePatternVarsAsExpr#1 as range 23
  // closed e.eCondResult#1 as range 27
  // closed e.eT0#1 as range 35
  // closed e.eTemplates#1 as range 2
  //DEBUG: e.eNames#1: 5
  //DEBUG: e.eVarNames#1: 9
  //DEBUG: e.ePrefix#1: 13
  //DEBUG: t.tContName#1: 17
  //DEBUG: e.eCheckFunction#1: 19
  //DEBUG: e.ePatternVarsAsExpr#1: 23
  //DEBUG: e.eCondResult#1: 27
  //DEBUG: e.eT0#1: 35
  //DEBUG: e.eTemplates#1: 2

  refalrts::reset_allocator();
  //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ AsIs: </0 Reuse: & OpenEChain_check0/4 AsIs: (/7 AsIs: e.eNames#1/5 AsIs: )/8 AsIs: (/11 AsIs: e.eVarNames#1/9 AsIs: )/12 AsIs: (/15 AsIs: e.ePrefix#1/13 AsIs: )/16 AsIs: t.tContName#1/17 AsIs: (/21 AsIs: e.eCheckFunction#1/19 AsIs: )/22 AsIs: (/25 AsIs: e.ePatternVarsAsExpr#1/23 AsIs: )/26 AsIs: (/29 AsIs: e.eCondResult#1/27 AsIs: )/30 AsIs: (/33 } Tile{ AsIs: e.eT0#1/35 } Tile{ AsIs: )/38 HalfReuse: (/34 AsIs: e.eTemplates#1/2 HalfReuse: )/1 } </39 & NewName/40 Tile{ AsIs: (/37 } e.eNames#1/5/41 )/43 e.ePrefix#1/13/44"_forward"/46 >/48 >/49 Tile{ ]] }
  if( ! refalrts::alloc_open_call( context[39] ) )
    return refalrts::cNoMemory;
  if( ! refalrts::alloc_name( context[40], ref_NewName.ref.function ) )
    return refalrts::cNoMemory;
  if (! refalrts::copy_evar(context[41], context[42], context[5], context[6]))
    return refalrts::cNoMemory;
  if( ! refalrts::alloc_close_bracket( context[43] ) )
    return refalrts::cNoMemory;
  if (! refalrts::copy_evar(context[44], context[45], context[13], context[14]))
    return refalrts::cNoMemory;
  if( ! refalrts::alloc_chars( context[46], context[47], "_forward", 8 ) )
    return refalrts::cNoMemory;
  if( ! refalrts::alloc_close_call( context[48] ) )
    return refalrts::cNoMemory;
  if( ! refalrts::alloc_close_call( context[49] ) )
    return refalrts::cNoMemory;
  refalrts::update_name( context[4], ref_OpenEChainu_check0.ref.function );
  refalrts::reinit_open_bracket( context[34] );
  refalrts::reinit_close_bracket( context[1] );
  refalrts::push_stack( context[49] );
  refalrts::push_stack( context[0] );
  refalrts::push_stack( context[48] );
  refalrts::push_stack( context[39] );
  refalrts::link_brackets( context[37], context[43] );
  refalrts::link_brackets( context[34], context[1] );
  refalrts::link_brackets( context[33], context[38] );
  refalrts::link_brackets( context[29], context[30] );
  refalrts::link_brackets( context[25], context[26] );
  refalrts::link_brackets( context[21], context[22] );
  refalrts::link_brackets( context[15], context[16] );
  refalrts::link_brackets( context[11], context[12] );
  refalrts::link_brackets( context[7], context[8] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = arg_end->next;
  res = refalrts::splice_evar( res, context[43], context[49] );
  res = refalrts::splice_evar( res, context[41], context[42] );
  res = refalrts::splice_evar( res, context[37], context[37] );
  res = refalrts::splice_evar( res, context[39], context[40] );
  res = refalrts::splice_evar( res, context[38], context[1] );
  res = refalrts::splice_evar( res, context[35], context[36] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_OpenEChainu_cont("OpenEChain_cont", 786251477U, 1176157594U, func_OpenEChainu_cont);

static refalrts::FnResult func_OpenEChainu_check0(refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  refalrts::this_is_generated_function();
  // issue here memory for vars with 76 elems
  refalrts::Iter context[76];
  refalrts::zeros( context, 76 );
  // </0 & OpenEChain_check0/4 (/7 e.eNames#1/5 )/8 (/11 e.eVarNames#1/9 )/12 (/15 e.ePrefix#1/13 )/16 t.tContName#1/17 (/21 e.eCheckFunction#1/19 )/22 (/25 e.ePatternVarsAsExpr#1/23 )/26 (/29 e.eCondResult#1/27 )/30 (/33 e.eT0#1/31 )/34 (/37 e.eTemplates#1/35 )/38 (/41 e.eNewNames#1/39 )/42 e.eNextForward#1/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  context[5] = 0;
  context[6] = 0;
  context[7] = refalrts::brackets_left( context[5], context[6], context[2], context[3] );
  if( ! context[7] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[7], context[8]);
  context[9] = 0;
  context[10] = 0;
  context[11] = refalrts::brackets_left( context[9], context[10], context[2], context[3] );
  if( ! context[11] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[11], context[12]);
  context[13] = 0;
  context[14] = 0;
  context[15] = refalrts::brackets_left( context[13], context[14], context[2], context[3] );
  if( ! context[15] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[15], context[16]);
  // closed e.eNames#1 as range 5
  // closed e.eVarNames#1 as range 9
  // closed e.ePrefix#1 as range 13
  context[18] = refalrts::tvar_left( context[17], context[2], context[3] );
  if( ! context[18] )
    return refalrts::cRecognitionImpossible;
  context[19] = 0;
  context[20] = 0;
  context[21] = refalrts::brackets_left( context[19], context[20], context[2], context[3] );
  if( ! context[21] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[21], context[22]);
  context[23] = 0;
  context[24] = 0;
  context[25] = refalrts::brackets_left( context[23], context[24], context[2], context[3] );
  if( ! context[25] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[25], context[26]);
  context[27] = 0;
  context[28] = 0;
  context[29] = refalrts::brackets_left( context[27], context[28], context[2], context[3] );
  if( ! context[29] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[29], context[30]);
  context[31] = 0;
  context[32] = 0;
  context[33] = refalrts::brackets_left( context[31], context[32], context[2], context[3] );
  if( ! context[33] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[33], context[34]);
  context[35] = 0;
  context[36] = 0;
  context[37] = refalrts::brackets_left( context[35], context[36], context[2], context[3] );
  if( ! context[37] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[37], context[38]);
  context[39] = 0;
  context[40] = 0;
  context[41] = refalrts::brackets_left( context[39], context[40], context[2], context[3] );
  if( ! context[41] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[41], context[42]);
  // closed e.eCheckFunction#1 as range 19
  // closed e.ePatternVarsAsExpr#1 as range 23
  // closed e.eCondResult#1 as range 27
  // closed e.eT0#1 as range 31
  // closed e.eTemplates#1 as range 35
  // closed e.eNewNames#1 as range 39
  // closed e.eNextForward#1 as range 2
  //DEBUG: e.eNames#1: 5
  //DEBUG: e.eVarNames#1: 9
  //DEBUG: e.ePrefix#1: 13
  //DEBUG: t.tContName#1: 17
  //DEBUG: e.eCheckFunction#1: 19
  //DEBUG: e.ePatternVarsAsExpr#1: 23
  //DEBUG: e.eCondResult#1: 27
  //DEBUG: e.eT0#1: 31
  //DEBUG: e.eTemplates#1: 35
  //DEBUG: e.eNewNames#1: 39
  //DEBUG: e.eNextForward#1: 2

  refalrts::reset_allocator();
  //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ AsIs: </0 Reuse: & OpenEChain_check1/4 AsIs: (/7 AsIs: e.eNames#1/5 AsIs: )/8 AsIs: (/11 AsIs: e.eVarNames#1/9 AsIs: )/12 AsIs: (/15 AsIs: e.ePrefix#1/13 AsIs: )/16 AsIs: t.tContName#1/17 AsIs: (/21 AsIs: e.eCheckFunction#1/19 AsIs: )/22 AsIs: (/25 AsIs: e.ePatternVarsAsExpr#1/23 AsIs: )/26 AsIs: (/29 AsIs: e.eCondResult#1/27 AsIs: )/30 AsIs: (/33 AsIs: e.eT0#1/31 AsIs: )/34 AsIs: (/37 AsIs: e.eTemplates#1/35 AsIs: )/38 AsIs: (/41 AsIs: e.eNewNames#1/39 AsIs: )/42 } (/43 e.eNextForward#1/2/44 )/46 </47 & DoOpenEChain/48 (/49 Tile{ AsIs: e.eNextForward#1/2 } )/50 (/51 e.eNewNames#1/39/52 )/54 (/55 e.ePrefix#1/13/56 )/58 t.tContName#1/17/59 (/61 e.eCheckFunction#1/19/62 )/64 (/65 e.ePatternVarsAsExpr#1/23/66 e.eCondResult#1/27/68 )/70 (/71 )/72 e.eTemplates#1/35/73 >/75 Tile{ AsIs: >/1 ]] }
  if( ! refalrts::alloc_open_bracket( context[43] ) )
    return refalrts::cNoMemory;
  if (! refalrts::copy_evar(context[44], context[45], context[2], context[3]))
    return refalrts::cNoMemory;
  if( ! refalrts::alloc_close_bracket( context[46] ) )
    return refalrts::cNoMemory;
  if( ! refalrts::alloc_open_call( context[47] ) )
    return refalrts::cNoMemory;
  if( ! refalrts::alloc_name( context[48], ref_DoOpenEChain.ref.function ) )
    return refalrts::cNoMemory;
  if( ! refalrts::alloc_open_bracket( context[49] ) )
    return refalrts::cNoMemory;
  if( ! refalrts::alloc_close_bracket( context[50] ) )
    return refalrts::cNoMemory;
  if( ! refalrts::alloc_open_bracket( context[51] ) )
    return refalrts::cNoMemory;
  if (! refalrts::copy_evar(context[52], context[53], context[39], context[40]))
    return refalrts::cNoMemory;
  if( ! refalrts::alloc_close_bracket( context[54] ) )
    return refalrts::cNoMemory;
  if( ! refalrts::alloc_open_bracket( context[55] ) )
    return refalrts::cNoMemory;
  if (! refalrts::copy_evar(context[56], context[57], context[13], context[14]))
    return refalrts::cNoMemory;
  if( ! refalrts::alloc_close_bracket( context[58] ) )
    return refalrts::cNoMemory;
  if (! refalrts::copy_evar(context[59], context[60], context[17], context[18]))
    return refalrts::cNoMemory;
  if( ! refalrts::alloc_open_bracket( context[61] ) )
    return refalrts::cNoMemory;
  if (! refalrts::copy_evar(context[62], context[63], context[19], context[20]))
    return refalrts::cNoMemory;
  if( ! refalrts::alloc_close_bracket( context[64] ) )
    return refalrts::cNoMemory;
  if( ! refalrts::alloc_open_bracket( context[65] ) )
    return refalrts::cNoMemory;
  if (! refalrts::copy_evar(context[66], context[67], context[23], context[24]))
    return refalrts::cNoMemory;
  if (! refalrts::copy_evar(context[68], context[69], context[27], context[28]))
    return refalrts::cNoMemory;
  if( ! refalrts::alloc_close_bracket( context[70] ) )
    return refalrts::cNoMemory;
  if( ! refalrts::alloc_open_bracket( context[71] ) )
    return refalrts::cNoMemory;
  if( ! refalrts::alloc_close_bracket( context[72] ) )
    return refalrts::cNoMemory;
  if (! refalrts::copy_evar(context[73], context[74], context[35], context[36]))
    return refalrts::cNoMemory;
  if( ! refalrts::alloc_close_call( context[75] ) )
    return refalrts::cNoMemory;
  refalrts::update_name( context[4], ref_OpenEChainu_check1.ref.function );
  refalrts::push_stack( context[1] );
  refalrts::push_stack( context[0] );
  refalrts::push_stack( context[75] );
  refalrts::push_stack( context[47] );
  refalrts::link_brackets( context[71], context[72] );
  refalrts::link_brackets( context[65], context[70] );
  refalrts::link_brackets( context[61], context[64] );
  refalrts::link_brackets( context[55], context[58] );
  refalrts::link_brackets( context[51], context[54] );
  refalrts::link_brackets( context[49], context[50] );
  refalrts::link_brackets( context[43], context[46] );
  refalrts::link_brackets( context[41], context[42] );
  refalrts::link_brackets( context[37], context[38] );
  refalrts::link_brackets( context[33], context[34] );
  refalrts::link_brackets( context[29], context[30] );
  refalrts::link_brackets( context[25], context[26] );
  refalrts::link_brackets( context[21], context[22] );
  refalrts::link_brackets( context[15], context[16] );
  refalrts::link_brackets( context[11], context[12] );
  refalrts::link_brackets( context[7], context[8] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[1];
  res = refalrts::splice_evar( res, context[50], context[75] );
  res = refalrts::splice_evar( res, context[2], context[3] );
  res = refalrts::splice_evar( res, context[43], context[49] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_OpenEChainu_check0("OpenEChain_check0", 786251477U, 1176157594U, func_OpenEChainu_check0);

static refalrts::FnResult func_OpenEChainu_check1(refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  refalrts::this_is_generated_function();
  // issue here memory for vars with 62 elems
  refalrts::Iter context[62];
  refalrts::zeros( context, 62 );
  // </0 & OpenEChain_check1/4 (/7 e.eNames#1/5 )/8 (/11 e.eVarNames#1/9 )/12 (/15 e.ePrefix#1/13 )/16 t.tContName#1/17 (/21 e.eCheckFunction#1/19 )/22 (/25 e.ePatternVarsAsExpr#1/23 )/26 (/29 e.eCondResult#1/27 )/30 (/33 e.eT0#1/31 )/34 (/37 e.eTemplates#1/35 )/38 (/41 e.eNewNames#1/39 )/42 (/45 e.eNextForward#1/43 )/46 (/49 e.eRefilledNames#1/47 )/50 e.eNewFunctions#1/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  context[5] = 0;
  context[6] = 0;
  context[7] = refalrts::brackets_left( context[5], context[6], context[2], context[3] );
  if( ! context[7] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[7], context[8]);
  context[9] = 0;
  context[10] = 0;
  context[11] = refalrts::brackets_left( context[9], context[10], context[2], context[3] );
  if( ! context[11] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[11], context[12]);
  context[13] = 0;
  context[14] = 0;
  context[15] = refalrts::brackets_left( context[13], context[14], context[2], context[3] );
  if( ! context[15] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[15], context[16]);
  // closed e.eNames#1 as range 5
  // closed e.eVarNames#1 as range 9
  // closed e.ePrefix#1 as range 13
  context[18] = refalrts::tvar_left( context[17], context[2], context[3] );
  if( ! context[18] )
    return refalrts::cRecognitionImpossible;
  context[19] = 0;
  context[20] = 0;
  context[21] = refalrts::brackets_left( context[19], context[20], context[2], context[3] );
  if( ! context[21] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[21], context[22]);
  context[23] = 0;
  context[24] = 0;
  context[25] = refalrts::brackets_left( context[23], context[24], context[2], context[3] );
  if( ! context[25] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[25], context[26]);
  context[27] = 0;
  context[28] = 0;
  context[29] = refalrts::brackets_left( context[27], context[28], context[2], context[3] );
  if( ! context[29] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[29], context[30]);
  context[31] = 0;
  context[32] = 0;
  context[33] = refalrts::brackets_left( context[31], context[32], context[2], context[3] );
  if( ! context[33] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[33], context[34]);
  context[35] = 0;
  context[36] = 0;
  context[37] = refalrts::brackets_left( context[35], context[36], context[2], context[3] );
  if( ! context[37] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[37], context[38]);
  context[39] = 0;
  context[40] = 0;
  context[41] = refalrts::brackets_left( context[39], context[40], context[2], context[3] );
  if( ! context[41] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[41], context[42]);
  context[43] = 0;
  context[44] = 0;
  context[45] = refalrts::brackets_left( context[43], context[44], context[2], context[3] );
  if( ! context[45] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[45], context[46]);
  context[47] = 0;
  context[48] = 0;
  context[49] = refalrts::brackets_left( context[47], context[48], context[2], context[3] );
  if( ! context[49] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[49], context[50]);
  // closed e.eCheckFunction#1 as range 19
  // closed e.ePatternVarsAsExpr#1 as range 23
  // closed e.eCondResult#1 as range 27
  // closed e.eT0#1 as range 31
  // closed e.eTemplates#1 as range 35
  // closed e.eNewNames#1 as range 39
  // closed e.eNextForward#1 as range 43
  // closed e.eRefilledNames#1 as range 47
  // closed e.eNewFunctions#1 as range 2
  //DEBUG: e.eNames#1: 5
  //DEBUG: e.eVarNames#1: 9
  //DEBUG: e.ePrefix#1: 13
  //DEBUG: t.tContName#1: 17
  //DEBUG: e.eCheckFunction#1: 19
  //DEBUG: e.ePatternVarsAsExpr#1: 23
  //DEBUG: e.eCondResult#1: 27
  //DEBUG: e.eT0#1: 31
  //DEBUG: e.eTemplates#1: 35
  //DEBUG: e.eNewNames#1: 39
  //DEBUG: e.eNextForward#1: 43
  //DEBUG: e.eRefilledNames#1: 47
  //DEBUG: e.eNewFunctions#1: 2

  refalrts::reset_allocator();
  //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ AsIs: </0 Reuse: & OpenEChain_check2/4 AsIs: (/7 AsIs: e.eNames#1/5 AsIs: )/8 AsIs: (/11 AsIs: e.eVarNames#1/9 AsIs: )/12 AsIs: (/15 AsIs: e.ePrefix#1/13 AsIs: )/16 AsIs: t.tContName#1/17 AsIs: (/21 AsIs: e.eCheckFunction#1/19 AsIs: )/22 AsIs: (/25 AsIs: e.ePatternVarsAsExpr#1/23 AsIs: )/26 AsIs: (/29 AsIs: e.eCondResult#1/27 AsIs: )/30 AsIs: (/33 AsIs: e.eT0#1/31 AsIs: )/34 AsIs: (/37 AsIs: e.eTemplates#1/35 AsIs: )/38 AsIs: (/41 AsIs: e.eNewNames#1/39 AsIs: )/42 AsIs: (/45 AsIs: e.eNextForward#1/43 AsIs: )/46 AsIs: (/49 AsIs: e.eRefilledNames#1/47 AsIs: )/50 } (/51 Tile{ AsIs: e.eNewFunctions#1/2 } )/52 </53 & NewName/54 (/55 e.eVarNames#1/9/56 )/58"eOther"/59 >/61 Tile{ AsIs: >/1 ]] }
  if( ! refalrts::alloc_open_bracket( context[51] ) )
    return refalrts::cNoMemory;
  if( ! refalrts::alloc_close_bracket( context[52] ) )
    return refalrts::cNoMemory;
  if( ! refalrts::alloc_open_call( context[53] ) )
    return refalrts::cNoMemory;
  if( ! refalrts::alloc_name( context[54], ref_NewName.ref.function ) )
    return refalrts::cNoMemory;
  if( ! refalrts::alloc_open_bracket( context[55] ) )
    return refalrts::cNoMemory;
  if (! refalrts::copy_evar(context[56], context[57], context[9], context[10]))
    return refalrts::cNoMemory;
  if( ! refalrts::alloc_close_bracket( context[58] ) )
    return refalrts::cNoMemory;
  if( ! refalrts::alloc_chars( context[59], context[60], "eOther", 6 ) )
    return refalrts::cNoMemory;
  if( ! refalrts::alloc_close_call( context[61] ) )
    return refalrts::cNoMemory;
  refalrts::update_name( context[4], ref_OpenEChainu_check2.ref.function );
  refalrts::push_stack( context[1] );
  refalrts::push_stack( context[0] );
  refalrts::push_stack( context[61] );
  refalrts::push_stack( context[53] );
  refalrts::link_brackets( context[55], context[58] );
  refalrts::link_brackets( context[51], context[52] );
  refalrts::link_brackets( context[49], context[50] );
  refalrts::link_brackets( context[45], context[46] );
  refalrts::link_brackets( context[41], context[42] );
  refalrts::link_brackets( context[37], context[38] );
  refalrts::link_brackets( context[33], context[34] );
  refalrts::link_brackets( context[29], context[30] );
  refalrts::link_brackets( context[25], context[26] );
  refalrts::link_brackets( context[21], context[22] );
  refalrts::link_brackets( context[15], context[16] );
  refalrts::link_brackets( context[11], context[12] );
  refalrts::link_brackets( context[7], context[8] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[1];
  res = refalrts::splice_evar( res, context[52], context[61] );
  res = refalrts::splice_evar( res, context[2], context[3] );
  res = refalrts::splice_evar( res, context[51], context[51] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_OpenEChainu_check1("OpenEChain_check1", 786251477U, 1176157594U, func_OpenEChainu_check1);

static refalrts::FnResult func_OpenEChainu_check2(refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  refalrts::this_is_generated_function();
  // issue here memory for vars with 59 elems
  refalrts::Iter context[59];
  refalrts::zeros( context, 59 );
  // </0 & OpenEChain_check2/4 (/7 e.eNames#1/5 )/8 (/11 e.eVarNames#1/9 )/12 (/15 e.ePrefix#1/13 )/16 t.tContName#1/17 (/21 e.eCheckFunction#1/19 )/22 (/25 e.ePatternVarsAsExpr#1/23 )/26 (/29 e.eCondResult#1/27 )/30 (/33 e.eT0#1/31 )/34 (/37 e.eTemplates#1/35 )/38 (/41 e.eNewNames#1/39 )/42 (/45 e.eNextForward#1/43 )/46 (/49 e.eRefilledNames#1/47 )/50 (/53 e.eNewFunctions#1/51 )/54 (/57 e.eNewVarNames#1/55 )/58 e.eeOther#1/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  context[5] = 0;
  context[6] = 0;
  context[7] = refalrts::brackets_left( context[5], context[6], context[2], context[3] );
  if( ! context[7] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[7], context[8]);
  context[9] = 0;
  context[10] = 0;
  context[11] = refalrts::brackets_left( context[9], context[10], context[2], context[3] );
  if( ! context[11] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[11], context[12]);
  context[13] = 0;
  context[14] = 0;
  context[15] = refalrts::brackets_left( context[13], context[14], context[2], context[3] );
  if( ! context[15] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[15], context[16]);
  // closed e.eNames#1 as range 5
  // closed e.eVarNames#1 as range 9
  // closed e.ePrefix#1 as range 13
  context[18] = refalrts::tvar_left( context[17], context[2], context[3] );
  if( ! context[18] )
    return refalrts::cRecognitionImpossible;
  context[19] = 0;
  context[20] = 0;
  context[21] = refalrts::brackets_left( context[19], context[20], context[2], context[3] );
  if( ! context[21] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[21], context[22]);
  context[23] = 0;
  context[24] = 0;
  context[25] = refalrts::brackets_left( context[23], context[24], context[2], context[3] );
  if( ! context[25] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[25], context[26]);
  context[27] = 0;
  context[28] = 0;
  context[29] = refalrts::brackets_left( context[27], context[28], context[2], context[3] );
  if( ! context[29] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[29], context[30]);
  context[31] = 0;
  context[32] = 0;
  context[33] = refalrts::brackets_left( context[31], context[32], context[2], context[3] );
  if( ! context[33] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[33], context[34]);
  context[35] = 0;
  context[36] = 0;
  context[37] = refalrts::brackets_left( context[35], context[36], context[2], context[3] );
  if( ! context[37] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[37], context[38]);
  context[39] = 0;
  context[40] = 0;
  context[41] = refalrts::brackets_left( context[39], context[40], context[2], context[3] );
  if( ! context[41] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[41], context[42]);
  context[43] = 0;
  context[44] = 0;
  context[45] = refalrts::brackets_left( context[43], context[44], context[2], context[3] );
  if( ! context[45] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[45], context[46]);
  context[47] = 0;
  context[48] = 0;
  context[49] = refalrts::brackets_left( context[47], context[48], context[2], context[3] );
  if( ! context[49] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[49], context[50]);
  context[51] = 0;
  context[52] = 0;
  context[53] = refalrts::brackets_left( context[51], context[52], context[2], context[3] );
  if( ! context[53] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[53], context[54]);
  context[55] = 0;
  context[56] = 0;
  context[57] = refalrts::brackets_left( context[55], context[56], context[2], context[3] );
  if( ! context[57] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[57], context[58]);
  // closed e.eCheckFunction#1 as range 19
  // closed e.ePatternVarsAsExpr#1 as range 23
  // closed e.eCondResult#1 as range 27
  // closed e.eT0#1 as range 31
  // closed e.eTemplates#1 as range 35
  // closed e.eNewNames#1 as range 39
  // closed e.eNextForward#1 as range 43
  // closed e.eRefilledNames#1 as range 47
  // closed e.eNewFunctions#1 as range 51
  // closed e.eNewVarNames#1 as range 55
  // closed e.eeOther#1 as range 2
  //DEBUG: e.eNames#1: 5
  //DEBUG: e.eVarNames#1: 9
  //DEBUG: e.ePrefix#1: 13
  //DEBUG: t.tContName#1: 17
  //DEBUG: e.eCheckFunction#1: 19
  //DEBUG: e.ePatternVarsAsExpr#1: 23
  //DEBUG: e.eCondResult#1: 27
  //DEBUG: e.eT0#1: 31
  //DEBUG: e.eTemplates#1: 35
  //DEBUG: e.eNewNames#1: 39
  //DEBUG: e.eNextForward#1: 43
  //DEBUG: e.eRefilledNames#1: 47
  //DEBUG: e.eNewFunctions#1: 51
  //DEBUG: e.eNewVarNames#1: 55
  //DEBUG: e.eeOther#1: 2

  refalrts::reset_allocator();
  //TRASH: {REMOVED TILE} {REMOVED TILE} e.eNames#1/5 )/8 (/11 e.eVarNames#1/9 )/12 (/15 e.ePrefix#1/13 )/16 t.tContName#1/17 (/21 e.eCheckFunction#1/19 {REMOVED TILE} e.eCondResult#1/27 )/30 (/33 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} e.eTemplates#1/35 {REMOVED TILE} e.eNewNames#1/39 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} e.eNewVarNames#1/55 {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ } Tile{ AsIs: (/49 AsIs: e.eRefilledNames#1/47 AsIs: )/50 AsIs: (/53 } Tile{ HalfReuse: (/22 AsIs: (/25 AsIs: e.ePatternVarsAsExpr#1/23 HalfReuse: (/26 HalfReuse: # Variable/29 } Tile{ HalfReuse: # NO-POS/58 AsIs: e.eeOther#1/2 HalfReuse: )/1 } Tile{ HalfReuse: )/0 HalfReuse: # RETURN/4 AsIs: (/7 } Tile{ AsIs: (/37 } Tile{ HalfReuse: # Call/34 } Tile{ HalfReuse: # NO-POS/42 AsIs: (/45 AsIs: e.eNextForward#1/43 AsIs: )/46 } Tile{ AsIs: e.eT0#1/31 } Tile{ AsIs: )/54 HalfReuse: )/57 } Tile{ AsIs: )/38 HalfReuse: )/41 } Tile{ AsIs: e.eNewFunctions#1/51 } Tile{ ]] }
  refalrts::reinit_open_bracket( context[22] );
  refalrts::reinit_open_bracket( context[26] );
  refalrts::reinit_ident( context[29], ident_Variable );
  refalrts::reinit_ident( context[58], ident_NOm_POS );
  refalrts::reinit_close_bracket( context[1] );
  refalrts::reinit_close_bracket( context[0] );
  refalrts::reinit_ident( context[4], ident_RETURN );
  refalrts::reinit_ident( context[34], ident_Call );
  refalrts::reinit_ident( context[42], ident_NOm_POS );
  refalrts::reinit_close_bracket( context[57] );
  refalrts::reinit_close_bracket( context[41] );
  refalrts::link_brackets( context[53], context[41] );
  refalrts::link_brackets( context[22], context[38] );
  refalrts::link_brackets( context[7], context[57] );
  refalrts::link_brackets( context[37], context[54] );
  refalrts::link_brackets( context[45], context[46] );
  refalrts::link_brackets( context[25], context[0] );
  refalrts::link_brackets( context[26], context[1] );
  refalrts::link_brackets( context[49], context[50] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = arg_end->next;
  res = refalrts::splice_evar( res, context[51], context[52] );
  res = refalrts::splice_evar( res, context[38], context[41] );
  res = refalrts::splice_evar( res, context[54], context[57] );
  res = refalrts::splice_evar( res, context[31], context[32] );
  res = refalrts::splice_evar( res, context[42], context[46] );
  res = refalrts::splice_evar( res, context[34], context[34] );
  res = refalrts::splice_evar( res, context[37], context[37] );
  res = refalrts::splice_evar( res, context[0], context[7] );
  res = refalrts::splice_evar( res, context[58], context[1] );
  res = refalrts::splice_evar( res, context[22], context[29] );
  res = refalrts::splice_evar( res, context[49], context[53] );
  refalrts::splice_to_freelist_open( trash_prev, res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_OpenEChainu_check2("OpenEChain_check2", 786251477U, 1176157594U, func_OpenEChainu_check2);

static refalrts::FnResult func_DoOpenEChain(refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  refalrts::this_is_generated_function();
  // issue here memory for vars with 64 elems
  refalrts::Iter context[64];
  refalrts::zeros( context, 64 );
  //FAST GEN: e.$
  //GLOBAL GEN: e.$
  // </0 & DoOpenEChain/4 e.idx#0/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.idx#0 as range 2
  do {
    // ( e.idx ) ( e.idx ) ( e.idx ) t.idx ( e.idx ) ( e.idx ) ( e.idx ) ( e.idx )
    // </0 & DoOpenEChain/4 (/7 e.eCurrentForward#1/5 )/8 (/11 e.eNames#1/9 )/12 (/15 e.ePrefix#1/13 )/16 t.tContName#1/33 (/31 e.eCheckFunction#1/29 )/32 (/27 e.eCheckFunctionArg#1/25 )/28 (/23 e.eGeneratedFunctions#1/21 )/24 (/19 e.eTemplateSet#1/17 )/20 >/1
    context[62] = context[2];
    context[63] = context[3];
    context[5] = 0;
    context[6] = 0;
    context[7] = refalrts::brackets_left( context[5], context[6], context[62], context[63] );
    if( ! context[7] )
      continue;
    refalrts::bracket_pointers(context[7], context[8]);
    context[9] = 0;
    context[10] = 0;
    context[11] = refalrts::brackets_left( context[9], context[10], context[62], context[63] );
    if( ! context[11] )
      continue;
    refalrts::bracket_pointers(context[11], context[12]);
    context[13] = 0;
    context[14] = 0;
    context[15] = refalrts::brackets_left( context[13], context[14], context[62], context[63] );
    if( ! context[15] )
      continue;
    refalrts::bracket_pointers(context[15], context[16]);
    context[17] = 0;
    context[18] = 0;
    context[19] = refalrts::brackets_right( context[17], context[18], context[62], context[63] );
    if( ! context[19] )
      continue;
    refalrts::bracket_pointers(context[19], context[20]);
    context[21] = 0;
    context[22] = 0;
    context[23] = refalrts::brackets_right( context[21], context[22], context[62], context[63] );
    if( ! context[23] )
      continue;
    refalrts::bracket_pointers(context[23], context[24]);
    context[25] = 0;
    context[26] = 0;
    context[27] = refalrts::brackets_right( context[25], context[26], context[62], context[63] );
    if( ! context[27] )
      continue;
    refalrts::bracket_pointers(context[27], context[28]);
    context[29] = 0;
    context[30] = 0;
    context[31] = refalrts::brackets_right( context[29], context[30], context[62], context[63] );
    if( ! context[31] )
      continue;
    refalrts::bracket_pointers(context[31], context[32]);
    // closed e.eCurrentForward#1 as range 5
    // closed e.eNames#1 as range 9
    // closed e.ePrefix#1 as range 13
    // closed e.eCheckFunction#1 as range 29
    // closed e.eCheckFunctionArg#1 as range 25
    // closed e.eGeneratedFunctions#1 as range 21
    // closed e.eTemplateSet#1 as range 17
    context[34] = refalrts::tvar_left( context[33], context[62], context[63] );
    if( ! context[34] )
      continue;
    if( ! refalrts::empty_seq( context[62], context[63] ) )
      continue;
    //DEBUG: e.eCurrentForward#1: 5
    //DEBUG: e.eNames#1: 9
    //DEBUG: e.ePrefix#1: 13
    //DEBUG: e.eCheckFunction#1: 29
    //DEBUG: e.eCheckFunctionArg#1: 25
    //DEBUG: e.eGeneratedFunctions#1: 21
    //DEBUG: e.eTemplateSet#1: 17
    //DEBUG: t.tContName#1: 33

    refalrts::reset_allocator();
    //TRASH: {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 Reuse: & DoOpenEChain_check/4 AsIs: (/7 AsIs: e.eCurrentForward#1/5 AsIs: )/8 AsIs: (/11 AsIs: e.eNames#1/9 AsIs: )/12 AsIs: (/15 AsIs: e.ePrefix#1/13 AsIs: )/16 AsIs: t.tContName#1/33 AsIs: (/31 AsIs: e.eCheckFunction#1/29 AsIs: )/32 AsIs: (/27 AsIs: e.eCheckFunctionArg#1/25 AsIs: )/28 AsIs: (/23 AsIs: e.eGeneratedFunctions#1/21 AsIs: )/24 AsIs: (/19 AsIs: e.eTemplateSet#1/17 AsIs: )/20 HalfReuse: </1 } & MakeOpenE-ForwardNext/35 (/36 e.eCurrentForward#1/5/37 )/39 (/40 e.eNames#1/9/41 )/43 (/44 e.ePrefix#1/13/45 )/47 t.tContName#1/33/48 (/50 e.eCheckFunction#1/29/51 )/53 (/54 e.eCheckFunctionArg#1/25/55 )/57 e.eTemplateSet#1/17/58 >/60 >/61 Tile{ ]] }
    if( ! refalrts::alloc_name( context[35], ref_MakeOpenEm_ForwardNext.ref.function ) )
      return refalrts::cNoMemory;
    if( ! refalrts::alloc_open_bracket( context[36] ) )
      return refalrts::cNoMemory;
    if (! refalrts::copy_evar(context[37], context[38], context[5], context[6]))
      return refalrts::cNoMemory;
    if( ! refalrts::alloc_close_bracket( context[39] ) )
      return refalrts::cNoMemory;
    if( ! refalrts::alloc_open_bracket( context[40] ) )
      return refalrts::cNoMemory;
    if (! refalrts::copy_evar(context[41], context[42], context[9], context[10]))
      return refalrts::cNoMemory;
    if( ! refalrts::alloc_close_bracket( context[43] ) )
      return refalrts::cNoMemory;
    if( ! refalrts::alloc_open_bracket( context[44] ) )
      return refalrts::cNoMemory;
    if (! refalrts::copy_evar(context[45], context[46], context[13], context[14]))
      return refalrts::cNoMemory;
    if( ! refalrts::alloc_close_bracket( context[47] ) )
      return refalrts::cNoMemory;
    if (! refalrts::copy_evar(context[48], context[49], context[33], context[34]))
      return refalrts::cNoMemory;
    if( ! refalrts::alloc_open_bracket( context[50] ) )
      return refalrts::cNoMemory;
    if (! refalrts::copy_evar(context[51], context[52], context[29], context[30]))
      return refalrts::cNoMemory;
    if( ! refalrts::alloc_close_bracket( context[53] ) )
      return refalrts::cNoMemory;
    if( ! refalrts::alloc_open_bracket( context[54] ) )
      return refalrts::cNoMemory;
    if (! refalrts::copy_evar(context[55], context[56], context[25], context[26]))
      return refalrts::cNoMemory;
    if( ! refalrts::alloc_close_bracket( context[57] ) )
      return refalrts::cNoMemory;
    if (! refalrts::copy_evar(context[58], context[59], context[17], context[18]))
      return refalrts::cNoMemory;
    if( ! refalrts::alloc_close_call( context[60] ) )
      return refalrts::cNoMemory;
    if( ! refalrts::alloc_close_call( context[61] ) )
      return refalrts::cNoMemory;
    refalrts::update_name( context[4], ref_DoOpenEChainu_check.ref.function );
    refalrts::reinit_open_call( context[1] );
    refalrts::push_stack( context[61] );
    refalrts::push_stack( context[0] );
    refalrts::push_stack( context[60] );
    refalrts::push_stack( context[1] );
    refalrts::link_brackets( context[54], context[57] );
    refalrts::link_brackets( context[50], context[53] );
    refalrts::link_brackets( context[44], context[47] );
    refalrts::link_brackets( context[40], context[43] );
    refalrts::link_brackets( context[36], context[39] );
    refalrts::link_brackets( context[19], context[20] );
    refalrts::link_brackets( context[23], context[24] );
    refalrts::link_brackets( context[27], context[28] );
    refalrts::link_brackets( context[31], context[32] );
    refalrts::link_brackets( context[15], context[16] );
    refalrts::link_brackets( context[11], context[12] );
    refalrts::link_brackets( context[7], context[8] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = arg_end->next;
    res = refalrts::splice_evar( res, context[35], context[61] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence();

  // e.idx
  // </0 & DoOpenEChain/4 e.eOther#1/2 >/1
  // closed e.eOther#1 as range 2
  //DEBUG: e.eOther#1: 2

  refalrts::reset_allocator();
  //TRASH: {REMOVED TILE}
  //RESULT: Tile{ [[ AsIs: </0 Reuse: & DoOpenEChain_cont/4 AsIs: e.eOther#1/2 AsIs: >/1 ]] }
  refalrts::update_name( context[4], ref_DoOpenEChainu_cont.ref.function );
  refalrts::push_stack( context[1] );
  refalrts::push_stack( context[0] );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_DoOpenEChain("DoOpenEChain", 786251477U, 1176157594U, func_DoOpenEChain);

static refalrts::FnResult func_DoOpenEChainu_check(refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  refalrts::this_is_generated_function();
  // issue here memory for vars with 41 elems
  refalrts::Iter context[41];
  refalrts::zeros( context, 41 );
  //FAST GEN: ( e.$ ) ( e.$ ) ( e.$ ) t.$ ( e.$ ) ( e.$ ) ( e.$ ) ( e.$ ) e.$
  //GLOBAL GEN: ( e.$ ) ( e.$ ) ( e.$ ) t.$ ( e.$ ) ( e.$ ) ( e.$ ) ( e.$ ) e.$
  // </0 & DoOpenEChain_check/4 (/7 e.idxB#0/5 )/8 (/11 e.idxTB#0/9 )/12 (/15 e.idxTTB#0/13 )/16 t.idxTTT#0/17 (/21 e.idxTTTVB#0/19 )/22 (/25 e.idxTTTVTB#0/23 )/26 (/29 e.idxTTTVTTB#0/27 )/30 (/33 e.idxTTTVTTTB#0/31 )/34 e.idxTTTVTTTT#0/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  context[5] = 0;
  context[6] = 0;
  context[7] = refalrts::brackets_left( context[5], context[6], context[2], context[3] );
  if( ! context[7] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[7], context[8]);
  context[9] = 0;
  context[10] = 0;
  context[11] = refalrts::brackets_left( context[9], context[10], context[2], context[3] );
  if( ! context[11] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[11], context[12]);
  context[13] = 0;
  context[14] = 0;
  context[15] = refalrts::brackets_left( context[13], context[14], context[2], context[3] );
  if( ! context[15] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[15], context[16]);
  // closed e.idxB#0 as range 5
  // closed e.idxTB#0 as range 9
  // closed e.idxTTB#0 as range 13
  context[18] = refalrts::tvar_left( context[17], context[2], context[3] );
  if( ! context[18] )
    return refalrts::cRecognitionImpossible;
  context[19] = 0;
  context[20] = 0;
  context[21] = refalrts::brackets_left( context[19], context[20], context[2], context[3] );
  if( ! context[21] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[21], context[22]);
  context[23] = 0;
  context[24] = 0;
  context[25] = refalrts::brackets_left( context[23], context[24], context[2], context[3] );
  if( ! context[25] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[25], context[26]);
  context[27] = 0;
  context[28] = 0;
  context[29] = refalrts::brackets_left( context[27], context[28], context[2], context[3] );
  if( ! context[29] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[29], context[30]);
  context[31] = 0;
  context[32] = 0;
  context[33] = refalrts::brackets_left( context[31], context[32], context[2], context[3] );
  if( ! context[33] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[33], context[34]);
  // closed e.idxTTTVB#0 as range 19
  // closed e.idxTTTVTB#0 as range 23
  // closed e.idxTTTVTTB#0 as range 27
  // closed e.idxTTTVTTTB#0 as range 31
  // closed e.idxTTTVTTTT#0 as range 2
  do {
    // ( e.idx ) ( e.idx ) ( e.idx ) t.idx ( e.idx ) ( e.idx ) ( e.idx ) ( e.idx ) ( e.idx ) e.idx
    // </0 & DoOpenEChain_check/4 (/7 e.eCurrentForward#1/5 )/8 (/11 e.eNames#1/9 )/12 (/15 e.ePrefix#1/13 )/16 t.tContName#1/17 (/21 e.eCheckFunction#1/19 )/22 (/25 e.eCheckFunctionArg#1/23 )/26 (/29 e.eGeneratedFunctions#1/27 )/30 (/33 e.eTemplateSet#1/31 )/34 (/37 e.eRefilledNames#1/35 )/38 e.eNewFunctions#1/2 >/1
    context[39] = context[2];
    context[40] = context[3];
    context[35] = 0;
    context[36] = 0;
    context[37] = refalrts::brackets_left( context[35], context[36], context[39], context[40] );
    if( ! context[37] )
      continue;
    refalrts::bracket_pointers(context[37], context[38]);
    // closed e.eCurrentForward#1 as range 5
    // closed e.eNames#1 as range 9
    // closed e.ePrefix#1 as range 13
    // closed e.eCheckFunction#1 as range 19
    // closed e.eCheckFunctionArg#1 as range 23
    // closed e.eGeneratedFunctions#1 as range 27
    // closed e.eTemplateSet#1 as range 31
    // closed e.eRefilledNames#1 as range 35
    // closed e.eNewFunctions#1 as range 39(2)
    //DEBUG: t.tContName#1: 17
    //DEBUG: e.eCurrentForward#1: 5
    //DEBUG: e.eNames#1: 9
    //DEBUG: e.ePrefix#1: 13
    //DEBUG: e.eCheckFunction#1: 19
    //DEBUG: e.eCheckFunctionArg#1: 23
    //DEBUG: e.eGeneratedFunctions#1: 27
    //DEBUG: e.eTemplateSet#1: 31
    //DEBUG: e.eRefilledNames#1: 35
    //DEBUG: e.eNewFunctions#1: 2

    refalrts::reset_allocator();
    //TRASH: {REMOVED TILE} </0 & DoOpenEChain_check/4 (/7 e.eCurrentForward#1/5 )/8 (/11 e.eNames#1/9 )/12 (/15 e.ePrefix#1/13 )/16 t.tContName#1/17 (/21 e.eCheckFunction#1/19 )/22 (/25 e.eCheckFunctionArg#1/23 )/26 (/29 {REMOVED TILE} )/30 (/33 e.eTemplateSet#1/31 )/34 {REMOVED TILE} {REMOVED TILE} >/1 {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ AsIs: (/37 AsIs: e.eRefilledNames#1/35 AsIs: )/38 } Tile{ AsIs: e.eGeneratedFunctions#1/27 } Tile{ AsIs: e.eNewFunctions#1/39(2) } Tile{ ]] }
    refalrts::link_brackets( context[37], context[38] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = arg_end->next;
    res = refalrts::splice_evar( res, context[39], context[40] );
    res = refalrts::splice_evar( res, context[27], context[28] );
    res = refalrts::splice_evar( res, context[37], context[38] );
    refalrts::splice_to_freelist_open( trash_prev, res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence();

  // ( e.idx ) ( e.idx ) ( e.idx ) t.idx ( e.idx ) ( e.idx ) ( e.idx ) ( e.idx ) e.idx
  // </0 & DoOpenEChain_check/4 (/7 e.eCurrentForward#1/5 )/8 (/11 e.eNames#1/9 )/12 (/15 e.ePrefix#1/13 )/16 t.tContName#1/17 (/21 e.eCheckFunction#1/19 )/22 (/25 e.eCheckFunctionArg#1/23 )/26 (/29 e.eGeneratedFunctions#1/27 )/30 (/33 e.eTemplateSet#1/31 )/34 e.eOther#1/2 >/1
  // closed e.eCurrentForward#1 as range 5
  // closed e.eNames#1 as range 9
  // closed e.ePrefix#1 as range 13
  // closed e.eCheckFunction#1 as range 19
  // closed e.eCheckFunctionArg#1 as range 23
  // closed e.eGeneratedFunctions#1 as range 27
  // closed e.eTemplateSet#1 as range 31
  // closed e.eOther#1 as range 2
  //DEBUG: t.tContName#1: 17
  //DEBUG: e.eCurrentForward#1: 5
  //DEBUG: e.eNames#1: 9
  //DEBUG: e.ePrefix#1: 13
  //DEBUG: e.eCheckFunction#1: 19
  //DEBUG: e.eCheckFunctionArg#1: 23
  //DEBUG: e.eGeneratedFunctions#1: 27
  //DEBUG: e.eTemplateSet#1: 31
  //DEBUG: e.eOther#1: 2

  refalrts::reset_allocator();
  //TRASH: {REMOVED TILE} e.eOther#1/2 {REMOVED TILE}
  //RESULT: Tile{ [[ AsIs: </0 Reuse: & DoOpenEChain_cont/4 AsIs: (/7 AsIs: e.eCurrentForward#1/5 AsIs: )/8 AsIs: (/11 AsIs: e.eNames#1/9 AsIs: )/12 AsIs: (/15 AsIs: e.ePrefix#1/13 AsIs: )/16 AsIs: t.tContName#1/17 AsIs: (/21 AsIs: e.eCheckFunction#1/19 AsIs: )/22 AsIs: (/25 AsIs: e.eCheckFunctionArg#1/23 AsIs: )/26 AsIs: (/29 AsIs: e.eGeneratedFunctions#1/27 AsIs: )/30 AsIs: (/33 AsIs: e.eTemplateSet#1/31 AsIs: )/34 } Tile{ AsIs: >/1 ]] }
  refalrts::update_name( context[4], ref_DoOpenEChainu_cont.ref.function );
  refalrts::push_stack( context[1] );
  refalrts::push_stack( context[0] );
  refalrts::link_brackets( context[33], context[34] );
  refalrts::link_brackets( context[29], context[30] );
  refalrts::link_brackets( context[25], context[26] );
  refalrts::link_brackets( context[21], context[22] );
  refalrts::link_brackets( context[15], context[16] );
  refalrts::link_brackets( context[11], context[12] );
  refalrts::link_brackets( context[7], context[8] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[1];
  refalrts::splice_to_freelist_open( context[34], res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_DoOpenEChainu_check("DoOpenEChain_check", 786251477U, 1176157594U, func_DoOpenEChainu_check);

static refalrts::FnResult func_DoOpenEChainu_cont(refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  refalrts::this_is_generated_function();
  // issue here memory for vars with 48 elems
  refalrts::Iter context[48];
  refalrts::zeros( context, 48 );
  // </0 & DoOpenEChain_cont/4 (/7 e.eCurrentForward#1/5 )/8 (/11 e.eNames#1/9 )/12 (/15 e.ePrefix#1/13 )/16 t.tContName#1/17 (/21 e.eCheckFunction#1/19 )/22 (/25 e.eCheckFunctionArg#1/23 )/26 (/29 e.eGeneratedFunctions#1/27 )/30 (/33 e.eTemplateSet#1/31 )/34 e.eTemplateSets#1/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  context[5] = 0;
  context[6] = 0;
  context[7] = refalrts::brackets_left( context[5], context[6], context[2], context[3] );
  if( ! context[7] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[7], context[8]);
  context[9] = 0;
  context[10] = 0;
  context[11] = refalrts::brackets_left( context[9], context[10], context[2], context[3] );
  if( ! context[11] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[11], context[12]);
  context[13] = 0;
  context[14] = 0;
  context[15] = refalrts::brackets_left( context[13], context[14], context[2], context[3] );
  if( ! context[15] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[15], context[16]);
  // closed e.eCurrentForward#1 as range 5
  // closed e.eNames#1 as range 9
  // closed e.ePrefix#1 as range 13
  context[18] = refalrts::tvar_left( context[17], context[2], context[3] );
  if( ! context[18] )
    return refalrts::cRecognitionImpossible;
  context[19] = 0;
  context[20] = 0;
  context[21] = refalrts::brackets_left( context[19], context[20], context[2], context[3] );
  if( ! context[21] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[21], context[22]);
  context[23] = 0;
  context[24] = 0;
  context[25] = refalrts::brackets_left( context[23], context[24], context[2], context[3] );
  if( ! context[25] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[25], context[26]);
  context[27] = 0;
  context[28] = 0;
  context[29] = refalrts::brackets_left( context[27], context[28], context[2], context[3] );
  if( ! context[29] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[29], context[30]);
  context[31] = 0;
  context[32] = 0;
  context[33] = refalrts::brackets_left( context[31], context[32], context[2], context[3] );
  if( ! context[33] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[33], context[34]);
  // closed e.eCheckFunction#1 as range 19
  // closed e.eCheckFunctionArg#1 as range 23
  // closed e.eGeneratedFunctions#1 as range 27
  // closed e.eTemplateSet#1 as range 31
  // closed e.eTemplateSets#1 as range 2
  //DEBUG: e.eCurrentForward#1: 5
  //DEBUG: e.eNames#1: 9
  //DEBUG: e.ePrefix#1: 13
  //DEBUG: t.tContName#1: 17
  //DEBUG: e.eCheckFunction#1: 19
  //DEBUG: e.eCheckFunctionArg#1: 23
  //DEBUG: e.eGeneratedFunctions#1: 27
  //DEBUG: e.eTemplateSet#1: 31
  //DEBUG: e.eTemplateSets#1: 2

  refalrts::reset_allocator();
  //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ AsIs: </0 Reuse: & DoOpenEChain_check0/4 AsIs: (/7 AsIs: e.eCurrentForward#1/5 AsIs: )/8 AsIs: (/11 AsIs: e.eNames#1/9 AsIs: )/12 AsIs: (/15 AsIs: e.ePrefix#1/13 AsIs: )/16 AsIs: t.tContName#1/17 AsIs: (/21 AsIs: e.eCheckFunction#1/19 AsIs: )/22 AsIs: (/25 AsIs: e.eCheckFunctionArg#1/23 AsIs: )/26 AsIs: (/29 AsIs: e.eGeneratedFunctions#1/27 AsIs: )/30 AsIs: (/33 AsIs: e.eTemplateSet#1/31 AsIs: )/34 } (/35 Tile{ AsIs: e.eTemplateSets#1/2 } )/36 </37 & NewName/38 (/39 e.eNames#1/9/40 )/42 e.ePrefix#1/13/43"_forward"/45 >/47 Tile{ AsIs: >/1 ]] }
  if( ! refalrts::alloc_open_bracket( context[35] ) )
    return refalrts::cNoMemory;
  if( ! refalrts::alloc_close_bracket( context[36] ) )
    return refalrts::cNoMemory;
  if( ! refalrts::alloc_open_call( context[37] ) )
    return refalrts::cNoMemory;
  if( ! refalrts::alloc_name( context[38], ref_NewName.ref.function ) )
    return refalrts::cNoMemory;
  if( ! refalrts::alloc_open_bracket( context[39] ) )
    return refalrts::cNoMemory;
  if (! refalrts::copy_evar(context[40], context[41], context[9], context[10]))
    return refalrts::cNoMemory;
  if( ! refalrts::alloc_close_bracket( context[42] ) )
    return refalrts::cNoMemory;
  if (! refalrts::copy_evar(context[43], context[44], context[13], context[14]))
    return refalrts::cNoMemory;
  if( ! refalrts::alloc_chars( context[45], context[46], "_forward", 8 ) )
    return refalrts::cNoMemory;
  if( ! refalrts::alloc_close_call( context[47] ) )
    return refalrts::cNoMemory;
  refalrts::update_name( context[4], ref_DoOpenEChainu_check0.ref.function );
  refalrts::push_stack( context[1] );
  refalrts::push_stack( context[0] );
  refalrts::push_stack( context[47] );
  refalrts::push_stack( context[37] );
  refalrts::link_brackets( context[39], context[42] );
  refalrts::link_brackets( context[35], context[36] );
  refalrts::link_brackets( context[33], context[34] );
  refalrts::link_brackets( context[29], context[30] );
  refalrts::link_brackets( context[25], context[26] );
  refalrts::link_brackets( context[21], context[22] );
  refalrts::link_brackets( context[15], context[16] );
  refalrts::link_brackets( context[11], context[12] );
  refalrts::link_brackets( context[7], context[8] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[1];
  res = refalrts::splice_evar( res, context[36], context[47] );
  res = refalrts::splice_evar( res, context[2], context[3] );
  res = refalrts::splice_evar( res, context[35], context[35] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_DoOpenEChainu_cont("DoOpenEChain_cont", 786251477U, 1176157594U, func_DoOpenEChainu_cont);

static refalrts::FnResult func_DoOpenEChainu_check0(refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  refalrts::this_is_generated_function();
  // issue here memory for vars with 74 elems
  refalrts::Iter context[74];
  refalrts::zeros( context, 74 );
  // </0 & DoOpenEChain_check0/4 (/7 e.eCurrentForward#1/5 )/8 (/11 e.eNames#1/9 )/12 (/15 e.ePrefix#1/13 )/16 t.tContName#1/17 (/21 e.eCheckFunction#1/19 )/22 (/25 e.eCheckFunctionArg#1/23 )/26 (/29 e.eGeneratedFunctions#1/27 )/30 (/33 e.eTemplateSet#1/31 )/34 (/37 e.eTemplateSets#1/35 )/38 (/41 e.eNames1#1/39 )/42 e.eNextForward#1/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  context[5] = 0;
  context[6] = 0;
  context[7] = refalrts::brackets_left( context[5], context[6], context[2], context[3] );
  if( ! context[7] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[7], context[8]);
  context[9] = 0;
  context[10] = 0;
  context[11] = refalrts::brackets_left( context[9], context[10], context[2], context[3] );
  if( ! context[11] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[11], context[12]);
  context[13] = 0;
  context[14] = 0;
  context[15] = refalrts::brackets_left( context[13], context[14], context[2], context[3] );
  if( ! context[15] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[15], context[16]);
  // closed e.eCurrentForward#1 as range 5
  // closed e.eNames#1 as range 9
  // closed e.ePrefix#1 as range 13
  context[18] = refalrts::tvar_left( context[17], context[2], context[3] );
  if( ! context[18] )
    return refalrts::cRecognitionImpossible;
  context[19] = 0;
  context[20] = 0;
  context[21] = refalrts::brackets_left( context[19], context[20], context[2], context[3] );
  if( ! context[21] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[21], context[22]);
  context[23] = 0;
  context[24] = 0;
  context[25] = refalrts::brackets_left( context[23], context[24], context[2], context[3] );
  if( ! context[25] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[25], context[26]);
  context[27] = 0;
  context[28] = 0;
  context[29] = refalrts::brackets_left( context[27], context[28], context[2], context[3] );
  if( ! context[29] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[29], context[30]);
  context[31] = 0;
  context[32] = 0;
  context[33] = refalrts::brackets_left( context[31], context[32], context[2], context[3] );
  if( ! context[33] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[33], context[34]);
  context[35] = 0;
  context[36] = 0;
  context[37] = refalrts::brackets_left( context[35], context[36], context[2], context[3] );
  if( ! context[37] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[37], context[38]);
  context[39] = 0;
  context[40] = 0;
  context[41] = refalrts::brackets_left( context[39], context[40], context[2], context[3] );
  if( ! context[41] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[41], context[42]);
  // closed e.eCheckFunction#1 as range 19
  // closed e.eCheckFunctionArg#1 as range 23
  // closed e.eGeneratedFunctions#1 as range 27
  // closed e.eTemplateSet#1 as range 31
  // closed e.eTemplateSets#1 as range 35
  // closed e.eNames1#1 as range 39
  // closed e.eNextForward#1 as range 2
  //DEBUG: e.eCurrentForward#1: 5
  //DEBUG: e.eNames#1: 9
  //DEBUG: e.ePrefix#1: 13
  //DEBUG: t.tContName#1: 17
  //DEBUG: e.eCheckFunction#1: 19
  //DEBUG: e.eCheckFunctionArg#1: 23
  //DEBUG: e.eGeneratedFunctions#1: 27
  //DEBUG: e.eTemplateSet#1: 31
  //DEBUG: e.eTemplateSets#1: 35
  //DEBUG: e.eNames1#1: 39
  //DEBUG: e.eNextForward#1: 2

  refalrts::reset_allocator();
  //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ AsIs: </0 Reuse: & DoOpenEChain_check1/4 AsIs: (/7 AsIs: e.eCurrentForward#1/5 AsIs: )/8 AsIs: (/11 AsIs: e.eNames#1/9 AsIs: )/12 AsIs: (/15 AsIs: e.ePrefix#1/13 AsIs: )/16 AsIs: t.tContName#1/17 AsIs: (/21 AsIs: e.eCheckFunction#1/19 AsIs: )/22 AsIs: (/25 AsIs: e.eCheckFunctionArg#1/23 AsIs: )/26 AsIs: (/29 AsIs: e.eGeneratedFunctions#1/27 AsIs: )/30 AsIs: (/33 AsIs: e.eTemplateSet#1/31 AsIs: )/34 AsIs: (/37 AsIs: e.eTemplateSets#1/35 AsIs: )/38 AsIs: (/41 AsIs: e.eNames1#1/39 AsIs: )/42 } (/43 e.eNextForward#1/2/44 )/46 </47 & MakeOpenE-ForwardNext/48 (/49 e.eCurrentForward#1/5/50 )/52 (/53 e.eNames1#1/39/54 )/56 (/57 e.ePrefix#1/13/58 )/60 (/61 Tile{ AsIs: e.eNextForward#1/2 } )/62 (/63 e.eCheckFunction#1/19/64 )/66 (/67 e.eCheckFunctionArg#1/23/68 )/70 e.eTemplateSet#1/31/71 >/73 Tile{ AsIs: >/1 ]] }
  if( ! refalrts::alloc_open_bracket( context[43] ) )
    return refalrts::cNoMemory;
  if (! refalrts::copy_evar(context[44], context[45], context[2], context[3]))
    return refalrts::cNoMemory;
  if( ! refalrts::alloc_close_bracket( context[46] ) )
    return refalrts::cNoMemory;
  if( ! refalrts::alloc_open_call( context[47] ) )
    return refalrts::cNoMemory;
  if( ! refalrts::alloc_name( context[48], ref_MakeOpenEm_ForwardNext.ref.function ) )
    return refalrts::cNoMemory;
  if( ! refalrts::alloc_open_bracket( context[49] ) )
    return refalrts::cNoMemory;
  if (! refalrts::copy_evar(context[50], context[51], context[5], context[6]))
    return refalrts::cNoMemory;
  if( ! refalrts::alloc_close_bracket( context[52] ) )
    return refalrts::cNoMemory;
  if( ! refalrts::alloc_open_bracket( context[53] ) )
    return refalrts::cNoMemory;
  if (! refalrts::copy_evar(context[54], context[55], context[39], context[40]))
    return refalrts::cNoMemory;
  if( ! refalrts::alloc_close_bracket( context[56] ) )
    return refalrts::cNoMemory;
  if( ! refalrts::alloc_open_bracket( context[57] ) )
    return refalrts::cNoMemory;
  if (! refalrts::copy_evar(context[58], context[59], context[13], context[14]))
    return refalrts::cNoMemory;
  if( ! refalrts::alloc_close_bracket( context[60] ) )
    return refalrts::cNoMemory;
  if( ! refalrts::alloc_open_bracket( context[61] ) )
    return refalrts::cNoMemory;
  if( ! refalrts::alloc_close_bracket( context[62] ) )
    return refalrts::cNoMemory;
  if( ! refalrts::alloc_open_bracket( context[63] ) )
    return refalrts::cNoMemory;
  if (! refalrts::copy_evar(context[64], context[65], context[19], context[20]))
    return refalrts::cNoMemory;
  if( ! refalrts::alloc_close_bracket( context[66] ) )
    return refalrts::cNoMemory;
  if( ! refalrts::alloc_open_bracket( context[67] ) )
    return refalrts::cNoMemory;
  if (! refalrts::copy_evar(context[68], context[69], context[23], context[24]))
    return refalrts::cNoMemory;
  if( ! refalrts::alloc_close_bracket( context[70] ) )
    return refalrts::cNoMemory;
  if (! refalrts::copy_evar(context[71], context[72], context[31], context[32]))
    return refalrts::cNoMemory;
  if( ! refalrts::alloc_close_call( context[73] ) )
    return refalrts::cNoMemory;
  refalrts::update_name( context[4], ref_DoOpenEChainu_check1.ref.function );
  refalrts::push_stack( context[1] );
  refalrts::push_stack( context[0] );
  refalrts::push_stack( context[73] );
  refalrts::push_stack( context[47] );
  refalrts::link_brackets( context[67], context[70] );
  refalrts::link_brackets( context[63], context[66] );
  refalrts::link_brackets( context[61], context[62] );
  refalrts::link_brackets( context[57], context[60] );
  refalrts::link_brackets( context[53], context[56] );
  refalrts::link_brackets( context[49], context[52] );
  refalrts::link_brackets( context[43], context[46] );
  refalrts::link_brackets( context[41], context[42] );
  refalrts::link_brackets( context[37], context[38] );
  refalrts::link_brackets( context[33], context[34] );
  refalrts::link_brackets( context[29], context[30] );
  refalrts::link_brackets( context[25], context[26] );
  refalrts::link_brackets( context[21], context[22] );
  refalrts::link_brackets( context[15], context[16] );
  refalrts::link_brackets( context[11], context[12] );
  refalrts::link_brackets( context[7], context[8] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[1];
  res = refalrts::splice_evar( res, context[62], context[73] );
  res = refalrts::splice_evar( res, context[2], context[3] );
  res = refalrts::splice_evar( res, context[43], context[61] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_DoOpenEChainu_check0("DoOpenEChain_check0", 786251477U, 1176157594U, func_DoOpenEChainu_check0);

static refalrts::FnResult func_DoOpenEChainu_check1(refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  refalrts::this_is_generated_function();
  // issue here memory for vars with 51 elems
  refalrts::Iter context[51];
  refalrts::zeros( context, 51 );
  // </0 & DoOpenEChain_check1/4 (/7 e.eCurrentForward#1/5 )/8 (/11 e.eNames#1/9 )/12 (/15 e.ePrefix#1/13 )/16 t.tContName#1/17 (/21 e.eCheckFunction#1/19 )/22 (/25 e.eCheckFunctionArg#1/23 )/26 (/29 e.eGeneratedFunctions#1/27 )/30 (/33 e.eTemplateSet#1/31 )/34 (/37 e.eTemplateSets#1/35 )/38 (/41 e.eNames1#1/39 )/42 (/45 e.eNextForward#1/43 )/46 (/49 e.eRefilledNames#1/47 )/50 e.eNewFunctions#1/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  context[5] = 0;
  context[6] = 0;
  context[7] = refalrts::brackets_left( context[5], context[6], context[2], context[3] );
  if( ! context[7] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[7], context[8]);
  context[9] = 0;
  context[10] = 0;
  context[11] = refalrts::brackets_left( context[9], context[10], context[2], context[3] );
  if( ! context[11] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[11], context[12]);
  context[13] = 0;
  context[14] = 0;
  context[15] = refalrts::brackets_left( context[13], context[14], context[2], context[3] );
  if( ! context[15] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[15], context[16]);
  // closed e.eCurrentForward#1 as range 5
  // closed e.eNames#1 as range 9
  // closed e.ePrefix#1 as range 13
  context[18] = refalrts::tvar_left( context[17], context[2], context[3] );
  if( ! context[18] )
    return refalrts::cRecognitionImpossible;
  context[19] = 0;
  context[20] = 0;
  context[21] = refalrts::brackets_left( context[19], context[20], context[2], context[3] );
  if( ! context[21] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[21], context[22]);
  context[23] = 0;
  context[24] = 0;
  context[25] = refalrts::brackets_left( context[23], context[24], context[2], context[3] );
  if( ! context[25] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[25], context[26]);
  context[27] = 0;
  context[28] = 0;
  context[29] = refalrts::brackets_left( context[27], context[28], context[2], context[3] );
  if( ! context[29] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[29], context[30]);
  context[31] = 0;
  context[32] = 0;
  context[33] = refalrts::brackets_left( context[31], context[32], context[2], context[3] );
  if( ! context[33] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[33], context[34]);
  context[35] = 0;
  context[36] = 0;
  context[37] = refalrts::brackets_left( context[35], context[36], context[2], context[3] );
  if( ! context[37] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[37], context[38]);
  context[39] = 0;
  context[40] = 0;
  context[41] = refalrts::brackets_left( context[39], context[40], context[2], context[3] );
  if( ! context[41] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[41], context[42]);
  context[43] = 0;
  context[44] = 0;
  context[45] = refalrts::brackets_left( context[43], context[44], context[2], context[3] );
  if( ! context[45] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[45], context[46]);
  context[47] = 0;
  context[48] = 0;
  context[49] = refalrts::brackets_left( context[47], context[48], context[2], context[3] );
  if( ! context[49] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[49], context[50]);
  // closed e.eCheckFunction#1 as range 19
  // closed e.eCheckFunctionArg#1 as range 23
  // closed e.eGeneratedFunctions#1 as range 27
  // closed e.eTemplateSet#1 as range 31
  // closed e.eTemplateSets#1 as range 35
  // closed e.eNames1#1 as range 39
  // closed e.eNextForward#1 as range 43
  // closed e.eRefilledNames#1 as range 47
  // closed e.eNewFunctions#1 as range 2
  //DEBUG: e.eCurrentForward#1: 5
  //DEBUG: e.eNames#1: 9
  //DEBUG: e.ePrefix#1: 13
  //DEBUG: t.tContName#1: 17
  //DEBUG: e.eCheckFunction#1: 19
  //DEBUG: e.eCheckFunctionArg#1: 23
  //DEBUG: e.eGeneratedFunctions#1: 27
  //DEBUG: e.eTemplateSet#1: 31
  //DEBUG: e.eTemplateSets#1: 35
  //DEBUG: e.eNames1#1: 39
  //DEBUG: e.eNextForward#1: 43
  //DEBUG: e.eRefilledNames#1: 47
  //DEBUG: e.eNewFunctions#1: 2

  refalrts::reset_allocator();
  //TRASH: {REMOVED TILE} & DoOpenEChain_check1/4 (/7 e.eCurrentForward#1/5 )/8 (/11 e.eNames#1/9 {REMOVED TILE} {REMOVED TILE} )/30 (/33 e.eTemplateSet#1/31 )/34 (/37 {REMOVED TILE} {REMOVED TILE} (/41 e.eNames1#1/39 {REMOVED TILE} {REMOVED TILE} )/50 {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ AsIs: </0 } Tile{ HalfReuse: & DoOpenEChain/42 AsIs: (/45 AsIs: e.eNextForward#1/43 AsIs: )/46 AsIs: (/49 } Tile{ AsIs: e.eRefilledNames#1/47 } Tile{ AsIs: )/12 AsIs: (/15 AsIs: e.ePrefix#1/13 AsIs: )/16 AsIs: t.tContName#1/17 AsIs: (/21 AsIs: e.eCheckFunction#1/19 AsIs: )/22 AsIs: (/25 AsIs: e.eCheckFunctionArg#1/23 AsIs: )/26 AsIs: (/29 } Tile{ AsIs: e.eGeneratedFunctions#1/27 } Tile{ AsIs: e.eNewFunctions#1/2 } Tile{ AsIs: )/38 } Tile{ AsIs: e.eTemplateSets#1/35 } Tile{ AsIs: >/1 ]] }
  refalrts::reinit_name( context[42], ref_DoOpenEChain.ref.function );
  refalrts::push_stack( context[1] );
  refalrts::push_stack( context[0] );
  refalrts::link_brackets( context[29], context[38] );
  refalrts::link_brackets( context[25], context[26] );
  refalrts::link_brackets( context[21], context[22] );
  refalrts::link_brackets( context[15], context[16] );
  refalrts::link_brackets( context[49], context[12] );
  refalrts::link_brackets( context[45], context[46] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[1];
  res = refalrts::splice_evar( res, context[35], context[36] );
  res = refalrts::splice_evar( res, context[38], context[38] );
  res = refalrts::splice_evar( res, context[2], context[3] );
  res = refalrts::splice_evar( res, context[27], context[28] );
  res = refalrts::splice_evar( res, context[12], context[29] );
  res = refalrts::splice_evar( res, context[47], context[48] );
  res = refalrts::splice_evar( res, context[42], context[49] );
  refalrts::splice_to_freelist_open( context[0], res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_DoOpenEChainu_check1("DoOpenEChain_check1", 786251477U, 1176157594U, func_DoOpenEChainu_check1);

static refalrts::FnResult func_MakeOpenEm_ForwardNext(refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  refalrts::this_is_generated_function();
  // issue here memory for vars with 70 elems
  refalrts::Iter context[70];
  refalrts::zeros( context, 70 );
  // </0 & MakeOpenE-ForwardNext/4 (/7 e.eCurrentForwardName#1/5 )/8 (/11 e.eNames#1/9 )/12 (/15 e.ePrefix#1/13 )/16 t.tContName#1/57 (/55 e.eCheckFunction#1/53 )/56 (/51 e.eCheckFunctionArg#1/49 )/52 (/47 e.eT1#1/45 )/48 (/43 e.eT2#1/41 )/44 (/39 e.eT3#1/37 )/40 (/35 e.eT4#1/33 )/36 (/31 e.eT5#1/29 )/32 (/27 e.eT5-sub#1/25 )/28 (/23 e.eT6#1/21 )/24 (/19 e.eT7#1/17 )/20 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  context[5] = 0;
  context[6] = 0;
  context[7] = refalrts::brackets_left( context[5], context[6], context[2], context[3] );
  if( ! context[7] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[7], context[8]);
  context[9] = 0;
  context[10] = 0;
  context[11] = refalrts::brackets_left( context[9], context[10], context[2], context[3] );
  if( ! context[11] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[11], context[12]);
  context[13] = 0;
  context[14] = 0;
  context[15] = refalrts::brackets_left( context[13], context[14], context[2], context[3] );
  if( ! context[15] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[15], context[16]);
  context[17] = 0;
  context[18] = 0;
  context[19] = refalrts::brackets_right( context[17], context[18], context[2], context[3] );
  if( ! context[19] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[19], context[20]);
  context[21] = 0;
  context[22] = 0;
  context[23] = refalrts::brackets_right( context[21], context[22], context[2], context[3] );
  if( ! context[23] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[23], context[24]);
  context[25] = 0;
  context[26] = 0;
  context[27] = refalrts::brackets_right( context[25], context[26], context[2], context[3] );
  if( ! context[27] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[27], context[28]);
  context[29] = 0;
  context[30] = 0;
  context[31] = refalrts::brackets_right( context[29], context[30], context[2], context[3] );
  if( ! context[31] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[31], context[32]);
  context[33] = 0;
  context[34] = 0;
  context[35] = refalrts::brackets_right( context[33], context[34], context[2], context[3] );
  if( ! context[35] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[35], context[36]);
  context[37] = 0;
  context[38] = 0;
  context[39] = refalrts::brackets_right( context[37], context[38], context[2], context[3] );
  if( ! context[39] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[39], context[40]);
  context[41] = 0;
  context[42] = 0;
  context[43] = refalrts::brackets_right( context[41], context[42], context[2], context[3] );
  if( ! context[43] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[43], context[44]);
  context[45] = 0;
  context[46] = 0;
  context[47] = refalrts::brackets_right( context[45], context[46], context[2], context[3] );
  if( ! context[47] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[47], context[48]);
  context[49] = 0;
  context[50] = 0;
  context[51] = refalrts::brackets_right( context[49], context[50], context[2], context[3] );
  if( ! context[51] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[51], context[52]);
  context[53] = 0;
  context[54] = 0;
  context[55] = refalrts::brackets_right( context[53], context[54], context[2], context[3] );
  if( ! context[55] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[55], context[56]);
  // closed e.eCurrentForwardName#1 as range 5
  // closed e.eNames#1 as range 9
  // closed e.ePrefix#1 as range 13
  // closed e.eCheckFunction#1 as range 53
  // closed e.eCheckFunctionArg#1 as range 49
  // closed e.eT1#1 as range 45
  // closed e.eT2#1 as range 41
  // closed e.eT3#1 as range 37
  // closed e.eT4#1 as range 33
  // closed e.eT5#1 as range 29
  // closed e.eT5-sub#1 as range 25
  // closed e.eT6#1 as range 21
  // closed e.eT7#1 as range 17
  context[58] = refalrts::tvar_left( context[57], context[2], context[3] );
  if( ! context[58] )
    return refalrts::cRecognitionImpossible;
  if( ! refalrts::empty_seq( context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  //DEBUG: e.eCurrentForwardName#1: 5
  //DEBUG: e.eNames#1: 9
  //DEBUG: e.ePrefix#1: 13
  //DEBUG: e.eCheckFunction#1: 53
  //DEBUG: e.eCheckFunctionArg#1: 49
  //DEBUG: e.eT1#1: 45
  //DEBUG: e.eT2#1: 41
  //DEBUG: e.eT3#1: 37
  //DEBUG: e.eT4#1: 33
  //DEBUG: e.eT5#1: 29
  //DEBUG: e.eT5-sub#1: 25
  //DEBUG: e.eT6#1: 21
  //DEBUG: e.eT7#1: 17
  //DEBUG: t.tContName#1: 57

  refalrts::reset_allocator();
  //TRASH: {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ AsIs: </0 Reuse: & MakeOpenE-ForwardNext_check/4 AsIs: (/7 AsIs: e.eCurrentForwardName#1/5 AsIs: )/8 AsIs: (/11 AsIs: e.eNames#1/9 AsIs: )/12 AsIs: (/15 AsIs: e.ePrefix#1/13 AsIs: )/16 AsIs: t.tContName#1/57 AsIs: (/55 AsIs: e.eCheckFunction#1/53 AsIs: )/56 AsIs: (/51 AsIs: e.eCheckFunctionArg#1/49 AsIs: )/52 AsIs: (/47 AsIs: e.eT1#1/45 AsIs: )/48 AsIs: (/43 AsIs: e.eT2#1/41 AsIs: )/44 AsIs: (/39 AsIs: e.eT3#1/37 AsIs: )/40 AsIs: (/35 AsIs: e.eT4#1/33 AsIs: )/36 AsIs: (/31 AsIs: e.eT5#1/29 AsIs: )/32 AsIs: (/27 AsIs: e.eT5-sub#1/25 AsIs: )/28 AsIs: (/23 AsIs: e.eT6#1/21 AsIs: )/24 AsIs: (/19 AsIs: e.eT7#1/17 AsIs: )/20 HalfReuse: </1 } & NewName/59 (/60 e.eNames#1/9/61 )/63 e.ePrefix#1/13/64"_next"/66 >/68 >/69 Tile{ ]] }
  if( ! refalrts::alloc_name( context[59], ref_NewName.ref.function ) )
    return refalrts::cNoMemory;
  if( ! refalrts::alloc_open_bracket( context[60] ) )
    return refalrts::cNoMemory;
  if (! refalrts::copy_evar(context[61], context[62], context[9], context[10]))
    return refalrts::cNoMemory;
  if( ! refalrts::alloc_close_bracket( context[63] ) )
    return refalrts::cNoMemory;
  if (! refalrts::copy_evar(context[64], context[65], context[13], context[14]))
    return refalrts::cNoMemory;
  if( ! refalrts::alloc_chars( context[66], context[67], "_next", 5 ) )
    return refalrts::cNoMemory;
  if( ! refalrts::alloc_close_call( context[68] ) )
    return refalrts::cNoMemory;
  if( ! refalrts::alloc_close_call( context[69] ) )
    return refalrts::cNoMemory;
  refalrts::update_name( context[4], ref_MakeOpenEm_ForwardNextu_check.ref.function );
  refalrts::reinit_open_call( context[1] );
  refalrts::push_stack( context[69] );
  refalrts::push_stack( context[0] );
  refalrts::push_stack( context[68] );
  refalrts::push_stack( context[1] );
  refalrts::link_brackets( context[60], context[63] );
  refalrts::link_brackets( context[19], context[20] );
  refalrts::link_brackets( context[23], context[24] );
  refalrts::link_brackets( context[27], context[28] );
  refalrts::link_brackets( context[31], context[32] );
  refalrts::link_brackets( context[35], context[36] );
  refalrts::link_brackets( context[39], context[40] );
  refalrts::link_brackets( context[43], context[44] );
  refalrts::link_brackets( context[47], context[48] );
  refalrts::link_brackets( context[51], context[52] );
  refalrts::link_brackets( context[55], context[56] );
  refalrts::link_brackets( context[15], context[16] );
  refalrts::link_brackets( context[11], context[12] );
  refalrts::link_brackets( context[7], context[8] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = arg_end->next;
  res = refalrts::splice_evar( res, context[59], context[69] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_MakeOpenEm_ForwardNext("MakeOpenE-ForwardNext", 786251477U, 1176157594U, func_MakeOpenEm_ForwardNext);

static refalrts::FnResult func_MakeOpenEm_ForwardNextu_check(refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  refalrts::this_is_generated_function();
  // issue here memory for vars with 91 elems
  refalrts::Iter context[91];
  refalrts::zeros( context, 91 );
  // </0 & MakeOpenE-ForwardNext_check/4 (/7 e.eCurrentForwardName#1/5 )/8 (/11 e.eNames#1/9 )/12 (/15 e.ePrefix#1/13 )/16 t.tContName#1/17 (/21 e.eCheckFunction#1/19 )/22 (/25 e.eCheckFunctionArg#1/23 )/26 (/29 e.eT1#1/27 )/30 (/33 e.eT2#1/31 )/34 (/37 e.eT3#1/35 )/38 (/41 e.eT4#1/39 )/42 (/45 e.eT5#1/43 )/46 (/49 e.eT5-sub#1/47 )/50 (/53 e.eT6#1/51 )/54 (/57 e.eT7#1/55 )/58 (/61 e.eRefilledNames#1/59 )/62 e.eNextName#1/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  context[5] = 0;
  context[6] = 0;
  context[7] = refalrts::brackets_left( context[5], context[6], context[2], context[3] );
  if( ! context[7] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[7], context[8]);
  context[9] = 0;
  context[10] = 0;
  context[11] = refalrts::brackets_left( context[9], context[10], context[2], context[3] );
  if( ! context[11] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[11], context[12]);
  context[13] = 0;
  context[14] = 0;
  context[15] = refalrts::brackets_left( context[13], context[14], context[2], context[3] );
  if( ! context[15] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[15], context[16]);
  // closed e.eCurrentForwardName#1 as range 5
  // closed e.eNames#1 as range 9
  // closed e.ePrefix#1 as range 13
  context[18] = refalrts::tvar_left( context[17], context[2], context[3] );
  if( ! context[18] )
    return refalrts::cRecognitionImpossible;
  context[19] = 0;
  context[20] = 0;
  context[21] = refalrts::brackets_left( context[19], context[20], context[2], context[3] );
  if( ! context[21] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[21], context[22]);
  context[23] = 0;
  context[24] = 0;
  context[25] = refalrts::brackets_left( context[23], context[24], context[2], context[3] );
  if( ! context[25] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[25], context[26]);
  context[27] = 0;
  context[28] = 0;
  context[29] = refalrts::brackets_left( context[27], context[28], context[2], context[3] );
  if( ! context[29] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[29], context[30]);
  context[31] = 0;
  context[32] = 0;
  context[33] = refalrts::brackets_left( context[31], context[32], context[2], context[3] );
  if( ! context[33] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[33], context[34]);
  context[35] = 0;
  context[36] = 0;
  context[37] = refalrts::brackets_left( context[35], context[36], context[2], context[3] );
  if( ! context[37] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[37], context[38]);
  context[39] = 0;
  context[40] = 0;
  context[41] = refalrts::brackets_left( context[39], context[40], context[2], context[3] );
  if( ! context[41] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[41], context[42]);
  context[43] = 0;
  context[44] = 0;
  context[45] = refalrts::brackets_left( context[43], context[44], context[2], context[3] );
  if( ! context[45] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[45], context[46]);
  context[47] = 0;
  context[48] = 0;
  context[49] = refalrts::brackets_left( context[47], context[48], context[2], context[3] );
  if( ! context[49] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[49], context[50]);
  context[51] = 0;
  context[52] = 0;
  context[53] = refalrts::brackets_left( context[51], context[52], context[2], context[3] );
  if( ! context[53] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[53], context[54]);
  context[55] = 0;
  context[56] = 0;
  context[57] = refalrts::brackets_left( context[55], context[56], context[2], context[3] );
  if( ! context[57] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[57], context[58]);
  context[59] = 0;
  context[60] = 0;
  context[61] = refalrts::brackets_left( context[59], context[60], context[2], context[3] );
  if( ! context[61] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[61], context[62]);
  // closed e.eCheckFunction#1 as range 19
  // closed e.eCheckFunctionArg#1 as range 23
  // closed e.eT1#1 as range 27
  // closed e.eT2#1 as range 31
  // closed e.eT3#1 as range 35
  // closed e.eT4#1 as range 39
  // closed e.eT5#1 as range 43
  // closed e.eT5-sub#1 as range 47
  // closed e.eT6#1 as range 51
  // closed e.eT7#1 as range 55
  // closed e.eRefilledNames#1 as range 59
  // closed e.eNextName#1 as range 2
  //DEBUG: e.eCurrentForwardName#1: 5
  //DEBUG: e.eNames#1: 9
  //DEBUG: e.ePrefix#1: 13
  //DEBUG: t.tContName#1: 17
  //DEBUG: e.eCheckFunction#1: 19
  //DEBUG: e.eCheckFunctionArg#1: 23
  //DEBUG: e.eT1#1: 27
  //DEBUG: e.eT2#1: 31
  //DEBUG: e.eT3#1: 35
  //DEBUG: e.eT4#1: 39
  //DEBUG: e.eT5#1: 43
  //DEBUG: e.eT5-sub#1: 47
  //DEBUG: e.eT6#1: 51
  //DEBUG: e.eT7#1: 55
  //DEBUG: e.eRefilledNames#1: 59
  //DEBUG: e.eNextName#1: 2

  refalrts::reset_allocator();
  //TRASH: {REMOVED TILE} {REMOVED TILE} e.eNames#1/9 {REMOVED TILE} e.ePrefix#1/13 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ } (/63 Tile{ AsIs: e.eRefilledNames#1/59 } Tile{ HalfReuse: )/0 HalfReuse: (/4 AsIs: (/7 AsIs: e.eCurrentForwardName#1/5 AsIs: )/8 AsIs: (/11 } Tile{ AsIs: (/29 AsIs: e.eT1#1/27 AsIs: )/30 HalfReuse: # RETURN/33 } (/64 (/65 # Call/66 # NO-POS/67 Tile{ HalfReuse: (/62 AsIs: e.eNextName#1/2 HalfReuse: )/1 } Tile{ AsIs: e.eT2#1/31 } Tile{ AsIs: )/26 } Tile{ AsIs: )/46 } Tile{ AsIs: )/34 } </68 Tile{ HalfReuse: & MakeContinuationSentence/16 AsIs: t.tContName#1/17 } Tile{ AsIs: (/37 AsIs: e.eT3#1/35 AsIs: )/38 AsIs: (/41 AsIs: e.eT4#1/39 AsIs: )/42 HalfReuse: >/45 } Tile{ AsIs: )/12 AsIs: (/15 } (/69 e.eNextName#1/2/70 )/72 (/73 (/74 Tile{ AsIs: e.eT5#1/43 } )/75 # RETURN/76 (/77 (/78 # Call/79 # NO-POS/80 Tile{ AsIs: (/21 AsIs: e.eCheckFunction#1/19 AsIs: )/22 HalfReuse: </25 } & Substitute/81 Tile{ AsIs: e.eCheckFunctionArg#1/23 } Tile{ AsIs: (/49 AsIs: e.eT5-sub#1/47 AsIs: )/50 } >/82 )/83 )/84 )/85 </86 & MakeContinuationSentence/87 t.tContName#1/17/88 Tile{ AsIs: (/53 AsIs: e.eT6#1/51 AsIs: )/54 AsIs: (/57 AsIs: e.eT7#1/55 AsIs: )/58 HalfReuse: >/61 } )/90 Tile{ ]] }
  if( ! refalrts::alloc_open_bracket( context[63] ) )
    return refalrts::cNoMemory;
  if( ! refalrts::alloc_open_bracket( context[64] ) )
    return refalrts::cNoMemory;
  if( ! refalrts::alloc_open_bracket( context[65] ) )
    return refalrts::cNoMemory;
  if( ! refalrts::alloc_ident( context[66], ident_Call ) )
    return refalrts::cNoMemory;
  if( ! refalrts::alloc_ident( context[67], ident_NOm_POS ) )
    return refalrts::cNoMemory;
  if( ! refalrts::alloc_open_call( context[68] ) )
    return refalrts::cNoMemory;
  if( ! refalrts::alloc_open_bracket( context[69] ) )
    return refalrts::cNoMemory;
  if (! refalrts::copy_evar(context[70], context[71], context[2], context[3]))
    return refalrts::cNoMemory;
  if( ! refalrts::alloc_close_bracket( context[72] ) )
    return refalrts::cNoMemory;
  if( ! refalrts::alloc_open_bracket( context[73] ) )
    return refalrts::cNoMemory;
  if( ! refalrts::alloc_open_bracket( context[74] ) )
    return refalrts::cNoMemory;
  if( ! refalrts::alloc_close_bracket( context[75] ) )
    return refalrts::cNoMemory;
  if( ! refalrts::alloc_ident( context[76], ident_RETURN ) )
    return refalrts::cNoMemory;
  if( ! refalrts::alloc_open_bracket( context[77] ) )
    return refalrts::cNoMemory;
  if( ! refalrts::alloc_open_bracket( context[78] ) )
    return refalrts::cNoMemory;
  if( ! refalrts::alloc_ident( context[79], ident_Call ) )
    return refalrts::cNoMemory;
  if( ! refalrts::alloc_ident( context[80], ident_NOm_POS ) )
    return refalrts::cNoMemory;
  if( ! refalrts::alloc_name( context[81], ref_Substitute.ref.function ) )
    return refalrts::cNoMemory;
  if( ! refalrts::alloc_close_call( context[82] ) )
    return refalrts::cNoMemory;
  if( ! refalrts::alloc_close_bracket( context[83] ) )
    return refalrts::cNoMemory;
  if( ! refalrts::alloc_close_bracket( context[84] ) )
    return refalrts::cNoMemory;
  if( ! refalrts::alloc_close_bracket( context[85] ) )
    return refalrts::cNoMemory;
  if( ! refalrts::alloc_open_call( context[86] ) )
    return refalrts::cNoMemory;
  if( ! refalrts::alloc_name( context[87], ref_MakeContinuationSentence.ref.function ) )
    return refalrts::cNoMemory;
  if (! refalrts::copy_evar(context[88], context[89], context[17], context[18]))
    return refalrts::cNoMemory;
  if( ! refalrts::alloc_close_bracket( context[90] ) )
    return refalrts::cNoMemory;
  refalrts::reinit_close_bracket( context[0] );
  refalrts::reinit_open_bracket( context[4] );
  refalrts::reinit_ident( context[33], ident_RETURN );
  refalrts::reinit_open_bracket( context[62] );
  refalrts::reinit_close_bracket( context[1] );
  refalrts::reinit_name( context[16], ref_MakeContinuationSentence.ref.function );
  refalrts::reinit_close_call( context[45] );
  refalrts::reinit_open_call( context[25] );
  refalrts::reinit_close_call( context[61] );
  refalrts::link_brackets( context[15], context[90] );
  refalrts::push_stack( context[61] );
  refalrts::push_stack( context[86] );
  refalrts::link_brackets( context[57], context[58] );
  refalrts::link_brackets( context[53], context[54] );
  refalrts::link_brackets( context[73], context[85] );
  refalrts::link_brackets( context[77], context[84] );
  refalrts::link_brackets( context[78], context[83] );
  refalrts::push_stack( context[82] );
  refalrts::push_stack( context[25] );
  refalrts::link_brackets( context[49], context[50] );
  refalrts::link_brackets( context[21], context[22] );
  refalrts::link_brackets( context[74], context[75] );
  refalrts::link_brackets( context[69], context[72] );
  refalrts::link_brackets( context[4], context[12] );
  refalrts::push_stack( context[45] );
  refalrts::push_stack( context[68] );
  refalrts::link_brackets( context[41], context[42] );
  refalrts::link_brackets( context[37], context[38] );
  refalrts::link_brackets( context[11], context[34] );
  refalrts::link_brackets( context[64], context[46] );
  refalrts::link_brackets( context[65], context[26] );
  refalrts::link_brackets( context[62], context[1] );
  refalrts::link_brackets( context[29], context[30] );
  refalrts::link_brackets( context[7], context[8] );
  refalrts::link_brackets( context[63], context[0] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = arg_end->next;
  res = refalrts::splice_evar( res, context[90], context[90] );
  res = refalrts::splice_evar( res, context[53], context[61] );
  res = refalrts::splice_evar( res, context[82], context[89] );
  res = refalrts::splice_evar( res, context[49], context[50] );
  res = refalrts::splice_evar( res, context[23], context[24] );
  res = refalrts::splice_evar( res, context[81], context[81] );
  res = refalrts::splice_evar( res, context[21], context[25] );
  res = refalrts::splice_evar( res, context[75], context[80] );
  res = refalrts::splice_evar( res, context[43], context[44] );
  res = refalrts::splice_evar( res, context[69], context[74] );
  res = refalrts::splice_evar( res, context[12], context[15] );
  res = refalrts::splice_evar( res, context[37], context[45] );
  res = refalrts::splice_evar( res, context[16], context[18] );
  res = refalrts::splice_evar( res, context[68], context[68] );
  res = refalrts::splice_evar( res, context[34], context[34] );
  res = refalrts::splice_evar( res, context[46], context[46] );
  res = refalrts::splice_evar( res, context[26], context[26] );
  res = refalrts::splice_evar( res, context[31], context[32] );
  res = refalrts::splice_evar( res, context[62], context[1] );
  res = refalrts::splice_evar( res, context[64], context[67] );
  res = refalrts::splice_evar( res, context[29], context[33] );
  res = refalrts::splice_evar( res, context[0], context[11] );
  res = refalrts::splice_evar( res, context[59], context[60] );
  res = refalrts::splice_evar( res, context[63], context[63] );
  refalrts::splice_to_freelist_open( trash_prev, res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_MakeOpenEm_ForwardNextu_check("MakeOpenE-ForwardNext_check", 786251477U, 1176157594U, func_MakeOpenEm_ForwardNextu_check);

static refalrts::FnResult func_ExtractVariables(refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  refalrts::this_is_generated_function();
  // issue here memory for vars with 8 elems
  refalrts::Iter context[8];
  refalrts::zeros( context, 8 );
  // </0 & ExtractVariables/4 e.eSentences#1/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.eSentences#1 as range 2
  //DEBUG: e.eSentences#1: 2

  refalrts::reset_allocator();
  //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ } </5 & R5-Unique/6 Tile{ AsIs: </0 Reuse: & ExtractVariables-Sentences/4 AsIs: e.eSentences#1/2 AsIs: >/1 } >/7 Tile{ ]] }
  if( ! refalrts::alloc_open_call( context[5] ) )
    return refalrts::cNoMemory;
  if( ! refalrts::alloc_name( context[6], ref_R5m_Unique.ref.function ) )
    return refalrts::cNoMemory;
  if( ! refalrts::alloc_close_call( context[7] ) )
    return refalrts::cNoMemory;
  refalrts::update_name( context[4], ref_ExtractVariablesm_Sentences.ref.function );
  refalrts::push_stack( context[7] );
  refalrts::push_stack( context[5] );
  refalrts::push_stack( context[1] );
  refalrts::push_stack( context[0] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = arg_end->next;
  res = refalrts::splice_evar( res, context[7], context[7] );
  res = refalrts::splice_evar( res, context[0], context[1] );
  res = refalrts::splice_evar( res, context[5], context[6] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_ExtractVariables("ExtractVariables", 786251477U, 1176157594U, func_ExtractVariables);

static refalrts::FnResult func_ExtractVariablesm_Sentences(refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  refalrts::this_is_generated_function();
  // issue here memory for vars with 17 elems
  refalrts::Iter context[17];
  refalrts::zeros( context, 17 );
  //FAST GEN: e.$
  //GLOBAL GEN: e.$
  // </0 & ExtractVariables-Sentences/4 e.idx#0/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.idx#0 as range 2
  do {
    // ( ( e.idx ) e.idx ) e.idx
    // </0 & ExtractVariables-Sentences/4 (/7 (/11 e.ePattern#1/9 )/12 e.eTail#1/5 )/8 e.eSentences#1/2 >/1
    context[15] = context[2];
    context[16] = context[3];
    context[5] = 0;
    context[6] = 0;
    context[7] = refalrts::brackets_left( context[5], context[6], context[15], context[16] );
    if( ! context[7] )
      continue;
    refalrts::bracket_pointers(context[7], context[8]);
    context[9] = 0;
    context[10] = 0;
    context[11] = refalrts::brackets_left( context[9], context[10], context[5], context[6] );
    if( ! context[11] )
      continue;
    refalrts::bracket_pointers(context[11], context[12]);
    // closed e.ePattern#1 as range 9
    // closed e.eTail#1 as range 5
    // closed e.eSentences#1 as range 15(2)
    //DEBUG: e.ePattern#1: 9
    //DEBUG: e.eTail#1: 5
    //DEBUG: e.eSentences#1: 2

    refalrts::reset_allocator();
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 Reuse: & ExtractVariables-Expr/4 } Tile{ AsIs: e.ePattern#1/9 } >/13 Tile{ HalfReuse: </7 HalfReuse: & ExtractVariables-Tail/11 } Tile{ AsIs: e.eTail#1/5 } Tile{ HalfReuse: >/12 } </14 Tile{ HalfReuse: & ExtractVariables-Sentences/8 AsIs: e.eSentences#1/15(2) AsIs: >/1 ]] }
    if( ! refalrts::alloc_close_call( context[13] ) )
      return refalrts::cNoMemory;
    if( ! refalrts::alloc_open_call( context[14] ) )
      return refalrts::cNoMemory;
    refalrts::update_name( context[4], ref_ExtractVariablesm_Expr.ref.function );
    refalrts::reinit_open_call( context[7] );
    refalrts::reinit_name( context[11], ref_ExtractVariablesm_Tail.ref.function );
    refalrts::reinit_close_call( context[12] );
    refalrts::reinit_name( context[8], ref_ExtractVariablesm_Sentences.ref.function );
    refalrts::push_stack( context[1] );
    refalrts::push_stack( context[14] );
    refalrts::push_stack( context[12] );
    refalrts::push_stack( context[7] );
    refalrts::push_stack( context[13] );
    refalrts::push_stack( context[0] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[8];
    res = refalrts::splice_evar( res, context[14], context[14] );
    res = refalrts::splice_evar( res, context[12], context[12] );
    res = refalrts::splice_evar( res, context[5], context[6] );
    res = refalrts::splice_evar( res, context[7], context[11] );
    res = refalrts::splice_evar( res, context[13], context[13] );
    res = refalrts::splice_evar( res, context[9], context[10] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence();

  //
  // </0 & ExtractVariables-Sentences/4 >/1
  if( ! refalrts::empty_seq( context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;

  refalrts::reset_allocator();
  //TRASH: {REMOVED TILE} </0 & ExtractVariables-Sentences/4 >/1 {REMOVED TILE}
  //RESULT: Tile{ [[ } Tile{ ]] }
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = arg_end->next;
  refalrts::splice_to_freelist_open( trash_prev, res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_ExtractVariablesm_Sentences("ExtractVariables-Sentences", 786251477U, 1176157594U, func_ExtractVariablesm_Sentences);

static refalrts::FnResult func_ExtractVariablesm_Tail(refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  refalrts::this_is_generated_function();
  // issue here memory for vars with 20 elems
  refalrts::Iter context[20];
  refalrts::zeros( context, 20 );
  //FAST GEN: t.$ e.$
  //GLOBAL GEN: t.$ e.$
  // </0 & ExtractVariables-Tail/4 t.idx#0/5 e.idxV#0/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  context[6] = refalrts::tvar_left( context[5], context[2], context[3] );
  if( ! context[6] )
    return refalrts::cRecognitionImpossible;
  // closed e.idxV#0 as range 2
  do {
    // ( # Condition ( e.idx ) ( e.idx ) ) e.idx
    // </0 & ExtractVariables-Tail/4 (/5 # Condition/9 (/12 e.eResult#1/10 )/13 (/16 e.ePattern#1/14 )/17 )/6 e.eTail#1/2 >/1
    context[7] = 0;
    context[8] = 0;
    if( ! refalrts::brackets_term( context[7], context[8], context[5] ) )
      continue;
    context[9] = refalrts::ident_left(  ident_Condition, context[7], context[8] );
    if( ! context[9] )
      continue;
    context[10] = 0;
    context[11] = 0;
    context[12] = refalrts::brackets_left( context[10], context[11], context[7], context[8] );
    if( ! context[12] )
      continue;
    refalrts::bracket_pointers(context[12], context[13]);
    context[14] = 0;
    context[15] = 0;
    context[16] = refalrts::brackets_left( context[14], context[15], context[7], context[8] );
    if( ! context[16] )
      continue;
    refalrts::bracket_pointers(context[16], context[17]);
    if( ! refalrts::empty_seq( context[7], context[8] ) )
      continue;
    // closed e.eResult#1 as range 10
    // closed e.ePattern#1 as range 14
    // closed e.eTail#1 as range 2
    //DEBUG: e.eResult#1: 10
    //DEBUG: e.ePattern#1: 14
    //DEBUG: e.eTail#1: 2

    refalrts::reset_allocator();
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} )/13 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 Reuse: & ExtractVariables-Expr/4 } Tile{ AsIs: e.eResult#1/10 } Tile{ HalfReuse: >/5 HalfReuse: </9 HalfReuse: & ExtractVariables-Expr/12 } Tile{ AsIs: e.ePattern#1/14 } Tile{ HalfReuse: >/16 } Tile{ HalfReuse: </17 HalfReuse: & ExtractVariables-Tail/6 AsIs: e.eTail#1/2 AsIs: >/1 ]] }
    refalrts::update_name( context[4], ref_ExtractVariablesm_Expr.ref.function );
    refalrts::reinit_close_call( context[5] );
    refalrts::reinit_open_call( context[9] );
    refalrts::reinit_name( context[12], ref_ExtractVariablesm_Expr.ref.function );
    refalrts::reinit_close_call( context[16] );
    refalrts::reinit_open_call( context[17] );
    refalrts::reinit_name( context[6], ref_ExtractVariablesm_Tail.ref.function );
    refalrts::push_stack( context[1] );
    refalrts::push_stack( context[17] );
    refalrts::push_stack( context[16] );
    refalrts::push_stack( context[9] );
    refalrts::push_stack( context[5] );
    refalrts::push_stack( context[0] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[17];
    res = refalrts::splice_evar( res, context[16], context[16] );
    res = refalrts::splice_evar( res, context[14], context[15] );
    res = refalrts::splice_evar( res, context[5], context[12] );
    res = refalrts::splice_evar( res, context[10], context[11] );
    refalrts::splice_to_freelist_open( context[4], res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence();

  do {
    // # RETURN ( e.idx )
    // </0 & ExtractVariables-Tail/4 # RETURN/5 (/9 e.eResult#1/7 )/10 >/1
    if( ! refalrts::ident_term(  ident_RETURN, context[5] ) )
      continue;
    context[18] = context[2];
    context[19] = context[3];
    context[7] = 0;
    context[8] = 0;
    context[9] = refalrts::brackets_left( context[7], context[8], context[18], context[19] );
    if( ! context[9] )
      continue;
    refalrts::bracket_pointers(context[9], context[10]);
    if( ! refalrts::empty_seq( context[18], context[19] ) )
      continue;
    // closed e.eResult#1 as range 7
    //DEBUG: e.eResult#1: 7

    refalrts::reset_allocator();
    //TRASH: {REMOVED TILE} # RETURN/5 (/9 {REMOVED TILE} )/10 {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 Reuse: & ExtractVariables-Expr/4 } Tile{ AsIs: e.eResult#1/7 } Tile{ AsIs: >/1 ]] }
    refalrts::update_name( context[4], ref_ExtractVariablesm_Expr.ref.function );
    refalrts::push_stack( context[1] );
    refalrts::push_stack( context[0] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    res = refalrts::splice_evar( res, context[7], context[8] );
    refalrts::splice_to_freelist_open( context[4], res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence();

  // # CALL-BLOCK ( e.idx ) e.idx
  // </0 & ExtractVariables-Tail/4 # CALL-BLOCK/5 (/9 e.eResult#1/7 )/10 e.eSentences#1/2 >/1
  if( ! refalrts::ident_term(  ident_CALLm_BLOCK, context[5] ) )
    return refalrts::cRecognitionImpossible;
  context[7] = 0;
  context[8] = 0;
  context[9] = refalrts::brackets_left( context[7], context[8], context[2], context[3] );
  if( ! context[9] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[9], context[10]);
  // closed e.eResult#1 as range 7
  // closed e.eSentences#1 as range 2
  //DEBUG: e.eResult#1: 7
  //DEBUG: e.eSentences#1: 2

  refalrts::reset_allocator();
  //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ AsIs: </0 Reuse: & ExtractVariables-Expr/4 } Tile{ AsIs: e.eResult#1/7 } Tile{ HalfReuse: >/5 HalfReuse: </9 } Tile{ HalfReuse: & ExtractVariables-Sentences/10 AsIs: e.eSentences#1/2 AsIs: >/1 ]] }
  refalrts::update_name( context[4], ref_ExtractVariablesm_Expr.ref.function );
  refalrts::reinit_close_call( context[5] );
  refalrts::reinit_open_call( context[9] );
  refalrts::reinit_name( context[10], ref_ExtractVariablesm_Sentences.ref.function );
  refalrts::push_stack( context[1] );
  refalrts::push_stack( context[9] );
  refalrts::push_stack( context[5] );
  refalrts::push_stack( context[0] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[10];
  res = refalrts::splice_evar( res, context[5], context[9] );
  res = refalrts::splice_evar( res, context[7], context[8] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_ExtractVariablesm_Tail("ExtractVariables-Tail", 786251477U, 1176157594U, func_ExtractVariablesm_Tail);

static refalrts::FnResult func_ExtractVariablesm_Expr(refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  refalrts::this_is_generated_function();
  // issue here memory for vars with 18 elems
  refalrts::Iter context[18];
  refalrts::zeros( context, 18 );
  //FAST GEN: e.$
  //GLOBAL GEN: e.$
  // </0 & ExtractVariables-Expr/4 e.idx#0/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.idx#0 as range 2
  do {
    // ( # Variable t.idx s.idx e.idx ) e.idx
    // </0 & ExtractVariables-Expr/4 (/7 # Variable/9 t.tSrcPos#1/10 s.sVarType#1/12 e.eIndex#1/5 )/8 e.eTerms#1/2 >/1
    context[16] = context[2];
    context[17] = context[3];
    context[5] = 0;
    context[6] = 0;
    context[7] = refalrts::brackets_left( context[5], context[6], context[16], context[17] );
    if( ! context[7] )
      continue;
    refalrts::bracket_pointers(context[7], context[8]);
    context[9] = refalrts::ident_left(  ident_Variable, context[5], context[6] );
    if( ! context[9] )
      continue;
    // closed e.eTerms#1 as range 16(2)
    context[11] = refalrts::tvar_left( context[10], context[5], context[6] );
    if( ! context[11] )
      continue;
    if( ! refalrts::svar_left( context[12], context[5], context[6] ) )
      continue;
    // closed e.eIndex#1 as range 5
    //DEBUG: e.eTerms#1: 2
    //DEBUG: t.tSrcPos#1: 10
    //DEBUG: s.sVarType#1: 12
    //DEBUG: e.eIndex#1: 5

    refalrts::reset_allocator();
    //TRASH: {REMOVED TILE} {REMOVED TILE} t.tSrcPos#1/10 s.sVarType#1/12 {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ HalfReuse: (/0 HalfReuse: s.sVarType1 #12/4 } Tile{ AsIs: e.eIndex#1/5 } Tile{ HalfReuse: )/7 HalfReuse: </9 } Tile{ HalfReuse: & ExtractVariables-Expr/8 AsIs: e.eTerms#1/16(2) AsIs: >/1 ]] }
    refalrts::reinit_open_bracket( context[0] );
    refalrts::reinit_svar( context[4], context[12] );
    refalrts::reinit_close_bracket( context[7] );
    refalrts::reinit_open_call( context[9] );
    refalrts::reinit_name( context[8], ref_ExtractVariablesm_Expr.ref.function );
    refalrts::push_stack( context[1] );
    refalrts::push_stack( context[9] );
    refalrts::link_brackets( context[0], context[7] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[8];
    res = refalrts::splice_evar( res, context[7], context[9] );
    res = refalrts::splice_evar( res, context[5], context[6] );
    refalrts::splice_to_freelist_open( context[4], res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence();

  do {
    // ( # Brackets e.idx ) e.idx
    // </0 & ExtractVariables-Expr/4 (/7 # Brackets/9 e.eInner#1/5 )/8 e.eTerms#1/2 >/1
    context[16] = context[2];
    context[17] = context[3];
    context[5] = 0;
    context[6] = 0;
    context[7] = refalrts::brackets_left( context[5], context[6], context[16], context[17] );
    if( ! context[7] )
      continue;
    refalrts::bracket_pointers(context[7], context[8]);
    context[9] = refalrts::ident_left(  ident_Brackets, context[5], context[6] );
    if( ! context[9] )
      continue;
    // closed e.eInner#1 as range 5
    // closed e.eTerms#1 as range 16(2)
    //DEBUG: e.eInner#1: 5
    //DEBUG: e.eTerms#1: 2

    refalrts::reset_allocator();
    //TRASH: {REMOVED TILE} (/7 # Brackets/9 {REMOVED TILE} )/8 {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 AsIs: & ExtractVariables-Expr/4 } Tile{ AsIs: e.eInner#1/5 } Tile{ AsIs: e.eTerms#1/16(2) } Tile{ AsIs: >/1 ]] }
    refalrts::push_stack( context[1] );
    refalrts::push_stack( context[0] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    res = refalrts::splice_evar( res, context[16], context[17] );
    res = refalrts::splice_evar( res, context[5], context[6] );
    refalrts::splice_to_freelist_open( context[4], res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence();

  do {
    // ( # Call t.idx ( e.idx ) e.idx ) e.idx
    // </0 & ExtractVariables-Expr/4 (/7 # Call/9 t.tSrcPos#1/10 (/14 e.eFunction#1/12 )/15 e.eInner#1/5 )/8 e.eTerms#1/2 >/1
    context[16] = context[2];
    context[17] = context[3];
    context[5] = 0;
    context[6] = 0;
    context[7] = refalrts::brackets_left( context[5], context[6], context[16], context[17] );
    if( ! context[7] )
      continue;
    refalrts::bracket_pointers(context[7], context[8]);
    context[9] = refalrts::ident_left(  ident_Call, context[5], context[6] );
    if( ! context[9] )
      continue;
    // closed e.eTerms#1 as range 16(2)
    context[11] = refalrts::tvar_left( context[10], context[5], context[6] );
    if( ! context[11] )
      continue;
    context[12] = 0;
    context[13] = 0;
    context[14] = refalrts::brackets_left( context[12], context[13], context[5], context[6] );
    if( ! context[14] )
      continue;
    refalrts::bracket_pointers(context[14], context[15]);
    // closed e.eFunction#1 as range 12
    // closed e.eInner#1 as range 5
    //DEBUG: e.eTerms#1: 2
    //DEBUG: t.tSrcPos#1: 10
    //DEBUG: e.eFunction#1: 12
    //DEBUG: e.eInner#1: 5

    refalrts::reset_allocator();
    //TRASH: {REMOVED TILE} (/7 # Call/9 t.tSrcPos#1/10 (/14 e.eFunction#1/12 )/15 {REMOVED TILE} )/8 {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 AsIs: & ExtractVariables-Expr/4 } Tile{ AsIs: e.eInner#1/5 } Tile{ AsIs: e.eTerms#1/16(2) } Tile{ AsIs: >/1 ]] }
    refalrts::push_stack( context[1] );
    refalrts::push_stack( context[0] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    res = refalrts::splice_evar( res, context[16], context[17] );
    res = refalrts::splice_evar( res, context[5], context[6] );
    refalrts::splice_to_freelist_open( context[4], res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence();

  do {
    // t.idx e.idx
    // </0 & ExtractVariables-Expr/4 t.tOther#1/5 e.eTerms#1/2 >/1
    context[16] = context[2];
    context[17] = context[3];
    context[6] = refalrts::tvar_left( context[5], context[16], context[17] );
    if( ! context[6] )
      continue;
    // closed e.eTerms#1 as range 16(2)
    //DEBUG: t.tOther#1: 5
    //DEBUG: e.eTerms#1: 2

    refalrts::reset_allocator();
    //TRASH: {REMOVED TILE} t.tOther#1/5 {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 AsIs: & ExtractVariables-Expr/4 } Tile{ AsIs: e.eTerms#1/16(2) } Tile{ AsIs: >/1 ]] }
    refalrts::push_stack( context[1] );
    refalrts::push_stack( context[0] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    res = refalrts::splice_evar( res, context[16], context[17] );
    refalrts::splice_to_freelist_open( context[4], res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence();

  //
  // </0 & ExtractVariables-Expr/4 >/1
  if( ! refalrts::empty_seq( context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;

  refalrts::reset_allocator();
  //TRASH: {REMOVED TILE} </0 & ExtractVariables-Expr/4 >/1 {REMOVED TILE}
  //RESULT: Tile{ [[ } Tile{ ]] }
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = arg_end->next;
  refalrts::splice_to_freelist_open( trash_prev, res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_ExtractVariablesm_Expr("ExtractVariables-Expr", 786251477U, 1176157594U, func_ExtractVariablesm_Expr);

static refalrts::FnResult func_NewName(refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  refalrts::this_is_generated_function();
  // issue here memory for vars with 22 elems
  refalrts::Iter context[22];
  refalrts::zeros( context, 22 );
  //FAST GEN: ( e.$ ) e.$
  //GLOBAL GEN: ( e.$ ) e.$
  // </0 & NewName/4 (/7 e.idxB#0/5 )/8 e.idxT#0/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  context[5] = 0;
  context[6] = 0;
  context[7] = refalrts::brackets_left( context[5], context[6], context[2], context[3] );
  if( ! context[7] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[7], context[8]);
  // closed e.idxB#0 as range 5
  // closed e.idxT#0 as range 2
  do {
    // ( e.idx ) e.idx
    // </0 & NewName/4 (/7 e.eNames-B#1/9 (/13 e.ePrefix#1/15 )/14 e.eNames-E#1/5 )/8 e.ePrefix#1/2 >/1
    // closed e.ePrefix#1 as range 2
    context[18] = context[5];
    context[19] = context[6];
    context[9] = 0;
    context[10] = 0;
    refalrts::start_e_loop();
    do {
      context[20] = context[18];
      context[21] = context[19];
      context[11] = 0;
      context[12] = 0;
      context[13] = refalrts::brackets_left( context[11], context[12], context[20], context[21] );
      if( ! context[13] )
        continue;
      refalrts::bracket_pointers(context[13], context[14]);
      if( ! refalrts::repeated_evar_left( context[15], context[16], context[2], context[3], context[11], context[12] ) )
        continue;
      if( ! refalrts::empty_seq( context[11], context[12] ) )
        continue;
      // closed e.eNames-E#1 as range 20(5)
      //DEBUG: e.ePrefix#1: 2
      //DEBUG: e.eNames-B#1: 9
      //DEBUG: e.eNames-E#1: 5

      refalrts::reset_allocator();
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 Reuse: & DoNewName/4 AsIs: (/7 } Tile{ AsIs: (/13 AsIs: e.ePrefix#1/15 AsIs: )/14 } Tile{ AsIs: e.eNames-B#1/9 } Tile{ AsIs: e.eNames-E#1/20(5) } Tile{ AsIs: )/8 AsIs: e.ePrefix#1/2 HalfReuse: 0/1 } >/17 Tile{ ]] }
      if( ! refalrts::alloc_close_call( context[17] ) )
        return refalrts::cNoMemory;
      refalrts::update_name( context[4], ref_DoNewName.ref.function );
      refalrts::reinit_number( context[1], 0UL );
      refalrts::push_stack( context[17] );
      refalrts::push_stack( context[0] );
      refalrts::link_brackets( context[7], context[8] );
      refalrts::link_brackets( context[13], context[14] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = arg_end->next;
      res = refalrts::splice_evar( res, context[17], context[17] );
      res = refalrts::splice_evar( res, context[8], context[1] );
      res = refalrts::splice_evar( res, context[20], context[21] );
      res = refalrts::splice_evar( res, context[9], context[10] );
      res = refalrts::splice_evar( res, context[13], context[14] );
      refalrts::use( res );
      return refalrts::cSuccess;
    } while ( refalrts::open_evar_advance( context[9], context[10], context[18], context[19] ) );
  } while ( 0 );
  refalrts::stop_sentence();

  // ( e.idx ) e.idx
  // </0 & NewName/4 (/7 e.eNames#1/5 )/8 e.ePrefix#1/2 >/1
  // closed e.eNames#1 as range 5
  // closed e.ePrefix#1 as range 2
  //DEBUG: e.eNames#1: 5
  //DEBUG: e.ePrefix#1: 2

  refalrts::reset_allocator();
  //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} >/1 {REMOVED TILE}
  //RESULT: Tile{ [[ HalfReuse: (/0 HalfReuse: (/4 } Tile{ AsIs: e.ePrefix#1/2 } Tile{ HalfReuse: )/7 AsIs: e.eNames#1/5 AsIs: )/8 } e.ePrefix#1/2/9 Tile{ ]] }
  if (! refalrts::copy_evar(context[9], context[10], context[2], context[3]))
    return refalrts::cNoMemory;
  refalrts::reinit_open_bracket( context[0] );
  refalrts::reinit_open_bracket( context[4] );
  refalrts::reinit_close_bracket( context[7] );
  refalrts::link_brackets( context[0], context[8] );
  refalrts::link_brackets( context[4], context[7] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = arg_end->next;
  res = refalrts::splice_evar( res, context[9], context[10] );
  res = refalrts::splice_evar( res, context[7], context[8] );
  res = refalrts::splice_evar( res, context[2], context[3] );
  refalrts::splice_to_freelist_open( context[4], res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_NewName("NewName", 786251477U, 1176157594U, func_NewName);

static refalrts::FnResult func_DoNewName(refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  refalrts::this_is_generated_function();
  // issue here memory for vars with 18 elems
  refalrts::Iter context[18];
  refalrts::zeros( context, 18 );
  // </0 & DoNewName/4 (/7 e.eNames#1/5 )/8 e.ePrefix#1/2 s.sSufNo#1/9 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  context[5] = 0;
  context[6] = 0;
  context[7] = refalrts::brackets_left( context[5], context[6], context[2], context[3] );
  if( ! context[7] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[7], context[8]);
  // closed e.eNames#1 as range 5
  if( ! refalrts::svar_right( context[9], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  // closed e.ePrefix#1 as range 2
  //DEBUG: e.eNames#1: 5
  //DEBUG: s.sSufNo#1: 9
  //DEBUG: e.ePrefix#1: 2

  refalrts::reset_allocator();
  //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ AsIs: </0 Reuse: & DoNewName_check/4 AsIs: (/7 AsIs: e.eNames#1/5 AsIs: )/8 } (/10 e.ePrefix#1/2/11 )/13 s.sSufNo#1/9/14 Tile{ AsIs: e.ePrefix#1/2 } </15 & Symb/16 Tile{ AsIs: s.sSufNo#1/9 AsIs: >/1 } >/17 Tile{ ]] }
  if( ! refalrts::alloc_open_bracket( context[10] ) )
    return refalrts::cNoMemory;
  if (! refalrts::copy_evar(context[11], context[12], context[2], context[3]))
    return refalrts::cNoMemory;
  if( ! refalrts::alloc_close_bracket( context[13] ) )
    return refalrts::cNoMemory;
  if (! refalrts::copy_stvar(context[14], context[9]))
    return refalrts::cNoMemory;
  if( ! refalrts::alloc_open_call( context[15] ) )
    return refalrts::cNoMemory;
  if( ! refalrts::alloc_name( context[16], ref_Symb.ref.function ) )
    return refalrts::cNoMemory;
  if( ! refalrts::alloc_close_call( context[17] ) )
    return refalrts::cNoMemory;
  refalrts::update_name( context[4], ref_DoNewNameu_check.ref.function );
  refalrts::push_stack( context[17] );
  refalrts::push_stack( context[0] );
  refalrts::push_stack( context[1] );
  refalrts::push_stack( context[15] );
  refalrts::link_brackets( context[10], context[13] );
  refalrts::link_brackets( context[7], context[8] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = arg_end->next;
  res = refalrts::splice_evar( res, context[17], context[17] );
  res = refalrts::splice_evar( res, context[9], context[1] );
  res = refalrts::splice_evar( res, context[15], context[16] );
  res = refalrts::splice_evar( res, context[2], context[3] );
  res = refalrts::splice_evar( res, context[10], context[14] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_DoNewName("DoNewName", 786251477U, 1176157594U, func_DoNewName);

static refalrts::FnResult func_DoNewNameu_check(refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  refalrts::this_is_generated_function();
  // issue here memory for vars with 18 elems
  refalrts::Iter context[18];
  refalrts::zeros( context, 18 );
  // </0 & DoNewName_check/4 (/7 e.eNames#1/5 )/8 (/11 e.ePrefix#1/9 )/12 s.sSufNo#1/13 e.eNewName#1/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  context[5] = 0;
  context[6] = 0;
  context[7] = refalrts::brackets_left( context[5], context[6], context[2], context[3] );
  if( ! context[7] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[7], context[8]);
  context[9] = 0;
  context[10] = 0;
  context[11] = refalrts::brackets_left( context[9], context[10], context[2], context[3] );
  if( ! context[11] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[11], context[12]);
  // closed e.eNames#1 as range 5
  // closed e.ePrefix#1 as range 9
  if( ! refalrts::svar_left( context[13], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  // closed e.eNewName#1 as range 2
  //DEBUG: e.eNames#1: 5
  //DEBUG: e.ePrefix#1: 9
  //DEBUG: s.sSufNo#1: 13
  //DEBUG: e.eNewName#1: 2

  refalrts::reset_allocator();
  //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ AsIs: </0 Reuse: & DoNewName0/4 AsIs: (/7 AsIs: e.eNames#1/5 AsIs: )/8 AsIs: (/11 AsIs: e.ePrefix#1/9 AsIs: )/12 AsIs: s.sSufNo#1/13 } (/14 Tile{ AsIs: e.eNewName#1/2 } )/15 e.eNames#1/5/16 Tile{ AsIs: >/1 ]] }
  if( ! refalrts::alloc_open_bracket( context[14] ) )
    return refalrts::cNoMemory;
  if( ! refalrts::alloc_close_bracket( context[15] ) )
    return refalrts::cNoMemory;
  if (! refalrts::copy_evar(context[16], context[17], context[5], context[6]))
    return refalrts::cNoMemory;
  refalrts::update_name( context[4], ref_DoNewName0.ref.function );
  refalrts::push_stack( context[1] );
  refalrts::push_stack( context[0] );
  refalrts::link_brackets( context[14], context[15] );
  refalrts::link_brackets( context[11], context[12] );
  refalrts::link_brackets( context[7], context[8] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[1];
  res = refalrts::splice_evar( res, context[16], context[17] );
  res = refalrts::splice_evar( res, context[15], context[15] );
  res = refalrts::splice_evar( res, context[2], context[3] );
  res = refalrts::splice_evar( res, context[14], context[14] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_DoNewNameu_check("DoNewName_check", 786251477U, 1176157594U, func_DoNewNameu_check);

static refalrts::FnResult func_DoNewName0(refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  refalrts::this_is_generated_function();
  // issue here memory for vars with 30 elems
  refalrts::Iter context[30];
  refalrts::zeros( context, 30 );
  //FAST GEN: ( e.$ ) ( e.$ ) s.$ ( e.$ ) e.$
  //GLOBAL GEN: ( e.$ ) ( e.$ ) s.$ ( e.$ ) e.$
  // </0 & DoNewName0/4 (/7 e.idxB#0/5 )/8 (/11 e.idxTB#0/9 )/12 s.idxTT#0/13 (/16 e.idxTTVB#0/14 )/17 e.idxTTVT#0/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  context[5] = 0;
  context[6] = 0;
  context[7] = refalrts::brackets_left( context[5], context[6], context[2], context[3] );
  if( ! context[7] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[7], context[8]);
  context[9] = 0;
  context[10] = 0;
  context[11] = refalrts::brackets_left( context[9], context[10], context[2], context[3] );
  if( ! context[11] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[11], context[12]);
  // closed e.idxB#0 as range 5
  // closed e.idxTB#0 as range 9
  if( ! refalrts::svar_left( context[13], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  context[14] = 0;
  context[15] = 0;
  context[16] = refalrts::brackets_left( context[14], context[15], context[2], context[3] );
  if( ! context[16] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[16], context[17]);
  // closed e.idxTTVB#0 as range 14
  // closed e.idxTTVT#0 as range 2
  do {
    // ( e.idx ) ( e.idx ) s.idx ( e.idx ) e.idx
    // </0 & DoNewName0/4 (/7 e.eNames#1/5 )/8 (/11 e.ePrefix#1/9 )/12 s.sSufNo#1/13 (/16 e.eNewName#1/14 )/17 e.eNames-B#1/18 (/22 e.eNewName#1/24 )/23 e.eNames-E#1/2 >/1
    // closed e.eNames#1 as range 5
    // closed e.ePrefix#1 as range 9
    // closed e.eNewName#1 as range 14
    context[26] = context[2];
    context[27] = context[3];
    context[18] = 0;
    context[19] = 0;
    refalrts::start_e_loop();
    do {
      context[28] = context[26];
      context[29] = context[27];
      context[20] = 0;
      context[21] = 0;
      context[22] = refalrts::brackets_left( context[20], context[21], context[28], context[29] );
      if( ! context[22] )
        continue;
      refalrts::bracket_pointers(context[22], context[23]);
      if( ! refalrts::repeated_evar_left( context[24], context[25], context[14], context[15], context[20], context[21] ) )
        continue;
      if( ! refalrts::empty_seq( context[20], context[21] ) )
        continue;
      // closed e.eNames-E#1 as range 28(2)
      //DEBUG: s.sSufNo#1: 13
      //DEBUG: e.eNames#1: 5
      //DEBUG: e.ePrefix#1: 9
      //DEBUG: e.eNewName#1: 14
      //DEBUG: e.eNames-B#1: 18
      //DEBUG: e.eNames-E#1: 2

      refalrts::reset_allocator();
      //TRASH: {REMOVED TILE} e.eNames#1/5 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} e.eNewName#1/24 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 Reuse: & DoNewName/4 AsIs: (/7 } Tile{ AsIs: (/16 AsIs: e.eNewName#1/14 AsIs: )/17 } Tile{ AsIs: e.eNames-B#1/18 } Tile{ AsIs: e.eNames-E#1/28(2) } Tile{ HalfReuse: )/11 AsIs: e.ePrefix#1/9 HalfReuse: </12 } Tile{ HalfReuse: & Add/22 } Tile{ AsIs: s.sSufNo#1/13 } Tile{ HalfReuse: 1/23 } Tile{ HalfReuse: >/8 } Tile{ AsIs: >/1 ]] }
      refalrts::update_name( context[4], ref_DoNewName.ref.function );
      refalrts::reinit_close_bracket( context[11] );
      refalrts::reinit_open_call( context[12] );
      refalrts::reinit_name( context[22], ref_Add.ref.function );
      refalrts::reinit_number( context[23], 1UL );
      refalrts::reinit_close_call( context[8] );
      refalrts::push_stack( context[1] );
      refalrts::push_stack( context[0] );
      refalrts::push_stack( context[8] );
      refalrts::push_stack( context[12] );
      refalrts::link_brackets( context[7], context[11] );
      refalrts::link_brackets( context[16], context[17] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[1];
      res = refalrts::splice_evar( res, context[8], context[8] );
      res = refalrts::splice_evar( res, context[23], context[23] );
      res = refalrts::splice_evar( res, context[13], context[13] );
      res = refalrts::splice_evar( res, context[22], context[22] );
      res = refalrts::splice_evar( res, context[11], context[12] );
      res = refalrts::splice_evar( res, context[28], context[29] );
      res = refalrts::splice_evar( res, context[18], context[19] );
      res = refalrts::splice_evar( res, context[16], context[17] );
      refalrts::splice_to_freelist_open( context[7], res );
      return refalrts::cSuccess;
    } while ( refalrts::open_evar_advance( context[18], context[19], context[26], context[27] ) );
  } while ( 0 );
  refalrts::stop_sentence();

  // ( e.idx ) ( e.idx ) s.idx ( e.idx ) e.idx
  // </0 & DoNewName0/4 (/7 e.eNames#1/5 )/8 (/11 e.ePrefix#1/9 )/12 s.sSufNo#1/13 (/16 e.eNewName#1/14 )/17 e.eNames#1/18 >/1
  // closed e.eNames#1 as range 5
  if( ! refalrts::repeated_evar_left( context[18], context[19], context[5], context[6], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  if( ! refalrts::empty_seq( context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  // closed e.ePrefix#1 as range 9
  // closed e.eNewName#1 as range 14
  //DEBUG: s.sSufNo#1: 13
  //DEBUG: e.eNames#1: 5
  //DEBUG: e.ePrefix#1: 9
  //DEBUG: e.eNewName#1: 14

  refalrts::reset_allocator();
  //TRASH: {REMOVED TILE} & DoNewName0/4 (/7 e.eNames#1/5 )/8 (/11 e.ePrefix#1/9 )/12 s.sSufNo#1/13 {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ HalfReuse: (/0 } Tile{ AsIs: (/16 AsIs: e.eNewName#1/14 AsIs: )/17 AsIs: e.eNames#1/18 HalfReuse: )/1 } e.eNewName#1/14/20 Tile{ ]] }
  if (! refalrts::copy_evar(context[20], context[21], context[14], context[15]))
    return refalrts::cNoMemory;
  refalrts::reinit_open_bracket( context[0] );
  refalrts::reinit_close_bracket( context[1] );
  refalrts::link_brackets( context[0], context[1] );
  refalrts::link_brackets( context[16], context[17] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = arg_end->next;
  res = refalrts::splice_evar( res, context[20], context[21] );
  res = refalrts::splice_evar( res, context[16], context[1] );
  refalrts::splice_to_freelist_open( context[0], res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_DoNewName0("DoNewName0", 786251477U, 1176157594U, func_DoNewName0);

static refalrts::FnResult func_Symbol(refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  refalrts::this_is_generated_function();
  // issue here memory for vars with 11 elems
  refalrts::Iter context[11];
  refalrts::zeros( context, 11 );
  //FAST GEN: t.$
  //GLOBAL GEN: t.$
  // </0 & Symbol/4 t.idx#0/5 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  context[6] = refalrts::tvar_left( context[5], context[2], context[3] );
  if( ! context[6] )
    return refalrts::cRecognitionImpossible;
  if( ! refalrts::empty_seq( context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  do {
    // ( # Compound e.idx )
    // </0 & Symbol/4 (/5 # Compound/9 e.eChars#1/7 )/6 >/1
    context[7] = 0;
    context[8] = 0;
    if( ! refalrts::brackets_term( context[7], context[8], context[5] ) )
      continue;
    context[9] = refalrts::ident_left(  ident_Compound, context[7], context[8] );
    if( ! context[9] )
      continue;
    // closed e.eChars#1 as range 7
    //DEBUG: e.eChars#1: 7

    refalrts::reset_allocator();
    //TRASH: {REMOVED TILE} </0 & Symbol/4 (/5 # Compound/9 e.eChars#1/7 )/6 {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ HalfReuse: # True/1 ]] }
    refalrts::reinit_ident( context[1], ident_True );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    refalrts::splice_to_freelist_open( trash_prev, res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence();

  do {
    // ( # Number s.idx )
    // </0 & Symbol/4 (/5 # Number/9 s.sNumber#1/10 )/6 >/1
    context[7] = 0;
    context[8] = 0;
    if( ! refalrts::brackets_term( context[7], context[8], context[5] ) )
      continue;
    context[9] = refalrts::ident_left(  ident_Number, context[7], context[8] );
    if( ! context[9] )
      continue;
    if( ! refalrts::svar_left( context[10], context[7], context[8] ) )
      continue;
    if( ! refalrts::empty_seq( context[7], context[8] ) )
      continue;
    //DEBUG: s.sNumber#1: 10

    refalrts::reset_allocator();
    //TRASH: {REMOVED TILE} </0 & Symbol/4 (/5 # Number/9 s.sNumber#1/10 )/6 {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ HalfReuse: # True/1 ]] }
    refalrts::reinit_ident( context[1], ident_True );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    refalrts::splice_to_freelist_open( trash_prev, res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence();

  do {
    // ( # Char s.idx )
    // </0 & Symbol/4 (/5 # Char/9 s.sChar#1/10 )/6 >/1
    context[7] = 0;
    context[8] = 0;
    if( ! refalrts::brackets_term( context[7], context[8], context[5] ) )
      continue;
    context[9] = refalrts::ident_left(  ident_Char, context[7], context[8] );
    if( ! context[9] )
      continue;
    if( ! refalrts::svar_left( context[10], context[7], context[8] ) )
      continue;
    if( ! refalrts::empty_seq( context[7], context[8] ) )
      continue;
    //DEBUG: s.sChar#1: 10

    refalrts::reset_allocator();
    //TRASH: {REMOVED TILE} </0 & Symbol/4 (/5 # Char/9 s.sChar#1/10 )/6 {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ HalfReuse: # True/1 ]] }
    refalrts::reinit_ident( context[1], ident_True );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    refalrts::splice_to_freelist_open( trash_prev, res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence();

  // t.idx
  // </0 & Symbol/4 t.tOther#1/5 >/1
  //DEBUG: t.tOther#1: 5

  refalrts::reset_allocator();
  //TRASH: {REMOVED TILE} </0 & Symbol/4 t.tOther#1/5 {REMOVED TILE}
  //RESULT: Tile{ [[ } Tile{ HalfReuse: # False/1 ]] }
  refalrts::reinit_ident( context[1], ident_False );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[1];
  refalrts::splice_to_freelist_open( trash_prev, res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_Symbol("Symbol", 786251477U, 1176157594U, func_Symbol);

static refalrts::FnResult func_Apply(refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  refalrts::this_is_generated_function();
  // issue here memory for vars with 11 elems
  refalrts::Iter context[11];
  refalrts::zeros( context, 11 );
  //FAST GEN: t.$ e.$
  //GLOBAL GEN: t.$ e.$
  // </0 & Apply/4 t.idx#0/5 e.idxV#0/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  context[6] = refalrts::tvar_left( context[5], context[2], context[3] );
  if( ! context[6] )
    return refalrts::cRecognitionImpossible;
  // closed e.idxV#0 as range 2
  do {
    // s.idx e.idx
    // </0 & Apply/4 s.sFuncName#1/5 e.eArg#1/2 >/1
    if( ! refalrts::svar_term( context[7], context[5] ) )
      continue;
    // closed e.eArg#1 as range 2
    //DEBUG: s.sFuncName#1: 5
    //DEBUG: e.eArg#1: 2

    refalrts::reset_allocator();
    //TRASH: {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 Reuse: & Mu/4 AsIs: s.sFuncName#1/5 AsIs: e.eArg#1/2 AsIs: >/1 ]] }
    refalrts::update_name( context[4], ref_Mu.ref.function );
    refalrts::push_stack( context[1] );
    refalrts::push_stack( context[0] );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence();

  // ( t.idx e.idx ) e.idx
  // </0 & Apply/4 (/5 t.tFunction#1/9 e.eBounded#1/7 )/6 e.eArg#1/2 >/1
  context[7] = 0;
  context[8] = 0;
  if( ! refalrts::brackets_term( context[7], context[8], context[5] ) )
    return refalrts::cRecognitionImpossible;
  // closed e.eArg#1 as range 2
  context[10] = refalrts::tvar_left( context[9], context[7], context[8] );
  if( ! context[10] )
    return refalrts::cRecognitionImpossible;
  // closed e.eBounded#1 as range 7
  //DEBUG: e.eArg#1: 2
  //DEBUG: t.tFunction#1: 9
  //DEBUG: e.eBounded#1: 7

  refalrts::reset_allocator();
  //TRASH: {REMOVED TILE} (/5 {REMOVED TILE} {REMOVED TILE} )/6 {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ AsIs: </0 AsIs: & Apply/4 } Tile{ AsIs: t.tFunction#1/9 } Tile{ AsIs: e.eBounded#1/7 } Tile{ AsIs: e.eArg#1/2 } Tile{ AsIs: >/1 ]] }
  refalrts::push_stack( context[1] );
  refalrts::push_stack( context[0] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[1];
  res = refalrts::splice_evar( res, context[2], context[3] );
  res = refalrts::splice_evar( res, context[7], context[8] );
  res = refalrts::splice_evar( res, context[9], context[10] );
  refalrts::splice_to_freelist_open( context[4], res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_Apply("Apply", 786251477U, 1176157594U, func_Apply);

static refalrts::FnResult func_Map(refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  refalrts::this_is_generated_function();
  // issue here memory for vars with 16 elems
  refalrts::Iter context[16];
  refalrts::zeros( context, 16 );
  //FAST GEN: e.$
  //GLOBAL GEN: t.$ e.$
  // </0 & Map/4 t.idx#0/5 e.idxV#0/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  context[6] = refalrts::tvar_left( context[5], context[2], context[3] );
  if( ! context[6] )
    return refalrts::cRecognitionImpossible;
  // closed e.idxV#0 as range 2
  do {
    // t.idx t.idx e.idx
    // </0 & Map/4 t.tFunction#1/5 t.tNextItem#1/7 e.eItems#1/2 >/1
    context[14] = context[2];
    context[15] = context[3];
    context[8] = refalrts::tvar_left( context[7], context[14], context[15] );
    if( ! context[8] )
      continue;
    // closed e.eItems#1 as range 14(2)
    //DEBUG: t.tFunction#1: 5
    //DEBUG: t.tNextItem#1: 7
    //DEBUG: e.eItems#1: 2

    refalrts::reset_allocator();
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 Reuse: & Apply/4 AsIs: t.tFunction#1/5 AsIs: t.tNextItem#1/7 } >/9 </10 & Map/11 t.tFunction#1/5/12 Tile{ AsIs: e.eItems#1/14(2) } Tile{ AsIs: >/1 ]] }
    if( ! refalrts::alloc_close_call( context[9] ) )
      return refalrts::cNoMemory;
    if( ! refalrts::alloc_open_call( context[10] ) )
      return refalrts::cNoMemory;
    if( ! refalrts::alloc_name( context[11], ref_Map.ref.function ) )
      return refalrts::cNoMemory;
    if (! refalrts::copy_evar(context[12], context[13], context[5], context[6]))
      return refalrts::cNoMemory;
    refalrts::update_name( context[4], ref_Apply.ref.function );
    refalrts::push_stack( context[1] );
    refalrts::push_stack( context[10] );
    refalrts::push_stack( context[9] );
    refalrts::push_stack( context[0] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    res = refalrts::splice_evar( res, context[14], context[15] );
    res = refalrts::splice_evar( res, context[9], context[13] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence();

  // t.idx
  // </0 & Map/4 t.tFunction#1/5 >/1
  if( ! refalrts::empty_seq( context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  //DEBUG: t.tFunction#1: 5

  refalrts::reset_allocator();
  //TRASH: {REMOVED TILE} </0 & Map/4 t.tFunction#1/5 >/1 {REMOVED TILE}
  //RESULT: Tile{ [[ } Tile{ ]] }
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = arg_end->next;
  refalrts::splice_to_freelist_open( trash_prev, res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_Map("Map", 786251477U, 1176157594U, func_Map);


//End of file
